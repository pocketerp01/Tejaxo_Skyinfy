using DevTrends.MvcDonutCaching;
using skyinfyMVC.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using System.Text;
using CrystalDecisions.Shared;

namespace skyinfyMVC.Controllers
{
    public class HrController : Controller
    {
        DateTimeFormatInfo monthName = new DateTimeFormatInfo();
        static string mq = "", mq1 = "", mq0 = "", mq2 = "", mq3 = "", vch_num = "", status = "", btnval = "", tab_name = "", type = "", type_desc = "", tab_name1 = "", where = "", mid_mst = "", m_id_mst = "", cond = "",
             cond_dpjoin = "", cond_dgjoin = "", cond_catjoin = "", status1 = "", status2 = "";
        //=========== HR =================
        string havetransport = "", isperadd = "N", isdisable = "N", sameas = "", gender = "", ismarried = "N", isspouseworking = "N",
            havechild = "", language = "", master_id = "", Master_Type = "", ent_date = "", emp_status = "N", emp_code = "", vpf = "N", ispflimit = "N", mage = "", fage = "";
        static string reslt = "";
        string ctype1 = "", ctype2 = "", ctype3 = "", finalpath1 = "", finalpath2 = "", finalpath3 = "", path1 = "", path2 = "", path3 = "", fileName1 = "",
            fileName2 = "", fileName3 = "", encpath1 = "", encpath2 = "", encpath3 = "", MyGuid = "", m_module3 = "";
        //============================
        bool res = false, ok = false, canbesaved = false;
        sgenFun sgen;
        Cmd_Fun cmd_Fun;
        public static bool isedit = false;
        public static int cli = 0;
        string userCode = "", html = "", userid_mst = "", cg_com_name = "", clientid_mst = "", username_mst = "", subdomain_mst = "", unitid_mst = "",
            role_mst = "", Ac_Year = "", actionName = "", controllerName = "", controls_mst = "", year_from = "", year_to = "", xprdrange = "", clientname_mst = "";
        private string emp_vchnum;
        //===============page fun==========
        #region all fun
        public void FillMst(string Myguid = "")
        {
            MyGuid = Myguid;
            //sgen = new sgenFun(MyGuid);
            if (MyGuid == "")
            {
                MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            }
            //if (MyGuid == "") MyGuid = sgen.GetCookie("", "MyGuid");
            sgen = new sgenFun(MyGuid);
            cmd_Fun = new Cmd_Fun(MyGuid);
            userCode = sgen.GetCookie(MyGuid, "userCode");
            userid_mst = sgen.GetCookie(MyGuid, "userid_mst");
            cg_com_name = sgen.GetCookie(MyGuid, "cg_com_name");
            clientid_mst = sgen.GetCookie(MyGuid, "clientid_mst");
            unitid_mst = sgen.GetCookie(MyGuid, "unitid_mst");
            role_mst = sgen.GetCookie(MyGuid, "role_mst");
            subdomain_mst = sgen.GetCookie(MyGuid, "subdomain_mst");
            Ac_Year = sgen.GetCookie(MyGuid, "Ac_Year");
            controls_mst = sgen.GetCookie(MyGuid, "controls_mst");
            actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
            sgen.SetSession(MyGuid, "viewName", actionName);
            sgen.SetSession(MyGuid, "controllerName", controllerName);
            username_mst = sgen.GetCookie(Myguid, "username_mst");
            year_to = sgen.GetCookie(MyGuid, "year_to");
            year_from = sgen.GetCookie(MyGuid, "year_from");
            clientname_mst = sgen.GetCookie(MyGuid, "clientname_mst");
            m_module3 = sgen.GetCookie(MyGuid, "m_module3");
            xprdrange = "and to_date(to_char(vch_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + year_from + "','" + sgen.Getsqldatetimeformat() + "') " +
                "and to_date('" + year_to + "','" + sgen.Getsqldatetimeformat() + "')";
        }
        public List<Tmodelmain> getload(List<Tmodelmain> model)
        {
            //if (userCode.Equals("")) Response.Redirect(sgen.GetCookie("", sgenFun.callbackurl));
            //if (Request.UrlReferrer == null) { Response.Redirect(sgen.GetCookie("", sgenFun.callbackurl)); }
            chkRef();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            tm1.Col13 = "Save";
            tm1.Col100 = "Save & New";
            tm1.Col121 = "S";
            tm1.Col122 = "<u>S</u>ave";
            tm1.Col123 = "Save & Ne<u>w</u>";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            return model;
        }
        public List<Tmodelmain> getnew(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            return model;
        }
        public List<Tmodelmain> getedit(List<Tmodelmain> model, DataTable dtt, string param)
        {
            sgen.SetSession(MyGuid, "EDMODE", "Y");
            model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
            model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
            model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
            model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
            model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
            model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + param + "'";
            model[0].Col13 = "Update";
            model[0].Col100 = "Update & New";
            model[0].Col121 = "U";
            model[0].Col122 = "<u>U</u>pdate";
            model[0].Col123 = "Update & Ne<u>w</u>";
            return model;
        }
        private List<Tmodelmain> StartCallback(List<Tmodelmain> model)
        {
            if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; sgen.GetSession(MyGuid, "btnval").ToString(); }
            else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
            model = CallbackFun(btnval, "N", actionName, controllerName, model);
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            return model;
        }
        private ActionResult CancelFun(List<Tmodelmain> model)
        {
            return RedirectToAction(actionName, new { @m_id = EncryptDecrypt.Encrypt(model[0].Col15), @mid = EncryptDecrypt.Encrypt(model[0].Col14) });
        }
        public DataRow getsave(string curdt, DataRow drn, List<Tmodelmain> model)
        {
            bool edit = false;
            if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
            {
                edit = true;
                vch_num = model[0].Col16.Trim();
            }
            else
            {
                edit = false;
                mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            }
            drn["vch_num"] = vch_num;
            drn["rec_id"] = "0";
            if (edit)
            {
                drn["ent_by"] = model[0].Col3;
                drn["ent_date"] = model[0].Col4;
                drn["client_id"] = clientid_mst;
                drn["client_unit_id"] = unitid_mst;
                drn["edit_by"] = userid_mst;
                drn["edit_date"] = curdt;
            }
            else
            {
                drn["ent_by"] = userid_mst;
                drn["ent_date"] = curdt;
                drn["edit_by"] = "-";
                drn["edit_date"] = curdt;
                drn["client_id"] = clientid_mst;
                drn["client_unit_id"] = unitid_mst;
            }
            return drn;
        }
        public void chkRef()
        {
            if (userCode.Equals("")) Response.Redirect(sgenFun.callbackurl);
            if (Request.UrlReferrer == null) { Response.Redirect(sgenFun.callbackurl); }
        }
        #endregion
        public bool sendmail_stream(string userCode, string client_id, string mail_to, string mailcc, Stream stream, string body_text, string title)
        {
            int portvalue = 0;
            string smtpvalue = "", emailIdvalue = "", passwordvalue = "", cgname = "";
            DataTable dtmail = new DataTable();
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + client_id + "' and type='CP'";
            dtmail = sgen.getdata(userCode, mq);
            if (dtmail.Rows.Count > 0)
            {
                smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
                emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
                passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
                portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
                cgname = sgen.GetCookie(MyGuid, "cg_com_name");
            }
            try
            {
                MailMessage msg = new MailMessage();
                msg.From = new MailAddress(emailIdvalue);
                msg.To.Add(mail_to);
                if (mailcc != "" && mailcc != "-")
                {
                    msg.CC.Add(mailcc);
                }
                var body = new StringBuilder();
                body.AppendLine("" + title + " - " + body_text + "");
                msg.Body = body.ToString();
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;
                Attachment attach = new Attachment(stream, new System.Net.Mime.ContentType("application/pdf"));
                attach.ContentDisposition.FileName = "salary_slip.pdf";
                msg.Attachments.Add(attach);
                smtp.Send(msg);
                msg.Dispose();
                return true;
            }
            catch (Exception err)
            {
                return false;
            }
        }
        //===============page fun==========
        //=====================make query===========
        #region make query
        public void Make_query(string viewname, string title, string btnval, string seektype, string param1, string param2, string Myguid)
        {
            string cond = "fstr";
            FillMst(Myguid);
            sgen.SetSession(MyGuid, "btnval", btnval);
            string cmd = "";
            switch (viewname.ToLower())
            {
                #region OT Entry
                case "OT_Entry":
                    switch (btnval)
                    {
                        case "EDIT":
                            cmd = "select distinct (a.client_id||a.client_unit_id||a.vch_num,to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                                " a.col10 as Month,to_char(a.vch_date,'yyyy') as Year,(d.first_name||' '||replace(d.middle_name,'0','')||' '||d.last_name) as Ent_By," +
                                "to_char(a.ent_date,'yyyymmdd') as Ent_date from enx_tab a inner join user_details d on a.ent_by= d.vch_num where a.type='OTE' and a.client_id='" + clientid_mst + "' " +
                                "and a.client_unit_id='" + unitid_mst + "' order by cast(a.col9 as Int)";
                            break;
                        case "VIEW":
                            cmd = "select (a.client_id||a.client_unit_id||a.vch_num,to_char(a.vch_date,'yyyymmdd'),a.type) as fstr,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as Employee_Name," +
                                " dp.master_name as Department,dg.master_name as Designation,ec.master_name as Employee_Category ,a.col10 as Month " +
                                ",a.col8 as OT_In_Hrs from enx_tab a inner join emp_master emp on a.col7=emp.vch_num " +
                                "inner join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                                "inner join master_setting dg on dg.master_id=emp.emp_desig and dg.type='MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')=1 " +
                                "inner join master_setting ec on ec.master_id=emp.emp_category and ec.type='KEC' and find_in_set(ec.client_unit_id,'" + unitid_mst + "')=1 " +
                                "where emp.type= 'EMP' and emp.emp_status='Y' and a.client_unit_id='" + unitid_mst + "' and a.client_unit_id= emp.client_unit_id ";
                            break;
                    }
                    break;
                #endregion
                #region EMPLOYEE DETAILS
                case "employee_details":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "DELETE":
                            string Fdate = sgen.server_datetime_dt(userCode).ToString("dd/MM/yyyy");
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                "emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode,emp.External_EmpNo," +
                                "to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as DOB, emp.f_name as Father_Name,emp.contact_no as ContactNo," +
                                "emp.pan_no as PANNo, to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
                                "(case when emp.emp_status!='R' and (case when to_char(emp.ex_dt,'yyyy')='1900' then 1 when emp.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 " +
                                "then 'Active' else 'Left' end) as Status" +
                                " from emp_master emp " +
                                "WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and emp.emp_status <> 'R' order by emp.emp_code asc";
                            break;
                        case "DETAIL":
                            Fdate = sgen.server_datetime_dt(userCode).ToString("dd/MM/yyyy");
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                "emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode,emp.External_EmpNo," +
                                "to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as DOB," +
                                "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.vid_no VID_No,emp.blood_grp as Blood_group," +
                                "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                                "emp.child_count as Child_Count," +
                                "emp.isspouseworking as IsSpWorking,emp.spouse_org as Spouse_Org,emp.spouse_desig as Spouse_Desig,emp.contact_no as ContactNo," +
                                "emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no as Emer_ContactNo,emp.email_id as Per_Email," +
                                "emp.emer_contact_name as Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation," +
                                "emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Desc,emp.pan_no as PANNo,emp.pf_no as PFNo," +
                                "emp.esi_no as ESINo,emp.passport_no as PassportNo,to_char(emp.passport_dt,'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                                "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
                                "emp.col1 as Referal_Person,latlng as Lat_Long,addr Address, pension_no PensionNo,off_email Offi_Email,off_contact Offi_Contact," +
                                "(case when emp.emp_status!='R' and (case when to_char(emp.ex_dt,'yyyy')='1900' then 1 when emp.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 " +
                                "then 'Active' else 'Left' end) as Status, emp.Account_No,emp.Ifsc_Code" +
                                " from emp_master emp " +
                                "WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and emp.emp_status <> 'R' order by emp.emp_code asc";
                            break;
                        case "ADD1":
                        case "ADD2":
                            cmd = "SELECT (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,pincode as Pincode,v_name as village," +
                                "teh_name as tehsil,district_name,state_name,country_name,region FROM country_state " +
                                "where type = 'CSV' and client_unit_id='" + unitid_mst + "'";
                            break;
                        case "CEMP":
                            //cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                            //    "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                            //    "emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode," +
                            //    "to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as DOB," +
                            //    "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.vid_no VID_No,emp.blood_grp as Blood_group," +
                            //    "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                            //    "emp.child_count as Child_Count," +
                            //    "emp.isspouseworking as IsSp_Working,emp.spouse_org as Spouse_Org,emp.spouse_desig as Spouse_Designation,emp.contact_no as ContactNo," +
                            //    "emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no as Emer_ContactNo,emp.email_id as Per_Email," +
                            //    "emp.emer_contact_name as Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation," +
                            //    "emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Desc,emp.pan_no as PANNo,emp.pf_no as PFNo," +
                            //    "emp.esi_no as ESI_No,emp.passport_no as PassportNo,to_char(emp.passport_dt,'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                            //    "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
                            //    "emp.col1 as Ref_Person,latlng as Lat_Long,addr Address, pension_no PensionNo,off_email Offi_Email,off_contact Offi_Contact from emp_master emp " +
                            //    "WHERE emp.type= 'EMP' and emp.client_id= '" + param1 + "' and emp.client_unit_id= '" + param2 + "'  order by emp.emp_code asc";

                            //02.03.2020
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                "emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as DOB," +
                                "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.contact_no as ContactNo,emp.email_id as Per_Email,emp.pan_no as PANNo,emp.pf_no as PFNo," +
                                "emp.esi_no as ESI_No,to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,off_email,off_contact from emp_master emp " +
                                "WHERE emp.type= 'EMP' and emp.client_id= '" + param1 + "' and emp.client_unit_id= '" + param2 + "'  order by emp.emp_code asc";
                            break;
                        case "RPTTO":
                        case "RPTTO2":
                            cmd = "select (emp.client_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                "emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                "emp.gender as Gender,emp.f_name as Father_Name,emp.contact_no as ContactNo,emp.email_id as Per_Email " +
                                "from emp_master emp WHERE emp.type= 'EMP' and emp.client_id= '" + clientid_mst + "'  order by emp.emp_code asc";
                            break;
                        case "UNIT":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr,cup_id unit_code,unit_name from company_unit_profile where unit_status='1' order by unit_name asc";
                            break;
                    }
                    break;
                #endregion
                #region EMPLOYEE DETAILS 2
                case "employee_details2":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                "emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode," +
                                "to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
                                "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.vid_no VID_No,emp.blood_grp as Blood_group," +
                                "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                                "emp.child_count as Child_Count," +
                                "emp.isspouseworking as IsSpWorking,emp.spouse_org as Spouse_Org,emp.spouse_desig as Spouse_Desig,emp.contact_no as ContactNo," +
                                "emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no as Emer_ContactNo,emp.email_id as Per_Email," +
                                "emp.emer_contact_name as Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation," +
                                "emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Desc,emp.pan_no as PANNo,emp.pf_no as PFNo," +
                                "emp.esi_no as ESINo,emp.passport_no as PassportNo,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                                "to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
                                "emp.col1 as Referal_Person,latlng as Lat_Long,addr Address, pension_no PensionNo,off_email Offi_Email,off_contact Offi_Contact from emp_master emp " +
                                "WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' order by emp.emp_code asc";
                            break;
                        case "ADD1":
                        case "ADD2":
                            cmd = "SELECT (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,pincode as Pincode,v_name as village," +
                                "teh_name as tehsil,district_name,state_gst_code,state_name,country_name,std_code,alpha_2,alpha_3,country_code,region FROM country_state " +
                                "where type = 'CSV' and client_unit_id='" + unitid_mst + "'";
                            break;
                        case "CEMP":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                "emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode," +
                                "to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
                                "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.vid_no VID_No,emp.blood_grp as Blood_group," +
                                "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                                "emp.child_count as Child_Count," +
                                "emp.isspouseworking as IsSp_Working,emp.spouse_org as Spouse_Org,emp.spouse_desig as Spouse_Designation,emp.contact_no as ContactNo," +
                                "emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no as Emer_ContactNo,emp.email_id as Per_Email," +
                                "emp.emer_contact_name as Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation," +
                                "emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Desc,emp.pan_no as PANNo,emp.pf_no as PFNo," +
                                "emp.esi_no as ESI_No,emp.passport_no as PassportNo,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                                "to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
                                "emp.col1 as Ref_Person,latlng as Lat_Long,addr Address, pension_no PensionNo,off_email Offi_Email,off_contact Offi_Contact from emp_master emp " +
                                "WHERE emp.type= 'EMP' and emp.client_id= '" + param1 + "' and emp.client_unit_id= '" + param2 + "'  order by emp.emp_code asc";
                            break;
                        case "UNIT":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr,cup_id unit_code,unit_name from company_unit_profile where unit_status='1' order by unit_name asc";
                            break;
                    }
                    break;
                #endregion
                #region employee_temp_status
                case "employee_temp_status":
                    switch (btnval)
                    {
                        case "EMP":
                            if (sgen.GetSession(MyGuid, "KCHKSTATUS") != null)
                            {
                                if (sgen.GetSession(MyGuid, "KCHKSTATUS").ToString() == "L")
                                {
                                    cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
"(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
"emp.gender as Gender," +
"to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
"emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.vid_no VID_No,emp.blood_grp as Blood_group," +
"emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
"emp.child_count as Child_Count," +
"emp.isspouseworking as IsSpouse_Working,emp.spouse_org as Spouse_Organisation,emp.spouse_desig as Spouse_Designation,emp.contact_no as Contact_No," +
"emp.alt_contact_no as Alternate_Contact_No,emp.emer_contact_no as Emergency_Contact_No,emp.email_id as Personal_Email," +
"emp.emer_contact_name as Emergency_Contact_Person_Name,emp.emer_contact_relation as Emergency_Contact_Person_Relation," +
"emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Description,emp.pan_no as PAN_No,emp.pf_no as PF_No," +
"emp.esi_no as ESI_No,emp.passport_no as Passport_No,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
"to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
"emp.col1 as Referal_Person,emp.emp_code as Employee_Code,latlng as Lat_Long,addr Address, pension_no Pension_No,off_email Official_Email,off_contact Official_Contact from emp_master emp " +
"WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and emp_status='Y' order by emp.rec_id";
                                }
                                else if (sgen.GetSession(MyGuid, "KCHKSTATUS").ToString() == "R")
                                {
                                    cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
"(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
"emp.gender as Gender," +
"to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
"emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.vid_no VID_No,emp.blood_grp as Blood_group," +
"emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
"emp.child_count as Child_Count," +
"emp.isspouseworking as IsSpouse_Working,emp.spouse_org as Spouse_Organisation,emp.spouse_desig as Spouse_Designation,emp.contact_no as Contact_No," +
"emp.alt_contact_no as Alternate_Contact_No,emp.emer_contact_no as Emergency_Contact_No,emp.email_id as Personal_Email," +
"emp.emer_contact_name as Emergency_Contact_Person_Name,emp.emer_contact_relation as Emergency_Contact_Person_Relation," +
"emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Description,emp.pan_no as PAN_No,emp.pf_no as PF_No," +
"emp.esi_no as ESI_No,emp.passport_no as Passport_No,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
"to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
"emp.col1 as Referal_Person,emp.emp_code as Employee_Code,latlng as Lat_Long,addr Address, pension_no Pension_No,off_email Official_Email,off_contact Official_Contact from emp_master emp " +
"WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and emp_status='Y' and temp_status='L' order by emp.rec_id";
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region bonus config
                case "bonus_config":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "SELECT (client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type) as fstr, " +
                                "(CASE WHEN col2='001' THEN 'Absolute' WHEN col2='002' THEN 'Percentage' END) Type, col4 Yearly_Bonus_Amount," +
                                "col8 Max_Earning_For_Bonus, " +
                                "(CASE WHEN col5='01' THEN 'No Bonus and Exgratia' WHEN col5='02' THEN 'Only Bonus Upto Limit' WHEN col5='03' THEN " +
                                "'Bonus Upto Limit and Balance Exgratia' WHEN col5='04' THEN 'Only Exgratia On Total' END) Bonus_If_Limit_Exceed, " +
                                "col6 Bonus_Per,col7 Exg_Per FROM enx_tab WHERE " +
                                "type='KBC' and client_unit_id='" + unitid_mst + "'";
                            break;
                        case "UNITS":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr,cup_id unit_code,unit_name from company_unit_profile where cup_id<>'" + unitid_mst + "' " +
                   "and unit_status='1'";
                            break;
                    }
                    break;
                #endregion
                //#region print_payslip
                //case "print_payslip":
                //    switch (btnval)
                //    {
                //        case "EMP":
                //            #region month checking
                //            int currmonth = sgen.Make_int(param1.Substring(9, 3));
                //            int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                //            string lastyyyymmm = "";
                //            string curryyyymmm = "";
                //            if (currmonth <= 12 && currmonth > 4)
                //            {
                //                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                //                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                //            }
                //            else if (currmonth == 1)
                //            {
                //                lastyyyymmm = curryear + sgen.padlc(12, 3);
                //                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                //            }
                //            else if (currmonth > 1 && currmonth < 4)
                //            {
                //                lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                //                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                //            }
                //            else if (currmonth == 4)
                //            {
                //                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                //                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                //            }
                //            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                //            #endregion
                //            cmd = "select * from (select distinct (es.client_id||es.client_unit_id||es.type||es.emp_code||es.currmmmyyyy) as fstr," +
                //                "emp.emp_code as Employee_Code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name," +
                //                "emp.gender as Gender,to_char(convert_tz(emp.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as DOB,emp.pob as Birth_Place," +
                //                "emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group,emp.f_name as Father_Name," +
                //                "emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                //                "emp.child_count as Child_Count,emp.isspouseworking as IsSp_Working,emp.spouse_org as Spouse_Org,emp.spouse_desig Sp_Desig," +
                //                "emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no Emer_ContNo, emp.email_id Per_Email," +
                //                "emp.emer_contact_name Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation,emp.isdisable as IsDisable," +
                //                "emp.dis_type Disability_Type, emp.dis_desc Disability_Desc, emp.pan_no PANNo,emp.pf_no as PFNo,emp.esi_no as ESINo," +
                //                "emp.passport_no as PassportNo,to_char(convert_tz(emp.passport_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                //                "to_char(convert_tz(emp.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as Date_Of_Joining,emp.col1 as Ref_Person from emp_salary_process es " +
                //                "inner join emp_master emp on emp.vch_num = es.emp_code and emp.type = 'EMP' and emp.client_unit_id = es.client_unit_id and to_number(emp.vch_num)>= " + sgen.Make_int((param1).Substring(3, 6).Trim()) + " and " +
                //                "emp.emp_dept in ('" + Regex.Split(param2, "!~!~!~!~!")[1].Trim().Replace(",", "','").Trim() + "') and emp.emp_desig in ('" + Regex.Split(param2, "!~!~!~!~!")[2].Trim().Replace(",", "','").Trim() + "') " +
                //                "where es.type = 'ESP' and es.client_unit_id = '" + unitid_mst + "' and es.currmmmyyyy = '" + curryyyymmm + "' " +
                //                "order by emp.emp_code) where rownum<= " + sgen.Make_int(Regex.Split(param2, "!~!~!~!~!")[0].Trim()) + "";
                //            break;
                //        case "EMPIC":
                //            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Employee_Code," +
                //                "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name," +
                //                "nvl(dp.master_name,'-') Dept,nvl(dg.master_name,'-') Desig,emp.gender as Gender,to_char(convert_tz(emp.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as DOB," +
                //                "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group," +
                //                "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo," +
                //                "emp.emer_contact_no as Emer_ContNo,emp.email_id as Per_Email,emp.emer_contact_name Emer_Per_Name,emp.emer_contact_relation Emer_Per_Relation," +
                //                "to_char(convert_tz(emp.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ from emp_master emp " +
                //                "left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                //                "left join master_setting dg on dg.master_id = emp.emp_dept and dg.type = 'MDG' and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                //                "WHERE emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "' and  emp.emp_dept in ('" + Regex.Split(param2, "!~!~!~!~!")[1].Trim().Replace(",", "','").Trim() + "') " +
                //                "and emp.emp_desig in ('" + Regex.Split(param2, "!~!~!~!~!")[2].Trim().Replace(",", "','").Trim() + "') and to_number(substr(emp_code,4,6)) >= " + sgen.Make_int(param1.Substring(3, 6).Trim()) + " " +
                //                "and rownum<= " + sgen.Make_int(Regex.Split(param2, "!~!~!~!~!")[0].Trim()) + " order by emp.vch_num asc";
                //            break;
                //    }
                //    break;
                //#endregion
                #region print_payslip_n
                case "print_payslip_n":
                    switch (btnval)
                    {
                        case "EMP":
                            #region month checking
                            int currmonth = sgen.Make_int(param1.Substring(9, 3));
                            int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                            string lastyyyymmm = "";
                            string curryyyymmm = "";
                            if (currmonth <= 12 && currmonth > 4)
                            {
                                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                            }
                            else if (currmonth == 1)
                            {
                                lastyyyymmm = curryear + sgen.padlc(12, 3);
                                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                            }
                            else if (currmonth > 1 && currmonth < 4)
                            {
                                lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                            }
                            else if (currmonth == 4)
                            {
                                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                            }
                            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                            #endregion
                            cmd = "select * from (select distinct (es.client_id||es.client_unit_id||es.type||es.emp_code||es.CURRYYYYMMM) as fstr," +
                                "emp.emp_code as Employee_Code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name," +
                                "emp.gender as Gender,to_char(convert_tz(emp.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as DOB,emp.pob as Birth_Place," +
                                "emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group,emp.f_name as Father_Name," +
                                "emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                                "emp.child_count as Child_Count,emp.isspouseworking as IsSp_Working,emp.spouse_org as Spouse_Org,emp.spouse_desig Sp_Desig," +
                                "emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no Emer_ContNo, emp.email_id Per_Email," +
                                "emp.emer_contact_name Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation,emp.isdisable as IsDisable," +
                                "emp.dis_type Disability_Type, emp.dis_desc Disability_Desc, emp.pan_no PANNo,emp.pf_no as PFNo,emp.esi_no as ESINo," +
                                "emp.passport_no as PassportNo,to_char(convert_tz(emp.passport_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                                "to_char(convert_tz(emp.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as Date_Of_Joining,emp.col1 as Ref_Person from PAYMAIN es " +
                                "inner join emp_master emp on emp.vch_num = es.emp_code and emp.type = 'EMP' and emp.client_unit_id = es.client_unit_id and to_number(emp.vch_num)>= " + sgen.Make_int((param1).Substring(3, 6).Trim()) + " and " +
                                "emp.emp_dept in ('" + Regex.Split(param2, "!~!~!~!~!")[1].Trim().Replace(",", "','").Trim() + "') and emp.emp_desig in ('" + Regex.Split(param2, "!~!~!~!~!")[2].Trim().Replace(",", "','").Trim() + "') " +
                                "where es.type = 'PAY' and es.client_unit_id = '" + unitid_mst + "' and es.CURRYYYYMMM = '" + curryyyymmm + "' " +
                                "order by emp.emp_code) where rownum<= " + sgen.Make_int(Regex.Split(param2, "!~!~!~!~!")[0].Trim()) + "";
                            break;
                        case "EMPIC":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Employee_Code," +
                                "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name," +
                                "nvl(dp.master_name,'-') Dept,nvl(dg.master_name,'-') Desig,emp.gender as Gender,to_char(convert_tz(emp.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as DOB," +
                                "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group," +
                                "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo," +
                                "emp.emer_contact_no as Emer_ContNo,emp.email_id as Per_Email,emp.emer_contact_name Emer_Per_Name,emp.emer_contact_relation Emer_Per_Relation," +
                                "to_char(convert_tz(emp.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ from emp_master emp " +
                                "left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                                "left join master_setting dg on dg.master_id = emp.emp_dept and dg.type = 'MDG' and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                                "WHERE emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "' and  emp.emp_dept in ('" + Regex.Split(param2, "!~!~!~!~!")[1].Trim().Replace(",", "','").Trim() + "') " +
                                "and emp.emp_desig in ('" + Regex.Split(param2, "!~!~!~!~!")[2].Trim().Replace(",", "','").Trim() + "') and to_number(substr(emp_code,4,6)) >= " + sgen.Make_int(param1.Substring(3, 6).Trim()) + " " +
                                "and rownum<= " + sgen.Make_int(Regex.Split(param2, "!~!~!~!~!")[0].Trim()) + " order by emp.vch_num asc";
                            break;
                    }
                    break;
                #endregion

                #region print_payslip_n
                case "print_payslip_mail":
                    switch (btnval)
                    {
                        case "EMP":
                            #region month checking
                            int currmonth = sgen.Make_int(param1.Substring(9, 3));
                            int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                            string lastyyyymmm = "";
                            string curryyyymmm = "";
                            if (currmonth <= 12 && currmonth > 4)
                            {
                                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                            }
                            else if (currmonth == 1)
                            {
                                lastyyyymmm = curryear + sgen.padlc(12, 3);
                                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                            }
                            else if (currmonth > 1 && currmonth < 4)
                            {
                                lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                            }
                            else if (currmonth == 4)
                            {
                                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                            }
                            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                            #endregion
                            cmd = "select * from (select distinct (es.client_id||es.client_unit_id||es.type||es.emp_code||es.CURRYYYYMMM) as fstr," +
                                "emp.emp_code as Employee_Code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name," +
                                "emp.gender as Gender,to_char(convert_tz(emp.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as DOB,emp.pob as Birth_Place," +
                                "emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group,emp.f_name as Father_Name," +
                                "emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                                "emp.child_count as Child_Count,emp.isspouseworking as IsSp_Working,emp.spouse_org as Spouse_Org,emp.spouse_desig Sp_Desig," +
                                "emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no Emer_ContNo, emp.email_id Per_Email," +
                                "emp.emer_contact_name Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation,emp.isdisable as IsDisable," +
                                "emp.dis_type Disability_Type, emp.dis_desc Disability_Desc, emp.pan_no PANNo,emp.pf_no as PFNo,emp.esi_no as ESINo," +
                                "emp.passport_no as PassportNo,to_char(convert_tz(emp.passport_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                                "to_char(convert_tz(emp.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as Date_Of_Joining,emp.col1 as Ref_Person from PAYMAIN es " +
                                "inner join emp_master emp on emp.vch_num = es.emp_code and emp.type = 'EMP' and emp.client_unit_id = es.client_unit_id and to_number(emp.vch_num)>= " + sgen.Make_int((param1).Substring(3, 6).Trim()) + " and " +
                                "emp.emp_dept in ('" + Regex.Split(param2, "!~!~!~!~!")[1].Trim().Replace(",", "','").Trim() + "') and emp.emp_desig in ('" + Regex.Split(param2, "!~!~!~!~!")[2].Trim().Replace(",", "','").Trim() + "') " +
                                "where es.type = 'PAY' and es.client_unit_id = '" + unitid_mst + "' and es.CURRYYYYMMM = '" + curryyyymmm + "' " +
                                "order by emp.emp_code) where rownum<= " + sgen.Make_int(Regex.Split(param2, "!~!~!~!~!")[0].Trim()) + "";
                            break;
                        case "EMPIC":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Employee_Code," +
                                "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name," +
                                "nvl(dp.master_name,'-') Dept,nvl(dg.master_name,'-') Desig,emp.gender as Gender,to_char(convert_tz(emp.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as DOB," +
                                "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group," +
                                "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo," +
                                "emp.emer_contact_no as Emer_ContNo,emp.email_id as Per_Email,emp.emer_contact_name Emer_Per_Name,emp.emer_contact_relation Emer_Per_Relation," +
                                "to_char(convert_tz(emp.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ from emp_master emp " +
                                "left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                                "left join master_setting dg on dg.master_id = emp.emp_dept and dg.type = 'MDG' and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                                "WHERE emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "' and  emp.emp_dept in ('" + Regex.Split(param2, "!~!~!~!~!")[1].Trim().Replace(",", "','").Trim() + "') " +
                                "and emp.emp_desig in ('" + Regex.Split(param2, "!~!~!~!~!")[2].Trim().Replace(",", "','").Trim() + "') and to_number(substr(emp_code,4,6)) >= " + sgen.Make_int(param1.Substring(3, 6).Trim()) + " " +
                                "and rownum<= " + sgen.Make_int(Regex.Split(param2, "!~!~!~!~!")[0].Trim()) + " order by emp.vch_num asc";
                            break;
                    }
                    break;
                #endregion
                #region emp_salary_process
                case "emp_salary_process":
                    //                    switch (btnval)
                    //                    {
                    //                        case "EDIT":
                    //                        case "VIEW":
                    //                            cmd = "select distinct (currmmmyyyy||type||client_id||client_unit_id) fstr,Month_Name, currmmmyyyy as Month_id from emp_salary_process where " +
                    //                                "type='ESP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    //                            break;
                    //                        case "EDIT1":
                    //                            cmd = @"select a.* from (select (a.currmmmyyyy || a.type || a.client_id || a.client_unit_id||b.vch_num) as fstr, a.vch_num, a.month_id, a.currmmmyyyy, a.head_count as newamount, b.emp_code EmpCode, external_empno External_EmpCode,
                    //trim((b.FIRST_NAME || ' ' || REPLACE(b.MIDDLE_NAME, '0', '') || ' ' || REPLACE(b.LAST_NAME, '0', ''))) Employee_Name,a.month_name || ' (' || a.month_id || ')' Month,
                    //a.month_days Days, a.pdays Presents, a.wdays Wkoff, a.hdays HLDay, a.OT_hrs, a.Paid_days, a.Bal_ADV,upper(a.head_name || ' (' || a.head_id || ')') headname,
                    //to_char(a.vch_date, 'yyyy-MM-dd HH24:MI:ss') as vch_date ,to_char(a.ent_date, 'yyyy-MM-dd HH24:MI:ss') as ent_date,a.ent_by ,to_number(nvl(c.col41,a.head_id)) as ordd from
                    //  emp_salary_process a inner join emp_master b on a.emp_code = b.vch_num and a.client_id = b.client_id and a.client_unit_id = b.client_unit_id left outer join  vehicle_master c on
                    //trim(a.head_id) = trim(c.vch_num) and a.client_id = c.client_id and a.client_unit_id = c.client_unit_id and c.type = 'KSP'  where (a.currmmmyyyy || a.type || a.client_id || a.client_unit_id) in
                    //('" + param1 + "') ) a order by ordd";
                    //                            DataTable dte = sgen.getdata(userCode, "select distinct vch_num,to_char(vch_date,'" + sgen.GetSaveSqlDateFormat() + "') as vch_date," +
                    //                                "to_char(ent_date,'" + sgen.GetSaveSqlDateFormat() + "') as ENT_date,currmmmyyyy,substr(currmmmyyyy,1,4) yr,substr(currmmmyyyy,6,2) mn,month_id,MONTH_NAME Month,ent_by,month_days as days from emp_salary_process " +
                    //                                "where (currmmmyyyy || type || client_id || client_unit_id)='" + param1 + "'");
                    //                            string Fdate = "01/" + dte.Rows[0]["mn"].ToString() + "/" + dte.Rows[0]["yr"].ToString();
                    //                            cmd = @"select '" + param1 + "'||b.vch_num as fstr,'" + dte.Rows[0]["vch_num"].ToString() + "' as vch_num,'" + dte.Rows[0]["month_id"].ToString() + "' as month_id," +
                    //                                " '" + dte.Rows[0]["currmmmyyyy"].ToString() + "' as currmmmyyyy,'" + dte.Rows[0]["Month"].ToString() + "' as Month," +
                    //                                "to_date('" + dte.Rows[0]["vch_date"].ToString() + "','" + sgen.GetSaveSqlDateFormat() + "') vch_date ," +
                    //                                "to_date('" + dte.Rows[0]["ent_date"].ToString() + "','" + sgen.GetSaveSqlDateFormat() + "') ent_date,'" + dte.Rows[0]["ent_by"].ToString() + "'  ent_by," +
                    //                                " a.newamount,nvl(a.Days,'0') Days,nvl(a.presents,'0') presents, nvl(a.Wkoff,'0') Wkoff, nvl(a.HLDay,'0') HLDay,nvl(a.OT_hrs,'0') OT_hrs,nvl( a.Paid_days,'0') Paid_days," +
                    //                                "nvl( a.Bal_ADV,'0') Bal_ADV,a.headname ,a.ordd,b.emp_code EmpCode, b.external_empno External_EmpCode," +
                    //                                "trim((b.FIRST_NAME || ' ' || REPLACE(b.MIDDLE_NAME, '0', '') || ' ' || REPLACE(b.LAST_NAME, '0', ''))) Employee_Name from emp_master b left join  (" +
                    //                                "select a.client_id,a.client_unit_id,a.emp_code, a.vch_num, a.month_id, a.currmmmyyyy, a.head_count as newamount, " +
                    //                                "a.month_name || ' (' || a.month_id || ')' Month,a.month_days Days, a.pdays Presents, a.wdays Wkoff, a.hdays HLDay, a.OT_hrs, a.Paid_days, a.Bal_ADV," +
                    //                                "upper(a.head_name || ' (' || a.head_id || ')') headname,to_char(a.vch_date, 'yyyy-MM-dd HH24:MI:ss') as vch_date ,to_char(a.ent_date, 'yyyy-MM-dd HH24:MI:ss') " +
                    //                                "as ent_date,a.ent_by ,to_number(nvl(c.col41,a.head_id)) as ordd from emp_salary_process a left outer join  vehicle_master c " +
                    //                                "on trim(a.head_id) = trim(c.vch_num) and a.client_id = c.client_id and a.client_unit_id = c.client_unit_id and c.type = 'KSP' " +
                    //                                "where (a.currmmmyyyy || a.type || a.client_id || a.client_unit_id) in ('" + param1 + "')) a on" +
                    //                                " a.emp_code = b.vch_num and a.client_id = b.client_id and a.client_unit_id = b.client_unit_id where b.client_id='" + clientid_mst + "' " +
                    //                                "and b.client_unit_id='" + unitid_mst + "' and  b.type = 'EMP' and b.emp_status!='R' and " +
                    //                                "(case when to_char(b.ex_dt,'yyyy')='1900' then 1 when b.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1";
                    //                            DataTable dtesp = sgen.getdata(userCode, cmd);
                    //                            if (dtesp.Rows.Count > 0)
                    //                            {
                    //                                Pivot pv = new Pivot(dtesp, MyGuid);
                    //                                dtesp = pv.PivotData("newamount", AggregateFunction.Sum, new string[] { "fstr", "EmpCode", "External_EmpCode", "Employee_Name", "Month", "Days", "Presents", "Wkoff", "HLDay", "OT_hrs", "Paid_days", "Bal_ADV" }, new string[] { "headname" });
                    //                                //dtesp = ESCalc(dtesp);
                    //                                sgen.open_grid_dt("select Employee to Edit Salary", dtesp, 2);
                    //                                ViewBag.pageurl = sgen.GetSession(MyGuid, "pageurl").ToString();
                    //                                return;
                    //                            }
                    //                            break;
                    //                    }
                    break;
                #endregion
                #region paymain
                case "paymain":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select distinct curryyyymmm||client_unit_id fstr, curryyyymmm as Month_id,to_char(m_lastdt,'Month') as Month_Name,VCH_NUM,TO_CHAR(VCH_DATE,'DD/MM/YYYY') AS VCH_DATE from paymain where " +
                                "type='PAY' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' " +
                                "and to_date(to_char(M_LASTDT,'ddMMyyyy'),'ddMMyyyy') between to_date('" + year_from + "','" + sgen.Getsqldatetimeformat() + "') " +
                "and to_date('" + year_to + "','" + sgen.Getsqldatetimeformat() + "')+1 ORDER BY Month_id DESC";
                            break;
                    }
                    break;
                #endregion
                #region attn
                case "attn":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select distinct curryyyymmm||client_unit_id||VCH_NUM||TO_CHAR(VCH_DATE,'DDMMYYYY') fstr, curryyyymmm as Month_id,to_char(m_lastdt,'Month') as Month_Name,VCH_NUM,TO_CHAR(VCH_DATE,'DD/MM/YYYY') AS VCH_DATE from ATTN where " +
                                "type='ATN' and client_unit_id='" + unitid_mst + "' ORDER BY Month_id DESC";
                            break;
                    }
                    break;
                #endregion
                #region emp_attendance
                case "emp_attendance":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select distinct (curryyyymmm||type||client_id||client_unit_id) fstr,Month_Name, curryyyymmm as Month_id from leave_ob where type='EAT' and client_id='" + clientid_mst + "' " +
                    "and client_unit_id='" + unitid_mst + "'";
                            break;
                        case "EMP":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME," +
                                "'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode OldEmpCode," +
                                "to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB,emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue," +
                                "emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group,emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married," +
                                "emp.spouse_name as Spouse_Name,emp.havechild as Have_Child,emp.child_count as Child_Count,emp.isspouseworking as IsSpouse_Working," +
                                "emp.spouse_org as Spouse_Organisation,emp.spouse_desig as Spouse_Designation,emp.contact_no as Contact_No,emp.alt_contact_no as Alternate_Contact_No," +
                                "emp.emer_contact_no as Emergency_Contact_No,emp.email_id as Personal_Email,emp.emer_contact_name as Emergency_Contact_Person_Name," +
                                "emp.emer_contact_relation as Emergency_Contact_Person_Relation,emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc Disability_Description," +
                                "emp.pan_no as PAN_No,emp.pf_no as PF_No,emp.esi_no as ESI_No,emp.passport_no as Passport_No,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone()
                                + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid,to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') " +
                                "as Date_Of_Joining,emp.col1 as Referal_Person from emp_master emp WHERE emp.type= 'EMP' and emp.client_unit_id= '"
                                + unitid_mst + "' and  to_char(emp.ex_dt,'yyyy')='1900' order by emp.rec_id";
                            break;
                    }
                    break;
                #endregion
                #region lwf_setting
                case "lwf_setting":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = mq = "SELECT (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,col1 as LWF_Deduction_on_the_Basis_Of," +
                        "(case when col12 = '001' then 'Do Not Deduct LWF on Arrear' else col12 end) as Deduct_LWF_On_Arrear,col3 as Deduct_LWF_On_Settlement,col4 LWF_Registration_No,col11 as Employee_Contribution,col15 as Employer_Contribution, " +
                        "col13 as Minimum_Limit,col14 as Maximum_Limit,col17 Emp_Percentage,col18 Empr_Percentage from vehicle_master where type = 'KLW' " +
                        "and client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "UNITS":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr,cup_id unit_code,unit_name from company_unit_profile where cup_id<>'" + unitid_mst + "' " +
                     "and unit_status='1'";
                            break;
                    }
                    break;
                #endregion
                #region esi_setting
                case "esi_setting":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr,col1,col2,col3,col4,col5,col6,col7,col8," +
                        "col9,col10,col11,col12,col13,col14,to_char(convert_tz(col16,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as col16 " +
                        "from  vehicle_master where type = 'KES' and client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "ESISIG":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                  "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                  "emp.gender as Gender,to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
                                  "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group," +
                                  "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                                  "emp.child_count as Child_Count," +
                                  "emp.isspouseworking as IsSp_Working,emp.spouse_org as Spouse_Org,emp.spouse_desig as Sp_Desig,emp.contact_no as ContactNo," +
                                  "emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no as Emer_ContNo,emp.email_id as Per_Email," +
                                  "emp.emer_contact_name as Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation," +
                                  "emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Desc,emp.pan_no as PANNo,emp.pf_no as PFNo," +
                                  "emp.esi_no as ESINo,emp.passport_no as PassportNo,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                                  "to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOJ," +
                                  "emp.col1 as Ref_Person,emp.emp_code as Employee_Code from emp_master emp WHERE emp.type= 'EMP' and emp.client_unit_id= '" + unitid_mst + "' " +
                                  "and to_char(emp.ex_dt,'yyyy')='1900' and emp.emp_status='Y' order by emp.rec_id";
                            break;
                        case "UNITS":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr,cup_id unit_code,unit_name from company_unit_profile where cup_id<>'" + unitid_mst + "' " +
                    "and unit_status='1' order by unit_name asc";
                            break;
                    }
                    break;
                #endregion
                #region pf_setting
                case "pf_setting":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr,col1,col2,col3,col4,col5,col6,col7,col8," +
                         "col9,col10,col11,col12,col13,col14,col15,to_char(convert_tz(col16,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as col16," +
                         "col17,col18,col19,col20,col21,col25,col28,col29,col30,col31,col32,col33,col34,col36,col37,col38,col39 from  vehicle_master " +
                         "where type = 'KPF' and client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "PFSIG":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
"(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
"emp.gender as Gender," +
"to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
"emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group," +
"emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
"emp.child_count as Child_Count," +
"emp.isspouseworking as IsSpouse_Working,emp.spouse_org as Spouse_Organisation,emp.spouse_desig as Spouse_Designation,emp.contact_no as Contact_No," +
"emp.alt_contact_no as Alternate_Contact_No,emp.emer_contact_no as Emergency_Contact_No,emp.email_id as Personal_Email," +
"emp.emer_contact_name as Emergency_Contact_Person,emp.emer_contact_relation as Emergency_Contact_Person_R," +
"emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Description,emp.pan_no as PAN_No,emp.pf_no as PF_No," +
"emp.esi_no as ESI_No,emp.passport_no as Passport_No,to_char(emp.passport_dt,'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
"to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
"emp.col1 as Referal_Person,emp.emp_code as Employee_Code from emp_master emp " +
"WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and emp.emp_status='Y' order by emp.rec_id";
                            break;
                        case "UNITS":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr,unit_code,unit_name from company_unit_profile where cup_id<>'" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region configure_rule
                case "configure_rule":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "SELECT (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr,col1 as Calculation_Of_Basic_Salary," +
                          "col2 as Basic_as_a_Percentage_of_CTC,col3 Minimum_Basic,col4 Salary_Definition,col7 Payslip_Format,col8 Base_Days," +
                          "col9 Max_Restricted_Holidays,col10 Compoff_Treatment,col11 Cutoff_Days, col12 Cutoff_Rule,col13 New_Joinee_Cutoff_Date,col14 Send_Mail_Enabled_For_Publish," +
                          "col15 Employee_Confirmation_On from vehicle_master where type = 'KCR' and client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "PSF":
                            cmd = "select (client_id||master_id||to_char(vch_date, 'yyyymmdd')||type) as fstr,master_name as Payslip from master_setting " +
                                "where type='PSF'";
                            break;
                        case "UNITS":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr, unit_code,unit_name from company_unit_profile where cup_id<>'" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region holiday_type
                case "holiday_type":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            if (mid_mst == "9002.6")
                            {
                                //cmd = "SELECT (en.client_id|| en.client_unit_id|| en.vch_num|| to_char(en.vch_date,'yyyymmdd')||en.type) as fstr, " +
                                //"(to_char(convert_tz(ly.From_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')|| ' - '|| " +
                                //"to_char(convert_tz(ly.To_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Leave_Year," +
                                //"vm.col2 Branch,en.col4 Day, en.col5 Week, en.col6 Half_Day, en.col7 Consider_Full_Day_Rule from enx_tab en " +
                                //"INNER join add_academic_year ly on en.col1 = ly.academic_year_id and ly.type = 'LYR' and ly.client_id = en.client_id " +
                                //"inner JOIN vehicle_master vm on find_in_set(vm.vch_num,en.col2)=1 and vm.type='LOM' and vm.client_unit_id='" + unitid_mst + "' " +
                                //"where en.client_unit_id = '" + unitid_mst + "' and en.type = 'KHD' order by en.vch_num";

                                cmd = "SELECT (en.client_id|| en.client_unit_id|| en.vch_num|| to_char(en.vch_date,'yyyymmdd')||en.type) as fstr," +
                                    "(to_char(convert_tz(ly.From_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') || ' - ' || to_char(convert_tz(ly.To_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Leave_Year" +
                                    ",group_concat(vm.col2) Branch,en.col4 Day, en.col5 Week, en.col6 Half_Day, en.col7 Consider_Full_Day_Rule from enx_tab en INNER join add_academic_year ly " +
                                    "on en.col1 = ly.academic_year_id and ly.type = 'LYR' and ly.client_id = en.client_id inner JOIN vehicle_master vm on find_in_set(vm.vch_num, en.col2)= 1 and vm.type" +
                                    " = 'LOM' and vm.client_unit_id = '" + unitid_mst + "' where en.client_unit_id = '" + unitid_mst + "' and en.type = 'KHD' group by " +
                                    "(en.client_id|| en.client_unit_id || en.vch_num || to_char(en.vch_date, 'yyyymmdd') || en.type), en.col4, en.col5, en.col6, en.col7," +
                                    "(to_char(convert_tz(ly.From_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') || ' - ' || to_char(convert_tz(ly.To_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) ";

                            }
                            if (mid_mst == "9002.7")
                            {
                                //    cmd = "SELECT (en.client_id||en.client_unit_id|| en.vch_num|| to_char(en.vch_date,'yyyymmdd')||en.type) as fstr, " +
                                //"(to_char(convert_tz(ly.From_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')|| ' - '|| " +
                                //"to_char(convert_tz(ly.To_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Leave_Year," +
                                //"vm.col2 Branch,to_char(convert_tz(en.date1, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as From_Date," +
                                //"to_char(convert_tz(en.date2, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') To_Date,en.col3 Holiday_Name," +
                                //"en.col4 Optional_Holiday from enx_tab en INNER join add_academic_year ly on en.col1 = ly.academic_year_id and ly.type = 'LYR' " +
                                //"and ly.client_id = en.client_id inner JOIN vehicle_master vm on find_in_set(vm.vch_num,en.col2)=1 and " +
                                //"vm.type='LOM' and vm.client_unit_id='" + unitid_mst + "' where en.client_unit_id = '" + unitid_mst + "' and en.type = 'KGH' order by en.vch_num desc";

                                cmd = "SELECT (en.client_id||en.client_unit_id|| en.vch_num|| to_char(en.vch_date,'yyyymmdd')||en.type) as fstr," +
                                    "(to_char(convert_tz(ly.From_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') || ' - ' || to_char(convert_tz(ly.To_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Leave_Year" +
                                    ",group_concat(vm.col2) Branch,to_char(convert_tz(en.date1, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as From_Date,to_char(convert_tz(en.date2, 'UTC', '" + sgen.Gettimezone() + "'), " + sgen.Getsqldateformat() + "') To_Date," +
                                    "en.col3 Holiday_Name, en.col4 Optional_Holiday from enx_tab en INNER join add_academic_year ly on en.col1 = ly.academic_year_id " +
                                    "and ly.type = 'LYR' and ly.client_id = en.client_id inner JOIN vehicle_master vm on find_in_set(vm.vch_num, en.col2)= 1 and vm.type = 'LOM' and " +
                                    "vm.client_unit_id = '" + unitid_mst + "' where en.client_unit_id = '" + unitid_mst + "' and en.type = 'KGH' group by(en.client_id|| en.client_unit_id || en.vch_num || to_char(en.vch_date, 'yyyymmdd') || en.type)," +
                                    "(to_char(convert_tz(ly.From_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') || ' - ' || to_char(convert_tz(ly.To_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')),to_char(convert_tz(en.date1, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
                                    "to_char(convert_tz(en.date2, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),en.col3,en.col4";
                            }
                            break;
                    }
                    break;
                #endregion
                #region ot_config
                case "ot_config":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            //cmd = "SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                            //" GROUP_CONCAT(DISTINCT b.col1)  as Earning_head, (CASE WHEN a.col2=100 then 'Single' WHEN a.col2=200 THEN 'Double' WHEN a.col2=0 THEN 'None' END) as OT_Multiply," +
                            //"(CASE WHEN a.col3=001 THEN '30 days' WHEN a.col3=002 THEN '31 days' WHEN a.col3=003 THEN 'Actual Days In A Month' END)" +
                            //" as Monthly_Days_For_OT,a.col4 as Per_Day_Hr FROM  enx_tab a INNER JOIN vehicle_master b on a.col1=b.vch_num and b.type='KSP'" +
                            //" and a.client_id=b.client_id and a.client_unit_id=b.client_unit_id WHERE a.Type='OTC'  and a.client_id='" + clientid_mst + "'" +
                            //" and a.client_unit_id='" + unitid_mst + "'  group by a.col2,a.col3,a.col4,a.vch_num,a.client_id,a.client_unit_id,a.vch_date,a.type";
                            cmd = "SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                      " nvl(GROUP_CONCAT(DISTINCT b.col1),'-')  as Earning_head, (CASE WHEN a.col2=100 then 'Single' WHEN a.col2=200 THEN 'Double' WHEN a.col2=0 THEN 'None' END) as OT_Multiply," +
                      "(CASE WHEN a.col3='26' THEN '26 days' WHEN a.col3='30' THEN '30 days' WHEN a.col3='31' THEN '31 days' WHEN a.col3='01' THEN 'Actual Days In A Month' END)" +
                      " as Monthly_Days_For_OT,a.col4 as Per_Day_Hr FROM enx_tab a left JOIN vehicle_master b on a.col1=b.vch_num and b.type='KSP'" +
                      " and a.client_unit_id=b.client_unit_id WHERE a.Type='OTC' and a.client_unit_id='" + unitid_mst + "'  group by  (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type)," +
                      " (CASE WHEN a.col2=100 then 'Single' WHEN a.col2=200 THEN 'Double' WHEN a.col2=0 THEN 'None' END)," +
                      "(CASE WHEN a.col3='26' THEN '26 days' WHEN a.col3='30' THEN '30 days' WHEN a.col3='31' THEN '31 days' WHEN a.col3='01' THEN 'Actual Days In A Month' END),a.col4";
                            break;
                        case "UNITS":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr,unit_code,unit_name from company_unit_profile where cup_id<>'" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region salary_advance
                case "salary_advance":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT (en.client_id||en.client_unit_id||en.vch_num||to_char(en.vch_date, 'yyyymmdd')||en.type) as fstr,en.col1 as Policy_Name," +
                         "en.col2 as Advance_type,to_char(convert_tz(en.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') Advance_Date_Of_Joining," +
                         "en.col3 Maximum_No_Of_EMI,en.col4 Rate_Of_Interest,en.col5 Pay_Group,GROUP_CONCAT(DISTINCT sh.col1) Pay_Component,en.col7 Allow_Exception from enx_tab " +
                         "en left JOIN vehicle_master sh on sh.vch_num=en.col6 and sh.type='KSP'and sh.client_unit_id = '" + unitid_mst + "' " +
                         "where en.type = 'KAS' and en.client_unit_id = '" + unitid_mst + "' group by (en.client_id||en.client_unit_id||" +
                         "en.vch_num||to_char(en.vch_date, 'yyyymmdd')||en.type),en.col1,en.col2,en.col3,en.col4,en.col5,en.col7,en.date1";
                            break;
                    }
                    break;
                #endregion
                #region location_master
                case "location_master":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = @"select DISTINCT (vm.client_id||vm.client_unit_id||vm.vch_num|| to_char(vm.vch_date, 'yyyymmdd')||vm.type) as fstr,vm.col39 as Location,cnt.state_name,
                               vm.col2 as City,vm.col3 as Metro,vm.col4 as PT_Number,vm.col7 as Max_Restricted_Holidays,vm.col8 as ESI_Number,vm.col9 as ESI_Type,
                               to_char(convert_tz(vm.date1, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as Pay_Effective_Month,vm.col10 as Active,vm.col11 as TAN,vm.col12 as TAN_Circle," +
                                "(b.First_name|| ' '|| b.middle_name|| ' '|| b.last_name) as Ent_By, to_char(convert_tz(vm.ent_date, 'UTC', '" + sgen.Gettimezone() + "'), " + "'" + sgen.Getsqldateformat() + "') as Ent_Date " +
                                "from vehicle_master vm inner join user_details b on vm.ent_by = b.vch_num and b.type = 'CPR' inner join(select state_gst_code, state_name from country_state) cnt on " +
                                 "vm.col1 = cnt.state_gst_code where vm.type = 'LOM' AND vm.client_unit_id = '" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region canteen_config
                case "canteen_config":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) fstr,a.col1 as Rate_in_rs from enx_tab2 a " +
                                "where a.type = 'KCD' and a.client_unit_id = '" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region create_team
                case "create_team":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select (en.client_id|| en.client_unit_id|| en.vch_num|| to_char(en.vch_date, 'yyyymmdd')|| en.type) as fstr," +
                        "(ud.FIRST_NAME|| ' '|| ud.MIDDLE_NAME|| ' '|| ud.LAST_NAME || ''|| ud.user_id) as Team_Leader," +
                        "(udd.FIRST_NAME|| ' '|| udd.MIDDLE_NAME|| ' '|| udd.LAST_NAME||''|| udd.user_id) as Team_Members " +
                        "from enx_tab en INNER JOIN user_details ud on en.col2 = ud.vch_num and ud.type = 'CPR' " +
                        "INNER JOIN user_details udd on en.col3 = udd.vch_num and udd.type = 'CPR' " +
                        "where en.client_unit_id = '" + unitid_mst + "' and en.type = 'KTM'";
                            break;
                    }
                    break;
                #endregion
                #region daily_work
                case "daily_work":
                    switch (btnval)
                    {
                        case "LEADER":
                            //if (!value1.Trim().Equals(""))
                            {
                                cmd = "select (en.client_id|| en.client_unit_id|| en.vch_num|| to_char(en.vch_date, 'yyyymmdd'), en.type) as fstr, " +
                  "en.vch_num as Doc_No,en.col1 as Menu_Id, en.col2 as Menu_Name,en.col3 as Menu_Link, en.col4 as Module_Id,en.col5 as Module_Name," +
                  "en.col6 as Remark, convert_tz(en.vch_date, '+0:00', '" + sgen.Gettimezone() + "') as Entry_Date," +
                  "date_format(convert_tz(en.date1, '+0:00', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldatetimeformat() + "') as Work_Date, ud.USER_ID, " +
                  "concat(ud.FIRST_NAME, ' ', ud.MIDDLE_NAME, ' ', ud.LAST_NAME) as Ent_By " +
                  "from enx_tab en INNER JOIN user_details ud on en.ent_by = ud.vch_num and ud.type = 'CPR' " +
                  "where en.client_unit_id = '" + unitid_mst + "' and en.type = '" + type + "' and en.ent_by in ('1') order by en.vch_num desc";
                            }
                            break;
                        case "EDIT":
                        case "VIEW":
                            if (sgen.GetSession(MyGuid, "tmp_dailywrk") != null)
                            {
                                mq = "select '-' as fstr,vch_num as DOC_NO,vch_date as DOC_DATE ,col2 as menu_id,col2 as Select_Menu,col5 Module," +
                                    "col6 Remark ,col7 Select_Client,'' Client_Address,'' CONTACT_PERSON,'' as CLIENT_CONTACT_NUMBER ," +
                                    "col8 as Nature_Of_Work,date1 as WORK_DATE from enx_tab where 1=2";
                                DataTable dtmain = sgen.getdata(userCode, mq);
                                DataTable dtdaily = (DataTable)sgen.GetSession(MyGuid, "tmp_dailywrk");
                                dtdaily = sgen.seekval_dt(dtdaily, "param2='Y'");
                                string[] param3 = dtdaily.AsEnumerable().Select(r => r.Field<string>("Param3")).ToArray();
                                if (param3.Length > 0)
                                {
                                    foreach (DataColumn col in dtmain.Columns)
                                    {
                                        string colname = col.ToString();
                                        for (Int32 i = 0; i < param3.Length; i++)
                                        {
                                            string ctrcol = param3[i].ToString();
                                            if (ctrcol.Contains('.'))
                                            {
                                                ctrcol = ctrcol.Replace('.', ' ');
                                            }
                                            if (ctrcol.Contains(' '))
                                            {
                                                ctrcol = ctrcol.TrimEnd().Replace(' ', '_');
                                            }
                                            if (colname == ctrcol)
                                            {
                                                cond = cond + ',' + ctrcol;
                                            }
                                        }
                                    }
                                }
                            }
                            cmd = "select (en.client_id|| en.client_unit_id||en.vch_num|| to_char(en.vch_date, 'yyyymmdd')|| en.type) as fstr,cm.c_name as Select_Client" +
                                " ,cm.cpaddr as Client_Address,cm.cpname CONTACT_PERSON, cm.cpcont CLIENT_CONTACT_NUMBER,n.master_name as Nature_Of_Work , " +
                         "en.vch_num as Doc_No,en.col1 as Menu_Id, en.col2 as Select_Menu,en.col3 as Menu_Link, en.col4 as Module_Id,en.col5 as Module, " +
                         "en.col6 as Remark, to_char(convert_tz(en.vch_date, 'UTC', '" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as DOC_Date," +
                         "to_char(convert_tz(en.date1, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldatetimeformat() + "') as Work_Date,ud.USER_ID, " +
                         "(ud.FIRST_NAME|| ' '|| ud.MIDDLE_NAME|| ' '|| ud.LAST_NAME) as Ent_By " +
                         "from enx_tab en left join clients_mst cm on cm.vch_num =en.col7 and cm.type='BCD' and en.client_unit_id=cm.client_unit_id" +
                         "  INNER JOIN user_details ud on en.ent_by = ud.vch_num and ud.type = 'CPR' left join master_setting n on " +
                         " en.col8=n.master_id and n.type='NOW' and find_in_set(n.client_unit_id,'" + unitid_mst + "')=1 " +
                         "where en.client_unit_id = '" + unitid_mst + "' and en.type = 'PER' " +
                         "and en.ent_by='" + userid_mst + "'" +
                         " order by en.vch_num desc";
                            cmd = "select " + cond + " from (" + cmd + ")a";
                            break;
                        case "MENUS":
                            cmd = "select rec_id as fstr,m_id as Menu_Id,m_name as Menu,m_link as Menu_Link,m_level as Menu_Level from menus" +
                                " where m_level<>1";
                            break;
                        case "CLIENT":
                            cmd = @"select cp.client_id||cp.client_unit_id||cp.vch_num||to_char(cp.vch_date,'yyyymmdd')||cp.type as fstr,cp.c_name cust_name,
to_char(convert_tz(cp.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as DOB,to_char(convert_tz(cp.doa, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as DOA," +
"cp.cpemail as email,cs.country_name,cs.state_name,cs.district_name,cs.city_name,cs.teh_name,cs.v_name,cp.cpaddr,ms.master_name as prop_type," +
"to_char(convert_tz(cp.MT_DT, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as meeting_datetime from clients_mst cp " +
"inner join country_state cs on cs.rec_id = cp.city and cs.type = 'CSV' inner join master_setting ms on ms.master_id = cp.PR_TYPE and ms.type='PRT' " +
"where cp.type = 'BCD' and cp.client_unit_id='" + unitid_mst + "' ";
                            break;
                    }
                    break;
                #endregion
                #region Contractor Salary
                case "cont_salary":
                    switch (btnval.ToUpper())
                    {
                        case "VIEW":
                        case "EDIT":
                            cmd = "select distinct  a.client_id||a.client_unit_id||a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type as fstr" +
                                ",a.vch_num as Doc_No,to_char( convert_tz( a.Vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Doc_Date" +
                                ",a.col21 as Month,b.c_name as client_Name from kc_tab a inner join clients_mst b on a.col18=b.vch_num and b.type='BCD' and substr(b.vch_num,0,3)='203' " +
                                "and a.client_unit_id=b.client_unit_id  WHERE a.type='CES' and a.client_unit_id='" + unitid_mst + "' order by doc_no desc";
                            break;
                        case "PARTY":
                            cmd = "select distinct a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                "a.c_name as Client_name,a.addr as address,a.pincode as Pincode,a.c_gstin as GSTIN," +
                                "a.type_desc as Search_text,a.cpname as Contact_person_name,a.cpcont as contact_no,a.cpaltcont as Alter_contactno," +
                                "a.cpemail as Email from clients_mst a  where a.type = 'BCD' and substr(a.vch_num,0,3)='203' and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "ITEM":
                            if (param1 != "") where = " and emp_code not in ('" + param1.Trim().TrimEnd(',').Replace(",", "','").Trim().ToString() + "')";
                            //cmd = "select it.client_id||it.client_unit_id||it.icode||to_char(it.vch_date,'yyyymmdd')||it.type fstr,it.icode as Icode,it.iname as Iname,it.cpartno Partno," +
                            //    "um.master_name as UOM,hsn.master_name as hsn,hsn.group_name taxrate from item it " +
                            //    "inner join master_setting um on um.master_id=it.uom and um.type='UMM'  and um.client_id='" + clientid_mst + "' and um.client_unit_id='" + unitid_mst + "' " +
                            //    "inner join master_setting hsn on hsn.master_id=it.hsno and hsn.type='HSN' and hsn.client_id='" + clientid_mst + "' and hsn.client_unit_id='" + unitid_mst + "' " +
                            //    "where it.type='IT' and it.client_id='" + clientid_mst + "' and it.client_unit_id='" + unitid_mst + "'" + where + "";
                            cmd = "select vch_num||type||client_id||client_unit_id as fstr,  emp_code,first_name as  EMP_NAME,f_name from emp_master where client_id='" + clientid_mst + "'  and" +
                                " client_unit_id='" + unitid_mst + "' and trim(contr)='" + param2 + "'" + where;
                            break;
                    }
                    break;
                #endregion
                #region Bonus Calc
                case "bonus_calc":
                    switch (btnval.ToUpper())
                    {
                        case "VIEW":
                        case "EDIT":
                            cmd = "select distinct (a.client_id||a.client_unit_id||a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type) fstr," +
                                "a.vch_num Doc_No,to_char(convert_tz(a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') Doc_Date," +
                                "to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') From_Date," +
                                "to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') To_Date " +
                                "from kc_tab a WHERE a.type='BON' and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "' ";
                            break;
                        case "ITEM":
                            if (param1 != "") where = " and emp_code not in ('" + param1.Trim().TrimEnd(',').Replace(",", "','").Trim().ToString() + "')";
                            cmd = "select (a.vch_num||a.type||a.client_id||a.client_unit_id) fstr,a.emp_code,a.first_name EMP_NAME,a.f_name,nvl(b.paid_days,'0') paid_days from emp_master a " +
                                "left join (select sum(paid_days) paid_days,emp_code,client_id,client_unit_id from (select max(paid_days) paid_days,currmmmyyyy,emp_code,client_id,client_unit_id " +
                                "FROM emp_salary_process where to_date('01' || substr(currmmmyyyy, 6, 2) || substr(currmmmyyyy, 1, 4),'ddmmyyyy') between " +
                                "to_date('" + Regex.Split(param2, "~~")[0].Trim() + "','" + sgen.Getsqldateformat() + "') and to_date('" + Regex.Split(param2, "~~")[1].Trim() + "','" + sgen.Getsqldateformat() + "') " +
                                "GROUP BY currmmmyyyy,emp_code,client_id,client_unit_id) a group by emp_code,client_id,client_unit_id) b on a.vch_num = b.emp_code and a.client_id = b.client_id " +
                                "and a.client_unit_id = b.client_unit_id " +
                                "where a.type = 'EMP' and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "' and a.emp_status <> 'R'" + where + " order by a.emp_code asc";
                            break;
                    }
                    break;
                #endregion
                #region Incr_rate
                case "incr_rate":
                    switch (btnval.ToUpper())
                    {
                        case "DEL":
                            cmd = "select distinct a.client_unit_id||trim(a.col1)||'-'||trim(a.ref_code) as fstr,  a.col1 as empcode,e.first_name,e.f_name,trim(A.ref_code) as inc_ver ,a.client_id,a.client_unit_id from enx_tab a " +
                                " inner join emp_master e on a.col1 = e.vch_num and a.client_unit_id = e.client_unit_id " +
                                "left join emp_salary_process b on a.col1 = b.emp_code and trim(a.ref_code)= trim(b.inc_ver) and" +
                                "  a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and b.type = 'ESP' " +
                                "where a.type = 'KES'  and b.type is null  and a.client_unit_id = '" + unitid_mst + "'" +
                                " and trim(a.ref_code) not in ('0','1') order by empcode";
                            break;
                    }
                    break;
                case "full_final_bulk":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            cmd = "SELECT (emp.client_id || emp.client_unit_id || emp.vch_num) fstr," +
                        "emp.emp_code EmpCode, emp.old_empcode Old_EmpCode,emp.external_empno as External_EmpCode," +
                        "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name," +
                        "to_char(emp.ex_dt,'" + sgen.Getsqldateformat() + "') as Leave_Dt " +
                        " ,to_char(emp.fnf_dt,'" + sgen.Getsqldateformat() + "') Final_date FROM emp_master emp  where to_char(emp.fnf_dt,'yyyy')!='1900' " +
                        " and emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region leave year
                case "leave_year":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "SELECT (client_id||vch_num||to_char(vch_date,'yyyymmdd')||type) as fstr, Academic_Year as leave_year," +
                                "to_char( convert_tz( From_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as From_Date," +
                                "to_char( convert_tz( To_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as To_Date " +
                                "from add_academic_year where client_id='" + clientid_mst + "'  and type='LYR' order by vch_num ";
                            break;
                    }
                    break;
                #endregion
                #region empdoc
                case "empdoc":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            if (sgen.GetSession(MyGuid, "EDOCTYPE") != null) type = sgen.GetSession(MyGuid, "EDOCTYPE").ToString();
                            cmd = "select distinct (e.client_id||e.client_unit_id||e.vch_num||to_char(e.vch_date,'yyyymmdd')||e.type) fstr,t.emp_code Employee_code," +
                                "(t.FIRST_NAME|| ' '|| REPLACE(t.MIDDLE_NAME,'0','')|| ' '||REPLACE(t.LAST_NAME,'0','')) Employee_Name from enx_tab e " +
                                "inner join emp_master t on e.col2=t.vch_num and t.type='EMP' and t.client_id='" + clientid_mst + "' and t.client_unit_id='" + unitid_mst + "' " +
                                "where e.type='" + type + "' and e.client_id='" + clientid_mst + "' and e.client_unit_id='" + unitid_mst + "'";
                            break;
                        case "EMP":
                            string Fdate = sgen.server_datetime_dt(userCode).ToString("dd/MM/yyyy");
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                "emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode,emp.External_EmpNo," +
                                "to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as DOB,emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.contact_no as ContactNo," +
                                "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
                                "(case when emp.emp_status!='R' and (case when to_char(emp.ex_dt,'yyyy')='1900' then 1 when emp.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 " +
                                "then 'Active' else 'Left' end) as Status" +
                                " from emp_master emp " +
                                "WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' order by emp.emp_code asc";
                            break;
                    }
                    break;
                #endregion
                #region opening position
                case "open_p":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type fstr," +
                                " a.vch_num doc_no, a.col1 as position_code ,a.col21 as position_title,b.master_name as designation," +
                                "c.master_name as Department,a.col15 no_of_postion,(case when to_char(a.date1, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date1, '" + sgen.Getsqldateformat() + "') end ) opening_date" +
                                " ,(case when to_char(a.date2, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date2, '" + sgen.Getsqldateformat() + "') end ) Expt_Closing_Date from kc_tab a " +
                                "left join master_setting b on a.col2 = b.master_id and b.type = 'MDG' and find_in_set(b.client_unit_id," + unitid_mst + ")= 1 " +
                                "left join master_setting c on a.col2 = c.master_id and c.type = 'MDP' and find_in_set(c.client_unit_id," + unitid_mst + ")= 1 " +
                                "where a.type = 'OPN' and a.client_unit_id = '" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region opening position approval
                case "pos_app":
                    switch (btnval.ToUpper())
                    {
                        case "APPROVED":
                            cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type fstr," +
                                " a.vch_num doc_no, a.col1 as position_code ,a.col21 as position_title,b.master_name as designation," +
                                "c.master_name as Department,a.col15 no_of_postion,(case when to_char(a.date1, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date1, '" + sgen.Getsqldateformat() + "') end ) opening_date" +
                                " ,(case when to_char(a.date2, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date2, '" + sgen.Getsqldateformat() + "') end ) Expt_Closing_Date,a.col18 as status from kc_tab a " +
                                "left join master_setting b on a.col2 = b.master_id and b.type = 'MDG' and find_in_set(b.client_unit_id," + unitid_mst + ")= 1 " +
                                "left join master_setting c on a.col2 = c.master_id and c.type = 'MDP' and find_in_set(c.client_unit_id," + unitid_mst + ")= 1 " +
                                "where a.type = 'OPN' and a.client_unit_id = '" + unitid_mst + "' and a.col18<>'0' and a.col18='Approved'";
                            break;
                        case "REJECTED":
                            cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type fstr," +
                                " a.vch_num doc_no, a.col1 as position_code ,a.col21 as position_title,b.master_name as designation," +
                                "c.master_name as Department,a.col15 no_of_postion,(case when to_char(a.date1, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date1, '" + sgen.Getsqldateformat() + "') end ) opening_date" +
                                " ,(case when to_char(a.date2, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date2, '" + sgen.Getsqldateformat() + "') end ) Expt_Closing_Date,a.col18 as status from kc_tab a " +
                                "left join master_setting b on a.col2 = b.master_id and b.type = 'MDG' and find_in_set(b.client_unit_id," + unitid_mst + ")= 1 " +
                                "left join master_setting c on a.col2 = c.master_id and c.type = 'MDP' and find_in_set(c.client_unit_id," + unitid_mst + ")= 1 " +
                                "where a.type = 'OPN' and a.client_unit_id = '" + unitid_mst + "' and a.col18<>'0' and a.col18='Rejected'";
                            break;
                    }
                    break;
                #endregion
                #region pt_setting
                case "pt_setting":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "SELECT (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr,col1 as Applicable," +
                                "col2 as PT_Number,col3 Deposit_PT_Of_Emp,col4 Calculate_PT_Seprtly_for_arr,col7 Calculate_PT_Based_On" +
                                " from vehicle_master where type = 'KPT' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "PTSIG":
                            //              cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                            //"(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                            //"ad.academic_year as Academic_Year,emp.gender as Gender," +
                            //"to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
                            //"emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group," +
                            //"emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                            //"emp.child_count as Child_Count," +
                            //"emp.isspouseworking as IsSpouse_Working,emp.spouse_org as Spouse_Organisation,emp.spouse_desig as Spouse_Designation,emp.contact_no as Contact_No," +
                            //"emp.alt_contact_no as Alternate_Contact_No,emp.emer_contact_no as Emergency_Contact_No,emp.email_id as Personal_Email," +
                            //"emp.emer_contact_name as Emergency_Contact_Person_Name,emp.emer_contact_relation as Emergency_Contact_Person_Relation," +
                            //"emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Description,emp.pan_no as PAN_No,emp.pf_no as PF_No," +
                            //"emp.esi_no as ESI_No,emp.passport_no as Passport_No,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                            //"to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
                            //"emp.col1 as Referal_Person,emp.emp_code as Employee_Code from emp_master emp inner join add_academic_year ad " +
                            //"on emp.ac_year=ad.academic_year_id and ad.type='ACY' and emp.client_id=ad.client_id and emp.client_unit_id=ad.client_unit_id " +
                            //"WHERE emp.client_id= '" + clientid_mst + "' and emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and emp.emp_status='Y' order by emp.rec_id";
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
              "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
              "emp.gender as Gender,to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
              "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group," +
              "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
              "emp.child_count as Child_Count," +
              "emp.isspouseworking as IsSpouse_Working,emp.spouse_org as Spouse_Organisation,emp.spouse_desig as Spouse_Designation,emp.contact_no as Contact_No," +
              "emp.alt_contact_no as Alternate_Contact_No,emp.emer_contact_no as Emergency_Contact_No,emp.email_id as Personal_Email," +
              "emp.emer_contact_name as Emer_Cont_Per_Name,emp.emer_contact_relation as Emer_Cont_Per_Rel," +
              "emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Disability_Description,emp.pan_no as PAN_No,emp.pf_no as PF_No," +
              "emp.esi_no as ESI_No,emp.passport_no as Passport_No,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
              "to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
              "emp.col1 as Referal_Person,emp.emp_code as Employee_Code from emp_master emp WHERE emp.client_id= '" + clientid_mst + "' and emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and to_char(emp.ex_dt,'yyyy')='1900' and emp.emp_status='Y' order by emp.rec_id";
                            break;
                        case "UNITS":
                            cmd = "select (cup_id||company_profile_id||to_char(vch_date,'yyyymmdd')) fstr,unit_code,unit_name from company_unit_profile where cup_id<>'" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region leave_ob_imp
                case "leave_ob_imp":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "select distinct (curryyyymmm||type||client_id||client_unit_id) fstr,Month_Name, curryyyymmm as Month_id from leave_ob where type='KLB' " +
                                "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                            break;
                        case "EMP":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME," +
                                "'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,emp.gender as Gender,emp.emp_code as Employee_Code,emp.old_empcode OldEmpCode," +
                                "to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB,emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue," +
                                "emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group,emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married," +
                                "emp.spouse_name as Spouse_Name,emp.havechild as Have_Child,emp.child_count as Child_Count,emp.isspouseworking as IsSpouse_Working," +
                                "emp.spouse_org as Spouse_Organisation,emp.spouse_desig as Spouse_Designation,emp.contact_no as Contact_No,emp.alt_contact_no as Alter_Contact_No," +
                                "emp.emer_contact_no as Emer_Contact_No,emp.email_id as Personal_Email,emp.emer_contact_name as Emer_Cont_Per_Name," +
                                "emp.emer_contact_relation as Emer_Cont_Per_Rel,emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc Disability_Description," +
                                "emp.pan_no as PAN_No,emp.pf_no as PF_No,emp.esi_no as ESI_No,emp.passport_no as Passport_No,to_char(convert_tz(emp.passport_dt,'UTC','" + sgen.Gettimezone()
                                + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid,to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') " +
                                "as Date_Of_Joining,emp.col1 as Referal_Person from emp_master emp WHERE emp.type= 'EMP' and emp.client_id= '" + clientid_mst + "' and emp.client_unit_id= '"
                                + unitid_mst + "' and  to_char(emp.ex_dt,'yyyy')='1900' order by emp.rec_id";
                            break;
                    }
                    break;
                #endregion
                #region attendence Rules
                case "attn_rules":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "SELECT client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type as fstr,col1 as Begin_Time,col2 End_Time,col4 Hours_Process_Time, col7 Neglect_Last_In_Punch,col8 Multi_Span_Days,col9 Stand_Working_Hrs,col10 Min_Hrs_For_Full_Day,col11 Min_Hrs_For_Half_Days,col12 Min_Hrs_To_Work,col13 Min_Hrs_On_Offic_Hf_Day,col15 OT_Formula,col18 OT_Block_Time,col19 Cons_Early_Com_Punch,col20 Consider_Late_Punch,col21 Process_Late_By,col25 Grace_Time,col28 Time_Lim_For_Late_Hf_Day,col29 First_Late_Hr,col30 Second_Late_Hr,col31 Deduct_No_Of_Days,col32 No_Of_Instanc,col33 Multiples,col34 Over_Rule,col41 Min_OT from vehicle_master where type = 'KAR' and client_unit_id = '" + unitid_mst + "'";
                            //cmd = "SELECT client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,col1 as Begin_Time," +
                            //    "col2 End_Time,col4 Hours_Process_Time, col7 Neglect_Last_In_Punch_For_Missed_Out_Punch,col8 Multi_Span_Days,col9 Standard_Working_Hrs," +
                            //    "col10 Min_Hrs_For_Full_Day,col11 Min_Hrs_For_Half_Days,col12 Min_Hrs_To_Work_Full_Day_On_Official_Half_Day," +
                            //    "col13 Min_Hrs_To_WorkHalf_Day_On_Official_Half_Day,col15 OT_Formula,col18 OT_Block_Time,col19 Consider_Early_Coming_Punch," +
                            //    "col20 Consider_Late_Going_Punch,col21 Process_Late_By,col25 Grace_Time,col28 Time_Limit_For_Late_Half_Day,col29 First_Late_Hr," +
                            //    "col30 Second_Late_Hr,col31 Deduct_No_Of_Days,col32 No_Of_Instances,col33 Multiples,col34 Over_Rule_If_Total_Hrs_Greater_Than_Std_Working_Hrs," +
                            //    "col41 Min_OT from " + tab_name + " where type = '" + type + "' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "UNITS":
                            cmd = "select cup_id||company_profile_id||to_char(vch_date, 'yyyymmdd') fstr,unit_code,unit_name from company_unit_profile where cup_id<>'" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region exp master
                case "exp_master":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                                "(case WHEN a.master_name='001' THEN 'Male' WHEN a.master_name='002' THEN 'Female' END) as master_name,a.Classid as class_id, " +
                                "(REPLACE(b.First_name,'0','') ||' ' ||REPLACE(b.middle_name,'0','')|| ' '||REPLACE(b.last_name,'0','')) as Ent_By, to_char( convert_tz( a.master_EntDate,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')as Ent_Date " +
                                "from master_setting a,user_details b where a.master_entby =b.vch_num and a.type='" + type + "' and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "' order by a.master_name";
                            break;
                        case "JEDIT":
                        case "JVIEW":
                            cmd = "SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                                "(case WHEN a.master_name='001' THEN 'Male' WHEN a.master_name='002' THEN 'Female' END) as Gender,a.Classid as Age, " +
                                "(REPLACE(b.First_name,'0','') ||' ' ||REPLACE(b.middle_name,'0','')|| ' '||REPLACE(b.last_name,'0','')) as Ent_By, to_char( convert_tz( a.master_EntDate,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')as Ent_Date " +
                                "from master_setting a,user_details b where a.master_entby =b.vch_num and a.type='" + type + "' and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "' order by a.master_name";
                            break;
                        case "EXPVIEW":
                            cmd = @"SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,ms.master_name as master_name,a.Classid as class_id,(ud.First_name ||' ' || ud.middle_name || ' '||ud.last_name) as Ent_By,to_char( convert_tz( a.master_EntDate,'UTC','" + sgen.Gettimezone() + "'),'ddmmyyyy')as Ent_Date from master_setting a INNER JOIN master_setting ms on a.master_name=ms.master_id and ms.type='KEX' INNER JOIN user_details ud on a.master_entby=ud.vch_num and ud.type='CPR' where a.type = 'EXP' and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region Incr_new
                case "incr_new":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            cmd = "select distinct (client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type) fstr,vch_num,to_char(vch_date,'DD/MM/YYYY') vch_date," +
                                "to_char(eff_dt,'DD/MM/YYYY') eff_date,to_char(appl_dt,'DD/MM/YYYY') app_date from empincr where type = 'INC' and client_unit_id = '" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region Incr_one
                case "incr_one":
                    switch (btnval.ToUpper())
                    {
                        case "GETDATA":
                            cmd = "SELECT  a.client_unit_id||A.vch_num AS fstr ,A.emp_code AS EMP_CODE ," +
                                "A.FIRST_NAME||' '||replace(A.MIDDLE_NAME,'0','')||' '||replace(A.LAST_NAME,'0','')||'('||dp.master_name||')' AS FIRST_NAME FROM EMP_MASTER A " +
                                "left join master_setting dp on dp.master_id = a.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, a.client_id)= 1 " +
                                "and find_in_set(dp.client_unit_id, a.client_unit_id)= 1 " +
                                " WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and to_char(a.ex_dt,'yyyy')='1900'  ORDER BY EMP_CODE";
                            break;
                        case "EDIT":
                            cmd = "select (a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) fstr,a.vch_num,to_char(a.vch_date,'DD/MM/YYYY') vch_date," +
                                   "to_char(a.eff_dt,'DD/MM/YYYY') eff_date,to_char(a.appl_dt,'DD/MM/YYYY') app_date," +
                                   "b.FIRST_NAME||' '||replace(b.MIDDLE_NAME,'0','')||' '||replace(b.LAST_NAME,'0','')||'('||dp.master_name||')' AS FIRST_NAME " +
                                   ",b.emp_code as emp_code from empincr a " +
                                   "inner join emp_master b on a.emp_code=b.vch_num" +
                                   "left join master_setting dp on dp.master_id = b.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, b.client_id)= 1 " +
                                   "and find_in_set(dp.client_unit_id, b.client_unit_id)= 1 " +
                                   " where a.type = 'INC' and a.client_unit_id = '" + unitid_mst + "' ";
                            break;
                       
                    }
                    break;
                #endregion
                #region st_authority
                case "st_authority":
                    switch (btnval)
                    {
                        case "ITSIG":
                        case "LLSIG":
                        case "LLSIG1":
                        case "LLSIG2":
                            cmd = "select emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type as fstr," +
                            "emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','') as Employee_Name," +
                            "emp.gender as Gender," +
                            "to_char(convert_tz(emp.dob,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
                            "emp.pob as Birth_Place,emp.mother_tongue as Mother_Tongue,emp.adhaar_no as Adhaar_No,emp.blood_grp as Blood_group," +
                            "emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.ismarried as Is_Married,emp.spouse_name as Spouse_Name,emp.havechild as Have_Child," +
                            "emp.child_count as Child_Count," +
                            "emp.isspouseworking as IsSpouse_Working,emp.spouse_org as Spouse_Organisation,emp.spouse_desig as Spouse_Designation,emp.contact_no as Contact_No," +
                            "emp.alt_contact_no as Alter_Contact_No,emp.emer_contact_no as Emer_Contact_No,emp.email_id as Personal_Email," +
                            "emp.emer_contact_name as Emer_Cont_Per,emp.emer_contact_relation as Emer_Cont_Per_Rel," +
                            "emp.isdisable as IsDisable,emp.dis_type as Disability_Type,emp.dis_desc as Dis_Desc,emp.pan_no as PAN_No,emp.pf_no as PF_No," +
                            "emp.esi_no as ESI_No,emp.passport_no as Passport_No,to_char(convert_tz(emp.passport_dt,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Passport_Valid," +
                            "to_char(convert_tz(emp.st_dt,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining," +
                            "emp.col1 as Referal_Person,emp.emp_code as Employee_Code from emp_master emp " +
                            "WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and emp.emp_status='Y' order by emp.rec_id";
                            break;
                        case "EDIT":
                        case "DETAIL":
                            cmd = "SELECT (cup.company_profile_id||cup.cup_id) as fstr,(cp.Company_Name|| '('|| cup.company_profile_id||')') as Company," +
                                "(cup.Unit_Name||'( '||cup.CUP_Id||')') as Unit,to_char(convert_tz(cup.incorporation_dt, '+0:00', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Incorporation_Date," +
                                "cup.pf_no PF_Number, to_char(convert_tz(cup.pf_regdt, '+0:00', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') PF_Registration_Date," +
                                "nvl((udp.FIRST_NAME||''||udp.MIDDLE_NAME||''|| udp.LAST_NAME)) as PF_Signatory_Name,nvl(pf.master_name, '-') PF_Sig_Designation," +
                                "nvl((udp.f_FIRSTNAME|| ''|| udp.f_MIDDLENAME|| ''||udp.f_LASTNAME)) as PF_Signatory_Father_Name,nvl(udp.per_address, '-') as PF_Sig_Address," +
                                "cup.pf_samerule as PF_Rule,cup.esi_no as ESI_Number,to_char(cup.esi_regdt, '" + sgen.Getsqldateformat() + "') ESI_Registration_Date," +
                                "cup.esi_sapf as ESI_Same_as_PF,nvl((ude.FIRST_NAME||''||ude.MIDDLE_NAME||''|| ude.LAST_NAME)) as ESI_Signatory_Name," +
                                "nvl(esi.master_name, '-') ESI_Sig_Designation,nvl((ude.f_FIRSTNAME||''||ude.f_MIDDLENAME|| ''|| ude.f_LASTNAME)) as ESI_Signatory_Father_Name," +
                                "cup.pt_no PT_Number, to_char(convert_tz(cup.pt_regdt, '+0:00', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') PT_Registration_Date," +
                                "nvl((udpt.FIRST_NAME||''||udpt.MIDDLE_NAME||''|| udpt.LAST_NAME)) as PT_Signatory_Name,nvl(pt.master_name, '-') PT_Sig_Designation," +
                                "nvl((udpt.f_FIRSTNAME||''||udpt.f_MIDDLENAME||''||udpt.f_LASTNAME)) as PT_Signatory_Father_Name,cup.it_tanno TAN_Number, cup.it_tancircle TAN_Circle," +
                                "cup.it_cit CIT_TDS, cup.it_sapt as PT_Same_as_IT,nvl(udit.per_address, '-') as IT_Sig_Address,nvl(udit.per_state, '-') as IT_Sig_State," +
                                "nvl(udit.per_pincode, '-') as IT_Sig_Pincode,nvl(udit.pan_id, '-') as IT_Sig_PAN_Number,nvl(udit.con_number, '-') as IT_Sig_Contact_Number," +
                                "nvl((udit.FIRST_NAME||''||udit.MIDDLE_NAME||''|| udit.LAST_NAME)) as IT_Signatory_Name,nvl(it.master_name, '-') IT_Sig_Designation," +
                                "nvl((udit.f_FIRSTNAME||''|| udit.f_MIDDLENAME||''|| udit.f_LASTNAME)) IT_Signatory_Father_Name,cup.ll_act LL_Act, cup.ll_sapf LL_Same_as_PF," +
                                "nvl(udll.per_address, '-') as LL_Sig_Address,nvl((udll.FIRST_NAME||''|| udll.MIDDLE_NAME||''|| udll.LAST_NAME)) as LL_Signatory_Name," +
                                "nvl(ll.master_name, '-') LL_Sig_Designation, nvl((udll.f_FIRSTNAME||''||udll.f_MIDDLENAME|| ''||udll.f_LASTNAME)) as LL_Signatory_Father_Name," +
                                "cup.ll_act1 LL_Act1, cup.ll_sapf1,nvl((udll1.FIRST_NAME|| ''|| udll1.MIDDLE_NAME|| ''|| udll1.LAST_NAME)) as LL_Sig_Name1," +
                                "nvl(udll1.per_address, '-') as ll_per_address1,nvl(ll1.master_name, '-') LL_Sig_Designation1, nvl((udll1.f_FIRSTNAME||''||udll1.f_MIDDLENAME|| ''||udll1.f_LASTNAME)) as LL_Sig_Father_Name1," +
                                "cup.ll_act2 LL_Act2, cup.ll_sapf2,nvl((udll2.FIRST_NAME|| ''|| udll2.MIDDLE_NAME|| ''|| udll2.LAST_NAME)) as LL_Sig_Name2," +
                                "nvl(udll2.per_address, '-') as ll_per_address2,nvl(ll2.master_name, '-') LL_Sig_Designation2, nvl((udll2.f_FIRSTNAME||''||udll2.f_MIDDLENAME|| ''|| udll2.f_LASTNAME)) as LL_Sig_Father_Name2 " +
                                "FROM company_unit_profile cup " +
                                "left outer JOIN company_profile cp on cup.Company_profile_id = cp.Company_Profile_Id " +
                                "left outer JOIN user_details udp on cup.pf_signame = udp.vch_num " +
                                "left outer JOIN master_setting pf on udp.designation = pf.master_id and pf.type = 'MDG' " +
                                "left outer JOIN user_details ude on cup.esi_signame = ude.vch_num " +
                                "left outer JOIN master_setting esi on ude.designation = esi.master_id and esi.type = 'MDG' " +
                                "left OUTER JOIN user_details udpt on cup.pt_signame = udpt.vch_num " +
                                "left outer JOIN master_setting pt on udpt.designation = pt.master_id and pt.type = 'MDG' " +
                                "left outer JOIN user_details udit on cup.it_signame = udit.vch_num " +
                                "left outer JOIN master_setting it on udit.designation = it.master_id and it.type = 'MDG' " +
                                "left outer JOIN user_details udll on cup.ll_signame = udll.vch_num " +
                                "left outer JOIN master_setting ll on udll.designation = ll.master_id and ll.type = 'MDG' " +
                                "left outer JOIN user_details udll1 on cup.ll_signame1 = udll1.vch_num " +
                                "left outer JOIN master_setting ll1 on udll1.designation = ll1.master_id and ll1.type = 'MDG' " +
                                "left outer JOIN user_details udll2 on cup.ll_signame2 = udll2.vch_num " +
                                "left outer JOIN master_setting ll2 on udll2.designation = ll2.master_id and ll2.type = 'MDG' ORDER BY cup.rec_id DESC";
                            break;
                    }
                    break;
                #endregion
                #region v_form
                case "v_form":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                        case "STATUS":
                            cmd = "select vm.client_id||vm.client_unit_id||vm.vch_num||to_char(vm.vch_date,'yyyymmdd')||vm.type as fstr,ud.first_name||' '||replace(ud.middle_name,'0','')||' '||replace(ud.last_name,'0','') as Concerned_Person_Name,vm.col1 as Visitor_Name,vm.col2 as Organisation_Name,vm.col3 as Contact_Number," +
                                "vm.col7 as ID_Number,vm.col12 as Remark,vm.col25 as Purpose from vehicle_master vm,user_details " +
                                "ud where vm.type='VFA' and vm.client_id='" + clientid_mst + "' and vm.client_unit_id='" + unitid_mst + "' and" +
                                " (ud.type='CPR' OR ud.type='STD') and vm.col8=ud.vch_num and find_in_set(ud.client_unit_id,vm.client_unit_id)=1";
                            break;
                        case "PERSON":
                            cmd = "select ud.client_id||ud.client_unit_id||ud.vch_num||to_char(ud.vch_date,'yyyymmdd')||ud.type as fstr,ac.class as Class,ms.master_name as Section,ud.first_name||' '|| replace(ud.middle_name,'0','')||' '||replace(ud.last_name,'0','') as Name," +
                                "ud.vch_num from user_details ud, add_class ac,master_setting ms where ud.type='STD' and ud.client_id= '" + clientid_mst + "' and ud.client_unit_id= '" + unitid_mst + "' and ud.class_applied= ac.add_class_id and find_in_set(ud.client_unit_id, ac.client_unit_id)=1" +
                                " and ac.type= 'EAC' and ms.type= 'ECS' and ms.master_id= ud.section and find_in_set(ms.client_unit_id, ud.client_unit_id)=1";
                            break;
                        case "PERSON1":
                            cmd = "select ud.client_id||ud.client_unit_id||ud.vch_num||to_char(ud.vch_date,'yyyymmdd')||ud.type as fstr,ud.first_name||' '||replace(ud.middle_name,'0','')||' '||replace(ud.last_name,'0','') as Name,ms.master_name as Department,ms1.master_name as Designation from user_details ud" +
                                ",master_setting ms,master_setting ms1 where ud.type='CPR' and ud.client_unit_id='" + unitid_mst + "' and find_in_set(ud.client_unit_id,ms.client_unit_id)=1 and find_in_set(ud.client_unit_id,ms1.client_unit_id)=1 and ms.type='MDP' " +
                                "and ms1.type='MDG' and ud.department=ms.master_id and ud.designation=ms1.master_id";
                            break;
                    }
                    break;
                #endregion
                #region assign report
                case "asg_rpt":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "select client_id||client_unit_id||vch_num||cat_id||to_char(vch_date,'yyyymmdd')||type as fstr,vch_num as rpt_code,rpt_name,rpt_newname,cat_id,cat_name as catagory,menu_id,module_id,module,vch_date as created_date from reports where type='ASR' and client_unit_id='" + unitid_mst + "'";
                            break;
                        case "REPORTS":
                            if (param1 != null) { if (param1 != "") where = " and client_unit_id||vch_num||cat_id not in ('" + param1.Trim().TrimEnd(',').Replace(",", "','").Trim().ToString() + "')"; }
                            cmd = "select client_id||client_unit_id||vch_num||cat_id||to_char(vch_date,'yyyymmdd')||type as fstr,vch_num as rpt_code,rpt_name,(case when rpt_newname <> '' then rpt_newname when rpt_newname <> '-' then rpt_newname when rpt_newname <> null then rpt_newname else rpt_name end)" +
                                " rpt_new_name,cat_id,cat_name as catagory,menu_id,module_id,module from reports where type='RPT' and client_unit_id='" + unitid_mst + "' " + where + "";
                            break;
                    }
                    break;
                #endregion
                #region attendance config
                case "imp_master":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "select (client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type) as fstr,col1 Attendance_Type,file_name Template " +
                                "from file_tab where client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and type='KAT'";
                            break;
                    }
                    break;
                #endregion
                #region leave config
                case "leave_config":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "SELECT (client_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,col1 Policy_Name,col2 Abbreviation,col3 Display_Name,col5 Credit_Frequency" +
                                ",col7 Credit_On, col8 No_Of_Days,col9 Credit_Atten_Dependent, col10 Proration_Applicable,col12 Cut_Off_Rule, col13 Can_Carry_Forward,col14 Is_Encashable" +
                                ", col15 Max_Carry_ForwardAtYearEnd,col16 Max_Days_Encashable, col17 Encashable_Formula,col18 Min_Service_Period, col19 Min_insurance,col20 Max_insurance" +
                                ", col21 Max_Leave_Balance,col22 Max_Negative_Leave_Balance, col23 Unavailed_Leave_Will_Elapse,col24 Leave_Request_Window,col25 Notice_For_Leave_Request" +
                                ",col26 Is_Attachment_Required, col27 Max_Leave_Can_Be_Taken,col29 Days, col30 Max_No_Of_Inst_Be_Taken,col32 LeavePart_Weekly_Off,col33 LeavePart_Holiday" +
                                ",col34 LeavePart_Prcding_Week_Off, col35 LeavePart_Preceeding_Holiday,col36 LeavePart_Scding_Wkly_Off, col37 LeavePart_Scding_Holiday from kc_tab where " +
                                "type = 'KLV' and client_id = '" + clientid_mst + "'";

                            //cmd = "SELECT (client_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,col1,col2,col3,col5,col7,col8," +
                            //    "col9,col10,col12,col13,col14,col15,col16,col17,col18,col19,col20,col21,col22,col23,col24,col25,col26,col27,col29,col30,col32," +
                            //    "col33,col34,col35,col36,col37 from kc_tab where type = 'KLV' and client_id = '" + clientid_mst + "' ";
                            break;
                    }
                    break;
                #endregion
                #region SalaryGrade
                //BD
                case "salary_grade":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            cmd = "SELECT (m.client_id||m.client_unit_id||m.vch_num|| to_char(m.vch_date, 'yyyymmdd')||m.type) as fstr,GROUP_CONCAT(DISTINCT gr.master_name) as Grade," +
                                "GROUP_CONCAT(DISTINCT mdp.master_name) as Department,GROUP_CONCAT(DISTINCT mdg.master_name) as Designation from enx_tab m " +
                                "INNER JOIN master_setting mdp on m.col1 = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                                "INNER JOIN master_setting mdg on m.col3 = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                                "INNER JOIN master_setting gr on m.col2=gr.master_id and gr.type='KGM' and find_in_set(gr.client_id,'" + clientid_mst + "')=1 and find_in_set(gr.client_unit_id,'" + unitid_mst + "')=1 " +
                                "where m.type = 'KSG' and m.client_id = '" + clientid_mst + "' and m.client_unit_id = '" + unitid_mst + "' GROUP BY (m.client_id||m.client_unit_id||m.vch_num|| to_char(m.vch_date, 'yyyymmdd')||m.type)";
                            break;
                    }
                    break;
                #endregion
                #region salary componants
                case "sal_comp":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            //cmd = "SELECT (client_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,col1 Name,col2 JV_Code," +

                            cmd = "SELECT (client_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,vch_num as Doc_no,col1 Name,col2 JV_Code," +
                                "col3 Abbreviation,col4 Map_To, col8 Paid_Comp,col9 Comp_Type,col10 Pay_Type,col11 Type, col21 Active," +
                                "col39 Max_Limit_Per_Month from vehicle_master where type = 'KSP' and client_id = '" + clientid_mst + "'  and cur_state!='0'";
                            break;
                        case "DETAIL":
                            cmd = "SELECT (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,col1 Name,col2 JV_Code," +
            "col3 Abbreviation,col4 Map_To,(case when col7='001' then 'Round Off' when col7='002' then 'Round Up' when col7='003' then 'Round Down' else '0' end) Round,cur_village as Round_amount," +
            "col8 Paid_Comp,col9 Comp_Type,col10 Pay_Type,col11 Type,col12 Tax_Distributed,col13 Cal_Type,col14 Payable_if_joined," +
            "col15 Is_FBP,col18 Attendance_Dependent,col19 Part_Of_CTC,col20 Create_Dependent_Component,col21 Active,col25 Is_FSS," +
            "col28 Payableif_Full_Month_LOP,col29 Part_Of_Gross,col30 Part_Of_PFGross,col31 Part_Of_ESIGross,col32 Part_Of_PTGross," +
            "col33 Part_Of_Arrear,col34 From_Val,col36 To_Val,col37 Amount,col38 Carry_Forward_Required,col39 Max_Limit_Per_Month," +
            "col40 OT_Calculation_Unit,cur_country Max_OT_Unit," +
        "to_char(date1,'" + sgen.Getsqldateformat() + "') Effective_From,to_char(date2,'" + sgen.Getsqldateformat() + "') End_Date " +
        "from vehicle_master where type = 'KSP' and client_id = '" + clientid_mst + "' ";
                            break;
                        case "CLEDGER":
                            cmd = "select vch_num||to_char(vch_date,'yyyymmdd')||type as fstr,vch_num as ldg_code,c_name as ldg_name,cpname as ldg_name_short from clients_mst where type='LDG' " +
                                "and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                            break;
                        case "DLEDGER":
                            cmd = "select vch_num||to_char(vch_date,'yyyymmdd')||type as fstr,vch_num as ldg_code,c_name as ldg_name,cpname as ldg_name_short from clients_mst where type='LDG' " +
                                "and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                            break;
                    }
                    break;

                #endregion                
                #region assignment to client
                case "asn_to_client":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select ug.client_id||ug.client_unit_id||ug.vch_num||to_char(ug.vch_date,'yyyymmdd')||ug.type as fstr,ug.col25 as Generated_Id from vehicle_master ug left join clients_mst cm on ug.col1 = cm.vch_num and ug.client_id = cm.client_id and ug.client_unit_id = cm.client_unit_id and cm.type = 'CUU' where ug.client_id = '" + clientid_mst + "' and ug.client_unit_id = '" + unitid_mst + "' and ug.type = 'ACA'";
                            break;
                    }
                    break;
                #endregion
                #region reminder config
                case "remind_config":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select (a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.vch_num as doc_no,a.master_id as freq_id,a.master_name as frequency," +
                                "a.classid as reminder_time,a.SECTIONID as Interval from master_setting a where a.type = 'IIT' and a.client_unit_id = '" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region salary advance employee
                case "empsal_adv":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT distinct (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                          "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,emp.emp_code as Employee_Code," +
                          "emp.old_empcode Old_EmpCode,a.col7 as Advanced_Amt,a.col8 as No_Of_Inst,to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Effective_From" +
                          " FROM enx_tab2 a ,emp_master emp WHERE a.TYPE='HAS' and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "' " +
                          "and emp.type= 'EMP' and emp.emp_status='Y' and to_char(emp.ex_dt,'yyyy')='1900' and a.col1=emp.vch_num and emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "' order by emp.emp_code asc";
                            break;

                        case "EMPDETAIL":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Emp_Code," +
                        "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                        "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                        "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining" +
                        " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE emp.type= 'EMP' " +
                        "and emp.client_unit_id= '" + unitid_mst + "' and to_char(emp.ex_dt,'yyyy')='1900' and emp.emp_status='Y' order by emp.emp_code asc";
                            break;
                    }
                    break;
                #endregion
                #region salary advance Adjustment
                case "adv_adjust":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT distinct (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                          "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,emp.emp_code as Employee_Code," +
                          "emp.old_empcode Old_EmpCode,a.col6 as Bal_Advanced_Amt,a.col10 as Adjust_amount,a.col13 as remark FROM enx_tab2 a ,emp_master emp WHERE a.TYPE='ADJ' and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "' " +
                          "and emp.type= 'EMP' and emp.emp_status='Y' and to_char(emp.ex_dt,'yyyy')='1900' and a.col1=emp.vch_num and emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "' order by emp.emp_code asc";
                            break;

                        case "EMPDETAIL":
                            cmd = "select distinct (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                        "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,emp.emp_code as Employee_Code," +
                        "emp.old_empcode Old_EmpCode,nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.m_name as Mother_Name,emp.gender as Gender," +
                        "to_char(convert_tz(emp.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as DOB," +
                        "emp.pob as Birth_Place,emp.adhaar_no as Adhaar_No,emp.contact_no as ContactNo,emp.pan_no as PANNo,emp.pf_no as PFNo,emp.esi_no as ESINo," +
                        "emp.passport_no as PassportNo,emp.alt_contact_no as Alt_ContactNo,emp.emer_contact_no as Emer_ContNo,emp.email_id as Per_Email," +
                        "emp.emer_contact_name as Emer_Per_Name,emp.emer_contact_relation as Emer_Per_Relation," +
                        "to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining" +
                        " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                        "inner join enx_tab2 ad on ad.col1 = emp.vch_num and ad.type='HAS' and find_in_set(ad.client_unit_id, emp.client_unit_id) = 1 and " +
                        "to_number(nvl(ad.col7,'0')) > 0  WHERE emp.type= 'EMP' " +
                        "and emp.client_id= '" + clientid_mst + "' and emp.client_unit_id= '" + unitid_mst + "' and to_char(emp.ex_dt,'yyyy')='1900' and emp.emp_status='Y' order by emp.emp_code asc";
                            break;
                    }
                    break;
                #endregion
                #region loan application

                case "loan_appl":
                    cond = "";
                    if (!role_mst.ToUpper().Equals("OWNER"))
                    {
                        string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                  "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                        cond = " and (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "' ";
                    }

                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT distinct (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.vch_num as doc_no,to_char(a.vch_date,'dd/mm/yyyy') as doc_date,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name" +
                                ",emp.emp_code as Employee_Code,emp.old_empcode Old_EmpCode, a.col7 as re_pay_sch,a.COL8 as Loan_Amount,a.COL13 as remark FROM enx_tab2 a ,emp_master emp WHERE a.col20='Pending' and  a.TYPE = 'LON' and a.client_unit_id = '" + unitid_mst + "' " +
                                " and emp.emp_status = 'Y' and a.col5 = emp.vch_num and emp.client_unit_id='" + unitid_mst + "' and emp.type='EMP' " + emp_code + "   " + xprdrange.Replace("vch_DATE", "a.vch_date") + "order by emp.emp_code asc";
                            break;

                        case "EMPDETAIL":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Emp_Code," +
                        "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                        "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name, " +
                        "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining" +
                        " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE emp.type= 'EMP' " +
                        "and emp.client_unit_id= '" + unitid_mst + "' and emp.emp_status='Y' order by emp.emp_code asc";
                            break;
                            //case "RPTTO":
                            //    cmd = "select (emp.client_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                            //        "emp.emp_code as Employee_Code,emp.old_empcode as OldEmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                            //        "emp.gender as Gender,emp.f_name as Father_Name,emp.contact_no as ContactNo,emp.email_id as Per_Email," +
                            //        "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining from emp_master emp " +
                            //        "WHERE emp.type= 'EMP' and emp.client_id= '" + clientid_mst + "'  order by emp.emp_code asc";
                            //    break;
                    }
                    break;
                #endregion
                #region loan approval
                case "loan_apr":
                    cond = "";
                    if (!role_mst.ToUpper().Equals("OWNER"))
                    {
                        //string rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                        //cond = "and ( emp.rptto='" + rptto + "' or emp.rptto2='" + rptto + "')";
                        cond = "and  a.col22='" + userid_mst + "'";
                    }

                    switch (btnval.ToUpper())
                    {

                        case "APPROVED":
                            cmd = "select a.*,rs.col2 as reason from (SELECT nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                      ",a.COL8 loan_amount, a.vch_num doc, emp.gender as Gende,emp.f_name as Father_Name,emp.gender as Gender,emp.emp_code as Employee_Code," +
                      "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,a.col7 paymonth," +
                      "to_char(emp.st_dt, 'dd/MM/YYYY') as Date_Of_Joining,a.type,to_char(emp.dob, 'dd/MM/YYYY') as Date_Of_birth,a.col20 as status, a.col6 as r_code," +
                      "ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Approved_By,to_char(a.date5,'" + sgen.Getsqldateformat() + "') Approved_Date " +
                      "FROM enx_tab2 a,user_details ud ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                      " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                      " WHERE " +
                      "a.TYPE = 'LON' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " + cond + " " +
                      " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Approved'  and a.col22 = ud.vch_num and ud.type = 'CPR'  " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " order by emp.emp_code asc ) a " +
                      "left join enx_tab rs on rs.vch_num = a.r_code and rs.type = 'KAS' and rs.client_unit_id = '" + unitid_mst + "' ";

                            break;
                        case "REJECTED":
                            cmd = "select a.*,rs.col2 as reason from (SELECT nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                                  ",a.COL8 loan_amount, a.vch_num doc, emp.gender as Gende,emp.f_name as Father_Name,emp.gender as Gender,emp.emp_code as Employee_Code," +
                                  "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,a.col7 paymonth," +
                                  "to_char(emp.st_dt, 'dd/MM/YYYY') as Date_Of_Joining,a.type,to_char(emp.dob, 'dd/MM/YYYY') as Date_Of_birth,a.col20 as status,a.col6 as r_code," +
                                  "ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Rejected_By,to_char(a.date5,'" + sgen.Getsqldateformat() + "') Rejected_Date " +
                                  "FROM enx_tab2 a,user_details ud ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                                  " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                                   " WHERE " +
                                  "a.TYPE = 'LON' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " + cond + " " +
                                  " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Rejected'and a.col22 = ud.vch_num and ud.type = 'CPR'   " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " order by emp.emp_code asc) a " +
                                  "left join enx_tab rs on rs.vch_num = a.r_code and rs.type = 'KAS' and rs.client_unit_id = '" + unitid_mst + "' ";

                            break;
                    }
                    break;
                #endregion
                #region work flow
                case "w_flow":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            if (param1 == "33002.1")
                            {
                                cmd = "select '000001' fstr,'Leave Applied' as Work_Flow_For from dual union " +
                                    "select '000002' fstr,'Loan' as Work_Flow_For from dual union " +
                                    "select '000003' fstr,'OD Slip' as Work_Flow_For from dual union " +
                                    "select '000004' fstr,'Separation' as Work_Flow_For from dual";
                            }

                            if (param1 == "400011.7")
                            {
                                cmd = "select master_id ,master_name ticket_Type from master_setting" +
                                    " where type='TKT' and client_unit_id='" + unitid_mst + "'";
                            }


                            break;
                    }
                    break;
                #endregion
                #region confirmation
                case "wf_confirm":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                "a.vch_num as doc_no,to_char(a.vch_date, '" + sgen.Getsqldateformat() + "') as doc_date," +
                                "a.COL8 as Name,a.COL9 as Probation_Period,a.col10 as Probation_Extension_Upto,a.col11 as No_of_Times_Extension_allowed from enx_tab2 a where a.type = 'WCM' and a.client_unit_id = '" + unitid_mst + "'";

                            break;
                        case "PARTY":
                            if (param2.Trim() != "")
                            {
                                if (param2.Trim() == "DPT")
                                {
                                    cmd = "SELECT master_id||type as fstr, master_id as ID,master_name Name FROM master_setting where type = 'MDP' and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                                }
                                else
                                {
                                    cmd = "SELECT master_id||type as fstr,master_id as ID,master_name Name FROM master_setting where type = 'MDG' and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                                }
                            }

                            break;

                    }
                    break;
                #endregion
                #region separation
                case "sprn":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_no,to_char(a.vch_date, '" + sgen.Getsqldateformat() + "') as doc_date,a.col17 as suggest_last_work_day,a.col18 as backdate_separation,a.col20 as policy_based_on,a.COL6 as Name,a.COL7 as no_of_months,a.col8 as no_of_confirm_mths,a.col9 as backdate_separation_days,a.col10 as retirement_age from enx_tab2 a where a.type = 'SPR' and a.client_unit_id = '" + unitid_mst + "'";

                            break;
                        case "PARTY":
                            if (param2.Trim() != "")
                            {
                                if (param2.Trim() == "DPT")
                                {
                                    cmd = "SELECT master_id||type as fstr, master_id as ID,master_name Name FROM master_setting where type = 'MDP' and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                                }
                                else
                                {
                                    cmd = "SELECT master_id||type as fstr,master_id as ID,master_name Name FROM master_setting where type = 'MDG' and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                                }
                            }

                            break;

                    }
                    break;
                #endregion
                #region OD slip
                case "od_slip":
                    cond = "";
                    if (!role_mst.ToUpper().Equals("OWNER"))
                    {
                        string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                  "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                        cond = " and (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "' ";
                    }
                    switch (btnval.ToUpper())
                    {

                        case "EDIT":
                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                                ",a.col7 as app_by,( case when to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end)  od_from," +
                               "( case when to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end) as od_to,a.col4 as remark,emp.emp_code as Emp_Code" +
                                ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                                ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department from enx_tab2 a inner join " +
                                "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                                " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                                "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1  " + xprdrange.Replace("vch_DATE", "a.vch_date") + " where  a.col10='Pending' and a.type = 'OSL' and a.client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "DETAIL":
                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                                ",a.col7 as app_by,( case when to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end)  od_from," +
                               "( case when to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end) as od_to,a.col4 as remark,emp.emp_code as Emp_Code" +
                                ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                                ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,a.col10 as slip_status from enx_tab2 a inner join " +
                                "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' " + cond + "" +
                                " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                                "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1  " + xprdrange.Replace("vch_DATE", "a.vch_date") + " where a.type = 'OSL' and a.client_unit_id = '" + unitid_mst + "'";
                            break;
                        case "EMPDETAIL":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Emp_Code," +
                        "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                        "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                        "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining" +
                        " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE emp.type= 'EMP' " +
                        "and emp.client_unit_id= '" + unitid_mst + "' and emp.emp_status='Y' order by emp.emp_code asc";
                            break;
                    }
                    break;
                #endregion
                #region OD approval
                case "od_apr":
                    cond = "";
                    if (!role_mst.ToUpper().Equals("OWNER"))
                    {
                        string rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                        //cond = "and ( emp.rptto='" + rptto + "' or emp.rptto2='" + rptto + "')";
                        cond = "and  a.col22='" + userid_mst + "'";
                    }
                    switch (btnval.ToUpper())
                    {
                        case "APPROVED":
                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                                    ",a.col7 as app_by,( case when to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end)  od_from," +
                               "( case when to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end) as od_to,a.col4 as remark,emp.emp_code as Emp_Code" +
                                    ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                                    ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department ," +
                                    "ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Approved_By,to_char(a.date5,'" + sgen.Getsqldateformat() + "') Approved_Date from enx_tab2 a inner join " +
                                    "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                                    " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                    "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                                    "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                                    "Inner join user_details ud on a.col22=ud.vch_num and ud.type='CPR'" +
                                    " where a.type = 'OSL' and a.col10='Approved' and a.client_unit_id = '" + unitid_mst + "'  " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + "";
                            break;
                        case "REJECTED":
                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                                      ",a.col7 as app_by,( case when to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end)  od_from," +
                               "( case when to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end) as od_to,a.col4 as remark,emp.emp_code as Emp_Code" +
                                      ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                                      ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department," +
                                      " ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Rejected_By,to_char(a.date5,'" + sgen.Getsqldateformat() + "') Rejected_Date from enx_tab2 a inner join " +
                                      "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                                      " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                      "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                                      "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                                      "Inner join user_details ud on a.col22=ud.vch_num and ud.type='CPR'" +
                                      " where a.type = 'OSL' and a.col10='Rejected' and a.client_unit_id = '" + unitid_mst + "'  " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + "";
                            break;
                    }
                    break;
                #endregion
                #region separt
                case "separt":
                    cond = "";
                    if (!role_mst.ToUpper().Equals("OWNER"))
                    {
                        string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                  "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                        cond = " and (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "' ";
                    }
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_no,to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') Doc_Date" +
                                ",emp.emp_code as Emp_Code" +
                               ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                               ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,sr.master_name Separation_reason,to_char(a.date1,'" + sgen.Getsqldateformat() + "') Notice_date" +
                               " ,to_char(a.date2,'" + sgen.Getsqldateformat() + "') last_working_date,to_char(a.date3,'" + sgen.Getsqldateformat() + "')  Purposed_Last_Wrk_Date from enx_tab2 a inner join " +
                               "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                               " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                               "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                               "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                               "left join master_setting sr on sr.master_id = a.col9 and sr.type = 'SRM' and " +
                               "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1    " + xprdrange.Replace("vch_DATE", "a.vch_date") + " where a.type = 'SPT' and a.client_unit_id = '" + unitid_mst + "' and a.col10='Pending'";
                            break;

                        case "EMPDETAIL":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Emp_Code," +
                        "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                        "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                        "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining" +
                        " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE emp.type= 'EMP' " +
                        "and emp.client_unit_id= '" + unitid_mst + "' and emp.emp_status='Y' order by emp.emp_code asc";
                            break;

                    }
                    break;
                #endregion
                #region sep approval
                case "sep_apr":
                    cond = "";
                    if (!role_mst.ToUpper().Equals("OWNER"))
                    {
                        string rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                        //cond = "and ( emp.rptto='" + rptto + "' or emp.rptto2='" + rptto + "')";
                        cond = "and  a.col22='" + userid_mst + "'";
                    }
                    switch (btnval.ToUpper())
                    {
                        case "APPROVED":
                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                                    ",a.col7 as app_by,to_char(a.date1,'" + sgen.Getdateformat() + "') as notice_date,to_char(a.date2,'" + sgen.Getdateformat() + "') as last_wrk_dt,a.col4 as remark,emp.emp_code as Emp_Code" +
                                    ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                                    ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department ,ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Approved_By,to_char(a.date5,'" + sgen.Getsqldateformat() + "') Approved_Date from enx_tab2 a inner join " +
                                    "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                                    " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                    "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                                    "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                                    "Inner join user_details ud on a.col22 = ud.vch_num and ud.type = 'CPR'  where a.type = 'SPT' and a.col10='Approved' and a.client_unit_id = '" + unitid_mst + "'  " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + "";
                            break;
                        case "REJECTED":
                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                                      ",a.col7 as app_by,to_char(a.date1,'" + sgen.Getdateformat() + "') as notice_date,to_char(a.date2,'" + sgen.Getdateformat() + "') as last_wrk_dt,a.col4 as remark,emp.emp_code as Emp_Code" +
                                      ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                                      ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department ,ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Rejected_By,to_char(a.date5,'" + sgen.Getsqldateformat() + "') Rejected_Date from enx_tab2 a inner join " +
                                      "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                                      " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                      "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                                      "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                                      "Inner join user_details ud on a.col22 = ud.vch_num and ud.type = 'CPR'" +
                                      " where a.type = 'SPT' and a.col10='Rejected' and a.client_unit_id = '" + unitid_mst + "'  " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + "";
                            break;
                    }
                    break;
                #endregion
                #region kaizen submit

                case "kz_submit":
                    cond = "";
                    if (!role_mst.ToUpper().Equals("OWNER"))
                    {
                        string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                  "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                        cond = " and (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "' ";
                    }

                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT distinct (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.vch_num as doc_no,to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') as doc_date,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name" +
                                ",emp.emp_code as Employee_Code,emp.old_empcode Old_EmpCode,a.COL8 as Saving_Amount,cast (a.COL23 as varchar(1000)) as remark FROM enx_tab2 a ,emp_master emp WHERE a.col20='Pending' and a.TYPE = 'KZS' and a.client_unit_id = '" + unitid_mst + "' " +
                                " and emp.emp_status = 'Y' and a.col5 = emp.vch_num and emp.client_unit_id='" + unitid_mst + "' and emp.type='EMP' " + emp_code + "   " + xprdrange.Replace("vch_DATE", "a.vch_date") + "order by emp.emp_code asc";
                            break;

                    }
                    break;
                #endregion
                #region Kaizen approval
                case "kz_apr":
                    cond = "";
                    if (!role_mst.ToUpper().Equals("OWNER"))
                    {
                        string rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                        cond = "and ( emp.rptto='" + rptto + "' or emp.rptto2='" + rptto + "')";
                    }

                    switch (btnval.ToUpper())
                    {

                        case "APPROVED":
                            cmd = "select a.* from (SELECT nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                      ",a.COL8 saving_amount, a.vch_num doc,emp.f_name as Father_Name,emp.emp_code as Employee_Code," +
                      "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department," +
                      "to_char(emp.st_dt, '" + sgen.Getsqldateformat() + "') as Date_Of_Joining,a.col20 as status, " +
                      "ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Approved_By,to_char(a.date5,'" + sgen.Getsqldateformat() + "') Approved_Date " +
                      "FROM enx_tab2 a,user_details ud ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                      " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                      " WHERE " +
                      "a.TYPE = 'KZS' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " + cond + " " +
                      " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Approved'  and a.col22 = ud.vch_num and ud.type = 'CPR'  " + xprdrange.Replace("vch_DATE", "a.date5") + " order by emp.emp_code asc ) a " +
                      " ";

                            break;
                        case "REJECTED":
                            cmd = "select a.* from (SELECT nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                                  ",a.COL8 loan_amount, a.vch_num doc,emp.f_name as Father_Name,emp.emp_code as Employee_Code," +
                                  "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department," +
                                  "to_char(emp.st_dt, '" + sgen.Getsqldateformat() + "') as Date_Of_Joining,a.col20 as status,a.col6 ," +
                                  "ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Rejected_By,to_char(a.date5,'" + sgen.Getsqldateformat() + "') Rejected_Date " +
                                  "FROM enx_tab2 a,user_details ud ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                                  " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                                   " WHERE " +
                                  "a.TYPE = 'KZS' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " + cond + " " +
                                  " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Rejected'and a.col22 = ud.vch_num and ud.type = 'CPR'   " + xprdrange.Replace("vch_DATE", "a.date5") + " order by emp.emp_code asc) a " +
                                  " ";

                            break;
                    }
                    break;
                #endregion
                #region role master
                case "role_mt":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                "a.vch_num as doc_no,to_char(a.vch_date, '" + sgen.Getsqldateformat() + "') as doc_date,a.col5 as role_name ,a.col6 as description," +
                                "group_concat(ud.first_name || ' ' || replace(ud.middle_name, '0', '') || '' || replace(ud.last_name, '0', '')) as user_name" +
                                "   from enx_tab2 a inner join user_details ud" +
                                " on a.col7 = ud.vch_num and ud.type = 'CPR'" +
                                "where a.type = '" + sgen.GetSession(MyGuid, "role_grp") + "' and a.client_unit_id = '" + unitid_mst + "'" +
                                " group by a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type,a.vch_num," +
                                "to_char(a.vch_date, '" + sgen.Getsqldateformat() + "'),a.col5 ,a.col6 ";

                            break;
                    }
                    break;
                #endregion
                #region good_wishes
                case "good_wishes":
                    switch (btnval.ToUpper())
                    {
                        case "PRV":
                            {
                                cmd = "select '' as fstr, Employee_Name,max(dob_message) dob_message,max(doa_message) doa_message from" +
                                    " (select emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '') as Employee_Name " +
                                    ", a.col31 as DOB_message, '-' as DOA_Message from kc_tab a inner join emp_master emp on find_in_set(a.col41, emp.vch_num) = 1 " +
                                    "and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "' where a.type = 'HRW' and a.client_unit_id = '" + unitid_mst + "' " +
                                    "and a.vch_num = '" + param1 + "' ) a group by Employee_Name";
                            }
                            break;
                    }
                    break;
                #endregion
                #region loan_type
                case "loan_type":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            {
                                cmd = "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.vch_num as doc_no," +
                                    "to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') as doc_date,a.master_name loan_type,a.classid rate_of_Interest" +
                                    " from master_setting a where a.client_unit_id='" + unitid_mst + "' " +
                                    "and  a.type='LON'";
                            }
                            break;
                    }
                    break;
                #endregion
                #region stat_rpt
                case "stat_rpt":
                    switch (btnval.ToUpper())
                    {
                        case "EMP":
                            {
                                cmd = "select ug.client_id||ug.client_unit_id||ug.vch_num||to_char(ug.vch_date,'yyyymmdd')||ug.type as fstr,ug.vch_num as doc_no,to_char(ug.vch_date, 'dd/MM/YYYY') as doc_date,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name,emp.emp_code as Employee_Code,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,emp.cur_address,emp.contact_no as ContactNo,emp.gender as empGender,emp.f_name as Father_Name,ug.col16 as family_member,rl.master_name as relation,ug.col17 as gender,ug.col20 as blood_group,ug.col6 as Email_id,ug.col8 as Nationality,to_char(ug.date1, 'dd/MM/YYYY') as date_of_birth,ug.col5 as mobile,ug.col7 as Profession,ug.col3 as Address from enx_tab2 ug inner join emp_master emp  on emp.emp_code = ug.col2 and emp.client_unit_id = ug.client_unit_id and emp.type = 'EMP' inner join enx_tab2 b on b.col6 = ug.vch_num and b.type = 'NDT' and b.client_unit_id = ug.client_unit_id inner join master_setting rl on rl.master_id = ug.col21 and rl.type = 'REL' and find_in_set(rl.client_unit_id, ug.client_unit_id)= 1 left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id, '" + unitid_mst + "') = 1 where ug.client_unit_id = '" + unitid_mst + "' and ug.type = 'FDT'";
                            }
                            break;
                    }
                    break;
                #endregion
                #region Goal Setting
                case "g_setting":
                    switch (btnval.ToUpper())
                    {
                        case "GOAL":

                            {
                                cmd = "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.master_id as doc_no," +
                                    "to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') as doc_date,  a.master_name as Goal_Name,a.client_name goal_description from master_setting a where a.type='GLM' and a.client_unit_id='" + unitid_mst + "'";
                            }
                            break;
                        case "EDIT":
                        case "VIEW":
                            {
                                cmd = "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                                    " a.vch_num doc_no,to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') doc_date,b.master_name" +
                                    " goal_name,b.client_name as goal_description from enx_tab2 a inner join master_setting b" +
                                    " on a.col5= b.master_id and b.type='GLM' and find_in_set(b.client_unit_id,'" + unitid_mst + "')=1" +
                                    " where  a.type='GLS' and a.client_unit_id='" + unitid_mst + "'";
                            }
                            break;
                    }
                    break;
                #endregion
                #region goal assign
                case "g_assign":

                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":

                            cmd = "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr," +
                                " a.vch_num doc_no ,to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') as doc_date," +
                                "emp.emp_code ,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                                "b.master_name Goal_name,b.client_name goal_Description, a.COL7 weightage, a.COL8 target   from enx_tab2 a " +
                                "inner join master_setting b on a.col6 = b.master_id and b.type = 'GLM' and find_in_set(b.client_unit_id,'" + unitid_mst + "')= 1 " +
                                "inner join emp_master emp on a.col5 = emp.vch_num and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "' " +
                                "where a.type = 'GLA' and a.client_unit_id = '" + unitid_mst + "' order by a.vch_num desc ";
                            break;

                        case "EMPDETAIL":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Emp_Code," +
                        "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                        "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name, " +
                        "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining" +
                        " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE emp.type= 'EMP' " +
                        "and emp.client_unit_id= '" + unitid_mst + "' and emp.emp_status='Y' order by emp.emp_code asc";
                            break;

                    }
                    break;
                    #endregion

            }
            sgen.open_grid(title, cmd, sgen.Make_int(seektype));
            ViewBag.pageurl = sgen.GetSession(MyGuid, "pageurl").ToString();
        }
        #endregion
        //========================callback==============
        #region call back
        public List<Tmodelmain> CallbackFun(string btnval, string edmode, string viewName, string controllerName, List<Tmodelmain> model)
        {
            FillMst(MyGuid);
            DataTable dt = new DataTable();
            String URL = sgen.GetSession(MyGuid, "SSEEKVAL").ToString();
            btnval = btnval.ToUpper();
            List<Tmodelmain> rpt_model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            List<SelectListItem> mod6 = new List<SelectListItem>();
            List<SelectListItem> mod7 = new List<SelectListItem>();
            List<SelectListItem> mod8 = new List<SelectListItem>();
            List<SelectListItem> mod9 = new List<SelectListItem>();
            List<SelectListItem> mod10 = new List<SelectListItem>();
            List<SelectListItem> mod11 = new List<SelectListItem>();
            List<SelectListItem> mod12 = new List<SelectListItem>();
            List<SelectListItem> mod13 = new List<SelectListItem>();
            List<SelectListItem> mod14 = new List<SelectListItem>();
            List<SelectListItem> mod15 = new List<SelectListItem>();
            List<SelectListItem> mod16 = new List<SelectListItem>();
            List<SelectListItem> mod17 = new List<SelectListItem>();
            List<SelectListItem> mod18 = new List<SelectListItem>();
            List<SelectListItem> mod19 = new List<SelectListItem>();
            List<SelectListItem> mod20 = new List<SelectListItem>();
            List<SelectListItem> mod21 = new List<SelectListItem>();
            DataTable dtt = new DataTable();
            var tm = model.FirstOrDefault();
            switch (viewName.ToLower())
            {
                #region OT Entry
                case "ot_entry":
                    switch (btnval)
                    {
                        case "EDIT":
                            mq = "select a.ent_by,a.ent_date,a.vch_num,a.vch_date, emp.vch_num as Emp_Id ,emp.emp_desig,emp.emp_dept,emp.emp_category,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as Employee_Name," +
                                "a.col8,a.col9,a.col10, dp.master_name as dept,dg.master_name as desig,ec.master_name as emp_categ from enx_tab a" +
                                " inner join emp_master emp on a.col7=emp.vch_num and a.client_id=emp.client_id and a.client_unit_id=emp.client_unit_id " +
                                "inner join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,'" + clientid_mst + "')=1 and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                                "inner join master_setting dg on dg.master_id=emp.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,'" + clientid_mst + "')=1 and find_in_set(dg.client_unit_id,'" + unitid_mst + "')=1 " +
                                "inner join master_setting ec on ec.master_id=emp.emp_category and ec.type='KEC' and find_in_set(ec.client_id,'" + clientid_mst + "')=1 and find_in_set(ec.client_unit_id,'" + unitid_mst + "')=1 " +
                                " where   emp.type= 'EMP' and emp.emp_status='Y' and (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region dept
                                TempData[MyGuid + "_Tlist1"] = rpt_model[0].TList1 = mod1 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                                #endregion
                                #region desig
                                TempData[MyGuid + "_Tlist2"] = rpt_model[0].TList2 = mod2 = cmd_Fun.desig(userCode, unitid_mst);

                                #endregion
                                #region category
                                DataTable dt2 = new DataTable();
                                //List<SelectListItem> mod3 = new List<SelectListItem>();
                                dt2 = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KEC' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                if (dt2.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt2.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = rpt_model[0].TList3 = mod3;
                                #endregion
                                #region month
                                TempData[MyGuid + "_Tlist4"] = rpt_model[0].TList4 = mod4 = cmd_Fun.month(userCode, unitid_mst);

                                #endregion
                                foreach (DataRow dr in dtt.Rows)
                                {
                                    rpt_model.Add(new Tmodelmain
                                    {
                                        Col12 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'",
                                        Col13 = dr["ent_by"].ToString(),
                                        Col14 = dr["ent_date"].ToString(),
                                        Col15 = dr["vch_num"].ToString(),
                                        Col16 = dr["Emp_Id"].ToString(),
                                        Col17 = dr["Employee_Name"].ToString(),
                                        Col18 = dr["dept"].ToString(),
                                        Col19 = dr["desig"].ToString(),
                                        Col20 = dr["emp_categ"].ToString(),
                                        Col21 = dr["col8"].ToString(),
                                        //Col3 = "Update"
                                    });
                                }
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_desig"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_dept"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_category"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');

                                //rpt_model[0].TList2 = mod2;
                                //rpt_model[0].TList3 = mod3;
                                //rpt_model[0].TList4 = mod4;
                                rpt_model[0].SelectedItems1 = L1;
                                rpt_model[0].SelectedItems2 = L2;
                                rpt_model[0].SelectedItems3 = L3;
                                rpt_model[0].SelectedItems4 = L4;
                                model = rpt_model;
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                tm.Col21 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region employee
                case "employee_details":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "CEMP":
                            mq = "select a.*,to_char(convert_tz(dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as dob1," +
                        "to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as st_dt1," +
                        "to_char(convert_tz(dom,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as dom1," +
                        "to_char(convert_tz(passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as passport_dt1," +
                        "to_char(convert_tz(ex_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as ex_dt1, " +
                        "to_char(convert_tz(fnf_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as fnf_dt1 " +
                        "from emp_master a where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                #region masters
                                TempData[MyGuid + "_TList1"] = mod1 = cmd_Fun.country(userCode, unitid_mst);      //nationality                               
                                TempData[MyGuid + "_TList2"] = mod2 = cmd_Fun.caste(userCode, unitid_mst);       //caste                                
                                TempData[MyGuid + "_TList17"] = mod17 = cmd_Fun.caste_cate(userCode, unitid_mst);     //caste actegory                                
                                TempData[MyGuid + "_TList3"] = mod3 = cmd_Fun.religion(userCode, unitid_mst);      //religion
                                //blood group (manual fixed)
                                #region
                                mod4.Add(new SelectListItem { Text = "A+", Value = "A+" });
                                mod4.Add(new SelectListItem { Text = "B+", Value = "B+" });
                                mod4.Add(new SelectListItem { Text = "A-", Value = "A-" });
                                mod4.Add(new SelectListItem { Text = "B-", Value = "B-" });
                                mod4.Add(new SelectListItem { Text = "O+", Value = "O+" });
                                mod4.Add(new SelectListItem { Text = "O-", Value = "O-" });
                                mod4.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
                                mod4.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
                                TempData[MyGuid + "_TList4"] = mod4;
                                #endregion
                                // pickup / drop (from other page)
                                #region 

                                TempData[MyGuid + "_TList5"] = mod5 = cmd_Fun.pickdrop(userCode, unitid_mst);      //pickup
                                TempData[MyGuid + "_TList6"] = mod6 = cmd_Fun.pickdrop(userCode, unitid_mst);      //drop location

                                #endregion

                                //disability type (manual fixed)
                                #region
                                mod7.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                                mod7.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                                TempData[MyGuid + "_TList7"] = mod7;
                                #endregion

                                #region
                                TempData[MyGuid + "_TList8"] = mod8 = cmd_Fun.lang(userCode, unitid_mst);       //language known
                                TempData[MyGuid + "_TList9"] = mod9 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);        //department
                                #endregion

                                #region
                                TempData[MyGuid + "_TList10"] = mod10 = cmd_Fun.desig(userCode, unitid_mst);      //designation

                                #endregion
                                //employee type
                                #region
                                // shiv
                                DataTable dtet = new DataTable();
                                dtet = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KET' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                if (dtet.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtet.Rows)
                                    {
                                        mod11.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_TList11"] = mod11;
                                #endregion
                                //employee category
                                #region
                                // shiv
                                DataTable dtec = new DataTable();
                                dtec = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KEC' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                if (dtec.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtec.Rows)
                                    {
                                        mod12.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_TList12"] = mod12;
                                #endregion
                                //bank
                                #region
                                TempData[MyGuid + "_TList13"] = mod13 = cmd_Fun.bank(userCode, unitid_mst);

                                #endregion
                                //account type
                                #region
                                TempData[MyGuid + "_TList14"] = mod14 = cmd_Fun.acctype(userCode, unitid_mst);

                                #endregion
                                //joinee age
                                #region       
                                // shiv                               
                                mq = "select master_name,classid from master_Setting where type='JAM' and client_unit_id='" + unitid_mst + "'";
                                dt = sgen.getdata(userCode, mq);
                                if (dt.Rows.Count > 0)
                                {
                                    mage = sgen.seekval_dt(dt, "master_name='001'", "classid");
                                    fage = sgen.seekval_dt(dt, "master_name='002'", "classid");
                                }
                                #endregion
                                #region joinee type
                                mod15.Add(new SelectListItem { Text = "New", Value = "001" });
                                mod15.Add(new SelectListItem { Text = "Rejoin", Value = "002" });
                                TempData[MyGuid + "_TList15"] = mod15;
                                #endregion
                                #region contractor              
                                TempData[MyGuid + "_TList16"] = mod16 = cmd_Fun.ddl_vendor(userCode, unitid_mst);

                                #endregion
                                #region leave reson              
                                TempData[MyGuid + "_TList18"] = mod18 = cmd_Fun.leavereas(userCode, unitid_mst);

                                #endregion
                                #region lOC REG              
                                TempData[MyGuid + "_TList20"] = mod20 = cmd_Fun.locreg(userCode, unitid_mst);

                                #endregion
                                TempData[MyGuid + "_TList19"] = mod19;
                                #region payment mode
                                mod21.Add(new SelectListItem { Text = "Cash", Value = "001" });
                                mod21.Add(new SelectListItem { Text = "Cheque", Value = "002" });
                                mod21.Add(new SelectListItem { Text = "Bank Transfer", Value = "003" });
                                mod21.Add(new SelectListItem { Text = "Demand Draft", Value = "004" });
                                TempData[MyGuid + "_TList21"] = model[0].TList21 = mod21;
                                #endregion

                                #endregion
                                foreach (DataRow dr in dtt.Rows)
                                {
                                    if (btnval.Equals("CEMP"))
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "N");
                                        model[0].Col5 = "-";
                                        model[0].Col7 = "0";
                                        model[0].Col4 = "";
                                        model[0].Col6 = "";
                                        model[0].Col10 = "";
                                        model[0].Col1 = "";
                                        model[0].Col2 = "";
                                        mq = "select max(to_number(vch_num)) as auto_genid from emp_master where type='EMP' and client_id='" + clientid_mst + "'";
                                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                                        isedit = false;
                                        emp_code = "GMC" + vch_num;
                                        model[0].Col11 = vch_num;
                                        model[0].Col58 = emp_code.Trim();
                                    }
                                    else
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "Y");
                                        model[0].Col5 = dr["edit_by"].ToString();
                                        model[0].Col7 = dr["rec_id"].ToString();
                                        model[0].Col4 = dr["ent_date"].ToString();
                                        model[0].Col6 = dr["edit_date"].ToString();
                                        model[0].Col10 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'";
                                        model[0].Col11 = dr["vch_num"].ToString();
                                        model[0].Col1 = dr["client_id"].ToString();
                                        model[0].Col2 = dr["client_unit_id"].ToString();
                                        model[0].Col58 = dr["emp_code"].ToString();
                                    }
                                    model[0].Col3 = dr["ent_by"].ToString();
                                    model[0].Col12 = dr["first_name"].ToString();
                                    model[0].Col13 = dr["middle_name"].ToString();
                                    model[0].Col14 = dr["last_name"].ToString();
                                    model[0].Col15 = dr["gender"].ToString();
                                    model[0].Col16 = dr["dob1"].ToString();
                                    model[0].Col17 = dr["pob"].ToString();
                                    model[0].Col18 = dr["mother_tongue"].ToString();
                                    model[0].Col19 = dr["adhaar_no"].ToString();
                                    model[0].Col20 = dr["vid_no"].ToString();
                                    model[0].Col21 = dr["m_name"].ToString();
                                    model[0].Col22 = dr["f_name"].ToString();
                                    model[0].TList1 = mod1;
                                    model[0].TList2 = mod2;
                                    model[0].TList3 = mod3;
                                    model[0].TList4 = mod4;
                                    model[0].TList5 = mod5;
                                    model[0].TList6 = mod6;
                                    model[0].TList19 = mod19;
                                    model[0].TList20 = mod20;
                                    model[0].TList17 = mod17;
                                    String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["nationality"].ToString()).Distinct()).Split(',');
                                    String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["caste"].ToString()).Distinct()).Split(',');
                                    String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["religion"].ToString()).Distinct()).Split(',');
                                    String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["blood_grp"].ToString()).Distinct()).Split(',');
                                    String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["pick_point"].ToString()).Distinct()).Split(',');
                                    String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["drop_point"].ToString()).Distinct()).Split(',');
                                    String[] L20 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["locreg"].ToString()).Distinct()).Split(',');
                                    String[] L21 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["paymode"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems1 = L1;
                                    model[0].SelectedItems2 = L2;
                                    model[0].SelectedItems3 = L3;
                                    model[0].SelectedItems4 = L4;
                                    model[0].SelectedItems5 = L5;
                                    model[0].SelectedItems6 = L6;
                                    model[0].SelectedItems19 = new string[] { dr["subdept"].ToString() };
                                    model[0].SelectedItems20 = L20;
                                    model[0].SelectedItems21 = L21;
                                    if (dr["ismarried"].ToString().Equals("Y"))
                                    {
                                        model[0].Chk1 = true;
                                        model[0].Col23 = dr["dom1"].ToString();
                                        model[0].Col24 = dr["spouse_name"].ToString();
                                        model[0].Col25 = dr["havechild"].ToString();
                                        model[0].Col26 = dr["child_count"].ToString();
                                        if (dr["isspouseworking"].ToString().Equals("Y"))
                                        {
                                            model[0].Chk2 = true;
                                            model[0].Col27 = dr["spouse_org"].ToString();
                                            model[0].Col28 = dr["spouse_desig"].ToString();
                                        }
                                    }
                                    model[0].Col29 = dr["contact_no"].ToString();
                                    model[0].Col30 = dr["alt_contact_no"].ToString();
                                    model[0].Col31 = dr["email_id"].ToString();
                                    model[0].Col32 = dr["emer_contact_no"].ToString();
                                    model[0].Col33 = dr["emer_contact_name"].ToString();
                                    model[0].Col34 = dr["emer_contact_relation"].ToString();
                                    model[0].Col35 = dr["havetransport"].ToString();
                                    model[0].Col36 = dr["per_address"].ToString();
                                    string vill1 = dr["per_village"].ToString();
                                    if (vill1.Length > 0)
                                    {
                                        DataTable dtvill1 = new DataTable();
                                        dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name,  district_name, teh_name, v_name," +
                                            "pincode from country_state where v_id = '" + dr["per_village"].ToString().Trim() + "' and client_id = '"
                                            + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'");
                                        if (dtvill1.Rows.Count > 0)
                                        {
                                            model[0].Col42 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                            model[0].Col41 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                            model[0].Col40 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                            model[0].Col39 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                            model[0].Col38 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                            model[0].Col37 = dtvill1.Rows[0]["pincode"].ToString().Trim();
                                            model[0].Col8 = dtvill1.Rows[0]["rec_id"].ToString();
                                            sgen.SetSession(MyGuid, "schv_rec_id", dtvill1.Rows[0]["rec_id"].ToString());
                                        }
                                    }
                                    if (dr["isperadd"].ToString().Equals("Y")) model[0].Chk3 = true;
                                    model[0].Col43 = dr["cur_address"].ToString();
                                    string vill2 = dr["cur_village"].ToString();
                                    if (!vill2.Equals(""))
                                    {
                                        DataTable dtvill2 = new DataTable();
                                        dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,district_name,teh_name,v_name," +
                                            "pincode from country_state where v_id='" + dr["cur_village"].ToString() + "' and client_id='"
                                            + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                        if (dtvill2.Rows.Count > 0)
                                        {
                                            model[0].Col49 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                            model[0].Col48 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                            model[0].Col47 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                            model[0].Col46 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                            model[0].Col45 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                            model[0].Col44 = dtvill2.Rows[0]["pincode"].ToString().Trim();
                                            model[0].Col9 = dtvill2.Rows[0]["rec_id"].ToString();
                                            sgen.SetSession(MyGuid, "schv1_rec_id", dtvill2.Rows[0]["rec_id"].ToString());
                                        }
                                    }
                                    model[0].TList7 = mod7;
                                    if (dr["isdisable"].ToString().Equals("Y"))
                                    {
                                        model[0].Chk4 = true;
                                        String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["dis_type"].ToString()).Distinct()).Split(',');
                                        model[0].SelectedItems7 = L7;
                                        model[0].Col50 = dr["dis_desc"].ToString();
                                    }
                                    model[0].Col51 = dr["pan_no"].ToString();
                                    model[0].Col52 = dr["pf_no"].ToString();
                                    model[0].Col53 = dr["pf_uan"].ToString();
                                    model[0].Col54 = dr["esi_no"].ToString();
                                    model[0].Col55 = dr["biometric_id"].ToString();
                                    model[0].Col56 = dr["passport_no"].ToString();
                                    model[0].Col57 = dr["passport_dt1"].ToString();
                                    model[0].Col59 = dr["external_empno"].ToString();
                                    model[0].Col60 = dr["old_empcode"].ToString();
                                    model[0].Col61 = dr["st_dt1"].ToString();
                                    model[0].Col62 = dr["ex_dt1"].ToString();
                                    model[0].Col83 = dr["fnf_dt1"].ToString();
                                    model[0].TList8 = mod8;
                                    String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["language"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems8 = L8;
                                    model[0].Col63 = dr["col1"].ToString();
                                    if (dr["is_vpf"].ToString().Equals("Y")) model[0].Chk5 = true;
                                    model[0].Col64 = dr["vpf"].ToString();
                                    if (dr["ispflimit"].ToString().Equals("Y")) model[0].Chk6 = true;
                                    model[0].Col65 = dr["pf_limit"].ToString();
                                    if (dr["isesilimit"].ToString().Equals("Y")) model[0].Chk7 = true;
                                    model[0].Col86 = dr["esi_limit"].ToString();
                                    //if (dr["emp_status"].ToString().Equals("Y")) model[0].Chk7 = true;
                                    model[0].Col87 = dr["emp_status"].ToString();
                                    if (dr["istrans"].ToString().Trim().Equals("Y"))
                                    {
                                        model[0].Col87 = "T";
                                    }
                                    if (dr["iscanteen"].ToString().Equals("Y")) model[0].Chk8 = true;
                                    model[0].Col85 = dr["canteen"].ToString();
                                    model[0].TList9 = mod9;
                                    model[0].TList10 = mod10;
                                    model[0].TList11 = mod11;
                                    model[0].TList12 = mod12;
                                    model[0].TList13 = mod13;
                                    model[0].TList14 = mod14;
                                    model[0].TList15 = mod15;
                                    model[0].TList16 = mod16;
                                    model[0].TList17 = mod17;
                                    model[0].TList18 = mod18;
                                    String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_dept"].ToString()).Distinct()).Split(',');
                                    String[] L10 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_desig"].ToString()).Distinct()).Split(',');
                                    String[] L11 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_type"].ToString()).Distinct()).Split(',');
                                    String[] L12 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_category"].ToString()).Distinct()).Split(',');
                                    String[] L13 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["bank_name"].ToString()).Distinct()).Split(',');
                                    String[] L14 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["account_type"].ToString()).Distinct()).Split(',');
                                    String[] L15 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["jtype"].ToString()).Distinct()).Split(',');
                                    String[] L16 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["contr"].ToString()).Distinct()).Split(',');
                                    String[] L17 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["caste_cat"].ToString()).Distinct()).Split(',');
                                    String[] L18 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["l_reason"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems9 = L9;
                                    model[0].SelectedItems10 = L10;
                                    model[0].SelectedItems11 = L11;
                                    model[0].SelectedItems12 = L12;
                                    model[0].SelectedItems13 = L13;
                                    model[0].SelectedItems14 = L14;
                                    model[0].SelectedItems15 = L15;
                                    model[0].SelectedItems16 = L16;
                                    model[0].SelectedItems17 = L17;
                                    model[0].SelectedItems18 = L18;
                                    model[0].Col66 = dr["account_no"].ToString();
                                    model[0].Col67 = dr["ifsc_code"].ToString();
                                    model[0].Col68 = dr["micr_no"].ToString();
                                    model[0].Col69 = mage;
                                    model[0].Col70 = fage;
                                    model[0].Col76 = dr["latlng"].ToString();
                                    model[0].Col77 = dr["addr"].ToString();
                                    model[0].Col78 = dr["pension_no"].ToString();
                                    model[0].Col79 = dr["off_email"].ToString();
                                    model[0].Col80 = dr["off_contact"].ToString();
                                    model[0].Chk9 = dr["log"].ToString() == "Y" ? true : false;
                                    model[0].Col95 = dr["act_hrs"].ToString();
                                    model[0].Col102 = dr["prob"].ToString();
                                    model[0].Col103 = dr["notempr"].ToString();
                                    model[0].Col104 = dr["notemp"].ToString();
                                    model[0].Col105 = dr["pop"].ToString();
                                    model[0].Col106 = dr["statustype"].ToString();
                                    model[0].Col107 = dr["jconfdt"].ToString();
                                    model[0].Col108 = dr["off_phone"].ToString();
                                    model[0].Col109 = dr["extno"].ToString();

                                    mq1 = "select (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) empname,d.master_name dept," +
                               "g.master_name desig,e.rptto from emp_master e " +
                               "inner join master_setting d on d.master_id=e.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,e.client_unit_id)=1 " +
                               "inner join master_setting g on g.master_id=e.emp_desig and g.type='MDP' and find_in_set(g.client_unit_id,e.client_unit_id)=1 " +
                               "where e.type='EMP' and e.vch_num='" + dr["rptto"].ToString() + "'";
                                    DataTable dtc = sgen.getdata(userCode, mq1);
                                    if (dtc.Rows.Count > 0)
                                    {
                                        model[0].Col96 = dtc.Rows[0]["empname"].ToString();
                                        model[0].Col97 = dtc.Rows[0]["rptto"].ToString();
                                        model[0].Col98 = dtc.Rows[0]["dept"].ToString();
                                        model[0].Col99 = dtc.Rows[0]["desig"].ToString();
                                    }

                                    mq1 = "select (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) empname,d.master_name dept," +
                               "g.master_name desig,rptto2 from emp_master e " +
                               "inner join master_setting d on d.master_id=e.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,e.client_unit_id)=1 " +
                               "inner join master_setting g on g.master_id=e.emp_desig and g.type='MDP' and find_in_set(g.client_unit_id,e.client_unit_id)=1 " +
                               "where e.type='EMP' and e.vch_num='" + dr["rptto2"].ToString() + "'";
                                    DataTable dtc1 = sgen.getdata(userCode, mq1);
                                    if (dtc1.Rows.Count > 0)
                                    {
                                        model[0].Col100 = dtc1.Rows[0]["empname"].ToString();
                                        model[0].Col101 = dtc1.Rows[0]["rptto2"].ToString();
                                    }

                                    DataTable dtf = new DataTable();
                                    dtf = sgen.getdata(userCode, "select rec_id,file_name,file_path,col1 from file_tab where" +
                                        " ref_code='" + dr["vch_num"].ToString() + "' and type='" + type + "' and " +
                                        "client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                    List<Tmodelmain> ltmf = new List<Tmodelmain>();
                                    foreach (DataRow drf in dtf.Rows)
                                    {
                                        Tmodelmain tmf = new Tmodelmain();
                                        tmf.Col1 = drf["file_name"].ToString();
                                        tmf.Col2 = drf["col1"].ToString();
                                        tmf.Col3 = drf["rec_id"].ToString();
                                        ltmf.Add(tmf);
                                    }
                                    model[0].LTM1 = ltmf;
                                }
                            }
                            break;
                        case "DELETE":
                            mq = "select a.*,to_char(convert_tz(dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as dob1," +
             "to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as st_dt1," +
             "to_char(convert_tz(dom,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as dom1," +
             "to_char(convert_tz(passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as passport_dt1," +
             "to_char(convert_tz(ex_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as ex_dt1, " +
             "to_char(convert_tz(fnf_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as fnf_dt1,trim((a.FIRST_NAME || ' ' || REPLACE(a.MIDDLE_NAME, '0', '') || ' ' || REPLACE(a.LAST_NAME, '0', ''))) Employee_Name " +
             "from emp_master a where (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
                            TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
                            TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5;
                            TempData[MyGuid + "_TList6"] = model[0].TList6 = mod6;
                            TempData[MyGuid + "_TList7"] = model[0].TList7 = mod7;
                            TempData[MyGuid + "_TList8"] = model[0].TList8 = mod8;
                            TempData[MyGuid + "_TList9"] = model[0].TList9 = mod9;
                            TempData[MyGuid + "_TList10"] = model[0].TList10 = mod10;
                            TempData[MyGuid + "_TList11"] = model[0].TList11 = mod11;
                            TempData[MyGuid + "_TList12"] = model[0].TList12 = mod12;
                            TempData[MyGuid + "_TList13"] = model[0].TList13 = mod13;
                            TempData[MyGuid + "_TList14"] = model[0].TList14 = mod14;
                            TempData[MyGuid + "_TList15"] = model[0].TList15 = mod15;
                            TempData[MyGuid + "_TList16"] = model[0].TList16 = mod16;
                            TempData[MyGuid + "_TList17"] = model[0].TList17 = mod17;
                            TempData[MyGuid + "_TList18"] = model[0].TList18 = mod18;
                            TempData[MyGuid + "_TList19"] = model[0].TList19 = mod19;
                            TempData[MyGuid + "_TList20"] = model[0].TList20 = mod20;
                            TempData[MyGuid + "_TList21"] = model[0].TList21 = mod21;
                            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                            if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
                            if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
                            if (model[0].SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
                            if (model[0].SelectedItems10 == null) model[0].SelectedItems10 = new string[] { "" };
                            if (model[0].SelectedItems11 == null) model[0].SelectedItems11 = new string[] { "" };
                            if (model[0].SelectedItems12 == null) model[0].SelectedItems12 = new string[] { "" };
                            if (model[0].SelectedItems13 == null) model[0].SelectedItems13 = new string[] { "" };
                            if (model[0].SelectedItems14 == null) model[0].SelectedItems14 = new string[] { "" };
                            if (model[0].SelectedItems15 == null) model[0].SelectedItems15 = new string[] { "" };
                            if (model[0].SelectedItems16 == null) model[0].SelectedItems16 = new string[] { "" };
                            if (model[0].SelectedItems17 == null) model[0].SelectedItems17 = new string[] { "" };
                            if (model[0].SelectedItems18 == null) model[0].SelectedItems18 = new string[] { "" };
                            if (model[0].SelectedItems19 == null) model[0].SelectedItems19 = new string[] { "" };
                            if (model[0].SelectedItems20 == null) model[0].SelectedItems20 = new string[] { "" };
                            if (model[0].SelectedItems21 == null) model[0].SelectedItems21 = new string[] { "" };
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col10 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "' and emp_code='" + dtt.Rows[0]["emp_code"].ToString() + "'";
                                ViewBag.vnew = "";
                                ViewBag.vedit = "";
                                ViewBag.vsave = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                ViewBag.scripCall += "showmsgJS(2, 'Do you Want To Delete " + dtt.Rows[0]["Employee_Name"].ToString() + " ', 1);disableForm();";
                            }
                            break;
                        case "FDEL":
                            string fid = sgen.GetSession(MyGuid, "delid").ToString();
                            res = sgen.execute_cmd(userCode, "Delete from file_tab WHERE rec_id='" + fid + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                            sgen.SetSession(MyGuid, "delid", null);
                            if (res)
                            {
                                var LTM = model[0].LTM1;
                                for (int d = 0; d < LTM.Count; d++)
                                {
                                    var id = LTM[d].Col3;
                                    if (id == fid) { model[0].LTM1.RemoveAt(d); }
                                }
                            }
                            break;
                        case "ADD1":
                            mq = "select * from country_state where (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col42 = dtt.Rows[0]["country_name"].ToString();
                                model[0].Col41 = dtt.Rows[0]["state_name"].ToString();
                                model[0].Col40 = dtt.Rows[0]["district_name"].ToString();
                                model[0].Col39 = dtt.Rows[0]["teh_name"].ToString();
                                model[0].Col38 = dtt.Rows[0]["v_name"].ToString();
                                model[0].Col37 = dtt.Rows[0]["pincode"].ToString();
                                model[0].Col8 = dtt.Rows[0]["rec_id"].ToString();
                                sgen.SetSession(MyGuid, "schv_rec_id", dtt.Rows[0]["rec_id"].ToString());
                            }
                            break;
                        case "ADD2":
                            mq = "select * from country_state where (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col49 = dtt.Rows[0]["country_name"].ToString();
                                model[0].Col48 = dtt.Rows[0]["state_name"].ToString();
                                model[0].Col47 = dtt.Rows[0]["district_name"].ToString();
                                model[0].Col46 = dtt.Rows[0]["teh_name"].ToString();
                                model[0].Col45 = dtt.Rows[0]["v_name"].ToString();
                                model[0].Col44 = dtt.Rows[0]["pincode"].ToString();
                                model[0].Col9 = dtt.Rows[0]["rec_id"].ToString();
                                sgen.SetSession(MyGuid, "schv1_rec_id", dtt.Rows[0]["rec_id"].ToString());
                            }
                            break;
                        case "UNIT":
                            mq = "select u.cup_id,u.company_profile_id from company_unit_profile u where (u.cup_id||u.company_profile_id||to_char(u.vch_date,'yyyymmdd'))= '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                Make_query(viewName.ToLower(), "Select Employee", "CEMP", "1", dtt.Rows[0]["company_profile_id"].ToString().Trim(), dtt.Rows[0]["cup_id"].ToString().Trim(), model[0].Col82);
                                ViewBag.scripCall = "callFoo('Select Employee To Copy');";
                            }
                            break;
                        case "RPTTO":
                            mq = "select (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) empname,e.vch_num,d.master_name dept," +
                                "g.master_name desig from emp_master e " +
                                "inner join master_setting d on d.master_id=e.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,e.client_unit_id)=1 " +
                                "inner join master_setting g on g.master_id=e.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,e.client_unit_id)=1 " +
                                "where (e.client_id||e.vch_num|| to_char(e.vch_date, 'yyyymmdd')|| e.type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col96 = dtt.Rows[0]["empname"].ToString();
                                model[0].Col97 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col98 = dtt.Rows[0]["dept"].ToString();
                                model[0].Col99 = dtt.Rows[0]["desig"].ToString();
                            }
                            break;
                        case "RPTTO2":
                            mq = "select (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) empname,e.vch_num,d.master_name dept," +
                                "g.master_name desig from emp_master e " +
                                "inner join master_setting d on d.master_id=e.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,e.client_unit_id)=1 " +
                                "inner join master_setting g on g.master_id=e.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,e.client_unit_id)=1 " +
                                "where (e.client_id||e.vch_num|| to_char(e.vch_date, 'yyyymmdd')|| e.type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col100 = dtt.Rows[0]["empname"].ToString();
                                model[0].Col101 = dtt.Rows[0]["vch_num"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region Employee Details 2
                case "employee_details2":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "CEMP":
                            mq = "select a.*,to_char(convert_tz(dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as dob1," +
                        "to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as st_dt1," +
                        "to_char(convert_tz(dom,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as dom1," +
                        "to_char(convert_tz(passport_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as passport_dt1," +
                        "to_char(convert_tz(ex_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as ex_dt1 " +
                        "from emp_master a where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                #region masters
                                //nationality
                                #region
                                mod1 = cmd_Fun.country(userCode, unitid_mst);
                                TempData[MyGuid + "_TList1"] = mod1;
                                #endregion
                                //caste
                                #region
                                //mod2 = cmd_Fun.caste(userCode, clientid_mst, unitid_mst);
                                mod2 = cmd_Fun.caste(userCode, unitid_mst);
                                TempData[MyGuid + "_TList2"] = mod2;
                                #endregion
                                //caste actegory
                                #region
                                mod17 = cmd_Fun.caste_cate(userCode, unitid_mst);
                                TempData[MyGuid + "_TList17"] = mod17;
                                #endregion
                                //religion
                                #region
                                mod3 = cmd_Fun.religion(userCode, unitid_mst);
                                TempData[MyGuid + "_TList3"] = mod3;
                                #endregion
                                //blood group
                                #region
                                mod4.Add(new SelectListItem { Text = "A+", Value = "A+" });
                                mod4.Add(new SelectListItem { Text = "B+", Value = "B+" });
                                mod4.Add(new SelectListItem { Text = "A-", Value = "A-" });
                                mod4.Add(new SelectListItem { Text = "B-", Value = "B-" });
                                mod4.Add(new SelectListItem { Text = "O+", Value = "O+" });
                                mod4.Add(new SelectListItem { Text = "O-", Value = "O-" });
                                mod4.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
                                mod4.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
                                TempData[MyGuid + "_TList4"] = mod4;
                                #endregion
                                // pickup
                                #region
                                // shiv
                                DataTable dtploc = new DataTable();
                                dtploc = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='LOC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                if (dtploc.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtploc.Rows)
                                    {
                                        mod5.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_TList5"] = mod5;
                                #endregion
                                //drop
                                #region
                                // shiv
                                DataTable dtdloc = new DataTable();
                                dtdloc = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='LOC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                if (dtdloc.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtdloc.Rows)
                                    {
                                        mod6.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_TList6"] = mod6;
                                #endregion
                                //disability type
                                #region
                                mod7.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                                mod7.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                                TempData[MyGuid + "_TList7"] = mod7;
                                #endregion
                                //language known
                                #region
                                mod8 = cmd_Fun.lang(userCode, unitid_mst);
                                TempData[MyGuid + "_TList8"] = mod8;
                                #endregion
                                //department
                                #region
                                mod9 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                                TempData[MyGuid + "_TList9"] = mod9;
                                #endregion
                                //designation
                                #region
                                mod10 = cmd_Fun.desig(userCode, unitid_mst);
                                TempData[MyGuid + "_TList10"] = mod10;
                                #endregion
                                //employee type
                                #region
                                // shiv
                                DataTable dtet = new DataTable();
                                dtet = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KET' " +
                                    " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                if (dtet.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtet.Rows)
                                    {
                                        mod11.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_TList11"] = mod11;
                                #endregion
                                //employee category
                                #region
                                // shiv
                                DataTable dtec = new DataTable();
                                dtec = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KEC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                if (dtec.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtec.Rows)
                                    {
                                        mod12.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_TList12"] = mod12;
                                #endregion
                                //bank
                                #region
                                mod13 = cmd_Fun.bank(userCode, unitid_mst);
                                TempData[MyGuid + "_TList13"] = mod13;
                                #endregion
                                //account type
                                #region
                                mod14 = cmd_Fun.acctype(userCode, unitid_mst);
                                TempData[MyGuid + "_TList14"] = mod14;
                                #endregion
                                //joinee age
                                #region       
                                // shiv
                                DataTable dtj = new DataTable();
                                mq = "select master_name,classid from master_Setting where type='JAM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                                dtj = sgen.getdata(userCode, mq);
                                if (dtj.Rows.Count > 0)
                                {
                                    mage = sgen.seekval_dt(dtj, "master_name='001'", "classid");
                                    fage = sgen.seekval_dt(dtj, "master_name='002'", "classid");
                                }
                                #endregion
                                #region joinee type
                                mod15.Add(new SelectListItem { Text = "New", Value = "001" });
                                mod15.Add(new SelectListItem { Text = "Rejoin", Value = "002" });
                                TempData[MyGuid + "_TList15"] = mod15;
                                #endregion
                                #region contractor              
                                mod16 = cmd_Fun.ddl_vendor(userCode, unitid_mst);
                                TempData[MyGuid + "_TList16"] = mod16;
                                #endregion
                                #region leave reson              
                                mod18 = cmd_Fun.leavereas(userCode, unitid_mst);
                                TempData[MyGuid + "_TList18"] = mod18;
                                #endregion
                                #endregion
                                foreach (DataRow dr in dtt.Rows)
                                {
                                    if (btnval.Equals("CEMP"))
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "N");
                                        model[0].Col5 = "-";
                                        model[0].Col7 = "0";
                                        model[0].Col4 = "";
                                        model[0].Col6 = "";
                                        model[0].Col10 = "";
                                        model[0].Col1 = "";
                                        model[0].Col2 = "";
                                        mq = "select max(to_number(vch_num)) as auto_genid from emp_master where type='EMP' and client_id='" + clientid_mst + "'";
                                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                                        isedit = false;
                                        emp_code = "GMC" + vch_num;
                                        model[0].Col11 = vch_num;
                                        model[0].Col58 = emp_code.Trim();
                                    }
                                    else
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "Y");
                                        model[0].Col5 = dr["edit_by"].ToString();
                                        model[0].Col7 = dr["rec_id"].ToString();
                                        model[0].Col4 = dr["ent_date"].ToString();
                                        model[0].Col6 = dr["edit_date"].ToString();
                                        model[0].Col10 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'";
                                        model[0].Col11 = dr["vch_num"].ToString();
                                        model[0].Col1 = dr["client_id"].ToString();
                                        model[0].Col2 = dr["client_unit_id"].ToString();
                                        model[0].Col58 = dr["emp_code"].ToString();
                                    }
                                    model[0].Col3 = dr["ent_by"].ToString();
                                    model[0].Col12 = dr["first_name"].ToString();
                                    model[0].Col13 = dr["middle_name"].ToString();
                                    model[0].Col14 = dr["last_name"].ToString();
                                    model[0].Col15 = dr["gender"].ToString();
                                    model[0].Col16 = dr["dob1"].ToString();
                                    model[0].Col17 = dr["pob"].ToString();
                                    model[0].Col18 = dr["mother_tongue"].ToString();
                                    model[0].Col19 = dr["adhaar_no"].ToString();
                                    model[0].Col20 = dr["vid_no"].ToString();
                                    model[0].Col21 = dr["m_name"].ToString();
                                    model[0].Col22 = dr["f_name"].ToString();
                                    model[0].TList1 = mod1;
                                    model[0].TList2 = mod2;
                                    model[0].TList3 = mod3;
                                    model[0].TList4 = mod4;
                                    model[0].TList5 = mod5;
                                    model[0].TList6 = mod6;
                                    String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["nationality"].ToString()).Distinct()).Split(',');
                                    String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["caste"].ToString()).Distinct()).Split(',');
                                    String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["religion"].ToString()).Distinct()).Split(',');
                                    String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["blood_grp"].ToString()).Distinct()).Split(',');
                                    String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["pick_point"].ToString()).Distinct()).Split(',');
                                    String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["drop_point"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems1 = L1;
                                    model[0].SelectedItems2 = L2;
                                    model[0].SelectedItems3 = L3;
                                    model[0].SelectedItems4 = L4;
                                    model[0].SelectedItems5 = L5;
                                    model[0].SelectedItems6 = L6;
                                    if (dr["ismarried"].ToString().Equals("Y"))
                                    {
                                        model[0].Chk1 = true;
                                        model[0].Col23 = dr["dom1"].ToString();
                                        model[0].Col24 = dr["spouse_name"].ToString();
                                        model[0].Col25 = dr["havechild"].ToString();
                                        model[0].Col26 = dr["child_count"].ToString();
                                        if (dr["isspouseworking"].ToString().Equals("Y"))
                                        {
                                            model[0].Chk2 = true;
                                            model[0].Col27 = dr["spouse_org"].ToString();
                                            model[0].Col28 = dr["spouse_desig"].ToString();
                                        }
                                    }
                                    model[0].Col29 = dr["contact_no"].ToString();
                                    model[0].Col30 = dr["alt_contact_no"].ToString();
                                    model[0].Col31 = dr["email_id"].ToString();
                                    model[0].Col32 = dr["emer_contact_no"].ToString();
                                    model[0].Col33 = dr["emer_contact_name"].ToString();
                                    model[0].Col34 = dr["emer_contact_relation"].ToString();
                                    model[0].Col35 = dr["havetransport"].ToString();
                                    model[0].Col36 = dr["per_address"].ToString();
                                    string vill1 = dr["per_village"].ToString();
                                    if (vill1.Length > 0)
                                    {
                                        DataTable dtvill1 = new DataTable();
                                        dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name,  district_name, teh_name, v_name," +
                                            "pincode from country_state where v_id = '" + dr["per_village"].ToString().Trim() + "' and client_id = '"
                                            + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'");
                                        if (dtvill1.Rows.Count > 0)
                                        {
                                            model[0].Col42 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                            model[0].Col41 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                            model[0].Col40 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                            model[0].Col39 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                            model[0].Col38 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                            model[0].Col37 = dtvill1.Rows[0]["pincode"].ToString().Trim();
                                            model[0].Col8 = dtvill1.Rows[0]["rec_id"].ToString();
                                            sgen.SetSession(MyGuid, "schv_rec_id", dtvill1.Rows[0]["rec_id"].ToString());
                                        }
                                    }
                                    if (dr["isperadd"].ToString().Equals("Y")) model[0].Chk3 = true;
                                    model[0].Col43 = dr["cur_address"].ToString();
                                    string vill2 = dr["cur_village"].ToString();
                                    if (!vill2.Equals(""))
                                    {
                                        DataTable dtvill2 = new DataTable();
                                        dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,district_name,teh_name,v_name," +
                                            "pincode from country_state where v_id='" + dr["cur_village"].ToString() + "' and client_id='"
                                            + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                        if (dtvill2.Rows.Count > 0)
                                        {
                                            model[0].Col49 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                            model[0].Col48 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                            model[0].Col47 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                            model[0].Col46 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                            model[0].Col45 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                            model[0].Col44 = dtvill2.Rows[0]["pincode"].ToString().Trim();
                                            model[0].Col9 = dtvill2.Rows[0]["rec_id"].ToString();
                                            sgen.SetSession(MyGuid, "schv1_rec_id", dtvill2.Rows[0]["rec_id"].ToString());
                                        }
                                    }
                                    model[0].TList7 = mod7;
                                    if (dr["isdisable"].ToString().Equals("Y"))
                                    {
                                        model[0].Chk4 = true;
                                        String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["dis_type"].ToString()).Distinct()).Split(',');
                                        model[0].SelectedItems7 = L7;
                                        model[0].Col50 = dr["dis_desc"].ToString();
                                    }
                                    model[0].Col51 = dr["pan_no"].ToString();
                                    model[0].Col52 = dr["pf_no"].ToString();
                                    model[0].Col53 = dr["pf_uan"].ToString();
                                    model[0].Col54 = dr["esi_no"].ToString();
                                    model[0].Col55 = dr["biometric_id"].ToString();
                                    model[0].Col56 = dr["passport_no"].ToString();
                                    model[0].Col57 = dr["passport_dt1"].ToString();
                                    model[0].Col59 = dr["external_empno"].ToString();
                                    model[0].Col60 = dr["old_empcode"].ToString();
                                    model[0].Col61 = dr["st_dt1"].ToString();
                                    model[0].Col62 = dr["ex_dt1"].ToString();
                                    model[0].TList8 = mod8;
                                    String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["language"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems8 = L8;
                                    model[0].Col63 = dr["col1"].ToString();
                                    if (dr["is_vpf"].ToString().Equals("Y")) model[0].Chk5 = true;
                                    model[0].Col64 = dr["vpf"].ToString();
                                    if (dr["ispflimit"].ToString().Equals("Y")) model[0].Chk6 = true;
                                    model[0].Col65 = dr["pf_limit"].ToString();
                                    //if (dr["emp_status"].ToString().Equals("Y")) model[0].Chk7 = true;
                                    model[0].Col87 = dr["emp_status"].ToString();
                                    if (dr["iscanteen"].ToString().Equals("Y")) model[0].Chk8 = true;
                                    model[0].Col85 = dr["canteen"].ToString();
                                    model[0].TList9 = mod9;
                                    model[0].TList10 = mod10;
                                    model[0].TList11 = mod11;
                                    model[0].TList12 = mod12;
                                    model[0].TList13 = mod13;
                                    model[0].TList14 = mod14;
                                    model[0].TList15 = mod15;
                                    model[0].TList16 = mod16;
                                    model[0].TList17 = mod17;
                                    model[0].TList18 = mod18;
                                    String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_dept"].ToString()).Distinct()).Split(',');
                                    String[] L10 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_desig"].ToString()).Distinct()).Split(',');
                                    String[] L11 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_type"].ToString()).Distinct()).Split(',');
                                    String[] L12 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["emp_category"].ToString()).Distinct()).Split(',');
                                    String[] L13 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["bank_name"].ToString()).Distinct()).Split(',');
                                    String[] L14 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["account_type"].ToString()).Distinct()).Split(',');
                                    String[] L15 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["jtype"].ToString()).Distinct()).Split(',');
                                    String[] L16 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["contr"].ToString()).Distinct()).Split(',');
                                    String[] L17 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["caste_cat"].ToString()).Distinct()).Split(',');
                                    String[] L18 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["l_reason"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems9 = L9;
                                    model[0].SelectedItems10 = L10;
                                    model[0].SelectedItems11 = L11;
                                    model[0].SelectedItems12 = L12;
                                    model[0].SelectedItems13 = L13;
                                    model[0].SelectedItems14 = L14;
                                    model[0].SelectedItems15 = L15;
                                    model[0].SelectedItems16 = L16;
                                    model[0].SelectedItems17 = L17;
                                    model[0].SelectedItems18 = L18;
                                    model[0].Col66 = dr["account_no"].ToString();
                                    model[0].Col67 = dr["ifsc_code"].ToString();
                                    model[0].Col68 = dr["micr_no"].ToString();
                                    model[0].Col69 = mage;
                                    model[0].Col70 = fage;
                                    model[0].Col76 = dr["latlng"].ToString();
                                    model[0].Col77 = dr["addr"].ToString();
                                    model[0].Col78 = dr["pension_no"].ToString();
                                    model[0].Col79 = dr["off_email"].ToString();
                                    model[0].Col80 = dr["off_contact"].ToString();
                                    DataTable dtf = new DataTable();
                                    dtf = sgen.getdata(userCode, "select rec_id,file_name,file_path,col1 from file_tab where" +
                                        " ref_code='" + dr["vch_num"].ToString() + "' and type='" + type + "' and " +
                                        "client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                    List<Tmodelmain> ltmf = new List<Tmodelmain>();
                                    foreach (DataRow drf in dtf.Rows)
                                    {
                                        Tmodelmain tmf = new Tmodelmain();
                                        tmf.Col1 = drf["file_name"].ToString();
                                        tmf.Col2 = drf["col1"].ToString();
                                        tmf.Col3 = drf["rec_id"].ToString();
                                        ltmf.Add(tmf);
                                    }
                                    model[0].LTM1 = ltmf;
                                }
                            }
                            model[0].Col100 = "Update & New";
                            break;
                        case "FDEL":
                            string fid = sgen.GetSession(MyGuid, "delid").ToString();
                            res = sgen.execute_cmd(userCode, "Delete from file_tab WHERE rec_id='" + fid + "' and type='EMP' and client_id='"
              + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                            sgen.SetSession(MyGuid, "delid", null);
                            if (res)
                            {
                                var LTM = model[0].LTM1;
                                for (int d = 0; d < LTM.Count; d++)
                                {
                                    var id = LTM[d].Col3;
                                    if (id == fid) { model[0].LTM1.RemoveAt(d); }
                                }
                            }
                            break;
                        case "ADD1":
                            mq = "select * from country_state where (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col42 = dtt.Rows[0]["country_name"].ToString();
                                model[0].Col41 = dtt.Rows[0]["state_name"].ToString();
                                model[0].Col40 = dtt.Rows[0]["district_name"].ToString();
                                model[0].Col39 = dtt.Rows[0]["teh_name"].ToString();
                                model[0].Col38 = dtt.Rows[0]["v_name"].ToString();
                                model[0].Col37 = dtt.Rows[0]["pincode"].ToString();
                                model[0].Col8 = dtt.Rows[0]["rec_id"].ToString();
                                sgen.SetSession(MyGuid, "schv_rec_id", dtt.Rows[0]["rec_id"].ToString());
                            }
                            break;
                        case "ADD2":
                            mq = "select * from country_state where (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col49 = dtt.Rows[0]["country_name"].ToString();
                                model[0].Col48 = dtt.Rows[0]["state_name"].ToString();
                                model[0].Col47 = dtt.Rows[0]["district_name"].ToString();
                                model[0].Col46 = dtt.Rows[0]["teh_name"].ToString();
                                model[0].Col45 = dtt.Rows[0]["v_name"].ToString();
                                model[0].Col44 = dtt.Rows[0]["pincode"].ToString();
                                model[0].Col9 = dtt.Rows[0]["rec_id"].ToString();
                                sgen.SetSession(MyGuid, "schv1_rec_id", dtt.Rows[0]["rec_id"].ToString());
                            }
                            break;
                        case "UNIT":
                            mq = "select u.cup_id,u.company_profile_id from company_unit_profile u where (u.cup_id||u.company_profile_id||to_char(u.vch_date,'yyyymmdd'))= '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                Make_query(viewName.ToLower(), "Select Employee", "CEMP", "1", dtt.Rows[0]["company_profile_id"].ToString().Trim(), dtt.Rows[0]["cup_id"].ToString().Trim(), model[0].Col15);
                                ViewBag.scripCall = "callFoo('Select Employee To Copy');";
                            }
                            break;
                    }
                    break;
                #endregion
                #region bonus config
                case "bonus_config":
                    switch (btnval)
                    {
                        case "EDIT":
                            mq = "select rec_id,vch_num,col1,col2,col3,col4,col5,col6,col7,col8,ent_by,ent_date,edit_by,edit_date,client_id,client_unit_id " +
                                "from enx_tab where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region bindhead
                                dt = new DataTable();
                                dt = sgen.getdata(userCode, "select col1,vch_num from vehicle_master where type='KSP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["col1"].ToString(), Value = dr["vch_num"].ToString() });
                                    }

                                }
                                TempData[MyGuid + "_Tlist1"] = rpt_model[0].TList1 = mod1;
                                TempData[MyGuid + "_Tlist2"] = rpt_model[0].TList2 = mod1;
                                #endregion
                                //Bonus limit
                                #region                   
                                mod3.Add(new SelectListItem { Text = "No Bonus and Exgratia", Value = "01" });
                                mod3.Add(new SelectListItem { Text = "Only Bonus Upto Limit", Value = "02" });
                                mod3.Add(new SelectListItem { Text = "Bonus Upto Limit and Balance Exgratia", Value = "03" });
                                mod3.Add(new SelectListItem { Text = "Only Exgratia On Total", Value = "04" });
                                TempData[MyGuid + "_TList3"] = rpt_model[0].TList3 = mod3;
                                #endregion
                                #region bindhead
                                //mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where rec_id='" + Convert.ToInt32(userid_mst) + "'", "client_unit_id");
                                mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                                if (role_mst.ToUpper().Equals("OWNER")) cond = "where unit_status='1'";
                                else cond = "where cup_id in ('" + mq1.Replace(",", "','") + "') and unit_status='1'";
                                mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as name FROM company_unit_profile " + cond + "";
                                dt = sgen.getdata(userCode, mq);
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod4.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["cup_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist4"] = rpt_model[0].TList4 = mod4;
                                #endregion
                                foreach (DataRow dr in dtt.Rows)
                                {
                                    rpt_model.Add(new Tmodelmain
                                    {
                                        Col8 = "(client_id|| client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'",
                                        Col1 = dr["client_id"].ToString(),
                                        Col2 = dr["client_unit_id"].ToString(),
                                        Col3 = dr["ent_by"].ToString(),
                                        Col4 = dr["ent_date"].ToString(),
                                        Col7 = dr["rec_id"].ToString(),
                                        Col13 = "Update",
                                        Col15 = dr["vch_num"].ToString(),
                                        Col16 = dr["col2"].ToString(),
                                        Col17 = dr["col4"].ToString(),
                                        Col18 = dr["col6"].ToString(),
                                        Col19 = dr["col7"].ToString(),
                                        Col20 = dr["col8"].ToString()
                                    });
                                }
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');




                                rpt_model[0].SelectedItems1 = L1;
                                rpt_model[0].SelectedItems2 = L2;
                                rpt_model[0].SelectedItems3 = L3;
                                model = rpt_model;
                            }
                            if (btnval == "UNITS")
                            {
                                mq = "select u.cup_id,u.company_profile_id,u.unit_name,en.rec_id,en.vch_num,en.col1,en.col2,en.col3,en.col4,en.col5,en.col6,en.col7,en.col8," +
                                   "en.ent_by,en.ent_date,en.edit_by,en.edit_date,en.client_id,en.client_unit_id from company_unit_profile u inner join enx_tab en on " +
                                   "en.client_id=u.Company_profile_id and en.client_unit_id=u.CUP_Id and en.type='KBC' where (u.cup_id||u.company_profile_id||to_char(u.vch_date,'yyyymmdd'))= '" + URL + "'";
                                dtt = sgen.getdata(userCode, mq);
                                if (dtt.Rows.Count > 0)
                                {
                                    #region bindhead
                                    dt = new DataTable();
                                    dt = sgen.getdata(userCode, "select col1,vch_num from vehicle_master where type='KSP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                                    if (dt.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in dt.Rows)
                                        {
                                            mod1.Add(new SelectListItem { Text = dr["col1"].ToString(), Value = dr["vch_num"].ToString() });
                                        }

                                    }
                                    TempData[MyGuid + "_Tlist1"] = rpt_model[0].TList1 = mod1;
                                    TempData[MyGuid + "_Tlist2"] = rpt_model[0].TList2 = mod1;
                                    #endregion
                                    //Bonus limit
                                    #region                   
                                    mod3.Add(new SelectListItem { Text = "No Bonus & Exgratia", Value = "01" });
                                    mod3.Add(new SelectListItem { Text = "Only Bonus Upto Limit", Value = "02" });
                                    mod3.Add(new SelectListItem { Text = "Bonus Upto Limit & Balance Exgratia", Value = "03" });
                                    mod3.Add(new SelectListItem { Text = "Only Exgratia On Total", Value = "04" });
                                    TempData[MyGuid + "_TList3"] = rpt_model[0].TList3 = mod3;
                                    #endregion
                                    foreach (DataRow dr in dtt.Rows)
                                    {
                                        rpt_model.Add(new Tmodelmain
                                        {
                                            Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'",
                                            Col1 = dr["client_id"].ToString(),
                                            Col2 = dr["client_unit_id"].ToString(),
                                            Col3 = dr["ent_by"].ToString(),
                                            Col4 = dr["ent_date"].ToString(),
                                            Col7 = dr["rec_id"].ToString(),
                                            Col13 = "Update",
                                            Col15 = dr["vch_num"].ToString(),
                                            Col16 = dr["col2"].ToString(),
                                            Col17 = dr["col4"].ToString(),
                                            Col18 = dr["col6"].ToString(),
                                            Col19 = dr["col7"].ToString(),
                                            Col20 = dr["col8"].ToString()
                                        });
                                    }
                                    String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                    String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                    String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');



                                    rpt_model[0].SelectedItems1 = L1;
                                    rpt_model[0].SelectedItems2 = L2;
                                    rpt_model[0].SelectedItems3 = L3;
                                    model = rpt_model;
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region employee_temp_status
                case "employee_temp_status":
                    switch (btnval)
                    {
                        case "EMP":
                            mq = "select group_concat(vch_num) vch_num,group_concat(concat(FIRST_NAME, ' ', REPLACE(MIDDLE_NAME,'0',''), ' ',REPLACE(LAST_NAME,'0',''))) name " +
                                "from emp_master where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col8 = URL;
                                model[0].Col17 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["name"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                //            #region print_payslip
                //            case "print_payslip":
                //                switch (btnval)
                //                {
                //                    case "EMP":
                //                        mq = "select Group_concat(distinct emp_code) emp_vch,'-' as name " +
                //"from PAYMAIN where (client_id||client_unit_id||type||emp_code||CURRYYYYMMM) in ('" + URL + "')";
                //                        dtt = sgen.getdata(userCode, mq);
                //                        if (dtt.Rows.Count > 0)
                //                        {
                //                            model[0].Col8 = "(client_id||client_unit_id||type||emp_code||CURRYYYYMMM) = '" + URL + "'";
                //                            model[0].Col18 = dtt.Rows[0]["name"].ToString();
                //                            model[0].Col16 = dtt.Rows[0]["name"].ToString();
                //                            #region month checking
                //                            int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault());
                //                            int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                //                            string lastyyyymmm = "";
                //                            string curryyyymmm = "";
                //                            if (currmonth <= 12 && currmonth > 4)
                //                            {
                //                                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                //                                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                //                            }
                //                            else if (currmonth == 1)
                //                            {
                //                                lastyyyymmm = curryear + sgen.padlc(12, 3);
                //                                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                //                            }
                //                            else if (currmonth > 1 && currmonth < 4)
                //                            {
                //                                lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                //                                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                //                            }
                //                            else if (currmonth == 4)
                //                            {
                //                                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                //                                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                //                            }
                //                            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                //                            #endregion
                //                            #region dt earn                 
                //                            //string cond = "";
                //                            //cond = curryyyymmm;
                //                            string netname = "NETPAYABLE";
                //                            mq = "select To_Char( convert_tz( em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')  as DOJ," +
                //                                " nvl(bk.master_name,'-')  as bank_name,em.ifsc_code, em.account_no, to_number(ot.othrs) as othrs," +
                //                                " to_number(bs.basic_ern) basic_ern,to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern" +
                //                                ",substr(es.currmmmyyyy,0,4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode," +
                //                                "es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name," +
                //                                "es.month_name,es.month_days, to_number(es.paid_days) paid_days,bs.gm_ern,es.head_type,es.head_id,upper(es.head_name) head_name," +
                //                                "to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es INNER join " +
                //                                "vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id " +
                //                                "and sh.client_unit_id = es.client_unit_id inner join emp_master em on em.vch_num = es.emp_code " +
                //                                "and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
                //                                "and es.emp_code in" +
                //                                " ('" + dtt.Rows[0]["emp_vch"].ToString().Replace(",", "','") + "') " +
                //                                "inner join(select col1, sum(gm_ern) as gm_ern, ref_code, sum(basic_ern) as basic_ern, sum(hra_ern) hra_ern, sum(oth_ern) oth_ern, sum(cony_ern) cony_ern from " +
                //                                "(select col1, (case when col4= '000001' then sum(col10) else 0 end) as basic_ern,(case when col4 = '000002' then sum(col10) else 0 end) as hra_ern," +
                //                                "(case when col4 = '000005' then sum(col10) else 0 end) as oth_ern,(case when col4 = '000006' then sum(col10) else 0 end) as cony_ern,sum(col10) as gm_ern," +
                //                                "trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + clientid_mst + "' and client_unit_id in ('" + unitid_mst + "') group by col1,trim(ref_code),col4) a " +
                //                                "group by col1, ref_code) bs on bs.col1 = es.emp_code and bs.ref_code = es.inc_ver " +
                //                                "LEFT join master_setting mdp on em.emp_dept=mdp.master_id and mdp.type = 'MDP' " +
                //                                "and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                //                                "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1" +
                //                                " and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                //                                " left join (select emp_code,  max(othrs) othrs from leave_ob where type='EAT' and client_unit_id='" + unitid_mst + "'  and" +
                //                                " curryyyymmm='" + curryyyymmm + "' group by emp_code) ot on 1=1 and ot.emp_code=es.emp_code" +
                //                                " left join  master_setting bk on bk.master_id=em.bank_name and bk.type='ABD' and find_in_set(bk.client_id,'" + clientid_mst + "')=1 and find_in_set(bk.client_unit_id,'" + unitid_mst + "')=1 " +
                //                                "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and" +
                //                                " es.type = 'ESP' and es.client_id = '" + clientid_mst + "' and es.client_unit_id in ('" + unitid_mst + "')  order by es.head_id,es.head_name desc ";
                //                            //DataTable dtern = sgen.getdata(userCode, mq);
                //                            #endregion
                //                            //To_Char( convert_tz( em.st_dt,'UTC','+05:30'),'dd/MM/YYYY')  as DOJ, nvl(bk.master_name,'-')  as bank_name,
                //                            // em.ifsc_code, em.account_no, to_number(ot.othrs) as othrs, to_number(bs.basic_ern) basic_ern,to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern,
                //                            //substr(es.currmmmyyyy,0,4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode,es.emp_name, nvl(mdp.master_name,'-') dept,
                //                            //    nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days, to_number(es.paid_days) paid_days,bs.gm_ern,es.head_type,es.head_id,upper(es.head_name) 
                //                            //      head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order
                //                            mq = "";
                //                            DataTable dth = new DataTable();
                //                            DataRow drh = dth.NewRow();
                //                            dth.Rows.Add(drh);
                //                            var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                //                                    ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                //                                    "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                //                            for (int e = 1; e <= 16; e++)
                //                            {
                //                                mq += "ER" + e + "+AR" + e + " as ER" + e + ",ERRATE" + e + ",";
                //                                dth.Columns.Add("ER" + e, typeof(string));
                //                                drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                //                            }
                //                            for (int e = 1; e <= 10; e++)
                //                            {
                //                                mq += "DED" + e + "+ARD" + e + " as DED" + e + ",";
                //                                dth.Columns.Add("DED" + e, typeof(string));
                //                                drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                //                            }
                //                            dth.AcceptChanges();
                //                            mq1 = "select To_Char(em.st_dt,'" + sgen.Getsqldateformat() + "')  as DOJ, nvl(bk.master_name,'-')  as bank_name," +
                //                                " em.ifsc_code, em.account_no, to_number(es.ot_hrs) as othrs," +
                //                                " substr(es.CURRYYYYMMM,0,4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode," +
                //                                "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name , nvl(dp.master_name,'-') dept" +
                //                                "," +
                //                                "   nvl(dg.master_name,'-') desig,em.f_name,to_char(es.m_lastdt,'month') as Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT" +
                //                                "," + mq + " TOTEARN,TOTDED,NETSALARY from emp_master em " +
                //                              "inner join paymain es on em.vch_num=es.emp_code and es.type='PAY' and em.client_id=es.client_id and em.client_unit_id=es.client_unit_id and es.CURRYYYYMMM='" + curryyyymmm + "' " +
                //                              "inner join master_setting dp on dp.master_id=em.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,em.client_id)=1 and find_in_set(dp.client_unit_id,em.client_unit_id)=1 " +
                //                              "inner join master_setting dg on dg.master_id=em.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,em.client_id)=1 and find_in_set(dg.client_unit_id,em.client_unit_id)=1 " +
                //                              "inner join master_setting m on m.master_id=es.month_id and m.type='MNT' " +
                //                              "left join  master_setting bk on bk.master_id=em.bank_name and bk.type='ABD' and find_in_set(bk.client_id,'" + clientid_mst + "')=1 and find_in_set(bk.client_unit_id,'" + unitid_mst + "')=1 " +
                //                              "where em.type='EMP' and em.client_id='" + clientid_mst + "' and em.client_unit_id='" + unitid_mst + "' order by em.emp_code";
                //                            var dtm = sgen.getdata(userCode, mq1);
                //                            //DataTable dtm = dtern.Copy();
                //                            sgen.SetSession(MyGuid, "PAY_DTERN", dtm);
                //                            sgen.SetSession(MyGuid, "PAY_HEADS", dth);
                //                        }
                //                        else
                //                        {
                //                            ViewBag.scripCall += "showmsgJS(1, 'Please enter valid values', 2);";
                //                            return model;
                //                        }
                //                        break;
                //                    case "EMPIC":
                //                        mq = "select Group_concat(vch_num) emp_vch,Group_concat((first_name||' '||replace(middle_name,'0','')||' '|| replace(last_name,'0',''))) as name " +
                //                            "from emp_master where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) in ('" + URL + "')";
                //                        dtt = sgen.getdata(userCode, mq);
                //                        if (dtt.Rows.Count > 0)
                //                        {
                //                            model[0].Col8 = "(client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) = '" + URL + "'";
                //                            model[0].Col18 = dtt.Rows[0]["name"].ToString();
                //                            model[0].Col16 = dtt.Rows[0]["name"].ToString();
                //                            mq1 = "select em.emp_code,em.external_empno,em.old_empcode,(em.first_name||replace(em.middle_name,'0','')||replace(em.last_name,'0','')) emp_name," +
                //                                "to_char(convert_tz(em.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') dob," +
                //                                "to_char(convert_tz(em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
                //                                "to_char(convert_tz(em.ex_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') dol," +
                //                                "em.per_address,em.per_pincode,em.contact_no,em.email_id,nvl(dp.master_name,'-') dept,em.blood_grp,nvl(ft.file_name,'-') file_name,nvl(ft.file_path, '-') file_path,nvl(ft.col2, '-') content_type from emp_master em " +
                //                                "left join master_setting dp on em.emp_dept=dp.master_id and dp.type='MDP' and find_in_set(dp.client_id,em.client_id)=1 and find_in_set(dp.client_unit_id,em.client_unit_id)=1 " +
                //                                "left join file_tab ft on ft.vch_num=em.vch_num and ft.ref_code=em.vch_num and ft.type=em.type and ft.client_id=em.client_id and ft.client_unit_id=em.client_unit_id and lower(ft.col1)='employee photo' " +
                //                                "where em.type='EMP' and em.client_id='" + clientid_mst + "' and em.client_unit_id='" + unitid_mst + "' " +
                //                                "and em.vch_num in ('" + dtt.Rows[0]["emp_vch"].ToString().Replace(",", "','").Trim() + "')";
                //                            dt = sgen.getdata(userCode, mq1);
                //                            sgen.SetSession(MyGuid, "icempdt", dt);
                //                        }
                //                        else
                //                        {
                //                            ViewBag.scripCall += "showmsgJS(1, 'Please enter valid values', 2);";
                //                            return model;
                //                        }
                //                        break;
                //                }
                //                break;
                //            #endregion
                #region print_payslip_n
                case "print_payslip_n":
                    switch (btnval)
                    {
                        case "EMP":
                            mq = "select Group_concat(distinct emp_code) emp_vch,'-' as name " +
    "from PAYMAIN where (client_id||client_unit_id||type||emp_code||CURRYYYYMMM) in ('" + URL + "')";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col8 = "(client_id||client_unit_id||type||emp_code||CURRYYYYMMM) = '" + URL + "'";
                                model[0].Col18 = dtt.Rows[0]["name"].ToString();
                                model[0].Col16 = dtt.Rows[0]["name"].ToString();
                                #region month checking
                                int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault());
                                int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                                string lastyyyymmm = "";
                                string curryyyymmm = "";
                                if (currmonth <= 12 && currmonth > 4)
                                {
                                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                                }
                                else if (currmonth == 1)
                                {
                                    lastyyyymmm = curryear + sgen.padlc(12, 3);
                                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                                }
                                else if (currmonth > 1 && currmonth < 4)
                                {
                                    lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                                }
                                else if (currmonth == 4)
                                {
                                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                                }
                                sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                                #endregion
                                #region dt earn                 
                                //string cond = "";
                                //cond = curryyyymmm;
                                string netname = "NETPAYABLE";
                                mq = "select To_Char( convert_tz( em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')  as DOJ," +
                                    " nvl(bk.master_name,'-')  as bank_name,em.ifsc_code, em.account_no, to_number(ot.othrs) as othrs," +
                                    " to_number(bs.basic_ern) basic_ern,to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern" +
                                    ",substr(es.currmmmyyyy,0,4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode," +
                                    "es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name," +
                                    "es.month_name,es.month_days, to_number(es.paid_days) paid_days,bs.gm_ern,es.head_type,es.head_id,upper(es.head_name) head_name," +
                                    "to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es INNER join " +
                                    "vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id " +
                                    "and sh.client_unit_id = es.client_unit_id inner join emp_master em on em.vch_num = es.emp_code " +
                                    "and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
                                    "and es.emp_code in" +
                                    " ('" + dtt.Rows[0]["emp_vch"].ToString().Replace(",", "','") + "') " +
                                    "inner join(select col1, sum(gm_ern) as gm_ern, ref_code, sum(basic_ern) as basic_ern, sum(hra_ern) hra_ern, sum(oth_ern) oth_ern, sum(cony_ern) cony_ern from " +
                                    "(select col1, (case when col4= '000001' then sum(col10) else 0 end) as basic_ern,(case when col4 = '000002' then sum(col10) else 0 end) as hra_ern," +
                                    "(case when col4 = '000005' then sum(col10) else 0 end) as oth_ern,(case when col4 = '000006' then sum(col10) else 0 end) as cony_ern,sum(col10) as gm_ern," +
                                    "trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + clientid_mst + "' and client_unit_id in ('" + unitid_mst + "') group by col1,trim(ref_code),col4) a " +
                                    "group by col1, ref_code) bs on bs.col1 = es.emp_code and bs.ref_code = es.inc_ver " +
                                    "LEFT join master_setting mdp on em.emp_dept=mdp.master_id and mdp.type = 'MDP' " +
                                    "and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                                    "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1" +
                                    " and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                                    " left join (select emp_code,  max(othrs) othrs from leave_ob where type='EAT' and client_unit_id='" + unitid_mst + "'  and" +
                                    " curryyyymmm='" + curryyyymmm + "' group by emp_code) ot on 1=1 and ot.emp_code=es.emp_code" +
                                    " left join  master_setting bk on bk.master_id=em.bank_name and bk.type='ABD' and find_in_set(bk.client_id,'" + clientid_mst + "')=1 and find_in_set(bk.client_unit_id,'" + unitid_mst + "')=1 " +
                                    "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and" +
                                    " es.type = 'ESP' and es.client_id = '" + clientid_mst + "' and es.client_unit_id in ('" + unitid_mst + "')  order by es.head_id,es.head_name desc ";
                                //DataTable dtern = sgen.getdata(userCode, mq);
                                #endregion
                                //To_Char( convert_tz( em.st_dt,'UTC','+05:30'),'dd/MM/YYYY')  as DOJ, nvl(bk.master_name,'-')  as bank_name,
                                // em.ifsc_code, em.account_no, to_number(ot.othrs) as othrs, to_number(bs.basic_ern) basic_ern,to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern,
                                //substr(es.currmmmyyyy,0,4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode,es.emp_name, nvl(mdp.master_name,'-') dept,
                                //    nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days, to_number(es.paid_days) paid_days,bs.gm_ern,es.head_type,es.head_id,upper(es.head_name) 
                                //      head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order
                                mq = "";
                                DataTable dth = new DataTable();
                                DataRow drh = dth.NewRow();
                                dth.Rows.Add(drh);
                                var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                                        ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                                        "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                                for (int e = 1; e <= 16; e++)
                                {
                                    mq += "ER" + e + "+AR" + e + " as ER" + e + ",ERRATE" + e + ",";
                                    dth.Columns.Add("ER" + e, typeof(string));
                                    drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                                }
                                for (int e = 1; e <= 10; e++)
                                {
                                    mq += "DED" + e + "+ARD" + e + " as DED" + e + ",";
                                    dth.Columns.Add("DED" + e, typeof(string));
                                    drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                                }
                                dth.AcceptChanges();
                                mq1 = "select To_Char(em.st_dt,'" + sgen.Getsqldateformat() + "')  as DOJ, nvl(bk.master_name,'-')  as bank_name," +
                                    " em.ifsc_code, em.account_no, to_number(es.ot_hrs) as othrs," +
                                    " substr(es.CURRYYYYMMM,0,4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode," +
                                    "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name , nvl(dp.master_name,'-') dept" +
                                    "," +
                                    "   nvl(dg.master_name,'-') desig,em.f_name,to_char(es.m_lastdt,'month') as Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT" +
                                    "," + mq + " TOTEARN,TOTDED,NETSALARY from emp_master em " +
                                  "inner join paymain es on em.vch_num=es.emp_code and es.type='PAY' and em.client_id=es.client_id and em.client_unit_id=es.client_unit_id and es.CURRYYYYMMM='" + curryyyymmm + "' " +
                                  "inner join master_setting dp on dp.master_id=em.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,em.client_id)=1 and find_in_set(dp.client_unit_id,em.client_unit_id)=1 " +
                                  "inner join master_setting dg on dg.master_id=em.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,em.client_id)=1 and find_in_set(dg.client_unit_id,em.client_unit_id)=1 " +
                                  "inner join master_setting m on m.master_id=es.month_id and m.type='MNT' and (es.client_id||es.client_unit_id||es.type||es.emp_code||CURRYYYYMMM) in ('" + URL + "')" +
                                  "left join  master_setting bk on bk.master_id=em.bank_name and bk.type='ABD' and find_in_set(bk.client_id,'" + clientid_mst + "')=1 and find_in_set(bk.client_unit_id,'" + unitid_mst + "')=1 " +
                                  "where em.type='EMP' and em.client_id='" + clientid_mst + "' and em.client_unit_id='" + unitid_mst + "' order by em.emp_code";
                                var dtm = sgen.getdata(userCode, mq1);
                                //DataTable dtm = dtern.Copy();
                                sgen.SetSession(MyGuid, "PAY_DTERN", dtm);
                                sgen.SetSession(MyGuid, "PAY_HEADS", dth);

                                //ramrattan
                            }
                            else
                            {
                                ViewBag.scripCall += "showmsgJS(1, 'Please enter valid values', 2);";
                                return model;
                            }
                            break;
                        case "EMPIC":
                            mq = "select Group_concat(vch_num) emp_vch,Group_concat((first_name||' '||replace(middle_name,'0','')||' '|| replace(last_name,'0',''))) as name " +
                                "from emp_master where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) in ('" + URL + "')";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col8 = "(client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) = '" + URL + "'";
                                model[0].Col18 = dtt.Rows[0]["name"].ToString();
                                model[0].Col16 = dtt.Rows[0]["name"].ToString();
                                mq1 = "select em.emp_code,em.external_empno,em.old_empcode,(em.first_name||replace(em.middle_name,'0','')||replace(em.last_name,'0','')) emp_name," +
                                    "to_char(convert_tz(em.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') dob," +
                                    "to_char(convert_tz(em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
                                    "to_char(convert_tz(em.ex_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') dol," +
                                    "em.per_address,em.per_pincode,em.contact_no,em.email_id,nvl(dp.master_name,'-') dept,em.blood_grp,nvl(ft.file_name,'-') file_name,nvl(ft.file_path, '-') file_path,nvl(ft.col2, '-') content_type from emp_master em " +
                                    "left join master_setting dp on em.emp_dept=dp.master_id and dp.type='MDP' and find_in_set(dp.client_id,em.client_id)=1 and find_in_set(dp.client_unit_id,em.client_unit_id)=1 " +
                                    "left join file_tab ft on ft.vch_num=em.vch_num and ft.ref_code=em.vch_num and ft.type=em.type and ft.client_id=em.client_id and ft.client_unit_id=em.client_unit_id and lower(ft.col1)='employee photo' " +
                                    "where em.type='EMP' and em.client_id='" + clientid_mst + "' and em.client_unit_id='" + unitid_mst + "' " +
                                    "and em.vch_num in ('" + dtt.Rows[0]["emp_vch"].ToString().Replace(",", "','").Trim() + "')";
                                dt = sgen.getdata(userCode, mq1);
                                sgen.SetSession(MyGuid, "icempdt", dt);
                            }
                            else
                            {
                                ViewBag.scripCall += "showmsgJS(1, 'Please enter valid values', 2);";
                                return model;
                            }
                            break;
                    }
                    break;
                #endregion

                #region print_payslip_mail
                case "print_payslip_mail":
                    switch (btnval)
                    {
                        case "EMP":
                            mq = "select Group_concat(distinct emp_code) emp_vch,'-' as name " +
    "from PAYMAIN where (client_id||client_unit_id||type||emp_code||CURRYYYYMMM) in ('" + URL + "')";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col8 = "(client_id||client_unit_id||type||emp_code||CURRYYYYMMM) = '" + URL + "'";
                                model[0].Col18 = dtt.Rows[0]["name"].ToString();
                                model[0].Col16 = dtt.Rows[0]["name"].ToString();
                                #region month checking
                                int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault());
                                int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                                string lastyyyymmm = "";
                                string curryyyymmm = "";
                                if (currmonth <= 12 && currmonth > 4)
                                {
                                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                                }
                                else if (currmonth == 1)
                                {
                                    lastyyyymmm = curryear + sgen.padlc(12, 3);
                                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                                }
                                else if (currmonth > 1 && currmonth < 4)
                                {
                                    lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                                }
                                else if (currmonth == 4)
                                {
                                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                                }
                                sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                                #endregion
                                #region dt earn                 
                                //string cond = "";
                                //cond = curryyyymmm;
                                string netname = "NETPAYABLE";
                                mq = "select To_Char( convert_tz( em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')  as DOJ," +
                                    " nvl(bk.master_name,'-')  as bank_name,em.ifsc_code, em.account_no, to_number(ot.othrs) as othrs," +
                                    " to_number(bs.basic_ern) basic_ern,to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern" +
                                    ",substr(es.currmmmyyyy,0,4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode," +
                                    "es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name," +
                                    "es.month_name,es.month_days, to_number(es.paid_days) paid_days,bs.gm_ern,es.head_type,es.head_id,upper(es.head_name) head_name," +
                                    "to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es INNER join " +
                                    "vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id " +
                                    "and sh.client_unit_id = es.client_unit_id inner join emp_master em on em.vch_num = es.emp_code " +
                                    "and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
                                    "and es.emp_code in" +
                                    " ('" + dtt.Rows[0]["emp_vch"].ToString().Replace(",", "','") + "') " +
                                    "inner join(select col1, sum(gm_ern) as gm_ern, ref_code, sum(basic_ern) as basic_ern, sum(hra_ern) hra_ern, sum(oth_ern) oth_ern, sum(cony_ern) cony_ern from " +
                                    "(select col1, (case when col4= '000001' then sum(col10) else 0 end) as basic_ern,(case when col4 = '000002' then sum(col10) else 0 end) as hra_ern," +
                                    "(case when col4 = '000005' then sum(col10) else 0 end) as oth_ern,(case when col4 = '000006' then sum(col10) else 0 end) as cony_ern,sum(col10) as gm_ern," +
                                    "trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + clientid_mst + "' and client_unit_id in ('" + unitid_mst + "') group by col1,trim(ref_code),col4) a " +
                                    "group by col1, ref_code) bs on bs.col1 = es.emp_code and bs.ref_code = es.inc_ver " +
                                    "LEFT join master_setting mdp on em.emp_dept=mdp.master_id and mdp.type = 'MDP' " +
                                    "and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                                    "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1" +
                                    " and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                                    " left join (select emp_code,  max(othrs) othrs from leave_ob where type='EAT' and client_unit_id='" + unitid_mst + "'  and" +
                                    " curryyyymmm='" + curryyyymmm + "' group by emp_code) ot on 1=1 and ot.emp_code=es.emp_code" +
                                    " left join  master_setting bk on bk.master_id=em.bank_name and bk.type='ABD' and find_in_set(bk.client_id,'" + clientid_mst + "')=1 and find_in_set(bk.client_unit_id,'" + unitid_mst + "')=1 " +
                                    "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and" +
                                    " es.type = 'ESP' and es.client_id = '" + clientid_mst + "' and es.client_unit_id in ('" + unitid_mst + "')  order by es.head_id,es.head_name desc ";
                                //DataTable dtern = sgen.getdata(userCode, mq);
                                #endregion
                                //To_Char( convert_tz( em.st_dt,'UTC','+05:30'),'dd/MM/YYYY')  as DOJ, nvl(bk.master_name,'-')  as bank_name,
                                // em.ifsc_code, em.account_no, to_number(ot.othrs) as othrs, to_number(bs.basic_ern) basic_ern,to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern,
                                //substr(es.currmmmyyyy,0,4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode,es.emp_name, nvl(mdp.master_name,'-') dept,
                                //    nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days, to_number(es.paid_days) paid_days,bs.gm_ern,es.head_type,es.head_id,upper(es.head_name) 
                                //      head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order
                                mq = "";
                                DataTable dth = new DataTable();
                                DataRow drh = dth.NewRow();
                                dth.Rows.Add(drh);
                                var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                                        ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                                        "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                                for (int e = 1; e <= 16; e++)
                                {
                                    mq += "ER" + e + "+AR" + e + " as ER" + e + ",ERRATE" + e + ",";
                                    dth.Columns.Add("ER" + e, typeof(string));
                                    drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                                }
                                for (int e = 1; e <= 10; e++)
                                {
                                    mq += "DED" + e + "+ARD" + e + " as DED" + e + ",";
                                    dth.Columns.Add("DED" + e, typeof(string));
                                    drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                                }
                                dth.AcceptChanges();
                                mq1 = "select To_Char(em.st_dt,'" + sgen.Getsqldateformat() + "')  as DOJ, nvl(bk.master_name,'-')  as bank_name," +
                                    " em.ifsc_code, em.account_no, to_number(es.ot_hrs) as othrs," +
                                    " substr(es.CURRYYYYMMM,0,4) as salary_yr,em.email_id,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode," +
                                    "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name ,to_char(em.dob,'ddmmyyyy') as ddoobbbb, nvl(dp.master_name,'-') dept" +
                                    "," +
                                    "   nvl(dg.master_name,'-') desig,em.f_name,to_char(es.m_lastdt,'month') as Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT" +
                                    "," + mq + " TOTEARN,TOTDED,NETSALARY from emp_master em " +
                                  "inner join paymain es on em.vch_num=es.emp_code and es.type='PAY' and em.client_id=es.client_id and em.client_unit_id=es.client_unit_id and es.CURRYYYYMMM='" + curryyyymmm + "' " +
                                  "inner join master_setting dp on dp.master_id=em.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,em.client_id)=1 and find_in_set(dp.client_unit_id,em.client_unit_id)=1 " +
                                  "inner join master_setting dg on dg.master_id=em.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,em.client_id)=1 and find_in_set(dg.client_unit_id,em.client_unit_id)=1 " +
                                  "inner join master_setting m on m.master_id=es.month_id and m.type='MNT' " +
                                  "left join  master_setting bk on bk.master_id=em.bank_name and bk.type='ABD' and find_in_set(bk.client_id,'" + clientid_mst + "')=1 and find_in_set(bk.client_unit_id,'" + unitid_mst + "')=1 " +
                                  "where em.type='EMP' and em.client_id='" + clientid_mst + "' and em.client_unit_id='" + unitid_mst + "' and em.vch_num in" +
                                    " ('" + dtt.Rows[0]["emp_vch"].ToString().Replace(",", "','") + "') order by em.emp_code";
                                var dtm = sgen.getdata(userCode, mq1);
                                //DataTable dtm = dtern.Copy();
                                sgen.SetSession(MyGuid, "PAY_DTERN", dtm);
                                sgen.SetSession(MyGuid, "PAY_HEADS", dth);

                                //ramrattan
                            }
                            else
                            {
                                ViewBag.scripCall += "showmsgJS(1, 'Please enter valid values', 2);";
                                return model;
                            }
                            break;
                        case "EMPIC":
                            mq = "select Group_concat(vch_num) emp_vch,Group_concat((first_name||' '||replace(middle_name,'0','')||' '|| replace(last_name,'0',''))) as name " +
                                "from emp_master where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) in ('" + URL + "')";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col8 = "(client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) = '" + URL + "'";
                                model[0].Col18 = dtt.Rows[0]["name"].ToString();
                                model[0].Col16 = dtt.Rows[0]["name"].ToString();
                                mq1 = "select em.emp_code,em.external_empno,em.old_empcode,(em.first_name||replace(em.middle_name,'0','')||replace(em.last_name,'0's,'')) emp_name," +
                                    "to_char(convert_tz(em.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') dob," +
                                    "to_char(convert_tz(em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
                                    "to_char(convert_tz(em.ex_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') dol," +
                                    "em.per_address,em.per_pincode,em.contact_no,em.email_id,nvl(dp.master_name,'-') dept,em.blood_grp,nvl(ft.file_name,'-') file_name,nvl(ft.file_path, '-') file_path,nvl(ft.col2, '-') content_type from emp_master em " +
                                    "left join master_setting dp on em.emp_dept=dp.master_id and dp.type='MDP' and find_in_set(dp.client_id,em.client_id)=1 and find_in_set(dp.client_unit_id,em.client_unit_id)=1 " +
                                    "left join file_tab ft on ft.vch_num=em.vch_num and ft.ref_code=em.vch_num and ft.type=em.type and ft.client_id=em.client_id and ft.client_unit_id=em.client_unit_id and lower(ft.col1)='employee photo' " +
                                    "where em.type='EMP' and em.client_id='" + clientid_mst + "' and em.client_unit_id='" + unitid_mst + "' " +
                                    "and em.vch_num in ('" + dtt.Rows[0]["emp_vch"].ToString().Replace(",", "','").Trim() + "')";
                                dt = sgen.getdata(userCode, mq1);
                                sgen.SetSession(MyGuid, "icempdt", dt);
                            }
                            else
                            {
                                ViewBag.scripCall += "showmsgJS(1, 'Please enter valid values', 2);";
                                return model;
                            }
                            break;
                    }
                    break;
                #endregion
                #region emp_salary_process
                case "emp_salary_process":
                    //                    switch (btnval)
                    //                    {
                    //                        case "EDIT":
                    //                            //if (!userCode.ToUpper().Equals("GLOVAL"))
                    //                            {
                    //                                mq0 = "SELECT CREATED_DATE as val FROM emp_salary_process a where (a.currmmmyyyy || a.type || a.client_id || a.client_unit_id) in ('" + URL + "') and rownum=1";
                    //                                var data = sgen.getdata(userCode, mq0);
                    //                                DateTime serverdate = sgen.server_datetime_dt(userCode);
                    //                                DateTime vdate = (DateTime)data.Rows[0][0];
                    //                                mq0 = sgen.seekval(userCode, "select param1 from controls where type='CTL' and id='000001' ", "param1");
                    //                                int rdays = sgen.Make_int(mq0);
                    //                                int diff = (serverdate - vdate).Days;
                    //                                if (diff > rdays)
                    //                                {
                    //                                    ViewBag.scripCall += "showmsgJS(1, 'Salary is freezed of this Period', 2);";
                    //                                    return model;
                    //                                }
                    //                            }
                    //                            ViewBag.scripCall = "showwait();show_Foo('Select Employee to Edit', 'EDIT1', '2', '" + actionName + "', '" + controllerName + "','" + URL + "','-');";
                    //                            break;
                    //                        case "EDIT1":
                    //                            mq = @"select* from(select a.vch_num, a.month_id, a.currmmmyyyy, a.head_count as newamount, b.emp_code EmpCode, external_empno External_EmpCode,
                    //trim((b.FIRST_NAME || ' ' || REPLACE(b.MIDDLE_NAME, '0', '') || ' ' || REPLACE(b.LAST_NAME, '0', ''))) Employee_Name,a.month_name || ' (' || a.month_id || ')' Month,
                    //a.month_days Days, a.pdays Presents, a.wdays Wkoff, a.hdays HLDay, a.OT_hrs, a.Paid_days, a.Bal_ADV,a.head_name || ' (' || a.head_id || ')' headname,
                    //to_char(a.vch_date, 'yyyy-MM-dd HH24:MI:ss') as vch_date ,to_char(a.ent_date, 'yyyy-MM-dd HH24:MI:ss') as ent_date,a.ent_by ,
                    //(case when upper(head_type)='LEAVES' then  to_number('1'||lpad(nvl(c.col41,a.head_id),2,'0')||'.0') else (case when upper(head_type)='EARNING' then 
                    //(case when substr(upper(a.head_name),1,4)='ARR_'  then  to_number('2'||lpad(nvl(c.col41,a.head_id),2,'0')||'.1') 
                    //else to_number('2'||lpad(nvl(c.col41,a.head_id),2,'0')||'.0') end) else (case when substr(upper(a.head_name),1,4)='ARR_' 
                    //then  to_number('3'||lpad(nvl(c.col41,a.head_id),2,'0')||'.1') else to_number('3'||lpad(nvl(c.col41,a.head_id),2,'0')||'.0') end) end) end) as ordd from
                    //  emp_salary_process a inner join emp_master b on a.emp_code = b.vch_num and a.client_id = b.client_id and a.client_unit_id = b.client_unit_id left outer join  vehicle_master c on
                    //trim(a.head_id) = trim(c.vch_num) and a.client_id = c.client_id and a.client_unit_id = c.client_unit_id and c.type = 'KSP' 
                    //where (a.currmmmyyyy || a.type || a.client_id || a.client_unit_id||a.emp_code) in
                    //('" + URL + "')) order by ordd";
                    //                            string murl = "";
                    //                            if (URL.Split(',').Length > 1)
                    //                            {
                    //                                murl = URL.Split(',')[0].Substring(0, URL.Split(',')[0].Length - 7).Trim();
                    //                            }
                    //                            else
                    //                            {
                    //                                murl = URL.Split(',')[0].Substring(0, URL.Split(',')[0].Length - 6).Trim();
                    //                            }
                    //                            //DataTable dte = sgen.getdata(userCode, "select distinct vch_num,to_char(vch_date,'" + sgen.GetSaveSqlDateFormat() + "') as vch_date," +
                    //                            //     "to_char(ent_date,'" + sgen.GetSaveSqlDateFormat() + "') as ENT_date,currmmmyyyy,month_id,MONTH_NAME Month,ent_by,month_days as days from emp_salary_process " +
                    //                            //     "where (currmmmyyyy || type || client_id || client_unit_id)='" + murl + "'");
                    //                            DataTable dte = sgen.getdata(userCode, "select distinct vch_num,to_char(vch_date,'" + sgen.GetSaveSqlDateFormat() + "') as vch_date," +
                    //                              "to_char(ent_date,'" + sgen.GetSaveSqlDateFormat() + "') as ENT_date,currmmmyyyy,substr(currmmmyyyy,1,4) yr,substr(currmmmyyyy,6,2) mn,month_id,MONTH_NAME Month,ent_by,month_days as days from emp_salary_process " +
                    //                              "where (currmmmyyyy || type || client_id || client_unit_id)='" + murl + "'");
                    //                            string Fdate = "01/" + dte.Rows[0]["mn"].ToString() + "/" + dte.Rows[0]["yr"].ToString();
                    //                            mq = @" select '" + murl + "'||b.vch_num as fstr,b.vch_num as emp_code" +
                    //                                ",'" + dte.Rows[0]["vch_num"].ToString() + "' as vch_num,'" + dte.Rows[0]["month_id"].ToString() + "' as month_id," +
                    //                                "'" + dte.Rows[0]["currmmmyyyy"].ToString() + "' as currmmmyyyy,nvl(newamount,'0') newamount," +
                    //                                "'" + dte.Rows[0]["month"].ToString() + "'|| ' (' ||'" + dte.Rows[0]["Month_id"].ToString() + "' || ')' as Month" +
                    //                                ",to_date('" + dte.Rows[0]["vch_date"].ToString() + "', '" + sgen.GetSaveSqlDateFormat() + "') vch_date ," +
                    //                                "to_date('" + dte.Rows[0]["ent_date"].ToString() + "','" + sgen.GetSaveSqlDateFormat() + "') ent_date,'" + dte.Rows[0]["ent_by"].ToString() + "'  ent_by" +
                    //                                ",'" + dte.Rows[0]["days"].ToString() + "' days,nvl(a.Presents,'0') as Presents,nvl(a.Wkoff,'0') Wkoff,nvl(a.HLDay,'0') as HLDay" +
                    //                                ",nvl(OT_hrs,'0') as OT_hrs,nvl(a.Paid_days,'0') as Paid_days,nvl(a.Bal_ADV,'0') as Bal_ADV,a.headname,nvl(a.ordd,'0') as ordd, b.emp_code EmpCode, external_empno External_EmpCode," +
                    //                                "trim((b.FIRST_NAME || ' ' || REPLACE(b.MIDDLE_NAME, '0', '') || ' ' || REPLACE(b.LAST_NAME, '0', ''))) Employee_Name from emp_master b left join (" +
                    //                                "select a.client_id,a.client_unit_id,a.emp_code, a.vch_num, a.month_id, a.currmmmyyyy, a.head_count as newamount,a.month_name || ' (' || a.month_id || ')' Month," +
                    //                                "a.month_days Days, a.pdays Presents, a.wdays Wkoff, a.hdays HLDay, a.OT_hrs, a.Paid_days, a.Bal_ADV,a.head_name || ' (' || a.head_id || ')' headname," +
                    //                                "to_char(a.vch_date, 'yyyy-MM-dd HH24:MI:ss') as vch_date ,to_char(a.ent_date, 'yyyy-MM-dd HH24:MI:ss') as ent_date,a.ent_by ," +
                    //                                "(case when upper(head_type)='LEAVES' then  to_number('1'||lpad(nvl(c.col41,a.head_id),2,'0')||'.0') else (case when upper(head_type)='EARNING' then " +
                    //                                "(case when substr(upper(a.head_name),1,4)='ARR_'  then  to_number('2'||lpad(nvl(c.col41,a.head_id),2,'0')||'.1') " +
                    //                                "else to_number('2'||lpad(nvl(c.col41,a.head_id),2,'0')||'.0') end) else (case when substr(upper(a.head_name),1,4)='ARR_' " +
                    //                                "then  to_number('3'||lpad(nvl(c.col41,a.head_id),2,'0')||'.1') else to_number('3'||lpad(nvl(c.col41,a.head_id),2,'0')||'.0') end) end) end) as ordd from" +
                    //                                "  emp_salary_process a left outer join  vehicle_master c on trim(a.head_id) = trim(c.vch_num) and a.client_id = c.client_id and " +
                    //                                "a.client_unit_id = c.client_unit_id and c.type = 'KSP'  where (a.currmmmyyyy || a.type || a.client_id || a.client_unit_id||a.emp_code) in ('" + URL + "')) a " +
                    //                                " on a.emp_code = b.vch_num and a.client_id = b.client_id and a.client_unit_id = b.client_unit_id where b.client_id='" + clientid_mst + "' " +
                    //                                "and b.client_unit_id='" + unitid_mst + "' and  b.type = 'EMP'  and " +
                    //                                "(case when to_char(b.ex_dt,'yyyy')='1900' then 1 when b.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 " +
                    //                                "and ('" + murl + "'||b.vch_num) in ('" + URL + "')  order by ordd";
                    //                            //mq = "select * from (" + mq + ") where empcode in ('GMC000001','GMC00005')";
                    //                            dtt = sgen.getdata(userCode, mq);
                    //                            #region
                    //                            mod1 = cmd_Fun.month(userCode, unitid_mst);
                    //                            TempData[MyGuid + "_TList1"] = mod1;
                    //                            #endregion
                    //                            model[0].TList1 = mod1;
                    //                            model[0].SelectedItems1 = new string[] { dtt.Rows[0]["month_id"].ToString() };
                    //                            model[0].Col18 = dtt.Rows[0]["vch_num"].ToString();
                    //                            model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                    //                            model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                    //                            model[0].Col16 = dtt.Rows[0]["vch_date"].ToString();
                    //                            model[0].Col8 = "(currmmmyyyy || type || client_id || client_unit_id) in ('" + URL + "')";
                    //                            string curryyyymmm = dtt.Rows[0]["currmmmyyyy"].ToString();
                    //                            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                    //                            string dys = DateTime.DaysInMonth(sgen.Make_int(curryyyymmm.Substring(0, 4)), sgen.Make_int(curryyyymmm.Substring(5, 2))).ToString();
                    //                            mq = Salary_Base_query_edit(model, curryyyymmm, dys, Fdate);
                    //                            //mq = "select * from (" + mq + ") where empcode in ('GMC000001','GMC000005')";
                    //                            DataTable dtfinal = sgen.getdata(userCode, mq);
                    //                            DataView dv = dtfinal.DefaultView;
                    //                            DataTable dtemp = dv.ToTable(true, "empcode");
                    //                            for (int a = 0; a < dtemp.Rows.Count; a++)
                    //                            {
                    //                                var ot_hrs = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(OT_HRS)", string.Empty);
                    //                                var wkoff = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(wkoff)", string.Empty);
                    //                                var hlday = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(hlday)", string.Empty);
                    //                                var presents = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(PRESENTS)", string.Empty);
                    //                                var inc_ver = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(inc_ver)", string.Empty);
                    //                                var slel = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "' and htype='leaves' and headid<>'000005'").
                    //                                    CopyToDataTable().Compute("MAX(newamount)", string.Empty);
                    //                                decimal paid_days = sgen.Make_decimal(presents.ToString()) + sgen.Make_decimal(slel.ToString()) + sgen.Make_decimal(wkoff.ToString()) + sgen.Make_decimal(hlday.ToString());
                    //                                foreach (var r in dtfinal.Select(string.Format("[empcode] = '{0}'", dtemp.Rows[a]["empcode"].ToString())))
                    //                                {
                    //                                    r["PRESENTS"] = presents;
                    //                                    r["ot_hrs"] = ot_hrs;
                    //                                    r["paid_days"] = paid_days;
                    //                                    r["wkoff"] = wkoff;
                    //                                    r["hlday"] = hlday;
                    //                                    r["inc_ver"] = inc_ver;
                    //                                }
                    //                            }
                    //                            dtfinal.AcceptChanges();
                    //                            sgen.SetSession(MyGuid, "DRESP", dtfinal);
                    //                            //var tm = model.FirstOrDefault();
                    //                            //DataTable dtesp = ESCalc(dtt);
                    //                            DataTable dtesp = dtt;
                    //                            if (dtesp.Rows.Count > 0)
                    //                            {
                    //                                Pivot pv = new Pivot(dtesp, MyGuid);
                    //                                dtesp = pv.PivotData("newamount", AggregateFunction.Sum, new string[] { "EmpCode", "External_EmpCode", "Employee_Name", "Month", "Days", "Presents", "Wkoff", "HLDay", "OT_hrs", "Paid_days", "Bal_ADV" }, new string[] { "headname" });
                    //                                //dtesp = CalculateNow(dtesp);
                    //                                dtesp = ESCalc(dtesp);
                    //                                //Pivot pv1 = new Pivot(dtesp);
                    //                                //dtesp = pv1.PivotData("newamount", AggregateFunction.Sum, new string[] { "EmpCode", "External_EmpCode", "Employee_Name", "Month", "Days", "Presents", "Wkoff", "HLDay", "OT_hrs", "Paid_days", "Bal_ADV" }, new string[] { "headname" });
                    //                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                    //                                model[0].dt1 = dtesp;
                    //                                model[0].Col13 = "Generate";
                    //                                ViewBag.vnew = "disabled='disabled'";
                    //                                ViewBag.vgetdata = "disabled='disabled'";
                    //                            }
                    //                            break;
                    //                    }
                    break;
                #endregion
                #region Paymain
                case "paymain":
                    switch (btnval)
                    {
                        case "EDIT":
                            string curryyyymmm = URL.Substring(0, 7);
                            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                            string Fdate = "01/" + URL.Substring(5, 2) + "/" + URL.Substring(0, 4);
                            mq0 = @"SELECT S.emp_category,  S.CLIENT_ID,S.CLIENT_UNIT_ID, s.M_LASTDT,s.VCH_NUM,S.VCH_DATE,S.CREATED_DATE,S.ENT_BY,S.ENT_DATE,S.MONTH_ID,S.CURRYYYYMMM,S.TYPE,
A.VCH_NUM AS EMP_CODE ,A.FIRST_NAME,S.MDAYS,S.WDAYS ,S.HDAYS ,S.LV1,S.LV2,S.LV3,S.LV4,S.LV5,S.LEAVES ,S.ABSENTS ,S.PRESENTS ,S.PAIDDAYS
                            ,S.LATEDAYS ,S.HRS,S.MNTS,S.OT_HRS,S.OT_MNTS,S.OT_DAY_HRS,S.OT_DAY_MNTH,S.OT_HRS_V,S.OTRATE,S.OTHEADS,S.PFHEADS,S.ESIHEADS,S.LWFHEADS
                            ,S.cutpf,S.PFRATE_ER,S.PFRATE,S.PFLIMIT,S.PFLIMIT_ER
                            ,S.ESIRATE,S.ESIRATE_ER,S.CUTESI,S.ESILIMIT,S.ESILIMIT_ER
                              , S.LWFRATE,S.LWFRATE_ER,S.LWFLIMIT,S.LWFLIMIT_ER,S.CUTLWF
                                 , S.CUTVPF,S.VPFLIMIT,S.VPFRATE,S.iscanteen ,S.CANTEENRATE ,S.ERRATE1,
S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14,
                            S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9,
                            S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,S.ACTRATE,S.ESI_ALL FROM EMP_MASTER A
                            LEFT JOIN PAYMAIN S ON A.CLIENT_UNIT_ID=S.CLIENT_UNIT_ID AND A.VCH_NUM=S.EMP_CODE  AND s.curryyyymmm||s.client_unit_id='" + URL + "'" +
"  WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and " +
"(case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
                            var dtbase = sgen.getdata(userCode, mq0);
                            sgen.SetSession(MyGuid, "dtbase", dtbase);
                            mq1 = "";
                            if (userCode.ToUpper() == "SKYKESHO") mq1 = ",S.ACT_F,S.ACT_ARR,S.ACT_OT,S.AMT1,S.OT_HRS_V";
                            mq1 = @"SELECT A.VCH_NUM AS EMP_CODE,A.external_empno ,
A.FIRST_NAME||' '||replace(A.MIDDLE_NAME,'0','')||' '||replace(A.LAST_NAME,'0','')||'('||dp.master_name||')' AS FIRST_NAME
,S.MDAYS,S.WDAYS ,S.HDAYS ,S.LV1,S.LV2,S.LV3,S.LV4,S.LV5,S.LEAVES ,S.ABSENTS ,S.PRESENTS ,S.PAIDDAYS
,S.LATEDAYS ,S.OT_HRS,S.ER1,S.ER2,S.ER3,S.ER4,S.ER5,S.ER6,S.ER7,S.ER8,S.ER9,S.ER10,S.ER11,S.ER12,S.ER13,S.ER14,
S.ER15,S.ER16,S.ER17,S.ER18,S.ER19,S.ER20,S.OT,S.ARR_OT,S.AR1,S.AR2,S.AR3,S.AR4,S.AR5,S.AR6,S.AR7,S.AR8,S.AR9,S.AR10,S.AR11,S.AR12,S.AR13,S.AR14,
S.AR15,S.AR16,S.AR17,S.AR18,S.AR19,S.AR20,S.DED1,S.DED2,S.DED3,S.DED4,S.DED5,S.DED6,S.DED7,S.DED8,S.DED9,
S.DED10,S.ESI_OT,S.ARD1,S.ARD2,S.ARD3,S.ARD4,S.ARD5,S.ARD6,S.ARD7,S.ARD8,S.ARD9,S.ARD10,S.TOTEARN,S.TOTDED,S.NETSALARY" + mq1 + " FROM EMP_MASTER A " +
"LEFT JOIN  PAYMAIN S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID AND s.curryyyymmm||s.client_unit_id='" + URL + "'" +
"left join master_setting dp on dp.master_id = a.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, a.client_id)= 1 and find_in_set(dp.client_unit_id, a.client_unit_id)= 1 " +
            " WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' And a.emp_status != 'R' and " +
"(case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy'))" +
"ORDER BY EMP_CODE";
                            var dtt1 = sgen.getdata(userCode, mq1);
                            var DtLeaveMain = sgen.getdata(userCode, "select col1 as name,col2 as id from kc_tab where type='KLV' " +
                                "and client_id='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                            var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                                ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                                "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                            sgen.SetSession(MyGuid, "DtLeaveMain", DtLeaveMain);
                            sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                            dtt1 = CleanDT(dtt1);
                            dtt1 = GiveHeadName(dtt1);
                            model[0].dt1 = dtt1;
                            List<SelectListItem> modm1 = new List<SelectListItem>();
                            modm1 = cmd_Fun.month(userCode, unitid_mst);
                            model[0].TList1 = modm1;
                            TempData[MyGuid + "_TList1"] = modm1;
                            model[0].Col8 = "curryyyymmm||client_unit_id='" + URL + "'";
                            model[0].SelectedItems1 = new string[] { dtbase.Rows[0]["MONTH_ID"].ToString() };
                            model[0].Col20 = dtbase.Rows[0]["MONTH_ID"].ToString();
                            model[0].Col1 = dtbase.Rows[0]["client_id"].ToString();
                            model[0].Col2 = dtbase.Rows[0]["client_unit_id"].ToString();
                            model[0].Col3 = dtbase.Rows[0]["ENT_BY"].ToString();
                            model[0].Col4 = dtbase.Rows[0]["ENT_DATE"].ToString();
                            model[0].Col16 = dtbase.Rows[0]["vch_date"].ToString();
                            model[0].Col18 = dtbase.Rows[0]["vch_num"].ToString();
                            model[0].Col23 = dtbase.Rows[0]["created_date"].ToString();
                            sgen.SetSession(MyGuid, "EDMODE", "Y");
                            break;
                    }
                    break;
                #endregion
                #region attn
                case "attn":
                    switch (btnval)
                    {
                        case "EDIT":
                            string curryyyymmm = URL.Substring(0, 7);
                            string Fdate = "01/" + URL.Substring(5, 2) + "/" + URL.Substring(0, 4);
                            DateTime fdt = new DateTime(sgen.Make_int(URL.Substring(0, 4)), sgen.Make_int(URL.Substring(5, 2)), 1);
                            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                            var DtLeaveMain = sgen.getdata(userCode, "select col1 as name,col2 as id from kc_tab where type='KLV' " +
                                "and client_id='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                            sgen.SetSession(MyGuid, "DtLeaveMain", DtLeaveMain);
                            mq0 = "SELECT to_char(s.m_lastdt,'month') as monthname,TO_CHAR(s.m_LASTDT,'DDMMYYYY') AS M_LASTDT,s.MONTH_ID, s.CLIENT_ID,S.CLIENT_UNIT_ID, " +
                                " s.VCH_NUM,S.VCH_DATE,S.CREATED_DATE,S.ENT_BY," +
                                "S.ENT_DATE,S.CURRYYYYMMM,S.TYPE,A.VCH_NUM EMP_CODE ,A.FIRST_NAME,NVL(S.CANT_DED,'0') CANT_DED,S.MDAYS,S.WDAYS ,S.HDAYS ,S.LV1,S.LV2,S.LV3,S.LV4,S.LV5,S.LEAVES," +
                                "S.ABSENTS ,S.PRESENTS ,S.PAIDDAYS,S.LATEDAYS ,S.HRS,S.MNTS,S.OT_HRS,S.OT_MNTS FROM EMP_MASTER A " +
                                "LEFT JOIN ATTN S ON A.CLIENT_UNIT_ID=S.CLIENT_UNIT_ID AND A.VCH_NUM=S.EMP_CODE  " +
                                "and s.TYPE='ATN' AND S.curryyyymmm||S.client_unit_id||S.VCH_NUM||TO_CHAR(S.VCH_DATE,'DDMMYYYY')='" + URL + "' WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and " +
                                "a.emp_status != 'R' and (case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 " +
                                "else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
                            var dtbase = sgen.getdata(userCode, mq0);
                            sgen.SetSession(MyGuid, "dtbase", dtbase);
                            mq = "select '" + CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(fdt.Month).Trim() + " (" + URL.Substring(4, 3).Trim() + ")" + "' month_name" +
                                ",a.Emp_Code,external_empno External_EmpCode,old_empcode Old_EmpCode," +
      "(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Employee_Name,NVL(B.CANT_DED,'0') CANT_DED,OT_HRS, MDAYS,PRESENTS, WDAYS, HDAYS," +
      "LV1,LV2,LV3,LV4,LV5 from emp_master A " +
      " LEFT OUTER JOIN ATTN B ON A.VCH_NUM=B.emp_code AND A.CLIENT_UNIT_ID=B.CLIENT_UNIT_ID  and b.TYPE='ATN' AND B.curryyyymmm||B.client_unit_id||B.VCH_NUM||TO_CHAR(B.VCH_DATE,'DDMMYYYY')='" + URL + "'" +
      "where A.type='EMP' and A.client_id='" + clientid_mst + "' and A.client_unit_id='" + unitid_mst + "' and a.emp_status != 'R' and " +
"(case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy'))" +
" ORDER BY a.EMP_CODE";
                            var dtl = sgen.getdata(userCode, mq);
                            dtl = CleanDT_Lv(dtl);
                            dtl = GiveHeadName_LV(dtl);
                            model[0].dt1 = dtl;
                            List<SelectListItem> modm1 = new List<SelectListItem>();
                            modm1 = cmd_Fun.month(userCode, unitid_mst);
                            model[0].TList1 = modm1;
                            TempData[MyGuid + "_TList1"] = modm1;
                            model[0].Col8 = "curryyyymmm||client_unit_id||VCH_NUM||TO_CHAR(VCH_DATE,'DDMMYYYY')='" + URL + "'";
                            model[0].SelectedItems1 = new string[] { dtbase.Rows[0]["MONTH_ID"].ToString() };
                            model[0].Col18 = dtbase.Rows[0]["vch_num"].ToString();
                            model[0].Col19 = dtbase.Rows[0]["monthname"].ToString().ToUpper() + " - " + dtbase.Rows[0]["curryyyymmm"].ToString().Substring(0, 4).Trim().ToUpper();
                            model[0].Col20 = dtbase.Rows[0]["M_LASTDT"].ToString().ToUpper();
                            sgen.SetSession(MyGuid, "EDMODE", "Y");
                            break;
                    }
                    break;
                #endregion
                #region emp_attendance
                case "emp_attendance":
                    switch (btnval)
                    {
                        case "EDIT":
                            mq = "select a.vch_num,a.vch_date,a.ent_by,a.ent_date,a.edit_by,a.edit_date,a.type,a.client_id,a.client_unit_id,em.emp_code EmpCode,em.old_empcode Old_EmpCode," +
                                "em.external_empno External_EmpCode,(em.first_Name|| ' '|| replace(em.middle_name, '0', '')|| ' '|| replace(em.last_name, '0', '')) Employee_Name," +
                                "a.othrs OT,a.pdays Pdays,a.wdays Wdays,a.hdays Hdays,(b.col1|| ' ('|| b.vch_num|| ')') lv_head,a.leave_count,(a.month_name|| ' ('|| a.month_id|| ')') Month_Name," +
                                "a.month_id,a.month_name m_name,a.curryyyymmm from leave_ob a " +
                                "inner join kc_tab b on a.leave_type_id = b.vch_num and b.type = 'KLV' and b.client_id = a.client_id " +
                                "inner join emp_master em on em.vch_num = a.emp_code and em.type = 'EMP' and em.client_id = a.client_id and em.client_unit_id = a.client_unit_id " +
                                "where (a.curryyyymmm|| a.type|| a.client_id|| a.client_unit_id)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                //month
                                #region
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);

                                #endregion
                                //emp type
                                #region
                                mod2.Add(new SelectListItem { Text = "All Employee", Value = "000" });
                                mod2.Add(new SelectListItem { Text = "Selected Employee", Value = "001" });
                                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                                #endregion
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col5 = dtt.Rows[0]["edit_by"].ToString();
                                model[0].Col6 = dtt.Rows[0]["edit_date"].ToString();
                                model[0].Col8 = "(curryyyymmm|| type|| client_id|| client_unit_id) = '" + URL + "'";
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                model[0].Col17 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col19 = dtt.Rows[0]["m_name"].ToString().ToUpper() + " - " + dtt.Rows[0]["curryyyymmm"].ToString().Substring(0, 4).Trim().ToUpper();


                                sgen.SetSession(MyGuid, "Attcurryyyymmm", dtt.Rows[0]["curryyyymmm"].ToString());
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["month_id"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                Pivot pv = new Pivot(dtt, MyGuid);
                                dtt = pv.PivotData("leave_count", AggregateFunction.Sum, new string[] { "Month_Name", "EmpCode", "Old_EmpCode", "External_EmpCode", "Employee_Name", "OT", "Pdays", "Wdays", "Hdays" }, new string[] { "lv_head" });
                                model[0].dt1 = dtt;
                            }
                            break;
                        case "EMP":
                            mq = "select group_concat((FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')))=1 as emp_name from emp_master " +
                                "where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) in ('" + URL + "')";
                            DataTable dte = new DataTable();
                            dte = sgen.getdata(userCode, mq);
                            if (dte.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "KEMPATT", URL);
                                model[0].Col18 = dte.Rows[0]["emp_name"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region lwf_setting
                case "lwf_setting":
                    switch (btnval.ToUpper())
                    {
                        case "DETAIL":
                        case "EDIT":
                            mq = "SELECT (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,col1,col2,col3,col4,col7,col8,col9," +
    "col10,col11,col13,col14,col15,col17,col18,col19,col20,col21,rec_id,client_id,client_unit_id,ent_by,ent_date,vch_num,vch_date from " + model[0].Col10 + " " +
"where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model = getedit(model, dtt, URL);
                                //Session["EDMODE"] = "Y";
                                //model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                //model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                //model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                //model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                //model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                //model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                //model[0].Col9 = tm.Col9;
                                //model[0].Col10 = tm.Col10;
                                //model[0].Col11 = tm.Col11;
                                //model[0].Col12 = tm.Col12;
                                //model[0].Col13 = "Update";
                                //model[0].Col14 = tm.Col14;
                                //model[0].Col15 = tm.Col15;
                                #region Country 
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = cmd_Fun.country(userCode, unitid_mst);

                                #endregion
                                #region State 
                                DataTable dt2 = new DataTable();
                                dt2 = sgen.getdata(userCode, "select distinct state_name,state_gst_code from country_state where alpha_2='" + dtt.Rows[0]["col7"].ToString().Trim() + "' and state_name!='-' order by state_name");
                                if (dt2.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt2.Rows)
                                    {
                                        mod5.Add(new SelectListItem { Text = dr["state_name"].ToString(), Value = dr["state_gst_code"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                #endregion
                                #region company_name 
                                //mq1 = sgen.seekval(userCode, "select client_id from user_details where rec_id='" + Convert.ToInt32(userid_mst) + "'", "client_id");
                                mq1 = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
                                if (!role_mst.ToUpper().Equals("OWNER")) where = " and company_profile_id in ('" + mq1.Replace(",", "','") + "')";
                                DataTable dt3 = new DataTable();
                                mq1 = "SELECT Company_Profile_Id, (company_name|| ' ('|| company_profile_id||')') as nameid FROM company_profile where type='CP' " + where + "";
                                dt3 = sgen.getdata(userCode, mq1);
                                if (dt3.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt3.Rows)
                                    {
                                        mod6.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["company_profile_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                #endregion
                                #region Unit
                                DataTable dtunit = new DataTable();
                                string mq0 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                                if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq0.Replace(",", "','") + "')";
                                mq1 = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as nameid FROM company_unit_profile where company_profile_id='" + dtt.Rows[0]["col9"].ToString().Trim() + "'" + where + "";
                                dtunit = sgen.getdata(userCode, mq1);
                                if (dtunit.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtunit.Rows)
                                    {
                                        mod7.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                #endregion
                                mod9.Add(new SelectListItem { Text = "Earning", Value = "Earning" });
                                mod9.Add(new SelectListItem { Text = "Deduction", Value = "Deduction" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                                mod2.Add(new SelectListItem { Text = "Do Not Deduct LWF on Arrear", Value = "001" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                mod8.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                                mod8.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                                mod8.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                                mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod1.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col4"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col11"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col15"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col13"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col14"].ToString();
                                model[0].Col23 = dtt.Rows[0]["col17"].ToString();
                                model[0].Col24 = dtt.Rows[0]["col18"].ToString();
                                model[0].Col25 = dtt.Rows[0]["col20"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col21"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col19"].ToString()).Distinct()).Split(',');
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].SelectedItems9 = L9;
                                if (btnval == "EDIT")
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                                    ViewBag.vnew = "disabled='disabled'";
                                    ViewBag.vedit = "disabled='disabled'";
                                    ViewBag.vsave = "";
                                    model[0].Col13 = "Update";
                                    model[0].Col121 = "U";
                                    model[0].Col122 = "<u>U</u>pdate";
                                    ViewBag.scripCall = "enableForm();";
                                }
                                if (btnval == "DETAIL")
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "N");
                                    ViewBag.vnew = "disabled='disabled'";
                                    ViewBag.vedit = "";
                                    ViewBag.vsave = "disabled='disabled'";
                                    model[0].Col13 = "Save";
                                    model[0].Col121 = "S";
                                    model[0].Col122 = "<u>S</u>ave";
                                    ViewBag.scripCall = "disableForm();";
                                }
                            }
                            break;
                        case "UNITS":
                            mq = "select u.cup_id,u.company_profile_id,u.unit_name,lw.col1,lw.col2,lw.col3,lw.col4,lw.col7,lw.col8,lw.col9," +
                       "lw.col10,lw.col11,lw.col13,lw.col14,lw.col15,lw.col17,lw.col18,lw.col19,lw.col20,lw.col21,lw.client_id,lw.client_unit_id,lw.ent_by,lw.ent_date,lw.vch_num,lw.vch_date " +
                       "from company_unit_profile u inner join vehicle_master lw on lw.client_id=u.Company_profile_id and lw.client_unit_id=u.CUP_Id and lw.type='KLW' " +
                       "where (u.cup_id||u.company_profile_id||to_char(u.vch_date,'yyyymmdd'))= '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                #region Country 
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = cmd_Fun.country(userCode, unitid_mst);

                                #endregion
                                #region State 
                                DataTable dt2 = new DataTable();
                                dt2 = sgen.getdata(userCode, "select distinct state_name,state_gst_code from country_state where alpha_2='" + dtt.Rows[0]["col7"].ToString().Trim() + "' and state_name!='-' order by state_name");
                                if (dt2.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt2.Rows)
                                    {
                                        mod5.Add(new SelectListItem { Text = dr["state_name"].ToString(), Value = dr["state_gst_code"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                #endregion
                                #region company_name 
                                mq1 = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
                                if (!role_mst.ToUpper().Equals("OWNER")) where = " and company_profile_id in ('" + mq.Replace(",", "','") + "')";
                                DataTable dt3 = new DataTable();
                                mq1 = "SELECT Company_Profile_Id, (company_name|| ' ('|| company_profile_id||')') as nameid FROM company_profile where type='CP' " + where + "";
                                dt3 = sgen.getdata(userCode, mq1);
                                if (dt3.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt3.Rows)
                                    {
                                        mod6.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["company_profile_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                #endregion
                                #region Unit
                                DataTable dtunit = new DataTable();
                                string mq0 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                                if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq0.Replace(",", "','") + "')";
                                mq1 = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as nameid FROM company_unit_profile where company_profile_id='" + dtt.Rows[0]["col9"].ToString().Trim() + "'" + where + "";
                                dtunit = sgen.getdata(userCode, mq1);
                                if (dtunit.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtunit.Rows)
                                    {
                                        mod7.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                #endregion
                                mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod1.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                mod9.Add(new SelectListItem { Text = "Earning", Value = "Earning" });
                                mod9.Add(new SelectListItem { Text = "Deduction", Value = "Deduction" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                                mod2.Add(new SelectListItem { Text = "Do Not Deduct LWF on Arrear", Value = "001" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                mod8.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                                mod8.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                                mod8.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;

                                model[0].Col17 = dtt.Rows[0]["unit_name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col4"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col11"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col15"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col13"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col14"].ToString();
                                model[0].Col23 = dtt.Rows[0]["col17"].ToString();
                                model[0].Col24 = dtt.Rows[0]["col18"].ToString();
                                model[0].Col25 = dtt.Rows[0]["col20"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col21"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col19"].ToString()).Distinct()).Split(',');
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].SelectedItems9 = L9;
                            }
                            break;
                    }
                    break;
                #endregion
                #region esi_setting
                case "esi_setting":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            mq = "SELECT rec_id,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col17,col18," +
                                 "to_char(convert_tz(col16,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as col16," +
                                 "to_char(convert_tz(vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as vch_date," +
                                 "client_id,client_unit_id,ent_by,ent_date,vch_num,vch_date from vehicle_master " +
                                 "where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region Bind All dropdwon
                                mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod1.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                mod2.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod2.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                mod4.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod4.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                mod5.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                                mod5.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                                mod5.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                mod6.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod6.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                mod7.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                                mod7.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                                mod7.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                mod8.Add(new SelectListItem { Text = "No", Value = "No" });
                                mod8.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod8.Add(new SelectListItem { Text = "None", Value = "None" });
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                                mod9.Add(new SelectListItem { Text = "No", Value = "No" });
                                mod9.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod9.Add(new SelectListItem { Text = "None", Value = "None" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;

                                #endregion
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                //model[0].Col13 = "Update";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col3"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col17"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col18"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col5"].ToString();
                                model[0].Col23 = dtt.Rows[0]["col6"].ToString();
                                model[0].Col24 = dtt.Rows[0]["col12"].ToString();
                                model[0].Col25 = dtt.Rows[0]["col16"].ToString();
                                model[0].Col30 = dtt.Rows[0]["col15"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col13"].ToString()).Distinct()).Split(',');
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col11"].ToString()).Distinct()).Split(',');
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col14"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].SelectedItems9 = L9;
                                if (!model[0].Col30.Trim().Equals(""))
                                {
                                    mq1 = "SELECT emp.vch_num,emp.cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as name," +
                                   "msdg.master_name as designation FROM emp_master emp " +
                                   "inner join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG' and find_in_set(msdg.client_id,'" + clientid_mst + "')=1 and find_in_set(msdg.client_unit_id,'" + unitid_mst + "')=1 " +
                                   "where emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "' and emp.vch_num='" + model[0].Col30.Trim() + "' and emp.type='EMP'";
                                    DataTable dtesi = new DataTable();
                                    dtesi = sgen.getdata(userCode, mq1);
                                    if (dtesi.Rows.Count > 0)
                                    {
                                        model[0].Col26 = dtesi.Rows[0]["name"].ToString();
                                        model[0].Col27 = dtesi.Rows[0]["designation"].ToString();
                                        model[0].Col28 = dtesi.Rows[0]["f_name"].ToString();
                                        model[0].Col29 = dtesi.Rows[0]["cur_address"].ToString();
                                        model[0].Col30 = dtesi.Rows[0]["vch_num"].ToString();
                                    }
                                }
                                if (btnval == "EDIT")
                                {
                                    if (dtt.Rows.Count > 0)
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "Y");
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "disabled='disabled'";
                                        ViewBag.vsave = "";
                                        model[0].Col13 = "Update";
                                        model[0].Col121 = "U";
                                        model[0].Col122 = "<u>U</u>pdate";
                                        ViewBag.scripCall = "enableForm();";
                                    }
                                }
                                if (btnval == "DETAIL")
                                {
                                    if (dtt.Rows.Count > 0)
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "N");
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "";
                                        ViewBag.vsave = "disabled='disabled'";
                                        model[0].Col13 = "Save";
                                        model[0].Col121 = "S";
                                        model[0].Col122 = "<u>S</u>ave";
                                        ViewBag.scripCall = "disableForm();";
                                    }
                                }
                            }
                            break;
                        case "ESISIG":
                            mq = "SELECT emp.vch_num,replace(emp.cur_address,'0','Address Not There') cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as Name," +
                                "nvl(msdg.master_name,'-') as designation FROM emp_master emp left join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG' and find_in_set(msdg.client_id,'" + clientid_mst + "')=1 and find_in_set(msdg.client_unit_id,'" + unitid_mst + "')=1 " +
                                "where (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col26 = dtt.Rows[0]["name"].ToString();
                                model[0].Col27 = dtt.Rows[0]["designation"].ToString();
                                model[0].Col28 = dtt.Rows[0]["f_name"].ToString();
                                model[0].Col29 = dtt.Rows[0]["cur_address"].ToString();
                                model[0].Col30 = dtt.Rows[0]["vch_num"].ToString();
                            }
                            break;
                        case "UNITS":
                            mq = "select u.cup_id,u.company_profile_id,u.unit_name,es.col1,es.col2,es.col3,es.col4,es.col5,es.col6,es.col7,es.col8,es.col9,es.col10,es.col11,es.col12,es.col13,es.col14,es.col15,es.col17,es.col18," +
                                    "to_char(convert_tz(es.col16,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as col16,es.client_id,es.client_unit_id,es.ent_by,es.ent_date,es.vch_num," +
                                    "es.vch_date " +
                                    "from company_unit_profile u inner join vehicle_master es on es.client_id=u.Company_profile_id and es.client_unit_id=u.CUP_Id and es.type='KES' " +
                                    "where (u.cup_id||u.company_profile_id||to_char(u.vch_date,'yyyymmdd'))= '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col3"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col17"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col18"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col5"].ToString();
                                model[0].Col23 = dtt.Rows[0]["col6"].ToString();
                                model[0].Col24 = dtt.Rows[0]["col12"].ToString();
                                model[0].Col25 = dtt.Rows[0]["col16"].ToString();
                                model[0].Col30 = dtt.Rows[0]["col15"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col13"].ToString()).Distinct()).Split(',');
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col11"].ToString()).Distinct()).Split(',');
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col14"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].SelectedItems9 = L9;
                                if (!model[0].Col30.Trim().Equals(""))
                                {
                                    mq1 = "SELECT emp.vch_num,emp.cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as name," +
                                   "msdg.master_name as designation FROM emp_master emp join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG' and find_in_set(msdg.client_id,'" + clientid_mst + "')=1 and find_in_set(msdg.client_unit_id,'" + unitid_mst + "')=1 " +
                                   "where emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "' and emp.vch_num='" + model[0].Col30.Trim() + "' and emp.type='EMP'";
                                    DataTable dtesi = new DataTable();
                                    dtesi = sgen.getdata(userCode, mq1);
                                    if (dtesi.Rows.Count > 0)
                                    {
                                        model[0].Col26 = dtesi.Rows[0]["name"].ToString();
                                        model[0].Col27 = dtesi.Rows[0]["designation"].ToString();
                                        model[0].Col28 = dtesi.Rows[0]["f_name"].ToString();
                                        model[0].Col29 = dtesi.Rows[0]["cur_address"].ToString();
                                        model[0].Col30 = dtesi.Rows[0]["vch_num"].ToString();
                                    }
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region pf_setting
                case "pf_setting":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            mq = "SELECT edit_by,rec_id ,ent_by,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15," +
                            "to_char(convert_tz(col16,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as col16,col17,col18,col19,col20,col21,col25," +
                            "col28,col29,col30,col31,col32,col33,col34,col36,col37,col38,col39,col40,col42,cur_village,client_id,client_unit_id,ent_by,ent_date,vch_num,vch_date " +
                            "from " + model[0].Col10 + " where (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region Dropdwon
                                mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod1.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                mod2.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod2.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                mod4.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod4.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                mod5.Add(new SelectListItem { Text = "Exempted", Value = "Exempted" });
                                mod5.Add(new SelectListItem { Text = "Not Exempted", Value = "Not Exempted" });
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                mod6.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod6.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                mod7.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod7.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                mod8.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod8.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                                mod9.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod9.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                                mod10.Add(new SelectListItem { Text = "Round off", Value = "001" });
                                mod10.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                                mod10.Add(new SelectListItem { Text = "Round down", Value = "003" });
                                TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod10;
                                mod11.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod11.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist11"] = model[0].TList11 = mod11;
                                mod12.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod12.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;
                                mod13.Add(new SelectListItem { Text = "Basic Wages", Value = "Basic Wages" });
                                mod13.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist13"] = model[0].TList13 = mod13;
                                mod14.Add(new SelectListItem { Text = "Basic Wages", Value = "Basic Wages" });
                                mod14.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod14;
                                mod15.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod15.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod15;
                                mod16.Add(new SelectListItem { Text = "50 Paise", Value = "50 Paise" });
                                mod16.Add(new SelectListItem { Text = "1 Rs", Value = "1 Rs" });
                                mod16.Add(new SelectListItem { Text = "5 Rs", Value = "5 Rs" });
                                TempData[MyGuid + "_Tlist16"] = model[0].TList16 = mod16;
                                mod17.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod17.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod17;
                                #endregion

                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col5"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col6"].ToString();
                                model[0].Col23 = dtt.Rows[0]["col14"].ToString();
                                model[0].Col24 = dtt.Rows[0]["col15"].ToString();
                                model[0].Col33 = dtt.Rows[0]["col16"].ToString();
                                model[0].Col25 = dtt.Rows[0]["col17"].ToString();
                                model[0].Col26 = dtt.Rows[0]["col18"].ToString();
                                model[0].Col27 = dtt.Rows[0]["col19"].ToString();
                                model[0].Col28 = dtt.Rows[0]["col20"].ToString();
                                model[0].Col29 = dtt.Rows[0]["col21"].ToString();
                                model[0].Col30 = dtt.Rows[0]["col25"].ToString();
                                model[0].Col31 = dtt.Rows[0]["col29"].ToString();
                                model[0].Col32 = dtt.Rows[0]["col30"].ToString();
                                model[0].Col38 = dtt.Rows[0]["col38"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col40"].ToString();
                                model[0].Col39 = dtt.Rows[0]["col42"].ToString();
                                model[0].Col19 = dtt.Rows[0]["cur_village"].ToString();
                                if (dtt.Rows[0]["col39"].ToString() == "Y")
                                {
                                    model[0].Chk1 = true;
                                }
                                if (dtt.Rows[0]["col39"].ToString() == "N")
                                {
                                    model[0].Chk1 = false;
                                }
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col5 = dtt.Rows[0]["edit_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col11"].ToString()).Distinct()).Split(',');
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col12"].ToString()).Distinct()).Split(',');
                                String[] L10 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col13"].ToString()).Distinct()).Split(',');
                                String[] L11 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col28"].ToString()).Distinct()).Split(',');
                                String[] L12 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col31"].ToString()).Distinct()).Split(',');
                                String[] L13 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col32"].ToString()).Distinct()).Split(',');
                                String[] L14 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col33"].ToString()).Distinct()).Split(',');
                                String[] L15 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col34"].ToString()).Distinct()).Split(',');
                                String[] L16 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col36"].ToString()).Distinct()).Split(',');
                                String[] L17 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col37"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].SelectedItems9 = L9;
                                model[0].SelectedItems10 = L10;
                                model[0].SelectedItems11 = L11;
                                model[0].SelectedItems12 = L12;
                                model[0].SelectedItems13 = L13;
                                model[0].SelectedItems14 = L14;
                                model[0].SelectedItems15 = L15;
                                model[0].SelectedItems16 = L16;
                                model[0].SelectedItems17 = L17;
                                if (!model[0].Col38.Trim().Equals(""))
                                {
                                    mq1 = "SELECT emp.vch_num,emp.cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as name," +
                             "msdg.master_name as designation FROM emp_master emp join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG' and find_in_set(msdg.client_id,'" + clientid_mst + "')=1 and find_in_set(msdg.client_unit_id,'" + unitid_mst + "')=1 " +
                             "where emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "' and emp.vch_num='" + model[0].Col38.Trim() + "' and emp.type='EMP'";
                                    DataTable dtpf = new DataTable();
                                    dtpf = sgen.getdata(userCode, mq1);
                                    if (dtpf.Rows.Count > 0)
                                    {
                                        model[0].Col34 = dtpf.Rows[0]["name"].ToString();
                                        model[0].Col35 = dtpf.Rows[0]["designation"].ToString();
                                        model[0].Col36 = dtpf.Rows[0]["f_name"].ToString();
                                        model[0].Col37 = dtpf.Rows[0]["cur_address"].ToString();
                                        model[0].Col38 = dtpf.Rows[0]["vch_num"].ToString();
                                    }
                                }
                                if (btnval == "EDIT")
                                {
                                    if (dtt.Rows.Count > 0)
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "Y");
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "disabled='disabled'";
                                        ViewBag.vsave = "";
                                        model[0].Col13 = "Update";
                                        model[0].Col121 = "U";
                                        model[0].Col122 = "<u>U</u>pdate";
                                        ViewBag.scripCall = "enableForm();";
                                    }
                                }
                                if (btnval == "DETAIL")
                                {
                                    if (dtt.Rows.Count > 0)
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "N");
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "";
                                        ViewBag.vsave = "disabled='disabled'";
                                        model[0].Col13 = "Save";
                                        model[0].Col121 = "S";
                                        model[0].Col122 = "<u>S</u>ave";
                                        ViewBag.scripCall = "disableForm();";
                                    }
                                }
                            }
                            break;
                        case "PFSIG":
                            mq = "SELECT emp.vch_num,replace(emp.cur_address,'0','Address Not There') cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as Name," +
                                "nvl(msdg.master_name,'-') as designation FROM emp_master emp left join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG' and find_in_set(msdg.client_id,'" + clientid_mst + "')=1 and find_in_set(msdg.client_unit_id,'" + unitid_mst + "')=1 " +
                                "where (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col34 = dtt.Rows[0]["name"].ToString();
                                model[0].Col35 = dtt.Rows[0]["designation"].ToString();
                                model[0].Col36 = dtt.Rows[0]["f_name"].ToString();
                                model[0].Col37 = dtt.Rows[0]["cur_address"].ToString();
                                model[0].Col38 = dtt.Rows[0]["vch_num"].ToString();
                            }
                            break;
                        case "UNITS":
                            mq = "select u.cup_id,u.company_profile_id,u.unit_name,pf.col1,pf.col2,pf.col3,pf.col4,pf.col5,pf.col6,pf.col7,pf.col8,pf.col9,pf.col10,pf.col11,pf.col12,pf.col13,pf.col14,pf.col15," +
    "to_char(convert_tz(pf.col16,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as col16,pf.col17,pf.col18,pf.col19,pf.col20,pf.col21,pf.col25, pf.col28,pf.col29," +
    "pf.col30,pf.col31,pf.col32,pf.col33,pf.col34,pf.col36,pf.col37,pf.col38,pf.col39,pf.col40,pf.col42,pf.cur_village,pf.client_id,pf.client_unit_id,pf.ent_by,pf.ent_date,pf.vch_num,pf.vch_date " +
    "from company_unit_profile u inner join vehicle_master pf on pf.client_id=u.Company_profile_id and pf.client_unit_id=u.CUP_Id and pf.type='KPF' " +
    "where (u.cup_id||u.company_profile_id||to_char(u.vch_date,'yyyymmdd'))= '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col5"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col6"].ToString();
                                model[0].Col23 = dtt.Rows[0]["col14"].ToString();
                                model[0].Col24 = dtt.Rows[0]["col15"].ToString();
                                model[0].Col33 = dtt.Rows[0]["col16"].ToString();
                                model[0].Col25 = dtt.Rows[0]["col17"].ToString();
                                model[0].Col26 = dtt.Rows[0]["col18"].ToString();
                                model[0].Col27 = dtt.Rows[0]["col19"].ToString();
                                model[0].Col28 = dtt.Rows[0]["col20"].ToString();
                                model[0].Col29 = dtt.Rows[0]["col21"].ToString();
                                model[0].Col30 = dtt.Rows[0]["col25"].ToString();
                                model[0].Col31 = dtt.Rows[0]["col29"].ToString();
                                model[0].Col32 = dtt.Rows[0]["col30"].ToString();
                                model[0].Col38 = dtt.Rows[0]["col38"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col40"].ToString();
                                model[0].Col19 = dtt.Rows[0]["cur_village"].ToString();
                                model[0].Col39 = dtt.Rows[0]["col42"].ToString();
                                if (dtt.Rows[0]["col39"].ToString() == "Y")
                                {
                                    model[0].Chk1 = true;
                                }
                                if (dtt.Rows[0]["col39"].ToString() == "N")
                                {
                                    model[0].Chk1 = false;
                                }
                                #region Dropdwon

                                mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod1.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                mod2.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod2.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod3.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                mod4.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod4.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                mod5.Add(new SelectListItem { Text = "Exempted", Value = "  Exempted" });
                                mod5.Add(new SelectListItem { Text = " Not Exempted", Value = " Not Exempted" });
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                mod6.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod6.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                mod7.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod7.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                mod8.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod8.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                                mod9.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod9.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                                mod10.Add(new SelectListItem { Text = "Round off", Value = "001" });
                                mod10.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                                mod10.Add(new SelectListItem { Text = "Round down", Value = "003" });
                                TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod10;
                                mod11.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod11.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist11"] = model[0].TList11 = mod11;
                                mod12.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod12.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;
                                mod13.Add(new SelectListItem { Text = "Basic Wages", Value = "Basic Wages" });
                                mod13.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist13"] = model[0].TList13 = mod13;
                                mod14.Add(new SelectListItem { Text = "Basic Wages", Value = "Basic Wages" });
                                mod14.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod14;
                                mod15.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod15.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod15;
                                mod16.Add(new SelectListItem { Text = "50 Paise", Value = "50 Paise" });
                                mod16.Add(new SelectListItem { Text = "1 Rs", Value = "1 Rs" });
                                mod16.Add(new SelectListItem { Text = "5 Rs", Value = "5 Rs" });
                                TempData[MyGuid + "_Tlist16"] = model[0].TList16 = mod16;
                                mod17.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod17.Add(new SelectListItem { Text = " No", Value = "No" });
                                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod17;
                                #endregion

                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                // model[0].Col3 = "Update";
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col11"].ToString()).Distinct()).Split(',');
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col12"].ToString()).Distinct()).Split(',');
                                String[] L10 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col13"].ToString()).Distinct()).Split(',');
                                String[] L11 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col28"].ToString()).Distinct()).Split(',');
                                String[] L12 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col31"].ToString()).Distinct()).Split(',');
                                String[] L13 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col32"].ToString()).Distinct()).Split(',');
                                String[] L14 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col33"].ToString()).Distinct()).Split(',');
                                String[] L15 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col34"].ToString()).Distinct()).Split(',');
                                String[] L16 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col36"].ToString()).Distinct()).Split(',');
                                String[] L17 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col37"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].SelectedItems9 = L9;
                                model[0].SelectedItems10 = L10;
                                model[0].SelectedItems11 = L11;
                                model[0].SelectedItems12 = L12;
                                model[0].SelectedItems13 = L13;
                                model[0].SelectedItems14 = L14;
                                model[0].SelectedItems15 = L15;
                                model[0].SelectedItems16 = L16;
                                model[0].SelectedItems17 = L17;
                                if (!model[0].Col38.Trim().Equals(""))
                                {
                                    mq1 = "SELECT emp.vch_num,emp.cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as name," +
                             "msdg.master_name as designation FROM emp_master emp join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG' and find_in_set(msdg.client_id,'" + clientid_mst + "')=1 and find_in_set(msdg.client_unit_id,'" + unitid_mst + "')=1 " +
                             "where emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "' and emp.vch_num='" + model[0].Col38.Trim() + "' and emp.type='EMP'";
                                    DataTable dtpf = new DataTable();
                                    dtpf = sgen.getdata(userCode, mq1);
                                    if (dtpf.Rows.Count > 0)
                                    {
                                        model[0].Col34 = dtpf.Rows[0]["name"].ToString();
                                        model[0].Col35 = dtpf.Rows[0]["designation"].ToString();
                                        model[0].Col36 = dtpf.Rows[0]["f_name"].ToString();
                                        model[0].Col37 = dtpf.Rows[0]["cur_address"].ToString();
                                        model[0].Col38 = dtpf.Rows[0]["vch_num"].ToString();
                                    }
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region configure_rule
                case "configure_rule":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            mq = "SELECT edit_by,rec_id,col1,col2,col3,col4,col7,col8,col9,col10,col11," +
                   "col12,col13,col14,col15,col18,col19,col20,col21,col25,col28,col29,col30,col31,col32,col33,col34,col36,client_id,client_unit_id,ent_by,ent_date,vch_num,vch_date " +
                   "from " + model[0].Col10 + " where (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region Dropdwon All hard code
                                mod1.Add(new SelectListItem { Text = "CTC Based", Value = "CTC Based" });
                                mod1.Add(new SelectListItem { Text = "Adhoc", Value = "Adhoc" });
                                mod1.Add(new SelectListItem { Text = "Gross", Value = "Gross" });
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                mod2.Add(new SelectListItem { Text = "Standard", Value = "Standard" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                mod3.Add(new SelectListItem { Text = "30 days", Value = "30 days" });
                                mod3.Add(new SelectListItem { Text = "31 days", Value = "31 days" });
                                mod3.Add(new SelectListItem { Text = "Actual days in a month", Value = "Actual days in a month" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                mod4.Add(new SelectListItem { Text = "Both", Value = "Both" });
                                mod4.Add(new SelectListItem { Text = "Set off against leave", Value = "Set off against leave" });
                                mod4.Add(new SelectListItem { Text = "Payout", Value = "Payout" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                #region 5 dropdwon
                                for (int i = 1; i <= 31; i++)
                                {
                                    if (i.ToString().Length.Equals(1))
                                    {
                                        mod5.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                #endregion

                                mod6.Add(new SelectListItem { Text = "Attendance and Payroll", Value = "Attendance and Payroll" });
                                mod6.Add(new SelectListItem { Text = " Attendance only", Value = " Attendance only" });
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                #region 7 dropdwon
                                for (int i = 1; i <= 31; i++)
                                {
                                    if (i.ToString().Length.Equals(1))
                                    {
                                        mod7.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                #endregion

                                mod8.Add(new SelectListItem { Text = "Dont Send Email", Value = "Dont Send Email" });
                                mod8.Add(new SelectListItem { Text = "Common Email", Value = "Common Email" });
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                                mod9.Add(new SelectListItem { Text = "Month", Value = "Month" });
                                mod9.Add(new SelectListItem { Text = "Date", Value = "Date" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                                #endregion


                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col3"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col36"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col7"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col9"].ToString();
                                if (dtt.Rows[0]["col18"].ToString() == "Y") { model[0].Chk5 = true; }
                                if (dtt.Rows[0]["col18"].ToString() == "N") { model[0].Chk5 = false; }
                                if (dtt.Rows[0]["col19"].ToString() == "Y") { model[0].Chk6 = true; }
                                if (dtt.Rows[0]["col19"].ToString() == "N") { model[0].Chk6 = false; }
                                if (dtt.Rows[0]["col20"].ToString() == "Y") { model[0].Chk1 = true; }
                                if (dtt.Rows[0]["col20"].ToString() == "N") { model[0].Chk1 = false; }
                                if (dtt.Rows[0]["col21"].ToString() == "Y") { model[0].Chk2 = true; }
                                if (dtt.Rows[0]["col21"].ToString() == "N") { model[0].Chk2 = false; }
                                if (dtt.Rows[0]["col25"].ToString() == "Y") { model[0].Chk3 = true; }
                                if (dtt.Rows[0]["col25"].ToString() == "N") { model[0].Chk3 = false; }
                                if (dtt.Rows[0]["col29"].ToString() == "Y") { model[0].Chk4 = true; }
                                if (dtt.Rows[0]["col29"].ToString() == "N") { model[0].Chk4 = false; }
                                if (dtt.Rows[0]["col30"].ToString() == "Y") { model[0].Chk7 = true; }
                                if (dtt.Rows[0]["col30"].ToString() == "N") { model[0].Chk7 = false; }
                                if (dtt.Rows[0]["col31"].ToString() == "Y") { model[0].Chk8 = true; }
                                if (dtt.Rows[0]["col31"].ToString() == "N") { model[0].Chk8 = false; }
                                if (dtt.Rows[0]["col32"].ToString() == "Y") { model[0].Chk9 = true; }
                                if (dtt.Rows[0]["col32"].ToString() == "N") { model[0].Chk9 = false; }
                                if (dtt.Rows[0]["col33"].ToString() == "Y") { model[0].Chk10 = true; }
                                if (dtt.Rows[0]["col33"].ToString() == "N") { model[0].Chk10 = false; }
                                if (dtt.Rows[0]["col34"].ToString() == "Y") { model[0].Chk11 = true; }
                                if (dtt.Rows[0]["col34"].ToString() == "N") { model[0].Chk11 = false; }
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col5 = dtt.Rows[0]["edit_by"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col11"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col12"].ToString()).Distinct()).Split(',');
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col13"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col14"].ToString()).Distinct()).Split(',');
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col15"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].SelectedItems9 = L9;
                                if (btnval == "EDIT")
                                {
                                    if (dtt.Rows.Count > 0)
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "Y");
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "disabled='disabled'";
                                        ViewBag.vsave = "";
                                        model[0].Col13 = "Update";
                                        ViewBag.scripCall = "enableForm();";
                                    }
                                }
                                if (btnval == "DETAIL")
                                {
                                    if (dtt.Rows.Count > 0)
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "N");
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "";
                                        ViewBag.vsave = "disabled='disabled'";
                                        model[0].Col13 = "Save";
                                        ViewBag.scripCall = "disableForm();";
                                    }
                                }
                            }
                            break;
                        case "PSF":
                            mq = "select master_name as Payslip from master_setting where (client_id||master_id||to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col20 = dtt.Rows[0]["Payslip"].ToString();
                            }
                            break;
                        case "UNITS":
                            mq = "select u.cup_id,u.company_profile_id,u.unit_name,sr.col1,sr.col2,sr.col3,sr.col4,sr.col7,sr.col8,sr.col9,sr.col10,sr.col11," +
                                     "sr.col12,sr.col13,sr.col14,sr.col15,sr.col18,sr.col19,sr.col20,sr.col21,sr.col25,sr.col28,sr.col29,sr.col30,sr.col31,sr.col32,sr.col33,sr.col34," +
                                    "sr.col36,sr.client_id,sr.client_unit_id,sr.ent_by,sr.ent_date,sr.vch_num,sr.vch_date " +
                                         "from company_unit_profile u inner join vehicle_master sr on sr.client_id=u.Company_profile_id and sr.client_unit_id=u.CUP_Id and sr.type='KCR' " +
                                         "where (u.cup_id||u.company_profile_id||to_char(u.vch_date,'yyyymmdd'))= '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col17 = dtt.Rows[0]["unit_name"].ToString();
                                #region Dropdwon All hard code
                                mod1.Add(new SelectListItem { Text = "CTC Based", Value = "CTC Based" });
                                mod1.Add(new SelectListItem { Text = "Adhoc", Value = "Adhoc" });
                                mod1.Add(new SelectListItem { Text = "Gross", Value = "Gross" });
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                mod2.Add(new SelectListItem { Text = "Standard", Value = "Standard" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                mod3.Add(new SelectListItem { Text = "30 days", Value = "30 days" });
                                mod3.Add(new SelectListItem { Text = "31 days", Value = "31 days" });
                                mod3.Add(new SelectListItem { Text = "Actual days in a month", Value = "Actual days in a month" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                mod4.Add(new SelectListItem { Text = "Both", Value = "Both" });
                                mod4.Add(new SelectListItem { Text = "Set off against leave", Value = "Set off against leave" });
                                mod4.Add(new SelectListItem { Text = "Payout", Value = "Payout" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                #region 5 dropdwon
                                mod5.Add(new SelectListItem { Text = "1", Value = "1" });
                                mod5.Add(new SelectListItem { Text = "2", Value = "2" });
                                mod5.Add(new SelectListItem { Text = "3", Value = "3" });
                                mod5.Add(new SelectListItem { Text = "4", Value = "4" });
                                mod5.Add(new SelectListItem { Text = "5", Value = "5" });
                                mod5.Add(new SelectListItem { Text = "6", Value = "6" });
                                mod5.Add(new SelectListItem { Text = "7", Value = "7" });
                                mod5.Add(new SelectListItem { Text = "8", Value = "8" });
                                mod5.Add(new SelectListItem { Text = "9", Value = "9" });
                                mod5.Add(new SelectListItem { Text = "10", Value = "10" });
                                mod5.Add(new SelectListItem { Text = "11", Value = "11" });
                                mod5.Add(new SelectListItem { Text = "12", Value = "12" });
                                mod5.Add(new SelectListItem { Text = "13", Value = "13" });
                                mod5.Add(new SelectListItem { Text = "14", Value = "14" });
                                mod5.Add(new SelectListItem { Text = "15", Value = "15" });
                                mod5.Add(new SelectListItem { Text = "16", Value = "16" });
                                mod5.Add(new SelectListItem { Text = "17", Value = "17" });
                                mod5.Add(new SelectListItem { Text = "18", Value = "18" });
                                mod5.Add(new SelectListItem { Text = "19", Value = "19" });
                                mod5.Add(new SelectListItem { Text = "20", Value = "20" });
                                mod5.Add(new SelectListItem { Text = "21", Value = "21" });
                                mod5.Add(new SelectListItem { Text = "22", Value = "22" });
                                mod5.Add(new SelectListItem { Text = "23", Value = "23" });
                                mod5.Add(new SelectListItem { Text = "24", Value = "24" });
                                mod5.Add(new SelectListItem { Text = "25", Value = "25" });
                                mod5.Add(new SelectListItem { Text = "26", Value = "26" });
                                mod5.Add(new SelectListItem { Text = "27", Value = "27" });
                                mod5.Add(new SelectListItem { Text = "28", Value = "28" });
                                mod5.Add(new SelectListItem { Text = "29", Value = "29" });
                                mod5.Add(new SelectListItem { Text = "30", Value = "30" });
                                mod5.Add(new SelectListItem { Text = "31", Value = "31" });
                                #endregion
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                mod6.Add(new SelectListItem { Text = "Attendance and Payroll", Value = "Attendance and Payroll" });
                                mod6.Add(new SelectListItem { Text = "Attendance only", Value = " Attendance only" });
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                #region 7 dropdwon
                                mod7.Add(new SelectListItem { Text = "1", Value = "1" });
                                mod7.Add(new SelectListItem { Text = "2", Value = "2" });
                                mod7.Add(new SelectListItem { Text = "3", Value = "3" });
                                mod7.Add(new SelectListItem { Text = "4", Value = "4" });
                                mod7.Add(new SelectListItem { Text = "5", Value = "5" });
                                mod7.Add(new SelectListItem { Text = "6", Value = "6" });
                                mod7.Add(new SelectListItem { Text = "7", Value = "7" });
                                mod7.Add(new SelectListItem { Text = "8", Value = "8" });
                                mod7.Add(new SelectListItem { Text = "9", Value = "9" });
                                mod7.Add(new SelectListItem { Text = "10", Value = "10" });
                                mod7.Add(new SelectListItem { Text = "11", Value = "11" });
                                mod7.Add(new SelectListItem { Text = "12", Value = "12" });
                                mod7.Add(new SelectListItem { Text = "13", Value = "13" });
                                mod7.Add(new SelectListItem { Text = "14", Value = "14" });
                                mod7.Add(new SelectListItem { Text = "15", Value = "15" });
                                mod7.Add(new SelectListItem { Text = "16", Value = "16" });
                                mod7.Add(new SelectListItem { Text = "17", Value = "17" });
                                mod7.Add(new SelectListItem { Text = "18", Value = "18" });
                                mod7.Add(new SelectListItem { Text = "19", Value = "19" });
                                mod7.Add(new SelectListItem { Text = "20", Value = "20" });
                                mod7.Add(new SelectListItem { Text = "21", Value = "21" });
                                mod7.Add(new SelectListItem { Text = "22", Value = "22" });
                                mod7.Add(new SelectListItem { Text = "23", Value = "23" });
                                mod7.Add(new SelectListItem { Text = "24", Value = "24" });
                                mod7.Add(new SelectListItem { Text = "25", Value = "25" });
                                mod7.Add(new SelectListItem { Text = "26", Value = "26" });
                                mod7.Add(new SelectListItem { Text = "27", Value = "27" });
                                mod7.Add(new SelectListItem { Text = "28", Value = "28" });
                                mod7.Add(new SelectListItem { Text = "29", Value = "29" });
                                mod7.Add(new SelectListItem { Text = "30", Value = "30" });
                                mod7.Add(new SelectListItem { Text = "31", Value = "31" });
                                #endregion
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                mod8.Add(new SelectListItem { Text = "Dont Send Email", Value = "Dont Send Email" });
                                mod8.Add(new SelectListItem { Text = "Common Email", Value = "Common Email" });
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                                mod9.Add(new SelectListItem { Text = "Month", Value = "Month" });
                                mod9.Add(new SelectListItem { Text = "Date", Value = "Date" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                                #endregion









                                model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col3"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col36"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col7"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col9"].ToString();
                                if (dtt.Rows[0]["col18"].ToString() == "Y") { model[0].Chk5 = true; }
                                if (dtt.Rows[0]["col18"].ToString() == "N") { model[0].Chk5 = false; }
                                if (dtt.Rows[0]["col19"].ToString() == "Y") { model[0].Chk6 = true; }
                                if (dtt.Rows[0]["col19"].ToString() == "N") { model[0].Chk6 = false; }
                                if (dtt.Rows[0]["col20"].ToString() == "Y") { model[0].Chk1 = true; }
                                if (dtt.Rows[0]["col20"].ToString() == "N") { model[0].Chk1 = false; }
                                if (dtt.Rows[0]["col21"].ToString() == "Y") { model[0].Chk2 = true; }
                                if (dtt.Rows[0]["col21"].ToString() == "N") { model[0].Chk2 = false; }
                                if (dtt.Rows[0]["col25"].ToString() == "Y") { model[0].Chk3 = true; }
                                if (dtt.Rows[0]["col25"].ToString() == "N") { model[0].Chk3 = false; }
                                if (dtt.Rows[0]["col29"].ToString() == "Y") { model[0].Chk4 = true; }
                                if (dtt.Rows[0]["col29"].ToString() == "N") { model[0].Chk4 = false; }
                                if (dtt.Rows[0]["col30"].ToString() == "Y") { model[0].Chk7 = true; }
                                if (dtt.Rows[0]["col30"].ToString() == "N") { model[0].Chk7 = false; }
                                if (dtt.Rows[0]["col31"].ToString() == "Y") { model[0].Chk8 = true; }
                                if (dtt.Rows[0]["col31"].ToString() == "N") { model[0].Chk8 = false; }
                                if (dtt.Rows[0]["col32"].ToString() == "Y") { model[0].Chk9 = true; }
                                if (dtt.Rows[0]["col32"].ToString() == "N") { model[0].Chk9 = false; }
                                if (dtt.Rows[0]["col33"].ToString() == "Y") { model[0].Chk10 = true; }
                                if (dtt.Rows[0]["col33"].ToString() == "N") { model[0].Chk10 = false; }
                                if (dtt.Rows[0]["col34"].ToString() == "Y") { model[0].Chk11 = true; }
                                if (dtt.Rows[0]["col34"].ToString() == "N") { model[0].Chk11 = false; }
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col11"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col12"].ToString()).Distinct()).Split(',');
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col13"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col14"].ToString()).Distinct()).Split(',');
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col15"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].SelectedItems9 = L9;
                            }
                            break;
                    }
                    break;
                #endregion
                #region holiday_type
                case "holiday_type":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            if (mid_mst.Trim().Equals("9002.6"))
                            {
                                mq = "select edit_by,col1,col2,col3,col4,col5,col6,col7,ent_by,rec_id,ent_date,vch_num,client_id,client_unit_id from " + model[0].Col10 + " " +
                                "where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            }
                            else if (mid_mst.Trim().Equals("9002.7"))
                            {
                                mq = "select edit_by,vch_num,rec_id,col1,col2,col3,col4,to_char(convert_tz(date1, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')date1," +
                                "to_char(convert_tz(date2, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') date2,ent_by,ent_date,vch_num,client_id,client_unit_id" +
                                " from " + model[0].Col10 + " where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            }
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region Leave Year 
                                DataTable dt1 = new DataTable();
                                mq = "select academic_year_id, (to_char(convert_tz(From_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')||' - '||" +
                                    "to_char(convert_tz( To_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')) as leaveyr from add_academic_year where type='LYR'" +
                                    "and client_id='" + clientid_mst + "' ";
                                dt1 = sgen.getdata(userCode, mq);
                                if (dt1.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt1.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["leaveyr"].ToString(), Value = dr["academic_year_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                #endregion
                                #region Branch/Location
                                DataTable dt2 = new DataTable();
                                mq = "select vch_num,col2 from vehicle_master where type='LOM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                                dt2 = sgen.getdata(userCode, mq);
                                if (dt2.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt2.Rows)
                                    {
                                        mod2.Add(new SelectListItem { Text = dr["col2"].ToString(), Value = dr["vch_num"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                #endregion
                                #region Dropdwon hard code
                                mod3.Add(new SelectListItem { Text = "Sunday", Value = "001" });
                                mod3.Add(new SelectListItem { Text = "Monday", Value = "002" });
                                mod3.Add(new SelectListItem { Text = "Tuesday", Value = "003" });
                                mod3.Add(new SelectListItem { Text = "Wednesday", Value = "004" });
                                mod3.Add(new SelectListItem { Text = "Thursday", Value = "005" });
                                mod3.Add(new SelectListItem { Text = "Friday", Value = "006" });
                                mod3.Add(new SelectListItem { Text = "Saturday", Value = "007" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                #endregion
                                model[0].Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                if (model[0].Col14 == "9002.6")
                                {
                                    string[] chks = dtt.Rows[0]["col5"].ToString().Split(',');
                                    foreach (var chk in chks)
                                    {
                                        if (chk == "1")
                                        {
                                            model[0].Chk1 = true;
                                        }
                                        if (chk == "2")
                                        {
                                            model[0].Chk2 = true;
                                        }
                                        if (chk == "3")
                                        {
                                            model[0].Chk3 = true;
                                        }
                                        if (chk == "4")
                                        {
                                            model[0].Chk4 = true;
                                        }
                                        if (chk == "5")
                                        {
                                            model[0].Chk5 = true;
                                        }
                                    }
                                    if ((model[0].Chk6 = dtt.Rows[0]["col6"].ToString() == "Y"))
                                    {
                                        model[0].Chk6 = true;
                                    }
                                    if ((model[0].Chk7 = dtt.Rows[0]["col7"].ToString() == "Y"))
                                    {
                                        model[0].Chk7 = true;
                                    }
                                }
                                if (model[0].Col14 == "9002.7")
                                {
                                    model[0].Col18 = dtt.Rows[0]["date2"].ToString();
                                    model[0].Col19 = dtt.Rows[0]["col3"].ToString();
                                    model[0].Col17 = dtt.Rows[0]["date1"].ToString();
                                    if ((model[0].Chk8 = dtt.Rows[0]["col4"].ToString() == "Y"))
                                    {
                                        model[0].Chk8 = true;
                                    }
                                }
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col5 = dtt.Rows[0]["edit_by"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                            }
                            break;
                    }
                    break;
                #endregion
                #region ot_config
                case "ot_config":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select Group_concat(a.col1) as col1,a.client_unit_id,a.client_id,a.edit_by,a.col2,a.col3,a.col4,a.col5,a.col6,a.ent_by,a.ent_Date,a.vch_date,a.vch_num" +
                                    " from " + model[0].Col10 + " a where (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type)='" + URL + "'" +
                                    "group by a.client_unit_id,a.client_id,a.edit_by,a.col2,a.col3,a.col4,a.col5,a.col6,a.ent_by,a.ent_Date,a.vch_date,a.vch_num";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region OT Earning Head
                                DataTable dt2 = sgen.getdata(userCode, "SELECT vch_num,col1 as Earning_head FROM vehicle_master WHERE  type='KSP'" +
                                      " and client_id='" + clientid_mst + "'  and col10='Earning' and cur_state<>'0'");
                                if (dt2.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt2.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["Earning_head"].ToString(), Value = dr["vch_num"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                #endregion
                                #region month
                                DataTable dt1 = new DataTable();
                                dt1 = sgen.BindMonthlyDay(userCode);
                                if (dt1.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt1.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["Mday"].ToString(), Value = dr["id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                #endregion
                                #region OT Multiply
                                mod2.Add(new SelectListItem { Text = "Single", Value = "100" });
                                mod2.Add(new SelectListItem { Text = "Double", Value = "200" });
                                mod2.Add(new SelectListItem { Text = "None", Value = "0" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                #endregion
                                mod4.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                                mod4.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                                mod4.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;




                                model[0].Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col4"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col6"].ToString();
                                // model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col5 = dtt.Rows[0]["edit_by"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems3 = L3;
                                model[0].Col13 = "Update";
                            }
                            break;
                        case "UNITS":
                            mq = "select u.cup_id,u.company_profile_id,u.unit_name,Group_concat(oc.col1) as col1,oc.col2,oc.col3,oc.col4,oc.col5,oc.col6,oc.ent_by,oc.ent_Date," +
                                    "oc.vch_date,oc.vch_num from company_unit_profile u inner join enx_tab oc on oc.client_id = u.Company_profile_id and oc.client_unit_id = u.CUP_Id " +
                                    "and oc.type = 'OTC' where(u.cup_id || u.company_profile_id || to_char(u.vch_date, 'yyyymmdd')) = '" + URL + "' group by u.cup_id," +
                                    "u.company_profile_id,u.unit_name,oc.col2,oc.col3,oc.col4,oc.col5,oc.col6,oc.ent_by,oc.ent_Date,oc.vch_date,oc.vch_num";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                #region OT Earning Head
                                DataTable dt2 = sgen.getdata(userCode, "SELECT vch_num,col1 as Earning_head FROM vehicle_master WHERE  type='KSP'" +
                                      " and client_id='" + clientid_mst + "'  and col10='Earning' and cur_state<>'0'");
                                if (dt2.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt2.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["Earning_head"].ToString(), Value = dr["vch_num"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                #endregion
                                #region month
                                DataTable dt1 = new DataTable();
                                dt1 = sgen.BindMonthlyDay(userCode);
                                if (dt1.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt1.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["Mday"].ToString(), Value = dr["id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                #endregion
                                #region OT Multiply
                                mod2.Add(new SelectListItem { Text = "Single", Value = "100" });
                                mod2.Add(new SelectListItem { Text = "Double", Value = "200" });
                                mod2.Add(new SelectListItem { Text = "None", Value = "0" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                #endregion
                                mod4.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                                mod4.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                                mod4.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;




                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["unit_name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col4"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col6"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col5 = dtt.Rows[0]["edit_by"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems3 = L3;
                            }
                            break;
                    }
                    break;
                #endregion
                #region salary_advance
                case "salary_advance":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select edit_by,col1,col2,col3,col4,col5,group_concat(distinct col6) col6,col7,to_char(convert_tz(date1, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') date1," +
                                "ent_by,ent_date,vch_num,client_id,client_unit_id from " + model[0].Col10 + " where (client_id||client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "' " +
                                "group by col1,col2,col3,col4,col5,col7,ent_by,ent_date,vch_num,edit_by,date1,client_id,client_unit_id";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region UNIT
                                DataTable dtu = new DataTable();
                                mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                                if (!role_mst.ToUpper().Equals("OWNER")) cond = "where cup_id in ('" + mq1.Replace(",", "','") + "')";
                                mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as name FROM company_unit_profile " + cond + "";
                                dtu = sgen.getdata(userCode, mq);
                                if (dtu.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtu.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["cup_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                #endregion
                                #region Dropdwon Pay Group
                                mod2.Add(new SelectListItem { Text = "1", Value = "1" });
                                mod2.Add(new SelectListItem { Text = "2", Value = "2" });
                                mod2.Add(new SelectListItem { Text = "3", Value = "3" });
                                mod2.Add(new SelectListItem { Text = "4", Value = "4" });
                                mod2.Add(new SelectListItem { Text = "5", Value = "5" });
                                mod2.Add(new SelectListItem { Text = "6", Value = "6" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                #endregion
                                #region Pay Component
                                dt = new DataTable();
                                mq = "select col1,vch_num from vehicle_master where type='KSP' and client_id='" + clientid_mst + "' " +
                                    " and col21='Y'";
                                dt = sgen.getdata(userCode, mq);
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["col1"].ToString(), Value = dr["vch_num"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                #endregion
                                #region Allow Exception
                                mod4.Add(new SelectListItem { Text = "No", Value = "No" });
                                mod4.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                #endregion




                                model[0].Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["col1"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                model[0].Col19 = dtt.Rows[0]["Date1"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col3"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col4"].ToString();
                                model[0].Col5 = dtt.Rows[0]["edit_by"].ToString();
                                //  model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col6"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                //string paycomponent = "";
                                //for (Int32 i = 0; i < dtt.Rows.Count; i++)
                                //{
                                //    if (paycomponent.Equals("")) paycomponent = dtt.Rows[i]["col6"].ToString();
                                //    else paycomponent = paycomponent + "," + dtt.Rows[i]["col6"].ToString();
                                //}
                                //String[] L3 = new string[] { paycomponent };
                                //model[0].SelectedItems3 = L3;
                                model[0].Col13 = "Update";
                            }
                            break;
                    }
                    break;
                #endregion
                #region location_master
                case "location_master":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = @"select (vm.client_id||vm.client_unit_id||vm.vch_num|| to_char(vm.vch_date, 'yyyymmdd')||vm.type) as fstr,vm.rec_id,vm.col39,vm.col1,vm.col2,vm.col3 ,vm.col4,
                             vm.col7,vm.col8,vm.col9,to_char(convert_tz(vm.date1, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as date1,vm.col10,vm.col11,vm.col12,vm.vch_num,vm.client_id," +
                             "vm.client_unit_id,vm.ent_by,vm.ent_date,vm.edit_by from vehicle_master vm where vm.type = '" + model[0].Col12 + "' and (vm.client_id|| vm.client_unit_id|| vm.vch_num|| to_char(vm.vch_date, 'yyyymmdd')||vm.type)= '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region State
                                DataTable dt3 = new DataTable();
                                dt3 = sgen.getdata(userCode, "select distinct state_name,state_gst_code from country_state where state_name!='-' order by state_name");
                                if (dt3.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt3.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["state_name"].ToString(), Value = dr["state_gst_code"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                #endregion
                                #region city_name
                                dt = sgen.getdata(userCode, "SELECT city_name FROM (SELECT city_name FROM country_state where state_gst_code='" + dtt.Rows[0]["col1"].ToString().Trim() + "' group BY city_name) tab union " +
                       "SELECT 'Other' city_name from dual");
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod2.Add(new SelectListItem { Text = dr["city_name"].ToString(), Value = dr["city_name"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                #endregion
                                #region Metro
                                mod3.Add(new SelectListItem { Text = "Yes", Value = "Y" });
                                mod3.Add(new SelectListItem { Text = "No", Value = "N" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                #endregion
                                #region ESI Type
                                mod4.Add(new SelectListItem { Text = "Standard Contribution", Value = "S" });
                                mod4.Add(new SelectListItem { Text = "Reduced Contribution ", Value = "R" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                #endregion
                                #region Active
                                mod5.Add(new SelectListItem { Text = "Yes", Value = "Y" });
                                mod5.Add(new SelectListItem { Text = "No", Value = "N" });
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                #endregion





                                model[0].Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["col39"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col4"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col7"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col8"].ToString();
                                model[0].Col21 = dtt.Rows[0]["date1"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col11"].ToString();
                                model[0].Col23 = dtt.Rows[0]["col12"].ToString();
                                model[0].Col5 = dtt.Rows[0]["edit_by"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems5 = L5;
                                model[0].Col13 = "Update";
                            }
                            break;
                    }
                    break;
                #endregion
                #region canteen_config
                case "canteen_config":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select rec_id,col1 rate,vch_num,client_id,ent_by,ent_date,client_unit_id from " + model[0].Col10 + " where (client_id||client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                                model[0].Col9 = tm.Col9;
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                model[0].Col18 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col19 = dtt.Rows[0]["rate"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region salary_rate
                case "salary_rate":
                    dtt = (DataTable)sgen.GetSession(MyGuid, "KESDT");
                    if (dtt.Rows.Count > 0)
                    {
                        dtt = dtt.Select("Sno in ('" + URL + "')").CopyToDataTable();
                        dtt.Columns.Add("Total (000000)");
                        dtt.AcceptChanges();
                        model[0].dt1 = dtt;
                    }
                    break;
                #endregion
                #region create_team
                case "create_team":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select col1,col2,col3,vch_num,rec_id,client_id,client_unit_id,ent_by,ent_date " +
                          "from enx_tab where (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                            DataTable dtval = sgen.getdata(userCode, mq);
                            if (dtval.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                mod1 = new List<SelectListItem>();
                                mod2 = new List<SelectListItem>();
                                mod1 = cmd_Fun.username(userCode);
                                mod2 = cmd_Fun.username(userCode);
                                model[0].Col7 = dtval.Rows[0]["rec_id"].ToString().Trim();
                                model[0].Col16 = dtval.Rows[0]["vch_num"].ToString().Trim();
                                model[0].Col1 = dtval.Rows[0]["client_id"].ToString().Trim();
                                model[0].Col2 = dtval.Rows[0]["client_unit_id"].ToString().Trim();
                                model[0].Col3 = dtval.Rows[0]["ent_by"].ToString().Trim();
                                model[0].Col4 = dtval.Rows[0]["ent_date"].ToString().Trim();
                                model[0].Col8 = "(client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                                model[0].Col17 = dtval.Rows[0]["col1"].ToString().Trim();
                                String[] L1 = System.String.Join(",", dtval.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtval.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;


                                model[0].Col10 = tm.Col10;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                            }
                            break;
                    }
                    break;
                #endregion
                #region daily_work
                case "daily_work":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select cp.c_name,cp.cpname,(cs.country_name||' '||s.state_name||' '||cp.cpaddr) as address" +
                       ",cpcont mob,CPLANDNO land,cpaltcont alt,a.col1, a.col7,a.col8, a.col1 as menu_id,a.col2 as menu_name,a.col3 as m_link" +
                                ",a.col4 as m_id,a.col5 as m_name,a.col6,a.vch_num,a.rec_id,a.client_id,a.client_unit_id,a.ent_by," +
                        "to_char(convert_tz(a.date1,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as work_date," +
                        "to_char(convert_tz(a.vch_date,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date,a.ent_date " +
                        "from enx_tab a left join clients_mst cp on a.col7=cp.vch_num  left join (select distinct alpha_2,country_name from country_state) cs " +
                        " on cp.country = cs.alpha_2 left join(select distinct state_gst_code, state_name from country_state ) s  " +
                        "on cp.state = s.state_gst_code  where (a.client_id||a.client_unit_id||a.vch_num|| to_char(a.vch_date, 'yyyymmdd')||a.type)='" + URL + "'";
                            DataTable dtval = sgen.getdata(userCode, mq);
                            if (dtval.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "perdt", dtval);
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                mod1 = new List<SelectListItem>();
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.natwrk(userCode, unitid_mst);
                                model[0].Col7 = dtval.Rows[0]["rec_id"].ToString().Trim();
                                model[0].Col16 = dtval.Rows[0]["vch_num"].ToString().Trim();
                                model[0].Col1 = dtval.Rows[0]["client_id"].ToString().Trim();
                                model[0].Col2 = dtval.Rows[0]["client_unit_id"].ToString().Trim();
                                model[0].Col3 = dtval.Rows[0]["ent_by"].ToString().Trim();
                                model[0].Col4 = dtval.Rows[0]["ent_date"].ToString().Trim();
                                model[0].Col8 = "(client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type)='" + URL + "'";
                                String[] L1 = System.String.Join(",", dtval.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                string menuname = "", modname = "";
                                for (int p = 0; p < dtval.Rows.Count; p++)
                                {
                                    if (menuname.Equals("")) menuname = dtval.Rows[p]["menu_name"].ToString().Trim();
                                    else menuname = menuname + "," + dtval.Rows[p]["menu_name"].ToString().Trim();
                                    if (modname.Equals("")) modname = dtval.Rows[p]["m_name"].ToString().Trim();
                                    else modname = modname + "," + dtval.Rows[p]["m_name"].ToString().Trim();
                                }
                                model[0].Col22 = menuname.TrimEnd(',');
                                model[0].Col23 = modname.TrimEnd(',');
                                model[0].Col25 = dtval.Rows[0]["col6"].ToString();
                                model[0].Col24 = dtval.Rows[0]["work_date"].ToString();
                                model[0].Col17 = dtval.Rows[0]["vch_date"].ToString();
                                model[0].Col26 = dtval.Rows[0]["col7"].ToString();

                                model[0].SelectedItems1 = L1;

                                model[0].Col10 = tm.Col10;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col21 = dtval.Rows[0]["mob"].ToString();
                                model[0].Col19 = dtval.Rows[0]["address"].ToString();
                                model[0].Col20 = dtval.Rows[0]["cpname"].ToString();
                                model[0].Col18 = dtval.Rows[0]["c_name"].ToString();
                            }
                            break;
                        case "MENUS":
                            mq = "select a.m_id as menu_id,a.m_name as menu_name,a.m_link,nvl(b.m_name,'Common') as m_name,nvl(b.m_id,'0') as m_id " +
                      "from menus a left outer join menus b on a.m_module3 = b.m_module2 and b.m_level='1' where a.rec_id in ('" + URL + "')";
                            dtval = sgen.getdata(userCode, mq);
                            if (dtval.Rows.Count > 0)
                            {
                                string menuname = "", modname = "";
                                sgen.SetSession(MyGuid, "perdt", dtval);
                                foreach (DataRow dr in dtval.Rows)
                                {
                                    menuname = menuname + dr[1].ToString() + ",";
                                    modname = modname + dr[3].ToString() + ",";
                                }
                                model[0].Col22 = menuname.TrimEnd(',');
                                model[0].Col23 = modname.TrimEnd(',');
                            }
                            break;
                        case "CLIENT":
                            mq = "select cp.vch_num,cp.c_name,cp.cpname,(cs.country_name||' '||s.state_name||' '||cp.cpaddr) as address" +
                       ",cpcont mob,CPLANDNO land,cpaltcont alt from clients_mst cp " +
                              " left join (select distinct alpha_2,country_name from country_state) cs " +
                              "on cp.country = cs.alpha_2 left join(select distinct state_gst_code, state_name from country_state ) s " +
                              "on cp.state = s.state_gst_code " +
                              "where cp.client_id|| cp.client_unit_id|| cp.vch_num|| to_char(cp.vch_date, 'yyyymmdd')||cp.type= '" + URL + "'";
                            dtval = sgen.getdata(userCode, mq);
                            if (dtval.Rows.Count > 0)
                            {
                                model[0].Col21 = dtval.Rows[0]["mob"].ToString();
                                model[0].Col19 = dtval.Rows[0]["address"].ToString();
                                model[0].Col20 = dtval.Rows[0]["cpname"].ToString();
                                model[0].Col18 = dtval.Rows[0]["c_name"].ToString();
                                model[0].Col26 = dtval.Rows[0]["vch_num"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region Contractor Salary
                case "cont_salary":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select a.*,i.iname,b.c_name as vname ,to_char(convert_tz(a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') vch_date1" +
                                ",to_char(convert_tz(date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') eff_from," +
                                "to_char(convert_tz(date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') eff_to,i.cpartno as partno" +
                                " ,(s.state_name|| ',' ||cs.country_name ||  ','||b.addr || ',' || b.pincode) as Full_Address" +
                                " from ivendor a inner join item i on a.icode=i.icode  and i.type='IT'" +
                               " and a.client_unit_id=i.client_unit_id inner join clients_mst b on a.acode=b.vch_num and b.type='PVD' and a.client_unit_id=b.client_unit_id" +
                               " left join (select distinct alpha_2,country_name from country_state) cs on b.country = cs.alpha_2 left join" +
                               "(select distinct state_gst_code, state_name from country_state ) s on b.state = s.state_gst_code  where" +
                               " (a.client_id||a.client_unit_id||a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type)='" + URL + "'";
                            mq = "select '-' as fstr,a.*,to_char(convert_tz(a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') vch_date1" +
                                 ",b.acode,b.Full_Address,b.aname,c.emp_code,c.first_name as EMP_NAME,c.f_name from kc_tab a inner join (select a.client_id,a.client_unit_id,a.c_name as aname, a.vch_num as acode ," +
                                 "(s.state_name|| ',' ||cs.country_name ||  ','||a.addr || ',' || a.pincode) as Full_Address from" +
                                 " clients_mst a left join (select distinct alpha_2,country_name from country_state) cs on a.country = cs.alpha_2 left join" +
                                 "(select distinct state_gst_code, state_name from country_state ) s on a.state = s.state_gst_code) b " +
                                 " on a.col18=b.acode and a.client_id=b.client_id and a.client_unit_id=b.client_unit_id " +
                                 "left join emp_master c on a.col1=c.emp_code and a.client_id=c.client_id and a.client_unit_id=c.client_unit_id " +
                                 "  WHERE (a.client_id||a.client_unit_id||a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type)='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col12 = dt.Rows[0]["type"].ToString();
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dt.Rows[0]["vch_date1"].ToString();
                                model[0].Col8 = "(client_id||client_unit_id||vch_num|| to_char(vch_date,'yyyymmdd')||type) = '" + URL + "'";
                                model[0].Col13 = "Update";
                                model[0].SelectedItems1 = new string[] { dt.Rows[0]["col10"].ToString() };
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);

                                model[0].Col21 = dt.Rows[0]["col11"].ToString();
                                model[0].Col31 = dt.Rows[0]["col12"].ToString();
                                model[0].Col32 = dt.Rows[0]["col13"].ToString();
                                model[0].Col33 = dt.Rows[0]["col14"].ToString();
                                model[0].Col34 = dt.Rows[0]["col15"].ToString();
                                model[0].Col35 = dt.Rows[0]["col16"].ToString();
                                model[0].Col36 = dt.Rows[0]["col17"].ToString();
                                model[0].Col37 = dt.Rows[0]["col19"].ToString();
                                model[0].Col18 = dt.Rows[0]["ANAME"].ToString();
                                model[0].Col21 = dt.Rows[0]["col18"].ToString();
                                model[0].Col22 = dt.Rows[0]["Full_Address"].ToString();
                                //model[0].dt1 = new DataTable();
                                //model[0].dt1 = ((DataTable)Session["RVA_DT"]).Clone();
                                //for (int i = 0; i < dt.Rows.Count; i++)
                                //{
                                //    DataRow dr = model[0].dt1.NewRow();
                                //    dr["Item"] = dt.Rows[i]["fstr"].ToString();
                                //    dr["SNo"] = i + 1;
                                //    dr["EMP_CODE"] = dt.Rows[i]["col1"].ToString();
                                //    dr["EMP_NAME"] = dt.Rows[i]["EMP_NAME"].ToString();
                                //    dr["F_NAME"] = dt.Rows[i]["F_NAME"].ToString();
                                //    dr["W_HOURS"] = dt.Rows[i]["col2"].ToString();
                                //    dr["RATE_PER_HR"] = dt.Rows[i]["col3"].ToString();
                                //    dr["AMOUNT"] = dt.Rows[i]["col4"].ToString();
                                //    model[0].dt1.Rows.Add(dr);
                                //}
                                //model[0].dt1.AcceptChanges();
                            }
                            break;
                        case "PARTY":
                            mq = "select a.c_name as name,a.c_gstin as gstin,a.addr as Address,a.vch_num,a.tor ," +
                                "(s.state_name|| ',' ||cs.country_name ||  ','||a.addr || ',' || a.pincode) as Full_Address from" +
                                " clients_mst a left join (select distinct alpha_2,country_name from country_state) cs on a.country = cs.alpha_2 left join" +
                                "(select distinct state_gst_code, state_name from country_state ) s on a.state = s.state_gst_code " +
                                " where (a.client_id || a.client_unit_id || a.vch_num || " +
                                "to_char(a.vch_date, 'yyyymmdd') || a.type) = '" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col18 = dt.Rows[0]["name"].ToString();
                                model[0].Col21 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col22 = dt.Rows[0]["Full_Address"].ToString();
                            }
                            break;
                        case "ITEM":
                            mq = "select '-' fstr, emp_code,first_name  as EMP_NAME,f_name from emp_master" +
                                " where vch_num||type||client_id||client_unit_id in ('" + URL + "')";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                if (model[0].dt1.Rows[0]["EMP_CODE"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["Item"] = dt.Rows[i]["fstr"].ToString();
                                    dr["SNo"] = i + 1;
                                    dr["EMP_CODE"] = dt.Rows[i]["EMP_CODE"].ToString();
                                    dr["EMP_NAME"] = dt.Rows[i]["EMP_NAME"].ToString();
                                    dr["F_NAME"] = dt.Rows[i]["F_NAME"].ToString();
                                    dr["W_HOURS"] = "";
                                    dr["RATE_PER_HR"] = "";
                                    dr["AMOUNT"] = "";
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            break;
                    }
                    break;
                #endregion
                #region Bonus Calc
                case "bonus_calc":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select (em.vch_num||em.type||em.client_id||em.client_unit_id) fstr,a.client_id,a.client_unit_id,a.ent_by,a.ent_date,a.type,a.vch_num," +
                                "to_char(convert_tz(a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') vch_date," +
                                "to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') fdt," +
                                "to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') tdt," +
                                "em.emp_code,em.first_name name,em.f_name,a.col2 rate,a.col3 pdays,a.col4 amt " +
                                "from kc_tab a " +
                                "inner join emp_master em on em.vch_num=a.col1 and em.type='EMP' and em.client_id=a.client_id and em.client_unit_id=a.client_unit_id " +
                                "WHERE (a.client_id||a.client_unit_id||a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type)='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col8 = "(client_id||client_unit_id||vch_num|| to_char(vch_date,'yyyymmdd')||type) = '" + URL + "'";
                                model[0].Col12 = dt.Rows[0]["type"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dt.Rows[0]["vch_date"].ToString();
                                model[0].Col18 = dt.Rows[0]["fdt"].ToString();
                                model[0].Col19 = dt.Rows[0]["tdt"].ToString();
                                model[0].dt1 = new DataTable();
                                model[0].dt1 = ((DataTable)sgen.GetSession(MyGuid, "RVA_DT")).Clone();
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["Item"] = dt.Rows[i]["fstr"].ToString();
                                    dr["SNo"] = i + 1;
                                    dr["EMP_CODE"] = dt.Rows[i]["emp_code"].ToString();
                                    dr["EMP_NAME"] = dt.Rows[i]["name"].ToString();
                                    dr["F_NAME"] = dt.Rows[i]["f_name"].ToString();
                                    dr["bonus_rate"] = dt.Rows[i]["rate"].ToString();
                                    dr["presents"] = dt.Rows[i]["pdays"].ToString();
                                    dr["AMOUNT"] = dt.Rows[i]["amt"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            break;
                        case "ITEM":
                            mq = "select (a.vch_num||a.type||a.client_id||a.client_unit_id) fstr,a.emp_code,a.first_name emp_name,a.f_name,nvl(b.paid_days,'0') paid_days," +
                                "b.col4 rate from emp_master a " +
                                "inner join enx_tab b on 1=1 and b.type='KBC' and b.client_id='" + clientid_mst + "' and b.client_unit_id='" + unitid_mst + "' and b.col2='001' " +
                                "left join (select sum(paid_days) paid_days,emp_code,client_id,client_unit_id from (select max(paid_days) paid_days,currmmmyyyy," +
                                "emp_code,client_id,client_unit_id FROM emp_salary_process where to_date('01' || substr(currmmmyyyy, 6, 2) || substr(currmmmyyyy, 1, 4),'ddmmyyyy') between " +
                                "to_date('" + model[0].Col18 + "','" + sgen.Getsqldateformat() + "') and to_date('" + model[0].Col19 + "','" + sgen.Getsqldateformat() + "') " +
                                "GROUP BY currmmmyyyy,emp_code,client_id,client_unit_id) a group by emp_code,client_id,client_unit_id) b on a.vch_num = b.emp_code " +
                                "and a.client_id = b.client_id and a.client_unit_id = b.client_unit_id " +
                                "where (a.vch_num||a.type||a.client_id||a.client_unit_id) in ('" + URL + "')";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                if (model[0].dt1.Rows[0]["EMP_CODE"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["Item"] = dt.Rows[i]["fstr"].ToString();
                                    dr["SNo"] = i + 1;
                                    dr["EMP_CODE"] = dt.Rows[i]["emp_code"].ToString();
                                    dr["EMP_NAME"] = dt.Rows[i]["emp_name"].ToString();
                                    dr["F_NAME"] = dt.Rows[i]["f_name"].ToString();
                                    dr["bonus_rate"] = dt.Rows[i]["rate"].ToString();
                                    dr["presents"] = dt.Rows[i]["paid_days"].ToString();
                                    dr["AMOUNT"] = sgen.Make_decimal(dt.Rows[i]["rate"].ToString()) * sgen.Make_decimal(dt.Rows[i]["paid_days"].ToString());
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            break;
                    }
                    break;
                #endregion
                #region incr_rate
                case "incr_rate":
                    switch (btnval.ToUpper())
                    {
                        case "DEL":
                            ViewBag.scripCall = "showmsgJS(2, 'Are You sure ? You want to delete?', 1);";
                            TempData[MyGuid + "_URL"] = URL;
                            break;
                        case "GDATA":
                            dtt = (DataTable)sgen.GetSession(MyGuid, "KINDT");
                            if (dtt.Rows.Count > 0)
                            {
                                dtt = dtt.Select("Sno in ('" + URL + "')").CopyToDataTable();
                                dtt.Columns.Add("Total (000000)");
                                dtt.AcceptChanges();
                                model[0].dt1 = dtt;
                                model[0].dt2 = dtt;
                            }
                            break;
                    }
                    break;
                case "full_final_bulk":
                    switch (btnval.ToUpper())
                    {
                        case "GDATA":
                            dtt = (DataTable)sgen.GetSession(MyGuid, "KINDT");
                            if (dtt.Rows.Count > 0)
                            {
                                dtt = dtt.Select("fstr in ('" + URL + "')").CopyToDataTable();
                                model[0].dt1 = dtt;
                            }
                            break;
                        case "EDIT":
                            mq = "select * from (SELECT(emp.client_id || emp.client_unit_id || emp.vch_num) fstr," +
                      "emp.emp_code EmpCode, emp.old_empcode Old_EmpCode,emp.external_empno as External_EmpCode," +
                      "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,to_char(emp.ex_dt,'" + sgen.Getsqldateformat() + "') as Leave_Dt " +
                      " ,to_char(emp.fnf_dt,'" + sgen.Getsqldateformat() + "') Final_date FROM emp_master emp  where to_char(emp.fnf_dt,'yyyy')!='1900' " +
                      " and emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "') t where t.fstr in ('" + URL + "')";
                            dtt = sgen.getdata(userCode, mq);
                            model[0].dt1 = dtt;
                            break;
                    }
                    break;
                #endregion
                #region incr_edit
                case "incr_edit":
                    dtt = (DataTable)sgen.GetSession(MyGuid, "KINDT");
                    if (dtt.Rows.Count > 0)
                    {
                        dtt = dtt.Select("Sno in ('" + URL + "')").CopyToDataTable();
                        dtt.Columns.Add("Total (000000)");
                        dtt.AcceptChanges();
                        model[0].dt1 = dtt;
                        model[0].dt2 = dtt;
                    }
                    break;
                #endregion
                #region leave year
                case "leave_year":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            mq = "select academic_year_id,to_char(convert_tz(From_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') From_Date," +
                          "to_char(convert_tz(to_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') to_Date,ent_by,rec_id,ent_date,vch_num,client_id," +
                          "client_unit_id from add_academic_year where (client_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            DataTable dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                model = getedit(model, dtreg, URL);
                                model[0].Col16 = dtreg.Rows[0]["vch_num"].ToString().Trim();
                                model[0].Col17 = dtreg.Rows[0]["from_date"].ToString().Trim();
                                model[0].Col18 = dtreg.Rows[0]["to_date"].ToString().Trim();
                                model[0].Col19 = dtreg.Rows[0]["academic_year_id"].ToString().Trim();
                            }
                            break;
                    }
                    break;
                #endregion
                #region empdoc
                case "empdoc":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select (e.client_id||e.client_unit_id||e.vch_num||to_char(e.vch_date,'yyyymmdd')||e.type) fstr,e.vch_num,e.rec_id,e.client_id,e.client_unit_id," +
                                "e.ent_by,e.ent_date,e.col2 empvch,e.col1,e.col3,e.col5,e.col6,e.r_no rno,to_char(e.date1,'" + sgen.Getsqldateformat() + "') date1,to_char(e.date2,'" + sgen.Getsqldateformat() + "') date2," +
                                "(t.FIRST_NAME|| ' '|| REPLACE(t.MIDDLE_NAME,'0','')|| ' '||REPLACE(t.LAST_NAME,'0','')) empname,dp.master_name dept,dg.master_name desig," +
                                "nvl(f.file_name,'0') fname,nvl(f.file_path,'0') fpath,nvl(f.col1,'0') ftitle,nvl(f.col2,'0') ftype,nvl(f.rec_id,'0') frec " +
                             "from enx_tab e " +
                             "inner join emp_master t on e.col2=t.vch_num and t.type='EMP' and t.client_id='" + clientid_mst + "' and t.client_unit_id='" + unitid_mst + "' " +
                             "inner join master_setting dp on dp.master_id=t.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,e.client_id)=1 and find_in_set(dp.client_unit_id,e.client_unit_id)=1 " +
                             "inner join master_setting dg on dg.master_id=t.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,e.client_id)=1 and find_in_set(dg.client_unit_id,e.client_unit_id)=1 " +
                             "left join file_tab f on f.vch_num=e.vch_num and f.type=e.type and f.client_id=e.client_id and f.client_unit_id=e.client_unit_id and f.r_no = e.r_no " +
                             "where (e.client_id||e.client_unit_id||e.vch_num||to_char(e.vch_date,'yyyymmdd')||e.type)='" + URL + "' order by e.r_no asc";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model = getedit(model, dt, URL);
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dt.Rows[0]["empname"].ToString();
                                model[0].Col18 = dt.Rows[0]["empvch"].ToString();
                                model[0].Col19 = dt.Rows[0]["dept"].ToString();
                                model[0].Col20 = dt.Rows[0]["desig"].ToString();
                                model[0].LTM1 = new List<Tmodelmain>();
                                if (model[0].Col14 == "9008.7")
                                {
                                    model[0].Col21 = "Qualification";
                                    for (int i = 0; i < dt.Rows.Count; i++)
                                    {
                                        Tmodelmain ltm = new Tmodelmain();
                                        ltm.Col1 = "Qualification";
                                        ltm.Col2 = "Medium";
                                        ltm.Col3 = "Institute/College";
                                        ltm.Col4 = "Course Duration";
                                        ltm.Col5 = "Passout Date";
                                        ltm.Col6 = "Y";
                                        ltm.Col7 = "Y";
                                        ltm.Col8 = "Y";
                                        ltm.Col9 = "Y";
                                        ltm.Col10 = "Y";
                                        ltm.Col11 = dt.Rows[i]["col1"].ToString();
                                        ltm.Col12 = dt.Rows[i]["col3"].ToString();
                                        ltm.Col13 = dt.Rows[i]["col5"].ToString();
                                        ltm.Col14 = dt.Rows[i]["col6"].ToString();
                                        ltm.Col15 = dt.Rows[i]["date1"].ToString();
                                        ltm.Col16 = dt.Rows[i]["ftitle"].ToString();
                                        ltm.Col18 = dt.Rows[i]["fpath"].ToString();
                                        ltm.Col19 = dt.Rows[i]["frec"].ToString();
                                        ltm.Col20 = dt.Rows[i]["rno"].ToString();
                                        ltm.Col21 = "ND";
                                        ltm.Col22 = "ND";
                                        ltm.Col23 = "ND";
                                        ltm.Col24 = "ND";
                                        ltm.Col25 = "YD";
                                        model[0].LTM1.Add(ltm);
                                    }
                                }
                                else if (model[0].Col14 == "9008.8")
                                {
                                    model[0].Col21 = "Experience";
                                    for (int i = 0; i < dt.Rows.Count; i++)
                                    {
                                        Tmodelmain ltm = new Tmodelmain();
                                        ltm.Col1 = "Company";
                                        ltm.Col2 = "Experience (in yrs)";
                                        ltm.Col3 = "From Date";
                                        ltm.Col4 = "To Date";
                                        ltm.Col6 = "Y";
                                        ltm.Col7 = "Y";
                                        ltm.Col8 = "Y";
                                        ltm.Col9 = "Y";
                                        ltm.Col10 = "N";
                                        ltm.Col11 = dt.Rows[i]["col1"].ToString();
                                        ltm.Col12 = dt.Rows[i]["col3"].ToString();
                                        ltm.Col13 = dt.Rows[i]["date1"].ToString();
                                        ltm.Col14 = dt.Rows[i]["date2"].ToString();
                                        ltm.Col16 = dt.Rows[i]["ftitle"].ToString();
                                        ltm.Col18 = dt.Rows[i]["fpath"].ToString();
                                        ltm.Col19 = dt.Rows[i]["frec"].ToString();
                                        ltm.Col20 = dt.Rows[i]["rno"].ToString();
                                        ltm.Col21 = "ND";
                                        ltm.Col22 = "ND";
                                        ltm.Col23 = "YD";
                                        ltm.Col24 = "YD";
                                        ltm.Col25 = "ND";
                                        model[0].LTM1.Add(ltm);
                                    }
                                }
                                else if (model[0].Col14 == "9008.9")
                                {
                                    model[0].Col21 = "Hobby";
                                    for (int i = 0; i < dt.Rows.Count; i++)
                                    {
                                        Tmodelmain ltm = new Tmodelmain();
                                        ltm.Col1 = "Hobby";
                                        ltm.Col2 = "Description";
                                        ltm.Col6 = "Y";
                                        ltm.Col7 = "Y";
                                        ltm.Col8 = "N";
                                        ltm.Col9 = "N";
                                        ltm.Col10 = "N";
                                        ltm.Col11 = dt.Rows[i]["col1"].ToString();
                                        ltm.Col12 = dt.Rows[i]["col3"].ToString();
                                        ltm.Col16 = dt.Rows[i]["ftitle"].ToString();
                                        ltm.Col18 = dt.Rows[i]["fpath"].ToString();
                                        ltm.Col19 = dt.Rows[i]["frec"].ToString();
                                        ltm.Col20 = dt.Rows[i]["rno"].ToString();
                                        ltm.Col21 = "ND";
                                        ltm.Col22 = "ND";
                                        ltm.Col23 = "ND";
                                        ltm.Col24 = "ND";
                                        ltm.Col25 = "ND";
                                        model[0].LTM1.Add(ltm);
                                    }
                                }
                                else if (model[0].Col14 == "9008.10")
                                {
                                    model[0].Col21 = "Bond";
                                    for (int i = 0; i < dt.Rows.Count; i++)
                                    {
                                        Tmodelmain ltm = new Tmodelmain();
                                        ltm.Col1 = "Name";
                                        ltm.Col2 = "Detail";
                                        ltm.Col3 = "Start Date";
                                        ltm.Col4 = "End Date";
                                        ltm.Col5 = "Amount";
                                        ltm.Col6 = "Y";
                                        ltm.Col7 = "Y";
                                        ltm.Col8 = "Y";
                                        ltm.Col9 = "Y";
                                        ltm.Col10 = "Y";
                                        ltm.Col11 = dt.Rows[i]["col1"].ToString();
                                        ltm.Col12 = dt.Rows[i]["col3"].ToString();
                                        ltm.Col13 = dt.Rows[i]["date1"].ToString();
                                        ltm.Col14 = dt.Rows[i]["date2"].ToString();
                                        ltm.Col15 = dt.Rows[i]["col5"].ToString();
                                        ltm.Col16 = dt.Rows[i]["ftitle"].ToString();
                                        ltm.Col18 = dt.Rows[i]["fpath"].ToString();
                                        ltm.Col19 = dt.Rows[i]["frec"].ToString();
                                        ltm.Col20 = dt.Rows[i]["rno"].ToString();
                                        ltm.Col21 = "ND";
                                        ltm.Col22 = "ND";
                                        ltm.Col23 = "YD";
                                        ltm.Col24 = "YD";
                                        ltm.Col25 = "ND";
                                        model[0].LTM1.Add(ltm);
                                    }
                                }
                            }
                            break;
                        case "EMP":
                            mq = "select e.vch_num,(e.first_name||replace(e.middle_name,'0','')||replace(e.last_name,'0','')) empname,dp.master_name dept,dg.master_name desig from emp_master e " +
                                "inner join master_setting dp on dp.master_id=e.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,e.client_id)=1 and find_in_set(dp.client_unit_id,e.client_unit_id)=1 " +
                                "inner join master_setting dg on dg.master_id=e.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,e.client_id)=1 and find_in_set(dg.client_unit_id,e.client_unit_id)=1 " +
                                "where (e.client_id||e.client_unit_id||e.vch_num||to_char(e.vch_date,'yyyymmdd')||e.type)='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col17 = dt.Rows[0]["empname"].ToString();
                                model[0].Col18 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col19 = dt.Rows[0]["dept"].ToString();
                                model[0].Col20 = dt.Rows[0]["desig"].ToString();
                            }
                            break;
                        case "FDEL":
                            string fid = sgen.GetSession(MyGuid, "delid").ToString();
                            res = sgen.execute_cmd(userCode, "Delete from file_tab WHERE rec_id='" + fid + "' and type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                            sgen.SetSession(MyGuid, "delid", null);
                            if (res)
                            {
                                var LTM = model[0].LTM1;
                                for (int d = 0; d < LTM.Count; d++)
                                {
                                    var id = LTM[d].Col19;
                                    if (id == fid)
                                    {
                                        //model[0].LTM1.RemoveAt(d);
                                        model[0].LTM1[d].Col16 = "";
                                        model[0].LTM1[d].Col18 = "";
                                        model[0].LTM1[d].Col19 = "";
                                    }
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region opening position
                case "open_p":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select ent_by,ent_date, client_id,client_unit_id, rec_id,type,vch_num,vch_date,col1,col2,col3,col4,col5,col6,col7" +
                                ",col8,col9,col10,col11,col12,col13,col14,col15,col16,col21 ,(case when to_char(date1, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(date1, '" + sgen.Getsqldateformat() + "') end ) date1" +
                                " ,(case when to_char(date2, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(date2, '" + sgen.Getsqldateformat() + "') end ) date2 from kc_tab where" +
                                "  (client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type)='" + URL + "' ";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                string defval = "";
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "(client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'";
                                model[0].Col9 = tm.Col9;
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["col1"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col21"].ToString();
                                model[0].Col20 = dtt.Rows[0]["col9"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col10"].ToString();
                                model[0].Col22 = dtt.Rows[0]["col11"].ToString();
                                model[0].Col21 = dtt.Rows[0]["col12"].ToString();
                                model[0].Col23 = dtt.Rows[0]["col15"].ToString();
                                model[0].Col24 = dtt.Rows[0]["date1"].ToString();
                                model[0].Col25 = dtt.Rows[0]["date2"].ToString();
                                model[0].Col26 = dtt.Rows[0]["col16"].ToString();
                                #region designation 1
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.desig(userCode, unitid_mst);
                                #endregion
                                #region Sub category 2
                                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.desig(userCode, unitid_mst);
                                #endregion
                                #region Department 3
                                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                                #endregion
                                #region Grade 5
                                TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5 = cmd_Fun.grade(userCode, unitid_mst);
                                #endregion
                                #region level 6
                                TempData[MyGuid + "_TList6"] = model[0].TList6 = mod6 = cmd_Fun.grade(userCode, unitid_mst);
                                #endregion
                                #region qualification 7
                                // defval = "";
                                TempData[MyGuid + "_TList7"] = model[0].TList7 = mod7 = cmd_Fun.qualification(userCode, unitid_mst, out defval);
                                #endregion
                                #region Employement Type 8
                                TempData[MyGuid + "_TList8"] = model[0].TList8 = mod8 = cmd_Fun.emptype(userCode, unitid_mst);
                                #endregion
                                #region Position Type 9
                                TempData[MyGuid + "_TList9"] = model[0].TList9 = mod9 = cmd_Fun.grade(userCode, unitid_mst);
                                #endregion
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;
                                mod4 = cmd_Fun.subdept(userCode, unitid_mst, model[0].SelectedItems3.FirstOrDefault());
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems4 = L4;
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col6"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems5 = L5;
                                String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems6 = L6;
                                String[] L7 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems7 = L7;
                                String[] L8 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col13"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems8 = L8;
                                String[] L9 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col14"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems9 = L9;
                                #region attachment
                                DataTable dtf = new DataTable();
                                #region 
                                dtf = sgen.getdata(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type as fstr, rec_id,file_name,file_path,col1,col2,description,Col3 from file_tab where vch_num='" + dtt.Rows[0]["vch_num"].ToString() + "' and type in " +
                                    "('" + tm.Col12 + "','DD" + model[0].Col12 + "') and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and col1='OPN'");
                                List<Tmodelmain> ltmf = new List<Tmodelmain>();
                                string des = "", title = "", f_recid = "";
                                if (dtf.Rows.Count > 0)
                                {
                                    model[0].Col27 = dtf.Rows[0]["col3"].ToString();
                                    model[0].Col28 = dtf.Rows[0]["description"].ToString();
                                    foreach (DataRow drf in dtf.Rows)
                                    {
                                        Tmodelmain tmf = new Tmodelmain();
                                        tmf.Col4 = drf["file_path"].ToString();
                                        tmf.Col1 = drf["file_name"].ToString();
                                        tmf.Col2 = drf["col1"].ToString();
                                        tmf.Col3 = drf["rec_id"].ToString();
                                        tmf.Col97 = drf["rec_id"].ToString();
                                        tmf.Col5 = drf["description"].ToString();
                                        des = drf["description"].ToString();
                                        title = drf["Col3"].ToString();
                                        tmf.Col6 = drf["col3"].ToString();
                                        tmf.Col7 = drf["col2"].ToString();
                                        ltmf.Add(tmf);
                                    }
                                }
                                model[0].LTM1 = ltmf;
                                #endregion
                                #endregion
                            }
                            break;
                        case "FDEL":
                            string fid = sgen.GetSession(MyGuid, "delid").ToString();
                            res = sgen.execute_cmd(userCode, "Delete from file_tab WHERE rec_id='" + fid + "' and type='OPN' and client_id='"
              + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                            sgen.SetSession(MyGuid, "delid", null);
                            if (res)
                            {
                                var LTM = model[0].LTM1;
                                for (int d = 0; d < LTM.Count; d++)
                                {
                                    var id = LTM[d].Col3;
                                    if (id == fid) { model[0].LTM1.RemoveAt(d); }
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region my_prf
                case "my_prf":
                    switch (btnval.ToUpper())
                    {
                        case "DETAIL":
                            mq = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                 "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                 "emp.emer_contact_no,emp.ent_by,emp.ent_date,emp.rec_id,emp.client_id,emp.client_unit_id,emp.emer_contact_name,emp.emer_contact_relation,emp.gender as Gender," +
                                 "(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.st_dt, 'yyyy'))) as years," +
                                 "trunc(months_between(utc_timestamp(),emp.st_dt)) as months,floor(utc_timestamp() - add_months(emp.st_dt,trunc(months_between(utc_timestamp(),emp.st_dt)))) days," +
                                 "emp.emp_code as Employee_Code,emp.emp_address,emp.old_empcode as OldEmpCode,emp.External_EmpNo,to_char(emp.dom, 'dd/mm/yyyy') as DOM" +
                                 ",to_char(emp.dob, 'dd/mm/yyyy') as DOB,emp.addr Address,(replace(emp.per_address,'0','')||' '||replace(emp.per_pincode,'0','')||' '||replace(emp.per_city,'0','')||' '||replace(emp.per_country,'0','')) per_Address,to_char(emp.st_dt, 'dd/mm/yyyy') " +
                                 "as date_of_join,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.email_id as Per_Email,off_email " +
                                 "Offi_Email,emp.pan_no as PANNo,nvl(bk.master_name, '-') as bank_name,emp.account_no as bank_acc,emp.ifsc_code as bank_ifsc," +
                                 "dp.master_name emp_dept, nvl(dg.master_name, '-') emp_desig from emp_master emp inner join master_setting dp on " +
                                 "dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(emp.client_id, dp.client_id)= 1 and " +
                                 "find_in_set(emp.client_unit_id, dp.client_unit_id)= 1 left join master_setting dg on dg.master_id = emp.emp_desig " +
                                 "and dg.type = 'MDG' and find_in_set(emp.client_id, dg.client_id)= 1 and " +
                                 "find_in_set(emp.client_unit_id, dg.client_unit_id)= 1 left join master_setting bk on bk.master_id = emp.bank_name and" +
                                 " bk.type = 'ABD' and find_in_set(emp.client_id, bk.client_id)= 1 and find_in_set(emp.client_unit_id, bk.client_unit_id)= 1 " +
                                 "inner join user_details ud on ud.emp_id = emp.vch_num and ud.type='CPR' and ud.client_id=emp.client_id and ud.client_unit_id=emp.client_unit_id " +
                                 "where emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status != 'R' " +
                                 "and(case when to_char(emp.ex_dt, 'yyyy') = '1900' then 1 when " +
                                 "emp.ex_dt > to_date(to_char(utc_timestamp()), 'dd/MM/yyyy') then 1 else 0 end)= 1 and ud.vch_num='" + Convert.ToInt32(userid_mst) + "'";
                            DataTable bdt = new DataTable();
                            bdt = sgen.getdata(userCode, mq);
                            if (bdt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col13 = "Update";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + bdt.Rows[0]["fstr"].ToString() + "'";
                                model[0].Col17 = bdt.Rows[0]["Employee_Code"].ToString();  //emp code
                                model[0].Col18 = bdt.Rows[0]["Employee_Name"].ToString();  //empp name
                                model[0].Col19 = bdt.Rows[0]["emp_dept"].ToString(); //dept
                                model[0].Col20 = bdt.Rows[0]["emp_desig"].ToString(); //desig
                                model[0].Col22 = bdt.Rows[0]["date_of_join"].ToString();  //date of join
                                model[0].Col23 = bdt.Rows[0]["days"].ToString() + " / " + bdt.Rows[0]["months"].ToString() + " / " + bdt.Rows[0]["years"].ToString();//Service Age Till Date
                                model[0].Col21 = bdt.Rows[0]["DOB"].ToString(); //Service Age Till Date
                                model[0].Col24 = bdt.Rows[0]["DOM"].ToString(); // Date Of Anniversary
                                model[0].Col25 = bdt.Rows[0]["Offi_Email"].ToString(); //Office Email Id
                                model[0].Col26 = bdt.Rows[0]["Per_Email"].ToString(); //Personal Email Id
                                model[0].Col27 = bdt.Rows[0]["ContactNo"].ToString();  //Mobile No
                                model[0].Col28 = bdt.Rows[0]["Alt_ContactNo"].ToString();  //Alternate No
                                model[0].Col29 = bdt.Rows[0]["PANNo"].ToString();  // PAN No
                                model[0].Col30 = bdt.Rows[0]["bank_name"].ToString();  //Bank Name
                                model[0].Col31 = bdt.Rows[0]["bank_acc"].ToString();  //Bank Account No
                                model[0].Col32 = bdt.Rows[0]["per_Address"].ToString();  //Address
                                model[0].Col33 = bdt.Rows[0]["bank_ifsc"].ToString();  //ifsc
                                model[0].Col34 = bdt.Rows[0]["emer_contact_no"].ToString();
                                model[0].Col35 = bdt.Rows[0]["emer_contact_name"].ToString();
                                model[0].Col36 = bdt.Rows[0]["emer_contact_relation"].ToString();
                                model[0].Col37 = bdt.Rows[0]["emp_address"].ToString();
                            }
                            else
                            {
                                model[0].Col13 = "Update";
                                ViewBag.vsave = "disabled='disabled'";
                            }
                            break;
                    }
                    break;
                #endregion
                #region medical ins
                case "med_ins":
                    switch (btnval.ToUpper())
                    {
                        case "DETAIL":
                            mq = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr," +
                                 "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                 "emp.emer_contact_no,emp.f_name Father_Name,emp.m_name Mother_Name,emp.ent_by,emp.ent_date,emp.rec_id,emp.client_id,emp.client_unit_id,emp.emer_contact_name,emp.emer_contact_relation,emp.gender as Gender," +
                                 "(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.dob, 'yyyy'))) as age," +
                                 "trunc(months_between(utc_timestamp(),emp.st_dt)) as months,floor(utc_timestamp() - add_months(emp.st_dt,trunc(months_between(utc_timestamp(),emp.st_dt)))) days," +
                                 "emp.emp_code as Employee_Code,emp.emp_address,emp.old_empcode as OldEmpCode,emp.External_EmpNo,to_char(emp.dom, 'dd/mm/yyyy') as DOM" +
                                 ",to_char(emp.dob, 'dd/mm/yyyy') as DOB,emp.addr Address,(replace(emp.per_address,'0','')||' '||replace(emp.per_pincode,'0','')||' '||replace(emp.per_city,'0','')||' '||replace(emp.per_country,'0','')) per_Address,to_char(emp.st_dt, 'dd/mm/yyyy') " +
                                 "as date_of_join,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.email_id as Per_Email,off_email " +
                                 "Offi_Email,emp.pan_no as PANNo,nvl(bk.master_name, '-') as bank_name,emp.account_no as bank_acc,emp.ifsc_code as bank_ifsc," +
                                 "dp.master_name emp_dept, nvl(dg.master_name, '-') emp_desig from emp_master emp inner join master_setting dp on " +
                                 "dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                 "find_in_set(emp.client_unit_id, dp.client_unit_id)= 1 left join master_setting dg on dg.master_id = emp.emp_desig " +
                                 "and dg.type = 'MDG' and " +
                                 "find_in_set(emp.client_unit_id, dg.client_unit_id)= 1 left join master_setting bk on bk.master_id = emp.bank_name and" +
                                 " bk.type = 'ABD' and find_in_set(emp.client_unit_id, bk.client_unit_id)= 1 " +
                                 "inner join user_details ud on ud.emp_id = emp.vch_num and ud.type='CPR' and ud.client_unit_id=emp.client_unit_id " +
                                 "where emp.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status != 'R' " +
                                 "and(case when to_char(emp.ex_dt, 'yyyy') = '1900' then 1 when " +
                                 "emp.ex_dt > to_date(to_char(utc_timestamp()), 'dd/MM/yyyy') then 1 else 0 end)= 1 and ud.vch_num='" + Convert.ToInt32(userid_mst) + "'";
                            DataTable bdt = new DataTable();
                            bdt = sgen.getdata(userCode, mq);
                            if (bdt.Rows.Count > 0)
                            {
                                model[0].Col13 = "Update";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col17 = bdt.Rows[0]["Employee_Code"].ToString();  //emp code
                                model[0].Col18 = bdt.Rows[0]["Employee_Name"].ToString();  //empp name
                                model[0].Col19 = bdt.Rows[0]["Father_Name"].ToString();
                                model[0].Col20 = bdt.Rows[0]["emp_desig"].ToString(); //desig
                                model[0].Col21 = bdt.Rows[0]["date_of_join"].ToString();  //date of join
                                model[0].Col23 = bdt.Rows[0]["age"].ToString();
                                model[0].Col22 = bdt.Rows[0]["Gender"].ToString();
                                model[0].Col20 = bdt.Rows[0]["DOB"].ToString();
                                #region 1.bloodgroup
                                mod1.Add(new SelectListItem { Text = "A+", Value = "A+" });
                                mod1.Add(new SelectListItem { Text = "B+", Value = "B+" });
                                mod1.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
                                mod1.Add(new SelectListItem { Text = "O+", Value = "O+" });
                                mod1.Add(new SelectListItem { Text = "A-", Value = "A-" });
                                mod1.Add(new SelectListItem { Text = "B-", Value = "B-" });
                                mod1.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
                                mod1.Add(new SelectListItem { Text = "O-", Value = "O-" });
                                #endregion
                                TempData[MyGuid + "_Tlist1"] = TempData[MyGuid + "_Tlist2"] = TempData[MyGuid + "_Tlist3"] = TempData[MyGuid + "_Tlist4"] = TempData[MyGuid + "_Tlist5"] = mod1;

                                model[0].TList5 = model[0].TList4 = model[0].TList3 = model[0].TList2 = model[0].TList1 = mod1;
                                //model[0].TList2 = mod1;
                                //model[0].TList3 = mod1;
                                //model[0].TList4 = mod1;
                                //model[0].TList5 = mod1;
                                mq1 = "select (md.client_id||md.client_unit_id||md.R_NO||to_char(md.vch_date,'yyyymmdd')||md.type) as fstr, " +
                                    "md.COL1 as mth_name,md.col2 as dd1,md.col6 as dd2,md.col10 as dd3,md.col18 as dd4,md.col19 as dd5,md.col4 first_child,md.R_NO as emp_code,md.client_id,md.client_unit_id,md.ent_by,md.ent_date," +
                                    "to_char(md.DATE1, 'dd/mm/yyyy') as mth_dob,md.COL3 as fth_name,to_char(md.DATE2, 'dd/mm/yyyy') as fth_dob," +
                                    "md.COL5 as spouse_name,to_char(md.DATE3, 'dd/mm/yyyy') as spouse_dob,md.COL9 as " +
                                    "fchild_gender,to_char(md.DATE4, 'dd/mm/yyyy') as fchl_dob,md.COL11 as schlname,md.COL12 as schlgender," +
                                    "md.COL12 as secgender,md.COL7 as policies,to_char(md.DATE4, 'dd/mm/yyyy') as sec_dob from enx_tab2 md " +
                                    "where md.type = 'MED' and md.client_id = '" + clientid_mst + "' and md.client_unit_id = '" + unitid_mst + "' and md.R_NO = '" + model[0].Col17 + "'";
                                DataTable bdt2 = new DataTable();
                                bdt2 = sgen.getdata(userCode, mq1);
                                if (bdt2.Rows.Count > 0)
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                                    model[0].Col13 = "Update";
                                    model[0].Col8 = "client_id||client_unit_id||R_NO|| to_char(vch_date, 'yyyymmdd')|| type = '" + bdt2.Rows[0]["fstr"].ToString() + "'";
                                    model[0].Col24 = bdt2.Rows[0]["mth_name"].ToString();
                                    //model[0].Col25 = bdt.Rows[0]["Offi_Email"].ToString();
                                    model[0].Col26 = bdt2.Rows[0]["mth_dob"].ToString();
                                    // model[0].Col27 = bdt.Rows[0]["mthrage"].ToString();
                                    model[0].Col28 = bdt2.Rows[0]["fth_name"].ToString();
                                    model[0].Col30 = bdt2.Rows[0]["fth_dob"].ToString();
                                    //model[0].Col31 = bdt.Rows[0]["fthrage"].ToString();
                                    model[0].Col32 = bdt2.Rows[0]["spouse_name"].ToString();
                                    model[0].Col34 = bdt2.Rows[0]["spouse_dob"].ToString();
                                    //model[0].Col35 = bdt.Rows[0]["spouseage"].ToString();
                                    model[0].Col36 = bdt2.Rows[0]["first_child"].ToString();
                                    model[0].Col37 = bdt2.Rows[0]["fchild_gender"].ToString();
                                    model[0].Col38 = bdt2.Rows[0]["fchl_dob"].ToString();
                                    //model[0].Col39 = bdt.Rows[0]["fchlage"].ToString();
                                    model[0].Col40 = bdt2.Rows[0]["schlname"].ToString();
                                    model[0].Col41 = bdt2.Rows[0]["secgender"].ToString();
                                    //model[0].Col43 = bdt.Rows[0]["schlage"].ToString();
                                    model[0].Col42 = bdt2.Rows[0]["sec_dob"].ToString();
                                    model[0].Col44 = bdt2.Rows[0]["policies"].ToString();
                                    String[] L1 = System.String.Join(",", bdt2.Rows.OfType<DataRow>().Select(r => r["dd1"].ToString()).Distinct()).Split(',');
                                    String[] L2 = System.String.Join(",", bdt2.Rows.OfType<DataRow>().Select(r => r["dd2"].ToString()).Distinct()).Split(',');
                                    String[] L3 = System.String.Join(",", bdt2.Rows.OfType<DataRow>().Select(r => r["dd3"].ToString()).Distinct()).Split(',');
                                    String[] L4 = System.String.Join(",", bdt2.Rows.OfType<DataRow>().Select(r => r["dd4"].ToString()).Distinct()).Split(',');
                                    String[] L5 = System.String.Join(",", bdt2.Rows.OfType<DataRow>().Select(r => r["dd5"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems1 = L1;
                                    model[0].SelectedItems2 = L2;
                                    model[0].SelectedItems3 = L3;
                                    model[0].SelectedItems4 = L4;
                                    model[0].SelectedItems5 = L5;
                                }
                                else
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "N");
                                }
                            }
                            else
                            {
                                model[0].Col13 = "Update";
                                ViewBag.vsave = "disabled='disabled'";
                            }
                            break;
                    }
                    break;
                #endregion
                #region pt_setting
                case "pt_setting":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            mq = "SELECT rec_id,col1,col2,col3,col4,col7,col8,to_char(convert_tz(col16,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as col16,client_id," +
             "client_unit_id,ent_by,ent_date,vch_num,vch_date from vehicle_master where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region Bind All dropdwon
                                mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod1.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                mod2.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod2.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                mod4.Add(new SelectListItem { Text = "State", Value = "State" });
                                mod4.Add(new SelectListItem { Text = "City", Value = "City" });
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                #endregion
                                try
                                {
                                    model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                    model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                    model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                    model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                    model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                    model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                    model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                    model[0].Col30 = dtt.Rows[0]["col8"].ToString();
                                    model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                    model[0].Col19 = dtt.Rows[0]["col16"].ToString();
                                    String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                    String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                    String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                    String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems1 = L1;
                                    model[0].SelectedItems2 = L2;
                                    model[0].SelectedItems3 = L3;
                                    model[0].SelectedItems4 = L4;
                                    if (!model[0].Col30.Trim().Equals(""))
                                    {
                                        mq1 = "SELECT emp.vch_num,emp.cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as name," +
                      "msdg.master_name as designation FROM emp_master emp join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG'" +
                      "where emp.client_unit_id='" + unitid_mst + "' and emp.vch_num='" + model[0].Col30 + "' and emp.type='EMP'";
                                        DataTable dtpt = new DataTable();
                                        dtpt = sgen.getdata(userCode, mq1);
                                        if (dtpt.Rows.Count > 0)
                                        {
                                            model[0].Col20 = dtpt.Rows[0]["name"].ToString();
                                            model[0].Col21 = dtpt.Rows[0]["designation"].ToString();
                                            model[0].Col22 = dtpt.Rows[0]["f_name"].ToString();
                                            model[0].Col23 = dtpt.Rows[0]["cur_address"].ToString();
                                            model[0].Col30 = dtpt.Rows[0]["vch_num"].ToString();
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                    throw;
                                }
                                if (btnval == "EDIT")
                                {
                                    if (dtt.Rows.Count > 0)
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "Y");
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "disabled='disabled'";
                                        ViewBag.vsave = "";
                                        model[0].Col13 = "Update";
                                        model[0].Col121 = "U";
                                        model[0].Col122 = "<u>U</u>pdate";
                                        ViewBag.scripCall = "enableForm();";
                                        model[0].Col16 = dtt.Rows[0]["vch_num"].ToString().Trim();
                                    }
                                }
                                if (btnval == "DETAIL")
                                {
                                    if (dtt.Rows.Count > 0)
                                    {
                                        sgen.SetSession(MyGuid, "EDMODE", "N");
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "";
                                        ViewBag.vsave = "disabled='disabled'";
                                        model[0].Col13 = "Save";
                                        model[0].Col121 = "S";
                                        model[0].Col122 = "<u>S</u>ave";
                                        ViewBag.scripCall = "disableForm();";
                                        model[0].Col16 = dtt.Rows[0]["vch_num"].ToString().Trim();
                                    }
                                }
                            }
                            break;
                        case "PTSIG":
                            mq = "SELECT emp.vch_num,emp.cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as Name," +
                                  "msdg.master_name as designation FROM emp_master emp join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG'" +
                                  "where (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col20 = dtt.Rows[0]["name"].ToString();
                                model[0].Col21 = dtt.Rows[0]["designation"].ToString();
                                model[0].Col22 = dtt.Rows[0]["f_name"].ToString();
                                model[0].Col23 = dtt.Rows[0]["cur_address"].ToString();
                                model[0].Col30 = dtt.Rows[0]["vch_num"].ToString();
                            }
                            break;
                        case "UNITS":
                            mq = "select pt.rec_id,u.cup_id,u.company_profile_id,u.unit_name,pt.col1,pt.col2,pt.col3,pt.col4,pt.col7,pt.col8," +
                                "to_char(convert_tz(pt.col16,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as col16,pt.client_id,pt.client_unit_id,pt.ent_by,pt.ent_date,pt.vch_num,pt.vch_date " +
                                "from company_unit_profile u inner join vehicle_master pt on pt.client_id=u.Company_profile_id and pt.client_unit_id=u.CUP_Id and pt.type='KPT' " +
                                "where (u.cup_id||u.company_profile_id|| to_char(u.vch_date,'yyyymmdd'))= '" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                //#region Bind All dropdwon
                                //mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                //mod1.Add(new SelectListItem { Text = "No", Value = "No" });
                                //TempData[MyGuid + "_Tlist1"] = mod1;
                                //mod2.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                                //mod2.Add(new SelectListItem { Text = "No", Value = "No" });
                                //TempData[MyGuid + "_Tlist2"] = mod2;
                                //mod4.Add(new SelectListItem { Text = "State", Value = "State" });
                                //mod4.Add(new SelectListItem { Text = "City", Value = "City" });
                                //model[0].TList1 = mod1;
                                //model[0].TList2 = mod2;
                                //model[0].TList3 = mod3;
                                //model[0].TList4 = mod4;
                                //#endregion
                                //model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                //model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                //model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                //model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                //model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                //model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                //
                                sgen.SetSession(MyGuid, "EDMODE", "N");
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["col2"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col16"].ToString();
                                model[0].Col30 = dtt.Rows[0]["col8"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                if (!model[0].Col30.Trim().Equals(""))
                                {
                                    mq1 = "SELECT emp.vch_num,emp.cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as name," +
                  "msdg.master_name as designation FROM emp_master emp join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG'" +
                  "where emp.client_unit_id='" + unitid_mst + "' and emp.vch_num='" + model[0].Col30 + "' and emp.type='EMP'";
                                    DataTable dtpt = new DataTable();
                                    dtpt = sgen.getdata(userCode, mq1);
                                    if (dtpt.Rows.Count > 0)
                                    {
                                        model[0].Col20 = dtpt.Rows[0]["name"].ToString();
                                        model[0].Col21 = dtpt.Rows[0]["designation"].ToString();
                                        model[0].Col22 = dtpt.Rows[0]["f_name"].ToString();
                                        model[0].Col23 = dtpt.Rows[0]["cur_address"].ToString();
                                        model[0].Col30 = dtpt.Rows[0]["vch_num"].ToString();
                                    }
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region leave_ob_imp
                case "leave_ob_imp":
                    switch (btnval)
                    {
                        case "EDIT":
                            mq = "select a.vch_num,a.vch_date,a.ent_by,a.ent_date,a.type,a.client_id,a.client_unit_id,em.emp_code EmpCode,em.old_empcode Old_EmpCode,em.external_empno External_EmpCode," +
                      "(em.first_Name|| ' '|| replace(em.middle_name, '0', '')|| ' '|| replace(em.last_name, '0', '')) Employee_Name,(b.col1|| ' ('|| b.vch_num|| ')') lv_head,a.leave_count," +
                      "(a.month_name|| ' ('|| a.month_id|| ')') Month_Name,a.month_id,a.month_name m_name,a.curryyyymmm from leave_ob a " +
                      "left join kc_tab b on a.leave_type_id = b.vch_num and b.type = 'KLV' and b.client_id = a.client_id " +
                      "left join emp_master em on em.vch_num = a.emp_code and em.type = 'EMP' and em.client_id = a.client_id and em.client_unit_id = a.client_unit_id " +
                      "where (a.curryyyymmm||a.type|| a.client_id|| a.client_unit_id)='" + URL + "'";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                //emp type
                                #region
                                mod1.Add(new SelectListItem { Text = "All Employee", Value = "000" });
                                mod1.Add(new SelectListItem { Text = "Selected Employee", Value = "001" });
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                                #endregion
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col8 = "(curryyyymmm|| type|| client_id|| client_unit_id) = '" + URL + "'";
                                model[0].Col13 = "Update";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col19 = dtt.Rows[0]["m_name"].ToString().ToUpper() + " - " + dtt.Rows[0]["curryyyymmm"].ToString().Substring(0, 4).Trim().ToUpper();

                                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                                sgen.SetSession(MyGuid, "LOBcurryyyymmm", dtt.Rows[0]["curryyyymmm"].ToString());
                                Pivot pv = new Pivot(dtt, MyGuid);
                                dtt = pv.PivotData("leave_count", AggregateFunction.Sum, new string[] { "EmpCode", "Old_EmpCode", "External_EmpCode", "Employee_Name" }, new string[] { "lv_head" });
                                model[0].dt1 = dtt;
                            }
                            break;
                        case "EMP":
                            mq = "select group_concat((FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0',''))) as emp_name from emp_master " +
                                "where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) in ('" + URL + "')";
                            DataTable dte = new DataTable();
                            dte = sgen.getdata(userCode, mq);
                            if (dte.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "KEMPLOB", URL);
                                model[0].Col18 = dte.Rows[0]["emp_name"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region attendence Rules
                case "attn_rules":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "DETAIL":
                            mq = "SELECT rec_id,col1,col2,col3,col4,type,col7,col8,col9,col10,col11,col12,col13,col14,col15" +
                                ",col18,col19,col20,vch_num,col21,cur_district,col25,col28,col29,col30,col31,col32,col33,col34,col36," +
                                "col37,col38,col39,col40,col41,col42,col43,col44,col45,col46,col47,col48,col49,col50,cur_country,cur_state,cur_city,cur_tehsil,cur_village" +
                                ",client_id,client_unit_id,ent_by,ent_date,vch_num,vch_date from vehicle_master" +
                                " where client_id || client_unit_id || vch_num || to_char(vch_date, 'yyyymmdd') || type =" +
                                " '" + URL + "'";
                            DataTable dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                #region Dropdowns
                                mod1 = new List<SelectListItem>();
                                mod2 = new List<SelectListItem>();
                                mod3 = new List<SelectListItem>();
                                mod4 = new List<SelectListItem>();
                                mod5 = new List<SelectListItem>();
                                mod6 = new List<SelectListItem>();
                                mod7 = new List<SelectListItem>();
                                mod8 = new List<SelectListItem>();
                                mod1.Add(new SelectListItem { Text = "First In Last Out Punch", Value = "1" });
                                mod1.Add(new SelectListItem { Text = "Dedicated Direction", Value = "2" });
                                mod2.Add(new SelectListItem { Text = "OT Not Applicable", Value = "1" });
                                mod2.Add(new SelectListItem { Text = "Out Punch - Shift End Time", Value = "2" });
                                mod2.Add(new SelectListItem { Text = "Total Duration - Shift Duration", Value = "3" });
                                mod3.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                                mod3.Add(new SelectListItem { Text = "SL", Value = "SL" });
                                mod3.Add(new SelectListItem { Text = "EL", Value = "EL" });
                                mod4.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                                mod4.Add(new SelectListItem { Text = "SL", Value = "SL" });
                                mod4.Add(new SelectListItem { Text = "EL", Value = "EL" });
                                mod5.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                                mod5.Add(new SelectListItem { Text = "SL", Value = "SL" });
                                mod5.Add(new SelectListItem { Text = "EL", Value = "EL" });
                                mod6.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                                mod6.Add(new SelectListItem { Text = "SL", Value = "SL" });
                                mod6.Add(new SelectListItem { Text = "EL", Value = "EL" });
                                mod7.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                                mod7.Add(new SelectListItem { Text = "SL", Value = "SL" });
                                mod7.Add(new SelectListItem { Text = "EL", Value = "EL" });
                                mod8.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                                mod8.Add(new SelectListItem { Text = "SL", Value = "SL" });
                                mod8.Add(new SelectListItem { Text = "EL", Value = "EL" });

                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                                #endregion
                                model = getedit(model, dtreg, URL);
                                model[0].Col12 = dtreg.Rows[0]["type"].ToString();
                                model[0].Col16 = dtreg.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = DateTime.ParseExact(dtreg.Rows[0]["col1"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col19 = DateTime.ParseExact(dtreg.Rows[0]["col2"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Chk1 = dtreg.Rows[0]["col7"].ToString() == "Y" ? true : false;
                                model[0].Chk2 = dtreg.Rows[0]["col8"].ToString() == "Y" ? true : false;
                                model[0].Chk3 = dtreg.Rows[0]["col19"].ToString() == "Y" ? true : false;
                                model[0].Chk4 = dtreg.Rows[0]["col20"].ToString() == "Y" ? true : false;
                                model[0].Chk5 = dtreg.Rows[0]["col21"].ToString() == "Y" ? true : false;
                                model[0].Chk6 = dtreg.Rows[0]["col43"].ToString() == "Y" ? true : false;
                                model[0].Chk7 = dtreg.Rows[0]["col42"].ToString() == "Y" ? true : false;
                                model[0].Chk11 = dtreg.Rows[0]["col37"].ToString() == "Y" ? true : false;
                                model[0].Chk12 = dtreg.Rows[0]["cur_tehsil"].ToString() == "Y" ? true : false;
                                model[0].Chk13 = dtreg.Rows[0]["cur_village"].ToString() == "Y" ? true : false;
                                model[0].Chk14 = dtreg.Rows[0]["col50"].ToString() == "Y" ? true : false;
                                String[] L1 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col14"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                String[] L3 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col44"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col45"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                String[] L5 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col46"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col47"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                String[] L7 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col48"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col49"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                model[0].Col20 = DateTime.ParseExact(dtreg.Rows[0]["col9"].ToString(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col21 = DateTime.ParseExact(dtreg.Rows[0]["col10"].ToString(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col22 = DateTime.ParseExact(dtreg.Rows[0]["col11"].ToString(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col23 = DateTime.ParseExact(dtreg.Rows[0]["col12"].ToString(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col24 = DateTime.ParseExact(dtreg.Rows[0]["col13"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col25 = DateTime.ParseExact(dtreg.Rows[0]["col41"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col26 = DateTime.ParseExact(dtreg.Rows[0]["col18"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col27 = DateTime.ParseExact(dtreg.Rows[0]["col25"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col28 = DateTime.ParseExact(dtreg.Rows[0]["col28"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col29 = DateTime.ParseExact(dtreg.Rows[0]["col29"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col30 = DateTime.ParseExact(dtreg.Rows[0]["col30"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col38 = dtreg.Rows[0]["col31"].ToString();
                                model[0].Col31 = dtreg.Rows[0]["col32"].ToString();
                                model[0].Col32 = DateTime.ParseExact(dtreg.Rows[0]["col38"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col33 = DateTime.ParseExact(dtreg.Rows[0]["col39"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col34 = DateTime.ParseExact(dtreg.Rows[0]["cur_country"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col35 = DateTime.ParseExact(dtreg.Rows[0]["cur_state"].ToString().Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                model[0].Col36 = dtreg.Rows[0]["cur_city"].ToString().Trim();
                                model[0].Col37 = dtreg.Rows[0]["cur_district"].ToString().Trim();
                            }
                            break;
                        case "UNITS":
                            mq = "select u.cup_id,u.company_profile_id,u.unit_name,ar.col1,ar.col2,ar.col3,ar.col4,ar.col7,ar.col8,ar.col9,ar.col10,ar.col11,ar.col12,ar.col13,ar.col14,ar.col15,ar.col18,ar.col19," +
                                 "ar.col20,ar.col21,ar.col25,ar.col28,ar.col29,ar.col30,ar.col31,ar.col32,ar.col33,ar.col34,ar.col36,ar.col37,ar.col38,ar.col39,ar.col40,ar.col41,ar.cur_country,ar.cur_state,ar.cur_city," +
                                 "ar.cur_tehsil,ar.cur_village,ar.client_id,ar.client_unit_id,ar.ent_by,ar.ent_date,ar.vch_num,ar.vch_date " +
                                 "from company_unit_profile u inner join vehicle_master ar on ar.client_id=u.Company_profile_id and ar.client_unit_id=u.CUP_Id and ar.type='KAR' " +
                                 "where u.cup_id||u.company_profile_id||to_char(u.vch_date,'yyyymmdd')= '" + URL + "'";
                            dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                model[0].Col17 = dtreg.Rows[0]["unit_name"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region exp master
                case "exp_master":
                    mq = "select master_id,vch_num,master_name,Master_type,classid,master_entby,master_entdate,vch_date,Status,client_id,client_unit_id from " + tab_name + " where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "' ";
                    dt = sgen.getdata(userCode, mq);
                    model[0].Col8 = " (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'";
                    switch (btnval)
                    {
                        case "EDIT":
                        case "JEDIT":
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                if (mid_mst.Equals("8001.1"))
                                {
                                    model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                    model[0].Col18 = dt.Rows[0]["classid"].ToString();
                                    model[0].Col17 = dt.Rows[0]["master_name"].ToString();
                                    master_id = dt.Rows[0]["master_id"].ToString();
                                    model[0].Col23 = dt.Rows[0]["Master_type"].ToString();
                                }
                                else if (mid_mst.Equals("9003.3.9"))
                                {
                                    #region ddls
                                    mod1 = new List<SelectListItem>();
                                    mq = "select '001' as master_id,'Male' as master_name from dual UNION select '002' as master_id,'Female' as master_name from dual";
                                    DataTable ddldt = sgen.getdata(userCode, mq);
                                    foreach (DataRow dr in ddldt.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                    #endregion

                                    model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                    String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["master_name"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems1 = L1;
                                    model[0].Col17 = dt.Rows[0]["classid"].ToString();
                                    master_id = dt.Rows[0]["master_id"].ToString();
                                }
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["master_entby"].ToString();
                                model[0].Col4 = dt.Rows[0]["master_entdate"].ToString();
                            }
                            break;
                        case "EXPVIEW":
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                if (mid_mst.Equals("8001.4"))
                                {
                                    DataTable dtddl = sgen.getdata(userCode, "SELECT user_id,vch_num FROM user_details where status='" + "active" + "' " +
                                   "and type='CPR' and find_in_set('8000', mod_id)");
                                    foreach (DataRow dr in dtddl.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["user_id"].ToString(), Value = dr["vch_num"].ToString() });
                                    }
                                    TempData[MyGuid + "_Tlist1"] = mod1;
                                    model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                    String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["master_name"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems1 = L1;
                                    model[0].Col17 = dt.Rows[0]["classid"].ToString();
                                }
                            }
                            model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                            model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                            model[0].Col3 = dt.Rows[0]["master_entby"].ToString();
                            model[0].Col4 = dt.Rows[0]["master_entdate"].ToString();
                            break;
                    }
                    break;
                #endregion
                #region Incr_new
                case "incr_new":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "SELECT (s.client_unit_id||s.vch_num||to_char(s.vch_date,'yyyymmdd')||s.type) fstr,A.emp_code EMP_CODE,A.FIRST_NAME," +
                                "S.ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11," +
                                "S.ERRATE12,S.ERRATE13,S.ERRATE14,S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1," +
                                "S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9,S.DEDRATE10,S.TOTEARN," +
                                "S.TOTDED,S.NETSALARY,S.ACTRATE,S.VCH_NUM,S.CLIENT_ID,S.CLIENT_UNIT_ID,TO_CHAR(S.EFF_DT,'" + sgen.Getsqldateformat() + "') EFF_DT," +
                                "TO_CHAR(S.APPL_DT,'" + sgen.Getsqldateformat() + "') APPL_DT,S.ENT_BY,S.ENT_DATE,S.TYPE FROM EMP_MASTER A " +
                                "inner JOIN  empincr S ON A.VCH_NUM = S.EMP_CODE and A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID and (s.client_unit_id||s.vch_num||to_char(s.vch_date,'yyyymmdd')||s.type)='" + URL + "' " +
                                "WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and to_char(a.ex_dt,'yyyy')='1900' ORDER BY EMP_CODE";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region grade
                                // shiv
                                dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KGM' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }

                                }
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                                #endregion
                                #region Dept
                                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                                #endregion
                                #region Desig
                                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.desig(userCode, unitid_mst);

                                #endregion



                                model[0].SelectedItems2 = new string[] { "001" };
                                model[0].SelectedItems3 = new string[] { "001" };
                                model[0].SelectedItems1 = new string[] { "001" };
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col8 = "(client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) = '" + URL + "'";
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = dtt.Rows[0]["type"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col19 = dtt.Rows[0]["eff_dt"].ToString();
                                model[0].Col20 = dtt.Rows[0]["appl_dt"].ToString();
                                DataTable dtc = dtt.Copy();
                                dtc.Columns.Remove("fstr");
                                dtc.Columns.Remove("vch_num");
                                dtc.Columns.Remove("client_id");
                                dtc.Columns.Remove("client_unit_id");
                                dtc.Columns.Remove("eff_dt");
                                dtc.Columns.Remove("appl_dt");
                                dtc.Columns.Remove("ent_by");
                                dtc.Columns.Remove("ent_date");
                                dtc.Columns.Remove("type");
                                dtc.AcceptChanges();
                                var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                                    ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                                    "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                                sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                                dtc = CleanDT_br(dtc);
                                //TO SHOW ON GRID                                
                                dtc = GiveHeadName_br(dtc);
                                model[0].dt1 = dtc;
                            }
                            break;
                    }
                    break;
                #endregion
                #region Incr_one
                case "incr_one":
                    switch (btnval.ToUpper())
                    {
                        case "GETDATA":
                            mq0 = "SELECT  A.emp_code AS EMP_CODE ," +
                                "A.FIRST_NAME||' '||replace(A.MIDDLE_NAME,'0','')||' '||replace(A.LAST_NAME,'0','')||'('||dp.master_name||')' AS FIRST_NAME,S.ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10," +
                   "S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
"S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
"S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,S.ACTRATE FROM EMP_MASTER A " +
"LEFT JOIN  SALMAIN S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
"left join master_setting dp on dp.master_id = a.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, a.client_id)= 1 and find_in_set(dp.client_unit_id, a.client_unit_id)= 1 " +
"WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and to_char(a.ex_dt,'yyyy')='1900' AND a.client_unit_id||A.vch_num IN ('" + URL + "')  ORDER BY EMP_CODE";
                            dtt = sgen.getdata(userCode, mq0);
                            #region CALCULATE
                            var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                                ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                                "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                            sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                            dtt = CleanDT_br(dtt);
                            #endregion
                            //TO SHOW ON GRID
                            #region grID
                            dtt = GiveHeadName_br(dtt);
                            model[0].dt1 = dtt;
                            #endregion
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vget = "";
                            ViewBag.vold = "";
                            break;
                        case "EDIT":
                            mq = "SELECT (s.client_unit_id||s.vch_num||to_char(s.vch_date,'yyyymmdd')||s.type) fstr,A.emp_code EMP_CODE," +
                                "A.FIRST_NAME||' '||replace(A.MIDDLE_NAME,'0','')||' '||replace(A.LAST_NAME,'0','')||'('||dp.master_name||')' AS FIRST_NAME," +
                                "S.ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11," +
                                "S.ERRATE12,S.ERRATE13,S.ERRATE14,S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1," +
                                "S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9,S.DEDRATE10,S.TOTEARN," +
                                "S.TOTDED,S.NETSALARY,S.ACTRATE,S.VCH_NUM,TO_CHAR(S.VCH_DATE,'" + sgen.Getsqldateformat() + "') VCH_DATE,S.CLIENT_ID," +
                                "S.CLIENT_UNIT_ID,TO_CHAR(S.EFF_DT,'" + sgen.Getsqldateformat() + "') EFF_DT," +
                                "TO_CHAR(S.APPL_DT,'" + sgen.Getsqldateformat() + "') APPL_DT,S.ENT_BY,S.ENT_DATE,S.TYPE FROM EMP_MASTER A " +
                                "inner JOIN  empincr S ON A.VCH_NUM = S.EMP_CODE and A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID and (s.client_unit_id||s.vch_num||to_char(s.vch_date,'yyyymmdd')||s.type)='" + URL + "' " +
"left join master_setting dp on dp.master_id = a.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, a.client_id)= 1 and find_in_set(dp.client_unit_id, a.client_unit_id)= 1 " +
                                "WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and to_char(a.ex_dt,'yyyy')='1900' ORDER BY EMP_CODE";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region grade
                                // shiv
                                dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KGM' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }

                                }
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                                #endregion
                                #region Dept
                                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                                #endregion
                                #region Desig
                                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.desig(userCode, unitid_mst);

                                #endregion



                                model[0].SelectedItems2 = new string[] { "001" };
                                model[0].SelectedItems3 = new string[] { "001" };
                                model[0].SelectedItems1 = new string[] { "001" };
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col8 = "(client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) = '" + URL + "'";
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = dtt.Rows[0]["type"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dtt.Rows[0]["vch_date"].ToString();
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col19 = dtt.Rows[0]["eff_dt"].ToString();
                                model[0].Col20 = dtt.Rows[0]["appl_dt"].ToString();
                                DataTable dtc = dtt.Copy();
                                dtc.Columns.Remove("fstr");
                                dtc.Columns.Remove("vch_num");
                                dtc.Columns.Remove("client_id");
                                dtc.Columns.Remove("client_unit_id");
                                dtc.Columns.Remove("eff_dt");
                                dtc.Columns.Remove("appl_dt");
                                dtc.Columns.Remove("ent_by");
                                dtc.Columns.Remove("ent_date");
                                dtc.Columns.Remove("type");
                                dtc.AcceptChanges();
                                Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                                    ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                                    "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                                sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                                dtc = CleanDT_br(dtc);
                                //TO SHOW ON GRID                                
                                dtc = GiveHeadName_br(dtc);
                                model[0].dt1 = dtc;
                            }
                            break;
                    }
                    break;
                #endregion
                #region st_authority
                case "st_authority":
                    if (btnval == "EDIT")
                    {
                        mq = "SELECT cup.company_profile_id,cup.CUP_Id,cp.company_cin_no,cp.com_pan_no," +
       "to_char(convert_tz(cup.incorporation_dt,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') Inc_Date,cup.pf_no," +
       "to_char(convert_tz(cup.pf_regdt,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') PF_Reg_Date,cup.pf_signame," +
       "nvl((udp.FIRST_NAME||''||udp.MIDDLE_NAME|| ''|| udp.LAST_NAME)) as PF_Sig_Name,nvl(pf.master_name, '-') PF_Sig_Designation," +
       "nvl((udp.f_FIRSTNAME|| ''|| udp.f_MIDDLENAME||''|| udp.f_LASTNAME)) as PF_Sig_Father_Name,nvl(udp.per_address,'-') as pf_per_address,cup.pf_samerule," +
       "cup.esi_no,to_char(convert_tz(cup.esi_regdt,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') ESI_Reg_Date," +
       "cup.esi_signame,cup.esi_sapf,nvl((ude.FIRST_NAME||''|| ude.MIDDLE_NAME|| ''|| ude.LAST_NAME)) as ESI_Sig_Name," +
       "nvl(esi.master_name, '-') ESI_Sig_Designation,nvl((ude.f_FIRSTNAME||''|| ude.f_MIDDLENAME||''|| ude.f_LASTNAME)) as ESI_Sig_Father_Name," +
       "cup.pt_no,to_char(convert_tz(cup.pt_regdt,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') PT_Reg_Date,cup.pt_signame," +
       "nvl((udpt.FIRST_NAME||''|| udpt.MIDDLE_NAME||''|| udpt.LAST_NAME)) as PT_Sig_Name,nvl(pt.master_name, '-') PT_Sig_Designation," +
       "nvl((udpt.f_FIRSTNAME|| ''|| udpt.f_MIDDLENAME|| ''|| udpt.f_LASTNAME)) as PT_Sig_Father_Name,cup.it_tanno,cup.it_tancircle," +
       "cup.it_cit,cup.it_sapt,cup.it_signame,nvl(udit.per_address,'-') as it_per_address,nvl(udit.per_state,'-') as it_per_state,nvl(udit.per_pincode,'-') it_per_pincode," +
       "nvl(udit.pan_id,'-')pan_id,nvl(udit.con_number,'-') con_number," +
       "nvl((udit.FIRST_NAME|| ''|| udit.MIDDLE_NAME|| ''|| udit.LAST_NAME)) as IT_Sig_Name,nvl(it.master_name, '-') IT_Sig_Designation," +
       "nvl((udit.f_FIRSTNAME|| ''|| udit.f_MIDDLENAME|| ''|| udit.f_LASTNAME)) IT_Sig_Father_Name,cup.ll_act LL_Act," +
       "cup.ll_sapf,cup.ll_signame,nvl((udll.FIRST_NAME||''|| udll.MIDDLE_NAME|| ''|| udll.LAST_NAME)) as LL_Sig_Name,nvl(udll.per_address) as ll_per_address," +
       "nvl(ll.master_name, '-') LL_Sig_Designation, nvl((udll.f_FIRSTNAME||''|| udll.f_MIDDLENAME||''|| udll.f_LASTNAME)) as LL_Sig_Father_Name,cup.ll_act1 LL_Act1," +
       "cup.ll_sapf1,cup.ll_signame1,nvl((udll1.FIRST_NAME||''|| udll1.MIDDLE_NAME|| ''|| udll1.LAST_NAME)) as LL_Sig_Name1,nvl(udll1.per_address) as ll_per_address1," +
       "nvl(ll1.master_name, '-') LL_Sig_Designation1, nvl((udll1.f_FIRSTNAME|| ''|| udll1.f_MIDDLENAME|| ''|| udll1.f_LASTNAME)) as LL_Sig_Father_Name1,cup.ll_act2 LL_Act2" +
       ",cup.ll_signame2,nvl((udll2.FIRST_NAME||''|| udll2.MIDDLE_NAME|| ''|| udll2.LAST_NAME)) as LL_Sig_Name2,nvl(udll2.per_address) as ll_per_address2," +
       "nvl(ll2.master_name, '-') LL_Sig_Designation2, nvl((udll2.f_FIRSTNAME|| ''|| udll2.f_MIDDLENAME|| ''|| udll2.f_LASTNAME)) as LL_Sig_Father_Name2 " +
       "FROM company_unit_profile cup " +
       "left outer JOIN company_profile cp on cup.Company_profile_id = cp.Company_Profile_Id " +
       "left outer JOIN user_details udp on cup.pf_signame = udp.vch_num " +
       "left outer JOIN master_setting pf on udp.designation = pf.master_id and pf.type = 'MDG' " +
       "left outer JOIN user_details ude on cup.esi_signame = ude.vch_num " +
       "left outer JOIN master_setting esi on ude.designation = esi.master_id and esi.type = 'MDG' " +
       "left OUTER JOIN user_details udpt on cup.pt_signame = udpt.vch_num " +
       "left outer JOIN master_setting pt on udpt.designation = pt.master_id and pt.type = 'MDG' " +
       "left outer JOIN user_details udit on cup.it_signame = udit.vch_num " +
       "left outer JOIN master_setting it on udit.designation = it.master_id and it.type = 'MDG' " +
       "left outer JOIN user_details udll on cup.ll_signame = udll.vch_num " +
       "left outer JOIN master_setting ll on udll.designation = ll.master_id and ll.type = 'MDG' " +
       "left outer JOIN user_details udll1 on cup.ll_signame1 = udll1.vch_num " +
       "left outer JOIN master_setting ll1 on udll1.designation = ll1.master_id and ll1.type = 'MDG' " +
       "left outer JOIN user_details udll2 on cup.ll_signame2 = udll2.vch_num " +
       "left outer JOIN master_setting ll2 on udll2.designation = ll2.master_id and ll2.type = 'MDG' " +
       "where concat(cup.company_profile_id,cup.cup_id)='" + URL + "'";
                        DataTable dtreg = sgen.getdata(userCode, mq);
                        if (dtreg.Rows.Count > 0)
                        {
                            #region ddl1
                            try
                            {
                                mq = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
                                if (!role_mst.ToUpper().Equals("OWNER")) where = " and company_profile_id in ('" + mq.Replace(",", "','") + "')";
                                DataTable dtcomp = new DataTable();
                                mq = "SELECT Company_Profile_Id, company_name||company_profile_id as nameid FROM company_profile where type='CP' " + where + "";
                                dtcomp = sgen.getdata(userCode, mq);
                                foreach (DataRow dr in dtcomp.Rows)
                                {
                                    mod1.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["company_profile_id"].ToString() });
                                }
                            }
                            catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
                            #endregion
                            #region ddl2
                            DataTable dtunit = new DataTable();
                            string mq0 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                            if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq0.Replace(",", "','") + "')";
                            mq1 = "SELECT cup_id,unit_name||cup_Id as nameid FROM company_unit_profile where company_profile_id='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "'" + where + "";
                            dtunit = sgen.getdata(userCode, mq1);
                            if (dtunit.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dtunit.Rows)
                                {
                                    mod2.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                                }
                            }
                            #endregion
                            #region TEMPDATA Tlist
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                            #endregion
                            String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["company_profile_id"].ToString()).Distinct()).Split(',');
                            String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["cup_id"].ToString()).Distinct()).Split(',');
                            model[0].SelectedItems1 = L1;
                            model[0].SelectedItems2 = L2;
                            model[0].Col17 = dtreg.Rows[0]["inc_date"].ToString();
                            model[0].Col18 = dtreg.Rows[0]["company_cin_no"].ToString();
                            model[0].Col19 = dtreg.Rows[0]["com_pan_no"].ToString();
                            model[0].Col20 = dtreg.Rows[0]["it_tanno"].ToString();
                            model[0].Col21 = dtreg.Rows[0]["it_tancircle"].ToString();
                            model[0].Col22 = dtreg.Rows[0]["it_cit"].ToString();
                            model[0].Col48 = dtreg.Rows[0]["it_signame"].ToString();
                            model[0].Col23 = dtreg.Rows[0]["it_sig_name"].ToString();
                            model[0].Col24 = dtreg.Rows[0]["it_sig_designation"].ToString();
                            model[0].Col25 = dtreg.Rows[0]["it_sig_father_name"].ToString();
                            model[0].Col26 = dtreg.Rows[0]["it_sigadd"].ToString();
                            model[0].Col27 = dtreg.Rows[0]["it_sigpincode"].ToString();
                            model[0].Col28 = dtreg.Rows[0]["it_sigpan"].ToString();
                            model[0].Col29 = dtreg.Rows[0]["it_sigph"].ToString();
                            model[0].Col30 = dtreg.Rows[0]["ll_act"].ToString();
                            model[0].Col47 = dtreg.Rows[0]["ll_signame"].ToString();
                            model[0].Col31 = dtreg.Rows[0]["ll_sig_name"].ToString();
                            model[0].Col32 = dtreg.Rows[0]["ll_sig_designation"].ToString();
                            model[0].Col33 = dtreg.Rows[0]["esi_sig_father_name"].ToString();
                            model[0].Col34 = dtreg.Rows[0]["ll_per_address"].ToString();
                            model[0].Col35 = dtreg.Rows[0]["ll_act1"].ToString();
                            model[0].Col46 = dtreg.Rows[0]["ll_signame1"].ToString();
                            model[0].Col36 = dtreg.Rows[0]["ll_sig_name1"].ToString();
                            model[0].Col37 = dtreg.Rows[0]["ll_sig_designation1"].ToString();
                            model[0].Col38 = dtreg.Rows[0]["esi_sig_father_name1"].ToString();
                            model[0].Col39 = dtreg.Rows[0]["ll_per_address1"].ToString();
                            model[0].Col40 = dtreg.Rows[0]["ll_act2"].ToString();
                            model[0].Col45 = dtreg.Rows[0]["ll_signame2"].ToString();
                            model[0].Col41 = dtreg.Rows[0]["ll_sig_name2"].ToString();
                            model[0].Col42 = dtreg.Rows[0]["ll_sig_designation2"].ToString();
                            model[0].Col43 = dtreg.Rows[0]["esi_sig_father_name2"].ToString();
                            model[0].Col44 = dtreg.Rows[0]["ll_per_address2"].ToString();
                        }
                    }
                    else
                    {
                        mq = "SELECT emp.vch_num,emp.cur_address,emp.f_name,(emp.first_name||''||replace(emp.middle_name,'0','')||''||emp.last_name) as Name," +
                            "msdg.master_name as designation,emp.pan_no,emp.cur_pincode,emp.contact_no FROM emp_master emp join master_setting msdg on emp.emp_desig = msdg.master_id and msdg.type='MDG'" +
                            "where (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type)='" + URL + "'";
                        DataTable dtreg = sgen.getdata(userCode, mq);
                        if (dtreg.Rows.Count > 0)
                        {
                            if (btnval == "ITSIG")
                            {
                                model[0].Col23 = dtreg.Rows[0]["name"].ToString();
                                model[0].Col24 = dtreg.Rows[0]["designation"].ToString();
                                model[0].Col25 = dtreg.Rows[0]["f_name"].ToString();
                                model[0].Col26 = dtreg.Rows[0]["cur_address"].ToString();
                                model[0].Col27 = dtreg.Rows[0]["cur_pincode"].ToString();
                                model[0].Col28 = dtreg.Rows[0]["pan_no"].ToString();
                                model[0].Col29 = dtreg.Rows[0]["contact_no"].ToString();
                                model[0].Col48 = dtreg.Rows[0]["vch_num"].ToString();
                            }
                            else if (btnval == "LLSIG")
                            {
                                model[0].Col31 = dtreg.Rows[0]["name"].ToString();
                                model[0].Col32 = dtreg.Rows[0]["designation"].ToString();
                                model[0].Col33 = dtreg.Rows[0]["f_name"].ToString();
                                model[0].Col34 = dtreg.Rows[0]["cur_address"].ToString();
                                model[0].Col47 = dtreg.Rows[0]["vch_num"].ToString();
                            }
                            else if (btnval == "LLSIG1")
                            {
                                model[0].Col36 = dtreg.Rows[0]["name"].ToString();
                                model[0].Col37 = dtreg.Rows[0]["designation"].ToString();
                                model[0].Col38 = dtreg.Rows[0]["f_name"].ToString();
                                model[0].Col39 = dtreg.Rows[0]["cur_address"].ToString();
                                model[0].Col46 = dtreg.Rows[0]["vch_num"].ToString();
                            }
                            else if (btnval == "LLSIG2")
                            {
                                model[0].Col41 = dtreg.Rows[0]["name"].ToString();
                                model[0].Col42 = dtreg.Rows[0]["designation"].ToString();
                                model[0].Col43 = dtreg.Rows[0]["f_name"].ToString();
                                model[0].Col44 = dtreg.Rows[0]["cur_address"].ToString();
                                model[0].Col45 = dtreg.Rows[0]["vch_num"].ToString();
                            }
                        }
                    }
                    break;
                #endregion
                #region v_form
                case "v_form":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "STATUS":
                            DataTable dtreg = new DataTable();
                            mq = "select vm.rec_id,vm.chkvalue,vm.chkvalue1,vm.vch_num,vm.ent_by,vm.ent_date," +
                                "vm.client_id,vm.client_unit_id,vm.type,vm.col1,vm.col2,vm.col3,vm.col7,vm.col12," +
                                "vm.col25,vm.col8,vm.col28,vm.col29,vm.col39,vm.col30,vm.col31," +
                                "to_char(convert_tz(vm.date1,'+00:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as date1," +
                                "to_char(convert_tz(vm.date2,'+00:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as date2 from vehicle_master vm " +
                                "where vm.client_id|| vm.client_unit_id||vm.vch_num||to_char(vm.vch_date, 'yyyymmdd')|| vm.type ='" + URL + "'";
                            dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                if (btnval == "EDIT") model[0].Col16 = dtreg.Rows[0]["vch_num"].ToString();
                                model[0].Col22 = dtreg.Rows[0]["col1"].ToString();
                                model[0].Col23 = dtreg.Rows[0]["col2"].ToString();
                                model[0].Col25 = dtreg.Rows[0]["col3"].ToString();
                                model[0].Col26 = dtreg.Rows[0]["col7"].ToString();
                                if (btnval == "EDIT")
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                                    model[0].Col1 = dtreg.Rows[0]["client_id"].ToString();
                                    model[0].Col2 = dtreg.Rows[0]["client_unit_id"].ToString();
                                    model[0].Col3 = dtreg.Rows[0]["ent_by"].ToString();
                                    model[0].Col4 = dtreg.Rows[0]["ent_date"].ToString();
                                    model[0].Col7 = dtreg.Rows[0]["rec_id"].ToString();
                                    model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                    model[0].Col13 = "Update";
                                    model[0].Col100 = "Update & New";
                                    string filepath = Convert.ToString(dtreg.Rows[0]["col39"]);
                                    string output2 = Server.MapPath("~/Uploads/") + cg_com_name.Replace(" ", "") + "/" + filepath;
                                    FileInfo info2 = new FileInfo(output2);
                                    //Byte[] bytes2 = File.ReadAllBytes(output2);
                                    //string base64String2 = Convert.ToBase64String(bytes2, 0, bytes2.Length);
                                    sgen.SetSession(MyGuid, "CapturedImage", filepath);
                                    //imgCapture.ImageUrl = "data:image/png;base64," + base64String2;
                                    model[0].Col30 = dtreg.Rows[0]["col12"].ToString();
                                    model[0].Col24 = dtreg.Rows[0]["col25"].ToString();
                                    if (mid_mst == "checkinentry")
                                    {
                                        //meettime.Visible = true;
                                        model[0].Col27 = dtreg.Rows[0]["date1"].ToString();
                                        model[0].Col28 = dtreg.Rows[0]["date2"].ToString();
                                        sgen.SetSession(MyGuid, "status1", dtreg.Rows[0]["col30"].ToString());
                                        sgen.SetSession(MyGuid, "status2", dtreg.Rows[0]["col31"].ToString());
                                    }
                                    if (mid_mst == "25001" || mid_mst == "8008.1")
                                    {
                                        model[0].Col27 = dtreg.Rows[0]["date1"].ToString();
                                    }
                                    if (Convert.ToBoolean(dtreg.Rows[0]["chkvalue"]) == true)
                                    {
                                        model[0].Col17 = "0";
                                        dt = new DataTable();
                                        string query1 = "select class from add_class where type='EAC' and add_class_id='" + dtreg.Rows[0]["col28"].ToString() + "'";
                                        dt = sgen.getdata(userCode, query1);
                                        if (dt.Rows.Count > 0)
                                        {
                                            model[0].Col19 = dt.Rows[0]["class"].ToString();
                                            model[0].Col43 = dtreg.Rows[0]["col28"].ToString();
                                        }
                                        DataTable dt2 = new DataTable();
                                        string query2 = "select master_name from master_setting where type='ECS' and master_id='" + dtreg.Rows[0]["col29"].ToString() + "'";
                                        dt2 = sgen.getdata(userCode, query2);
                                        if (dt2.Rows.Count > 0)
                                        {
                                            model[0].Col20 = dt2.Rows[0]["master_name"].ToString();
                                            model[0].Col44 = dtreg.Rows[0]["col29"].ToString();
                                        }
                                        DataTable dt3 = new DataTable();
                                        string query3 = "select first_name||' '||middle_name||' '||last_name as name,vch_num from user_details where type='STD' and vch_num='" + dtreg.Rows[0]["col8"].ToString() + "'";
                                        dt3 = sgen.getdata(userCode, query3);
                                        if (dt3.Rows.Count > 0)
                                        {
                                            model[0].Col21 = dt3.Rows[0]["name"].ToString();
                                            model[0].Col42 = dt3.Rows[0]["vch_num"].ToString();
                                        }
                                    }
                                    else
                                    {
                                        model[0].Col17 = "1";
                                        // showhidemethod(null, null);
                                        dt = new DataTable();
                                        dt = sgen.getdata(userCode, "select master_name from master_setting where type='MDP' and master_id='" + dtreg.Rows[0]["col28"].ToString() + "'");
                                        if (dt.Rows.Count > 0)
                                        {
                                            model[0].Col19 = dt.Rows[0]["master_name"].ToString();
                                        }
                                        DataTable dt2 = new DataTable();
                                        dt2 = sgen.getdata(userCode, "select master_name from master_setting where type='MDG' and master_id='" + dtreg.Rows[0]["col29"].ToString() + "'");
                                        if (dt2.Rows.Count > 0)
                                        {
                                            model[0].Col20 = dt2.Rows[0]["master_name"].ToString();
                                        }
                                        DataTable dt3 = new DataTable();
                                        dt3 = sgen.getdata(userCode, "select first_name||' '||middle_name||' '||last_name as name,vch_num from user_details where type='CPR' and vch_num='" + dtreg.Rows[0]["col8"].ToString() + "'");
                                        if (dt3.Rows.Count > 0)
                                        {
                                            model[0].Col21 = dt3.Rows[0]["name"].ToString();
                                            model[0].Col42 = dt3.Rows[0]["vch_num"].ToString();
                                        }
                                    }
                                    if (Convert.ToBoolean(dtreg.Rows[0]["chkvalue1"]) == true) model[0].Col17 = "0";
                                    else model[0].Col18 = "1";
                                }
                            }
                            else
                            {
                                sgen.showmsg(1, "No Data Found", 1);
                            }
                            break;
                        case "PERSON":
                            mq = "select ud.client_id||ud.client_unit_id||ud.vch_num||to_char(ud.vch_date,'yyyymmdd')||ud.type as fstr,ac.class as Class,ms.master_id,ac.add_class_id,ms.master_name as Section,ud.first_name||' '|| replace(ud.middle_name,'0','')||' '||replace(ud.last_name,'0','') as Name,ud.vch_num from user_details ud, " +
                                "add_class ac,master_setting ms where ud.client_id||ud.client_unit_id||ud.vch_num||to_char(ud.vch_date,'yyyymmdd')||ud.type = '" + URL + "' and ud.class_applied= ac.add_class_id and find_in_set(ud.client_unit_id, ac.client_unit_id)=1 and ac.type= 'EAC' and ms.type= 'ECS' and ms.master_id= ud.section and find_in_set(ms.client_unit_id, ud.client_unit_id)=1";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col19 = dt.Rows[0]["Class"].ToString();
                                model[0].Col20 = dt.Rows[0]["Section"].ToString();
                                model[0].Col21 = dt.Rows[0]["Name"].ToString();
                                model[0].Col42 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col43 = dt.Rows[0]["add_class_id"].ToString();
                                model[0].Col44 = dt.Rows[0]["master_id"].ToString();
                            }
                            break;
                        case "PERSON1":
                            mq = "select ud.client_id||ud.client_unit_id||ud.vch_num||to_char(ud.vch_date,'yyyymmdd')||ud.type as fstr,ud.first_name||' '||replace(ud.middle_name,'0','')||' '||replace(ud.last_name,'0','') as Name,ms.master_name as Department" +
                                ",ms.master_id dpid,ud.vch_num,ms1.master_id dgid,ms1.master_name as Designation from user_details ud,master_setting ms,master_setting ms1 where ud.client_id||ud.client_unit_id||ud.vch_num||to_char(ud.vch_date,'yyyymmdd')||ud.type = '" + URL + "' and " +
                                "find_in_set(ud.client_unit_id,ms.client_unit_id)=1 and find_in_set(ud.client_unit_id,ms1.client_unit_id)=1 and ms.type='MDP' and ms1.type='MDG' and ud.department=ms.master_id and ud.designation=ms1.master_id";
                            DataTable dt1 = sgen.getdata(userCode, mq);
                            if (dt1.Rows.Count > 0)
                            {
                                model[0].Col19 = dt1.Rows[0]["Department"].ToString();
                                model[0].Col20 = dt1.Rows[0]["Designation"].ToString();
                                model[0].Col21 = dt1.Rows[0]["Name"].ToString();
                                model[0].Col42 = dt1.Rows[0]["vch_num"].ToString();
                                model[0].Col43 = dt1.Rows[0]["dpid"].ToString();
                                model[0].Col44 = dt1.Rows[0]["dgid"].ToString();
                            }
                            break;
                        default:
                            sgen.showmsg(1, "No Data Found", 1);
                            break;
                    }
                    break;
                #endregion
                #region assingn to client
                case "asn_to_client":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            DataTable dtreg = new DataTable();
                            mq = "select client_id,client_unit_id,ent_by,ent_date,col1,col2,col3,col4,col25,vch_num,to_char(convert_tz(date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as date1,to_char(convert_tz(date2,'+00:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as date2,to_char(convert_tz(date3,'+00:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as date3,to_char(convert_tz(date4,'+00:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as date4 from vehicle_master where client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')|| type='" + URL + "'";
                            dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                #region 1.Bind assignment
                                mod1 = new List<SelectListItem>();
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.assignment(userCode, unitid_mst);


                                #endregion
                                #region 2.Bind clients
                                mod2 = new List<SelectListItem>();
                                dt = new DataTable();
                                string mquery1 = "select vch_num,cg_id from clients_mst where type='CUU' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                                dt = sgen.getdata(userCode, mquery1);
                                foreach (DataRow dr in dt.Rows)
                                {
                                    mod2.Add(new SelectListItem { Text = dr["cg_id"].ToString(), Value = dr["vch_num"].ToString() });
                                }

                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                #endregion
                                model[0].Col16 = dtreg.Rows[0]["vch_num"].ToString();
                                String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].Col18 = dtreg.Rows[0]["col25"].ToString();
                                model[0].Col18 = dtreg.Rows[0]["col25"].ToString();
                                model[0].Col17 = dtreg.Rows[0]["col2"].ToString();
                                if (dtreg.Rows[0]["col4"].ToString() == "Year")
                                {
                                    model[0].Col19 = "Year";
                                    model[0].Col20 = dtreg.Rows[0]["date1"].ToString();
                                }
                                else if (dtreg.Rows[0]["col4"].ToString() == "Quarter")
                                {
                                    model[0].Col19 = "Quarter";
                                    model[0].Col21 = dtreg.Rows[0]["date2"].ToString();
                                }
                                else if (dtreg.Rows[0]["col4"].ToString() == "Period")
                                {
                                    model[0].Col19 = "Period";
                                    model[0].Col22 = dtreg.Rows[0]["date3"].ToString();
                                    model[0].Col23 = dtreg.Rows[0]["date4"].ToString();
                                }
                                model[0].Col1 = dtreg.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtreg.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtreg.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtreg.Rows[0]["ent_date"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                            }
                            else
                            {
                                sgen.showmsg(1, "No Data Found", 1);
                            }
                            break;
                    }
                    break;
                #endregion
                #region assign report
                case "asg_rpt":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            mq = "select client_unit_id||vch_num||cat_id||to_char(vch_date,'yyyymmdd')||type as fstr" +
                                ",rec_id,ent_date,rpt_newname,ent_by,client_id,client_unit_id,type,vch_num as rpt_code,rpt_name" +
                                ",cat_id,cat_name as catagory,menu_id,module_id,module,username from reports where" +
                                " client_id||client_unit_id||vch_num||cat_id||to_char(vch_date,'yyyymmdd')||type = '" + URL + "'";
                            #region 1.users
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.username(userCode);


                            #endregion
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dt.Rows[0]["rec_id"].ToString();
                                model[0].Col7 = dt.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||vch_num||cat_id|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col13 = "Update";
                                model[0].dt1 = model[0].dt1.Clone();
                                String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["username"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["SNo"] = i + 1;
                                    dr["RPT_CODE"] = dt.Rows[i]["rpt_code"].ToString();
                                    dr["RPT_NAME"] = dt.Rows[i]["rpt_name"].ToString();
                                    dr["CAT_ID"] = dt.Rows[i]["cat_id"].ToString();
                                    dr["CATAGORY"] = dt.Rows[i]["catagory"].ToString();
                                    dr["MENU_ID"] = dt.Rows[i]["menu_id"].ToString();
                                    dr["MODULE_ID"] = dt.Rows[i]["module_id"].ToString();
                                    dr["RPT_NEW_NAME"] = dt.Rows[i]["rpt_newname"].ToString();
                                    dr["MODULE"] = dt.Rows[i]["module"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            break;
                        case "REPORTS":
                            mq = "select client_unit_id||vch_num||cat_id as fstr," +
                                "vch_num as rpt_code,(case when rpt_newname <> '' then rpt_newname when rpt_newname <> '-' then rpt_newname when rpt_newname <> null then rpt_newname else rpt_name end)" +
                                " new_name,rpt_name,cat_id,cat_name as catagory,menu_id,module_id,module " +
                                "from reports where client_id||client_unit_id||vch_num||cat_id||to_char(vch_date,'yyyymmdd')||type in ('" + URL + "')";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                if (model[0].dt1.Rows[0]["RPT_CODE"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["Report"] = dt.Rows[i]["fstr"].ToString();
                                    dr["SNo"] = i + 1;
                                    dr["RPT_CODE"] = dt.Rows[i]["rpt_code"].ToString();
                                    dr["RPT_NAME"] = dt.Rows[i]["rpt_name"].ToString();
                                    dr["RPT_NEW_NAME"] = dt.Rows[i]["new_name"].ToString();
                                    dr["CAT_ID"] = dt.Rows[i]["cat_id"].ToString();
                                    dr["CATAGORY"] = dt.Rows[i]["catagory"].ToString();
                                    dr["MENU_ID"] = dt.Rows[i]["menu_id"].ToString();
                                    dr["MODULE_ID"] = dt.Rows[i]["module_id"].ToString();
                                    dr["MODULE"] = dt.Rows[i]["module"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            break;
                    }
                    break;
                #endregion
                #region leave config
                case "leave_config":
                    string v_credit = "N", v_proration = "N", v_cutoff = "N", v_carry_frwrd = "N", v_encashable = "N", v_unavaleave = "N", v_attachment = "N",
v_lwoff = "N", v_lph = "N", v_lppwoff = "N", v_lpph = "N", v_lpswoff = "N", v_lpsh = "N", cantclubbed = "", criteriatype = "";
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            mq = "SELECT col1,col2,col3,col4,col6,col8,col9,col10,col11,col12,col13,col14,col15,col16,col17,col18,col19,col20,col21,col22," +
                           "col23,col24,col25,col26,col27,col28,col29,col30,col31,col32,col33,col34,col35,col36,col37,col38,col39,col40,client_id," +
                           "client_unit_id,ent_by,rec_id,ent_date,vch_num,vch_date from kc_tab where " +
                           "(client_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            DataTable dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                #region ddls
                                DataTable dtu = new DataTable();
                                mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                                if (role_mst.ToUpper().Equals("OWNER")) cond = "where unit_status='1'";
                                else cond = "where cup_id in ('" + mq1.Replace(",", "','") + "') and unit_status='1'";
                                mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as name FROM company_unit_profile " + cond + "";
                                dtu = sgen.getdata(userCode, mq);
                                foreach (DataRow dr in dtu.Rows)
                                {
                                    mod1.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["cup_id"].ToString() });
                                }
                                mod2.Add(new SelectListItem { Text = "Days", Value = "001" });
                                mod2.Add(new SelectListItem { Text = "Days From Join Date", Value = "002" });
                                mod2.Add(new SelectListItem { Text = "Monthly", Value = "003" });
                                mod2.Add(new SelectListItem { Text = "Month From Join Date", Value = "004" });
                                mod2.Add(new SelectListItem { Text = "Quarterly", Value = "005" });
                                mod2.Add(new SelectListItem { Text = "Quarter From Join Date", Value = "006" });
                                mod2.Add(new SelectListItem { Text = "Half Yearly", Value = "007" });
                                mod2.Add(new SelectListItem { Text = "Half Year From Join Date", Value = "008" });
                                mod2.Add(new SelectListItem { Text = "Yearly", Value = "009" });
                                mod2.Add(new SelectListItem { Text = "Year From Join Date", Value = "010" });
                                mod3.Add(new SelectListItem { Text = "First Day", Value = "001" });
                                mod3.Add(new SelectListItem { Text = "Last Day", Value = "002" });
                                mod4.Add(new SelectListItem { Text = "Flat", Value = "001" });
                                mod4.Add(new SelectListItem { Text = "Slab", Value = "002" });
                                mod5.Add(new SelectListItem { Text = "Days", Value = "001" });
                                mod5.Add(new SelectListItem { Text = "Month", Value = "002" });
                                mod5.Add(new SelectListItem { Text = "Quarter", Value = "003" });
                                mod5.Add(new SelectListItem { Text = "Half Year", Value = "004" });
                                mod5.Add(new SelectListItem { Text = "Year", Value = "005" });
                                mod6.Add(new SelectListItem { Text = "Days", Value = "001" });
                                mod6.Add(new SelectListItem { Text = "Month", Value = "002" });
                                mod6.Add(new SelectListItem { Text = "Quarter", Value = "003" });
                                mod6.Add(new SelectListItem { Text = "Half Year", Value = "004" });
                                mod6.Add(new SelectListItem { Text = "Year", Value = "005" });
                                mq = "select vch_num,col1 from kc_tab where type='KLV' and client_id='" + clientid_mst + "' ";
                                DataTable ddl7 = sgen.getdata(userCode, mq);
                                foreach (DataRow dr in ddl7.Rows)
                                {
                                    mod7.Add(new SelectListItem { Text = dr["col1"].ToString(), Value = dr["vch_num"].ToString() });
                                }
                                mod8.Add(new SelectListItem { Text = "Applicable To", Value = "001" });
                                mod8.Add(new SelectListItem { Text = "Type Of Employee", Value = "002" });
                                mod8.Add(new SelectListItem { Text = "Department", Value = "003" });
                                mod8.Add(new SelectListItem { Text = "Location", Value = "004" });
                                mod8.Add(new SelectListItem { Text = "Cost Center", Value = "005" });
                                mod8.Add(new SelectListItem { Text = "Level", Value = "006" });
                                mod8.Add(new SelectListItem { Text = "Designation", Value = "007" });
                                mod8.Add(new SelectListItem { Text = "ESI Employee", Value = "008" });

                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                                #endregion

                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dtreg.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtreg.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtreg.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtreg.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dtreg.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Col16 = dtreg.Rows[0]["vch_num"].ToString().Trim();
                                model[0].Col17 = dtreg.Rows[0]["col1"].ToString();
                                model[0].Col18 = dtreg.Rows[0]["col2"].ToString();
                                model[0].Col19 = dtreg.Rows[0]["col3"].ToString();
                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                String[] L3 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col6"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;
                                String[] L4 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col11"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems4 = L4;
                                String[] L5 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col28"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems5 = L5;
                                String[] L6 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col31"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems6 = L6;
                                String[] L8 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col38"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems8 = L8;
                                String[] L7 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col39"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems7 = L7;
                                DataTable dtl = new DataTable();
                                if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals("001"))
                                {
                                    mq = "select '001' as master_id,'Male' as master_name from dual UNION ALL select '002' as master_id,'Female' as master_name  from dual UNION ALL " +
                                        "SELECT '003' as master_id,'General' as master_name from dual";
                                }
                                else if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals("002"))
                                {
                                    mq = "select master_id,master_name from master_setting where type='KET'" + model[0].Col11 + "";
                                }
                                else if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals("003"))
                                {
                                    mq = "select master_id,master_name from master_setting where type='MDP'";
                                }
                                else if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals("007"))
                                {
                                    mq = "select master_id,master_name from master_setting where type='MDG'";
                                }
                                else
                                {
                                    mq = "select '0' as master_id,'name' as master_name from dual where type='MDG'";

                                }
                                dtl = sgen.getdata(userCode, mq);
                                foreach (DataRow dr in dtl.Rows)
                                {
                                    mod9.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                }
                                String[] L9 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col40"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems9 = L9;
                                model[0].Col20 = dtreg.Rows[0]["col8"].ToString();
                                v_credit = dtreg.Rows[0]["col9"].ToString();
                                if (v_credit.Trim().Equals("Y")) model[0].Chk1 = true;
                                v_proration = dtreg.Rows[0]["col10"].ToString();
                                if (v_proration.Trim().Equals("Y")) model[0].Chk3 = true;
                                v_cutoff = dtreg.Rows[0]["col12"].ToString();
                                if (v_cutoff.Trim().Equals("Y")) model[0].Chk4 = true;
                                v_carry_frwrd = dtreg.Rows[0]["col13"].ToString();
                                if (v_carry_frwrd.Trim().Equals("Y")) model[0].Chk14 = true;
                                v_encashable = dtreg.Rows[0]["col14"].ToString();
                                if (v_encashable.Trim().Equals("Y")) model[0].Chk15 = true;
                                model[0].Col21 = dtreg.Rows[0]["col15"].ToString();
                                model[0].Col22 = dtreg.Rows[0]["col16"].ToString();
                                model[0].Col23 = dtreg.Rows[0]["col17"].ToString();
                                model[0].Col24 = dtreg.Rows[0]["col18"].ToString();
                                model[0].Col25 = dtreg.Rows[0]["col19"].ToString();
                                model[0].Col26 = dtreg.Rows[0]["col20"].ToString();
                                model[0].Col27 = dtreg.Rows[0]["col21"].ToString();
                                model[0].Col28 = dtreg.Rows[0]["col22"].ToString();
                                v_unavaleave = dtreg.Rows[0]["col23"].ToString();
                                if (v_unavaleave.Trim().Equals("Y")) model[0].Chk5 = true;
                                model[0].Col29 = dtreg.Rows[0]["col24"].ToString();
                                model[0].Col30 = dtreg.Rows[0]["col25"].ToString();
                                v_attachment = dtreg.Rows[0]["col26"].ToString();
                                if (v_attachment.Trim().Equals("Y")) model[0].Chk6 = true;
                                model[0].Col31 = dtreg.Rows[0]["col27"].ToString();
                                model[0].Col32 = dtreg.Rows[0]["col29"].ToString();
                                model[0].Col33 = dtreg.Rows[0]["col30"].ToString();
                                v_lwoff = dtreg.Rows[0]["col32"].ToString();
                                if (v_lwoff.Trim().Equals("Y")) model[0].Chk7 = true;
                                v_lph = dtreg.Rows[0]["col33"].ToString();
                                if (v_lph.Trim().Equals("Y")) model[0].Chk8 = true;
                                v_lppwoff = dtreg.Rows[0]["col34"].ToString();
                                if (v_lppwoff.Trim().Equals("Y")) model[0].Chk9 = true;
                                v_lpph = dtreg.Rows[0]["col35"].ToString();
                                if (v_lpph.Trim().Equals("Y")) model[0].Chk10 = true;
                                v_lpswoff = dtreg.Rows[0]["col36"].ToString();
                                if (v_lpswoff.Trim().Equals("Y")) model[0].Chk11 = true;
                                v_lpsh = dtreg.Rows[0]["col37"].ToString();
                                if (v_lpsh.Trim().Equals("Y")) model[0].Chk12 = true;
                            }
                            break;
                        case "FORMULA":
                            {
                                model[0].Col23 = URL;
                            }
                            break;
                    }
                    break;
                #endregion
                #region salary grade
                case "salary_grade":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "DETAIL":
                            //mq = "select (DISTINCT col1) dept,col2,GROUP_CONCAT(DISTINCT col3) desig,ent_by,ent_date,vch_num,client_id,rec_id,client_unit_id from enx_tab" +
                            //    " where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "' group by col2,ent_by,ent_date,vch_num,client_id,client_unit_id";
                            mq = "select distinct vch_num,col2 as grade,group_concat(DISTINCT col1) dept,group_concat(DISTINCT col3) desig,ent_by,ent_date,vch_num,client_id,rec_id,client_unit_id from enx_tab where (client_id|| client_unit_id || vch_num || to_char(vch_date, 'yyyymmdd') || type)= '" + URL + "' group by col2,ent_by" +
                                ",ent_date,vch_num,client_id,client_unit_id,to_char(vch_date, 'yyyymmdd'),rec_id";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                #region DDLS
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.grade(userCode, unitid_mst);

                                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.desig(userCode, unitid_mst);

                                #endregion
                                model = getedit(model, dt, URL);
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["grade"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["dept"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                String[] L3 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["desig"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;
                            }
                            break;
                    }
                    break;
                #endregion
                #region salary componants
                case "sal_comp":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            string paidcomp = "N", component = "", taxable = "", taxdistributed = "N", isFBP = "N", Attdep = "N", poCTC = "N",
                                createdepcom = "N", active = "N", isFSS = "N", payableLOP = "N", pogross = "N", poPFgross = "N", poESIgros = "N",
                                poPTgross = "N", poarrear = "N", carryforward = "N", iseditable = "N", poLWFgross = "N", isprofessionaltax = "N";
                            DataTable dtreg = new DataTable();
                            mq = "select col1,col2,col3,col4,col7,col8,col9,col10,col11,col12,col13,col14,col15,col18,col19,col20,col21,col25,col28,col29,col30,col31," +
                                "col32,col33,col34,col36,col37,col38,col39,col40,col41,col42,col43,col44,col45,cur_country,cur_city,cur_district,cur_tehsil,cur_village," +
                                "to_char(date1, '" + sgen.Getsqldateformat() + "') date1,to_char(date2,'" + sgen.Getsqldateformat() + "') date2,ent_by,rec_id,ent_date,vch_num,client_id,client_unit_id " +
                                "from vehicle_master where (client_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";

                            dtreg = sgen.getdata(userCode, mq);
                            #region DDLS
                            mod1 = new List<SelectListItem>();
                            mod2 = new List<SelectListItem>();
                            mod3 = new List<SelectListItem>();
                            mod4 = new List<SelectListItem>();
                            mod5 = new List<SelectListItem>();
                            mod6 = new List<SelectListItem>();
                            mod7 = new List<SelectListItem>();
                            mod8 = new List<SelectListItem>();
                            mod9 = new List<SelectListItem>();
                            mod10 = new List<SelectListItem>();
                            DataTable dtu = new DataTable();
                            mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                            if (role_mst.ToUpper().Equals("OWNER")) cond = "where unit_status='1'";
                            else cond = "where cup_id in ('" + mq1.Replace(",", "','") + "') and unit_status='1'";
                            mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as name FROM company_unit_profile " + cond + "";
                            dtu = sgen.getdata(userCode, mq);
                            foreach (DataRow dr in dtu.Rows)
                            {
                                mod1.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["cup_id"].ToString() });
                            }
                            mod2.Add(new SelectListItem { Text = "Standard", Value = "Standard" });
                            mod3.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                            mod3.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                            mod3.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                            mod10.Add(new SelectListItem { Text = "Earning", Value = "Earning" });
                            mod10.Add(new SelectListItem { Text = "Deduction", Value = "Deduction" });
                            mod10.Add(new SelectListItem { Text = "Over Time", Value = "Over Time" });
                            mod10.Add(new SelectListItem { Text = "Reimbursement", Value = "Reimbursement" });
                            mod10.Add(new SelectListItem { Text = "Statutory Component", Value = "Statutory Component" });
                            mod4.Add(new SelectListItem { Text = "Flat", Value = "Flat" });
                            for (int i = 1; i <= 31; i++)
                            {
                                mod5.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                            }
                            mod6.Add(new SelectListItem { Text = "Monthly", Value = "001" });
                            mod6.Add(new SelectListItem { Text = "Bi-Monthly", Value = "002" });
                            mod6.Add(new SelectListItem { Text = "Quarterly", Value = "003" });
                            mod6.Add(new SelectListItem { Text = "Half Yearly", Value = "004" });
                            mod6.Add(new SelectListItem { Text = "Yearly", Value = "005" });
                            mod7.Add(new SelectListItem { Text = "Immediately 1st Month", Value = "001" });
                            mod7.Add(new SelectListItem { Text = "Immediately 2nd Month", Value = "002" });
                            mod7.Add(new SelectListItem { Text = "Immediately 3rd Month", Value = "003" });
                            for (int i = 1; i <= 40; i++)
                            {
                                if (i.ToString().Length.Equals(1))
                                {
                                    mod8.Add(new SelectListItem { Text = i.ToString(), Value = "00" + i.ToString() });
                                }
                                else if (i.ToString().Length.Equals(2))
                                {
                                    mod8.Add(new SelectListItem { Text = i.ToString(), Value = "0" + i.ToString() });
                                }
                            }
                            mod9.Add(new SelectListItem { Text = "Days", Value = "Days" });
                            mod9.Add(new SelectListItem { Text = "Hours", Value = "Hours" });
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                            TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                            TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                            TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                            TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod10;

                            #endregion
                            if (dtreg.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dtreg.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtreg.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtreg.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtreg.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dtreg.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                String[] L3 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;
                                String[] L4 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col13"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems4 = L4;
                                String[] L5 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col14"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems5 = L5;
                                String[] L6 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["cur_city"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems6 = L6;
                                String[] L8 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col41"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems8 = L8;
                                String[] L7 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["cur_district"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems7 = L7;
                                String[] L9 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col40"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems9 = L9;
                                String[] L10 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems10 = L10;
                                model[0].Col16 = dtreg.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtreg.Rows[0]["col1"].ToString();
                                model[0].Col18 = dtreg.Rows[0]["col2"].ToString();
                                model[0].Col19 = dtreg.Rows[0]["col3"].ToString();
                                model[0].Col20 = dtreg.Rows[0]["date1"].ToString();
                                model[0].Col21 = dtreg.Rows[0]["date2"].ToString();
                                paidcomp = dtreg.Rows[0]["col8"].ToString();
                                if (paidcomp.Equals("Y")) model[0].Chk1 = true;
                                component = dtreg.Rows[0]["col9"].ToString();
                                model[0].Col23 = component;
                                taxable = dtreg.Rows[0]["col11"].ToString();
                                model[0].Col24 = taxable;
                                taxdistributed = dtreg.Rows[0]["col12"].ToString();
                                if (taxdistributed.Equals("Y")) model[0].Chk2 = true;
                                isFBP = dtreg.Rows[0]["col15"].ToString();
                                if (isFBP.Equals("Y")) model[0].Chk4 = true;
                                Attdep = dtreg.Rows[0]["col18"].ToString();
                                if (Attdep.Equals("Y")) model[0].Chk5 = true;
                                poCTC = dtreg.Rows[0]["col19"].ToString();
                                if (poCTC.Equals("Y")) model[0].Chk6 = true;
                                createdepcom = dtreg.Rows[0]["col20"].ToString();
                                if (createdepcom.Equals("Y")) model[0].Chk7 = true;
                                active = dtreg.Rows[0]["col21"].ToString();
                                if (active.Equals("Y")) model[0].Chk8 = true;
                                isFSS = dtreg.Rows[0]["col25"].ToString();
                                if (isFSS.Equals("Y")) model[0].Chk9 = true;
                                payableLOP = dtreg.Rows[0]["col28"].ToString();
                                if (payableLOP.Equals("Y")) model[0].Chk10 = true;
                                pogross = dtreg.Rows[0]["col29"].ToString();
                                if (pogross.Equals("Y")) model[0].Chk11 = true;
                                poPFgross = dtreg.Rows[0]["col30"].ToString();
                                if (poPFgross.Equals("Y")) model[0].Chk12 = true;
                                poESIgros = dtreg.Rows[0]["col31"].ToString();
                                if (poESIgros.Equals("Y")) model[0].Chk13 = true;
                                poPTgross = dtreg.Rows[0]["col32"].ToString();
                                if (poPTgross.Equals("Y")) model[0].Chk14 = true;
                                poarrear = dtreg.Rows[0]["col33"].ToString();
                                if (poarrear.Equals("Y")) model[0].Chk15 = true;
                                poLWFgross = dtreg.Rows[0]["col42"].ToString();
                                if (poLWFgross.Equals("Y")) model[0].Chk16 = true;
                                isprofessionaltax = dtreg.Rows[0]["col45"].ToString();
                                if (isprofessionaltax.Equals("Y")) model[0].Chk18 = true;
                                model[0].Col25 = dtreg.Rows[0]["col34"].ToString();
                                model[0].Col26 = dtreg.Rows[0]["col36"].ToString();
                                model[0].Col27 = dtreg.Rows[0]["col37"].ToString();
                                carryforward = dtreg.Rows[0]["col38"].ToString();
                                if (carryforward.Equals("Y")) model[0].Chk17 = true;
                                model[0].Col28 = dtreg.Rows[0]["col39"].ToString();
                                model[0].Col29 = dtreg.Rows[0]["cur_country"].ToString();
                                iseditable = dtreg.Rows[0]["cur_tehsil"].ToString();
                                if (iseditable.Equals("Y")) model[0].Chk3 = true;
                                model[0].Col22 = dtreg.Rows[0]["cur_village"].ToString();
                                model[0].Col30 = sgen.seekval(userCode, "SELECT CPNAME FROM  clients_mst where type='LDG' " +
                                    "AND VCH_NUM='" + dtreg.Rows[0]["col43"].ToString() + "' AND find_in_set(client_unit_id,'" + unitid_mst + "')=1", "CPNAME");
                                model[0].Col31 = sgen.seekval(userCode, "SELECT CPNAME FROM  clients_mst where type='LDG' " +
                                      "AND VCH_NUM='" + dtreg.Rows[0]["col44"].ToString() + "' AND find_in_set(client_unit_id,'" + unitid_mst + "')=1", "CPNAME");
                                model[0].Col33 = dtreg.Rows[0]["col44"].ToString();
                                model[0].Col32 = dtreg.Rows[0]["col43"].ToString();
                            }
                            break;
                        case "CLEDGER":
                            mq = "select vch_num as ldg_code,c_name as ldg_name from clients_mst where vch_num||to_char(vch_date,'yyyymmdd')||type = '" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col31 = dt.Rows[0]["ldg_name"].ToString();
                                model[0].Col33 = dt.Rows[0]["ldg_code"].ToString();
                            }
                            break;
                        case "DLEDGER":
                            mq = "select vch_num as ldg_code,c_name as ldg_name from clients_mst where vch_num||to_char(vch_date,'yyyymmdd')||type = '" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col30 = dt.Rows[0]["ldg_name"].ToString();
                                model[0].Col32 = dt.Rows[0]["ldg_code"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region reminder config
                case "remind_config":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select (a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||type) as fstr,a.rec_id," +
                                "a.client_unit_id,a.client_id,a.master_entby ent_by,a.master_entdate ent_date,a.master_name,a.vch_num," +
                                "a.master_id,a.classid,a.SECTIONID,a.status from master_setting a where (a.client_unit_id || " +
                                "a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type) = '" + URL + "'";
                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                URL = "001" + URL;
                                model = getedit(model, dtt, URL);
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].dt1 = model[0].dt1.Clone();
                                for (int i = 0; i < dtt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["SNo"] = i + 1;
                                    dr["Frequency_ID"] = dtt.Rows[i]["master_id"].ToString();
                                    dr["Frequency"] = dtt.Rows[i]["master_name"].ToString();
                                    dr["Reminder_Time_In_Days"] = dtt.Rows[i]["classid"].ToString();
                                    dr["Interval_In_Days"] = dtt.Rows[i]["SECTIONID"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            break;
                    }
                    break;
                #endregion
                #region employee salary advance
                case "empsal_adv":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "SELECT (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                                "a.col1,a.col2 as monthid,a.client_id,a.client_unit_id,a.col3 as MonthName,nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,a.col4 as monthyear," +
                                "a.col5 as Installment,a.col6,a.col7 as ad_Amount, col10 as Amount," +
                                "a.col8 as No_Of_Installement,a.type, col5 as EMI_Amount,to_char(a.date1,'dd/mm/yyyy') as Duedate, to_char(a.date2,'dd/mm/yyyy') as Effective_From" +
                                ", to_char(a.date3,'dd/mm/yyyy') as Effective_TO" +
                                ",a.rec_id,a.ent_by,a.ent_date,a.vch_num,a.vch_date,to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() +
                                "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining, a.col9,a.col13,to_char(a.date1,'yyyymm') as orddt,a.col12 FROM  enx_tab2 a ,emp_master emp" +
                                " left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and " +
                                "find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE a.TYPE='HAS'" +
                                "  and emp.type= 'EMP' and emp.emp_status='Y' AND a.col1=emp.vch_num and  a.client_id=emp.client_id and a.client_unit_id =emp.client_unit_id and" +
                                " (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type)='" + URL + "' order by orddt asc,a.col2 asc";

                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                #region select policy
                                DataTable dtu = new DataTable();
                                mq1 = "select DISTINCT vch_num, col2 as adv_typ from enx_tab where type='KAS' and client_unit_id='" + unitid_mst + "'";
                                dtu = sgen.getdata(userCode, mq1);
                                if (dtu.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtu.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["adv_typ"].ToString(), Value = dr["vch_num"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

                                #endregion

                                model[0].Col25 = dtt.Rows[0]["col1"].ToString();
                                model[0].Col17 = dtt.Rows[0]["Employee_Name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["Date_Of_Joining"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col6"].ToString();
                                model[0].Col23 = dtt.Rows[0]["No_Of_Installement"].ToString();
                                model[0].Col21 = dtt.Rows[0]["Effective_From"].ToString();
                                model[0].Col51 = dtt.Rows[0]["Effective_TO"].ToString();
                                model[0].Col20 = dtt.Rows[0]["ad_Amount"].ToString();
                                model[0].Col24 = dtt.Rows[0]["col13"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].Col22 = dtt.Rows[0]["col12"].ToString();
                                model = getedit(model, dtt, URL);
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col12 = dtt.Rows[0]["type"].ToString();
                                model[0].Col26 = dtt.Rows[0]["department"].ToString();
                                model[0].Col27 = dtt.Rows[0]["designation"].ToString();

                                try
                                {
                                    DataTable dt2 = sgen.getdata(userCode, "SELECT '1' AS SNO,'-' AS Month_Year,'0' AS EMI_AMOUNT,'0' AS BALANCE_AMOUNT,'' ADD_MONTH FROM DUAL");
                                    model[0].dt1 = dt2.Copy();
                                    sgen.SetSession(MyGuid, "BADSL_DT", dt2.Copy());
                                    //int monthcount = 0; string EMI = "";
                                    //if (model[0].Col22 == "1")
                                    //{
                                    //    EMI = sgen.Make_decimal(model[0].Col23).ToString();
                                    //    monthcount = sgen.Make_int(model[0].Col20) / sgen.Make_int(model[0].Col23);
                                    //    if ((sgen.Make_int(model[0].Col20) % sgen.Make_int(model[0].Col23)) > 0) monthcount = monthcount + 1;
                                    //}
                                    //else
                                    //{
                                    //    monthcount = sgen.Make_int(model[0].Col23);
                                    //    EMI = Math.Ceiling(sgen.Make_decimal(model[0].Col20) / sgen.Make_decimal(model[0].Col23)).ToString();
                                    //}

                                    //string balance_amt = model[0].Col20;
                                    //for (Int32 i = 0; i < monthcount; i++)
                                    //{
                                    //string effdate = sgen.Make_date(model[0].Col21).AddMonths(i).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    //DateTime effdT = sgen.Make_date(model[0].Col21).AddMonths(i);
                                    //Int32 monthid = sgen.Make_int(effdT.ToString("MM", CultureInfo.InvariantCulture));
                                    //    String MonthName = monthName.GetMonthName(monthid).ToString();
                                    //    Int32 year = sgen.Make_int(effdT.ToString("yyyy", CultureInfo.InvariantCulture));
                                    //    string monthyear = MonthName + " - " + year;
                                    //    balance_amt = (sgen.Make_decimal(balance_amt) - sgen.Make_decimal(EMI)).ToString();

                                    //    if (sgen.Make_decimal(balance_amt) < 0)
                                    //    {
                                    //        EMI = (sgen.Make_decimal(EMI) + sgen.Make_decimal(balance_amt)).ToString();
                                    //        balance_amt = "0";
                                    //    }
                                    //    if (i == 0)
                                    //    {
                                    //        mq = "select lpad ('" + monthid + "',3,0) as monthid, '" + MonthName + "' as MonthName, '" + effdate + "' as Duedate, '" + monthyear + "' as  monthyear," + balance_amt + " as Amount," + EMI + " AS Installment from dual";
                                    //    }
                                    //    else
                                    //    {
                                    //        mq = mq + " union " + "select lpad ('" + monthid + "',3,0) as monthid, '" + MonthName + "' as MonthName, '" + effdate + "' as Duedate , '" + monthyear + "' as  monthyear," + balance_amt + " as Amount," + EMI + " AS Installment from dual";
                                    //    }
                                    //}

                                    //mq = "select * from (" + mq + ") a order by to_char(to_date(duedate,'dd/mm/yyyy'),'yyyymm') asc";
                                    //dt = sgen.getdata(userCode, mq);
                                    //if (dt.Rows.Count > 0)
                                    //{
                                    //sgen.SetSession(MyGuid, "KADV_RPT", dt);
                                    if (model[0].dt1.Rows[0]["Month_Year"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                                    for (int i = 0; i < dtt.Rows.Count; i++)
                                    {
                                        //string effdate = sgen.Make_date(dtt.Rows[0]["Duedate"].ToString().Trim()).AddMonths(i).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        //DateTime effdT = sgen.Make_date(dtt.Rows[0]["Duedate"].ToString()).AddMonths(i);
                                        //Int32 monthid = sgen.Make_int(effdT.ToString("MM", CultureInfo.InvariantCulture));
                                        //String MonthName = monthName.GetMonthName(monthid).ToString();

                                        DataRow dr = model[0].dt1.NewRow();
                                        dr["SNo"] = i + 1;
                                        dr["Month_Year"] = dtt.Rows[i]["monthyear"].ToString();
                                        dr["EMI_AMOUNT"] = dtt.Rows[i]["Installment"].ToString();
                                        dr["BALANCE_AMOUNT"] = dtt.Rows[i]["Amount"].ToString();
                                        dr["SNO"] = dtt.Rows[i]["Duedate"].ToString() + "_" + dtt.Rows[i]["monthid"].ToString() + "_" + dtt.Rows[i]["Monthname"].ToString();
                                        model[0].dt1.Rows.Add(dr);
                                    }
                                    //}
                                }
                                catch (Exception ex)
                                {

                                }
                            }
                            break;
                        case "EMPDETAIL":
                            mq = "SELECT to_char(emp.st_dt,'dd/mm/yyyy') as doj,emp.vch_num,sal.col2 salary,(emp.first_name|| ' '|| replace(emp.middle_name, " +
                                "'0', '')|| ' '|| replace(emp.last_name, '0', '')) as Name,nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department FROM emp_master emp" +
                                " left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and " +
                                " find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                                "inner join (SELECT DISTINCT EMP_CODE AS COL1, pm.errate1+pm.errate2+pm.errate3+pm.errate4+pm.errate5+pm.errate6+pm.errate7+pm.errate8+" +
                                "pm.errate9+pm.errate10+pm.errate11 + pm.errate12 + pm.errate13 + pm.errate14 + pm.errate15 + pm.errate16 + pm.errate17 + pm.errate18 + " +
                                "pm.errate19 + pm.errate20 AS COL2 FROM SALMAIN PM WHERE CLIENT_UNIT_ID = '" + unitid_mst + "' AND TYPE = 'SAL') sal on emp.vch_num = sal.col1 where " +
                                "(emp.client_id|| " +
                                "emp.client_unit_id|| emp.vch_num|| to_char(emp.vch_date,'yyyymmdd')||emp.type)= '" + URL + "'";

                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col17 = dt.Rows[0]["name"].ToString();
                                model[0].Col18 = dt.Rows[0]["doj"].ToString();
                                model[0].Col25 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col19 = dt.Rows[0]["salary"].ToString();
                                model[0].Col26 = dt.Rows[0]["department"].ToString();
                                model[0].Col27 = dt.Rows[0]["designation"].ToString();
                            }
                            else
                            {
                                ViewBag.scripCall = "showmsgJS(1,'Something Went Wrong, Please Check Employee Salary', 2);";
                            }
                            break;
                    }
                    break;
                #endregion
                #region salary advance ADJUSTMENT
                case "adv_adjust":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "SELECT (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,a.client_id,a.client_unit_id" +
                                ",dg.master_name as designation,a.col1,a.type,dp.master_name as department,a.col6,a.col10 as adjust,a.col13,a.rec_id,a.ent_by,a.ent_date,a.vch_num,a.vch_date,to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() +
                                "'),'" + sgen.Getsqldateformat() + "') as Date_Of_Joining FROM  enx_tab2 a ,emp_master emp" +
                                " left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and " +
                                "find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE a.TYPE='ADJ'" +
                                "  and emp.type= 'EMP' and emp.emp_status='Y' AND a.col1=emp.vch_num and a.client_unit_id =emp.client_unit_id and" +
                                " (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type)='" + URL + "'";

                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {

                                model[0].Col25 = dtt.Rows[0]["col1"].ToString();
                                model[0].Col17 = dtt.Rows[0]["Employee_Name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["Date_Of_Joining"].ToString();
                                model[0].Col19 = dtt.Rows[0]["col6"].ToString();
                                model[0].Col21 = dtt.Rows[0]["adjust"].ToString();
                                model[0].Col24 = dtt.Rows[0]["col13"].ToString();
                                model = getedit(model, dtt, URL);
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col12 = dtt.Rows[0]["type"].ToString();
                                model[0].Col26 = dtt.Rows[0]["department"].ToString();
                                model[0].Col27 = dtt.Rows[0]["designation"].ToString();
                            }
                            break;
                        case "EMPDETAIL":
                            mq = "SELECT to_char(emp.st_dt,'dd/mm/yyyy') as doj,emp.vch_num,(emp.first_name|| ' '|| replace(emp.middle_name, " +
                                "'0', '')|| ' '|| replace(emp.last_name, '0', '')) as Name,nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department FROM emp_master emp" +
                                " left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and " +
                                " find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 where (emp.client_id|| emp.client_unit_id|| emp.vch_num|| to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + URL + "'";

                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col17 = dt.Rows[0]["name"].ToString();
                                model[0].Col18 = dt.Rows[0]["doj"].ToString();
                                model[0].Col25 = dt.Rows[0]["vch_num"].ToString();
                                //  model[0].Col19 = dt.Rows[0]["salary"].ToString();
                                model[0].Col26 = dt.Rows[0]["department"].ToString();
                                model[0].Col27 = dt.Rows[0]["designation"].ToString();


                                var dtadv = "select sum(total_paid) bal_adv ,sum(inst) as inst,sum(total_adv) as adv from ( " +
                                    "select sum(col5) total_paid,'0' inst,'0' total_adv  from enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and" +
                                    " client_unit_id = '" + unitid_mst + "' " +
                                    "and col1 = '" + model[0].Col25 + "' union all select  0 total_paid," +
                                    "col5 inst, col7 total_adv from enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' " +
                                    "and col1 = '" + model[0].Col25 + "' union all select * from " +
                                    "(select -sum(ADV_F) adv_amount, '0' a, '0' n from paymain where emp_code = '" + model[0].Col25 + "' and type='PAY' " +
                                    "and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "') a) kk";

                                var mq = "select sum(total_adv)-sum(total_paid) bal_adv ,sum(inst) as inst,sum(total_adv) as adv from ( " +
                                    "select sum(col10) total_paid,'0' inst,'0' total_adv from enx_tab2 where type = 'ADJ' and client_unit_id = '" + unitid_mst + "' " +
                                    "and col1 = '" + model[0].Col25 + "' union all select sum(ADV_F) adv_amount, '0' a, '0' n from paymain where " +
                                    "emp_code = '" + model[0].Col25 + "' and type = 'PAY' and client_unit_id = '" + unitid_mst + "' " +
                                    "union all select total_paid,inst,total_adv from (select distinct vch_num,  0 total_paid,col8 inst, col7 total_adv" +
                                    " from enx_tab2 where type = 'HAS' and client_unit_id = '" + unitid_mst + "' and col1 = '" + model[0].Col25 + "') a ) kk";
                                try
                                {
                                    var adv = sgen.getdata(userCode, mq);
                                    model[0].Col19 = adv.Rows[0]["bal_adv"].ToString();
                                }
                                catch (Exception err)
                                {

                                }
                            }
                            else
                            {
                                ViewBag.scripCall = "showmsgJS(1,'Something Went Wrong, Please Check Employee Salary', 2);";
                            }
                            break;
                    }
                    break;
                #endregion
                #region loan application
                case "loan_appl":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "SELECT emp.rptto, l.classid, a.col9,a.col10, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                                ",a.COL8,a.col5,a.vch_num doc,a.ent_by,a.rec_id,a.ent_date,a.client_id,emp.gender as Gende,a.client_unit_id,emp.f_name as Father_Name,emp.gender as Gender," +
                                "emp.emp_code as Employee_Code,a.col10,emp.vch_num as emp_doc,nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.old_empcode Old_EmpCode, a.col7,a.col6,to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,a.type,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,a.COL13 FROM enx_tab2 a " +
                                "inner join emp_master emp  on  a.col5 = emp.vch_num and emp.type = 'EMP' and emp.emp_status = 'Y' and emp.client_unit_id = '" + unitid_mst + "'  left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                  "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                  " left join master_setting l on a.col9=l.master_id and l.type='LON' and l.client_unit_id='" + unitid_mst + "'" +
                  " WHERE(a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type) = '" + URL + "' and emp.type = 'EMP'" +
                                "  order by " +
                                "emp.emp_code asc";
                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            #region select policy
                            DataTable dtu = new DataTable();
                            mq1 = "select DISTINCT vch_num, col2 as adv_typ from enx_tab where type='KAS' and client_unit_id='" + unitid_mst + "'";
                            dtu = sgen.getdata(userCode, mq1);
                            if (dtu.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dtu.Rows)
                                {
                                    mod1.Add(new SelectListItem { Text = dr["adv_typ"].ToString(), Value = dr["vch_num"].ToString() });
                                }
                            }
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

                            #endregion
                            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = cmd_Fun.loantype(userCode, unitid_mst);

                            mod3.Add(new SelectListItem { Text = "Interest Free", Value = "001" });
                            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;

                            if (dtt.Rows.Count > 0)
                            {

                                model[0].Col17 = dtt.Rows[0]["emp_doc"].ToString();
                                model[0].Col12 = dtt.Rows[0]["type"].ToString();
                                model[0].Col18 = dtt.Rows[0]["Employee_Name"].ToString();
                                model[0].Col19 = dtt.Rows[0]["Father_Name"].ToString();
                                model[0].Col20 = dtt.Rows[0]["Date_Of_Joining"].ToString();
                                model[0].Col21 = dtt.Rows[0]["Date_Of_birth"].ToString();
                                model[0].Col23 = dtt.Rows[0]["Gender"].ToString();
                                model[0].Col24 = dtt.Rows[0]["department"].ToString();
                                model[0].Col25 = dtt.Rows[0]["designation"].ToString();
                                model[0].Col17 = dtt.Rows[0]["col5"].ToString();
                                model[0].Col26 = dtt.Rows[0]["COL8"].ToString();
                                model[0].Col27 = dtt.Rows[0]["COL7"].ToString();
                                model[0].Col28 = dtt.Rows[0]["COL13"].ToString();
                                model[0].Col33 = dtt.Rows[0]["classid"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col6"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col10"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;
                                model = getedit(model, dtt, URL);
                                model[0].Col16 = dtt.Rows[0]["doc"].ToString();

                                mq1 = "select (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) empname,e.vch_num,d.master_name dept," +
                                "g.master_name desig from emp_master e " +
                                "inner join master_setting d on d.master_id=e.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,e.client_unit_id)=1 " +
                                "inner join master_setting g on g.master_id=e.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,e.client_unit_id)=1 " +
                                "where e.type= 'EMP' and e.client_id= '" + clientid_mst + "' and e.vch_num='" + dtt.Rows[0]["rptto"].ToString() + "'";

                                DataTable dtc = sgen.getdata(userCode, mq1);
                                if (dtc.Rows.Count > 0)
                                {
                                    model[0].Col29 = dtc.Rows[0]["empname"].ToString();
                                    model[0].Col32 = dtc.Rows[0]["vch_num"].ToString();
                                    model[0].Col30 = dtc.Rows[0]["dept"].ToString();
                                    model[0].Col31 = dtc.Rows[0]["desig"].ToString();
                                }
                            }
                            break;
                        case "EMPDETAIL":

                            mq = "select emp.rptto, (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) emprpto," +
                        " (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.vch_num,emp.emp_code as Emp_Code," +
                          "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                          "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                          "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.dob, 'yyyy'))) as years," +
                           "trunc(months_between(utc_timestamp(),emp.dob)) as months,floor(utc_timestamp() - add_months(emp.dob,trunc(months_between(utc_timestamp(),emp.dob)))) days ,d.master_name dept,g.master_name desig " +
                          " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                          "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                          " left join master_setting dp on dp.master_id=emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                          " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                          "left join emp_master e  on emp.rptto = e.vch_num and e.client_unit_id = '" + unitid_mst + "' and e.type = 'EMP'" +
                          " left join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id) = 1" +
                          " left join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG'  WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + URL + "'";


                            dt = sgen.getdata(userCode, mq);
                            #region select policy
                            dtu = new DataTable();
                            mq1 = "select DISTINCT vch_num, col2 as adv_typ from enx_tab where type='KAS' and client_unit_id='" + unitid_mst + "'";
                            dtu = sgen.getdata(userCode, mq1);
                            if (dtu.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dtu.Rows)
                                {
                                    mod1.Add(new SelectListItem { Text = dr["adv_typ"].ToString(), Value = dr["vch_num"].ToString() });
                                }
                            }
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

                            #endregion
                            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = cmd_Fun.loantype(userCode, unitid_mst);

                            mod3.Add(new SelectListItem { Text = "Interest Free", Value = "001" });
                            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col17 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                                model[0].Col19 = dt.Rows[0]["Father_Name"].ToString();
                                model[0].Col20 = dt.Rows[0]["Date_Of_Joining"].ToString();
                                model[0].Col21 = dt.Rows[0]["Date_Of_birth"].ToString();
                                model[0].Col23 = dt.Rows[0]["Gender"].ToString();
                                model[0].Col24 = dt.Rows[0]["department"].ToString();
                                model[0].Col25 = dt.Rows[0]["designation"].ToString();

                                model[0].Col29 = dt.Rows[0]["emprpto"].ToString();
                                model[0].Col32 = dt.Rows[0]["rptto"].ToString();
                                model[0].Col30 = dt.Rows[0]["dept"].ToString();
                                model[0].Col31 = dt.Rows[0]["desig"].ToString();


                            }
                            else
                            {
                                ViewBag.scripCall = "showmsgJS(1,'No Data Found', 2);";
                            }
                            break;
                            //case "RPTTO":
                            //    mq = "select (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) empname,e.vch_num,d.master_name dept," +
                            //        "g.master_name desig from emp_master e " +
                            //        "inner join master_setting d on d.master_id=e.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,e.client_unit_id)=1 " +
                            //        "inner join master_setting g on g.master_id=e.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,e.client_unit_id)=1 " +
                            //        "where (e.client_id||e.vch_num|| to_char(e.vch_date, 'yyyymmdd')|| e.type)='" + URL + "'";
                            //    dtt = sgen.getdata(userCode, mq);
                            //    if (dtt.Rows.Count > 0)
                            //    {
                            //        model[0].Col29 = dtt.Rows[0]["empname"].ToString();
                            //        model[0].Col32 = dtt.Rows[0]["vch_num"].ToString();
                            //        model[0].Col30 = dtt.Rows[0]["dept"].ToString();
                            //        model[0].Col31 = dtt.Rows[0]["desig"].ToString();
                            //    }
                            //    break;
                    }
                    break;
                #endregion
                #region od slip
                case "od_slip":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select emp.rptto,(e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) emprpto,d.master_name dept,g.master_name desig," +
                                " a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.client_id,a.client_unit_id,a.col9 as reason,a.vch_num as doc_num," +
                                "to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') as doc_date,a.col5 as shift_start,a.col6 as shift_end" +
                               ",a.col7 as app_by,a.type,a.ent_by,a.ent_date,a.rec_id,( case when to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end)  od_from," +
                               "( case when to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end) as od_to,a.col4 as remark,emp.emp_code as Emp_Code" +
                               ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name,emp.vch_num as empid" +
                               ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department from enx_tab2 a inner join " +
                               "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y'" +
                               " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                               "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                               "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                               " left join emp_master e  on emp.rptto = e.vch_num and e.client_unit_id = '" + unitid_mst + "' and e.type = 'EMP'" +
                          " left join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id) = 1" +
                          " left join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' where" +
                               " a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type='" + URL + "'";

                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            #region select reason
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.separation_reason(userCode, unitid_mst);
                            #endregion
                            if (dtt.Rows.Count > 0)
                            {
                                model = getedit(model, dtt, URL);
                                model[0].Col8 = "client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["doc_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["doc_date"].ToString();
                                model[0].Col12 = dtt.Rows[0]["type"].ToString();
                                model[0].Col18 = dtt.Rows[0]["Emp_Name"].ToString();
                                model[0].Col26 = dtt.Rows[0]["empid"].ToString();
                                model[0].Col19 = dtt.Rows[0]["department"].ToString();
                                model[0].Col20 = dtt.Rows[0]["designation"].ToString();
                                model[0].Col21 = dtt.Rows[0]["shift_start"].ToString();
                                model[0].Col22 = dtt.Rows[0]["shift_end"].ToString();
                                model[0].Col23 = dtt.Rows[0]["od_from"].ToString();
                                model[0].Col24 = dtt.Rows[0]["od_to"].ToString();
                                model[0].Col25 = dtt.Rows[0]["app_by"].ToString();
                                model[0].Col27 = dtt.Rows[0]["remark"].ToString();
                                model[0].Col29 = dtt.Rows[0]["emprpto"].ToString();
                                model[0].Col32 = dtt.Rows[0]["rptto"].ToString();
                                model[0].Col30 = dtt.Rows[0]["dept"].ToString();
                                model[0].Col31 = dtt.Rows[0]["desig"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["reason"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;

                                //mq1 = "select (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) empname,e.vch_num,d.master_name dept," +
                                //"g.master_name desig from emp_master e " +
                                //"inner join master_setting d on d.master_id=e.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,e.client_unit_id)=1 " +
                                //"inner join master_setting g on g.master_id=e.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,e.client_unit_id)=1 " +
                                //"where e.type= 'EMP' and e.client_id= '" + clientid_mst + "' and e.vch_num='" + dtt.Rows[0]["col10"].ToString() + "'";

                                //DataTable dtc = sgen.getdata(userCode, mq1);
                                //if (dtc.Rows.Count > 0)
                                //{
                                //    model[0].Col29 = dtc.Rows[0]["empname"].ToString();
                                //    model[0].Col32 = dtc.Rows[0]["vch_num"].ToString();
                                //    model[0].Col30 = dtc.Rows[0]["dept"].ToString();
                                //    model[0].Col31 = dtc.Rows[0]["desig"].ToString();
                                //}
                            }
                            break;
                        case "EMPDETAIL":
                            mq = "select  	emp.rptto,(e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) emprpto,d.master_name dept,g.master_name desig," +
                      "(emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.vch_num,emp.emp_code as Emp_Code," +
                      "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                      "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                      "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.dob, 'yyyy'))) as years," +
                                     "trunc(months_between(utc_timestamp(),emp.dob)) as months,floor(utc_timestamp() - add_months(emp.dob,trunc(months_between(utc_timestamp(),emp.dob)))) days " +
                      " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                      "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                      "left join emp_master e  on emp.rptto = e.vch_num and e.client_unit_id = '" + unitid_mst + "' and e.type = 'EMP'" +
                                " left join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id) = 1" +
                                " left join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG'" +
                                " WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {

                                model[0].Col26 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                                model[0].Col19 = dt.Rows[0]["department"].ToString();
                                model[0].Col20 = dt.Rows[0]["designation"].ToString();

                                model[0].Col29 = dt.Rows[0]["emprpto"].ToString();
                                model[0].Col32 = dt.Rows[0]["rptto"].ToString();
                                model[0].Col30 = dt.Rows[0]["dept"].ToString();
                                model[0].Col31 = dt.Rows[0]["desig"].ToString();
                            }
                            else
                            {
                                ViewBag.scripCall = "showmsgJS(1,'No Data Found', 2);";
                            }
                            break;

                    }
                    break;
                #endregion
                #region work flow
                case "w_flow":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            {

                                model[0].LTM2 = new List<Tmodelmain>();

                                if (model[0].Col14 == "33002.1")
                                {
                                    model[0].Col19 = URL;
                                    mq = "select distinct vch_num,col5 as role_name from enx_tab2 where type='ROL' and client_unit_id='" + unitid_mst + "'" +
                            " union select  '999997' vch_num,'Reporting To' as role_name from dual " +
                            " union select '999998' vch_num,'Functional Manager' as role_name from dual " +
                            " union select '999999' vch_num,'Others' as role_name from dual";

                                    DataTable dtdd3 = sgen.getdata(userCode, mq);
                                    mod1 = sgen.dt_to_selectlist(dtdd3);
                                    mod2 = cmd_Fun.username_emp(userCode);

                                    mq = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type fstr, a.vch_num as doc_no,a.ent_by,a.rec_id,a.ent_date,a.client_id,a.client_unit_id,a.edit_by,a.edit_date,to_char(a.vch_date,'dd/mm/yyyy') as doc_date,a.col5 as name,a.col6 as description," +
                                 "a.col7,a.COL8 as TAT_calender_days,a.col12,a.COL9 as others,a.col10,a.col11 from enx_tab2 a  where" +
                                 " a.client_unit_id='" + unitid_mst + "' and a.type='WFL' and a.col10 = '" + URL + "'";

                                }

                                else
                                {
                                    model[0].Col19 = "000005";
                                    mod1 = cmd_Fun.username_mod(userCode, m_module3);
                                    mod1.Add(new SelectListItem { Text = "Assign", Value = "999999" });

                                    mq = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type fstr, a.vch_num as doc_no,a.ent_by,a.rec_id,a.ent_date,a.client_id,a.client_unit_id,a.edit_by,a.edit_date,to_char(a.vch_date,'dd/mm/yyyy') as doc_date,a.col5 as name,a.col6 as description," +
                                 "a.col7,a.COL8 as TAT_calender_days,a.col12,a.COL9 as others,a.col10,a.col11 from enx_tab2 a  where" +
                                 " a.client_unit_id='" + unitid_mst + "' and a.type='WFL' and col10='000005' and a.col9 = '" + URL + "'";
                                    model[0].Col21 = URL;
                                    model[0].Col22 = sgen.getstring(userCode, "select master_name from master_setting where type='TKT' and client_unit_id='" + unitid_mst + "' and master_id='" + URL + "'");

                                }



                                dtt = new DataTable();
                                dtt = sgen.getdata(userCode, mq);
                                if (dtt.Rows.Count > 0)
                                {

                                    model[0].Col16 = dtt.Rows[0]["doc_no"].ToString();
                                    model[0].Col17 = dtt.Rows[0]["name"].ToString();
                                    model[0].Col18 = dtt.Rows[0]["description"].ToString();
                                    model[0].Col19 = dtt.Rows[0]["col10"].ToString();
                                    model[0].Col20 = dtt.Rows[0]["col11"].ToString();
                                    model = getedit(model, dtt, dtt.Rows[0]["fstr"].ToString());


                                    for (int i = 0; i < dtt.Rows.Count; i++)
                                    {

                                        Tmodelmain ltm2 = new Tmodelmain();
                                        ltm2.Col19 = "N";

                                        TempData[MyGuid + "_Tlist1"] = ltm2.TList1 = mod1;
                                        TempData[MyGuid + "_Tlist2"] = ltm2.TList2 = mod2;

                                        ltm2.SelectedItems1 = new string[] { dtt.Rows[i]["Col7"].ToString() };
                                        ltm2.SelectedItems2 = new string[] { dtt.Rows[i]["others"].ToString() };
                                        if (dtt.Rows[i]["Col7"].ToString() == "999997" && dtt.Rows[i]["Col7"].ToString() == "999998")
                                        {
                                            ltm2.Col19 = "Y";
                                        }

                                        ltm2.Col17 = dtt.Rows[i]["TAT_calender_days"].ToString();  //
                                        ltm2.Col18 = dtt.Rows[i]["others"].ToString();  //
                                        ltm2.Chk1 = dtt.Rows[i]["col12"].ToString() == "Y" ? true : false;
                                        model[0].LTM2.Add(ltm2);
                                    }
                                }

                                else
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "N");
                                    model[0].Col13 = "Update";
                                    model[0].Col100 = "Update & New";
                                    model[0].Col121 = "U";
                                    model[0].Col122 = "<u>U</u>pdate";
                                    model[0].Col123 = "Update & Ne<u>w</u>";
                                    if (model[0].Col14 == "33002.1")
                                    {
                                        for (int i = 0; i < 2; i++)
                                        {

                                            Tmodelmain ltm2 = new Tmodelmain();

                                            ltm2.Col19 = "N";

                                            if (i == 0)
                                            {
                                                ltm2.Col19 = "Y";
                                                ltm2.SelectedItems1 = new string[] { "999997" }; ;
                                            }
                                            if (i == 1)
                                            {
                                                ltm2.Col19 = "Y";
                                                ltm2.SelectedItems1 = new string[] { "999998" }; ;
                                            }
                                            TempData[MyGuid + "_Tlist1"] = ltm2.TList1 = mod1;
                                            TempData[MyGuid + "_Tlist2"] = ltm2.TList2 = mod2;
                                            model[0].LTM2.Add(ltm2);
                                        }
                                    }
                                    else
                                    {
                                        Tmodelmain ltm2 = new Tmodelmain();
                                        ltm2.SelectedItems1 = new string[] { "999999" }; ;
                                        TempData[MyGuid + "_Tlist1"] = ltm2.TList1 = mod1;
                                        TempData[MyGuid + "_Tlist2"] = ltm2.TList2 = mod2;
                                        ltm2.Col17 = "0";
                                        model[0].LTM2.Add(ltm2);
                                    }
                                }

                                if (model[0].Col19 == "000001") { model[0].Col20 = "Leave Applied"; }
                                else if (model[0].Col19 == "000002") { model[0].Col20 = "Loan"; }
                                else if (model[0].Col19 == "000003") { model[0].Col20 = "OD Slip"; }
                                else if (model[0].Col19 == "000004") { model[0].Col20 = "Separation"; }
                                else if (model[0].Col19 == "000005") { model[0].Col20 = "Ticket"; }
                            }
                            break;
                    }
                    break;
                #endregion
                #region confirmation
                case "wf_confirm":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            mq = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                         "a.vch_num as doc_no,to_char(a.vch_date, '" + sgen.Getsqldateformat() + "') as doc_date," +
                         "a.col6,a.col5,a.COL8 as Name,a.ent_by,a.rec_id,a.ent_date,a.client_id,a.client_unit_id,a.edit_by,a.edit_date,a.COL9 as Probation_Period" +
                         ",a.col10 as Probation_Extension_Upto,a.col11 as No_of_Times_Extension from enx_tab2 a where a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type = '" + URL + "'";

                            DataTable dtreg = new DataTable();
                            dtreg = sgen.getdata(userCode, mq);
                            mod1.Add(new SelectListItem { Text = "Department", Value = "DPT" });
                            mod1.Add(new SelectListItem { Text = "Designation", Value = "DSG" });
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                            mod2.Add(new SelectListItem { Text = "Years", Value = "Years" });
                            mod2.Add(new SelectListItem { Text = "Months", Value = "Months" });
                            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                            if (dtreg.Rows.Count > 0)
                            {
                                model = getedit(model, dtreg, URL);
                                model[0].Col16 = dtreg.Rows[0]["doc_no"].ToString();
                                String[] L1 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col6"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                model[0].dt1 = ((DataTable)(sgen.GetSession(MyGuid, "BWFDT"))).Copy();
                                model[0].dt1 = model[0].dt1.Clone();
                                for (int i = 0; i < dtreg.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["SNo"] = i + 1;
                                    dr["Name"] = dtreg.Rows[i]["name"].ToString();
                                    dr[3] = dtreg.Rows[i]["PROBATION_PERIOD"].ToString();
                                    dr[4] = dtreg.Rows[i]["PROBATION_EXTENSION_UPTO"].ToString();
                                    dr[5] = dtreg.Rows[i]["NO_OF_TIMES_EXTENSION"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            else
                            {
                                sgen.showmsg(1, "No Data Found", 1);
                            }
                            break;
                        case "PARTY":
                            mq = "SELECT master_id||type as fstr,master_id,master_name FROM master_setting where master_id||type in ('" + URL + "')";

                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                if (model[0].dt1.Rows[0]["NAME"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["select_"] = dt.Rows[i]["fstr"].ToString();
                                    dr["SNo"] = i + 1;
                                    dr["Name"] = dt.Rows[i]["master_name"].ToString();
                                    dr[3] = "-";
                                    dr[4] = "-";
                                    dr[5] = "-";
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            else
                            {
                                sgen.showmsg(1, "No Data Found", 1);
                            }
                            break;
                    }
                    break;
                #endregion
                #region separation
                case "sprn":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":

                            mq = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type " +
                              "as fstr,a.vch_num as doc_no,a.ent_by,a.rec_id,a.ent_date,a.client_id" +
                              ",a.client_unit_id,a.edit_by,a.edit_date,to_char(a.vch_date, '" + sgen.Getsqldateformat() + "') as " +
                              "doc_date,a.col17,a.col18,a.col2,a.col19,a.col20,a.COL6 as Name,a.COL7 as no_of_months,a.col8 as no_of_confirm_mths," +
                              "a.col9 as backdate_separation_days,a.col10 as retirement_age from enx_tab2 a where a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type = '" + URL + "'";

                            DataTable dtreg = new DataTable();
                            dtreg = sgen.getdata(userCode, mq);
                            mod1.Add(new SelectListItem { Text = "YES", Value = "YES" });
                            mod1.Add(new SelectListItem { Text = "NO", Value = "NO" });
                            mod2.Add(new SelectListItem { Text = "YES", Value = "YES" });
                            mod2.Add(new SelectListItem { Text = "NO", Value = "NO" });
                            mod3.Add(new SelectListItem { Text = "Department", Value = "DPT" });
                            mod3.Add(new SelectListItem { Text = "Designation", Value = "DSG" });
                            mod4.Add(new SelectListItem { Text = "Years", Value = "Years" });
                            mod4.Add(new SelectListItem { Text = "Months", Value = "Months" });
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = cmd_Fun.leavereas(userCode, unitid_mst);
                            if (dtreg.Rows.Count > 0)
                            {
                                model = getedit(model, dtreg, URL);
                                model[0].Col16 = dtreg.Rows[0]["doc_no"].ToString();
                                String[] L1 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col17"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col18"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                String[] L3 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col19"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;
                                String[] L4 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col20"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems4 = L4;
                                String[] L5 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems5 = L5;
                                model[0].Col17 = dtreg.Rows[0]["backdate_separation_days"].ToString();
                                model[0].Col18 = dtreg.Rows[0]["retirement_age"].ToString();

                                model[0].dt1 = ((DataTable)sgen.GetSession(MyGuid, "BSPRNDT")).Copy();
                                model[0].dt1 = model[0].dt1.Clone();
                                for (int i = 0; i < dtreg.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["SNo"] = i + 1;
                                    dr["Name"] = dtreg.Rows[i]["name"].ToString();
                                    dr[3] = dtreg.Rows[i]["no_of_months"].ToString();
                                    dr[4] = dtreg.Rows[i]["no_of_confirm_mths"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            else
                            {
                                sgen.showmsg(1, "No Data Found", 1);
                            }
                            break;
                        case "PARTY":
                            mq = "SELECT master_id||type as fstr,master_id,master_name FROM master_setting where master_id||type in ('" + URL + "')";

                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                if (model[0].dt1.Rows[0]["NAME"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["select_"] = dt.Rows[i]["fstr"].ToString();
                                    dr["SNo"] = i + 1;
                                    dr["Name"] = dt.Rows[i]["master_name"].ToString();
                                    dr[3] = "-";
                                    dr[4] = "-";
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            else
                            {
                                sgen.showmsg(1, "No Data Found", 1);
                            }
                            break;
                    }
                    break;
                #endregion
                #region separt
                case "separt":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":


                            mq = "select nvl(a.col5,0) as served_days, to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,trunc(months_between(sysdate,emp.st_dt) / 12) as years," +
               "  trunc(months_between(sysdate, emp.st_dt) -  (trunc(months_between(sysdate, emp.st_dt) / 12) * 12)) as months, trunc(sysdate) - add_months(emp.st_dt, trunc(months_between(sysdate, emp.st_dt))) as days,emp.notemp, a.rec_id, a.client_id,a.client_unit_id,a.ent_by,a.ent_date, a.vch_num ,to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') vch_date,a.col8 empid" +
                               ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                               ",nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,sr.master_name Separation_reason" +
                               ",to_char(a.date1,'" + sgen.Getsqldateformat() + "') date1,to_char(a.date2,'" + sgen.Getsqldateformat() + "') date2 ,to_char(a.date3,'" + sgen.Getsqldateformat() + "') date3,a.col4 remark,a.col9 from enx_tab2 a inner join " +
                               "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y'" +
                               " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                               "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                               "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                               "left join master_setting sr on sr.master_id = a.col9 and sr.type = 'SRM' and " +
                               "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1   where a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type='" + URL + "'";

                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);

                            if (dtt.Rows.Count > 0)
                            {
                                mq = "select ug.vch_num as doc_no,ug.col5 as asset_serial,ug.col6 as asset_name,ug.col8 as expected_value,to_char(ug.date1, '" + sgen.Getsqldateformat() + "') " +
                    "as expected_return_date  from enx_tab2 ug  where ug.client_unit_id = '" + unitid_mst + "' " +
                    "and ug.type = 'AAE' and  to_date(to_char(ug.vch_DATE, 'ddMMyyyy'), 'ddMMyyyy') " +
                    "between to_date('" + year_from + "','dd/MM/YYYY HH24:MI:SS')   and to_date('" + year_to + "','dd/MM/YYYY HH24:MI:SS')" +
                    "  and ug.col2 in (select emp_code from emp_master where vch_num = (select emp_id from " +
                    "user_details where type = 'CPR' and vch_num = '" + userid_mst + "') and type = 'EMP' and" +
                    " client_unit_id = '" + unitid_mst + "')";
                                DataTable dts = sgen.getdata(userCode, mq);
                                if (dts.Rows.Count > 0)
                                {
                                    model = new List<Tmodelmain>();

                                    foreach (DataRow dr in dts.Rows)
                                    {
                                        model.Add(new Tmodelmain
                                        {
                                            Col9 = tm.Col9,
                                            Col11 = tm.Col11,
                                            Col12 = tm.Col12,
                                            Col10 = tm.Col10,
                                            Col13 = tm.Col13,
                                            Col14 = tm.Col14,
                                            Col15 = tm.Col15,
                                            Col16 = tm.Col16,
                                            Col17 = tm.Col17,
                                            //Col100 = tm.Col100,
                                            //Col121 = tm.Col121,
                                            //Col122 = tm.Col122,
                                            //Col123 = tm.Col123,
                                            Col31 = dr["doc_no"].ToString(),
                                            Col32 = dr["asset_serial"].ToString(),
                                            Col33 = dr["asset_name"].ToString(),
                                            Col34 = dr["expected_value"].ToString(),
                                            Col35 = dr["expected_return_date"].ToString(),


                                        });
                                    }
                                }

                                model = getedit(model, dtt, URL);
                                model[0].Col8 = "client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["vch_date"].ToString();
                                model[0].Col19 = dtt.Rows[0]["empid"].ToString();
                                model[0].Col18 = dtt.Rows[0]["Emp_Name"].ToString();
                                model[0].Col20 = dtt.Rows[0]["department"].ToString();
                                model[0].Col21 = dtt.Rows[0]["designation"].ToString();
                                model[0].Col22 = dtt.Rows[0]["date1"].ToString();
                                model[0].Col23 = dtt.Rows[0]["date2"].ToString();
                                model[0].Col24 = dtt.Rows[0]["date3"].ToString();
                                model[0].Col25 = dtt.Rows[0]["remark"].ToString();
                                model[0].Col28 = dtt.Rows[0]["served_days"].ToString();

                                model[0].Col30 = dtt.Rows[0]["Date_Of_Joining"].ToString();
                                model[0].Col22 = dtt.Rows[0]["notemp"].ToString();
                                model[0].Col27 = dtt.Rows[0]["years"].ToString() + " Years" + dtt.Rows[0]["months"].ToString() + " Months" + dtt.Rows[0]["days"].ToString() + " Days";
                                #region select reason
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.separation_reason(userCode, unitid_mst);
                                #endregion
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;


                            }
                            break;
                        case "EMPDETAIL":
                            mq = "select emp.notemp, (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.vch_num,emp.emp_code as Emp_Code," +
                   "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                   "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                   "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,trunc(months_between(sysdate,emp.st_dt) / 12) as years," +
                   "  trunc(months_between(sysdate, emp.st_dt) -  (trunc(months_between(sysdate, emp.st_dt) / 12) * 12)) as months, trunc(sysdate) - add_months(emp.st_dt, trunc(months_between(sysdate, emp.st_dt))) as days " +
                   " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                   "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                   " WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {



                                mq = "select ug.vch_num as doc_no,ug.col5 as asset_serial,ug.col6 as asset_name,ug.col8 as expected_value,to_char(ug.date1, '" + sgen.Getsqldateformat() + "') " +
                                    "as expected_return_date  from enx_tab2 ug  where ug.client_unit_id = '" + unitid_mst + "' " +
                                    "and ug.type = 'AAE' and  to_date(to_char(ug.vch_DATE, 'ddMMyyyy'), 'ddMMyyyy') " +
                                    "between to_date('" + year_from + "','dd/MM/YYYY HH24:MI:SS')   and to_date('" + year_to + "','dd/MM/YYYY HH24:MI:SS')" +
                                    "  and ug.col2 in (select emp_code from emp_master where vch_num = '" + dt.Rows[0]["vch_num"].ToString() + "' and type = 'EMP' and" +
                                    " client_unit_id = '" + unitid_mst + "')";

                                dtt = new DataTable();
                                dtt = sgen.getdata(userCode, mq);
                                tm = model.FirstOrDefault();
                                if (dtt.Rows.Count > 0)
                                {
                                    model = new List<Tmodelmain>();

                                    foreach (DataRow dr in dtt.Rows)
                                    {
                                        model.Add(new Tmodelmain
                                        {
                                            Col9 = tm.Col9,
                                            Col11 = tm.Col11,
                                            Col12 = tm.Col12,
                                            Col10 = tm.Col10,
                                            Col13 = tm.Col13,
                                            Col14 = tm.Col14,
                                            Col15 = tm.Col15,
                                            Col16 = tm.Col16,
                                            Col17 = tm.Col17,
                                            Col100 = tm.Col100,
                                            Col121 = tm.Col121,
                                            Col122 = tm.Col122,
                                            Col123 = tm.Col123,
                                            Col31 = dr["doc_no"].ToString(),
                                            Col32 = dr["asset_serial"].ToString(),
                                            Col33 = dr["asset_name"].ToString(),
                                            Col34 = dr["expected_value"].ToString(),
                                            Col35 = dr["expected_return_date"].ToString(),
                                            TList1 = tm.TList1,
                                            SelectedItems1 = tm.SelectedItems1,

                                        });
                                    }




                                }

                                model[0].Col19 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                                model[0].Col20 = dt.Rows[0]["department"].ToString();
                                model[0].Col21 = dt.Rows[0]["designation"].ToString();
                                model[0].Col30 = dt.Rows[0]["Date_Of_Joining"].ToString();
                                model[0].Col22 = dt.Rows[0]["notemp"].ToString();
                                model[0].Col27 = dt.Rows[0]["years"].ToString() + " Years" + dt.Rows[0]["months"].ToString() + " Months " + dt.Rows[0]["days"].ToString() + " Days";

                            }
                            else
                            {
                                ViewBag.scripCall = "showmsgJS(1,'No Data Found', 2);";
                            }
                            break;

                    }
                    break;
                #endregion
                #region Kaizen  submit
                case "kz_submit":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "SELECT cast(a.col23 as varchar(1000)) col23, a.col7,a.col9, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                                ",a.COL8,a.col5,a.vch_num doc,a.ent_by,a.rec_id,a.ent_date,a.client_id,emp.gender as Gende,a.client_unit_id,emp.f_name as Father_Name,emp.gender as Gender," +
                                "emp.emp_code as Employee_Code,a.col10,emp.vch_num as emp_doc,nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.old_empcode Old_EmpCode, a.col7,a.col6,to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,a.type,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,a.COL13 FROM enx_tab2 a ," +
                                "emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                  "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE(a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type) = '" + URL + "' and emp.type = 'EMP'" +
                                " and emp.emp_status = 'Y' and a.col5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' order by " +
                                "emp.emp_code asc";
                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.areaimp(userCode, unitid_mst);
                            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.expcomp(userCode, unitid_mst);
                            mod3.Add(new SelectListItem { Text = "Yearly", Value = "001" });
                            mod3.Add(new SelectListItem { Text = "Monthly", Value = "002" });
                            mod3.Add(new SelectListItem { Text = "One Time", Value = "003" });
                            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;

                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col16 = dtt.Rows[0]["doc"].ToString();
                                model[0].Col17 = dtt.Rows[0]["emp_doc"].ToString();
                                model[0].Col12 = dtt.Rows[0]["type"].ToString();
                                model[0].Col18 = dtt.Rows[0]["Employee_Name"].ToString();
                                model[0].Col19 = dtt.Rows[0]["Father_Name"].ToString();
                                model[0].Col20 = dtt.Rows[0]["Date_Of_Joining"].ToString();
                                model[0].Col24 = dtt.Rows[0]["department"].ToString();
                                model[0].Col25 = dtt.Rows[0]["designation"].ToString();
                                model[0].Col17 = dtt.Rows[0]["col5"].ToString();
                                model[0].Col26 = dtt.Rows[0]["COL8"].ToString();

                                model[0].Col28 = dtt.Rows[0]["COL23"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col6"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L1;
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L2;
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col9"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L3;
                                model = getedit(model, dtt, URL);


                                mq1 = "select (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) empname,e.vch_num,d.master_name dept," +
                                "g.master_name desig from emp_master e " +
                                "inner join master_setting d on d.master_id=e.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,e.client_unit_id)=1 " +
                                "inner join master_setting g on g.master_id=e.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,e.client_unit_id)=1 " +
                                "where e.type= 'EMP' and e.client_id= '" + clientid_mst + "' and e.vch_num='" + dtt.Rows[0]["col10"].ToString() + "'";

                                DataTable dtc = sgen.getdata(userCode, mq1);
                                if (dtc.Rows.Count > 0)
                                {
                                    model[0].Col29 = dtc.Rows[0]["empname"].ToString();
                                    model[0].Col32 = dtc.Rows[0]["vch_num"].ToString();

                                }
                            }
                            break;


                    }
                    break;
                #endregion
                #region role master
                case "role_mt":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            mq = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                "a.vch_num as doc_no,a.ent_by,a.rec_id,a.ent_date,a.client_id,a.client_unit_id,a.edit_by,a.edit_date,to_char(a.vch_date,'dd/mm/yyyy') as doc_date,a.col5 as name,a.col6 as description," +
                                "b.master_name as role,a.col7,nvl(b.master_name, '-') designation,nvl(c.master_name, '-') department from enx_tab2 a inner join user_details ud" +
                                " on a.col7 = ud.vch_num and ud.type = 'CPR'" +
                                "left join  master_setting b on ud. designation = b.master_id and b.type = 'MDG'" +
                                "left join  master_setting c  on ud. department = c.master_id and c.type = 'MDP' where" +
                                " a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type = '" + URL + "'";

                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {

                                model[0].Col16 = dtt.Rows[0]["doc_no"].ToString();
                                model[0].Col17 = dtt.Rows[0]["name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["description"].ToString();
                                model = getedit(model, dtt, URL);

                                model[0].LTM2 = new List<Tmodelmain>();
                                for (int i = 0; i < dtt.Rows.Count; i++)
                                {
                                    Tmodelmain ltm2 = new Tmodelmain();

                                    //var mymod = cmd_Fun.username(userCode);
                                    if (model[0].Col14 == "33002.7")
                                    {
                                        var mymod = cmd_Fun.username_emp(userCode);
                                        TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mymod;
                                        TempData[MyGuid + "_Tlist1"] = ltm2.TList1 = mymod;
                                    }
                                    else
                                    {
                                        var mymod = cmd_Fun.username(userCode);
                                        TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mymod;
                                        TempData[MyGuid + "_Tlist1"] = ltm2.TList1 = mymod;
                                    }


                                    ltm2.Col17 = dtt.Rows[i]["department"].ToString();  //
                                    ltm2.Col18 = dtt.Rows[i]["designation"].ToString();  //                                  
                                    string[] L1 = new string[] { dtt.Rows[i]["COL7"].ToString() };
                                    ltm2.SelectedItems1 = L1;

                                    model[0].LTM2.Add(ltm2);
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region good_wishes
                case "good_wishes":
                    switch (btnval.ToUpper())
                    {
                        case "PRV":

                            Make_query("good_wishes", "Previous Message List Detail", "PRV", "0", URL, "", MyGuid);
                            ViewBag.scripCall = "callFoo('Previous Message List Detail');";
                            break;
                    }
                    break;
                #endregion
                #region loan_type
                case "loan_type":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            mq = "select a.client_id,a.client_unit_id, a.rec_id,a.vch_num,a.vch_date,a.master_id,a.master_name,a.master_entby,a.classid ," +
                               "a.master_entdate " +
                               "from " + model[0].Col10.Trim() + " a where a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type ='" + URL + "' ";

                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["master_entby"].ToString();
                                model[0].Col4 = dtt.Rows[0]["master_entdate"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["master_name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["classid"].ToString();

                            }
                            break;
                    }
                    break;
                #endregion
                #region stat_rpt
                case "stat_rpt":
                    switch (btnval.ToUpper())
                    {
                        case "EMP":
                            mq = "select ug.client_id||ug.client_unit_id||ug.vch_num||to_char(ug.vch_date,'yyyymmdd')||ug.type as fstr,ug.vch_num as doc_no,to_char(ug.vch_date, 'dd/MM/YYYY') as doc_date,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name" +
                                ",emp.emp_code as Employee_Code,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,emp.cur_address,emp.contact_no as ContactNo,nvl(rel.master_name,'-') as emp_religen,(case when emp.ismarried = 'Y' then 'MARRIED' when emp.ismarried = 'N' then 'SINGLE' ELSE EMP.ismarried end) as " +
                                "emp_marr_status,emp.gender as empGender,emp.f_name as Father_Name,ug.col16 as family_member,rl.master_name as relation,b.col7 as proportion,ug.col17 as gender,ug.col20 as blood_group,ug.col6 as Email_id,ug.col8 as Nationality,to_char(ug.date1, 'dd/MM/YYYY') as date_of_birth," +
                                "(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(ug.date1, 'yyyy'))) as mem_age,ug.col5 as mobile,ug.col7 as Profession,ug.col3 as Address from enx_tab2 ug inner join emp_master emp  on emp.emp_code = ug.col2 and" +
                                " emp.client_unit_id = ug.client_unit_id and emp.type = 'EMP' inner join enx_tab2 b on b.col6 = ug.vch_num and b.type = 'NDT' and b.client_unit_id = ug.client_unit_id inner join master_setting rl on rl.master_id = ug.col21 and rl.type = 'REL' and " +
                                "find_in_set(rl.client_unit_id, ug.client_unit_id)= 1 left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and" +
                                " find_in_set(dg.client_unit_id, '" + unitid_mst + "') = 1  left join master_setting rel on rel.master_id = emp.religion and rel.type = 'ERT' and find_in_set(rel.client_unit_id, '" + unitid_mst + "') = 1 " +
                                "where ug.client_id||ug.client_unit_id||ug.vch_num||to_char(ug.vch_date,'yyyymmdd')||ug.type = '" + URL + "'";
                            DataTable qrdt = sgen.getdata(userCode, mq);
                            sgen.open_report_bydt_xml(userCode, qrdt, "form_f", "Form F");
                            ViewBag.scripCall += "showRptnew('Form F');";
                            break;
                    }
                    break;
                #endregion
                #region Goal Setting
                case "g_setting":
                    switch (btnval.ToUpper())
                    {
                        case "GOAL":

                            {
                                mq = "select a.master_id as doc_no, a.master_name as Goal_Name,a.client_name goal_description from " +
                                    "master_setting a where (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) ='" + URL + "'";
                                dt = sgen.getdata(userCode, mq);
                                if (dt.Rows.Count > 0)
                                {
                                    model[0].Col18 = dt.Rows[0]["doc_no"].ToString();
                                    model[0].Col19 = dt.Rows[0]["Goal_Name"].ToString();
                                    model[0].Col20 = dt.Rows[0]["goal_description"].ToString();
                                }

                            }
                            break;
                        case "EDIT":
                        case "VIEW":
                            {
                                mq = "select b.master_name as Goal_Name,b.client_name goal_description, a.client_id,a.client_unit_id,a.rec_id,a.ent_by,a.ent_date,a.vch_num, " +
                                    "to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') vch_date,to_char(a.date1,'" + sgen.Getsqldateformat() + "') date1," +
                                    "to_char(a.date2,'" + sgen.Getsqldateformat() + "') date2,to_char(a.date3,'" + sgen.Getsqldateformat() + "') date3," +
                                    "a.col2,a.col5,a.col6,a.col7,a.col8,a.col9,a.col10,a.col24 from enx_tab2 a inner join master_setting b on a.col5=b.master_id" +
                                    " and find_in_set(b.client_unit_id,'" + unitid_mst + "')=1  and b.type='GLM' where" +
                                    "(a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) ='" + URL + "'";
                                dt = sgen.getdata(userCode, mq);
                                if (dt.Rows.Count > 0)
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                                    #region ddl
                                    DataTable dt1 = sgen.getdata(userCode, "SELECT rownum FROM XMLTABLE('1 to 100')");
                                    mod1 = sgen.dt_to_selectlist(dt1);

                                    mod2.Add(new SelectListItem { Text = "Do Not Reduce Weightage If Actual Exceeds ", Value = "001" });
                                    mod2.Add(new SelectListItem { Text = "Deduct Weightage If Actual Exceeds Target ", Value = "002" });

                                    mod3.Add(new SelectListItem { Text = "Rating", Value = "001" });
                                    mod3.Add(new SelectListItem { Text = "Attendance", Value = "002" });
                                    mod3.Add(new SelectListItem { Text = "Performance", Value = "003" });
                                    mod3.Add(new SelectListItem { Text = "Number", Value = "004" });
                                    mod3.Add(new SelectListItem { Text = "M", Value = "005" });

                                    mod4 = sgen.dt_to_selectlist(dt1);

                                    mod5.Add(new SelectListItem { Text = "Quater1", Value = "001" });
                                    mod5.Add(new SelectListItem { Text = "Quater2", Value = "002" });
                                    mod5.Add(new SelectListItem { Text = "Quater3", Value = "003" });
                                    mod5.Add(new SelectListItem { Text = "Quater4", Value = "004" });
                                    mod5.Add(new SelectListItem { Text = "Unknown", Value = "005" });

                                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                                    #endregion

                                    model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                    model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                    model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                    model[0].Col4 = dt.Rows[0]["ent_date"].ToString();

                                    model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                    model[0].Col13 = "Update";
                                    model[0].Col121 = "U";
                                    model[0].Col122 = "<u>U</u>pdate";
                                    model[0].Col123 = "Update & Ne<u>w</u>";
                                    model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                    model[0].Col17 = dt.Rows[0]["vch_date"].ToString();
                                    model[0].Col29 = dt.Rows[0]["vch_date"].ToString();
                                    model[0].Col18 = dt.Rows[0]["col5"].ToString();
                                    model[0].Col19 = dt.Rows[0]["Goal_Name"].ToString();
                                    model[0].Col20 = dt.Rows[0]["goal_description"].ToString();
                                    model[0].Col21 = dt.Rows[0]["col24"].ToString();
                                    model[0].Col22 = dt.Rows[0]["date1"].ToString();
                                    model[0].Col23 = dt.Rows[0]["date2"].ToString();
                                    model[0].Col24 = dt.Rows[0]["col2"].ToString();
                                    model[0].Col25 = dt.Rows[0]["date3"].ToString();

                                    String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["Col6"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems1 = L1;

                                    String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["Col7"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems2 = L2;

                                    String[] L3 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["Col8"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems3 = L3;

                                    String[] L4 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["Col9"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems4 = L4;

                                    String[] L5 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["Col10"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems5 = L5;

                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region goal assign
                case "g_assign":

                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            mq = "select emp.emp_code ,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name, b.master_name as Goal_Name,b.client_name goal_description, a.client_id,a.client_unit_id,a.rec_id,a.ent_by,a.ent_date,a.vch_num, " +
                                         "to_char(a.vch_date,'" + sgen.Getsqldateformat() + "') vch_date,to_char(a.date1,'" + sgen.Getsqldateformat() + "') date1," +
                                         "a.col5,a.col6,a.col7,a.col8 from enx_tab2 a inner join master_setting b on a.col6=b.master_id" +
                                         " and find_in_set(b.client_unit_id,'" + unitid_mst + "')=1  and b.type='GLM'" +
                                         " inner join emp_master emp on a.col5=emp.vch_num and emp.type='EMP' and emp.client_unit_id='" + unitid_mst + "' where" +
                                         "(a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) ='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();

                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col13 = "Update";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dt.Rows[0]["emp_code"].ToString();
                                model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                                model[0].Col19 = dt.Rows[0]["vch_date"].ToString();
                                model[0].Col20 = dt.Rows[0]["date1"].ToString();
                                model[0].Col21 = dt.Rows[0]["col5"].ToString();

                                model[0].LTM2 = new List<Tmodelmain>();
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    Tmodelmain ltm2 = new Tmodelmain();

                                    var mymod = cmd_Fun.goalmaster(userCode, unitid_mst);
                                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mymod;
                                    TempData[MyGuid + "_Tlist1"] = ltm2.TList1 = mymod;

                                    ltm2.Col2 = dt.Rows[i]["goal_description"].ToString();  //
                                    ltm2.Col3 = dt.Rows[i]["COL7"].ToString();  //                                  
                                    ltm2.Col4 = dt.Rows[i]["COL8"].ToString();  //                                  
                                    string[] L1 = new string[] { dt.Rows[i]["COL6"].ToString() };
                                    ltm2.SelectedItems1 = L1;
                                    model[0].LTM2.Add(ltm2);
                                }
                            }
                            break;

                        case "EMPDETAIL":
                            mq = "select emp.vch_num, emp.emp_code as Emp_Code," +
                        "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name" +
                        " from emp_master emp  WHERE emp.type= 'EMP' and emp.client_unit_id= '" + unitid_mst + "' and emp.emp_status='Y' " +
                        "and (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type)='" + URL + "'";

                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col17 = dt.Rows[0]["Emp_Code"].ToString();
                                model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                                model[0].Col21 = dt.Rows[0]["vch_num"].ToString();
                            }
                            break;

                    }
                    break;
                    #endregion
            }
            return model;
        }
        #endregion
        //================employee details==============
        #region employee details
        public ActionResult employee_details()
        {
            FillMst("");
            // shiv
            chkRef();
            sgen.SetSession(MyGuid, "vch_num_std", "");
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm = new Tmodelmain();
            //model[0].Col9 = "EMPLOYEE DETAIL";
            tm.Col81 = mid_mst;
            tm.Col82 = m_id_mst;
            tm.Chk3 = true;
            tm.Col71 = "Choose File";
            tm.Col72 = "Choose File";
            tm.Col73 = "Choose File";

            tm.TList21 = tm.TList20 = tm.TList19 = tm.TList18 = tm.TList17 = tm.TList16 = tm.TList15 = tm.TList14 = tm.TList13 = tm.TList12 = tm.TList11 = tm.TList10 = tm.TList9 = tm.TList8 = tm.TList7 = tm.TList6 = tm.TList5 = tm.TList4 = tm.TList3 = tm.TList2 = tm.TList1 = mod1;

            //tm.TList1 = mod1;
            //tm.TList2 = mod1;
            //tm.TList3 = mod1;
            //tm.TList4 = mod1;
            //tm.TList5 = mod1;
            //tm.TList6 = mod1;
            //tm.TList7 = mod1;
            //tm.TList8 = mod1;
            //tm.TList9 = mod1;
            //tm.TList10 = mod1;
            //tm.TList11 = mod1;
            //tm.TList12 = mod1;
            //tm.TList13 = mod1;
            //tm.TList14 = mod1;
            //tm.TList15 = mod1;
            //tm.TList16 = mod1;
            //tm.TList17 = mod1;
            //tm.TList18 = mod1;
            //tm.TList19 = mod1;
            //tm.TList20 = mod1;

            tm.SelectedItems1 = new string[] { "" };
            tm.SelectedItems2 = new string[] { "" };
            tm.SelectedItems3 = new string[] { "" };
            tm.SelectedItems4 = new string[] { "" };
            tm.SelectedItems5 = new string[] { "" };
            tm.SelectedItems6 = new string[] { "" };
            tm.SelectedItems7 = new string[] { "" };
            tm.SelectedItems8 = new string[] { "" };
            tm.SelectedItems9 = new string[] { "" };
            tm.SelectedItems10 = new string[] { "" };
            tm.SelectedItems11 = new string[] { "" };
            tm.SelectedItems12 = new string[] { "" };
            tm.SelectedItems13 = new string[] { "" };
            tm.SelectedItems14 = new string[] { "" };
            tm.SelectedItems15 = new string[] { "" };
            tm.SelectedItems16 = new string[] { "" };
            tm.SelectedItems17 = new string[] { "" };
            tm.SelectedItems18 = new string[] { "" };
            tm.SelectedItems19 = new string[] { "" };
            tm.SelectedItems20 = new string[] { "" };
            tm.SelectedItems21 = new string[] { "" };
            mq = "select mod_id from com_module where mod_id='22000' and com_code='" + userCode + "'";
            mq1 = sgen.seekval(userCode, mq, "mod_id");
            if (!mq1.Trim().Equals("0")) tm.Col88 = "Y";
            tm.LTM1 = new List<Tmodelmain>();
            ViewBag.Title = "EMPLOYEE DETAIL";
            if (tm.Col76 == null) ViewBag.scripCall = ViewBag.scripCall + "try{ initialize(28.477450,77.034138);} catch (err) { } ";
            else ViewBag.scripCall = ViewBag.scripCall + "try { initialize(" + tm.Col76 + ");}catch (err) { } ";
            model.Add(tm);
            return View(model);
        }
        [HttpPost]
        [GZipOrDeflate]
        public ActionResult employee_details(List<Tmodelmain> model, string command, HttpPostedFileBase upd1, HttpPostedFileBase upd2, HttpPostedFileBase upd3, string fid)
        {
            ViewBag.Title = "EMPLOYEE DETAIL";
            string iscanteen = "N", islogin = "N";
            FillMst(model[0].Col82);
            if (model[0].Col76 == null) ViewBag.scripCall = "try { initialize(28.477450,77.034138); } catch (err) { } ";
            else ViewBag.scripCall = "try { initialize(" + model[0].Col76 + "); } catch (err) { }";
            tab_name = "emp_master";
            tab_name1 = "file_tab";
            type_desc = "Employee Detail";
            type = "EMP";
            try
            {
                #region list
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];
                List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_TList5"];
                List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_TList6"];
                List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_TList7"];
                List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_TList8"];
                List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_TList9"];
                List<SelectListItem> mod10 = (List<SelectListItem>)TempData[MyGuid + "_TList10"];
                List<SelectListItem> mod11 = (List<SelectListItem>)TempData[MyGuid + "_TList11"];
                List<SelectListItem> mod12 = (List<SelectListItem>)TempData[MyGuid + "_TList12"];
                List<SelectListItem> mod13 = (List<SelectListItem>)TempData[MyGuid + "_TList13"];
                List<SelectListItem> mod14 = (List<SelectListItem>)TempData[MyGuid + "_TList14"];
                List<SelectListItem> mod15 = (List<SelectListItem>)TempData[MyGuid + "_TList15"];
                List<SelectListItem> mod16 = (List<SelectListItem>)TempData[MyGuid + "_TList16"];
                List<SelectListItem> mod17 = (List<SelectListItem>)TempData[MyGuid + "_TList17"];
                List<SelectListItem> mod18 = (List<SelectListItem>)TempData[MyGuid + "_TList18"];
                List<SelectListItem> mod19 = (List<SelectListItem>)TempData[MyGuid + "_TList19"];
                List<SelectListItem> mod20 = (List<SelectListItem>)TempData[MyGuid + "_TList20"];
                List<SelectListItem> mod21 = (List<SelectListItem>)TempData[MyGuid + "_TList21"];
                if (mod19 == null) mod19 = new List<SelectListItem>();
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
                TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5;
                TempData[MyGuid + "_TList6"] = model[0].TList6 = mod6;
                TempData[MyGuid + "_TList7"] = model[0].TList7 = mod7;
                TempData[MyGuid + "_TList8"] = model[0].TList8 = mod8;
                TempData[MyGuid + "_TList9"] = model[0].TList9 = mod9;
                TempData[MyGuid + "_TList10"] = model[0].TList10 = mod10;
                TempData[MyGuid + "_TList11"] = model[0].TList11 = mod11;
                TempData[MyGuid + "_TList12"] = model[0].TList12 = mod12;
                TempData[MyGuid + "_TList13"] = model[0].TList13 = mod13;
                TempData[MyGuid + "_TList14"] = model[0].TList14 = mod14;
                TempData[MyGuid + "_TList15"] = model[0].TList15 = mod15;
                TempData[MyGuid + "_TList16"] = model[0].TList16 = mod16;
                TempData[MyGuid + "_TList17"] = model[0].TList17 = mod17;
                TempData[MyGuid + "_TList18"] = model[0].TList18 = mod18;
                TempData[MyGuid + "_TList19"] = model[0].TList19 = mod19;
                TempData[MyGuid + "_TList20"] = model[0].TList20 = mod20;
                TempData[MyGuid + "_TList21"] = model[0].TList21 = mod21;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
                if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
                if (model[0].SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
                if (model[0].SelectedItems10 == null) model[0].SelectedItems10 = new string[] { "" };
                if (model[0].SelectedItems11 == null) model[0].SelectedItems11 = new string[] { "" };
                if (model[0].SelectedItems12 == null) model[0].SelectedItems12 = new string[] { "" };
                if (model[0].SelectedItems13 == null) model[0].SelectedItems13 = new string[] { "" };
                if (model[0].SelectedItems14 == null) model[0].SelectedItems14 = new string[] { "" };
                if (model[0].SelectedItems15 == null) model[0].SelectedItems15 = new string[] { "" };
                if (model[0].SelectedItems16 == null) model[0].SelectedItems16 = new string[] { "" };
                if (model[0].SelectedItems17 == null) model[0].SelectedItems17 = new string[] { "" };
                if (model[0].SelectedItems18 == null) model[0].SelectedItems18 = new string[] { "" };
                if (model[0].SelectedItems19 == null) model[0].SelectedItems19 = new string[] { "" };
                if (model[0].SelectedItems20 == null) model[0].SelectedItems20 = new string[] { "" };
                if (model[0].SelectedItems21 == null) model[0].SelectedItems21 = new string[] { "" };
                #endregion
                if (command == "New")
                // shiv
                {
                    sgen.SetSession(MyGuid, "vch_num_std", "");
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = ViewBag.scripCall + "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "' and client_id='" + clientid_mst + "'";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    emp_code = "GMC" + vch_num.Trim();
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod6 = new List<SelectListItem>();
                    mod7 = new List<SelectListItem>();
                    mod8 = new List<SelectListItem>();
                    mod9 = new List<SelectListItem>();
                    mod10 = new List<SelectListItem>();
                    mod11 = new List<SelectListItem>();
                    mod12 = new List<SelectListItem>();
                    mod13 = new List<SelectListItem>();
                    mod14 = new List<SelectListItem>();
                    mod15 = new List<SelectListItem>();
                    mod16 = new List<SelectListItem>();
                    mod17 = new List<SelectListItem>();
                    mod18 = new List<SelectListItem>();
                    mod19 = new List<SelectListItem>();
                    mod20 = new List<SelectListItem>();
                    mod21 = new List<SelectListItem>();
                    model[0].LTM1 = new List<Tmodelmain>();
                    string defval = "";
                    #region masters

                    #region
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.country(userCode, unitid_mst);       //nationality

                    #endregion
                    //caste
                    #region
                    //mod2 = cmd_Fun.caste(userCode, clientid_mst, unitid_mst);
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.caste(userCode, unitid_mst);

                    #endregion

                    #region
                    TempData[MyGuid + "_TList17"] = model[0].TList17 = mod17 = cmd_Fun.caste_cate(userCode, unitid_mst);       //caste actegory

                    #endregion
                    //religion
                    #region
                    TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.religion(userCode, unitid_mst);
                    #endregion
                    //blood group (manual fixed)
                    #region
                    mod4.Add(new SelectListItem { Text = "A+", Value = "A+" });
                    mod4.Add(new SelectListItem { Text = "B+", Value = "B+" });
                    mod4.Add(new SelectListItem { Text = "A-", Value = "A-" });
                    mod4.Add(new SelectListItem { Text = "B-", Value = "B-" });
                    mod4.Add(new SelectListItem { Text = "O+", Value = "O+" });
                    mod4.Add(new SelectListItem { Text = "O-", Value = "O-" });
                    mod4.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
                    mod4.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
                    TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
                    #endregion
                    // pickup (from other page)
                    #region 

                    TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5 = cmd_Fun.pickdrop(userCode, unitid_mst);      //pickup
                    #endregion
                    //drop (from other page)
                    #region

                    TempData[MyGuid + "_TList6"] = model[0].TList6 = mod6 = cmd_Fun.pickdrop(userCode, unitid_mst);      //pickup
                    #endregion
                    //disability type (manual fixed)
                    #region
                    mod7.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                    mod7.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                    TempData[MyGuid + "_TList7"] = model[0].TList7 = mod7;
                    #endregion
                    //language known
                    #region
                    TempData[MyGuid + "_TList8"] = model[0].TList8 = mod8 = cmd_Fun.lang(userCode, unitid_mst);
                    #endregion

                    #region
                    defval = "";
                    //mod9 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst, out defval);
                    TempData[MyGuid + "_TList9"] = model[0].TList9 = mod9 = cmd_Fun.dept(userCode, unitid_mst, out defval);       //department
                    model[0].SelectedItems9 = new string[] { defval };
                    #endregion

                    #region
                    defval = "";
                    TempData[MyGuid + "_TList10"] = model[0].TList10 = mod10 = cmd_Fun.desig(userCode, unitid_mst, out defval);    //designation

                    model[0].SelectedItems10 = new string[] { defval };
                    #endregion
                    //employee type
                    #region
                    // shiv               
                    defval = "";
                    TempData[MyGuid + "_TList11"] = model[0].TList11 = mod11 = cmd_Fun.emptype(userCode, unitid_mst, out defval);
                    model[0].SelectedItems11 = new string[] { defval };
                    #endregion
                    //employee category
                    #region
                    // shiv           
                    defval = "";
                    TempData[MyGuid + "_TList12"] = model[0].TList12 = mod12 = cmd_Fun.empcat(userCode, unitid_mst, out defval);
                    model[0].SelectedItems12 = new string[] { defval };
                    #endregion
                    //bank
                    #region
                    TempData[MyGuid + "_TList13"] = model[0].TList13 = mod13 = cmd_Fun.bank(userCode, unitid_mst);
                    #endregion
                    //account type
                    #region
                    mod14 = cmd_Fun.acctype(userCode, unitid_mst);
                    TempData[MyGuid + "_TList14"] = model[0].TList14 = mod14;
                    #endregion
                    //joinee age
                    #region       
                    // shiv
                    DataTable dt = new DataTable();
                    mq = "select master_name,classid from master_Setting where type='JAM' and client_unit_id='" + unitid_mst + "'";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        mage = sgen.seekval_dt(dt, "master_name='001'", "classid");
                        fage = sgen.seekval_dt(dt, "master_name='002'", "classid");
                    }
                    #endregion
                    #region joinee type
                    mod15.Add(new SelectListItem { Text = "New", Value = "001" });
                    mod15.Add(new SelectListItem { Text = "Rejoin", Value = "002" });
                    TempData[MyGuid + "_TList15"] = model[0].TList15 = mod15;
                    #endregion
                    #region contractor              
                    TempData[MyGuid + "_TList16"] = model[0].TList16 = mod16 = cmd_Fun.ddl_vendor(userCode, unitid_mst);
                    #endregion
                    #region             
                    TempData[MyGuid + "_TList18"] = model[0].TList18 = mod18 = cmd_Fun.leavereas(userCode, unitid_mst);       //leave reson  


                    TempData[MyGuid + "_TList20"] = model[0].TList20 = mod20 = cmd_Fun.locreg(userCode, unitid_mst);     //location region  


                    model[0].TList19 = mod19;

                    #endregion
                    #region payment mode
                    mod21.Add(new SelectListItem { Text = "Cash", Value = "001" });
                    mod21.Add(new SelectListItem { Text = "Cheque", Value = "002" });
                    mod21.Add(new SelectListItem { Text = "Bank Transfer", Value = "003" });
                    mod21.Add(new SelectListItem { Text = "Demand Draft", Value = "004" });
                    TempData[MyGuid + "_TList21"] = model[0].TList21 = mod21;
                    #endregion

                    #endregion
                    #region bind model
                    model[0].Col11 = vch_num.Trim();
                    model[0].Col15 = "Male";
                    model[0].Col58 = emp_code.Trim();
                    model[0].Col10 = "";
                    model[0].Col69 = mage;
                    model[0].Col70 = fage;
                    model[0].Col71 = "Choose File";
                    model[0].Col72 = "Choose File";
                    model[0].Col73 = "Choose File";
                    model[0].Chk3 = true;
                    model[0].Col87 = "Y";//status                
                    model[0].Col62 = "01/01/1900";
                    model[0].Col107 = "01/01/1900";//joinconfdt

                    model[0].SelectedItems1 = new string[] { "IN" };
                    model[0].SelectedItems2 = new string[] { "001" };
                    model[0].SelectedItems3 = new string[] { "001" };
                    model[0].SelectedItems8 = new string[] { "002" };
                    model[0].SelectedItems15 = new string[] { "001" };
                    model[0].SelectedItems16 = new string[] { "000000" };
                    #endregion
                }
                else if (command == "Cancel")
                {
                    return RedirectToAction(actionName, new { @m_id = EncryptDecrypt.Encrypt(model[0].Col82), @mid = EncryptDecrypt.Encrypt(model[0].Col81) });
                }
                // shiv
                else if (command == "Callback")
                {
                    try
                    {
                        if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; }
                        else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                        model = CallbackFun(btnval, "N", "employee_details", "Hr", model);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                    }
                    catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 0);"; }
                }
                else if (command == "hfbtnyes")
                {
                    if (!model[0].Col10.Trim().ToString().Equals(""))
                    {
                        mq = "update emp_master set emp_status='R' where " + model[0].Col10 + "";
                        res = sgen.execute_cmd(userCode, mq);
                        if (res)
                        {
                            model[0].Col10 = null;
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall = "showmsgJS(1, 'Employee Deleted Successfully', 1);disableForm();";
                        }
                    }
                }
                else if (command == "Save")
                {
                    try
                    {
                        Satransaction sat = new Satransaction(userCode, MyGuid);
                        var tmodel = model.FirstOrDefault();
                        var acncnt = model[0].Col19.Trim().Length;
                        if (model[0].Col19.Trim().ToUpper() != "NA")
                        {
                            if (acncnt < 12)
                            {
                                ViewBag.scripCall += "showmsgJS(1, 'Please fill proper adhaar no. with 12 digit', 2);";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                return View(model);
                            }
                            string acn = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where " +
                                "adhaar_no= '" + model[0].Col19.Trim() + "' and emp_status='Y' and type='EMP' and " +
                                "client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' AND vch_num !='" + tmodel.Col11.Trim() + "'", "name");
                            if (acn.Trim() != "0")
                            {
                                ViewBag.scripCall += "showmsgJS(1, 'Adhaar no. already exist,please check', 2);";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                return View(model);
                            }
                        }
                        if (tmodel.Col69 == null && tmodel.Col70 == null)
                        {
                            ViewBag.scripCall += "showmsgJS(1, 'Please Fill Joinee Age Master For Both Male And Female', 2);";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            return View(model);
                        }
                        ismarried = "N"; isspouseworking = "N"; havechild = "No";
                        string currdate = sgen.server_datetime(userCode);
                        ent_date = currdate;
                        gender = tmodel.Col15;
                        havechild = tmodel.Col25;
                        havetransport = tmodel.Col35;
                        if (tmodel.Chk1 == true) ismarried = "Y";
                        if (tmodel.Chk2 == true) isspouseworking = "Y";
                        if (tmodel.Chk4 == true) isdisable = "Y";
                        if (tmodel.Chk5 == true) vpf = "Y";
                        if (tmodel.Chk6 == true) ispflimit = "Y";
                        //if (tmodel.Chk7 == true) emp_status = "Y";
                        if (tmodel.Chk8 == true) iscanteen = "Y";
                        if (tmodel.Chk9 == true) islogin = "Y";
                        DataTable dtstr = new DataTable();
                        //dtstr = sgen.getdata(userCode, "select * from " + tab_name + " WHERE 1=2");
                        dtstr = cmd_Fun.GetStructure(userCode, tab_name);
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            mq1 = " and vch_num<>'" + tmodel.Col11.Trim() + "'";
                            isedit = true;
                            vch_num = tmodel.Col11.Trim();
                            emp_code = tmodel.Col58.Trim();
                        }
                        else
                        {
                            mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "' and client_id='" + clientid_mst + "'";
                            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                            model[0].Col11 = vch_num.Trim();
                            isedit = false;
                            emp_code = "GMC" + vch_num;
                            model[0].Col58 = emp_code.Trim();
                        }
                        #region dtstr
                        DataRow dr = dtstr.NewRow();
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = ent_date;
                        dr["type"] = type.Trim();
                        dr["type_desc"] = type_desc.Trim();
                        dr["first_name"] = tmodel.Col12.Trim();
                        dr["middle_name"] = tmodel.Col13;
                        dr["last_name"] = tmodel.Col14;
                        dr["gender"] = gender.Trim();
                        dr["dob"] = sgen.Savedate(tmodel.Col16, false);
                        dr["nationality"] = tmodel.SelectedItems1.FirstOrDefault().ToString();
                        dr["pob"] = tmodel.Col17;
                        dr["mother_tongue"] = tmodel.Col18;
                        dr["adhaar_no"] = tmodel.Col19.Trim();
                        dr["caste"] = tmodel.SelectedItems2.FirstOrDefault().ToString();
                        dr["religion"] = tmodel.SelectedItems3.FirstOrDefault().ToString();
                        dr["f_name"] = tmodel.Col22;
                        dr["m_name"] = tmodel.Col21;
                        dr["blood_grp"] = tmodel.SelectedItems4.FirstOrDefault().ToString();
                        dr["ismarried"] = ismarried;
                        if (ismarried.Trim().Equals("Y"))
                        {
                            dr["dom"] = sgen.Savedate(tmodel.Col23, false);
                            dr["spouse_name"] = tmodel.Col24;
                            dr["havechild"] = havechild;
                            dr["child_count"] = tmodel.Col26;
                            dr["isspouseworking"] = isspouseworking;
                            if (isspouseworking.Equals("Y"))
                            {
                                dr["spouse_org"] = tmodel.Col27;
                                dr["spouse_desig"] = tmodel.Col28;
                            }
                            else
                            {
                                dr["spouse_org"] = "0";
                                dr["spouse_desig"] = "0";
                            }
                        }
                        else
                        {
                            //dr["dom"] = "";
                            dr["spouse_name"] = "0";
                            dr["havechild"] = "0";
                            dr["child_count"] = "0";
                        }
                        dr["contact_no"] = tmodel.Col29;
                        dr["alt_contact_no"] = tmodel.Col30;
                        dr["emer_contact_no"] = tmodel.Col32;
                        dr["emer_contact_name"] = tmodel.Col33;
                        dr["emer_contact_relation"] = tmodel.Col34;
                        dr["email_id"] = tmodel.Col31;
                        dr["havetransport"] = havetransport;
                        dr["pick_point"] = tmodel.SelectedItems5.FirstOrDefault().ToString();
                        dr["drop_point"] = tmodel.SelectedItems6.FirstOrDefault().ToString();
                        try
                        {
                            DataTable dtadd = new DataTable();
                            //shiv
                            mq1 = "select * from country_state where rec_id='" + tmodel.Col8.ToString() + "'";
                            dtadd = sgen.getdata(userCode, mq1);
                            if (dtadd.Rows.Count > 0)
                            {
                                dr["per_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
                                dr["per_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
                                dr["per_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
                                dr["per_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
                                dr["per_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
                                dr["per_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
                                dr["per_address"] = tmodel.Col36;
                                dr["per_pincode"] = dtadd.Rows[0]["pincode"].ToString().Trim();
                                if (tmodel.Chk3 == true)
                                {
                                    isperadd = "Y";
                                    dr["cur_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
                                    dr["cur_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
                                    dr["cur_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
                                    dr["cur_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
                                    dr["cur_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
                                    dr["cur_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
                                    dr["cur_address"] = tmodel.Col36;
                                    dr["cur_pincode"] = dtadd.Rows[0]["pincode"].ToString().Trim();
                                }
                                else
                                {
                                    DataTable dtadd1 = new DataTable();
                                    //shiv
                                    mq1 = "select * from country_state where rec_id='" + tmodel.Col9 + "'";
                                    dtadd1 = sgen.getdata(userCode, mq1);
                                    dr["cur_country"] = dtadd1.Rows[0]["alpha_2"].ToString();
                                    dr["cur_state"] = dtadd1.Rows[0]["state_gst_code"].ToString();
                                    dr["cur_city"] = dtadd1.Rows[0]["city_name"].ToString();
                                    dr["cur_district"] = dtadd1.Rows[0]["district_id"].ToString();
                                    dr["cur_tehsil"] = dtadd1.Rows[0]["teh_id"].ToString();
                                    dr["cur_village"] = dtadd1.Rows[0]["v_id"].ToString();
                                    dr["cur_address"] = tmodel.Col43;
                                    dr["cur_pincode"] = dtadd1.Rows[0]["pincode"].ToString();
                                }
                            }
                        }
                        catch (Exception ex) { }
                        dr["isperadd"] = isperadd;
                        dr["isdisable"] = isdisable;
                        if (isdisable.Equals("Y"))
                        {
                            dr["dis_type"] = tmodel.SelectedItems7.FirstOrDefault().ToString();
                            dr["dis_desc"] = tmodel.Col50;
                        }
                        else
                        {
                            dr["dis_type"] = "0";
                            dr["dis_desc"] = "0";
                        }
                        dr["pan_no"] = tmodel.Col51;
                        dr["pf_no"] = tmodel.Col52;
                        dr["pf_uan"] = tmodel.Col53;
                        dr["esi_no"] = tmodel.Col54;
                        dr["emp_code"] = emp_code;
                        dr["external_empno"] = tmodel.Col59;
                        dr["biometric_id"] = tmodel.Col55;
                        dr["st_dt"] = sgen.Make_date_S(tmodel.Col61);
                        dr["ex_dt"] = sgen.Make_date_S(tmodel.Col62);
                        if (sgen.seekval(userCode, "select param1 from controls where type='CTL' and id='000005' ", "param1") == "Y")
                        {
                            dr["fnf_dt"] = sgen.Make_date_S(tmodel.Col62);
                        }
                        else
                        {
                            dr["fnf_dt"] = sgen.Make_date_S(tmodel.Col83);
                        }
                        dr["language"] = String.Join(",", tmodel.SelectedItems8);
                        dr["col1"] = tmodel.Col63;
                        dr["passport_no"] = tmodel.Col56;
                        dr["passport_dt"] = sgen.Make_date_S(tmodel.Col57);
                        dr["bank_name"] = tmodel.SelectedItems13.FirstOrDefault().ToString();
                        dr["account_no"] = tmodel.Col66;
                        dr["ifsc_code"] = tmodel.Col67;
                        dr["account_type"] = tmodel.SelectedItems14.FirstOrDefault().ToString();
                        dr["emp_type"] = tmodel.SelectedItems11.FirstOrDefault().ToString();
                        dr["emp_category"] = tmodel.SelectedItems12.FirstOrDefault().ToString();
                        dr["emp_dept"] = tmodel.SelectedItems9.FirstOrDefault().ToString();
                        dr["emp_desig"] = tmodel.SelectedItems10.FirstOrDefault().ToString();


                        if (tmodel.Col87.Trim().Equals("T"))
                        {
                            dr["istrans"] = "Y";
                            dr["emp_status"] = "N";
                        }
                        else
                        {
                            dr["istrans"] = "N";
                            dr["emp_status"] = tmodel.Col87;

                        }
                        dr["micr_no"] = tmodel.Col68;
                        dr["vid_no"] = tmodel.Col20;
                        dr["is_vpf"] = vpf;
                        if (vpf.Equals("Y") && tmodel.Col64 != "") dr["vpf"] = tmodel.Col64;
                        else dr["vpf"] = "0";
                        dr["old_empcode"] = tmodel.Col60;
                        dr["ispflimit"] = ispflimit;
                        if (ispflimit.Equals("Y") && tmodel.Col65 != "") dr["pf_limit"] = tmodel.Col65;
                        else dr["pf_limit"] = "0";
                        dr["isesilimit"] = tmodel.Chk7 == true ? "Y" : "N";
                        if (tmodel.Chk7 && tmodel.Col86 != "") dr["ESI_limit"] = tmodel.Col86;
                        else dr["ESI_limit"] = "0";
                        dr["latlng"] = tmodel.Col76;
                        dr["addr"] = tmodel.Col77;
                        dr["pension_no"] = tmodel.Col78;
                        dr["off_email"] = tmodel.Col79;
                        dr["off_contact"] = tmodel.Col80;
                        dr["jtype"] = tmodel.SelectedItems15.FirstOrDefault();
                        dr["iscanteen"] = iscanteen.Trim();
                        dr["canteen"] = model[0].Col85;
                        dr["contr"] = tmodel.SelectedItems16.FirstOrDefault().ToString();
                        dr["caste_cat"] = tmodel.SelectedItems17.FirstOrDefault().ToString();
                        dr["l_reason"] = tmodel.SelectedItems18.FirstOrDefault().ToString();
                        dr["subdept"] = tmodel.SelectedItems19.FirstOrDefault().ToString();
                        dr["locreg"] = tmodel.SelectedItems20.FirstOrDefault().ToString();
                        dr["log"] = islogin;
                        dr["act_hrs"] = tmodel.Col95;
                        dr["rptto"] = tmodel.Col97;
                        dr["rptto2"] = tmodel.Col101;
                        dr["prob"] = tmodel.Col102;
                        dr["notempr"] = tmodel.Col103;
                        dr["notemp"] = tmodel.Col104;
                        dr["pop"] = tmodel.Col105;
                        dr["paymode"] = tmodel.SelectedItems21.FirstOrDefault().ToString();
                        dr["jconfdt"] = sgen.Make_date_S(tmodel.Col107);
                        dr["statustype"] = tmodel.Col106;
                        dr["off_phone"] = tmodel.Col108;
                        dr["extno"] = tmodel.Col109;
                        // shiv
                        if (isedit)
                        {
                            dr["ent_by"] = tmodel.Col3;
                            dr["rec_id"] = tmodel.Col7 == null ? "0" : tmodel.Col7;
                            dr["ent_date"] = tmodel.Col4;
                            dr["client_id"] = tmodel.Col1;
                            dr["client_unit_id"] = tmodel.Col2;
                            dr["edit_by"] = userid_mst.Trim();
                            dr["edit_date"] = ent_date;
                        }
                        else
                        {
                            dr["rec_id"] = "0";
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = ent_date;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = ent_date;
                        }
                        #endregion
                        dtstr.Rows.Add(dr);
                        ok = sgen.Update_data_fast1_uncommit(userCode, dtstr, tab_name, tmodel.Col10, isedit, sat);
                        if (ok)
                        {
                            if (islogin == "Y")
                            {
                                mq = "select emp_id from user_details where type='CPR' and substr(lpad(vch_num,6,'0'),1,1)='9' and vch_num='" + vch_num + "'";
                                mq = sgen.seekval(userCode, mq, "emp_id");
                                if (mq == "0")
                                {
                                    Int32 usercount = Convert.ToInt32(sgen.getstring(userCode, "select Count(User_Id) as User_Count from user_details where type='CPR'"));
                                    Int32 comp_usercount = Convert.ToInt32(controls_mst.Split(',')[0]);
                                    if (usercount >= comp_usercount)
                                    {
                                        sat.Rollback();
                                        ViewBag.vnew = "disabled='disabled'";
                                        ViewBag.vedit = "disabled='disabled'";
                                        ViewBag.vsave = "";
                                        ViewBag.vsavenew = "";
                                        ViewBag.scripCall += "showmsgJS(1, 'You Cannot Create a New Account. Your No. of User Is Limited', 2);";
                                        ModelState.Clear();
                                        return View(model);
                                    }
                                    //mq0 = "select max(to_number(vch_num)) as auto_genid from user_details a where type='CPR'";
                                    //mq2 = sgen.genNo(userCode, mq0, 6, "auto_genid");

                                    mq0 = "select max(to_number((substr(lpad(vch_num,6,'0'),2,5)))) as auto_genid from user_details a where type='CPR' and substr(lpad(vch_num,6,'0'),1,1)='9'";
                                    mq2 = "9" + sgen.genNo(userCode, mq0, 5, "auto_genid");

                                    DataTable dtu = sgen.getdata(userCode, "select * from user_details where 1=2");
                                    #region                             
                                    DataTable dtmail = new DataTable();
                                    dtmail = sgen.getdata(userCode, "select com_email,com_password,com_smtp,com_port from company_profile where company_profile_id='" + clientid_mst + "' and type='CP'");
                                    if (dtmail.Rows.Count > 0)
                                    {
                                        string smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
                                        string emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
                                        string passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
                                        int portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
                                        if (passwordvalue == "" && smtpvalue == "" && portvalue == 0 && emailIdvalue == "")
                                        {
                                            sat.Rollback();
                                            ViewBag.vnew = "disabled='disabled'";
                                            ViewBag.vedit = "disabled='disabled'";
                                            ViewBag.vsave = "";
                                            ViewBag.vsavenew = "";
                                            ViewBag.scripCall += "showmsgJS(1, 'Please Configure Your Mail First', 2);";
                                            ModelState.Clear();
                                            return View(model);
                                        }
                                        else
                                        {
                                            DataRow dru = dtu.NewRow();
                                            dru["rec_id"] = "0";
                                            dru["type"] = "CPR";
                                            dru["vch_date"] = currdate;
                                            dru["vch_num"] = mq2;
                                            dru["per_id"] = mq2;
                                            dru["user_id"] = tmodel.Col12.Trim() + vch_num;
                                            dru["password"] = EncryptDecrypt.Encrypt("1234");
                                            dru["email"] = tmodel.Col79;
                                            dru["department"] = tmodel.SelectedItems9.FirstOrDefault().ToString();
                                            dru["Unit_Code"] = "-";
                                            dru["role"] = "paymain-5";
                                            dru["status"] = "active";
                                            dru["email_right"] = "F";
                                            dru["first_name"] = tmodel.Col12.Trim();
                                            dru["last_name"] = tmodel.Col14.Trim();
                                            dru["cur_country"] = "IN";
                                            dru["cur_state"] = "";
                                            dru["cur_city"] = "";
                                            dru["trn_approval_admin"] = "";
                                            dru["designation"] = tmodel.SelectedItems10.FirstOrDefault().ToString();
                                            dru["mod_id"] = "9000";
                                            dru["emp_id"] = vch_num;
                                            dru["con_number"] = tmodel.Col29;
                                            dru["dob"] = sgen.Make_date_S(tmodel.Col16);
                                            dru["client_id"] = clientid_mst;
                                            dru["client_unit_id"] = unitid_mst;
                                            dru["ent_by"] = userid_mst;
                                            dru["ent_date"] = currdate;
                                            dru["edit_by"] = "-";
                                            dru["edit_date"] = currdate;
                                            dtu.Rows.Add(dru);
                                            bool Result = sgen.Update_data_uncommit2(userCode, dtu, "user_details", "", false, sat);
                                            if (Result)
                                            {
                                                string msgbody = "<b style='color: #3caee9; font-size: 20px'>Login Details From Admin</b><br /><hr style='border:1px solid black' /><p>Hi " +
                                                "<b>" + tmodel.Col12.Trim() + "</b>,</p><p>Congratulations, This is to notify that your user login has been created. your login credentials " +
                                                "are as below :-</p><table style='font-weight:600'><tr><td>Company Name </td><td>: " + sgen.GetSession(MyGuid, "clientname_mst").ToString() + " </td></tr><tr><td> " +
                                                "Unit Name </td><td>: " + sgen.GetSession(MyGuid, "unitname_mst").ToString() + " </td></tr><tr><td> User id </td><td>: " + tmodel.Col12.Trim() + " </td></tr><tr><td> " +
                                                "Password </td><td>: " + "1234" + " </td> </tr><tr><td> URL </td><td>: " + subdomain_mst + " </td></tr></table><br /><p>Please " +
                                                "login and change Your Password. Kindly do not share your login credentials</p><p>Thank you,<br />Administrator<br /></p><br /><p>Note:- " +
                                                "Please do not reply to this mail as it is an unmonitered alias.</p>";
                                                try
                                                {
                                                    MailMessage msg = new MailMessage();
                                                    msg.From = new MailAddress(emailIdvalue);
                                                    msg.Bcc.Add("gsthelp001@gmail.com");
                                                    msg.To.Add(tmodel.Col79);
                                                    msg.Subject = "Login_Detail";
                                                    msg.Body = msgbody;
                                                    msg.IsBodyHtml = true;
                                                    SmtpClient smtp = new SmtpClient();
                                                    smtp.Host = smtpvalue;
                                                    System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                                                    NetworkCred.UserName = emailIdvalue;
                                                    NetworkCred.Password = passwordvalue;
                                                    smtp.UseDefaultCredentials = true;
                                                    smtp.Credentials = NetworkCred;
                                                    smtp.Port = portvalue;
                                                    smtp.EnableSsl = true;
                                                    smtp.Send(msg);
                                                    msg.Dispose();
                                                }
                                                catch (Exception ex) { }
                                            }
                                            else
                                            {
                                                sat.Rollback();
                                                ViewBag.vnew = "disabled='disabled'";
                                                ViewBag.vedit = "disabled='disabled'";
                                                ViewBag.vsave = "";
                                                ViewBag.vsavenew = "";
                                                ViewBag.scripCall += "showmsgJS(1, 'Something went wrong in user creation,data Not Saved', 0);";
                                                ModelState.Clear();
                                                return View(model);
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            DataTable dtfile = new DataTable();
                            dtfile = cmd_Fun.GetStructure(userCode, tab_name1);
                            string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                            try
                            {
                                HttpPostedFileBase file3 = upd3;
                                ctype3 = file3.ContentType;
                                fileName3 = file3.FileName;
                                path3 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName3;
                                encpath3 = sgen.Convert_Stringto64(path3).ToString();
                                finalpath3 = serverpath + encpath3;
                                file3.SaveAs(finalpath3);
                                filesave(model, ent_date, dtfile, fileName3, encpath3, "Blank Cheque", ctype3);
                            }
                            catch (Exception ex) { }
                            try
                            {
                                HttpPostedFileBase file2 = upd2;
                                ctype2 = file2.ContentType;
                                fileName2 = file2.FileName;
                                path2 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName2;
                                encpath2 = sgen.Convert_Stringto64(path2).ToString();
                                finalpath2 = serverpath + encpath2;
                                file2.SaveAs(finalpath2);
                                filesave(model, ent_date, dtfile, fileName2, encpath2, "Employee Photo", ctype2);
                            }
                            catch (Exception ex) { }
                            try
                            {
                                HttpPostedFileBase file1 = upd1;
                                ctype1 = file1.ContentType;
                                fileName1 = file1.FileName;
                                path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
                                encpath1 = sgen.Convert_Stringto64(path1).ToString();
                                finalpath1 = serverpath + encpath1;
                                file1.SaveAs(finalpath1);
                                filesave(model, ent_date, dtfile, fileName1, encpath1, "Health Certificate", ctype1);
                            }
                            catch (Exception ex) { }
                            bool res = sgen.Update_data(userCode, dtfile, tab_name1, tmodel.Col10, false);
                            if (res) { }
                            sat.Commit();
                            sgen.SetSession(MyGuid, "vch_num_std", null);
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            //ViewBag.scripCall += "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                            model = new List<Tmodelmain>();
                            model.Add(new Tmodelmain()
                            {
                                TList1 = mod1,
                                TList2 = mod2,
                                TList3 = mod3,
                                TList4 = mod4,
                                TList5 = mod5,
                                TList6 = mod6,
                                TList7 = mod7,
                                TList8 = mod8,
                                TList9 = mod9,
                                TList10 = mod10,
                                TList11 = mod11,
                                TList12 = mod12,
                                TList13 = mod13,
                                TList14 = mod14,
                                TList15 = mod15,
                                TList16 = mod16,
                                TList17 = mod17,
                                TList18 = mod18,
                                TList19 = mod19,
                                TList20 = mod20,
                                TList21 = mod21,
                                SelectedItems1 = new string[] { "" },
                                SelectedItems2 = new string[] { "" },
                                SelectedItems3 = new string[] { "" },
                                SelectedItems4 = new string[] { "" },
                                SelectedItems5 = new string[] { "" },
                                SelectedItems6 = new string[] { "" },
                                SelectedItems7 = new string[] { "" },
                                SelectedItems8 = new string[] { "" },
                                SelectedItems9 = new string[] { "" },
                                SelectedItems10 = new string[] { "" },
                                SelectedItems11 = new string[] { "" },
                                SelectedItems12 = new string[] { "" },
                                SelectedItems13 = new string[] { "" },
                                SelectedItems14 = new string[] { "" },
                                SelectedItems15 = new string[] { "" },
                                SelectedItems16 = new string[] { "" },
                                SelectedItems17 = new string[] { "" },
                                SelectedItems18 = new string[] { "" },
                                SelectedItems19 = new string[] { "" },
                                SelectedItems20 = new string[] { "" },
                                SelectedItems21 = new string[] { "" },
                                Col71 = tmodel.Col71,
                                Col72 = tmodel.Col72,
                                Col73 = tmodel.Col73,
                                Col81 = tmodel.Col81,
                                Col82 = tmodel.Col82,
                                LTM1 = new List<Tmodelmain>()
                            });
                        }
                        else
                        {
                            sat.Rollback();
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall += "showmsgJS(1, 'Data Not Saved', 0);";
                            ModelState.Clear();
                            return View(model);
                        }
                    }
                    catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }

            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public JsonResult getdll_Data(string modelstr, string ddlid, string Myguid) // its a GET, not a POST
        {
            string status = "", where = "";
            List<Tmodelmain> model = new List<Tmodelmain>();
            DataTable dt = new DataTable();
            sgen = new sgenFun(Myguid);
            model = sgen.Make_Model(modelstr);
            FillMst(Myguid);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            if (ddlid == "0")
            {
                try
                {
                    mq = "select a.master_id,a.master_name from master_setting a " +
 "inner join master_setting b on b.master_id=a.classid and b.type='MDP' and find_in_set(b.client_unit_id,a.client_unit_id)=1 " +
 "where a.type in ('CD1','DDCD1') and find_in_set(a.client_unit_id,'" + unitid_mst + "')=1 and a.classid='" + model[0].SelectedItems9.FirstOrDefault() + "'";
                    dt = sgen.getdata(userCode, mq);
                    mod1 = sgen.dt_to_selectlist(dt);
                }
                catch (Exception ex) { }
            }
            return Json(mod1, JsonRequestBehavior.AllowGet);
        }
        private void filesave(List<Tmodelmain> model, string currdate, DataTable dtfile, string filename, string filepath, string filetitle, string content_type)
        {
            type = "EMP";
            type_desc = "Employee Detail";
            DataRow drf = dtfile.NewRow();
            drf["vch_num"] = model[0].Col11.Trim();
            drf["rec_id"] = 0;
            drf["vch_date"] = currdate;
            drf["type"] = type.Trim();
            drf["type_desc"] = type_desc.Trim();
            drf["ref_code"] = model[0].Col11;
            drf["ref_code1"] = Convert.ToInt32(model[0].Col11);
            drf["file_name"] = filename;
            drf["file_path"] = filepath;
            drf["col1"] = filetitle;
            drf["col2"] = content_type;
            drf["rec_id"] = "0";
            drf["ent_by"] = userid_mst;
            drf["ent_date"] = ent_date;
            drf["client_id"] = clientid_mst;
            drf["client_unit_id"] = unitid_mst;
            drf["edit_by"] = "-";
            drf["edit_date"] = ent_date;
            dtfile.Rows.Add(drf);
        }
        private void filesave(List<Tmodelmain> model, string currdate, DataTable dtfile, string filename, string filepath, string filetitle, string content_type, string description, string page_title, string ref1, string ref2)
        {
            DataRow drf = dtfile.NewRow();
            drf["vch_num"] = model[0].Col16;
            drf["type"] = model[0].Col12;
            drf["ref_code"] = ref1;
            drf["col3"] = page_title;
            drf["col1"] = filetitle;
            drf["description"] = description;
            drf["vch_date"] = currdate;
            drf["file_name"] = filename;
            drf["file_path"] = filepath;
            drf["col2"] = content_type;
            if (ref2 == null || ref2 == "0")
            {
                drf["rec_id"] = "0";
            }
            else
            {
                if ((model[0].Col14 == "40000") && isedit == true)
                {
                    drf["rec_id"] = ref2;
                }
                else
                {
                    drf["rec_id"] = "0";
                }
            }
            drf["ent_by"] = userid_mst;
            drf["ent_date"] = currdate;
            drf["client_id"] = clientid_mst;
            drf["client_unit_id"] = unitid_mst;
            drf["edit_by"] = userid_mst;
            drf["edit_date"] = currdate;
            dtfile.Rows.Add(drf);
        }
        #endregion
        #region employee details 2
        public ActionResult employee_details2()
        {
            FillMst("");
            chkRef();
            sgen.SetSession(MyGuid, "vch_num_std", "");
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            ViewBag.vsavenew = "disabled='disabled'";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm = new Tmodelmain();
            tm.Col100 = "Save & New";
            tm.Col81 = mid_mst;
            tm.Col82 = m_id_mst;
            tm.Chk3 = true;
            tm.Col71 = "Choose File";
            tm.Col72 = "Choose File";
            tm.Col73 = "Choose File";
            tm.TList1 = mod1;
            tm.TList2 = mod1;
            tm.TList3 = mod1;
            tm.TList4 = mod1;
            tm.TList5 = mod1;
            tm.TList6 = mod1;
            tm.TList7 = mod1;
            tm.TList8 = mod1;
            tm.TList9 = mod1;
            tm.TList10 = mod1;
            tm.TList11 = mod1;
            tm.TList12 = mod1;
            tm.TList13 = mod1;
            tm.TList14 = mod1;
            tm.TList15 = mod1;
            tm.TList16 = mod1;
            tm.TList17 = mod1;
            tm.TList18 = mod1;
            tm.SelectedItems1 = new string[] { "" };
            tm.SelectedItems2 = new string[] { "" };
            tm.SelectedItems3 = new string[] { "" };
            tm.SelectedItems4 = new string[] { "" };
            tm.SelectedItems5 = new string[] { "" };
            tm.SelectedItems6 = new string[] { "" };
            tm.SelectedItems7 = new string[] { "" };
            tm.SelectedItems8 = new string[] { "" };
            tm.SelectedItems9 = new string[] { "" };
            tm.SelectedItems10 = new string[] { "" };
            tm.SelectedItems11 = new string[] { "" };
            tm.SelectedItems12 = new string[] { "" };
            tm.SelectedItems13 = new string[] { "" };
            tm.SelectedItems14 = new string[] { "" };
            tm.SelectedItems15 = new string[] { "" };
            tm.SelectedItems16 = new string[] { "" };
            tm.SelectedItems17 = new string[] { "" };
            tm.SelectedItems18 = new string[] { "" };
            tm.LTM1 = new List<Tmodelmain>();
            if (tm.Col76 == null) ViewBag.scripCall = ViewBag.scripCall + "try{ initialize(28.477450,77.034138);} catch (err) { } ";
            else ViewBag.scripCall = ViewBag.scripCall + "try { initialize(" + tm.Col76 + ");}catch (err) { } ";
            model.Add(tm);
            return View(model);
        }
        public List<Tmodelmain> newbank_employee_details2(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "vch_num_std", "");
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.scripCall = ViewBag.scripCall + "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "' and client_id='" + clientid_mst + "'";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            emp_code = "GMC" + vch_num.Trim();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            List<SelectListItem> mod6 = new List<SelectListItem>();
            List<SelectListItem> mod7 = new List<SelectListItem>();
            List<SelectListItem> mod8 = new List<SelectListItem>();
            List<SelectListItem> mod9 = new List<SelectListItem>();
            List<SelectListItem> mod10 = new List<SelectListItem>();
            List<SelectListItem> mod11 = new List<SelectListItem>();
            List<SelectListItem> mod12 = new List<SelectListItem>();
            List<SelectListItem> mod13 = new List<SelectListItem>();
            List<SelectListItem> mod14 = new List<SelectListItem>();
            List<SelectListItem> mod15 = new List<SelectListItem>();
            List<SelectListItem> mod16 = new List<SelectListItem>();
            List<SelectListItem> mod17 = new List<SelectListItem>();
            List<SelectListItem> mod18 = new List<SelectListItem>();
            model[0].LTM1 = new List<Tmodelmain>();
            #region masters
            //nationality
            #region
            mod1 = cmd_Fun.country(userCode, unitid_mst);
            //DataTable dtn = new DataTable();
            //dtn = sgen.getdata(userCode, "select DISTINCT alpha_2,country_name from country_state");
            //if (dtn.Rows.Count > 0)
            //{
            //    foreach (DataRow dr in dtn.Rows)
            //    {
            //        mod1.Add(new SelectListItem { Text = dr["country_name"].ToString(), Value = dr["alpha_2"].ToString() });
            //    }
            //}
            TempData[MyGuid + "_TList1"] = mod1;
            #endregion
            //caste
            #region
            //mod2 = cmd_Fun.caste(userCode, clientid_mst, unitid_mst);
            mod2 = cmd_Fun.caste(userCode, unitid_mst);
            TempData[MyGuid + "_TList2"] = mod2;
            #endregion
            //caste actegory
            #region
            mod17 = cmd_Fun.caste_cate(userCode, unitid_mst);
            TempData[MyGuid + "_TList17"] = mod17;
            #endregion
            //religion
            #region
            mod3 = cmd_Fun.religion(userCode, unitid_mst);
            TempData[MyGuid + "_TList3"] = mod3;
            #endregion
            //blood group
            #region
            mod4.Add(new SelectListItem { Text = "A+", Value = "A+" });
            mod4.Add(new SelectListItem { Text = "B+", Value = "B+" });
            mod4.Add(new SelectListItem { Text = "A-", Value = "A-" });
            mod4.Add(new SelectListItem { Text = "B-", Value = "B-" });
            mod4.Add(new SelectListItem { Text = "O+", Value = "O+" });
            mod4.Add(new SelectListItem { Text = "O-", Value = "O-" });
            mod4.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
            mod4.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
            TempData[MyGuid + "_TList4"] = mod4;
            #endregion
            // pickup
            #region
            // shiv
            DataTable dtploc = new DataTable();
            dtploc = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='LOC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
            if (dtploc.Rows.Count > 0)
            {
                foreach (DataRow dr in dtploc.Rows)
                {
                    mod5.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            TempData[MyGuid + "_TList5"] = mod5;
            #endregion
            //drop
            #region
            // shiv
            DataTable dtdloc = new DataTable();
            dtdloc = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='LOC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
            if (dtdloc.Rows.Count > 0)
            {
                foreach (DataRow dr in dtdloc.Rows)
                {
                    mod6.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            TempData[MyGuid + "_TList6"] = mod6;
            #endregion
            //disability type
            #region
            mod7.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
            mod7.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
            TempData[MyGuid + "_TList7"] = mod7;
            #endregion
            //language known
            #region
            mod8 = cmd_Fun.lang(userCode, unitid_mst);
            TempData[MyGuid + "_TList8"] = mod8;
            #endregion
            //department
            #region
            mod9 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
            TempData[MyGuid + "_TList9"] = mod9;
            #endregion
            //designation
            #region
            mod10 = cmd_Fun.desig(userCode, unitid_mst);
            TempData[MyGuid + "_TList10"] = mod10;
            #endregion
            //employee type
            #region
            // shiv
            DataTable dtet = new DataTable();
            dtet = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KET' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1 ");
            if (dtet.Rows.Count > 0)
            {
                foreach (DataRow dr in dtet.Rows)
                {
                    mod11.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            TempData[MyGuid + "_TList11"] = mod11;
            #endregion
            //employee category
            #region
            // shiv
            DataTable dtec = new DataTable();
            dtec = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KEC' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1 ");
            if (dtec.Rows.Count > 0)
            {
                foreach (DataRow dr in dtec.Rows)
                {
                    mod12.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            TempData[MyGuid + "_TList12"] = mod12;
            #endregion
            //bank
            #region
            mod13 = cmd_Fun.bank(userCode, unitid_mst);
            //DataTable dtb = new DataTable();
            //dtb = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='ABD'");
            //if (dtb.Rows.Count > 0)
            //{
            //    foreach (DataRow dr in dtb.Rows)
            //    {
            //        mod13.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
            //    }
            //}
            TempData[MyGuid + "_TList13"] = mod13;
            #endregion
            //account type
            #region
            mod14 = cmd_Fun.acctype(userCode, unitid_mst);
            //DataTable dtac = new DataTable();
            //dtac = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KAC'");
            //if (dtac.Rows.Count > 0)
            //{
            //    foreach (DataRow dr in dtac.Rows)
            //    {
            //        mod14.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
            //    }
            //}
            TempData[MyGuid + "_TList14"] = mod14;
            #endregion
            //joinee age
            #region       
            // shiv
            DataTable dt = new DataTable();
            mq = "select master_name,classid from master_Setting where type='JAM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            dt = sgen.getdata(userCode, mq);
            if (dt.Rows.Count > 0)
            {
                mage = sgen.seekval_dt(dt, "master_name='001'", "classid");
                fage = sgen.seekval_dt(dt, "master_name='002'", "classid");
            }
            #endregion
            #region joinee type
            mod15.Add(new SelectListItem { Text = "New", Value = "001" });
            mod15.Add(new SelectListItem { Text = "Rejoin", Value = "002" });
            TempData[MyGuid + "_TList15"] = mod15;
            #endregion
            #region contractor              
            mod16 = cmd_Fun.ddl_vendor(userCode, unitid_mst);
            TempData[MyGuid + "_TList16"] = mod16;
            #endregion
            #region leave reson              
            mod18 = cmd_Fun.leavereas(userCode, unitid_mst);
            TempData[MyGuid + "_TList18"] = mod18;
            #endregion
            #endregion
            #region bind model
            model[0].Col11 = vch_num.Trim();
            model[0].Col15 = "Male";
            model[0].Col58 = emp_code.Trim();
            model[0].Col10 = "";
            model[0].Col69 = mage;
            model[0].Col70 = fage;
            model[0].Col71 = "Choose File";
            model[0].Col72 = "Choose File";
            model[0].Col73 = "Choose File";
            model[0].Chk3 = true;
            model[0].Chk7 = true;//status                
            model[0].Col62 = "01/01/1900";
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].TList3 = mod3;
            model[0].TList4 = mod4;
            model[0].TList5 = mod5;
            model[0].TList6 = mod6;
            model[0].TList7 = mod7;
            model[0].TList8 = mod8;
            model[0].TList9 = mod9;
            model[0].TList10 = mod10;
            model[0].TList11 = mod11;
            model[0].TList12 = mod12;
            model[0].TList13 = mod13;
            model[0].TList14 = mod14;
            model[0].TList14 = mod14;
            model[0].TList15 = mod15;
            model[0].TList16 = mod16;
            model[0].TList17 = mod17;
            model[0].TList18 = mod18;
            model[0].SelectedItems1 = new string[] { "IN" };
            model[0].SelectedItems2 = new string[] { "001" };
            model[0].SelectedItems3 = new string[] { "001" };
            model[0].SelectedItems8 = new string[] { "002" };
            model[0].SelectedItems15 = new string[] { "001" };
            model[0].SelectedItems16 = new string[] { "000000" };
            model[0].Col100 = "Save & New";
            #endregion
            return model;
        }
        [HttpPost]
        public ActionResult employee_details2(List<Tmodelmain> model, string command, HttpPostedFileBase upd1, HttpPostedFileBase upd2, HttpPostedFileBase upd3, string fid)
        {
            string iscanteen = "N";
            FillMst(model[0].Col15);
            if (model[0].Col76 == null) ViewBag.scripCall = "try { initialize(28.477450,77.034138); } catch (err) { } ";
            else ViewBag.scripCall = "try { initialize(" + model[0].Col76 + "); } catch (err) { }";
            tab_name = "emp_master";
            tab_name1 = "file_tab";
            type_desc = "Employee Detail";
            type = "EMP";
            #region list
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_TList5"];
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_TList6"];
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_TList7"];
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_TList8"];
            List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_TList9"];
            List<SelectListItem> mod10 = (List<SelectListItem>)TempData[MyGuid + "_TList10"];
            List<SelectListItem> mod11 = (List<SelectListItem>)TempData[MyGuid + "_TList11"];
            List<SelectListItem> mod12 = (List<SelectListItem>)TempData[MyGuid + "_TList12"];
            List<SelectListItem> mod13 = (List<SelectListItem>)TempData[MyGuid + "_TList13"];
            List<SelectListItem> mod14 = (List<SelectListItem>)TempData[MyGuid + "_TList14"];
            List<SelectListItem> mod15 = (List<SelectListItem>)TempData[MyGuid + "_TList15"];
            List<SelectListItem> mod16 = (List<SelectListItem>)TempData[MyGuid + "_TList16"];
            List<SelectListItem> mod17 = (List<SelectListItem>)TempData[MyGuid + "_TList17"];
            List<SelectListItem> mod18 = (List<SelectListItem>)TempData[MyGuid + "_TList18"];
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].TList3 = mod3;
            model[0].TList4 = mod4;
            model[0].TList5 = mod5;
            model[0].TList6 = mod6;
            model[0].TList7 = mod7;
            model[0].TList8 = mod8;
            model[0].TList9 = mod9;
            model[0].TList10 = mod10;
            model[0].TList11 = mod11;
            model[0].TList12 = mod12;
            model[0].TList13 = mod13;
            model[0].TList14 = mod14;
            model[0].TList15 = mod15;
            model[0].TList16 = mod16;
            model[0].TList17 = mod17;
            model[0].TList18 = mod18;
            TempData[MyGuid + "_TList1"] = mod1;
            TempData[MyGuid + "_TList2"] = mod2;
            TempData[MyGuid + "_TList3"] = mod3;
            TempData[MyGuid + "_TList4"] = mod4;
            TempData[MyGuid + "_TList5"] = mod5;
            TempData[MyGuid + "_TList6"] = mod6;
            TempData[MyGuid + "_TList7"] = mod7;
            TempData[MyGuid + "_TList8"] = mod8;
            TempData[MyGuid + "_TList9"] = mod9;
            TempData[MyGuid + "_TList10"] = mod10;
            TempData[MyGuid + "_TList11"] = mod11;
            TempData[MyGuid + "_TList12"] = mod12;
            TempData[MyGuid + "_TList13"] = mod13;
            TempData[MyGuid + "_TList14"] = mod14;
            TempData[MyGuid + "_TList15"] = mod15;
            TempData[MyGuid + "_TList16"] = mod16;
            TempData[MyGuid + "_TList17"] = mod17;
            TempData[MyGuid + "_TList18"] = mod18;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            if (model[0].SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
            if (model[0].SelectedItems10 == null) model[0].SelectedItems10 = new string[] { "" };
            if (model[0].SelectedItems11 == null) model[0].SelectedItems11 = new string[] { "" };
            if (model[0].SelectedItems12 == null) model[0].SelectedItems12 = new string[] { "" };
            if (model[0].SelectedItems13 == null) model[0].SelectedItems13 = new string[] { "" };
            if (model[0].SelectedItems14 == null) model[0].SelectedItems14 = new string[] { "" };
            if (model[0].SelectedItems15 == null) model[0].SelectedItems15 = new string[] { "" };
            if (model[0].SelectedItems16 == null) model[0].SelectedItems16 = new string[] { "" };
            if (model[0].SelectedItems17 == null) model[0].SelectedItems17 = new string[] { "" };
            if (model[0].SelectedItems18 == null) model[0].SelectedItems18 = new string[] { "" };
            #endregion
            if (command == "New")
            // shiv
            {
                model = newbank_employee_details2(model);
                #region commented code
                //Session["vch_num_std"] = "";
                //Session["EDMODE"] = "N";
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
                //ViewBag.scripCall = ViewBag.scripCall + "enableForm();";
                //mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "' and client_id='" + clientid_mst + "'";
                //vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                //emp_code = "GMC" + vch_num.Trim();
                //mod1 = new List<SelectListItem>();
                //mod2 = new List<SelectListItem>();
                //mod3 = new List<SelectListItem>();
                //mod4 = new List<SelectListItem>();
                //mod5 = new List<SelectListItem>();
                //mod6 = new List<SelectListItem>();
                //mod7 = new List<SelectListItem>();
                //mod8 = new List<SelectListItem>();
                //mod9 = new List<SelectListItem>();
                //mod10 = new List<SelectListItem>();
                //mod11 = new List<SelectListItem>();
                //mod12 = new List<SelectListItem>();
                //mod13 = new List<SelectListItem>();
                //mod14 = new List<SelectListItem>();
                //mod15 = new List<SelectListItem>();
                //mod16 = new List<SelectListItem>();
                //mod17 = new List<SelectListItem>();
                //mod18 = new List<SelectListItem>();
                //model[0].LTM1 = new List<Tmodelmain>();
                //#region masters
                ////nationality
                //#region
                //mod1 = cmd_Fun.country(userCode, clientid_mst, unitid_mst);
                ////DataTable dtn = new DataTable();
                ////dtn = sgen.getdata(userCode, "select DISTINCT alpha_2,country_name from country_state");
                ////if (dtn.Rows.Count > 0)
                ////{
                ////    foreach (DataRow dr in dtn.Rows)
                ////    {
                ////        mod1.Add(new SelectListItem { Text = dr["country_name"].ToString(), Value = dr["alpha_2"].ToString() });
                ////    }
                ////}
                //TempData[MyGuid + "_TList1"] = mod1;
                //#endregion
                ////caste
                //#region
                //mod2 = cmd_Fun.caste(userCode, clientid_mst, unitid_mst);
                ////DataTable dtc = new DataTable();
                ////dtc = sgen.getdata(userCode, "select master_id,master_name FROM master_setting where type='ECT'");
                ////if (dtc.Rows.Count > 0)
                ////{
                ////    foreach (DataRow dr in dtc.Rows)
                ////    {
                ////        mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                ////    }
                ////}
                //TempData[MyGuid + "_TList2"] = mod2;
                //#endregion
                ////caste actegory
                //#region
                //mod17 = cmd_Fun.caste_cate(userCode, clientid_mst, unitid_mst);
                //TempData[MyGuid + "_TList17"] = mod17;
                //#endregion
                ////religion
                //#region
                //mod3 = cmd_Fun.religion(userCode, clientid_mst, unitid_mst);
                ////DataTable dtr = new DataTable();
                ////dtr = sgen.getdata(userCode, "select master_id,master_name FROM master_setting where type='ERT'");
                ////if (dtr.Rows.Count > 0)
                ////{
                ////    foreach (DataRow dr in dtr.Rows)
                ////    {
                ////        mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                ////    }
                ////}
                //TempData[MyGuid + "_TList3"] = mod3;
                //#endregion
                ////blood group
                //#region
                //mod4.Add(new SelectListItem { Text = "A+", Value = "A+" });
                //mod4.Add(new SelectListItem { Text = "B+", Value = "B+" });
                //mod4.Add(new SelectListItem { Text = "A-", Value = "A-" });
                //mod4.Add(new SelectListItem { Text = "B-", Value = "B-" });
                //mod4.Add(new SelectListItem { Text = "O+", Value = "O+" });
                //mod4.Add(new SelectListItem { Text = "O-", Value = "O-" });
                //mod4.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
                //mod4.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
                //TempData[MyGuid + "_TList4"] = mod4;
                //#endregion
                //// pickup
                //#region
                //// shiv
                //DataTable dtploc = new DataTable();
                //dtploc = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='LOC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                //if (dtploc.Rows.Count > 0)
                //{
                //    foreach (DataRow dr in dtploc.Rows)
                //    {
                //        mod5.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                //    }
                //}
                //TempData[MyGuid + "_TList5"] = mod5;
                //#endregion
                ////drop
                //#region
                //// shiv
                //DataTable dtdloc = new DataTable();
                //dtdloc = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='LOC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                //if (dtdloc.Rows.Count > 0)
                //{
                //    foreach (DataRow dr in dtdloc.Rows)
                //    {
                //        mod6.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                //    }
                //}
                //TempData[MyGuid + "_TList6"] = mod6;
                //#endregion
                ////disability type
                //#region
                //mod7.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                //mod7.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                //TempData[MyGuid + "_TList7"] = mod7;
                //#endregion
                ////language known
                //#region
                //mod8 = cmd_Fun.lang(userCode, clientid_mst, unitid_mst);
                ////DataTable dtlang = new DataTable();
                ////dtlang = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KLM'");
                ////if (dtlang.Rows.Count > 0)
                ////{
                ////    foreach (DataRow dr in dtlang.Rows)
                ////    {
                ////        mod8.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                ////    }
                ////}
                //TempData[MyGuid + "_TList8"] = mod8;
                //#endregion
                ////department
                //#region
                //mod9 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                ////DataTable dtdp = new DataTable();
                ////dtdp = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='MDP'");
                ////if (dtdp.Rows.Count > 0)
                ////{
                ////    foreach (DataRow dr in dtdp.Rows)
                ////    {
                ////        mod9.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                ////    }
                ////}
                //TempData[MyGuid + "_TList9"] = mod9;
                //#endregion
                ////designation
                //#region
                //mod10 = cmd_Fun.desig(userCode, clientid_mst, unitid_mst);
                ////DataTable dtdg = new DataTable();
                ////dtdg = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='MDG'");
                ////if (dtdg.Rows.Count > 0)
                ////{
                ////    foreach (DataRow dr in dtdg.Rows)
                ////    {
                ////        mod10.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                ////    }
                ////}
                //TempData[MyGuid + "_TList10"] = mod10;
                //#endregion
                ////employee type
                //#region
                //// shiv
                //DataTable dtet = new DataTable();
                //dtet = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KET' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                //if (dtet.Rows.Count > 0)
                //{
                //    foreach (DataRow dr in dtet.Rows)
                //    {
                //        mod11.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                //    }
                //}
                //TempData[MyGuid + "_TList11"] = mod11;
                //#endregion
                ////employee category
                //#region
                //// shiv
                //DataTable dtec = new DataTable();
                //dtec = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KEC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                //if (dtec.Rows.Count > 0)
                //{
                //    foreach (DataRow dr in dtec.Rows)
                //    {
                //        mod12.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                //    }
                //}
                //TempData[MyGuid + "_TList12"] = mod12;
                //#endregion
                ////bank
                //#region
                //mod13 = cmd_Fun.bank(userCode, clientid_mst, unitid_mst);
                ////DataTable dtb = new DataTable();
                ////dtb = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='ABD'");
                ////if (dtb.Rows.Count > 0)
                ////{
                ////    foreach (DataRow dr in dtb.Rows)
                ////    {
                ////        mod13.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                ////    }
                ////}
                //TempData[MyGuid + "_TList13"] = mod13;
                //#endregion
                ////account type
                //#region
                //mod14 = cmd_Fun.acctype(userCode, clientid_mst, unitid_mst);
                ////DataTable dtac = new DataTable();
                ////dtac = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KAC'");
                ////if (dtac.Rows.Count > 0)
                ////{
                ////    foreach (DataRow dr in dtac.Rows)
                ////    {
                ////        mod14.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                ////    }
                ////}
                //TempData[MyGuid + "_TList14"] = mod14;
                //#endregion
                ////joinee age
                //#region       
                //// shiv
                //DataTable dt = new DataTable();
                //mq = "select master_name,classid from master_Setting where type='JAM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                //dt = sgen.getdata(userCode, mq);
                //if (dt.Rows.Count > 0)
                //{
                //    mage = sgen.seekval_dt(dt, "master_name='001'", "classid");
                //    fage = sgen.seekval_dt(dt, "master_name='002'", "classid");
                //}
                //#endregion
                //#region joinee type
                //mod15.Add(new SelectListItem { Text = "New", Value = "001" });
                //mod15.Add(new SelectListItem { Text = "Rejoin", Value = "002" });
                //TempData[MyGuid + "_TList15"] = mod15;
                //#endregion
                //#region contractor              
                //mod16 = cmd_Fun.ddl_vendor(userCode, clientid_mst, unitid_mst);
                //TempData[MyGuid + "_TList16"] = mod16;
                //#endregion
                //#region leave reson              
                //mod18 = cmd_Fun.leavereas(userCode, clientid_mst, unitid_mst);
                //TempData[MyGuid + "_TList18"] = mod18;
                //#endregion
                //#endregion
                //#region bind model
                //model[0].Col11 = vch_num.Trim();
                //model[0].Col15 = "Male";
                //model[0].Col58 = emp_code.Trim();
                //model[0].Col10 = "";
                //model[0].Col69 = mage;
                //model[0].Col70 = fage;
                //model[0].Col71 = "Choose File";
                //model[0].Col72 = "Choose File";
                //model[0].Col73 = "Choose File";
                //model[0].Chk3 = true;
                //model[0].Chk7 = true;//status                
                //model[0].Col62 = "01/01/1900";
                //model[0].TList1 = mod1;
                //model[0].TList2 = mod2;
                //model[0].TList3 = mod3;
                //model[0].TList4 = mod4;
                //model[0].TList5 = mod5;
                //model[0].TList6 = mod6;
                //model[0].TList7 = mod7;
                //model[0].TList8 = mod8;
                //model[0].TList9 = mod9;
                //model[0].TList10 = mod10;
                //model[0].TList11 = mod11;
                //model[0].TList12 = mod12;
                //model[0].TList13 = mod13;
                //model[0].TList14 = mod14;
                //model[0].TList14 = mod14;
                //model[0].TList15 = mod15;
                //model[0].TList16 = mod16;
                //model[0].TList17 = mod17;
                //model[0].TList18 = mod18;
                //model[0].SelectedItems1 = new string[] { "IN" };
                //model[0].SelectedItems2 = new string[] { "001" };
                //model[0].SelectedItems3 = new string[] { "001" };
                //model[0].SelectedItems8 = new string[] { "002" };
                //model[0].SelectedItems15 = new string[] { "001" };
                //model[0].SelectedItems16 = new string[] { "000000" };
                //#endregion
                #endregion
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            // shiv
            else if (command == "Callback")
            {
                try
                {
                    if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; }
                    else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "N", "employee_details", "Hr", model);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 0);"; }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    if (tmodel.Col69 == null && tmodel.Col70 == null)
                    {
                        ViewBag.scripCall += "showmsgJS(1, 'Please Fill Joinee Age Master For Both Male And Female', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    ismarried = "N"; isspouseworking = "N"; havechild = "No";
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    gender = tmodel.Col15;
                    havechild = tmodel.Col25;
                    havetransport = tmodel.Col35;
                    if (tmodel.Chk1 == true) ismarried = "Y";
                    if (tmodel.Chk2 == true) isspouseworking = "Y";
                    if (tmodel.Chk4 == true) isdisable = "Y";
                    if (tmodel.Chk5 == true) vpf = "Y";
                    if (tmodel.Chk6 == true) ispflimit = "Y";
                    if (tmodel.Chk7 == true) emp_status = "Y";
                    if (tmodel.Chk8 == true) iscanteen = "Y";
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + tab_name + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, tab_name);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + tmodel.Col11.Trim() + "'";
                        isedit = true;
                        vch_num = tmodel.Col11.Trim();
                        emp_code = tmodel.Col58.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "' and client_id='" + clientid_mst + "'";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col11 = vch_num.Trim();
                        isedit = false;
                        emp_code = "GMC" + vch_num;
                        model[0].Col58 = emp_code.Trim();
                    }
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = ent_date;
                    dr["type"] = type.Trim();
                    dr["type_desc"] = type_desc.Trim();
                    dr["first_name"] = tmodel.Col12.Trim();
                    dr["middle_name"] = tmodel.Col13;
                    dr["last_name"] = tmodel.Col14;
                    dr["gender"] = gender.Trim();
                    dr["dob"] = sgen.Savedate(tmodel.Col16, false);
                    dr["nationality"] = tmodel.SelectedItems1.FirstOrDefault().ToString();
                    dr["pob"] = tmodel.Col17;
                    dr["mother_tongue"] = tmodel.Col18;
                    dr["adhaar_no"] = tmodel.Col19.Trim();
                    dr["caste"] = tmodel.SelectedItems2.FirstOrDefault().ToString();
                    dr["religion"] = tmodel.SelectedItems3.FirstOrDefault().ToString();
                    dr["f_name"] = tmodel.Col22;
                    dr["m_name"] = tmodel.Col21;
                    dr["blood_grp"] = tmodel.SelectedItems4.FirstOrDefault().ToString();
                    dr["ismarried"] = ismarried;
                    if (ismarried.Trim().Equals("Y"))
                    {
                        dr["dom"] = sgen.Savedate(tmodel.Col23, false);
                        dr["spouse_name"] = tmodel.Col24;
                        dr["havechild"] = havechild;
                        dr["child_count"] = tmodel.Col26;
                        dr["isspouseworking"] = isspouseworking;
                        if (isspouseworking.Equals("Y"))
                        {
                            dr["spouse_org"] = tmodel.Col27;
                            dr["spouse_desig"] = tmodel.Col28;
                        }
                        else
                        {
                            dr["spouse_org"] = "0";
                            dr["spouse_desig"] = "0";
                        }
                    }
                    else
                    {
                        //dr["dom"] = "";
                        dr["spouse_name"] = "0";
                        dr["havechild"] = "0";
                        dr["child_count"] = "0";
                    }
                    dr["contact_no"] = tmodel.Col29;
                    dr["alt_contact_no"] = tmodel.Col30;
                    dr["emer_contact_no"] = tmodel.Col32;
                    dr["emer_contact_name"] = tmodel.Col33;
                    dr["emer_contact_relation"] = tmodel.Col34;
                    dr["email_id"] = tmodel.Col31;
                    dr["havetransport"] = havetransport;
                    dr["pick_point"] = tmodel.SelectedItems5.FirstOrDefault().ToString();
                    dr["drop_point"] = tmodel.SelectedItems6.FirstOrDefault().ToString();
                    try
                    {
                        DataTable dtadd = new DataTable();
                        //shiv
                        mq1 = "select * from country_state where rec_id='" + tmodel.Col8.ToString() + "'";
                        dtadd = sgen.getdata(userCode, mq1);
                        if (dtadd.Rows.Count > 0)
                        {
                            dr["per_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
                            dr["per_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
                            dr["per_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
                            dr["per_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
                            dr["per_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
                            dr["per_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
                            dr["per_address"] = tmodel.Col36;
                            dr["per_pincode"] = dtadd.Rows[0]["pincode"].ToString().Trim();
                            if (tmodel.Chk3 == true)
                            {
                                isperadd = "Y";
                                dr["cur_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
                                dr["cur_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
                                dr["cur_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
                                dr["cur_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
                                dr["cur_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
                                dr["cur_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
                                dr["cur_address"] = tmodel.Col36;
                                dr["cur_pincode"] = dtadd.Rows[0]["pincode"].ToString().Trim();
                            }
                            else
                            {
                                DataTable dtadd1 = new DataTable();
                                //shiv
                                mq1 = "select * from country_state where rec_id='" + tmodel.Col9 + "'";
                                dtadd1 = sgen.getdata(userCode, mq1);
                                dr["cur_country"] = dtadd1.Rows[0]["alpha_2"].ToString();
                                dr["cur_state"] = dtadd1.Rows[0]["state_gst_code"].ToString();
                                dr["cur_city"] = dtadd1.Rows[0]["city_name"].ToString();
                                dr["cur_district"] = dtadd1.Rows[0]["district_id"].ToString();
                                dr["cur_tehsil"] = dtadd1.Rows[0]["teh_id"].ToString();
                                dr["cur_village"] = dtadd1.Rows[0]["v_id"].ToString();
                                dr["cur_address"] = tmodel.Col43;
                                dr["cur_pincode"] = dtadd1.Rows[0]["pincode"].ToString();
                            }
                        }
                    }
                    catch (Exception ex) { }
                    dr["isperadd"] = isperadd;
                    dr["isdisable"] = isdisable;
                    if (isdisable.Equals("Y"))
                    {
                        dr["dis_type"] = tmodel.SelectedItems7.FirstOrDefault().ToString();
                        dr["dis_desc"] = tmodel.Col50;
                    }
                    else
                    {
                        dr["dis_type"] = "0";
                        dr["dis_desc"] = "0";
                    }
                    dr["pan_no"] = tmodel.Col51;
                    dr["pf_no"] = tmodel.Col52;
                    dr["pf_uan"] = tmodel.Col53;
                    dr["esi_no"] = tmodel.Col54;
                    dr["emp_code"] = emp_code;
                    dr["external_empno"] = tmodel.Col59;
                    dr["biometric_id"] = tmodel.Col55;
                    dr["st_dt"] = sgen.Savedate(tmodel.Col61, false);
                    dr["ex_dt"] = sgen.Savedate(tmodel.Col62, false);
                    dr["language"] = String.Join(",", tmodel.SelectedItems8);
                    dr["col1"] = tmodel.Col63;
                    dr["passport_no"] = tmodel.Col56;
                    dr["passport_dt"] = sgen.Savedate(tmodel.Col57, false);
                    dr["bank_name"] = tmodel.SelectedItems13.FirstOrDefault().ToString();
                    dr["account_no"] = tmodel.Col66;
                    dr["ifsc_code"] = tmodel.Col67;
                    dr["account_type"] = tmodel.SelectedItems14.FirstOrDefault().ToString();
                    dr["emp_type"] = tmodel.SelectedItems11.FirstOrDefault().ToString();
                    dr["emp_category"] = tmodel.SelectedItems12.FirstOrDefault().ToString();
                    dr["emp_dept"] = tmodel.SelectedItems9.FirstOrDefault().ToString();
                    dr["emp_desig"] = tmodel.SelectedItems10.FirstOrDefault().ToString();
                    dr["emp_status"] = emp_status;
                    dr["micr_no"] = tmodel.Col68;
                    dr["vid_no"] = tmodel.Col20;
                    dr["is_vpf"] = vpf;
                    if (vpf.Equals("Y") && tmodel.Col64 != "") dr["vpf"] = tmodel.Col64;
                    else dr["vpf"] = "0";
                    dr["old_empcode"] = tmodel.Col60;
                    dr["ispflimit"] = ispflimit;
                    if (ispflimit.Equals("Y") && tmodel.Col65 != "") dr["pf_limit"] = tmodel.Col65;
                    else dr["pf_limit"] = "0";
                    dr["latlng"] = tmodel.Col76;
                    dr["addr"] = tmodel.Col77;
                    dr["pension_no"] = tmodel.Col78;
                    dr["off_email"] = tmodel.Col79;
                    dr["off_contact"] = tmodel.Col80;
                    dr["jtype"] = tmodel.SelectedItems15.FirstOrDefault();
                    dr["iscanteen"] = iscanteen.Trim();
                    dr["canteen"] = model[0].Col85;
                    dr["contr"] = tmodel.SelectedItems16.FirstOrDefault().ToString();
                    dr["caste_cat"] = tmodel.SelectedItems17.FirstOrDefault().ToString();
                    dr["l_reason"] = tmodel.SelectedItems18.FirstOrDefault().ToString();
                    // shiv
                    if (isedit)
                    {
                        dr["ent_by"] = tmodel.Col3;
                        dr["rec_id"] = tmodel.Col7;
                        dr["ent_date"] = tmodel.Col4;
                        dr["client_id"] = tmodel.Col1;
                        dr["client_unit_id"] = tmodel.Col2;
                        dr["edit_by"] = userid_mst.Trim();
                        dr["edit_date"] = ent_date;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = ent_date;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = ent_date;
                    }
                    #endregion
                    dtstr.Rows.Add(dr);
                    ok = sgen.Update_data(userCode, dtstr, tab_name, tmodel.Col10, isedit);
                    if (ok)
                    {
                        DataTable dtfile = new DataTable();
                        //dtfile = sgen.getdata(userCode, "select * from " + tab_name1 + " WHERE 1=2");
                        dtfile = cmd_Fun.GetStructure(userCode, tab_name1);
                        string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                        try
                        {
                            HttpPostedFileBase file3 = upd3;
                            ctype3 = file3.ContentType;
                            fileName3 = file3.FileName;
                            path3 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName3;
                            encpath3 = sgen.Convert_Stringto64(path3).ToString();
                            finalpath3 = serverpath + encpath3;
                            file3.SaveAs(finalpath3);
                            filesave(model, ent_date, dtfile, fileName3, encpath3, "Blank Cheque", ctype3);
                        }
                        catch (Exception ex) { }
                        try
                        {
                            HttpPostedFileBase file2 = upd2;
                            ctype2 = file2.ContentType;
                            fileName2 = file2.FileName;
                            path2 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName2;
                            encpath2 = sgen.Convert_Stringto64(path2).ToString();
                            finalpath2 = serverpath + encpath2;
                            file2.SaveAs(finalpath2);
                            filesave(model, ent_date, dtfile, fileName2, encpath2, "Employee Photo", ctype2);
                        }
                        catch (Exception ex) { }
                        try
                        {
                            HttpPostedFileBase file1 = upd1;
                            ctype1 = file1.ContentType;
                            fileName1 = file1.FileName;
                            path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
                            encpath1 = sgen.Convert_Stringto64(path1).ToString();
                            finalpath1 = serverpath + encpath1;
                            file1.SaveAs(finalpath1);
                            filesave(model, ent_date, dtfile, fileName1, encpath1, "Health Certificate", ctype1);
                        }
                        catch (Exception ex) { }
                        bool res = sgen.Update_data(userCode, dtfile, tab_name1, tmodel.Col10, false);
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        if (res)
                        {
                            sgen.SetSession(MyGuid, "vch_num_std", null);
                            //ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                            if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                            {
                                ViewBag.vnew = "";
                                ViewBag.vedit = "";
                                ViewBag.vsave = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                //ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                            }
                            else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                            {
                                try
                                {
                                    model = newbank_employee_details2(model);
                                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                                }
                                catch (Exception ex) { }
                            }
                            model = new List<Tmodelmain>();
                            model.Add(new Tmodelmain()
                            {
                                TList1 = mod1,
                                TList2 = mod2,
                                TList3 = mod3,
                                TList4 = mod4,
                                TList5 = mod5,
                                TList6 = mod6,
                                TList7 = mod7,
                                TList8 = mod8,
                                TList9 = mod9,
                                TList10 = mod10,
                                TList11 = mod11,
                                TList12 = mod12,
                                TList13 = mod13,
                                TList14 = mod14,
                                TList15 = mod15,
                                TList16 = mod16,
                                TList17 = mod17,
                                TList18 = mod18,
                                SelectedItems1 = new string[] { "" },
                                SelectedItems2 = new string[] { "" },
                                SelectedItems3 = new string[] { "" },
                                SelectedItems4 = new string[] { "" },
                                SelectedItems5 = new string[] { "" },
                                SelectedItems6 = new string[] { "" },
                                SelectedItems7 = new string[] { "" },
                                SelectedItems8 = new string[] { "" },
                                SelectedItems9 = new string[] { "" },
                                SelectedItems10 = new string[] { "" },
                                SelectedItems11 = new string[] { "" },
                                SelectedItems12 = new string[] { "" },
                                SelectedItems13 = new string[] { "" },
                                SelectedItems14 = new string[] { "" },
                                SelectedItems15 = new string[] { "" },
                                SelectedItems16 = new string[] { "" },
                                SelectedItems17 = new string[] { "" },
                                SelectedItems18 = new string[] { "" },
                                Col71 = tmodel.Col71,
                                Col72 = tmodel.Col72,
                                Col73 = tmodel.Col73,
                                Col81 = tmodel.Col81,
                                Col82 = tmodel.Col82,
                                Col100 = "Save & New",
                                LTM1 = new List<Tmodelmain>()
                            });
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region check employee data   
        // shiv - can we put all in one mq
        [HttpGet]
        public FileResult fdown(string value)
        {
            FillMst("");
            if (!value.Trim().Equals(""))
            {
                DataTable dt2 = new DataTable();
                mq = "select file_name,file_path from file_tab where rec_id='" + value.Trim() + "' and type='EMP' and client_id='"
                    + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                dt2 = sgen.getdata(userCode, mq);
                if (dt2.Rows.Count > 0)
                {
                    path1 = Convert.ToString(dt2.Rows[0]["file_path"]);
                    fileName1 = Convert.ToString(dt2.Rows[0]["file_name"]);
                }
            }
            byte[] fileBytes = System.IO.File.ReadAllBytes(Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/" + path1));
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fileName1);
        }
        //[HttpPost]
        //public void fdelete(string value, string Myguid)
        //{
        //    sgen = new sgenFun(Myguid);

        //    sgen.SetSession(Myguid, "delid", value);
        //    //FillMst();
        //    //try
        //    //{
        //    //    if (!value.Trim().Equals(""))
        //    //    {
        //    //        res = sgen.execute_cmd(userCode, "Delete from file_tab WHERE rec_id='" + value + "' and type='EMP' and client_id='"
        //    //   + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //    //        if (res == true) { } /*return Content(res.ToString());*/
        //    //        else { res = false; /*return Content(res.ToString());*/ }
        //    //    }
        //    //    else { res = false; /*return Content(res.ToString());*/ }
        //    //}
        //    //catch (Exception ex) { res = false;/* return Content(res.ToString());*/ }
        //}
        [HttpPost]
        public void fdelete(string value, string Myguid)
        {
            if (!value.Trim().Equals(""))
            {
                sgen = new sgenFun(MyGuid);
                sgen.SetSession(Myguid, "delid", value);
            }
        }
        [HttpPost]
        public ContentResult filedata()
        {
            if (sgen.GetSession(MyGuid, "vch_num_std") != null)
            {
                sgenFun sgen = new sgenFun(MyGuid);
                string vch = sgen.GetSession(MyGuid, "vch_num_std").ToString();
                DataTable dt = new DataTable();
                dt = sgen.getdata(userCode, "select rec_id,file_name,file_path,col1 from file_tab where ref_code='" + vch + "' and type='" + type + "' and " +
                    "client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                dt.TableName = "MainData";
                DataSet ds3 = new DataSet();
                ds3.Tables.Add(dt);
                return Content(ds3.GetXml());
            }
            else { return Content(""); }
        }
        [HttpPost]
        public ContentResult checkadhaarself(string value, string Myguid)
        {
            FillMst(Myguid);
            try
            {
                if (!value.Trim().Equals(""))
                {
                    reslt = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where adhaar_no= '"
                        + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!reslt.Trim().Equals("0")) { reslt = "Y"; return Content(reslt); }
                    else { reslt = "N"; return Content(reslt); }
                }
                else { reslt = "N"; return Content(reslt); }
            }
            catch (Exception ex) { reslt = "E"; return Content(reslt); }
        }
        [HttpPost]
        public ContentResult checkvid(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    reslt = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where vid_no= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!reslt.Trim().Equals("0")) { reslt = "Y"; return Content(reslt); }
                    else { reslt = "N"; return Content(reslt); }
                }
                else { reslt = "N"; return Content(reslt); }
            }
            catch (Exception ex) { reslt = "E"; return Content(reslt); }
        }
        [HttpPost]
        public ContentResult checkpan(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    mq = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where pan_no= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!mq.Trim().Equals("0")) { mq = "Y"; return Content(mq); }
                    else { mq = "N"; return Content(mq); }
                }
                else { mq = "N"; return Content(mq); }
            }
            catch (Exception ex) { mq = "E"; return Content(mq); }
        }
        [HttpPost]
        public ContentResult checkpf(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    mq = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where pf_no= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'  and emp_status='Y''", "name");
                    if (!mq.Trim().Equals("0")) { mq = "Y"; return Content(mq); }
                    else { mq = "N"; return Content(mq); }
                }
                else { mq = "N"; return Content(mq); }
            }
            catch (Exception ex) { mq = "E"; return Content(mq); }
        }
        [HttpPost]
        public ContentResult checkpfuan(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    mq = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where pf_uan= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!mq.Trim().Equals("0")) { mq = "Y"; return Content(mq); }
                    else { mq = "N"; return Content(mq); }
                }
                else { mq = "N"; return Content(mq); }
            }
            catch (Exception ex) { mq = "E"; return Content(mq); }
        }
        [HttpPost]
        public ContentResult checkesi(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    mq = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where esi_no= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!mq.Trim().Equals("0")) { mq = "Y"; return Content(mq); }
                    else { mq = "N"; return Content(mq); }
                }
                else { mq = "N"; return Content(mq); }
            }
            catch (Exception ex) { mq = "E"; return Content(mq); }
        }
        [HttpPost]
        public ContentResult checkbiometricid(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    mq = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where biometric_id= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!mq.Trim().Equals("0")) { mq = "Y"; return Content(mq); }
                    else { mq = "N"; return Content(mq); }
                }
                else { mq = "N"; return Content(mq); }
            }
            catch (Exception ex) { mq = "E"; return Content(mq); }
        }
        [HttpPost]
        public ContentResult checkpp(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    mq = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where passport_no= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!mq.Trim().Equals("0")) { mq = "Y"; return Content(mq); }
                    else { mq = "N"; return Content(mq); }
                }
                else { mq = "N"; return Content(mq); }
            }
            catch (Exception ex) { mq = "E"; return Content(mq); }
        }
        [HttpPost]
        public ContentResult checkextempcode(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    mq = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where external_empno= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!mq.Trim().Equals("0")) { mq = "Y"; return Content(mq); }
                    else { mq = "N"; return Content(mq); }
                }
                else { mq = "N"; return Content(mq); }
            }
            catch (Exception ex) { mq = "E"; return Content(mq); }
        }
        [HttpPost]
        public ContentResult checkoldempcode(string value, string Myguid)
        {
            try
            {
                FillMst(Myguid);
                if (!value.Trim().Equals(""))
                {
                    mq = sgen.seekval(userCode, "select (first_name||' '||middle_name||' '||last_name) as name from emp_master where old_empcode= '"
                    + value.Trim() + "' and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y'", "name");
                    if (!mq.Trim().Equals("0")) { mq = "Y"; return Content(mq); }
                    else { mq = "N"; return Content(mq); }
                }
                else { mq = "N"; return Content(mq); }
            }
            catch (Exception ex) { mq = "E"; return Content(mq); }
        }
        #endregion          
        //=============== ot entry============
        #region ot   
        public ActionResult OT_Entry()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();$('#btn_Fill').attr('disabled','disabled')";
            Tmodelmain tmodel = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                Col17 = "",
                Col1 = "",
                //Col3 = "Save",
                TList1 = mod1,
                TList2 = mod1,
                TList3 = mod1,
                TList4 = mod1,
                SelectedItems1 = new string[] { "" },
                SelectedItems2 = new string[] { "" },
                SelectedItems3 = new string[] { "" },
                SelectedItems4 = new string[] { "" },
            }
                );
            //List<Tmodelmain> cards = new List<Tmodelmain>
            //{
            //    new Tmodelmain{ Col1="",Col2="",TList1=GetAllTeaTypes(),Col18="Ram Rattan",Col15="1"},
            //    new Tmodelmain{ Col1="",Col2="",TList1=GetAllTeaTypes(),Col18="Ram Rattan",Col15="2"},
            //    new Tmodelmain{ Col1="",Col2="",TList1=GetAllTeaTypes(),Col18="Ram Rattan",Col15="3"}
            //};
            return View(model);
        }
        [HttpPost]
        public ActionResult OT_Entry(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            tab_name = "enx_tab";
            type = "OTE";
            type_desc = "Over Time Entry";
            List<Tmodelmain> rpt_model = new List<Tmodelmain>();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    #region dept
                    List<SelectListItem> mod1 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    #endregion
                    #region desig
                    //DataTable dt1 = new DataTable();
                    List<SelectListItem> mod2 = cmd_Fun.desig(userCode, unitid_mst);
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    #endregion
                    #region category
                    // shiv
                    DataTable dt2 = new DataTable();
                    List<SelectListItem> mod3 = new List<SelectListItem>();
                    dt2 = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KEC' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1 ");
                    if (dt2.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt2.Rows)
                        {
                            mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    #endregion
                    #region month
                    //DataTable dt4 = new DataTable();
                    //dt4 = sgen.getdata(userCode, "select master_id as month_id,master_name as month_name from master_setting where type='MNT'");
                    List<SelectListItem> mod4 = cmd_Fun.month(userCode, unitid_mst);
                    //if (dt4.Rows.Count > 0)
                    //{
                    //    foreach (DataRow dr in dt4.Rows)
                    //    {
                    //        mod4.Add(new SelectListItem { Text = dr["month_name"].ToString(), Value = dr["month_id"].ToString() });
                    //    }
                    //}
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    #endregion




                    model[0].Col1 = "";
                    model[0].Col17 = "";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                }
                catch (Exception ex)
                {
                    sgen.showmsg(1, ex.Message.ToString(), 2);
                }
            }
            else if (command == "Edit")
            {
                try
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "disableForm();";
                }
                catch (Exception ex)
                {
                    sgen.showmsg(1, ex.Message.ToString(), 2);
                }
            }
            else if (command == "View")
            {
                // shiv
                try
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "disableForm();";
                }
                catch (Exception ex)
                {
                    sgen.showmsg(1, ex.Message.ToString(), 2);
                }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    string dept = string.Join(",", model[0].SelectedItems1);
                    string desig = string.Join(",", model[0].SelectedItems2);
                    string emp_cat = string.Join(",", model[0].SelectedItems3);
                    String Month = string.Join(",", model[0].SelectedItems4);
                    if (dept == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select  Department', 1);";
                        goto END;
                    }
                    if (desig == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Designation', 1);";
                        goto END;
                    }
                    if (emp_cat == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Employee Code', 1);";
                        goto END;
                    }
                    if (Month == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Month', 1);";
                        goto END;
                    }
                    if (sgen.GetSession(MyGuid, "EDMODE") != null)
                    {
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            isedit = true;
                        }
                        else
                        {
                            isedit = false;
                        }
                    }
                    else
                    {
                    }
                    #region save
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime_local(userCode);
                    currdate = sgen.Savedate(currdate, true);
                    string vch_num = sgen.genNo(userCode, "select max(CONVERT (vch_num, integer)) as max from " + tab_name + " where client_id='" + clientid_mst + "'" +
                 " and client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                    //DataTable dataTable = sgen.getdata(userCode, "select  * from " + tab_name + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, tab_name);
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = type;
                        dr["vch_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["col7"] = model[i].Col16;
                        dr["col8"] = model[i].Col21;
                        dr["col9"] = string.Join(",", model[0].SelectedItems4);
                        dr["col10"] = ((List<SelectListItem>)TempData[MyGuid + "_Tlist4"]).SingleOrDefault(item => item.Value == model[0].SelectedItems4.FirstOrDefault().ToString()).Text.ToString();
                        // shiv
                        if (isedit)
                        {
                            dr["ent_by"] = model[i].Col13;
                            dr["ent_date"] = model[i].Col14;
                            dr["vch_num"] = model[i].Col15;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["vch_num"] = vch_num.Trim();
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, tab_name, tmodel.Col12, isedit);
                    #endregion
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    if (Result == true)
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Record Saved Successfully', 1);";
                        List<SelectListItem> mod1 = new List<SelectListItem>();
                        TempData[MyGuid + "_Tlist1"] = mod1;
                        TempData[MyGuid + "_Tlist2"] = mod1;
                        TempData[MyGuid + "_Tlist3"] = mod1;
                        TempData[MyGuid + "_Tlist4"] = mod1;
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col17 = "",
                            Col1 = "",
                            Col3 = "Save",
                            TList1 = mod1,
                            TList2 = mod1,
                            TList3 = mod1,
                            TList4 = mod1,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                        }
                            );
                        ViewBag.scripCall = "disableForm();";
                    }
                    else { ViewBag.scripCall = "showmsgJS(3, 'Record Not Saved', 1);"; }
                END:;
                }
                catch (Exception err)
                {
                    sgen.showmsg(1, err.Message.ToString(), 2);
                }
            }
            else if (command == "Cancel")
            {
                try
                {
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.scripCall = "enableForm();";
                    ViewBag.scripCall = "disableForm();$('#btn_Fill').attr('disabled','disabled')";
                    List<SelectListItem> mod1 = new List<SelectListItem>();
                    TempData[MyGuid + "_Tlist1"] = mod1;
                    TempData[MyGuid + "_Tlist2"] = mod1;
                    TempData[MyGuid + "_Tlist3"] = mod1;
                    TempData[MyGuid + "_Tlist4"] = mod1;
                    model = new List<Tmodelmain>();
                    model.Add(new Tmodelmain
                    {
                        Col17 = "",
                        Col1 = "",
                        TList1 = mod1,
                        TList2 = mod1,
                        TList3 = mod1,
                        TList4 = mod1,
                        SelectedItems1 = new string[] { "" },
                        SelectedItems2 = new string[] { "" },
                        SelectedItems3 = new string[] { "" },
                        SelectedItems4 = new string[] { "" },
                    }
                        );
                }
                catch (Exception ex)
                {
                    sgen.showmsg(1, ex.Message.ToString(), 2);
                }
            }
            else if (command == "Callback")
            {
                try
                {
                    model = StartCallback(model);
                    //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                    //model = CallbackFun(btnval, "N", "OT_Entry", "HOME", model);
                    //ViewBag.vnew = "disabled='disabled'";
                    //ViewBag.vedit = "disabled='disabled'";
                    //ViewBag.vsave = "";
                }
                catch (Exception ex)
                {
                    sgen.showmsg(1, ex.Message.ToString(), 2);
                }
            }
            else if (command == "Fill Data")
            {
                try
                {
                    DataTable dt = new DataTable();
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    string dept = string.Join(",", model[0].SelectedItems1).Replace(",", "','");
                    string desig = string.Join(",", model[0].SelectedItems2).Replace(",", "','");
                    string emp_cat = string.Join(",", model[0].SelectedItems3);
                    String Month = string.Join(",", model[0].SelectedItems4);
                    if (dept == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Department', 1);";
                        goto END;
                    }
                    if (desig == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Designation', 1);";
                        goto END;
                    }
                    if (emp_cat == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Employee Code', 1);";
                        goto END;
                    }
                    if (Month == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Month', 1);";
                        goto END;
                    }
                    string cond = "";
                    if (desig != "")
                    {
                        cond = "and emp.emp_desig in ('" + desig + "')";
                    }
                    if (dept != "")
                    {
                        cond = cond + "and emp.emp_dept in ('" + dept + "')";
                    }
                    if (emp_cat != "")
                    {
                        cond = cond + "and emp.emp_category='" + emp_cat + "'";
                    }
                    mq = "select emp.vch_num,emp.emp_desig,emp.emp_dept,emp.emp_category,dp.master_name dept,dg.master_name desig,ec.master_name emp_categ," +
                    "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,emp.gender Gender," +
                    "emp.f_name Father_Name,emp.m_name Mother_Name,emp.emp_code Employee_Code from emp_master emp " +
                    "inner join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,'" + clientid_mst + "')=1 and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                    "inner join master_setting dg on dg.master_id=emp.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,'" + clientid_mst + "')=1 and find_in_set(dg.client_unit_id,'" + unitid_mst + "')=1 " +
                    "inner join master_setting ec on ec.master_id=emp.emp_category and ec.type='KEC' and find_in_set(ec.client_id,'" + clientid_mst + "')=1 and find_in_set(ec.client_unit_id,'" + unitid_mst + "')=1 " +
                    "WHERE emp.client_id= '" + clientid_mst + "' and emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and emp.emp_status='Y' " +
                    " " + cond + " order by emp.rec_id";
                    dt = sgen.getdata(userCode, mq);
                END:;
                    var tm = model.FirstOrDefault();
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            rpt_model.Add(new Tmodelmain
                            {
                                //Col3 = "Save",
                                Col16 = dr["vch_num"].ToString(),
                                Col17 = dr["Employee_Name"].ToString(),
                                Col18 = dr["dept"].ToString(),
                                Col19 = dr["desig"].ToString(),
                                Col20 = dr["emp_categ"].ToString(),
                                Col21 = "",
                                TList1 = tm.TList1,
                                TList2 = tm.TList2,
                                TList3 = tm.TList3,
                                TList4 = tm.TList4,
                                SelectedItems1 = tm.SelectedItems1,
                                SelectedItems2 = tm.SelectedItems2,
                                SelectedItems3 = tm.SelectedItems3,
                                SelectedItems4 = tm.SelectedItems4
                            });
                        }
                        model = rpt_model;
                    }
                    else
                    {
                        model = new List<Tmodelmain>();
                        tm.Col17 = "";
                        tm.Col18 = "";
                        tm.Col19 = "";
                        tm.Col20 = "";
                        tm.Col21 = "";
                        model.Add(tm);
                    }
                }
                catch (Exception ex)
                {
                    sgen.showmsg(1, ex.Message.ToString(), 2);
                }
            }
            List<SelectListItem> mod11 = new List<SelectListItem>();
            mod11 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod12 = new List<SelectListItem>();
            mod12 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod13 = new List<SelectListItem>();
            mod13 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod14 = new List<SelectListItem>();
            mod14 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];

            var tmodel1 = model.FirstOrDefault();
            TempData[MyGuid + "_Tlist1"] = tmodel1.TList1 = mod11;
            TempData[MyGuid + "_Tlist2"] = tmodel1.TList2 = mod12;
            TempData[MyGuid + "_Tlist3"] = tmodel1.TList3 = mod13;
            TempData[MyGuid + "_Tlist4"] = tmodel1.TList4 = mod14;
            if (tmodel1.SelectedItems1 != null && tmodel1.SelectedItems1.Length > 0 && tmodel1.TList1.Count() > 0)
            {
                foreach (SelectListItem item in tmodel1.TList1)
                {
                    if (tmodel1.SelectedItems1.Contains(item.Value))
                    {
                        item.Selected = true;
                    }
                }
            }
            if (tmodel1.SelectedItems2 != null && tmodel1.SelectedItems2.Length > 0 && tmodel1.TList2.Count() > 0)
            {
                foreach (SelectListItem item in tmodel1.TList2)
                {
                    if (tmodel1.SelectedItems2.Contains(item.Value))
                    {
                        item.Selected = true;
                    }
                }
            }
            if (tmodel1.SelectedItems3 != null && tmodel1.SelectedItems3.Length > 0 && tmodel1.TList3.Count() > 0)
            {
                foreach (SelectListItem item in tmodel1.TList3)
                {
                    if (tmodel1.SelectedItems3.Contains(item.Value))
                    {
                        item.Selected = true;
                    }
                }
            }
            if (tmodel1.SelectedItems4 != null && tmodel1.SelectedItems4.Length > 0 && tmodel1.TList4.Count() > 0)
            {
                foreach (SelectListItem item in tmodel1.TList4)
                {
                    if (tmodel1.SelectedItems4.Contains(item.Value))
                    {
                        item.Selected = true;
                    }
                }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        //====================employee temp status=========
        #region employee temp status
        public ActionResult employee_temp_status()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "EMPLOYEE TEMPORARY STATUS";
            tm1.Col10 = "emp_master";
            tm1.Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "EMP";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult employee_temp_status(List<Tmodelmain> model, string command, HttpPostedFileBase postedFile)
        {
            string temp_status = "";
            FillMst(model[0].Col15);
            if (command == "New")
            {
                // shiv
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 2); }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                try
                {
                    model = StartCallback(model);
                    //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                    //model = CallbackFun(btnval, "N", "employee_temp_status", "Hr", model);
                    //ViewBag.vnew = "disabled='disabled'";
                    //ViewBag.vedit = "disabled='disabled'";
                    //ViewBag.vsave = "";
                }
                catch (Exception ex)
                {
                    sgen.showmsg(1, ex.Message.ToString(), 2);
                }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (model[0].Col16.ToString() == "tempr")
                    {
                        temp_status = "R";
                        mq1 = ",temp_rdate='" + currdate + "'";
                    }
                    else if (model[0].Col16.ToString() == "templ")
                    {
                        temp_status = "L";
                        mq1 = ",temp_ldate='" + currdate + "'";
                    }
                    mq = "update emp_master set temp_status='" + temp_status + "'" + mq1 + ",temp_effdate='" + currdate + "' " +
                        "where vch_num in ('" + model[0].Col17 + "') and type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    res = sgen.execute_cmd(userCode, mq);
                    if (res)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Data Saved Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        tmodel.Col16 = "";
                        tmodel.Col18 = "";
                        tmodel.Col20 = "";
                        tmodel.Col21 = "";
                        tmodel.Col13 = "Save";
                        model.Add(tmodel);
                    }
                }
                catch (Exception err)
                {
                    sgen.showmsg(1, err.Message.ToString(), 2);
                }
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ContentResult chk_change(string value)
        {
            try
            {
                if (value.Trim().Equals("templ")) { sgen.SetSession(MyGuid, "KCHKSTATUS", "L"); }
                else if (value.Trim().Equals("tempr")) { sgen.SetSession(MyGuid, "KCHKSTATUS", "R"); }
                else
                {
                    sgen.SetSession(MyGuid, "KCHKSTATUS", "");
                }
            }
            catch (Exception ex) { }
            return Content("");
        }
        #endregion
        //==================Stat Report============(esi,pf,pt,lwf,it,loan,ot,salary)
        #region stat report
        #region commented code
        //[DonutOutputCache(Duration = sgenFun.duration)]
        //        public ActionResult stat_report()
        //        {
        //            FillMst("");
        //            chkRef();
        //            List<Tmodelmain> model = new List<Tmodelmain>();
        //            Tmodelmain tm1 = new Tmodelmain();
        //            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
        //            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
        //            if (mid_mst.Trim().Equals("9011.1")) { tm1.Col9 = "PF REPORT"; }
        //            if (mid_mst.Trim().Equals("9011.2")) { tm1.Col9 = "ESI REPORT"; }
        //            if (mid_mst.Trim().Equals("9011.3")) { tm1.Col9 = "PT REPORT"; }
        //            if (mid_mst.Trim().Equals("9011.4")) { tm1.Col9 = "IT REPORT"; }
        //            if (mid_mst.Trim().Equals("9011.5")) { tm1.Col9 = "LWF REPORT"; }
        //            if (mid_mst.Trim().Equals("9011.6")) { tm1.Col9 = "LOAN DETAIL"; }
        //            if (mid_mst.Trim().Equals("9011.7")) { tm1.Col9 = "OT REPORT"; }
        //            if (mid_mst.Trim().Equals("9011.8")) { tm1.Col9 = "SALARY REPORT"; }
        //            if (mid_mst.Trim().Equals("9011.9")) { tm1.Col9 = "CHECK DUPLICATE"; }
        //            if (mid_mst.Trim().Equals("9011.10")) { tm1.Col9 = "EMPLOYEE REPORT"; }
        //            tm1.Col10 = mid_mst.Trim();
        //            tm1.Col11 = m_id_mst.Trim();
        //            sgen.SetSession(MyGuid, "TR_MID", mid_mst.Trim());
        //            model.Add(tm1);
        //            return View(model);
        //        }
        //        [HttpPost]
        //        public ActionResult stat_report(List<Tmodelmain> model, string command)
        //        {
        //            FillMst(model[0].Col11);
        //            string cl = "", ut = "", monthid = "", dept = "", desig = "", ecat = "";
        //            DataSet dst = new DataSet();
        //            DataTable dt = new DataTable();
        //            DataTable dtm = new DataTable();
        //            tab_name = "emp_salary_process";
        //            type_desc = "Employee Salary";
        //            type = "ESP";
        //            if (sgen.GetSession(MyGuid, "KDDL_CL") != null) cl = sgen.GetSession(MyGuid, "KDDL_CL").ToString();
        //            if (sgen.GetSession(MyGuid, "KDDL_UT") != null) ut = sgen.GetSession(MyGuid, "KDDL_UT").ToString().Replace(",", "','");
        //            if (sgen.GetSession(MyGuid, "KDDL_MONTH") != null) monthid = sgen.GetSession(MyGuid, "KDDL_MONTH").ToString();
        //            if (sgen.GetSession(MyGuid, "KDDL_DEPT") != null) dept = sgen.GetSession(MyGuid, "KDDL_DEPT").ToString();
        //            if (sgen.GetSession(MyGuid, "KDDL_DESIG") != null) desig = sgen.GetSession(MyGuid, "KDDL_DESIG").ToString();
        //            if (sgen.GetSession(MyGuid, "KDDL_ECAT") != null) ecat = sgen.GetSession(MyGuid, "KDDL_ECAT").ToString();
        //            if (sgen.GetSession(MyGuid, "KCOMMAND") != null) command = sgen.GetSession(MyGuid, "KCOMMAND").ToString();
        //            if (cl == "") { ViewBag.scripCall = "showmsgJS(1,'Please Select Company_Name',2)"; return View(model); }
        //            if (dept.Trim() != "") { cond_dpjoin = " and em.emp_dept in ('" + dept.Replace(",", "','") + "') "; }
        //            if (desig.Trim() != "") { cond_dgjoin = " and em.emp_desig in ('" + desig.Replace(",", "','") + "') "; }
        //            if (ecat.Trim() != "") { cond_catjoin = " and em.emp_category in ('" + ecat.Replace(",", "','") + "') "; }
        //            #region month checking
        //            int currmonth = sgen.Make_int(monthid);
        //            int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
        //            string lastyyyymmm = "";
        //            string curryyyymmm = "";
        //            if (currmonth <= 12 && currmonth > 4)
        //            {
        //                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
        //            }
        //            else if (currmonth == 1)
        //            {
        //                lastyyyymmm = curryear + sgen.padlc(12, 3);
        //                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
        //            }
        //            else if (currmonth > 1 && currmonth < 4)
        //            {
        //                lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
        //                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
        //            }
        //            else if (currmonth == 4)
        //            {
        //                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
        //            }
        //            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
        //            #endregion
        //            DataTable dtr = new DataTable();
        //            dtr.Columns.Add("temp");
        //            DataRow dr = dtr.NewRow();
        //            dr["temp"] = "temp";
        //            dtr.Rows.Add(dr);
        //            if (model[0].Col10.Trim().Equals("9011.2"))//esi
        //            {
        //                if (command == "Monthly Statement")
        //                {
        //                    //mq = "SELECT  trim(substr(esp.currmmmyyyy,0,4)) as salary_yr, trim(esp.month_name) Month,trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
        //                    //    "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name," +
        //                    //    "trim(upper((em.f_name))) Father_Name ,trim(to_char(convert_tz((em.dob), 'UTC', '"+sgen.Gettimezone()+"'), '"+sgen.Getsqldateformat()+"')) Dob ," +
        //                    //    " trim(to_char(convert_tz((em.st_dt), 'UTC', '"+sgen.Gettimezone()+"'), '"+sgen.Getsqldateformat()+"')) Doj" +
        //                    //    ",trim(upper((em.esi_no))) esi_no,trim(esp.paid_days) paid_days,to_number(trim(es.head_mst)) head_mst,sum(to_number(trim(head_count))) as ESI from emp_salary_process esp " +
        //                    //    "INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = '"+cl+"' and em.client_unit_id  in ('"+ut+ "')  and " +
        //                    //    "em.emp_status='Y' and to_char(em.ex_dt,'YYYY')='1900' " +
        //                    //    "inner join (select col1, sum(col10) as head_mst from enx_tab where type = 'KES' and client_id = '"+cl+"' and" +
        //                    //    " client_unit_id in ('"+ut+"') and col4 in (select  vch_num as head_id from vehicle_master where type = 'KSP' and client_id='"+cl+"' and " +
        //                    //    "  client_unit_id  in ('"+ut+"') and col31 = 'Y') group by col1)  es on es.col1 = esp.emp_code  where esp.client_id = '"+cl+"'" +
        //                    //    " and esp.client_unit_id  in ( '"+ut+"') and esp.type = 'ESP' and esp.head_flag = 'ESH' " +
        //                    //    "and head_id in (000014, 000022) and esp.currmmmyyyy = '" + curryyyymmm + "' group by  esp.month_name,upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '')" +
        //                    //    " || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),em.emp_code,em.external_empno,upper(em.f_name)," +
        //                    //    "to_char(convert_tz(em.dob, 'UTC', '"+sgen.Gettimezone()+"'), '"+sgen.Getsqldateformat()+"'), " +
        //                    //    "to_char(convert_tz(em.st_dt, 'UTC', '"+sgen.Gettimezone()+"'), '"+sgen.Getsqldateformat()+"')" +
        //                    //    ",upper(em.esi_no),esp.paid_days,es.head_mst,substr(esp.currmmmyyyy,0,4),em.old_empcode";
        //                    //mq = "select a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Father_Name,a.Dob,a.Doj,a.esi_no,a.paid_days," +
        //                    //    "sum(a.wages) as wags,sum(a.ESI) as esi from  (SELECT ESP.HEAD_NAME,trim(substr(esp.currmmmyyyy,0,4)) as salary_yr, trim(esp.month_name) Month," +
        //                    //    "trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
        //                    //    "trim(upper(((em.first_name) || ' ' ||REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name," +
        //                    //    "trim(upper((em.f_name))) Father_Name ,trim(to_char(convert_tz((em.dob), 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Dob , " +
        //                    //    "trim(to_char(convert_tz((em.st_dt), 'UTC', '" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')) Doj,trim(upper((em.esi_no))) esi_no," +
        //                    //    "to_number(trim(esp.paid_days)) paid_days," +
        //                    //    "(case when trim(nvl(hm.col31,'N'))= 'Y' and upper(esp.head_type) = 'EARNING' then sum(esp.head_count) else 0 end) wages," +
        //                    //    "(case when head_id in (000014, 000022) and upper(esp.head_type)= 'DEDUCTION' then sum(to_number(trim(head_count))) else 0 end) as ESI " +
        //                    //    "from emp_salary_process esp INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' " +
        //                    //    "and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id  and em.emp_status = 'Y' and to_char(em.ex_dt,'YYYY')= '1900' inner join " +
        //                    //    "vehicle_master hm on hm.type = 'KSP' and hm.client_id = esp.client_id and hm.client_unit_id = esp.client_unit_id and hm.vch_num = esp.head_id " +
        //                    //    "where esp.client_id = '" + cl + "' and esp.client_unit_id  in (" + ut + ") and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                    //    "group by  esp.month_name,upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),em.emp_code,em.external_empno," +
        //                    //    "upper(em.f_name),to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), " +
        //                    //    "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')," +
        //                    //    "upper(em.esi_no),esp.paid_days,substr(esp.currmmmyyyy, 0, 4),em.old_empcode,head_id,esp.head_type,esp.head_name,esp.month_name,hm.col31) a " +
        //                    //    "group by a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Father_Name ,a.Dob ,a.Doj,a.esi_no,a.paid_days having sum(a.ESI)>0 " +
        //                    //    "order by a.emp_code asc";
        //                    //mq = "select a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Father_Name,a.Dob,a.Doj,a.esi_no," +
        //                    //    "a.paid_days,sum(a.wages) as wags,sum(a.ESI) as esi,to_number(a.Esi_Limit) Esi_Limit,gm_ern Gross_ern from " +
        //                    //    "(SELECT to_number(en.gm_ern) gm_ern,esp.head_name,trim(substr(esp.currmmmyyyy, 0, 4)) as salary_yr,trim(esp.month_name) Month," +
        //                    //    "trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode,trim(upper(((em.first_name) " +
        //                    //    "|| ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) " +
        //                    //    "Father_Name, trim(to_char(convert_tz((em.dob), 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Dob," +
        //                    //    "trim(to_char(convert_tz((em.st_dt), 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Doj, trim(upper((em.esi_no))) esi_no," +
        //                    //    "to_number(trim(esp.paid_days)) paid_days,(case when trim(nvl(hm.col31, 'N')) = 'Y' and upper(esp.head_type) = 'EARNING' then sum(esp.head_count) " +
        //                    //    "else 0 end) wages,(case when head_id in (000014, 000022) and upper(esp.head_type)= 'DEDUCTION' then sum(to_number(trim(head_count))) else 0 end) " +
        //                    //    "as ESI,ess.col12 Esi_Limit from emp_salary_process esp " +
        //                    //     "INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = esp.client_id and " +
        //                    //    "em.client_unit_id = esp.client_unit_id " +
        //                    //    "inner join vehicle_master hm on hm.vch_num = esp.head_id and hm.type = 'KSP' and hm.client_id = esp.client_id and " +
        //                    //    "hm.client_unit_id = esp.client_unit_id " +
        //                    //    "inner join vehicle_master ess on 1 = 1 and ess.type = 'KES' and ess.client_id = esp.client_id and ess.client_unit_id = esp.client_unit_id " +
        //                    //    "inner join(select e.client_id, e.client_unit_id, e.col1, SUM(e.col10) as gm_ern,trim(e.ref_code) ref_code from enx_tab e " +
        //                    //    "inner join vehicle_master v on e.client_unit_id = v.client_unit_id and trim(e.col4)= v.vch_num and v.type = 'KSP' and v.col31 = 'Y' " +
        //                    //    "where e.type = 'KES' group by e.client_id,e.client_unit_id,e.col1,trim(e.ref_code) " +
        //                    //    ") en on en.col1 = esp.emp_code and en.client_id = esp.client_id and en.client_unit_id = esp.client_unit_id and en.ref_code=esp.inc_ver " +
        //                    //    "where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                    //    "group by en.gm_ern,esp.month_name,upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' " +
        //                    //    "|| REPLACE(nvl(em.last_name, ''), '0', ''))),em.emp_code,em.external_empno,upper(em.f_name),to_char(convert_tz" +
        //                    //    "(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
        //                    //    "upper(em.esi_no),esp.paid_days,substr(esp.currmmmyyyy, 0, 4),em.old_empcode,head_id,esp.head_type,esp.head_name," +
        //                    //    "esp.month_name,hm.col31,ess.col12) a group by a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name," +
        //                    //    "a.Father_Name,a.Dob,a.Doj,a.esi_no,a.paid_days,to_number(a.Esi_Limit),gm_ern having gm_ern <= to_number(a.Esi_Limit) " +
        //                    //    "order by a.emp_code asc";
        //                    mq = "select * from (select a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Father_Name,a.Dob,a.Doj,a.esi_no," +
        //                        "a.paid_days,max(Esi_Limit) Esi_Limit,sum(a.ESI) as esi, sum(wages) " +
        //                        " WAGS from ( SELECT esp.head_name, trim(substr(esp.currmmmyyyy, 0, 4)) as salary_yr,trim(esp.month_name) Month,trim(upper(em.emp_code)) Emp_Code," +
        //                        "trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode,trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
        //                        "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name, trim(to_char(em.dob, '" + sgen.Getsqldateformat() + "')) Dob," +
        //                        "                   trim(to_char(em.st_dt, '" + sgen.Getsqldateformat() + "')) Doj, trim(upper((em.esi_no))) esi_no,to_number(trim(esp.paid_days)) paid_days," +
        //                        "                    (case when head_id in (000014, 000022) and upper(esp.head_type)= 'DEDUCTION' then sum(to_number(trim(head_count))) else 0 end) as ESI," +
        //                        "(case when hm.col31 = 'Y' then sum(to_number(trim(head_count))) else 0 end) as wages," +
        //                        "(case when head_id = '000014' then to_number((ess.col12)) else 0 end) as Esi_Limit from   emp_salary_process esp  " +
        //                        "inner   join vehicle_master hm on hm.vch_num = esp.head_id and hm.type = 'KSP' and hm.client_id = esp.client_id " +
        //                        "INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id and em.emp_status!='R' " +
        //                        "inner join vehicle_master ess on 1 = 1 and ess.type = 'KES' and ess.client_id = esp.client_id and ess.client_unit_id = esp.client_unit_id " +
        //                        "where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                        " group by esp.head_name,trim(substr(esp.currmmmyyyy, 0, 4)),trim(esp.month_name),trim(upper(em.emp_code)),trim(upper(em.external_empno)),trim(em.old_empcode)," +
        //                        "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' ||REPLACE(nvl((em.last_name), ''), '0', '')))),trim(upper((em.f_name)))," +
        //                        " trim(to_char(em.dob,'" + sgen.Getsqldateformat() + "')),trim(to_char(em.st_dt ,'" + sgen.Getsqldateformat() + "')), " +
        //                        "trim(upper((em.esi_no))),to_number(trim(esp.paid_days)),esp.head_id,hm.col31,esp.head_type,(case when head_id = '000014' then (to_number(ess.col12)) else 0 end)" +
        //                        " ) a group by a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Father_Name,a.Dob,a.Doj,a.esi_no,a.paid_days ) tab " +
        //                        "where (case when  paid_days>0 and esi=0 then 0 else 1 end)=1   order by emp_code asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        sgen.open_report_bydt_xml(userCode, dt, "ESI_Report", "ESI Report");
        //                    }
        //                } //done
        //                if (command == "Half Yearly Return Form-5") { sgen.open_report_bydt_xml(userCode, dtr, "esi_form5_return", "Form 5"); }
        //                if (command == "ESI XL Report")
        //                {
        //                    //                    mq = @"SELECT esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,
        //                    //upper(concat(em.first_name,' ',REPLACE(ifnull(em.middle_name,''),'0',''),' ',em.last_name)) Emp_Name,upper(em.f_name) Father_Name,
        //                    //to_char(convert_tz(em.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') Dob," +
        //                    //"to_char(convert_tz(em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') Doj,upper(em.esi_no) ESI_No,esp.paid_days Paid_Days," +
        //                    //"esp.client_unit_id,sum(if (esp.head_type = 'Earning',esp.head_count,0)) Gross_Rate,sum(if (esp.head_id = '000014',esp.head_count,0)) as Esi," +
        //                    //"sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id = '" + ut + "' and sh.cur_state <> '3' " +
        //                    //"and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col31='Y'),esp.head_count,0)) as Esi_Gross," +
        //                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id = '" + ut + "' " +
        //                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col31='Y'),esp.head_count,0)) as decimal (10,2)) * cast(replace(esim.col5,'%','') as decimal (5,2))/100,0) Employee_contri," +
        //                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id = '" + ut + "' " +
        //                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col31='Y'),esp.head_count,0)) as decimal (10,2)) * cast(replace(esim.col6,'%','') as decimal (5,2))/100,0) Employer_contri " +
        //                    //"from emp_salary_process esp LEFT JOIN vehicle_master esim on 1=1 and esim.type='KES' and esim.client_id='" + cl + "' and esim.client_unit_id='" + ut + "' " +
        //                    //"INNER JOIN emp_master em on esp.emp_code=em.vch_num and em.type='EMP' and em.client_id='" + cl + "' and em.client_unit_id='" + ut + "' " +
        //                    //"where esp.client_id='" + cl + "' and esp.client_unit_id='" + ut + "' and esp.type='ESP' and esp.head_flag='ESH' and esp.month_id='" + monthid + "' " +
        //                    //"group by esp.month_name,upper(em.emp_code),upper(em.external_empno),upper(em.esi_no)," +
        //                    //"upper(concat(em.first_name,' ',REPLACE(ifnull(em.middle_name,''),'0',''),'',em.last_name)),upper(em.f_name),esp.paid_days," +
        //                    //"to_char(convert_tz(em.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "'),to_char(convert_tz(em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "'),esp.client_unit_id";
        //                    mq = @"SELECT esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,
        //upper((em.first_name|| ' '|| REPLACE(nvl(em.middle_name, ''), '0', '')|| ' '|| em.last_name)) Emp_Name,upper(em.f_name) Father_Name,
        //to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //"to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj,upper(em.esi_no) ESI_No," +
        //"esp.paid_days Paid_Days, esp.client_unit_id,sum(if (esp.head_type = 'Earning',esp.head_count,0)) Gross_Rate," +
        //"sum(if (esp.head_id = '000014',esp.head_count,0)) as Esi,(sum(if (esp.head_id = '000014',esp.head_count,0))*100)/ replace(esim.col5, '%', '') as Esiable," +
        //"sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' " +
        //"and  sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col31 = 'Y'),esp.head_count,0)) as Esi_Gross," +
        //"round(cast((sum(if (esp.head_id = '000014',esp.head_count,0))*100)/ replace(esim.col5, '%', '') as decimal (10, 2)) *cast(replace(esim.col5, '%', '') as decimal (5, 2)) / 100,0) Employee_contri," +
        //"round(cast((sum(if (esp.head_id = '000014',esp.head_count,0))*100)/ replace(esim.col5, '%', '') as decimal (10, 2)) *cast(replace(esim.col6, '%', '') as decimal (5, 2)) / 100,0) Employer_contri " +
        //"from emp_salary_process esp " +
        //"LEFT JOIN vehicle_master esim on 1 = 1 and esim.type = 'KES' and esim.client_id = '" + cl + "' and esim.client_unit_id = '" + ut + "' " +
        //"INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' " +
        //"where esp.client_id = '" + cl + "' and esp.client_unit_id = '" + ut + "' and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.month_id = '" + monthid + "' " +
        //"group by esp.month_name,upper(em.emp_code),upper(em.external_empno),upper(em.esi_no),upper((em.first_name|| ' '|| REPLACE(nvl(em.middle_name, ''), '0', '')|| ''|| em.last_name))," +
        //"upper(em.f_name),esp.paid_days,to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),esp.client_unit_id";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("Employee Monthly ESI Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly ESI Report');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //                if (command == "Company Wise Total")
        //                {
        //                    #region old cmd
        //                    //                 mq = "select a.client_unit_id, a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Father_Name,a.Dob,a.Doj,a.esi_no,a.paid_days," +
        //                    //"round(sum(a.wages)) as wags,round(sum(a.ESI)) as esi from  (SELECT esp.client_unit_id, ESP.HEAD_NAME,trim(substr(esp.currmmmyyyy,0,4)) as salary_yr, trim(esp.month_name) Month," +
        //                    //"trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
        //                    //"trim(upper(((em.first_name) || ' ' ||REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name," +
        //                    //"trim(upper((em.f_name))) Father_Name ,trim(to_char(convert_tz((em.dob), 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Dob , " +
        //                    //"trim(to_char(convert_tz((em.st_dt), 'UTC', '" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')) Doj,trim(upper((em.esi_no))) esi_no," +
        //                    //"to_number(trim(esp.paid_days)) paid_days," +
        //                    //"(case when trim(nvl(hm.col31,'N'))= 'Y' and upper(esp.head_type) = 'EARNING' then sum(esp.head_count) else 0 end) wages," +
        //                    //"(case when head_id in (000014, 000022) and upper(esp.head_type)= 'DEDUCTION' then sum(to_number(trim(head_count))) else 0 end) as ESI " +
        //                    //"from emp_salary_process esp INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' " +
        //                    //"and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id inner join " +
        //                    //"vehicle_master hm on hm.type = 'KSP' and hm.client_id = esp.client_id and hm.client_unit_id = esp.client_unit_id and hm.vch_num = esp.head_id " +
        //                    //"where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                    //"group by esp.client_unit_id,  esp.month_name,upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),em.emp_code,em.external_empno," +
        //                    //"upper(em.f_name),to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), " +
        //                    //"to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')," +
        //                    //"upper(em.esi_no),esp.paid_days,substr(esp.currmmmyyyy, 0, 4),em.old_empcode,head_id,esp.head_type,esp.head_name,esp.month_name,hm.col31) a " +
        //                    //"group by a.client_unit_id, a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Father_Name ,a.Dob ,a.Doj,a.esi_no,a.paid_days having sum(a.ESI)>0 " +
        //                    //"order by a.emp_code asc";
        //                    //                 mq = "select count(a.emp_code) as emp_count,b.esicode,b.empr_wg as epr_per,b.empl_wg as epl_per,c.unit_name,A.Month,a.salary_yr,a.client_unit_id," +
        //                    //                "sum(wags) wags, sum (esi) esi, round(round(sum(a.wags)* to_number(replace(empr_wg,'%','')))/100) as emplr_cont  from (" + mq + ") a" +
        //                    //                " inner join(select col2 as esicode,col5 as empl_wg,col6 as empr_wg, client_unit_id from vehicle_master where type = 'KES' and client_id = '" + cl + "' and" +
        //                    //                " client_unit_id in ('" + ut + "') ) b on a.client_unit_id = b.client_unit_id  inner join company_unit_profile c on a.client_unit_id " +
        //                    //                "= c.cup_id and c.company_profile_id = '" + cl + "'  group by a.client_unit_id ,b.empr_wg,b.empl_wg,b.esicode ,A.Month, a.salary_yr, c.unit_name order by c.unit_name asc";
        //                    #endregion
        //                    mq = "select count(a.emp_code) as emp_count,b.esicode,b.empr_wg as epr_per,b.empl_wg as epl_per,c.unit_name,A.Month,a.salary_yr,a.client_unit_id,sum(wags) wags, " +
        //                        "sum (esi) esi, round(round(sum(a.wags)* to_number(replace(empr_wg,'%','')))/100) as emplr_cont  from " +
        //                        "(select a.client_unit_id, a.salary_yr, A.Month, a.Emp_Code, a.Ext_Code, a.old_empcode, a.Emp_Name, a.Father_Name, a.Dob, a.Doj, a.esi_no, a.paid_days, " +
        //                        "round(sum(a.wages)) as wags, round(sum(a.ESI)) as esi, a.Esi_Limit, a.gm_ern from " +
        //                        "(SELECT esp.client_unit_id, ESP.HEAD_NAME, trim(substr(esp.currmmmyyyy, 0, 4)) as salary_yr, trim(esp.month_name) Month, trim(upper(em.emp_code)) Emp_Code, " +
        //                        "trim(upper(em.external_empno)) Ext_Code, trim(em.old_empcode) old_empcode, trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name, " +
        //                        "trim(upper((em.f_name))) Father_Name, trim(to_char(convert_tz((em.dob), 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Dob, trim(to_char(convert_tz((em.st_dt), 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Doj, " +
        //                        "trim(upper((em.esi_no))) esi_no, to_number(trim(esp.paid_days)) paid_days, (case when trim(nvl(hm.col31, 'N')) = 'Y' and upper(esp.head_type) = 'EARNING' then sum(esp.head_count) else 0 end) wages, " +
        //                        "(case when head_id in (000014, 000022) and upper(esp.head_type) = 'DEDUCTION' then sum(to_number(trim(head_count))) else 0 end) as ESI,ess.col12 Esi_Limit, " +
        //                        "to_number(en.gm_ern) gm_ern from emp_salary_process esp " +
        //                        "INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id " +
        //                        "inner join vehicle_master hm on hm.type = 'KSP' and hm.client_id = esp.client_id and hm.client_unit_id = esp.client_unit_id and hm.vch_num = esp.head_id " +
        //                        "inner join vehicle_master ess on 1 = 1 and ess.type = 'KES' and ess.client_id = esp.client_id and ess.client_unit_id = esp.client_unit_id " +
        //                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as gm_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' " +
        //                        "group by client_id,client_unit_id,col1,trim(ref_code)) en on en.col1 = esp.emp_code and en.client_id = esp.client_id and en.client_unit_id = esp.client_unit_id and en.ref_code = esp.inc_ver " +
        //                        "where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                        "group by esp.client_unit_id,  esp.month_name,upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),em.emp_code," +
        //                        "em.external_empno,upper(em.f_name),to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
        //                        "upper(em.esi_no),esp.paid_days,substr(esp.currmmmyyyy, 0, 4),em.old_empcode,head_id,esp.head_type,esp.head_name,esp.month_name,hm.col31,ess.col12," +
        //                        "to_number(en.gm_ern)) a " +
        //                        "group by a.client_unit_id, a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Father_Name,a.Dob ,a.Doj,a.esi_no,a.paid_days,a.Esi_Limit," +
        //                        "a.gm_ern having a.gm_ern <= to_number(a.Esi_Limit) order by a.emp_code asc) a " +
        //                        "inner join(select col2 as esicode, col5 as empl_wg, col6 as empr_wg, client_unit_id from vehicle_master where type = 'KES' and client_id = '" + cl + "' and " +
        //                        "client_unit_id in ('" + ut + "')) b on a.client_unit_id = b.client_unit_id " +
        //                        "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' " +
        //                        "group by a.client_unit_id,b.empr_wg,b.empl_wg,b.esicode,A.Month,a.salary_yr,c.unit_name order by c.unit_name asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    sgen.open_report_bydt_xml(userCode, dt, "comp_esi", "Company ESI Detail");
        //                } //done
        //                if (command.ToUpper() == "ESI VIEW (XLS)")
        //                {
        //                    string xdol = (lastyyyymmm.Substring(0, 4).Trim() + sgen.padlc(sgen.Make_int(lastyyyymmm.Substring(4, 3).Trim()), 2)).ToString().Trim();
        //                    //mq = "select '-' as fstr, a.esi_no,a.Emp_Name,a.paid_days,sum(a.wages) as Earning ,sum(wagesot) as OT ,sum(a.wages) + sum (wagesot) as earning_OT," +
        //                    //    "'0' as reason_code,c.unit_name , old_empcode from  (SELECT ESP.HEAD_NAME,trim(substr(esp.currmmmyyyy,0,4)) as salary_yr, trim(esp.month_name)Month , " +
        //                    //    "esp.client_unit_id,trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
        //                    //    "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((em.last_name), ''), '0', ''))))" +
        //                    //    " Emp_Name,trim(upper((em.f_name))) Father_Name ,trim(to_char(convert_tz((em.dob), 'UTC', '"+sgen.Gettimezone()+"'), '"+sgen.Getsqldateformat()+"')) Dob ," +
        //                    //    "(case when to_char(convert_tz(em.ex_dt, 'UTC', '"+sgen.Gettimezone()+"'), '"+sgen.Getsqldateformat()+ "')='01/01/1900' then 0 " +
        //                    //    "else to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end) as Dol,trim(upper((em.esi_no))) esi_no," +
        //                    //    "to_number(trim(esp.paid_days)) paid_days,(case when trim(nvl(hm.col31, 'N')) = 'Y' and upper(esp.head_type) = 'EARNING' and " +
        //                    //    "trim(esp.head_id)!= '000019'  then sum(esp.head_count) else 0 end) wages,(case when trim(nvl(hm.col31, 'N')) = 'Y' and upper(esp.head_type)" +
        //                    //    " = 'EARNING' and trim(esp.head_id)= '000019' then sum(esp.head_count) else 0 end) wagesot,(case when head_id = '000014' " +
        //                    //    "and upper(esp.head_type)= 'DEDUCTION' then sum(to_number(trim(head_count))) else 0 end) as ESI,(case when head_id = '000022' " +
        //                    //    "and upper(esp.head_type)='DEDUCTION' then sum(to_number(trim(head_count))) else 0 end) as esiot from emp_salary_process esp " +
        //                    //    "   INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = esp.client_id and" +
        //                    //    " em.client_unit_id = esp.client_unit_id  and em.emp_status = 'Y' and to_char(em.ex_dt,'YYYY')= '1900' inner join vehicle_master hm on " +
        //                    //    "hm.type = 'KSP' and hm.client_id = esp.client_id and hm.client_unit_id = esp.client_unit_id and hm.vch_num = esp.head_id" +
        //                    //    " where esp.client_id = '"+cl+"' and esp.client_unit_id in ("+ut+") and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy" +
        //                    //    " = '"+curryyyymmm+"' group by esp.client_unit_id, esp.month_name,upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), " +
        //                    //    "'0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),em.emp_code,em.external_empno,upper(em.f_name),to_char(convert_tz(em.dob," +
        //                    //    " 'UTC', '"+sgen.Gettimezone()+"'), '"+sgen.Getsqldateformat()+ "'), to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone()+"')," +
        //                    //    " '"+sgen.Getsqldateformat()+"'),upper(em.esi_no),esp.paid_days,substr(esp.currmmmyyyy, 0, 4),em.old_empcode,head_id,esp.head_type,esp.head_name, " +
        //                    //    "esp.month_name,hm.col31) a inner join company_unit_profile c on a.client_unit_id = c.cup_id   and c.company_profile_id = '"+cl+"' " +
        //                    //    "  group by a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.esi_no,a.paid_days,c.unit_name having sum(a.ESI) > 0" +
        //                    //    " order by a.emp_code asc";
        //                    mq = @" select * from (select * from (select '-' as fstr,a.esi_no,old_empcode,a.Emp_Name,a.paid_days,sum(a.wages) as Earning ,sum(wagesot) as OT ,sum(a.wages) + sum (wagesot) as earning_OT," +
        //                        "(case when a.dol='0' then '0' else '2' end) as reason_code,a.dol,c.unit_name,sum(esi) as esi,sum(esiot) as esiot from (SELECT ESP.HEAD_NAME, trim(substr(esp.currmmmyyyy, 0, 4)) as salary_yr," +
        //                        "trim(esp.month_name)Month, esp.client_unit_id, trim(upper(em.emp_code)) Emp_Code, trim(upper(em.external_empno)) Ext_Code," +
        //                        "trim(em.old_empcode) old_empcode, trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
        //                        "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name, trim(upper((em.f_name))) Father_Name, trim(to_char(convert_tz((em.dob), 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')) Dob," +
        //                        " (case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '0' else to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end) as Dol," +
        //                        "trim(upper((em.esi_no))) esi_no,to_number(trim(esp.paid_days)) paid_days,(case when trim(nvl(hm.col31, 'N')) = 'Y' and upper(esp.head_type) = 'EARNING' " +
        //                        "and trim(esp.head_id)!= '000019'  then sum(esp.head_count) else 0 end) wages,(case when trim(nvl(hm.col31, 'N')) = 'Y' and upper(esp.head_type) = 'EARNING' " +
        //                        "and trim(esp.head_id)= '000019' then sum(esp.head_count) else 0 end) wagesot,(case when head_id = '000014' and upper(esp.head_type)= 'DEDUCTION' " +
        //                        "then sum(to_number(trim(head_count))) else 0 end) as ESI,(case when head_id = '000022' and upper(esp.head_type)= 'DEDUCTION' then " +
        //                        "sum(to_number(trim(head_count))) else 0 end) as esiot from emp_salary_process esp INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' " +
        //                        "and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id and em.emp_status!='R'" +
        //                        "inner join vehicle_master hm on hm.type = 'KSP' and hm.client_id = esp.client_id and hm.client_unit_id = esp.client_unit_id and hm.vch_num = esp.head_id " +
        //                        "where esp.client_id = '" + cl + "' and esp.client_unit_id in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                        "group by esp.client_unit_id, esp.month_name,upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', '')))," +
        //                        "em.emp_code,em.external_empno,upper(em.f_name),to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
        //                        "(case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')= '01/01/1900' then '0' else " +
        //                        "to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end),upper(em.esi_no)," +
        //                        "esp.paid_days,substr(esp.currmmmyyyy, 0, 4),em.old_empcode,head_id,esp.head_type,esp.head_name, esp.month_name,hm.col31) a " +
        //                        "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' " +
        //                        "group by a.salary_yr,A.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.esi_no,a.paid_days,a.dol,c.unit_name  " +
        //                        "order by c.unit_name asc) tab where (case when  paid_days>0 and esi+esiot=0 then 0 else 1 end)=1" +
        //                        "union all " +
        //                        "select* from (select '-' as fstr,a.esi_no,a.old_empcode,trim(upper(((a.first_name) || ' ' || REPLACE(nvl(" +
        //                        "(a.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((a.last_name), ''), '0', '')))) Emp_Name,0 paid_days,0 as Earning," +
        //                        "0 as OT,0 as earning_OT,'2' as reason_code,to_char(convert_tz(a.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') dol," +
        //                        "c.unit_name,0 as esi,0 as esiot from emp_master a inner join company_unit_profile c on a.client_unit_id = c.cup_id and " +
        //                        "c.company_profile_id = '" + cl + "' where a.type='EMP' and a.client_id = '" + cl + "' and a.client_unit_id in ('" + ut + "') " +
        //                        "and (a.emp_status = 'N' and to_char(a.ex_dt, 'yyyymm') = '" + xdol + "')) tab1 ) t ";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("Employee Monthly ESI Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly ESI VIEW');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                } //done
        //            }
        //            if (model[0].Col10.Trim().Equals("9011.1"))//pf
        //            {
        //                if (command == "Form No-5")
        //                {
        //                    string xdoj = curryear + sgen.padlc((currmonth), 2);
        //                    string month_name = monthName.GetMonthName(sgen.Make_int(monthid));
        //                    //mq = "select '"+month_name+"' as month_name,  '"+curryear+"' as cur_yr, trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
        //                    //  "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
        //                    //  "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name ,em.account_no" +
        //                    //  ",to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //                    //  "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj,em.gender" +
        //                    //  "  from  emp_master em    where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id  in ('" + ut + "')" +
        //                    //  " and to_char(em.ex_dt,'YYYY')= '1900' and to_char(em.st_dt,'yyyymm')='"+xdoj+"'      and em.emp_status = 'Y'   ";
        //                    mq = "select '" + month_name + "' as month_name,  '" + curryear + "' as cur_yr,(case when em.jtype='001' then 'N' else 'Re' end) " +
        //                        "Jtype ,em.pf_no,em.pf_uan, trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
        //                     "c.unit_name,trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
        //                     "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name ,em.account_no" +
        //                     ",to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //                     "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
        //                     "(case when em.gender='Male' then 'M' when em.gender='Female' then 'F' end) gender,upper(kpf.col2) compfno" +
        //                     "  from emp_master em inner join company_unit_profile c on em.client_unit_id = c.cup_id " +
        //                        "and c.company_profile_id = '" + cl + "' inner join vehicle_master kpf on 1=1 and kpf.type='KPF' and kpf.client_id=em.client_id and kpf.client_unit_id=em.client_unit_id " +
        //                        "where em.type = 'EMP' and em.emp_status!='R'  and em.client_id = '" + cl + "' and em.client_unit_id  in ('" + ut + "')" +
        //                     " and to_char(em.ex_dt,'YYYY')= '1900' and to_char(em.st_dt,'yyyymm')='" + xdoj + "' and em.emp_status = 'Y' " +
        //                     "order by c.unit_name,(case when em.jtype='001' then 'N' else 'Re' end),em.st_dt asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    sgen.open_report_bydt_xml(userCode, dt, "pf_5", "PF Form-5");
        //                }
        //                if (command == "Form No-10")
        //                {
        //                    //string xdol = curryear + sgen.padlc((currmonth), 2);
        //                    //string xdol = (lastyyyymmm.Substring(0, 4).Trim() + sgen.padlc(sgen.Make_int(lastyyyymmm.Substring(4, 3).Trim()), 2)).ToString().Trim();
        //                    string xdol = (curryyyymmm.Substring(0, 4).Trim() + sgen.padlc(sgen.Make_int(curryyyymmm.Substring(4, 3).Trim()), 2)).ToString().Trim();
        //                    string month_name = monthName.GetMonthName(sgen.Make_int(monthid));
        //                    //and to_char(em.ex_dt,'yyyymm')= '" + xdol + "'
        //                    mq = "select c.unit_name, '" + month_name + "' as month_name,  '" + curryear + "' as cur_yr,  nvl(lr.master_name,'-') as jtype, " +
        //                        " em.pf_no,em.pf_uan, trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
        //                      "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
        //                      "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name ,em.account_no" +
        //                      ",to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //                      "to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dol,em.gender,upper(kpf.col2) compfno" +
        //                      "  from emp_master em  inner join company_unit_profile c on em.client_unit_id = c.cup_id " +
        //                        "and c.company_profile_id = '" + cl + "' left join master_setting lr on lr.master_id=em.l_reason and lr.type='ELM' and find_in_set(lr.client_id,'" + clientid_mst + "')=1 and find_in_set(lr.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        " inner join vehicle_master kpf on 1=1 and kpf.type='KPF' and " +
        //                        "kpf.client_id=em.client_id and kpf.client_unit_id=em.client_unit_id  where em.type = 'EMP' and em.emp_status!='R'  and " +
        //                        "em.client_id = '" + cl + "' and em.client_unit_id  in ('" + ut + "')" +
        //                      " and em.emp_status = 'N' and to_char(em.ex_dt,'yyyymm')= '" + xdol + "' order by c.unit_name,em.emp_code asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    sgen.open_report_bydt_xml(userCode, dt, "pf_10", "PF Form-10");
        //                }
        //                if (command == "Form No-3A")
        //                {
        //                    mq = "select ispflimit,pf_limit,a.client_id,a.client_unit_id, salary_yr,Month,Emp_Code,Ext_Code,old_empcode,Emp_Name,Father_Name,Dob,Doj,age,pf_no,pf_uan,sum(vpf) vpf," +
        //    "sum(epf) epf,sum(wages) wages, (case when age>= 58 then 0 else (case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else sum(wages) end) end) FPF_wages," +
        //    "(case when age>= 58 then 0 else round((case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else sum(wages) end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) fpf," +
        //    "round(case when age >= 58 then sum(epf) else sum(epf) - round((case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else sum(wages) end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) as MPF " +
        //    "from (select em.ispflimit,em.pf_limit,esp.client_id, esp.client_unit_id, substr(esp.currmmmyyyy, 0, 4) salary_yr, esp.month_name Month, upper(em.emp_code) Emp_Code, " +
        //    "upper(em.external_empno) Ext_Code, em.old_empcode, upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' ||" +
        //    "REPLACE(nvl(em.last_name, ''), '0', ''))) Emp_Name, upper(em.f_name) Father_Name, to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //    "floor(months_between(to_date(substr(esp.currmmmyyyy,1,4)||substr(esp.currmmmyyyy,6,2)||'01','yyyymmdd'), dob) / 12) as age, to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
        //    "upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan, (case when " +
        //    "trim(nvl(ew.col30, 'N')) = 'Y' and upper(esp.head_type) = 'EARNING' then to_number(esp.head_count) else 0 end) wages,(case when esp.head_id = '000020' then " +
        //    "(to_number(esp.head_count)) else 0 end) vpf,(case when esp.head_id = '000011' then(to_number(esp.head_count)) else 0 end) epf from emp_salary_process esp " +
        //    "INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id " +
        //    "inner join vehicle_master ew on ew.type = 'KSP' and ew.client_id = esp.client_id and " +
        //    "ew.client_unit_id = esp.client_unit_id and ew.vch_num = esp.head_id where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' " +
        //    "and esp.head_flag = 'ESH') a inner join vehicle_master kpf on kpf.type = 'KPF' and kpf.client_id = a.client_id and " +
        //    "kpf.client_unit_id = a.client_unit_id group by ispflimit,pf_limit,a.client_id,a.client_unit_id,salary_yr,Month,Emp_Code,Ext_Code,old_empcode,Emp_Name,Father_Name,Dob,Doj,age,pf_no,pf_uan," +
        //    "trim(replace(kpf.col14, '%', '')),to_number(kpf.col30) having (upper(ispflimit)='N' and to_number(pf_limit)=0) or (upper(ispflimit)='Y' and to_number(pf_limit)>0) order by Emp_Code";
        //                    dt = sgen.getdata(userCode, mq);
        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        Pivot pv1 = new Pivot(dt, MyGuid);
        //                        dt = pv1.PivotData_Tot_multi(new string[] { "ELWF", "erlwf", "wages" }, AggregateFunction.Sum, new string[]
        //                        { "client_unit_id","unit_name","salary_yr","Old_EmpCode","EmpCode","ExtCode","Name","Relation","Rel_Name","Country",
        //                        "Adhaar_No","ESI_No","PF_No","Gender","Contact_No","DOB","DOJ","DOL","Qualification","Domicile" },
        //                        new string[] { "Month" });
        //                        sgen.open_report_bydt_xml(userCode, dt, "pf_3A", "PF Form-3A");
        //                    }
        //                }
        //                if (command == "Form No-6A") { sgen.open_report_bydt_xml(userCode, dtr, "pf_6A", "PF Form-6A"); }
        //                if (command == "PF Statement")
        //                {
        //                    mq = "select ispflimit,pf_limit,a.client_id,a.client_unit_id, salary_yr,Month,Emp_Code,Ext_Code,old_empcode,Emp_Name,Father_Name,Dob,Doj,age,pf_no,pf_uan,sum(vpf) vpf," +
        //                        "sum(epf) epf,sum(wages) wages, (case when age>= 58 then 0 else (case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else sum(wages) end) end) FPF_wages," +
        //                        "(case when age>= 58 then 0 else round((case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else sum(wages) end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) fpf," +
        //                        "round(case when age >= 58 then sum(epf) else sum(epf) - round((case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else sum(wages) end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) as MPF " +
        //                        "from (select em.ispflimit,em.pf_limit,esp.client_id, esp.client_unit_id, substr(esp.currmmmyyyy, 0, 4) salary_yr, esp.month_name Month, upper(em.emp_code) Emp_Code, " +
        //                        "upper(em.external_empno) Ext_Code, em.old_empcode, upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' ||" +
        //                        "REPLACE(nvl(em.last_name, ''), '0', ''))) Emp_Name, upper(em.f_name) Father_Name, to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //                        "floor(months_between(to_date(substr(esp.currmmmyyyy,1,4)||substr(esp.currmmmyyyy,6,2)||'01','yyyymmdd'), dob) / 12) as age, to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
        //                        "upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan, (case when " +
        //                        "trim(nvl(ew.col30, 'N')) = 'Y' and upper(esp.head_type) = 'EARNING' then to_number(esp.head_count) else 0 end) wages,(case when esp.head_id = '000020' then " +
        //                        "(to_number(esp.head_count)) else 0 end) vpf,(case when esp.head_id = '000011' then(to_number(esp.head_count)) else 0 end) epf from emp_salary_process esp " +
        //                        "INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id " +
        //                        "inner join vehicle_master ew on ew.type = 'KSP' and ew.client_id = esp.client_id and " +
        //                        "ew.client_unit_id = esp.client_unit_id and ew.vch_num = esp.head_id where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' " +
        //                        "and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "') a inner join vehicle_master kpf on kpf.type = 'KPF' and kpf.client_id = a.client_id and " +
        //                        "kpf.client_unit_id = a.client_unit_id group by ispflimit,pf_limit,a.client_id,a.client_unit_id,salary_yr,Month,Emp_Code,Ext_Code,old_empcode,Emp_Name,Father_Name,Dob,Doj,age,pf_no,pf_uan," +
        //                        "trim(replace(kpf.col14, '%', '')),to_number(kpf.col30) having (upper(ispflimit)='N' and to_number(pf_limit)=0) or (upper(ispflimit)='Y' and to_number(pf_limit)>0) order by Emp_Code";
        //                    dt = sgen.getdata(userCode, mq);
        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        sgen.open_report_bydt_xml(userCode, dt, "pf_challan", "PF Challan");
        //                    }
        //                } //DONE
        //                if (command == "PF XL Report")
        //                {
        //                    //                    mq = @"SELECT esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,
        //                    //upper(concat(em.first_name, ' ', REPLACE(ifnull(em.middle_name, ''), '0', ''), ' ', em.last_name)) Emp_Name,upper(em.f_name) Father_Name,
        //                    //to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //                    //"to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj,upper(em.pf_uan) UAN_No,upper(em.pf_no) PF_No," +
        //                    //"esp.paid_days Paid_Days, esp.client_unit_id,sum(if (esp.head_type = 'Earning',esp.head_count,0)) Gross_Rate,sum(if (esp.head_id = '000011',esp.head_count,0)) as Pf," +
        //                    //"sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' and " +
        //                    //"sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as Pf_Gross," +
        //                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
        //                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col15, '%', '') as decimal (5, 2)) / 100,0) Acc01," +
        //                    //"sum(if (esp.head_id = '000020',esp.head_count,0)) as Vpf," +
        //                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
        //                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col14, '%', '') as decimal (5, 2)) / 100,0) Acc10," +
        //                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
        //                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col18, '%', '') as decimal (5, 2)) / 100,0) Acc02," +
        //                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
        //                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col18, '%', '') as decimal (5, 2)) / 100,0) Acc21," +
        //                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
        //                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col20, '%', '') as decimal (5, 2)) / 100,0) Acc22," +
        //                    //"pfm.col30 Pension_Wages " +
        //                    //"from emp_salary_process esp " +
        //                    //"LEFT JOIN vehicle_master pfm on 1 = 1 and pfm.type = 'KPF' and pfm.client_id = '"+cl+"' and pfm.client_unit_id = '"+ut+"' " +
        //                    //"INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = '"+cl+"' and em.client_unit_id = '"+ut+"' " +
        //                    //"where esp.client_id = '"+cl+"' and esp.client_unit_id = '"+ut+"' and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.month_id = '"+monthid+"' " +
        //                    //"group by esp.month_name,upper(em.emp_code),upper(em.external_empno),upper(em.pf_uan),upper(em.pf_no)," +
        //                    //"upper(concat(em.first_name, ' ', REPLACE(ifnull(em.middle_name, ''), '0', ''), '', em.last_name)),upper(em.f_name),esp.paid_days," +
        //                    //"to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
        //                    //"esp.client_unit_id";
        //                    mq = @"SELECT esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,
        //upper((em.first_name|| ' '|| REPLACE(nvl(em.middle_name, ''), '0', '')|| ' '|| em.last_name)) Emp_Name,upper(em.f_name) Father_Name,
        //to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //"to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj,upper(em.pf_uan) UAN_No," +
        //"upper(em.pf_no) PF_No,esp.paid_days Paid_Days, esp.client_unit_id,sum(case when esp.head_type = 'Earning' then to_number(esp.head_count) else 0 END )as Gross_Rate," +
        //"sum(case when esp.head_id = '000011' then to_number(esp.head_count) else 0 END) as Pf,(sum(case when  esp.head_id = '000011' then to_number(esp.head_count) else 0 END)*100 )/ replace(pfm.col5, '%', '') Pfable," +
        //"sum(case when  esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
        //"sh.client_unit_id = '" + ut + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y') then to_number(esp.head_count) else 0 END) as Pf_Gross," +
        //"round(to_number((sum(case when esp.head_id = '000011' then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) * to_number(replace(pfm.col15, '%', '') ) / 100,0) Acc01," +
        //"sum(case when esp.head_id = '000020' then to_number(esp.head_count) else 0 END) as Vpf," +
        //"round(to_number((sum(case when esp.head_id = '000011'  then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) *to_number(replace(pfm.col14, '%', '') ) / 100,0) Acc10," +
        //"round(to_number((sum(case when esp.head_id = '000011'then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) *to_number(replace(pfm.col18, '%', '') ) / 100,0) Acc02," +
        //"round(to_number((sum(case when esp.head_id = '000011' then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) *to_number(replace(pfm.col18, '%', '') ) / 100,0) Acc21," +
        //"round(to_number((sum(case when esp.head_id = '000011' then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) *to_number(replace(pfm.col20, '%', '') ) / 100,0) Acc22," +
        //"pfm.col30 Pension_Wages from emp_salary_process esp LEFT JOIN vehicle_master pfm on 1 = 1 and pfm.type = 'KPF' and pfm.client_id = '" + cl + "' " +
        //"and pfm.client_unit_id = '" + ut + "' INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.client_id = '" + cl + "' " +
        //"and em.client_unit_id = '" + ut + "' where esp.client_id = '" + cl + "' and esp.client_unit_id = '" + ut + "' and esp.type = 'ESP' and " +
        //"esp.head_flag = 'ESH' and esp.month_id = '" + monthid + "' group by esp.month_name,upper(em.emp_code),upper(em.external_empno),upper(em.pf_uan)," +
        //"upper(em.pf_no),upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || em.last_name)),upper(em.f_name)," +
        //"to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),upper(em.pf_uan)," +
        //"upper(em.pf_no),esp.paid_days,esp.client_unit_id ,pfm.col5,pfm.col15,pfm.col14,pfm.col18,pfm.col20,pfm.col30";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("Employee Monthly PF Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly PF Report');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //                if (command == "PF VIEW (XLS)")
        //                {
        //                    string xdoj = curryear + sgen.padlc((currmonth), 2);
        //                    mq = "select '' as fstr,Emp_Code,old_empcode,pf_uan as UAN_NO,pf_no,Emp_Name,en.gm_ern Gross_wages,sum(wages) EPF_EARNED," +
        //                        "(case when age>= 58 then 0 else (case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else " +
        //                        "sum(wages) end) end) eps_earned,(case when age>= 58 then 0 else (case when sum(wages) > to_number(kpf.col30) then " +
        //                        "to_number(kpf.col30) else sum(wages) end) end) edli_wages,sum(vpf)+sum(epf) epf_contribution ,(case when age>= 58 then 0 " +
        //                        "else round((case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else sum(wages) end) * to_number" +
        //                        "(trim(replace(kpf.col14, '%', ''))) / 100) end) EPS_Contribution,round(case when age >= 58 then sum(epf) else " +
        //                        "sum(epf) - round((case when sum(wages) > to_number(kpf.col30) then to_number(kpf.col30) else sum(wages) end) * " +
        //                        "to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) as EPf_Contribution_Empl,round(max(lop_days)) as lop_days from " +
        //                        "(select (case when to_char(em.st_dt,'yyyymm')='" + xdoj + "' then 0 else (to_number(esp.month_days) - to_number(esp.paid_days)) end) as lop_days, esp.client_id, esp.client_unit_id, " +
        //                        "substr(esp.currmmmyyyy, 0, 4) salary_yr,esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) " +
        //                        "Ext_Code,em.old_empcode, upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || " +
        //                        "REPLACE(nvl(em.last_name, ''), '0', ''))) Emp_Name, upper(em.f_name) Father_Name, to_char(convert_tz(em.dob, 'UTC', " +
        //                        "'" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob, floor(months_between(to_date(substr(esp.currmmmyyyy, 1, 4) || substr(esp.currmmmyyyy, " +
        //                        "6, 2) || '01', 'yyyymmdd'), dob) / 12) as age, to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj, " +
        //                        "upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,(case when trim(nvl(ew.col30, 'N')) = 'Y' and upper(esp.head_type) = " +
        //                        "'EARNING' then to_number(esp.head_count) else 0 end) wages,(case when esp.head_id = '000020' then(to_number" +
        //                        "(esp.head_count)) else 0 end) vpf,(case when esp.head_id = '000011' then(to_number(esp.head_count)) else 0 end) epf,esp.inc_ver " +
        //                        "from emp_salary_process esp " +
        //                        "iNNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id " +
        //                        "inner join vehicle_master ew on ew.type = 'KSP' and ew.client_id = esp.client_id and ew.client_unit_id = esp.client_unit_id and ew.vch_num = esp.head_id " +
        //                        "where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "') a " +
        //                        "inner join vehicle_master kpf on kpf.type = 'KPF' and kpf.client_id = a.client_id and kpf.client_unit_id = a.client_unit_id " +
        //                        "inner join(select col1,SUM(col10) as gm_ern,ref_code,client_id,client_unit_id from enx_tab where type = 'KES' group by col1,ref_code,client_id,client_unit_id) en " +
        //                        "on en.col1 = substr(a.Emp_Code, 4, 6) and en.ref_code=a.inc_ver and en.client_id=a.client_id and en.client_unit_id=a.client_unit_id " +
        //                        "group by salary_yr,Month,Emp_Code,Ext_Code,old_empcode,Emp_Name,Father_Name,Dob,Doj,age,pf_no,pf_uan,a.client_id,a.client_unit_id,trim(replace(kpf.col14, '%', ''))," +
        //                        "to_number(kpf.col30),en.gm_ern having sum(epf) > 0 order by Emp_Code";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("Employee Monthly PF Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly PF Detail');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                } //DONE
        //            }
        //            if (model[0].Col10.Trim().Equals("9011.5"))
        //            {
        //                if (command == "LWF Monthly Statement")
        //                {
        //                    mq = "select a.salary_yr,a.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Dob,a.Doj,a.Dor,a.esi_no,a.pf_no,a.pf_uan,a.adhaar_no,a.relation," +
        //                        "a.rel_name,a.contact_no,a.gender,a.paid_days,sum(a.wages) as wages,sum(a.emp_cont) as emp_cont from (SELECT esp.head_name," +
        //                        "trim(substr(esp.currmmmyyyy, 0, 4)) as salary_yr, trim(esp.month_name) Month, upper(em.emp_code) Emp_Code, upper(em.external_empno) Ext_Code," +
        //                        "em.old_empcode, upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))) Emp_Name," +
        //                        "to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob, to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
        //                        "(case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '0' else to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end) Dor," +
        //                        "upper(em.esi_no) esi_no,upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,em.adhaar_no,(case when upper(em.gender)= 'MALE' then 'FATHER' WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end) relation," +
        //                        "(case when upper(em.gender)= 'MALE' then upper(em.f_name) WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then em.spouse_name end) rel_name,em.contact_no,em.gender,trim(esp.paid_days) paid_days," +
        //                        "(case when trim(nvl(hm.col42,'N'))= 'Y' and upper(esp.head_type) = 'EARNING' and esp.head_id<>'000019' then sum(esp.head_count) else 0 end) wages," +
        //                        "(case when head_id in (000017) and upper(esp.head_type)= 'DEDUCTION' then sum(to_number(trim(head_count))) else 0 end) as emp_cont from emp_salary_process esp " +
        //                         "INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id " +
        //                        "inner join vehicle_master hm on hm.type = 'KSP' and hm.client_id = esp.client_id and hm.client_unit_id = esp.client_unit_id and hm.vch_num = esp.head_id " +
        //                        "where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                        "group by esp.head_name,trim(substr(esp.currmmmyyyy, 0, 4)),trim(esp.month_name),upper(em.emp_code),upper(em.external_empno),em.old_empcode," +
        //                        "upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
        //                        "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),(case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')= '01/01/1900' then '0' " +
        //                        "else to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end),upper(em.esi_no),upper(em.pf_no),upper(em.pf_uan),em.adhaar_no,(case when upper(em.gender)= 'MALE' " +
        //                        "then 'FATHER' WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end),(case when upper(em.gender)= 'MALE' then upper(em.f_name) WHEN upper(em.gender)= 'FEMALE' " +
        //                        "and upper(ismarried)= 'Y' then em.spouse_name end),em.contact_no,em.gender,trim(esp.paid_days),esp.head_id,esp.head_type,hm.col42) a " +
        //                        "group by a.salary_yr,a.Month,a.Emp_Code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Dob,a.Doj,a.Dor,a.esi_no,a.pf_no,a.pf_uan,a.adhaar_no,a.relation,a.rel_name,a.contact_no,a.gender,a.paid_days order by a.emp_code asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    if (dt.Rows.Count > 0) { sgen.open_report_bydt_xml(userCode, dt, "lwfmonthly", "LWF Monthly Report"); }
        //                } //done
        //                if (command == "LWF Yearly Statement")
        //                {
        //                    //mq = " SELECT to_number(substr(esp.currmmmyyyy,0,4)) ||'-' || (to_number(substr(esp.currmmmyyyy,0,4))+1)   as salary_yr,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,em.old_empcode," +
        //                    //   "upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))) Emp_Name," +
        //                    //   "upper(em.f_name) Father_Name ,to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob ," +
        //                    //   " to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
        //                    //   "to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOR" +
        //                    //   ",upper(em.esi_no) esi_no,upper(em.pf_no)pf_no,upper(em.pf_uan) pf_uan,em.adhaar_no ,nvl(em.emer_contact_relation,'') as relation " +
        //                    //   ",nvl(em.emer_contact_name,'') as rel_name,em.contact_no,em.gender," +
        //                    //   "to_number(es.wages) wages,sum(to_number(head_count)) as emp_cont from emp_salary_process esp INNER JOIN emp_master em" +
        //                    //   " on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id  in ('" + ut + "') and em.emp_status='Y' " +
        //                    //   "inner join(select col1, sum(col10) as wages from enx_tab where type = 'KES' and upper(col8)= upper('Earning') and client_id = '" + cl + "' and" +
        //                    //   " client_unit_id in ('" + ut + "') group by col1 )  es on es.col1 = esp.emp_code  where esp.client_id = '" + cl + "'" +
        //                    //   " and esp.client_unit_id  in ( '" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' " +
        //                    //   "and head_id in (000017) and substr(esp.currmmmyyyy,0,4) = '" + curryyyymmm.Substring(0, 4) + "' group by  upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '')" +
        //                    //   " || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),em.emp_code,em.external_empno,upper(em.f_name)," +
        //                    //   "to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), " +
        //                    //   "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
        //                    //   "to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')" +
        //                    //   ",upper(em.esi_no),es.wages,substr(esp.currmmmyyyy,0,4),em.old_empcode,em.pf_uan,em.pf_no,em.adhaar_no," +
        //                    //   "em.emer_contact_relation,em.emer_contact_name,em.contact_no,em.gender";
        //                    mq = "SELECT to_number(substr(esp.currmmmyyyy,0,4)) ||'-' || (to_number(substr(esp.currmmmyyyy,0,4))+1) as salary_yr,upper(em.emp_code) Emp_Code," +
        //                        "upper(em.external_empno) Ext_Code,em.old_empcode,upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE" +
        //                        "(nvl(em.last_name, ''), '0', ''))) Emp_Name,to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
        //                        "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
        //                        "(case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')= '01/01/1900' then '0' else " +
        //                        "to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end) DOR,upper(em.esi_no) esi_no,upper(em.pf_no)pf_no," +
        //                        "upper(em.pf_uan) pf_uan,em.adhaar_no,(case when upper(em.gender)= 'MALE' then 'FATHER' WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' " +
        //                        "then 'HUSBAND' end) relation,(case when upper(em.gender)= 'MALE' then upper(em.f_name) WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then " +
        //                        "em.spouse_name end) rel_name,em.contact_no,em.gender,to_number(es.wages) wages,sum(to_number(head_count)) as emp_cont from emp_salary_process esp " +
        //                        "INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = esp.client_id and em.client_unit_id=esp.client_unit_id " +
        //                        "inner join (select col1, sum(col10) as wages from enx_tab where type = 'KES' and upper(col8)= upper('Earning') and client_id = '" + cl + "' and " +
        //                        "client_unit_id in ('" + ut + "') group by col1 ) es on es.col1 = esp.emp_code where esp.client_id = '" + cl + "' and esp.client_unit_id  in ('" + ut + "') and esp.type = 'ESP' " +
        //                        "and esp.head_flag = 'ESH' and head_id in (000017) and substr(esp.currmmmyyyy,0,4) = '" + curryyyymmm.Substring(0, 4) + "' group by " +
        //                        "upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),em.emp_code," +
        //                        "em.external_empno,upper(em.f_name),to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), " +
        //                        "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
        //                        "(case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')= '01/01/1900' then '0' else " +
        //                        "to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')end),upper(em.esi_no),es.wages," +
        //                        "substr(esp.currmmmyyyy, 0, 4),em.old_empcode,em.pf_uan,em.pf_no,em.adhaar_no,(case when upper(em.gender)= 'MALE' then 'FATHER' WHEN " +
        //                        "upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end),(case when upper(em.gender)= 'MALE' then upper(em.f_name) WHEN " +
        //                        "upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then em.spouse_name end),em.contact_no,em.gender order by em.emp_code asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        sgen.open_report_bydt_xml(userCode, dt, "lwf", "LWF Report");
        //                    }
        //                }
        //                if (command == "LWF Yearly XL Challan")
        //                {
        //                    mq = "select client_unit_id,c.unit_name,salary_yr,Month,currmmmyyyy,Old_EmpCode,EmpCode,ExtCode,Name,NVL(Relation,'-') Relation,NVL(Rel_Name,'-') Rel_Name,Country," +
        //                       "Adhaar_No,ESI_No,PF_No,Gender,Contact_No,DOB,gm_ern Gross_Earn,DOJ,DOL,Qualification,Domicile,sum(ernwages) ernwages,sum(elwf) elwf," +
        //                       "sum(erlwf) erlwf from " +
        //                       "(select em.client_unit_id,substr(es.currmmmyyyy, 0, 4) salary_yr,es.month_name Month,es.currmmmyyyy,em.emp_code EmpCode,em.old_empcode Old_EmpCode," +
        //                       "em.external_empno ExtCode, upper((em.first_name || ' ' ||REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))) Name, " +
        //                       "(case when upper(em.gender) = 'MALE' then 'FATHER' " +
        //                       "WHEN upper(em.gender) = 'FEMALE' and upper(ismarried) = 'Y' then 'HUSBAND' end) Relation,(case when upper(em.gender)= 'MALE' " +
        //                       "then upper(em.f_name) WHEN upper(em.gender) = 'FEMALE' and upper(ismarried)= 'Y' then em.spouse_name end) Rel_Name,'0' Country," +
        //                       "em.adhaar_no Adhaar_No, em.pf_no PF_No, em.esi_no ESI_No, em.gender Gender, em.contact_no Contact_No," +
        //                       "to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB,en.gm_ern," +
        //                       "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ,(CASE WHEN " +
        //                       "to_char(em.ex_dt,'yyyy') = '1900' THEN '-' else to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), " +
        //                       "'" + sgen.Getsqldateformat() + "') END) DOL,'0' Qualification,'0' Domicile,(case when trim(nvl(sh.col42, 'N')) = 'Y' and " +
        //                       "upper(es.head_type) = 'EARNING' and es.head_id<>'000019' then to_number(es.head_count) else 0 end) ernwages,(case when es.head_id = '000017' " +
        //                       "then(to_number(es.head_count)) else 0 end) elwf,(case when es.head_id = '000017' then to_number(to_number(es.head_count) *2) " +
        //                       "else 0 end) erlwf from emp_salary_process es " +
        //                       "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and " +
        //                       "upper(em.emp_status)<>'R' " +
        //                       "inner join (select client_id,client_unit_id,col1,SUM(col10) as gm_ern from enx_tab where type = 'KES' group by client_id,client_unit_id,col1) en on " +
        //                       "en.col1 = es.emp_code and en.client_id = es.client_id and en.client_unit_id = es.client_unit_id " +
        //                       "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and " +
        //                       "sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id where es.type = 'ESP' and es.client_id in ('" + cl + "') " +
        //                       "and es.client_unit_id in ('" + ut + "') and es.head_flag = 'ESH') a " +
        //                       "inner join company_unit_profile c on c.cup_id = a.client_unit_id " +
        //                       "and c.company_profile_id in('" + cl + "') group by client_unit_id,c.unit_name,salary_yr,Month,Old_EmpCode,EmpCode,ExtCode,Name," +
        //                       "Relation,Rel_Name,Country,Adhaar_No,ESI_No,PF_No,Gender,Contact_No,DOB,gm_ern,DOJ,DOL,Qualification,Domicile,currmmmyyyy order by c.unit_name asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    Pivot pv1 = new Pivot(dt, MyGuid);
        //                    dt = pv1.PivotData_Tot_multi(new string[] { "ELWF", "erlwf", "ernwages" }, AggregateFunction.Sum, new string[]
        //                    { "client_unit_id","unit_name","salary_yr","Old_EmpCode","EmpCode","ExtCode","Name","Relation","Rel_Name","Country",
        //                        "Adhaar_No","ESI_No","PF_No","Gender","Contact_No","DOB","Gross_Earn","DOJ","DOL","Qualification","Domicile" },
        //                    new string[] { "Month", "currmmmyyyy" });
        //                    dtm = dt.Copy();
        //                    mq1 = sgen.open_grid_dt("Employee Yearly LWF Report", dtm, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Yearly LWF Report');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                } //done
        //                if (command == "LWF Monthly XL Challan")
        //                {
        //                    mq = "select client_unit_id,c.unit_name,salary_yr,Month,Old_EmpCode,EmpCode,ExtCode,Name,NVL(Relation,'-') Relation,NVL(Rel_Name,'-') Rel_Name,Country," +
        //   "Adhaar_No,ESI_No,PF_No,Gender,Contact_No,DOB,gm_ern Gross_Earn,DOJ,DOL,Qualification,Domicile,sum(ernwages) ernwages,sum(elwf) elwf," +
        //   "sum(erlwf) erlwf from " +
        //   "(select em.client_unit_id,substr(es.currmmmyyyy, 0, 4) salary_yr,es.month_name Month,em.emp_code EmpCode,em.old_empcode Old_EmpCode," +
        //   "em.external_empno ExtCode, upper((em.first_name || ' ' ||REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))) Name, " +
        //   "(case when upper(em.gender) = 'MALE' then 'FATHER' " +
        //   "WHEN upper(em.gender) = 'FEMALE' and upper(ismarried) = 'Y' then 'HUSBAND' end) Relation,(case when upper(em.gender)= 'MALE' " +
        //   "then upper(em.f_name) WHEN upper(em.gender) = 'FEMALE' and upper(ismarried)= 'Y' then em.spouse_name end) Rel_Name,'0' Country," +
        //   "em.adhaar_no Adhaar_No, em.pf_no PF_No, em.esi_no ESI_No, em.gender Gender, em.contact_no Contact_No," +
        //   "to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB,en.gm_ern," +
        //   "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ,(CASE WHEN " +
        //   "to_char(em.ex_dt,'yyyy') = '1900' THEN '-' else to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), " +
        //   "'" + sgen.Getsqldateformat() + "') END) DOL,'0' Qualification,'0' Domicile,(case when trim(nvl(sh.col42, 'N')) = 'Y' and " +
        //   "upper(es.head_type) = 'EARNING' and es.head_id<>'000019' then to_number(es.head_count) else 0 end) ernwages,(case when es.head_id = '000017' " +
        //   "then(to_number(es.head_count)) else 0 end) elwf,(case when es.head_id = '000017' then to_number(to_number(es.head_count) *2) " +
        //   "else 0 end) erlwf from emp_salary_process es " +
        //   "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and " +
        //   "upper(em.emp_status)<>'R' " +
        //   "inner join (select client_id,client_unit_id,col1,SUM(col10) as gm_ern from enx_tab where type = 'KES' group by client_id,client_unit_id,col1) en on " +
        //   "en.col1 = es.emp_code and en.client_id = es.client_id and en.client_unit_id = es.client_unit_id " +
        //   "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and " +
        //   "sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id where es.type = 'ESP' and es.client_id in ('" + cl + "') " +
        //   "and es.client_unit_id in ('" + ut + "') and es.head_flag = 'ESH' and currmmmyyyy='" + curryyyymmm + "') a " +
        //   "inner join company_unit_profile c on c.cup_id = a.client_unit_id " +
        //   "and c.company_profile_id in('" + cl + "') group by client_unit_id,c.unit_name,salary_yr,Month,Old_EmpCode,EmpCode,ExtCode,Name," +
        //   "Relation,Rel_Name,Country,Adhaar_No,ESI_No,PF_No,Gender,Contact_No,DOB,gm_ern,DOJ,DOL,Qualification,Domicile order by c.unit_name asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    Pivot pv1 = new Pivot(dt, MyGuid);
        //                    dt = pv1.PivotData_Tot_multi(new string[] { "ELWF", "erlwf", "ernwages" }, AggregateFunction.Sum, new string[]
        //                    { "client_unit_id","unit_name","salary_yr","Old_EmpCode","EmpCode","ExtCode","Name","Relation","Rel_Name","Country",
        //                        "Adhaar_No","ESI_No","PF_No","Gender","Contact_No","DOB","Gross_Earn","DOJ","DOL","Qualification","Domicile" },
        //                    new string[] { "Month" });
        //                    dtm = dt.Copy();
        //                    mq1 = sgen.open_grid_dt("LWF Monthly XL Challan", dtm, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('LWF Monthly XL Challan');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                } //done
        //                if (command == "LWF Monthly View")
        //                {
        //                    mq = "select '' as fstr, a.old_empcode ,a.Emp_code,a.Emp_Name as Name, nvl(a.emp_type, '-') as emp_type ,a.Dob,a.Doj,a.Dor,a.esi_no,a.pf_no, " +
        //                        "a.pf_uan,a.adhaar_no,a.relation,a.rel_name as Relation_Person_Name,a.contact_no,a.gender,a.paid_days," +
        //                        "'Indian' nationality,sum(a.wages) as wages ,sum(a.emp_cont) as employees_contribution ,sum(a.emp_cont * 2)" +
        //                        " as employeer_contribution from( SELECT  esp.head_name, trim(substr(esp.currmmmyyyy, 0, 4)) as salary_yr," +
        //                        " trim(esp.month_name) Month, upper(em.emp_code) Emp_Code, em.old_empcode, upper((em.first_name || ' ' ||" +
        //                        " REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))) Emp_Name, " +
        //                        "to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob, " +
        //                        "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
        //                        " (case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') = '01/01/1900' " +
        //                        "then '0' else  to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end) Dor," +
        //                        "upper(em.esi_no) esi_no,upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,em.adhaar_no,(case when upper(em.gender)= 'MALE' " +
        //                        "then 'FATHER' WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end) relation,(case when upper(em.gender)= " +
        //                        "'MALE' then upper(em.f_name) WHEN upper(em.gender) = 'FEMALE' and upper(ismarried)= 'Y' then em.spouse_name end) rel_name," +
        //                        "em.contact_no,em.gender,trim(esp.paid_days) paid_days,(case when trim(nvl(hm.col42,'N'))= 'Y' and upper(esp.head_type) = 'EARNING'" +
        //                        " then sum(esp.head_count) else 0 end) wages, (case when head_id in (000017) and upper(esp.head_type)= 'DEDUCTION' then " +
        //                        "sum(to_number(trim(head_count))) else 0 end) as emp_cont, (case when ct.contr = 000000 then 'Self' else ct.c_name end ) as" +
        //                        " emp_type from emp_salary_process esp  INNER JOIN emp_master em   on esp.emp_code = em.vch_num and em.type = 'EMP' " +
        //                        "and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id and em.emp_status = 'Y'  inner join vehicle_master hm " +
        //                        "on hm.type = 'KSP' and hm.client_id = esp.client_id and hm.client_unit_id = esp.client_unit_id and hm.vch_num = esp.head_id " +
        //                        "left join clients_mst ct on ct.vch_num = em.contr and ct.type = 'PVD' and ct.contr = 'Y' where esp.client_id = '" + cl + "' and" +
        //                        " esp.client_unit_id  in (" + ut + ") and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "'" +
        //                        " group by(case when ct.contr= 000000 then 'Self' else ct.c_name end ), esp.head_name,trim(substr(esp.currmmmyyyy, 0, 4))," +
        //                        "trim(esp.month_name),upper(em.emp_code),upper(em.external_empno) ,em.old_empcode,upper((em.first_name || ' ' || " +
        //                        "REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),to_char(convert_tz(em.dob, " +
        //                        "'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),to_char (convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), " +
        //                        "'" + sgen.Getsqldateformat() + "'),(case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')= '01/01/1900'" +
        //                        " then '0' else to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end),upper(em.esi_no) " +
        //                        ",upper(em.pf_no),upper(em.pf_uan),em.adhaar_no,(case when upper(em.gender)= 'MALE' then 'FATHER' WHEN upper(em.gender)= 'FEMALE' " +
        //                        "and upper(ismarried)= 'Y' then 'HUSBAND' end),(case when upper(em.gender)= 'MALE' then upper(em.f_name) WHEN upper(em.gender)= 'FEMALE' " +
        //                        "and upper(ismarried)= 'Y' then em.spouse_name end),em.contact_no,em.gender,trim(esp.paid_days),esp.head_id,esp.head_type,hm.col42  ) a " +
        //                        "group by a.salary_yr,a.Month,a.Emp_Code,a.old_empcode,a.Emp_Name,a.Dob,a.Doj,a.Dor,a.esi_no,a.pf_no,a.pf_uan,a.adhaar_no, " +
        //                        "a.relation,a.rel_name,a.contact_no,a.gender,a.paid_days,a.emp_type order by a.emp_code asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("Employee Monthly LWF Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly LWF VIEW');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //            }
        //            if (model[0].Col10.Trim().Equals("9011.6"))
        //            {
        //                if (command == "Loan Detail")
        //                {
        //                    mq = "select esp.emp_code ,trim(substr(esp.currmmmyyyy,0,4)) as salary_yr, trim(esp.month_name) Month," +
        //                       "trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
        //                       "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
        //                       "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name,a.date2 as ad_date, " +
        //                       " esp.head_count as adv_ded from emp_salary_process esp inner join (select col1 emp_code, max(date2) date2 from " +
        //                       "enx_tab2 where type = 'HAS' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1) a" +
        //                       " on a.emp_code = esp.emp_code INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' " +
        //                       "and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id " +
        //                       "where esp.client_id = '" + cl + "' and esp.client_unit_id " +
        //                       " in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                       "and esp.head_id = '000021' and esp.head_count<>'0' order by trim(upper(em.emp_code)) asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    sgen.open_report_bydt_xml(userCode, dt, "loan_details", "Loan Detail");
        //                } //done
        //            }
        //            if (model[0].Col10.Trim().Equals("9011.7"))
        //            {
        //                DataTable dtot = new DataTable();
        //                if (command == "Company Wise Total OT")
        //                {
        //                    //mq = "select c.unit_name, a.client_unit_id , a.salary_yr,a.month_name, sum(a.emp_count) emp_count ,sum(a.ot_hrs) as ot_hrs" +
        //                    //    " ,max(a.ot_mst) as ot_mst, sum(a.ot) as ot,sum(a.arr) arr,(sum(a.ot) + sum(a.arr)) totalot,sum(a.esi_on_ot) esi_on_ot,((sum(a.ot) " +
        //                    //    " + sum(a.arr)) - max(a.esi_on_ot)) netpay from(select count(em.client_unit_id) as emp_count, em.client_unit_id, trim(substr " +
        //                    //    "(sp.currmmmyyyy, 0, 4)) as salary_yr, to_number(ot_mst) as ot_mst, to_number(sp.ot_hrs) as OT_hrs, trim(sp.month_name) " +
        //                    //    " as month_name, (case when upper(trim(sp.head_name)) like 'ARR_%' then to_number(sp.head_count) else 0 end) as Arr, " +
        //                    //    "(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count) else 0 end) as OT,to_number(a.esi_on_ot) " +
        //                    //    "as esi_on_ot from emp_salary_process sp left join emp_master em on sp.emp_code = em.vch_num and em.type = 'EMP' " +
        //                    //    "and em.client_id = sp.client_id and em.client_unit_id = sp.client_unit_id and em.emp_status = 'Y' and  " +
        //                    //    "to_char(em.ex_dt,'YYYY')= '1900' inner join(select emp_code, head_count esi_on_ot from emp_salary_process where" +
        //                    //    " client_unit_id in  ('" + ut + "') and type = 'ESP' and client_id = '" + cl + "'  and currmmmyyyy = '" + curryyyymmm + "' and" +
        //                    //    " head_flag = 'ESH' and head_id = '000022') a on sp.emp_code = a.emp_code inner join(select col1, sum(col10) as ot_mst" +
        //                    //    " from enx_tab where type = 'KES' and client_id = '" + cl + "'  and col4 in (select  col1 from enx_tab where type = 'OTC'" +
        //                    //    " and client_unit_id in ('" + ut + "')) group by col1) ot on ot.col1 = sp.emp_code where sp.type = 'ESP' and sp.client_id = '" + cl + "' " +
        //                    //    "and sp.currmmmyyyy = '" + curryyyymmm + "' and sp.head_flag = 'ESH' and sp.head_id = '000019' group by " +
        //                    //    "trim(substr(sp.currmmmyyyy, 0, 4)),ot_mst,sp.ot_hrs,trim(sp.month_name),(case when upper(trim(sp.head_name)) like 'ARR_%'" +
        //                    //    " then to_number(sp.head_count) else 0 end) ,(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count)" +
        //                    //    " else 0 end) ,to_number(a.esi_on_ot),em.client_unit_id) a inner join company_unit_profile c on a.client_unit_id = c.cup_id " +
        //                    //    "and c.company_profile_id = '" + cl + "' and a.ot_hrs>0  group by a.client_unit_id, a.salary_yr,a.month_name,c.unit_name order by c.unit_name asc";
        //                    mq = "select c.unit_name,a.unitid client_unit_id,a.salary_yr,a.month_name,sum(a.cnt) emp_count,sum(a.ot_hrs) ot_hrs,sum(a.ot_mst) ot_mst," +
        //    "sum(a.ot) as ot,sum(a.arr) arr,(sum(a.ot) + sum(a.arr)) totalot,sum(a.esi_on_ot) esi_on_ot,((sum(a.ot) + sum(a.arr))-" +
        //    "sum(a.esi_on_ot)) netpay from (select count(emp_code) cnt,unitid,salary_yr,name,f_name,emp_code,external_empno," +
        //    "month_name,max(ot_hrs) ot_hrs,max(ot_mst) ot_mst,sum(ot) ot,sum(arr) arr,(sum(ot) + sum(arr)) totalot," +
        //    "max(esi_on_ot) esi_on_ot,((sum(ot) + sum(arr)) - max(esi_on_ot)) netpay from (select trim(em.client_unit_id) unitid," +
        //    "trim(substr(sp.currmmmyyyy,0,4)) as salary_yr, to_number(ot_mst) as ot_mst,trim((replace(em.FIRST_NAME, '0', '') || ' ' ||" +
        //    "replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Name,trim(em.f_name) f_name,trim(em.emp_code) emp_code," +
        //    "trim(em.external_empno) external_empno,to_number(sp.ot_hrs) as OT_hrs,trim(sp.month_name) as month_name,(case when upper(trim(sp.head_name)) " +
        //    "like 'ARR_%' then to_number(sp.head_count) else 0 end) as Arr,(case when upper(trim(sp.head_name)) not like 'ARR_%' " +
        //    "then to_number(sp.head_count) else 0 end) as OT,to_number(a.esi_on_ot) as esi_on_ot from emp_salary_process sp inner " +
        //    "join emp_master em on sp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.client_id = sp.client_id and em.client_unit_id = " +
        //    "sp.client_unit_id inner join(select emp_code," +
        //    "head_count esi_on_ot from emp_salary_process where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
        //    "and currmmmyyyy = '" + curryyyymmm + "' and head_flag = 'ESH' and head_id = '000022') a on sp.emp_code = a.emp_code inner " +
        //    "join (select col1, sum(col10) as ot_mst from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id " +
        //    "in ('" + ut + "') and col4 in (select  col1 from enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) group by " +
        //    "col1) ot on ot.col1 = sp.emp_code where sp.type = 'ESP' and sp.client_id = '" + cl + "' and sp.client_unit_id in ('" + ut + "') " +
        //    "and sp.currmmmyyyy = '" + curryyyymmm + "' and sp.head_flag = 'ESH' and sp.head_id = '000019' ) group by unitid,salary_yr," +
        //    "name,f_name,emp_code,external_empno,month_name having max(ot_hrs) <> 0) a inner join company_unit_profile c on " +
        //    "a.unitid = c.cup_id and c.company_profile_id = '" + cl + "' group by c.unit_name,a.unitid,a.salary_yr,a.month_name order by c.unit_name asc";
        //                    mq = "select c.unit_name,a.unitid client_unit_id,a.salary_yr,a.month_name,sum(a.cnt) emp_count,sum(a.ot_hrs) ot_hrs,sum(a.ot_mst) ot_mst," +
        //   "sum(a.ot) as ot,sum(a.arr) arr,(sum(a.ot) + sum(a.arr)) totalot,sum(a.esi_on_ot) esi_on_ot,((sum(a.ot) + sum(a.arr))-" +
        //   "sum(a.esi_on_ot)) netpay from (select count(emp_code) cnt,unitid,salary_yr,name,f_name,emp_code,external_empno," +
        //   "month_name,max(ot_hrs) ot_hrs,max(ot_mst) ot_mst,sum(ot) ot,sum(arr) arr,(sum(ot) + sum(arr)) totalot," +
        //   "max(esi_on_ot) esi_on_ot,((sum(ot) + sum(arr)) - max(esi_on_ot)) netpay from (select trim(em.client_unit_id) unitid," +
        //   "trim(substr(sp.currmmmyyyy,0,4)) as salary_yr, to_number(ot_mst) as ot_mst,trim((replace(em.FIRST_NAME, '0', '') || ' ' ||" +
        //   "replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Name,trim(em.f_name) f_name,trim(em.emp_code) emp_code," +
        //   "trim(em.external_empno) external_empno,to_number(sp.ot_hrs) as OT_hrs,trim(sp.month_name) as month_name,(case when upper(trim(sp.head_name)) " +
        //   "like 'ARR_%' then to_number(sp.head_count) else 0 end) as Arr,(case when upper(trim(sp.head_name)) not like 'ARR_%' " +
        //   "then to_number(sp.head_count) else 0 end) as OT,to_number(a.esi_on_ot) as esi_on_ot from emp_salary_process sp inner " +
        //   "join emp_master em on sp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.client_id = sp.client_id and em.client_unit_id = " +
        //   "sp.client_unit_id inner join(select emp_code," +
        //   "head_count esi_on_ot from emp_salary_process where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
        //   "and currmmmyyyy = '" + curryyyymmm + "' and head_flag = 'ESH' and head_id = '000022') a on sp.emp_code = a.emp_code inner " +
        //   "join (select col1, sum(col10) as ot_mst from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id " +
        //   "in ('" + ut + "') and col4 in (select  col1 from enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) group by " +
        //   "col1) ot on ot.col1 = sp.emp_code where sp.type = 'ESP' and sp.client_id = '" + cl + "' and sp.client_unit_id in ('" + ut + "') " +
        //   "and sp.currmmmyyyy = '" + curryyyymmm + "' and sp.head_flag = 'ESH' and sp.head_id = '000019' ) group by unitid,salary_yr," +
        //   "name,f_name,emp_code,external_empno,month_name having max(ot_hrs) <> 0) a inner join company_unit_profile c on " +
        //   "a.unitid = c.cup_id and c.company_profile_id = '" + cl + "' group by c.unit_name,a.unitid,a.salary_yr,a.month_name order by c.unit_name asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    sgen.open_report_bydt_xml(userCode, dt, "company_ot", "Company Wise OT Detail");
        //                }
        //                if (command == "Monthly OT Report")
        //                {
        //                    mq = "select salary_yr,name,f_name,emp_code,external_empno,old_empcode,month_name,max(ot_hrs) as ot_hrs,max(ot_mst) as ot_mst,sum(ot) as ot,sum(arr) arr," +
        //                        "(sum(ot) + sum(arr)) totalot,max(esi_on_ot) esi_on_ot,((sum(ot) + sum(arr)) - max(esi_on_ot)) netpay from " +
        //                        "(select trim(substr(sp.currmmmyyyy,0,4)) as salary_yr, to_number(ot_mst) as ot_mst," +
        //                        "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Name,trim(em.f_name) f_name," +
        //                        "trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,trim(em.old_empcode) old_empcode,to_number(sp.ot_hrs) as OT_hrs,trim(sp.month_name) as month_name," +
        //                        "(case when upper(trim(sp.head_name)) like 'ARR_%' then to_number(sp.head_count) else 0 end) as Arr," +
        //                        "(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count) else 0 end) as OT,to_number(a.esi_on_ot) as esi_on_ot " +
        //                        "from emp_salary_process sp inner join emp_master em on sp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.client_id = sp.client_id and " +
        //                        "em.client_unit_id=sp.client_unit_id inner join (select emp_code, head_count esi_on_ot " +
        //                        "from emp_salary_process where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and currmmmyyyy = '" + curryyyymmm + "' and head_flag = 'ESH' " +
        //                        "and head_id = '000022') a on sp.emp_code = a.emp_code inner join(select col1, sum(col10) as ot_mst,trim(ref_code) inc_ver from enx_tab where type = 'KES' and " +
        //                        "client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in (select  col1 from enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) " +
        //                        "group by col1,trim(ref_code)) ot on ot.col1 = sp.emp_code and sp.inc_ver=ot.inc_ver  where sp.type = 'ESP' and sp.client_id= '" + cl + "' and sp.client_unit_id in ('" + ut + "') and " +
        //                        "sp.currmmmyyyy = '" + curryyyymmm + "' and sp.head_flag = 'ESH' and sp.head_id = '000019' ) group by salary_yr,name,f_name,emp_code,external_empno,month_name,old_empcode having max(ot_hrs)<>0";
        //                    dtot = sgen.getdata(userCode, mq);
        //                    dtot.TableName = "prepcur";
        //                    dst.Tables.Add(dtot);
        //                    sgen.open_report_byDs_xml(userCode, dst, "ot_report", "OT Report");
        //                }
        //                if (command == "Netpay With OT")
        //                {
        //                    mq = "select salary_yr,Name,f_name,emp_code,external_empno,old_empcode,month_name,round(sum(netpay)) as netpay,round(sum(ot)-sum(otesi)) as ot,round(sum(netpay)-(sum(ot)-sum(otesi))) bal from " +
        //                        "(select trim(substr(sp.currmmmyyyy, 0, 4)) as salary_yr, trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || " +
        //                        "replace(em.LAST_NAME, '0', ''))) as Name, trim(em.f_name) f_name, trim(em.emp_code) emp_code, trim(em.external_empno) external_empno," +
        //                        "trim(em.old_empcode) old_empcode, trim(sp.month_name) as month_name,(case when sp.head_id = '999999' then(to_number(sp.head_count)) else 0 end) netpay," +
        //                        "(case when sp.head_id = '000019' then (to_number(sp.head_count)) else 0 end) ot,(case when sp.head_id = '000022' then(to_number(sp.head_count)) else 0 end) otesi " +
        //                        "from emp_salary_process sp inner join emp_master em on sp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.emp_status!='R'  and em.client_id = sp.client_id and " +
        //                        "em.client_unit_id = sp.client_unit_id " +
        //                        "where sp.type = 'ESP' and sp.client_id = '" + cl + "' and sp.client_unit_id in ('" + ut + "') and sp.head_flag = 'ESH' and sp.currmmmyyyy = '" + curryyyymmm + "' " +
        //                        "and sp.head_id in('999999', '000019','000022')) group by salary_yr,Name,f_name,emp_code,external_empno,old_empcode,month_name order by emp_code asc";
        //                    dtot = sgen.getdata(userCode, mq);
        //                    dtot.TableName = "prepcur";
        //                    dst.Tables.Add(dtot);
        //                    sgen.open_report_byDs_xml(userCode, dst, "ern_with_ot", "OT Report");
        //                }
        //                if (command == "Contractor Monthly OT")
        //                {
        //                    mq = "select salary_yr,name,f_name,emp_code,external_empno,month_name,max(ot_hrs) as ot_hrs,max(ot_mst) as ot_mst,sum(ot) as ot,sum(arr) arr," +
        //                        "(sum(ot) + sum(arr)) totalot,max(esi_on_ot) esi_on_ot,((sum(ot) + sum(arr)) - max(esi_on_ot)) netpay from " +
        //                        "(select trim(substr(sp.currmmmyyyy,0,4)) as salary_yr, to_number(ot_mst) ot_mst," +
        //                        "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Name,trim(em.f_name) f_name," +
        //                        "trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,to_number(sp.ot_hrs) as OT_hrs,trim(sp.month_name) as month_name," +
        //                        "(case when upper(trim(sp.head_name)) like 'ARR_%' then to_number(sp.head_count) else 0 end) as Arr," +
        //                        "(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count) else 0 end) as OT,to_number(a.esi_on_ot) as esi_on_ot " +
        //                        "from emp_salary_process sp left join emp_master em on sp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = sp.client_id and " +
        //                        "em.client_unit_id=sp.client_unit_id and em.emp_status = 'Y' and to_char(em.ex_dt,'YYYY')= '1900' inner join (select emp_code, head_count esi_on_ot " +
        //                        "from emp_salary_process where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and currmmmyyyy = '" + curryyyymmm + "' and head_flag = 'ESH' " +
        //                        "and head_id = '000022') a on sp.emp_code = a.emp_code inner join(select col1, sum(col10) as ot_mst from enx_tab where type = 'KES' and " +
        //                        "client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in (select  col1 from enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) " +
        //                        "group by col1) ot on ot.col1 = sp.emp_code where sp.type = 'ESP' and sp.client_id= '" + cl + "' and sp.client_unit_id in ('" + ut + "') and " +
        //                        "sp.currmmmyyyy = '" + curryyyymmm + "' and sp.head_flag = 'ESH' and sp.head_id = '000019' ) group by salary_yr,name,f_name,emp_code,external_empno,month_name having max(ot_hrs)<>0";
        //                    mq = "select salary_yr,vd_name,name,f_name,emp_code,external_empno,month_name,max(ot_hrs) as ot_hrs,max(ot_mst) as ot_mst," +
        //                        "sum(ot) ot,sum(arr) arr,(sum(ot)+sum(arr)) totalot,max(esi_on_ot) esi_on_ot,((sum(ot)+sum(arr))-max(esi_on_ot)) netpay " +
        //                        "from (select trim(substr(sp.currmmmyyyy,0,4)) salary_yr,to_number(ot_mst) ot_mst,vd.c_name vd_name," +
        //                        "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Name," +
        //                        "trim(em.f_name) f_name,trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,to_number(sp.ot_hrs) as OT_hrs," +
        //                        "trim(sp.month_name) as month_name,(case when upper(trim(sp.head_name)) like 'ARR_%' then to_number(sp.head_count) else 0 end) Arr," +
        //                        "(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count) else 0 end) OT,to_number(a.esi_on_ot) esi_on_ot " +
        //                        "from emp_salary_process sp inner join emp_master em on sp.emp_code = em.vch_num and em.type='EMP' and em.emp_status!='R'  and " +
        //                        "em.client_id=sp.client_id and em.client_unit_id = sp.client_unit_id " +
        //                        "inner join clients_mst vd on vd.vch_num = em.contr and vd.type = 'PVD' and vd.client_id = em.client_id and " +
        //                        "vd.client_unit_id = em.client_unit_id inner join (select emp_code, head_count esi_on_ot from emp_salary_process " +
        //                        "where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and currmmmyyyy = '" + curryyyymmm + "' and " +
        //                        "head_flag = 'ESH' and head_id = '000022') a on sp.emp_code = a.emp_code inner join(select col1, sum(col10) as ot_mst " +
        //                        "from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in (select  col1 from " +
        //                        "enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) group by col1) ot on ot.col1 = sp.emp_code " +
        //                        "where sp.type = 'ESP' and sp.client_id = '" + cl + "' and sp.client_unit_id in ('" + ut + "') and sp.currmmmyyyy = '" + curryyyymmm + "' and " +
        //                        "sp.head_flag = 'ESH' and sp.head_id = '000019') group by salary_yr,vd_name,name,f_name,emp_code,external_empno," +
        //                        "month_name having max(ot_hrs) <> 0 order by vd_name";
        //                    dtot = sgen.getdata(userCode, mq);
        //                    dtot.TableName = "prepcur";
        //                    dst.Tables.Add(dtot);
        //                    sgen.open_report_byDs_xml(userCode, dst, "contrmot", "Contractor Monthly OT");
        //                }
        //            }
        //            if (model[0].Col10.Trim().Equals("9011.8"))
        //            {
        //                if (command == "Monthly Salary (Total)")
        //                {
        //                    /////////////////////=======================
        //                    #region dt earn
        //                    mq = "select em.emp_code,em.external_empno,es.emp_name,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern,es.head_type," +
        //                        "es.head_id,upper(sh.col3) head_name,es.head_count," +
        //                        "(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ( '" + ut + "') " +
        //                        "inner join emp_master em on em.vch_num=es.emp_code and em.type='EMP' and em.client_id='" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_status='Y' and to_char(em.ex_dt,'yyyy')='1900' " +
        //                        "inner join (select col1,SUM(col10) as gm_ern from enx_tab where type='KES' and client_id='" + cl + "' and client_unit_id in ('" + ut + "') " +
        //                        "group by col1) en on en.col1=es.emp_code " +
        //                        "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Earning' and es.type = 'ESP' and es.client_id = '"
        //                        + cl + "' and es.client_unit_id in ('" + ut + "')";
        //                    DataTable dtern = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtern, MyGuid);
        //                    dtern = pv.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                    { "emp_code","external_empno","emp_name","f_name", "month_name", "month_days", "paid_days","gm_ern" },
        //                    new string[] { "head_name", "head_order" }, "ERN_TOTAL");
        //                    #endregion
        //                    ////////////////////=======================
        //                    #region dt deduct
        //                    mq1 = "select em.emp_code,em.external_empno,es.emp_name,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern,es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count," +
        //                             "(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                             "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                             "inner join emp_master em on em.vch_num=es.emp_code and em.type='EMP' and em.client_id='" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_status='Y' and to_char(em.ex_dt,'yyyy')='1900' " +
        //                             "inner join (select col1,SUM(col10) as gm_ern from enx_tab where type='KES' and client_id='" + cl + "' and client_unit_id in ('" + ut + "') group by col1) en on en.col1=es.emp_code " +
        //                             "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Deduction' and es.type = 'ESP' and es.client_id = '"
        //                             + cl + "' and es.client_unit_id in ('" + ut + "')";
        //                    DataTable dtded = sgen.getdata(userCode, mq1);
        //                    Pivot pv1 = new Pivot(dtded, MyGuid);
        //                    dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                    { "emp_code", "external_empno", "emp_name", "f_name", "month_name", "month_days", "paid_days","gm_ern" },
        //                    new string[] { "head_name" }, "DED_TOTAL");
        //                    #endregion
        //                    dtm = dtern.Copy();
        //                    foreach (DataColumn dc in dtded.Columns)
        //                    {
        //                        if (dc.Ordinal > 7) dtm.Columns.Add(dc.ColumnName);
        //                    }
        //                    string netname = "NETPAYABLE";
        //                    dtm.Columns.Add(netname);
        //                    for (int r = 0; r < dtded.Rows.Count; r++)
        //                    {
        //                        foreach (DataColumn dc in dtded.Columns)
        //                        {
        //                            if (dc.Ordinal > 7)
        //                            {
        //                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
        //                            }
        //                        }
        //                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOTAL"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOTAL"].ToString());
        //                    }
        //                    var dtf = dtm;
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        string nn = "Col" + (c + 1);
        //                        dtcols.Columns.Add(nn);
        //                    }
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    bool netadded = false;
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtm.Columns[c + 8].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded)
        //                                {
        //                                    throw new Exception();
        //                                }
        //                                dtcols.Rows[0][c] = dtm.Columns[c + 8].ColumnName.ToString();
        //                                dtm.Columns[c + 8].ColumnName = "VCol" + (c + 1);
        //                            }
        //                            else
        //                            {
        //                                string nn = "VCol" + (c + 1);
        //                                dtm.Columns.Add(nn);
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            string nn = "VCol" + (c + 1);
        //                            dtm.Columns.Add(nn);
        //                            dtcols.Rows[0][c] = "-";
        //                        }
        //                    }
        //                    dtm.Columns[netname].SetOrdinal(56);
        //                    dtm.TableName = "prepcur";
        //                    dst.Tables.Add(dtm);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    dst.Tables.Add();
        //                    sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_salary_dept", "Monthly Salary (Total)");
        //                }
        //                if (command == "Actual Salary")
        //                {
        //                    mq = @"select distinct (replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME,'0','')||' '||replace(em.LAST_NAME,'0','')) as Name,
        //em.f_name as Fathers_name,em.emp_code,em.external_empno,dp.master_name as dept,dg.master_name as desig,et.master_name as emptype,ec.master_name as empcategory,
        //nvl(bnk.master_name,'-') as bank_name,enx.col2 as Total_salary from emp_master em " +
        //"inner join master_setting dp on dp.master_id=em.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,'" + clientid_mst + "')=1 and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
        //"inner join master_setting dg on dg.master_id=em.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,'" + clientid_mst + "')= 1 and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
        //"inner join master_setting et on et.master_id=em.emp_type and et.type='KET' and find_in_set(et.client_id,'" + clientid_mst + "')=1 and find_in_set(et.client_unit_id,'" + unitid_mst + "')=1 " +
        //"inner join master_setting ec on ec.master_id=em.emp_category and ec.type='KEC' and find_in_set(ec.client_id,'" + clientid_mst + "')=1 and find_in_set(ec.client_unit_id,'" + unitid_mst + "')=1 " +
        //"inner join enx_tab enx on enx.col1=em.vch_num and enx.type='KES' and enx.client_id=em.client_id and enx.client_unit_id=em.client_unit_id " +
        //"left outer join master_setting bnk on bnk.master_id = em.bank_name and em.type='ABD' and find_in_set(bnk.client_id,'" + clientid_mst + "')=1 and" +
        //" find_in_set(bnk.client_id,'" + clientid_mst + "')=1 " +
        //"where em.type='EMP' and em.client_id='" + cl + "' and em.client_unit_id in ('" + ut + "') ";
        //                    dt = sgen.getdata(userCode, mq);
        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        dt.TableName = "prepcur";
        //                        dst.Tables.Add(dt);
        //                        sgen.open_report_byDs_xml(userCode, dst, "emp_actual_salary1", "Employee Actual Salary");
        //                    }
        //                    else { sgen.showmsg(1, "Data Not Found", 2); }
        //                }
        //                if (command == "Monthly Transfer Salary")
        //                {
        //                    mq = "select trim(substr(esp.currmmmyyyy,0,4)) as salary_yr,trim(upper(em.emp_code)) emp_code,trim(upper(em.external_empno)) external_empno," +
        //                        "trim(upper(em.old_empcode)) old_empcode,trim(replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME, '0', '')||' '||" +
        //                        "replace(em.LAST_NAME, '0', '')) as Name,trim(em.ifsc_code) ifsc_code,trim(em.account_no) account_no,to_number(esp.head_count) Netpay,trim(esp.month_name) month_name " +
        //                        "from emp_master em INNER join emp_salary_process esp on esp.emp_code=em.vch_num and esp.type='ESP' and esp.client_id='" + cl + "' and " +
        //                        "esp.client_unit_id in ('" + ut + "') and esp.head_flag='ESH' and esp.head_id='999999' and esp.currmmmyyyy='" + curryyyymmm + "' INNER JOIN " +
        //                        "company_unit_profile up on em.client_unit_id=up.CUP_Id WHERE em.type='EMP' and em.client_id='" + cl + "' " +
        //                         "and em.client_unit_id in ('" + ut + "') and trim(em.ifsc_code) != '0' and trim(em.account_no)!='0' order by em.emp_code asc";
        //                    dt = sgen.getdata(userCode, mq);
        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        dt.TableName = "prepcur";
        //                        dst.Tables.Add(dt);
        //                        sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_transfer", "Employee Monthly Transfer");
        //                    }
        //                    else { ViewBag.scripCall = "showmsgJS(1, 'No Data Found', 2);"; }
        //                } //done
        //                if (command == "Actual Monthly Salary")
        //                {
        //                    //                    mq = @"select emp_code,max(external_empno) as external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name,
        //                    //max(month_days) as month_days,max(paid_days) paid_days ,sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(mtot) MTot,
        //                    //sum(act_salary) act_salary,sum(EBasic) EBasic,sum(EHRA) EHRA,sum(EConveyance) EConveyance,sum(Etot) Etot,sum(ot_hrs) ot_hrs,sum(OTAmount) OTAmount,
        //                    //sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF,SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance,(SUM(ETOT)-SUM(PF)-SUM(ESI)) AS NET_BOOK,(SUM(FTOT)-SUM(PF)-SUM(ESI)) AS Net_Actual,
        //                    //(SUM(FTOT)-SUM(PF)-SUM(ESI))-(SUM(ETOT)-SUM(PF)-SUM(ESI))  AS Cash FROM
        //                    //(select en.col1 as emp_code, '-' as external_empno, '-' as emp_name, '-' as f_name, '-' as month_name, '0' as month_days, '0' as paid_days, 
        //                    //sum(if (col4 = '000001',col10,0)) as MBasic,sum(if (col4 = '000002',col10,0)) as MHRA,sum(if (col4 = '000006',col10,0)) as MConveyance,sum(col10) as MTot,
        //                    //'0' as act_salary,'0' as EBasic,'0' as EHRA,'0' as EConveyance,'0' as Etot,'0' as ot_hrs,'0' as OTAmount,'0' as FBasic,'0' Ftot,'0' PF,'0' as ESI,
        //                    //'0' LWF,'0' as Advance,'0' as Lunch from enx_tab en where en.type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in ('000001', '000002', '000006') " +
        //                    //"group by col1 " +
        //                    //"union  all " +
        //                    //"SELECT emp_code,external_empno,emp_name,f_name,month_name,month_days,paid_days,'0' as Mbasic,'0' mhra,'0' as mconvey,'0' as mtot,act_salary," +
        //                    //"sum(if (head_id = '000001',head_count,0)) as Basic,sum(if (head_id = '000002',head_count,0)) as HRA,sum(if (head_id = '000006',head_count,0)) as Conveyance," +
        //                    //"sum(if (head_id not in ('777776', '777777'),head_count,0)) as Etot,ot_hrs,sum(if (head_id = '777776',head_count,0)) as OT," +
        //                    //"sum(if (head_id = '777777',head_count,0)) as FBasic,sum(if (head_id  in ('777776', '777777'),head_count,0)) as Ftot,'0' as pf,'0' as esi,'0' as lwf," +
        //                    //"'0' as adv,'0' as Lunch  from(select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days, es.ot_hrs," +
        //                    //"em.act_salary, es.head_type,es.head_id, ifnull(upper(sh.col3), 'Actual_OT') head_name, es.head_count, ifnull((CONVERT(sh.col41, UNSIGNED INTEGER)), '999') " +
        //                    //"head_order from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
        //                    //"sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
        //                    //"em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and " +
        //                    //"es.client_unit_id in ('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') order by es.emp_code, es.head_id) a group by " +
        //                    //"emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days, ot_hrs, act_salary " +
        //                    //"union all " +
        //                    //"SELECT emp_code, external_empno, emp_name, f_name, month_name,'0' as month_days,'0' paid_days,'0' as Mbasic,'0' mhra,'0' as mconvey,'0' as mtot," +
        //                    //"'0' act_salary ,'0' as ebasic,'0' as ehra,'0' as econey,'0' as etot,'0' ot_hrs,'0' as otamount,'0' as fbasic,'0' as ftot,sum(if (head_id = '000011'," +
        //                    //"head_count,0)) as EPF,sum(if (head_id = '000014',head_count,0)) as ESI,sum(if (head_id = '000017',head_count,0)) as LWF,sum(if (head_id = '000021'," +
        //                    //"head_count,0)) as ADV,sum(if (head_id = '000022'," +
        //                    //"head_count,0)) as Lunch from(select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days," +
        //                    //"es.ot_hrs, em.act_salary, es.head_type,es.head_id, ifnull(upper(sh.col3), 'Actual_OT') head_name, es.head_count,ifnull((CONVERT(sh.col41, UNSIGNED INTEGER)), '999') head_order " +
        //                    //"from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
        //                    //"sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
        //                    //"em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                    //"and es.client_unit_id in ('" + ut + "')  order by es.emp_code, es.head_id) a GROUP BY emp_code, external_empno, emp_name, f_name, month_name) TAB group by EMP_CODE";
        //                    //                    mq = @"select emp_code,max(external_empno) as external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name,
        //                    //max(month_days) as month_days,max(paid_days) paid_days ,sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(mtot) MTot,
        //                    //sum(act_salary) act_salary,sum(EBasic) EBasic,sum(EHRA) EHRA,sum(EConveyance) EConveyance,sum(Etot) Etot,sum(ot_hrs) ot_hrs,sum(OTAmount) OTAmount,
        //                    //sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF,SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance,(SUM(ETOT)-SUM(PF)-SUM(ESI)) AS NET_BOOK,(SUM(FTOT)-SUM(PF)-SUM(ESI)) AS Net_Actual,
        //                    //(SUM(FTOT)-SUM(PF)-SUM(ESI))-(SUM(ETOT)-SUM(PF)-SUM(ESI))  AS Cash,sum(bal_adv) bal_adv,sum(bal_adv)-sum(Advance) as Rest_Adv  FROM
        //                    //(select en.col1 as emp_code, '-' as external_empno, '-' as emp_name, '-' as f_name, '-' as month_name, '0' as month_days, '0' as paid_days, 
        //                    //sum(case when col4 = '000001' then col10 else '0' END ) as MBasic,sum(case when  col4 = '000002' then col10 else '0' END ) as MHRA,sum(case when col4 = '000006' then col10 else '0' END ) as MConveyance,sum(col10) as MTot,
        //                    //'0' as act_salary,'0' as EBasic,'0' as EHRA,'0' as EConveyance,'0' as Etot,'0' as ot_hrs,'0' as OTAmount,'0' as FBasic,'0' Ftot,'0' PF,'0' as ESI,
        //                    //'0' LWF,'0' as Advance,'0' as Lunch,'0' bal_adv from enx_tab en where en.type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in ('000001', '000002', '000006') " +
        //                    //"group by col1 " +
        //                    //"union  all " +
        //                    //"SELECT emp_code,external_empno,emp_name,f_name,month_name,month_days,paid_days,0 as Mbasic,0 mhra,0 as mconvey ,0 as mtot,act_salary ,'0' as EBasic," +
        //                    //"'0' as EHRA ,'0' as EConveyance,'0' as Etot,'0' as ot_hrs,'0' as OTAmount,'0' as FBasic,'0' Ftot ,0 PF,0 as ESI ,0 LWF,0 as Advance " +
        //                    //",0 as Lunch,'0' bal_adv  from(select es.bal_adv, em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days, es.ot_hrs, " +
        //                    //"em.act_salary, es.head_type,es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count, nvl((to_number(sh.col41)), '999') " +
        //                    //"head_order from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
        //                    //"sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
        //                    //"em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and " +
        //                    //"es.client_unit_id in ('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') order by es.emp_code, es.head_id) a group by " +
        //                    //"emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days, ot_hrs, act_salary,,bal_adv " +
        //                    //"union all " +
        //                    //"SELECT emp_code, external_empno, emp_name, f_name, month_name,'0' as month_days,'0' paid_days,0 as Mbasic,0 mhra,0 as mconvey ,0 as mtot,'0' act_salary ,'0' as ebasic,'0' as ehra ,'0' as econey,'0' as etot ,'0' ot_hrs,'0' as otamount ,'0' as fbasic,'0' as ftot," +
        //                    //"sum(case when head_id='000011' then head_count else '0' END ) as EPF, sum(case when head_id='000014' then head_count else '0' END ) as ESI" +
        //                    //",sum(case when head_id='000017' then head_count else '0' END ) as LWF,sum(case when head_id='000021' then head_count else '0' END ) as ADV," +
        //                    //"sum(case when head_id='000022' then head_count else '0' END ) as Lunch,'0' bal_adv from from(select em.vch_num as emp_code, em.external_empno," +
        //                    //" es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days," +
        //                    //"es.ot_hrs, em.act_salary, es.head_type,es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count,nvl((to_number(sh.col41)), '999') head_order " +
        //                    //"from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
        //                    //"sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
        //                    //"em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                    //"and es.client_unit_id in ('" + ut + "')  order by es.emp_code, es.head_id) a GROUP BY emp_code, external_empno, emp_name, f_name, month_name) TAB group by EMP_CODE";
        //                    //mq = "select emp_code,max(external_empno) as external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name," +
        //                    //    "max(month_days) as month_days,max(paid_days) paid_days ,sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(mtot) MTot," +
        //                    //    "sum(act_salary) act_salary,sum(EBasic) EBasic,sum(EHRA) EHRA,sum(EConveyance) EConveyance,sum(Etot) Etot,sum(ot_hrs) ot_hrs" +
        //                    //    ",sum(OTAmount) OTAmount,sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF,SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance," +
        //                    //    "(SUM(ETOT) - SUM(PF) - SUM(ESI)) AS NET_BOOK,(SUM(FTOT) - SUM(PF) - SUM(ESI)) AS Net_Actual," +
        //                    //    "(SUM(FTOT) - SUM(PF) - SUM(ESI))-(SUM(ETOT) - SUM(PF) - SUM(ESI))  AS Cash, sum(bal_adv) bal_adv,sum(bal_adv) - sum(Advance)" +
        //                    //    " as Rest_Adv  FROM   ( select en.col1 as emp_code, '-' as external_empno, '-' as emp_name, '-' as f_name, '-' as month_name, " +
        //                    //    "'0' as month_days, '0' as paid_days, sum(case when col4 = '000001' then col10 else '0' END) as MBasic, sum(case when  col4 = '000002' " +
        //                    //    "then col10 else '0' END) as MHRA, sum(case when col4 = '000006' then col10 else '0' END) as MConveyance, sum(col10) as MTot," +
        //                    //    " '0' as act_salary, '0' as EBasic, '0' as EHRA, '0' as EConveyance , '0' as Etot, '0' as ot_hrs, '0' as OTAmount, '0' as FBasic, " +
        //                    //    "'0' Ftot, 0 PF, 0 as ESI, 0 LWF, 0 as Advance, 0 as Lunch, '0' bal_adv   from enx_tab en where en.type = 'KES'" +
        //                    //    " and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in ('000001', '000002', '000006') group by col1 " +
        //                    //    "union  all" +
        //                    //    " SELECT emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days, 0 as Mbasic, 0 mhra, 0 as mconvey , 0 as mtot," +
        //                    //    " act_salary, '0' as EBasic, '0' as EHRA, '0' as EConveyance, '0' as Etot, '0' as ot_hrs, '0' as OTAmount  , '0' as FBasic, " +
        //                    //    "'0' Ftot, 0 PF, 0 as ESI, 0 LWF, 0 as Advance, 0 as Lunch, '0' bal_adv from  ( select es.bal_adv, em.vch_num as emp_code," +
        //                    //    " em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days, es.ot_hrs, em.act_salary, es.head_type," +
        //                    //    " es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count, nvl((to_number(sh.col41)), '999') head_order from" +
        //                    //    " emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "'" +
        //                    //    " and sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and" +
        //                    //    " em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP'" +
        //                    //    " and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') " +
        //                    //    "order by es.emp_code, es.head_id ) a group by emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days," +
        //                    //    " ot_hrs, act_salary, bal_adv" +
        //                    //    " union all" +
        //                    //    " SELECT emp_code, external_empno, emp_name, f_name, month_name, '0' as month_days, '0' paid_days, 0 as Mbasic, 0 mhra, 0 as mconvey" +
        //                    //    ", 0 as mtot, '0' act_salary, '0' as ebasic, '0' as ehra, '0' as econey, '0' as etot, '0' ot_hrs, '0' as otamount , '0' as fbasic, " +
        //                    //    "'0' as ftot, sum(case when head_id = '000011' then head_count else '0' END) as EPF, sum(case when head_id = '000014' " +
        //                    //    "then head_count else '0' END) as ESI , sum(case when head_id = '000017' then head_count else '0' END) as LWF, sum(case when head_id" +
        //                    //    " = '000021' then head_count else '0' END) as ADV , sum(case when head_id = '000022' then head_count else '0' END) as Lunch, '0' bal_adv" +
        //                    //    " from  (select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days," +
        //                    //    " es.ot_hrs, em.act_salary, es.head_type, es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count," +
        //                    //    " nvl((to_number(sh.col41)), '999') head_order from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num " +
        //                    //    "and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code" +
        //                    //    " and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and" +
        //                    //    " es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')  order by es.emp_code," +
        //                    //    " es.head_id ) a GROUP BY emp_code, external_empno, emp_name, f_name, month_name ) TAB group by EMP_CODE";
        //                    //mq = "select emp_code,max(external_empno) as external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name,max(month_days) as month_days,max(paid_days) " +
        //                    //    "paid_days ,sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(mtot) MTot,sum(act_salary) act_salary,sum(EBasic) EBasic,sum(EHRA) EHRA,sum(EConveyance) " +
        //                    //    "EConveyance,sum(Etot) Etot,sum(ot_hrs) ot_hrs,sum(OTAmount) OTAmount,sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF,SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance," +
        //                    //    "(SUM(ETOT) - SUM(PF) - SUM(ESI)) AS NET_BOOK,(SUM(FTOT) - SUM(PF) - SUM(ESI)) AS Net_Actual,(SUM(FTOT) - SUM(PF) - SUM(ESI))-(SUM(ETOT) - SUM(PF) - SUM(ESI))  AS Cash, " +
        //                    //    "sum(bal_adv) bal_adv,sum(bal_adv) - sum(Advance) as Rest_Adv  FROM ( select en.col1 as emp_code, '-' as external_empno, null as emp_name, '-' as f_name, '-' as month_name, " +
        //                    //    "'0' as month_days, '0' as paid_days, sum(case when col4 = '000001' then to_number(col10) else 0 END) as MBasic, sum(case when  col4 = '000002' then to_number(col10) else 0 END) " +
        //                    //    "as MHRA, sum(case when col4 = '000006' then to_number(col10) else 0 END) as MConveyance, sum(col10) as MTot, 0 as act_salary, 0 as EBasic, 0 as EHRA, 0 as EConveyance" +
        //                    //    " , 0 as Etot, 0 as ot_hrs, 0 as OTAmount, 0 as FBasic, 0 Ftot, 0 PF, 0 as ESI, 0 LWF, 0 as Advance, 0 as Lunch, 0 bal_adv   from enx_tab en where en.type = 'KES'" +
        //                    //    " and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in ('000001', '000002', '000006') group by col1 " +
        //                    //    "union  all SELECT emp_code,external_empno,emp_name,f_name,month_name,month_days,paid_days,0 as Mbasic,0 mhra,0 as mconvey,0 as mtot,to_number(act_salary)," +
        //                    //    "sum((case when  head_id = '000001' then to_number(head_count) else 0 end)) as Basic,sum((case when  head_id = '000002' then to_number(head_count) else 0 end)) as HRA" +
        //                    //    ",sum((case when head_id = '000006' then to_number(head_count) else 0 end )) as Conveyance,sum((case when  head_id not in ('777776', '777777') then " +
        //                    //    "to_number(head_count) else 0 end )) as Etot,to_number(ot_hrs),sum((case when head_id = '777776' then to_number(head_count) else 0 end)) as OT," +
        //                    //    "sum((case when  head_id = '777777' then to_number(head_count) else 0 end )) as FBasic,sum((case when head_id  in ('777776', '777777') then to_number(head_count) else 0 end))" +
        //                    //    " as Ftot,0 as pf,0 as esi,0 as lwf,0 as adv,0 as Lunch , to_number( bal_adv) as bal_adv from  ( select es.bal_adv, em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, " +
        //                    //    "es.month_name, es.month_days, es.paid_days, es.ot_hrs, em.act_salary, es.head_type, es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count, " +
        //                    //    "nvl((to_number(sh.col41)), '999') head_order from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' " +
        //                    //    "and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' " +
        //                    //    "and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and " +
        //                    //    "es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') order by es.emp_code, es.head_id )" +
        //                    //    " a group by emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days,ot_hrs, act_salary, bal_adv union all SELECT emp_code, external_empno, " +
        //                    //    "null as emp_name, f_name, month_name, '0' as month_days, '0' paid_days, 0 as Mbasic, 0 mhra, 0 as mconvey, 0 as mtot, 0 act_salary," +
        //                    //    "0 as ebasic, 0 as ehra, 0 as econey, 0 as etot, 0 ot_hrs, 0 as otamount , 0 as fbasic, 0 as ftot, sum(case when head_id = '000011' then to_number(head_count) else 0 END)" +
        //                    //    " as EPF,sum(case when head_id = '000014' then to_number(head_count) else 0 END) as ESI , sum(case when head_id = '000017' then to_number(head_count) else 0 END) as LWF," +
        //                    //    "sum(case when head_id = '000021' then to_number(head_count) else 0 END) as ADV , sum(case when head_id = '000022' then to_number(head_count) else 0 END) as Lunch," +
        //                    //    " 0 bal_adv from (select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days, es.ot_hrs, em.act_salary," +
        //                    //    " es.head_type, es.head_id, nvl(upper(sh.col3),'Actual_OT') head_name, es.head_count, nvl((to_number(sh.col41)), '999') head_order from emp_salary_process es " +
        //                    //    "left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                    //    "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //                    //    "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')" +
        //                    //    "  order by es.emp_code, es.head_id ) a GROUP BY emp_code,external_empno, emp_name, f_name, month_name ) TAB group by EMP_CODE";
        //                    mq = "select emp_code,max(external_empno) external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name,max(month_days) as month_days," +
        //                            "max(paid_days) paid_days, sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(DMEd) DMEd" +
        //                            ",sum(DCanten) DCanten,sum(DPT) DPT,sum(DOth) DOth,sum(mtot) MTot,sum(act_salary) act_salary,sum(EBasic) EBasic," +
        //                            "sum(EHRA) EHRA,sum(EConveyance) EConveyance,sum(Etot) Etot,max(ot_hrs) ot_hrs,sum(OTAmount) OTAmount,sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF," +
        //                            "SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance,(SUM(ETOT) - SUM(PF) - SUM(ESI)-sum(DMEd) -sum(DCanten)-sum(DPT) -sum(DOth)) AS Net_Book," +
        //                            "(SUM(FTOT) - SUM(PF) - SUM(ESI)-sum(DMEd) -sum(DCanten)-sum(DPT)) AS Net_Actual," +
        //                            "(SUM(FTOT) - SUM(PF) - SUM(ESI))-(SUM(ETOT) - SUM(PF) - SUM(ESI)-sum(DMEd) -sum(DCanten)-sum(DPT) -sum(DOth)) AS Cash,max(bal_adv) bal_adv,max(bal_adv) - sum(Advance) as Rest_Adv FROM " +
        //                            "(SELECT emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days,sum((case when  head_id = '000001' then to_number(mrate) else 0 end)) Mbasic," +
        //                            "sum((case when head_id = '000002' then to_number(mrate) else 0 end)) mhra,sum((case when  head_id = '000006' then to_number(mrate) else 0 end)) as MConveyance," +
        //                            "0 as mtot,sum((case when  head_id = '777777' then to_number(mrate) else 0 end)) as act_salary,sum((case when  head_id = '000001' then to_number(head_count) else 0 end)) as eBasic," +
        //                            "sum((case when  head_id = '000002' then to_number(head_count) else 0 end)) as eHRA,sum((case when head_id = '000006' then to_number(head_count) else 0 end)) as eConveyance," +
        //                            "0 as DMEd,0 as DCanten," +
        //                            "0 as DPT,0 as DOth," +
        //                            "sum((case when  head_id not in ('777776', '777777') then to_number(head_count) else 0 end)) as Etot,to_number(ot_hrs) ot_hrs," +
        //                            "sum((case when head_id = '777776' then to_number(head_count) else 0 end)) as OTamount,sum((case when  head_id = '777777' then to_number(head_count) else 0 end)) as FBasic," +
        //                            "sum((case when head_id  in ('777776', '777777') then to_number(head_count) else 0 end)) as Ftot,0 as pf,0 as esi,0 as lwf,0 as advance,0 as Lunch,to_number(bal_adv) as bal_adv " +
        //                            "from (select  es.bal_adv, em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days,es.ot_hrs," +
        //                            "max((nvl(en.col10, '0'))) mrate, es.head_type, es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, sum((es.head_count)) as head_count," +
        //                            "nvl((to_number(sh.col41)), '999') head_order from emp_salary_process es " +
        //                            "left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                            "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " + cond_catjoin + " " +
        //                            "left  join (select a.* from enx_tab a inner join ( select distinct client_id, client_unit_id, emp_code as col1, inc_ver as vers " +
        //                            "from emp_salary_process where type = 'ESP' and currmmmyyyy = '" + curryyyymmm + "' and client_id = '" + cl + "' and client_unit_id = '" + ut + "') b on " +
        //                            "a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and nvl(a.ref_code, '0') = nvl(b.vers, '0') and a.type in " +
        //                            "('KES', 'AES')) en on en.col1 = em.vch_num and en.client_id = '" + cl + "' and en.client_unit_id = '" + ut + "' and en.col9 <> '4' and es.inc_ver = en.ref_code " +
        //                            "and es.head_id = en.col4 where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in " +
        //                            "('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') and es.currmmmyyyy = '" + curryyyymmm + "' group by es.bal_adv, em.vch_num," +
        //                            "em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days,es.ot_hrs, es.head_type,es.head_id, nvl(upper(sh.col3)," +
        //                            "'Actual_OT'),nvl((to_number(sh.col41)), '999') order by emp_code  ) a group by emp_code, external_empno, emp_name, f_name, month_name, month_days, " +
        //                            "paid_days, ot_hrs, mrate, bal_adv " +
        //                            "union all " +
        //                            "SELECT emp_code, external_empno, null as emp_name, f_name, month_name, '0' as month_days, '0' paid_days, 0 as Mbasic, 0 mhra, 0 as mconvey, 0 as mtot," +
        //                            "0 act_salary,0 as ebasic, 0 as ehra, 0 as econey,sum(case when head_id = '000026' then to_number(head_count) else 0 END)  as dmed" +
        //                            ",sum((case when head_id = '000024' then to_number(head_count) else 0 end)) as dcanteen,sum((case when  head_id = '000016' then to_number(head_count) else 0 end)) as dpt ," +
        //                            "sum((case when head_id = '000025' then to_number(head_count) else 0 end)) as doth, 0 as etot, 0 ot_hrs, 0 as otamount , 0 as fbasic, 0 as ftot, " +
        //                            "sum(case when head_id = '000011' then to_number(head_count) else 0 END) as EPF,sum(case when head_id = '000014' then to_number(head_count) else 0 END) as ESI ," +
        //                            " sum(case when head_id = '000017' then to_number(head_count) else 0 END) as LWF,sum(case when head_id = '000021' then to_number(head_count) else 0 END) as ADV , " +
        //                            "sum(case when head_id = '000022' then to_number(head_count) else 0 END) as Lunch, 0 bal_adv from (select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name," +
        //                            "es.month_days, es.paid_days, es.ot_hrs, nvl(en.col10, '0') act_salary, es.head_type, es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count, " +
        //                            "nvl((to_number(sh.col41)), '999') head_order from emp_salary_process es " +
        //                            "left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                            "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " + cond_catjoin + " " +
        //                            "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id, col1, max(ref_code) as vers from enx_tab where type = 'AES' " +
        //                            "group by client_id, client_unit_id, col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and " +
        //                            "a.ref_code = b.vers) en on en.col1 = em.vch_num and en.col4 = '777777' and en.type = 'AES' and en.client_id = '" + cl + "' and en.client_unit_id = '" + ut + "' " +
        //                            "and en.col9 <> '4' where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') " +
        //                            "order by es.emp_code, es.head_id ) a GROUP BY emp_code, external_empno, emp_name, f_name, month_name ) TAB group by EMP_CODE";
        //                    dtm = sgen.getdata(userCode, mq);
        //                    sgen.open_report_bydt_xml(userCode, dtm, "act_monthly_salary", "Actual Monthly Salary");
        //                }
        //                if (command == "Monthly Salary (Dept/Desig)")
        //                {
        //                    /////////////////////=======================
        //                    #region dt earn                 
        //                    mq = "select em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern," +
        //                        "es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
        //                        "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                        "inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
        //                        "group by col1) en on en.col1 = es.emp_code " +
        //                        "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
        //                        "and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
        //                        "and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Earning' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                        "and es.client_unit_id in ('" + ut + "')";
        //                    DataTable dtern = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtern, MyGuid);
        //                    dtern = pv.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                    { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern" },
        //                    new string[] { "head_name", "head_order" }, "ERN_TOT");
        //                    #endregion
        //                    ////////////////////=======================
        //                    #region dt deduct                  
        //                    mq1 = "select em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern," +
        //                           "es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                           "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                           "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
        //                           "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                           "inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
        //                           "group by col1) en on en.col1 = es.emp_code " +
        //                           "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
        //                           "and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                           "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
        //                           "and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                           "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Deduction' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                           "and es.client_unit_id in ('" + ut + "')";
        //                    DataTable dtded = sgen.getdata(userCode, mq1);
        //                    Pivot pv1 = new Pivot(dtded, MyGuid);
        //                    dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                    { "emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" },
        //                    new string[] { "head_name" }, "DED_TOT");
        //                    #endregion
        //                    dtm = dtern.Copy();
        //                    foreach (DataColumn dc in dtded.Columns)
        //                    {
        //                        if (dc.Ordinal > 9) dtm.Columns.Add(dc.ColumnName);
        //                    }
        //                    string netname = "NETPAYABLE";
        //                    dtm.Columns.Add(netname);
        //                    for (int r = 0; r < dtded.Rows.Count; r++)
        //                    {
        //                        foreach (DataColumn dc in dtded.Columns)
        //                        {
        //                            if (dc.Ordinal > 9)
        //                            {
        //                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
        //                            }
        //                        }
        //                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
        //                    }
        //                    var dtf = dtm;
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        string nn = "Col" + (c + 1);
        //                        dtcols.Columns.Add(nn);
        //                    }
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    bool netadded = false;
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtm.Columns[c + 10].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded)
        //                                {
        //                                    throw new Exception();
        //                                }
        //                                dtcols.Rows[0][c] = dtm.Columns[c + 10].ColumnName.ToString();
        //                                dtm.Columns[c + 10].ColumnName = "VCol" + (c + 1);
        //                            }
        //                            else
        //                            {
        //                                string nn = "VCol" + (c + 1);
        //                                dtm.Columns.Add(nn);
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            string nn = "VCol" + (c + 1);
        //                            dtm.Columns.Add(nn);
        //                            dtcols.Rows[0][c] = "-";
        //                        }
        //                    }
        //                    dtm.Columns[netname].SetOrdinal(56);
        //                    dtm.TableName = "prepcur";
        //                    dst.Tables.Add(dtm);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    dst.Tables.Add();
        //                    sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_salary_dept", "Monthly Salary (Dept/Desig)");
        //                }
        //                if (command == "Monthly Salary (Dept/Desig) New")
        //                {
        //                    /////////////////////=======================
        //                    #region dt earn                 
        //                    string cond = "";
        //                    cond = curryyyymmm;
        //                    mq = "select to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig" +
        //                      ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
        //                      "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                      "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type='KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                      "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_status='Y' and " +
        //                      "to_char(em.ex_dt,'YYYY')='1900' " +
        //                      "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                      "inner join (select col1, SUM(col10) as gm_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,trim(ref_code)) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
        //                      "inner join (select col1, sum(col10) as basic_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000001' group by col1,trim(ref_code)) bs on bs.col1 = es.emp_code and bs.ref_code=es.inc_ver " +
        //                      "inner join (select col1, sum(col10) as hra_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000002' group by col1,trim(ref_code)) hs on hs.col1 = es.emp_code and hs.ref_code=es.inc_ver " +
        //                      "inner join (select col1, col10 as cony_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000006' group by col1,trim(ref_code)) cs on cs.col1 = es.emp_code and cs.ref_code=es.inc_ver " +
        //                      "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                      "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                      "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id<>'000019' ";
        //                    mq = "select to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig" +
        //                     ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
        //                     "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                     "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type='KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                     "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " + cond_catjoin + cond_dpjoin + "" + cond_dgjoin + "" +
        //                     "inner join (select col1, SUM(col10) as gm_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,trim(ref_code)) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
        //                     "inner join (select col1, sum(col10) as basic_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000001' group by col1,trim(ref_code)) bs on bs.col1 = es.emp_code and bs.ref_code=es.inc_ver " +
        //                     "inner join (select col1, sum(col10) as hra_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000002' group by col1,trim(ref_code)) hs on hs.col1 = es.emp_code and hs.ref_code=es.inc_ver " +
        //                     "inner join (select col1, sum(col10) as cony_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000006' group by col1,trim(ref_code)) cs on cs.col1 = es.emp_code and cs.ref_code=es.inc_ver " +
        //                     "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                     "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                     "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id<>'000019'";
        //                    //                    mq = @"select to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr,
        //                    //em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days,
        //                    //to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(es.head_name) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from 
        //                    //emp_salary_process es INNER
        //                    //join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id
        //                    //inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and em.emp_status = 'Y' and to_char(em.ex_dt,'YYYY')= '1900'
        //                    //inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') group by col1) en on en.col1 = es.emp_code
        //                    //inner join(select col1, col10 as basic_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000001' ) bs on bs.col1 = es.emp_code
        //                    //inner join(select col1, col10 as hra_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000002' ) hs on hs.col1 = es.emp_code
        //                    //inner join(select col1, col10 as cony_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000006' ) cs on cs.col1 = es.emp_code
        //                    //LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP'
        //                    //LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG'
        //                    //where es.currmmmyyyy = '2019005' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '001' and es.client_unit_id in ('001008') and es.head_id <> '000019' ";
        //                    DataTable dtern = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtern, MyGuid);
        //                    try
        //                    {
        //                        dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
        //                        { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern","pf_no","pf_uan","esi_no","salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name", "head_order" }, "ERN_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    ////////////////////=======================
        //                    #region dt deduct                                    
        //                    mq1 = "select to_number(nvl(bs.basic_ern,'0')) as basic_ern,to_number(nvl(hs.hra_ern,'0')) as hra_ern,to_number(nvl(cs.cony_ern,'0')) as cony_ern, substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name ,'-') dept , nvl(mdg.master_name,'-') desig" +
        //                       ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
        //                          "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                          "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                          "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_status='Y' and to_char(em.ex_dt,'YYYY')='1900'" +
        //                          "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                          "INNER join (select col1,SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1) en on en.col1 = es.emp_code  " +
        //                          "INNER join (select col1, SUM(col10) as basic_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col1='000001' group by col1) bs on bs.col1 = es.emp_code  " +
        //                          "INNER join (select col1, SUM(col10) as hra_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col1='000002' group by col1) hs on hs.col1 = es.emp_code  " +
        //                          "INNER join (select col1, SUM(col10) as cony_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col1='000006' group by col1) cs on cs.col1 = es.emp_code " +
        //                         "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                         "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                          "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                          "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000022'";
        //                    mq1 = "select to_number(nvl(bs.basic_ern,'0')) as basic_ern,to_number(nvl(hs.hra_ern,'0')) as hra_ern,to_number(nvl(cs.cony_ern,'0')) as cony_ern, substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name ,'-') dept , nvl(mdg.master_name,'-') desig" +
        //                     ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
        //                        "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " + cond_catjoin + " " +
        //                        "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                        "inner join (select col1, SUM(col10) as gm_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,trim(ref_code)) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
        //                        "INNER join (select col1, SUM(col10) as basic_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000001' group by col1,trim(ref_code)) bs on bs.col1 = es.emp_code and bs.ref_code=es.inc_ver " +
        //                        "INNER join (select col1, SUM(col10) as hra_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000002' group by col1,trim(ref_code)) hs on hs.col1 = es.emp_code and hs.ref_code=es.inc_ver " +
        //                        "INNER join (select col1, SUM(col10) as cony_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000006' group by col1,trim(ref_code)) cs on cs.col1 = es.emp_code and cs.ref_code=es.inc_ver " +
        //                        "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP'  and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id<>'000022'";
        //                    DataTable dtded = sgen.getdata(userCode, mq1);
        //                    Pivot pv1 = new Pivot(dtded, MyGuid);
        //                    try
        //                    {
        //                        dtded = pv1.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
        //                        { "emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" ,"pf_no","pf_uan","esi_no" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name", "head_order" }, "DED_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    dtm = dtern.Copy();
        //                    foreach (DataColumn dc in dtded.Columns)
        //                    {
        //                        if (dc.Ordinal > 16) dtm.Columns.Add(dc.ColumnName);
        //                    }
        //                    string netname = "NETPAYABLE";
        //                    dtm.Columns.Add(netname);
        //                    for (int r = 0; r < dtded.Rows.Count; r++)
        //                    {
        //                        foreach (DataColumn dc in dtded.Columns)
        //                        {
        //                            if (dc.Ordinal > 16)
        //                            {
        //                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
        //                            }
        //                        }
        //                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
        //                    }
        //                    var dtf = dtm;
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        string nn = "Col" + (c + 1);
        //                        dtcols.Columns.Add(nn);
        //                    }
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    bool netadded = false;
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtm.Columns[c + 17].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded)
        //                                {
        //                                    throw new Exception();
        //                                }
        //                                dtcols.Rows[0][c] = dtm.Columns[c + 17].ColumnName.ToString();
        //                                dtm.Columns[c + 17].ColumnName = "VCol" + (c + 1);
        //                            }
        //                            else
        //                            {
        //                                string nn = "VCol" + (c + 1);
        //                                dtm.Columns.Add(nn, typeof(decimal));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            string nn = "VCol" + (c + 1);
        //                            dtm.Columns.Add(nn);
        //                            dtcols.Rows[0][c] = "-";
        //                        }
        //                    }
        //                    dtm.Columns[netname].SetOrdinal(56);
        //                    DataTable dtCloned = dtm.Clone();
        //                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
        //                    {
        //                        if (i > 16)
        //                        { dtCloned.Columns[i].DataType = typeof(decimal); }
        //                    }
        //                    foreach (DataRow row in dtm.Rows)
        //                    {
        //                        dtCloned.ImportRow(row);
        //                    }
        //                    //dtm.TableName = "prepcur";
        //                    dtCloned.TableName = "prepcur";
        //                    dst.Tables.Add(dtCloned);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    dst.Tables.Add();
        //                    sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_salary_dept_2", "Monthly Salary (Dept/Desig) New");
        //                } //done
        //                if (command == "Salary Statement" || command == "Salary Statement 2" || command == "Merged_Report")
        //                {
        //                    /////////////////////=======================
        //                    #region dt earn                 
        //                    string cond = "";
        //                    cond = curryyyymmm;
        //                    mq = "select   lv.EL,lv.CL,lv.SL,lv.PF,lv.ESI,es.client_unit_id,cp.unit_name,em.old_empcode,to_number(pdays) as pdays,to_number(wdays) as wdays,to_number(hdays) as hdays, to_number(bs.basic_ern) basic_ern," +
        //                        "to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern,to_number(bs.oth_ern) oth_ern,substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code," +
        //                        "em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig" +
        //                     ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,bs.gm_ern," +
        //                     "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                     "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type='KSP' and sh.client_id=es.client_id and sh.client_unit_id=es.client_unit_id and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                     "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " + cond_catjoin + cond_dpjoin + "" + cond_dgjoin + "" +
        //                     "inner join (select col1,sum( gm_ern) as gm_ern,ref_code,sum(basic_ern) as basic_ern,sum(hra_ern) hra_ern,sum(oth_ern) oth_ern,sum(cony_ern) cony_ern from (select col1,(case when col4='000001' then " +
        //                     " sum(col10) else 0 end) as basic_ern,(case when col4 = '000002' then  sum(col10) else 0 end) as hra_ern," +
        //                     " (case when col4 = '000005' then sum(col10) else 0 end) as oth_ern,(case when col4 = '000006' then sum(col10) else 0 end) as cony_ern,sum(col10) as  gm_ern, " +
        //                     "    trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "'" +
        //                     "    and client_unit_id in ('" + ut + "') group by col1,trim(ref_code),col4) a group by col1, ref_code) bs on bs.col1 = es.emp_code and bs.ref_code = es.inc_ver " +
        //                     "inner join (select client_id,client_unit_id,vch_num,vch_date,type,currmmmyyyy,emp_code,emp_name, to_number(max(CL)) as cl,to_number(max(EL)) EL,to_number(max(SL)) as SL  " +
        //                     ",to_number(sum(PF)) as PF,to_number(sum(ESI)) as ESI   from (select client_id, client_unit_id, vch_num, vch_date, type, currmmmyyyy, emp_code, emp_name, " +
        //                     "(case when head_flag = 'ELH'  and  head_id = '000001' then head_count else '0' end) CL," +
        //                     "(case when head_flag = 'ELH'  and head_id = '000002' then head_count else '0' end) EL," +
        //                     "(case when head_flag = 'ELH'  and  head_id = '000003' then head_count else '0' end) SL," +
        //                     "(case when head_flag = 'ESH'  and  head_id = '000011' then head_count else '0' end) PF," +
        //                     "(case when head_flag = 'ESH'  and  head_id = '000014' then head_count else '0' end) ESI" +
        //                     ",head_id from emp_salary_process) a group by client_id, client_unit_id, vch_num, vch_date, type, currmmmyyyy, emp_code, emp_name) lv on es.client_id = lv.client_id " +
        //                     "and es.client_unit_id = lv.client_unit_id and es.emp_code = lv.emp_code and es.currmmmyyyy = lv.currmmmyyyy " +
        //                     "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                     "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                     "inner join company_unit_profile cp on es.client_unit_id = cp.cup_id " +
        //                     "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                     "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000019' order by em.emp_code";
        //                    DataTable dtern = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtern, MyGuid);
        //                    try
        //                    {
        //                        dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
        //                        {"el","cl","sl","ESI","PF","client_unit_id","unit_name","old_empcode","pdays","wdays","hdays","oth_ern", "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern","pf_no","pf_uan","esi_no","salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name", "head_order" }, "ERN_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    DataView dv = dtern.DefaultView;
        //                    dv.Sort = "emp_code asc";
        //                    dtern = dv.ToTable();
        //                    ////////////////////=======================
        //                    #region dt deduct                                    
        //                    mq1 = "select 0 as el,0 as cl,0 as sl,0 as PF,0 as ESI,'-' client_unit_id,'-' unit_name,'-' old_empcode,0 as pdays,0 as wdays,0 as hdays,to_number(nvl(bs.basic_ern,'0')) as basic_ern,to_number(nvl(hs.hra_ern,'0')) as hra_ern" +
        //                        ",to_number(nvl(cs.cony_ern,'0')) as cony_ern,0 as oth_ern, substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name ,'-') dept , nvl(mdg.master_name,'-') desig" +
        //                     ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
        //                        "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id=es.client_id and sh.client_unit_id=es.client_unit_id and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " + cond_catjoin + " " +
        //                        "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                        "inner join (select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1) en on en.col1 = es.emp_code " +
        //                        "INNER join (select col1, SUM(col10) as basic_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000001' group by col1) bs on bs.col1 = es.emp_code " +
        //                        "INNER join (select col1, SUM(col10) as hra_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000002' group by col1) hs on hs.col1 = es.emp_code  " +
        //                        "INNER join (select col1, SUM(col10) as cony_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000006' group by col1) cs on cs.col1 = es.emp_code " +
        //                        "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP'  and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP'" +
        //                        " and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id<>'000022' order by em.emp_code";
        //                    DataTable dtded = sgen.getdata(userCode, mq1);
        //                    Pivot pv1 = new Pivot(dtded, MyGuid);
        //                    try
        //                    {
        //                        dtded = pv1.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
        //                        {"el","cl","sl","ESI","PF","client_unit_id","unit_name","old_empcode","pdays","wdays","hdays","oth_ern", "emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" ,"pf_no","pf_uan","esi_no" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name", "head_order" }, "DED_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    dv = dtded.DefaultView;
        //                    dv.Sort = "emp_code asc";
        //                    dtded = dv.ToTable();
        //                    dtm = dtern.Copy();
        //                    foreach (DataColumn dc in dtded.Columns)
        //                    {
        //                        if (dc.Ordinal > 28) dtm.Columns.Add(dc.ColumnName);
        //                    }
        //                    string netname = "NETPAYABLE";
        //                    dtm.Columns.Add(netname);
        //                    for (int r = 0; r < dtded.Rows.Count; r++)
        //                    {
        //                        foreach (DataColumn dc in dtded.Columns)
        //                        {
        //                            if (dc.Ordinal > 28)
        //                            {
        //                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
        //                            }
        //                        }
        //                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
        //                    }
        //                    var dtf = dtm;
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        string nn = "Col" + (c + 1);
        //                        dtcols.Columns.Add(nn);
        //                    }
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    bool netadded = false;
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtm.Columns[c + 29].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded)
        //                                {
        //                                    throw new Exception();
        //                                }
        //                                dtcols.Rows[0][c] = dtm.Columns[c + 29].ColumnName.ToString();
        //                                dtm.Columns[c + 29].ColumnName = "VCol" + (c + 1);
        //                            }
        //                            else
        //                            {
        //                                string nn = "VCol" + (c + 1);
        //                                dtm.Columns.Add(nn, typeof(decimal));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            string nn = "VCol" + (c + 1);
        //                            dtm.Columns.Add(nn);
        //                            dtcols.Rows[0][c] = "-";
        //                        }
        //                    }
        //                    dtm.Columns[netname].SetOrdinal(68);
        //                    DataTable dtCloned = dtm.Clone();
        //                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
        //                    {
        //                        if (i > 29)
        //                        { dtCloned.Columns[i].DataType = typeof(decimal); }
        //                    }
        //                    foreach (DataRow row in dtm.Rows)
        //                    {
        //                        dtCloned.ImportRow(row);
        //                    }
        //                    //dtm.TableName = "prepcur";
        //                    dtCloned.TableName = "prepcur";
        //                    dst.Tables.Add(dtCloned);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    dst.Tables.Add();
        //                    if (command == "Salary Statement 2") sgen.open_report_byDs_xml(userCode, dst, "emp_salary_stat_2", "emp_salary_stat_2");
        //                    else if (command == "Merged_Report") sgen.open_report_byDs_xml(userCode, dst, "emp_merged_salary", "emp_merged_salary");
        //                    else sgen.open_report_byDs_xml(userCode, dst, "emp_salary_stat", "emp_salary_stat");
        //                } //done
        //                if (command == "Contractor Salary Summary")
        //                {
        //                    mq = "select distinct a.col18 as acode,b.c_name,b.addr as address,b.pincode as Pincode,b.c_gstin as GSTIN,to_number(a.col12) as rrate,to_number(a.col13) as comm_per," +
        //                        "to_number(a.col14) as hrs_tot,to_number(a.col15) as bas_amt,to_number(a.col16) as commision,to_number(A.COL17) AS others,to_number(a.col19) as tot_payable,a.col10 as month_id ,a.col21 as month_name" +
        //                        ",col40 as curryyyymmm,SUBSTR(a.col40,1,4)  as yr " +
        //                        " from kc_tab a inner join clients_mst b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id " +
        //                        "and b.type = 'PVD' and a.col18 = b.vch_num where a.type = 'CES' and a.client_id='" + cl + "' and a.client_unit_id in ('" + ut + "')" +
        //                        " and trim(col40)='" + curryyyymmm + "' order by 3";
        //                    //mq = "select salary_yr,vd_name,name,f_name,emp_code,external_empno,month_name,max(ot_hrs) as ot_hrs,max(ot_mst) as ot_mst," +
        //                    //  "sum(ot) ot,sum(arr) arr,(sum(ot)+sum(arr)) totalot,max(esi_on_ot) esi_on_ot,((sum(ot)+sum(arr))-max(esi_on_ot)) netpay " +
        //                    //  "from (select trim(substr(sp.currmmmyyyy,0,4)) salary_yr,to_number(ot_mst) ot_mst,vd.c_name vd_name," +
        //                    //  "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Name," +
        //                    //  "trim(em.f_name) f_name,trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,to_number(sp.ot_hrs) as OT_hrs," +
        //                    //  "trim(sp.month_name) as month_name,(case when upper(trim(sp.head_name)) like 'ARR_%' then to_number(sp.head_count) else 0 end) Arr," +
        //                    //  "(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count) else 0 end) OT,to_number(a.esi_on_ot) esi_on_ot " +
        //                    //  "from emp_salary_process sp inner join emp_master em on sp.emp_code = em.vch_num and em.type='EMP' and " +
        //                    //  "em.client_id=sp.client_id and em.client_unit_id = sp.client_unit_id " +
        //                    //  "inner join clients_mst vd on vd.vch_num = em.contr and vd.type = 'PVD' and vd.client_id = em.client_id and " +
        //                    //  "vd.client_unit_id = em.client_unit_id inner join (select emp_code, head_count esi_on_ot from emp_salary_process " +
        //                    //  "where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and currmmmyyyy = '" + curryyyymmm + "' and " +
        //                    //  "head_flag = 'ESH' and head_id = '000022') a on sp.emp_code = a.emp_code inner join(select col1, sum(col10) as ot_mst " +
        //                    //  "from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in (select  col1 from " +
        //                    //  "enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) group by col1) ot on ot.col1 = sp.emp_code " +
        //                    //  "where sp.type = 'ESP' and sp.client_id = '" + cl + "' and sp.client_unit_id in ('" + ut + "') and sp.currmmmyyyy = '" + curryyyymmm + "' and " +
        //                    //  "sp.head_flag = 'ESH' and sp.head_id = '000019') group by salary_yr,vd_name,name,f_name,emp_code,external_empno," +
        //                    //  "month_name having max(ot_hrs) <> 0 order by vd_name";
        //                    DataTable dtot = sgen.getdata(userCode, mq);
        //                    dtot.TableName = "prepcur";
        //                    dst.Tables.Add(dtot);
        //                    sgen.open_report_byDs_xml(userCode, dst, "contsumm", "Contractor Monthly Summary");
        //                } //done
        //                if (command == "Monthly Salary Register")
        //                {
        //                    /////////////////////=======================                
        //                    #region dtleave                     
        //                    mq = @"select em.emp_code,em.external_empno,es.emp_name,mdp.master_name dept,mdg.master_name desig,em.f_name,es.month_name,
        //es.month_days,es.paid_days,en.gm_ern,es.head_type,es.head_id,upper(lv.col1) head_name,es.head_count from emp_salary_process es 
        //INNER join kc_tab lv on es.head_id = lv.vch_num and lv.type = 'KLV' and lv.client_id = '" + cl + "' " +
        //"inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //"inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
        //"group by col1) en on en.col1 = es.emp_code " +
        //"INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type='MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //"INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //"where es.month_id = '" + monthid + "' and es.head_flag = 'ELH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in " +
        //"('" + ut + "')";
        //                    DataTable dtl = sgen.getdata(userCode, mq);
        //                    Pivot pvl = new Pivot(dtl, MyGuid);
        //                    dtl = pvl.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                    { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern" },
        //                    new string[] { "head_name" }, "LV_TOT");
        //                    #endregion
        //                    /////////////////////=======================
        //                    #region dt earn                 
        //                    mq = "select em.emp_code,em.external_empno,es.emp_name,mdp.master_name dept,mdg.master_name desig,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern," +
        //                        "es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count from emp_salary_process es " +
        //                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
        //                        "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                        "inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
        //                        "group by col1) en on en.col1 = es.emp_code " +
        //                        "INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Earning' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                        "and es.client_unit_id in ('" + ut + "') order by sh.col3 ASC";
        //                    DataTable dtern = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtern, MyGuid);
        //                    dtern = pv.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                    { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern" },
        //                    new string[] { "head_name" }, "ERN_TOT");
        //                    #endregion
        //                    ////////////////////=======================
        //                    #region dt deduct                  
        //                    mq1 = "select em.emp_code,em.external_empno,es.emp_name,mdp.master_name dept,mdg.master_name desig,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern," +
        //                           "es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count from emp_salary_process es " +
        //                           "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                           "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
        //                           "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                           "inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
        //                           "group by col1) en on en.col1 = es.emp_code " +
        //                           "INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                           "INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                           "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Deduction' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                           "and es.client_unit_id in ('" + ut + "') order by sh.col3 ASC";
        //                    DataTable dtded = sgen.getdata(userCode, mq1);
        //                    Pivot pv1 = new Pivot(dtded, MyGuid);
        //                    dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                    { "emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" },
        //                    new string[] { "head_name" }, "DED_TOT");
        //                    #endregion
        //                    ///////////////////========================
        //                    #region dt earn master                 
        //                    mq = @"select em.emp_code,em.external_empno,(replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME,'0','')||' '||replace(em.LAST_NAME,'0','')) emp_name,
        //mdp.master_name dept,mdg.master_name desig,em.f_name,'' month_name,'' month_days,'' paid_days,en.col2 gm_ern,en.col8 head_type,
        //en.col4,upper(sh.col3) head_name,en.col10 head_count from enx_tab en 
        //INNER join vehicle_master sh on en.col4 = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //"inner join emp_master em on em.vch_num = en.col1 and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //"INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //"INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG'  and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //"where en.type = 'KES' and en.client_id = '" + cl + "' and en.client_unit_id in ('" + ut + "') order by sh.col3 ASC";
        //                    DataTable dtem = sgen.getdata(userCode, mq);
        //                    Pivot pvem = new Pivot(dtem, MyGuid);
        //                    try
        //                    {
        //                        dtem = pvem.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                        { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern" },
        //                        new string[] { "head_name" }, "ERNM_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    string netname = "";
        //                    bool netadded = false;
        //                    #region lv
        //                    dtm = dtl.Copy();
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 10; c++)
        //                    {
        //                        dtcols.Columns.Add("LV" + (c + 1));
        //                    }
        //                    dtcols.Columns.Add("LVC_TOT");
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    netname = "LV_TOT";
        //                    netadded = false;
        //                    for (int c = 0; c < 10; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtl.Columns[c + 10].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded) { throw new Exception(); }
        //                                dtcols.Rows[0][c] = dtl.Columns[c + 10].ColumnName.ToString();
        //                                dtm.Columns[c + 10].ColumnName = "VLV" + (c + 1);
        //                            }
        //                            else
        //                            {
        //                                dtm.Columns.Add("VLV" + (c + 1));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            dtm.Columns.Add("VLV" + (c + 1));
        //                            dtcols.Rows[0][c] = "";
        //                        }
        //                    }
        //                    dtm.Columns[netname].SetOrdinal(20);
        //                    #endregion
        //                    #region earn
        //                    var dte = dtern;
        //                    for (int c = 1; c <= 10; c++)
        //                    {
        //                        dtcols.Columns.Add("ER" + c);
        //                    }
        //                    dtcols.Columns.Add("E_TOT");
        //                    netname = "ERN_TOT";
        //                    netadded = false;
        //                    for (int c = 0; c < 10; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dte.Columns[c + 10].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded) { throw new Exception(); }
        //                                dtcols.Rows[0][c + 11] = dte.Columns[c + 10].ColumnName.ToString();
        //                                dtm.Columns.Add("VER" + (c + 1));
        //                            }
        //                            else
        //                            {
        //                                dtm.Columns.Add("VER" + (c + 1));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            dtm.Columns.Add("VER" + (c + 1));
        //                            dtcols.Rows[0][c] = "";
        //                        }
        //                    }
        //                    dtm.Columns.Add(netname);
        //                    dtm.Columns[netname].SetOrdinal(31);
        //                    #endregion
        //                    #region ded
        //                    var dtd = dtded;
        //                    for (int c = 1; c <= 10; c++)
        //                    {
        //                        dtcols.Columns.Add("DED" + c);
        //                    }
        //                    dtcols.Columns.Add("D_TOT");
        //                    netname = "DED_TOT";
        //                    netadded = false;
        //                    for (int c = 0; c < 10; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtd.Columns[c + 10].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded) { throw new Exception(); }
        //                                dtcols.Rows[0][c + 22] = dtd.Columns[c + 10].ColumnName.ToString();
        //                                dtm.Columns.Add("VDED" + (c + 1));
        //                            }
        //                            else
        //                            {
        //                                dtm.Columns.Add("VDED" + (c + 1));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            dtm.Columns.Add("VDED" + (c + 1));
        //                            dtcols.Rows[0][c] = "";
        //                        }
        //                    }
        //                    dtm.Columns.Add(netname);
        //                    dtm.Columns[netname].SetOrdinal(42);
        //                    #endregion
        //                    #region ern_master
        //                    var dteme = dtem;
        //                    for (int c = 1; c <= 10; c++)
        //                    {
        //                        dtcols.Columns.Add("EM" + c);
        //                    }
        //                    dtcols.Columns.Add("EM_TOT");
        //                    netname = "ERNM_TOT";
        //                    netadded = false;
        //                    for (int c = 0; c < 10; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dteme.Columns[c + 10].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded) { throw new Exception(); }
        //                                dtcols.Rows[0][c + 33] = dteme.Columns[c + 10].ColumnName.ToString();
        //                                dtm.Columns.Add("VEM" + (c + 1));
        //                            }
        //                            else
        //                            {
        //                                dtm.Columns.Add("VEM" + (c + 1));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            dtm.Columns.Add("VEM" + (c + 1));
        //                            dtcols.Rows[0][c] = "";
        //                        }
        //                    }
        //                    dtm.Columns.Add(netname);
        //                    dtm.Columns[netname].SetOrdinal(53);
        //                    #endregion
        //                    dtm.Columns.Add("NET_PAY");
        //                    dtm.Columns["NET_PAY"].SetOrdinal(54);
        //                    for (int m = 0; m < dtm.Rows.Count; m++)
        //                    {
        //                        for (int e = 10; e < dtern.Columns.Count; e++)
        //                        {
        //                            if (!dtern.Columns[e].ColumnName.Equals("ERN_TOT"))
        //                            {
        //                                dtm.Rows[m][e + 11] = dtern.Rows[m][e].ToString();
        //                            }
        //                            else
        //                            {
        //                                dtm.Rows[m]["ERN_TOT"] = dtern.Rows[m][e].ToString();
        //                            }
        //                        }
        //                        for (int e = 10; e < dtded.Columns.Count; e++)
        //                        {
        //                            if (!dtded.Columns[e].ColumnName.Equals("DED_TOT"))
        //                            {
        //                                dtm.Rows[m][e + 22] = dtded.Rows[m][e].ToString();
        //                            }
        //                            else
        //                            {
        //                                dtm.Rows[m]["DED_TOT"] = dtded.Rows[m][e].ToString();
        //                            }
        //                        }
        //                        for (int e = 10; e < dteme.Columns.Count; e++)
        //                        {
        //                            if (!dteme.Columns[e].ColumnName.Equals("ERNM_TOT"))
        //                            {
        //                                dtm.Rows[m][e + 33] = dteme.Rows[m][e].ToString();
        //                            }
        //                            else
        //                            {
        //                                dtm.Rows[m]["ERNM_TOT"] = dteme.Rows[m][e].ToString();
        //                            }
        //                        }
        //                        dtm.Rows[m]["NET_PAY"] = sgen.Make_decimal(dtm.Rows[m]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtm.Rows[m]["DED_TOT"].ToString());
        //                    }
        //                    dtm.AcceptChanges();
        //                    dtm.TableName = "prepcur";
        //                    dst.Tables.Add(dtm);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    sgen.open_report_byDs_xml(userCode, dst, "monthlysal_2", "Monthly Salary Register");
        //                }
        //                if (command == "Yearly Salary")
        //                {
        //                    #region dt
        //                    //                    mq = @"select em.emp_code,em.external_empno,trim(concat(replace(em.FIRST_NAME, '0', ''), ' ', replace(em.MIDDLE_NAME, '0', ''), ' ', 
        //                    //replace(em.LAST_NAME, '0', ''))) emp_name,to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
        //                    //"mdp.master_name dept, mdg.master_name desig,em.f_name,es.month_id,upper(es.head_type) head_type,es.head_id,trim(upper(sh.col3)) head_name," +
        //                    //"round(cast(es.head_count as decimal(10,2))) head_count,sum(if(es.head_id='999999',es.head_count,0))NetPay from emp_salary_process es " +
        //                    //"INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                    //"inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //                    //"INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' " +
        //                    //"INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' " +
        //                    //"where es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') " +
        //                    //"GROUP BY em.emp_code,em.external_empno,concat(replace(em.FIRST_NAME, '0', ''), ' ', replace(em.MIDDLE_NAME, '0', ''), ' ', replace(em.LAST_NAME, '0', ''))," +
        //                    //"to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "'),mdp.master_name,mdg.master_name,em.f_name,es.month_id," +
        //                    //"es.month_days,es.paid_days,es.head_type,es.head_id,upper(sh.col3),es.head_count";
        //                    mq = @"select em.emp_code,em.external_empno,trim((replace(em.FIRST_NAME, '0', '')|| ' '|| replace(em.MIDDLE_NAME, '0', '')|| ' '|| 
        //replace(em.LAST_NAME, '0', ''))) emp_name,to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
        //"mdp.master_name dept, mdg.master_name desig,em.f_name,es.month_id,upper(es.head_type) head_type,es.head_id,trim(upper(sh.col3)) head_name," +
        //"round(cast(es.head_count as decimal(10,2))) head_count,sum(case when es.head_id='999999' then es.head_count else '0'end ) NetPay from emp_salary_process es " +
        //"INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //"inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //"INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //"INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type='MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
        //"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //"where es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') " +
        //"GROUP BY em.emp_code,em.external_empno,trim((replace(em.FIRST_NAME, '0', '')|| ' '|| replace(em.MIDDLE_NAME, '0', '')|| ' '|| " +
        //"replace(em.LAST_NAME, '0', ''))),to_char(convert_tz(st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),mdp.master_name, mdg.master_name,em.f_name" +
        //",es.month_id,es.head_type,es.head_id,trim(upper(sh.col3)),head_count";
        //                    dtm = sgen.getdata(userCode, mq);
        //                    if (dtm.Rows.Count > 0)
        //                    {
        //                        Pivot pvl = new Pivot(dtm, MyGuid);
        //                        dtm = pvl.PivotData("head_count", AggregateFunction.Sum, new string[]
        //                        { "emp_code","external_empno","emp_name","doj","dept","desig","f_name","head_type","head_name","NetPay" },
        //                        new string[] { "month_id" });
        //                    }
        //                    #endregion
        //                    DataTable dthnew, dtheads = sgen.getdata(userCode, "select Master_id,upper(classid) as master_name,'-' as flag,'0' as mno from master_setting where type='MNT'");
        //                    int mid = 4;
        //                    dthnew = dtheads.Clone();
        //                    int months = 12;
        //                    for (int k = 0; k < months; k++)
        //                    {
        //                        int cid = k + mid;
        //                        if (cid > 12) { cid = cid - 12; }
        //                        foreach (DataRow drt in dtheads.Rows)
        //                        {
        //                            if (drt[0].ToString() == sgen.padlc(cid, 3, "0"))
        //                            {
        //                                DataRow drn = dthnew.NewRow();
        //                                drt["mno"] = k + 1;
        //                                drn.ItemArray = drt.ItemArray;
        //                                dthnew.Rows.Add(drn);
        //                            }
        //                        }
        //                    }
        //                    for (int c = 0; c < dthnew.Rows.Count; c++)
        //                    {
        //                        if (!dtm.Columns[c + 10].ColumnName.Equals(dthnew.Rows[c]["master_id"].ToString()))
        //                        {
        //                            DataColumn dataColumn = new DataColumn(dthnew.Rows[c]["master_id"].ToString(), typeof(decimal));
        //                            dtm.Columns.Add(dataColumn);
        //                            dataColumn.SetOrdinal(c + 10);
        //                        }
        //                    }
        //                    for (int c = 10; c < dtm.Columns.Count; c++)
        //                    {
        //                        dtm.Columns[c].ColumnName = "M" + (c - 9).ToString();
        //                    }
        //                    dtheads = new DataTable();
        //                    for (int c = 0; c < 12; c++)
        //                    {
        //                        dtheads.Columns.Add("col" + (c + 1));
        //                    }
        //                    DataRow drg = dtheads.NewRow();
        //                    drg[0] = "0";
        //                    dtheads.Rows.Add(drg);
        //                    for (int h = 0; h < dthnew.Rows.Count; h++)
        //                    {
        //                        dtheads.Rows[0][h] = dthnew.Rows[h]["master_name"].ToString();
        //                    }
        //                    dtheads.AcceptChanges();
        //                    dtheads.TableName = "heads";
        //                    dtm.TableName = "prepcur";
        //                    dst.Tables.Add(dtm);
        //                    dst.Tables.Add(dtheads);
        //                    sgen.open_report_byDs_xml(userCode, dst, "emp_yearly_salary", "Yearly Salary");
        //                }
        //                if (command == "Yearly Leaves")
        //                {
        //                    #region dtleaves
        //                    //                    mq = @"select em.emp_code,em.external_empno,trim(concat(replace(em.FIRST_NAME, '0', ''), ' ', replace(em.MIDDLE_NAME, '0', ''), ' ', 
        //                    //replace(em.LAST_NAME, '0', ''))) emp_name,mdp.master_name dept, mdg.master_name desig, em.f_name,es.month_id,es.month_days,
        //                    //es.paid_days,es.head_type,es.head_id,trim(upper(lv.col1)) head_name,es.head_count
        //                    //from emp_salary_process es
        //                    //INNER join kc_tab lv on es.head_id = lv.vch_num and lv.type = 'KLV' and lv.client_id = '001' and lv.client_unit_id in ('001001')
        //                    //inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '001' and em.client_unit_id in ('001001')
        //                    //INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP'
        //                    //INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG'
        //                    //where es.head_flag = 'ELH' and es.type = 'ESP' and es.client_id = '001' and es.client_unit_id in ('001001')
        //                    //GROUP BY em.emp_code,em.external_empno,concat(replace(em.FIRST_NAME, '0', ''), ' ', replace(em.MIDDLE_NAME, '0', ''), ' ', replace(em.LAST_NAME, '0', '')),
        //                    //mdp.master_name,mdg.master_name,em.f_name,es.month_id,es.month_days,es.paid_days,es.head_type,es.head_id,upper(lv.col1),es.head_count"; 
        //                    mq = "select emp.emp_code,emp.external_empno,trim((replace(emp.FIRST_NAME, '0', '')|| ' '|| replace(emp.MIDDLE_NAME, '0', '')|| ' '|| " +
        //                        "replace(emp.LAST_NAME, '0', ''))) emp_name,to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
        //                        "mdp.master_name dept, mdg.master_name desig,emp.f_name," +
        //                        "sp.head_name,sp.month_id,trim(sp.month_name) as mnth,sp.head_count consume, nvl(mn.head_count, 0) as earned," +
        //                        "nvl(ob.leave_count, 0) as opening,'0' as closing from emp_master emp " +
        //                        "left join emp_salary_process sp on sp.emp_code = emp.vch_num and sp.type = 'ESP' and sp.head_flag = 'ELH' and sp.client_id = '" + cl + "' and " +
        //                        "sp.client_unit_id in ('" + ut + "') " +
        //                        "left join(select kc.col1 as head_name ,kc.col2,kc.col3,kc.col4,kc.col8 as head_count,(TO_DATE(c.num, 'm')) mnth,c.num from kc_tab kc " +
        //                        "INNER join(select 1 as num from dual union select 2 as num from dual union select 3 as num from dual union select 4 as num from dual " +
        //                        "union select 5 as num from dual union select 6 as num from dual union select 7 as num from dual union select 8 as num from dual" +
        //                        " union select 9 as num from dual union select 10 as num from dual union select 11 as num from dual union select 12 as num from dual) c on " +
        //                        "c.num <= kc.col47 where kc.type = 'KLV' and kc.client_id = '" + cl + "' ) mn on sp.head_name = mn.head_name and " +
        //                        "sp.month_id = lpad(mn.num, 3, '0') " +
        //                        "left join(select emp.vch_num as emp_code, emp.first_name,ob.leave_count,ob.leave_type,'January' as mnth " +
        //                        "from emp_master emp left join leave_ob ob on ob.emp_code = emp.vch_num and ob.type = 'KLB' and ob.client_id = '" + cl + "' and ob.client_unit_id in " +
        //                        "('" + ut + "')) ob on ob.emp_code = emp.vch_num and ob.leave_type = sp.head_name and ob.mnth = sp.month_name " +
        //                        "INNER join master_setting mdp on emp.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "INNER join master_setting mdg on emp.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        " where emp.type = 'EMP' and emp.client_id = '" + cl + "' and emp.client_unit_id in ('" + ut + "') order by emp.vch_num,sp.head_name,sp.month_name";
        //                    dtm = sgen.getdata(userCode, mq);
        //                    if (dtm.Rows.Count > 0)
        //                    {
        //                        DataView dv = dtm.DefaultView;
        //                        var dtx = dv.ToTable(true, "emp_code");
        //                        foreach (DataRow dre in dtx.Rows)
        //                        {
        //                            var dth = dtm.Select("emp_code='" + dre[0].ToString() + "'").CopyToDataTable();
        //                            dv = dth.DefaultView;
        //                            dv.Sort = "head_name";
        //                            dth = dv.ToTable(true, "head_name");
        //                            foreach (DataRow drh in dth.Rows)
        //                            {
        //                                var dtmh = dtm.Select("emp_code='" + dre[0].ToString() + "' and head_name='" + drh[0].ToString() + "'").CopyToDataTable();
        //                                dv = dtmh.DefaultView;
        //                                dv.Sort = "month_id";
        //                                dtmh = dv.ToTable(true, "month_id");
        //                                double opening = 0, closing = 0;
        //                                opening = sgen.Make_double(dtm.Select("emp_code='" + dre[0].ToString() + "' and head_name='" + drh[0].ToString() + "'")[0]["opening"].ToString());
        //                                foreach (DataRow drmh in dtmh.Rows)
        //                                {
        //                                    var mrow = dtm.Select("emp_code='" + dre[0].ToString() + "' and head_name='" + drh[0].ToString() + "' and month_id='" + drmh[0].ToString() + "'");
        //                                    dtm.Rows[dtm.Rows.IndexOf(mrow[0])]["opening"] = opening;
        //                                    closing = opening + sgen.Make_double(mrow[0]["earned"].ToString()) - sgen.Make_double(mrow[0]["consume"].ToString());
        //                                    dtm.Rows[dtm.Rows.IndexOf(mrow[0])]["closing"] = closing;
        //                                    opening = closing;
        //                                }
        //                            }
        //                        }
        //                        dtm.Columns.Add("amt", typeof(string));
        //                        dtm.Columns.Add("rno", typeof(string));
        //                        dtm.Columns.Add("no", typeof(int));
        //                        var dtc = dtm.Clone();
        //                        foreach (DataRow drc in dtm.Rows)
        //                        {
        //                            DataRow dr1 = dtc.NewRow();
        //                            drc["amt"] = drc["consume"].ToString();
        //                            drc["rno"] = "Consumed";
        //                            drc["no"] = "3";
        //                            dr1.ItemArray = drc.ItemArray;
        //                            dtc.Rows.Add(dr1);
        //                            dr1 = dtc.NewRow();
        //                            drc["amt"] = drc["earned"].ToString();
        //                            drc["rno"] = "Earned";
        //                            drc["no"] = "2";
        //                            dr1.ItemArray = drc.ItemArray;
        //                            dtc.Rows.Add(dr1);
        //                            dr1 = dtc.NewRow();
        //                            drc["amt"] = drc["opening"].ToString();
        //                            drc["rno"] = "Opening";
        //                            drc["no"] = "1";
        //                            dr1.ItemArray = drc.ItemArray;
        //                            dtc.Rows.Add(dr1);
        //                            dr1 = dtc.NewRow();
        //                            drc["amt"] = drc["closing"].ToString();
        //                            drc["rno"] = "Closing";
        //                            drc["no"] = "4";
        //                            dr1.ItemArray = drc.ItemArray;
        //                            dtc.Rows.Add(dr1);
        //                        }
        //                        dtc.AcceptChanges();
        //                        Pivot pvl = new Pivot(dtc, MyGuid);
        //                        dtc = pvl.PivotData("amt", AggregateFunction.Sum, new string[]
        //                        { "emp_code","external_empno","emp_name","doj","dept","desig","f_name","head_name","rno","no" },
        //                        new string[] { "month_id" });
        //                        DataTable dthnew, dtheads = sgen.getdata(userCode, "select Master_id,upper(classid) as master_name,'-' as flag,'0' as mno from master_setting where type='MNT'");
        //                        int mid = 1;
        //                        dthnew = dtheads.Clone();
        //                        int months = 12;
        //                        for (int k = 0; k < months; k++)
        //                        {
        //                            int cid = k + mid;
        //                            if (cid > 12) { cid = cid - 12; }
        //                            foreach (DataRow drt in dtheads.Rows)
        //                            {
        //                                if (drt[0].ToString() == sgen.padlc(cid, 3, "0"))
        //                                {
        //                                    DataRow drn = dthnew.NewRow();
        //                                    drt["mno"] = k + 1;
        //                                    drn.ItemArray = drt.ItemArray;
        //                                    dthnew.Rows.Add(drn);
        //                                }
        //                            }
        //                        }
        //                        for (int c = 0; c < dthnew.Rows.Count; c++)
        //                        {
        //                            try
        //                            {
        //                                if (!dtc.Columns[c + 10].ColumnName.Equals(dthnew.Rows[c]["master_id"].ToString()))
        //                                {
        //                                    DataColumn dataColumn = new DataColumn(dthnew.Rows[c]["master_id"].ToString(), typeof(decimal));
        //                                    dtc.Columns.Add(dataColumn);
        //                                    dataColumn.SetOrdinal(c + 10);
        //                                }
        //                            }
        //                            catch (Exception err)
        //                            {
        //                                DataColumn dataColumn = new DataColumn(dthnew.Rows[c]["master_id"].ToString(), typeof(decimal));
        //                                dtc.Columns.Add(dataColumn);
        //                                dataColumn.SetOrdinal(c + 10);
        //                            }
        //                        }
        //                        for (int c = 10; c < dtc.Columns.Count; c++)
        //                        {
        //                            dtc.Columns[c].ColumnName = "M" + (c - 9).ToString();
        //                        }
        //                        dtheads = new DataTable();
        //                        for (int c = 0; c < 12; c++)
        //                        {
        //                            dtheads.Columns.Add("col" + (c + 1));
        //                        }
        //                        DataRow drg = dtheads.NewRow();
        //                        drg[0] = "0";
        //                        dtheads.Rows.Add(drg);
        //                        for (int h = 0; h < dthnew.Rows.Count; h++)
        //                        {
        //                            dtheads.Rows[0][h] = dthnew.Rows[h]["master_name"].ToString();
        //                        }
        //                        dtheads.AcceptChanges();
        //                        dtheads.TableName = "heads";
        //                        dtc.TableName = "prepcur";
        //                        dst.Tables.Add(dtc);
        //                        dst.Tables.Add(dtheads);
        //                    }
        //                    #endregion
        //                    sgen.open_report_byDs_xml(userCode, dst, "emp_yearly_leaves", "Yearly Leaves");
        //                }
        //                if (command == "Employee Leave")
        //                {
        //                    mq = "select  em.external_empno, es.emp_code,(em.FIRST_NAME|| ' '|| REPLACE(em.MIDDLE_NAME,'0','')|| ' '||REPLACE(em.LAST_NAME,'0','')) " +
        //                        "as Employee_Name,em.f_name ,es.head_id,lv.col1 head_name, es.head_count,es.month_id,es.month_name,es.currmmmyyyy from" +
        //                        " emp_salary_process es  inner join emp_master em on em.type = 'EMP' and em.vch_num = es.emp_code and es.client_id = em.client_id " +
        //                        "and es.client_unit_id = em.client_unit_id inner join kc_tab lv on es.head_id = lv.vch_num and lv.type = 'KLV'" +
        //                        " and es.client_id = lv.client_id  where es.type = 'ESP' and es.head_flag = 'ELH'" +
        //                        " and es.client_id = '" + cl + "' and es.client_unit_id  in(" + ut + ") and es.month_id='" + monthid + "'";
        //                    DataTable dtleave = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtleave, MyGuid);
        //                    dtleave = pv.PivotData("head_count", AggregateFunction.Sum, new string[]
        //                    { "emp_code","Employee_Name","f_name","month_name" },
        //                    new string[] { "head_name" });
        //                    dtm = dtleave.Copy();
        //                    //foreach (DataColumn dc in dtded.Columns)
        //                    //{
        //                    //    if (dc.Ordinal > 12) dtm.Columns.Add(dc.ColumnName);
        //                    //}
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 15; c++)
        //                    {
        //                        string nn = "Col" + (c + 1);
        //                        dtcols.Columns.Add(nn);
        //                    }
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    for (int c = 0; c < 15; c++)
        //                    {
        //                        try
        //                        {
        //                            dtcols.Rows[0][c] = dtm.Columns[c + 4].ColumnName.ToString();
        //                            dtm.Columns[c + 4].ColumnName = "VCol" + (c + 1);
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            string nn = "VCol" + (c + 1);
        //                            dtm.Columns.Add(nn);
        //                            dtcols.Rows[0][c] = "-";
        //                        }
        //                    }
        //                    DataTable dtCloned = dtm.Clone();
        //                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
        //                    {
        //                        if (i > 3)
        //                        { dtCloned.Columns[i].DataType = typeof(decimal); }
        //                    }
        //                    foreach (DataRow row in dtm.Rows)
        //                    {
        //                        dtCloned.ImportRow(row);
        //                    }
        //                    //dtm.TableName = "prepcur";
        //                    dtCloned.TableName = "prepcur";
        //                    dst.Tables.Add(dtCloned);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    dst.Tables.Add();
        //                    sgen.open_report_byDs_xml(userCode, dst, "emp_leave", "Employee Leave");
        //                }
        //                if (command == "Monthly Arrear Salary")
        //                {
        //                    /////////////////////=======================
        //                    #region dt earn                 
        //                    //string cond = "";
        //                    //cond = curryyyymmm;
        //                    //mq = "select lv.EL,lv.CL,lv.SL,to_number(pdays) as pdays,to_number(wdays) as wdays,to_number(hdays) as hdays, to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr," +
        //                    //    "em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name, '-') dept,nvl(mdg.master_name, '-') desig,em.f_name," +
        //                    //    "es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,(case when substr(upper(es.head_name),1,3)= 'ARR' then 'AR_'||upper(sh.col3) else upper(sh.col3) end) head_name," +
        //                    //    "to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                    //    "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id " +
        //                    //    "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
        //                    //    "inner join(select col1, SUM(col10) as gm_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,trim(ref_code)) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
        //                    //    "inner join(select col1, sum(col10) as basic_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000001' group by col1,trim(ref_code)) bs on bs.col1 = es.emp_code  and bs.ref_code=es.inc_ver " +
        //                    //    "inner join(select col1, sum(col10) as hra_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000002' group by col1,trim(ref_code)) hs on hs.col1 = es.emp_code  and hs.ref_code=es.inc_ver " +
        //                    //    "inner join(select col1, sum(col10) as cony_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000006' group by col1,trim(ref_code)) cs on cs.col1 = es.emp_code  and cs.ref_code=es.inc_ver " +
        //                    //    "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                    //    "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                    //    "inner join (select client_id,client_unit_id,vch_num,vch_date,type,currmmmyyyy,emp_code,emp_name, to_number(max(CL)) as cl,to_number(max(EL)) EL,to_number(max(SL)) as SL  from(select client_id, client_unit_id, vch_num, vch_date, type," +
        //                    //    " currmmmyyyy, emp_code, emp_name, (case when head_id = '000001' then head_count else '0' end) CL,(case when head_id = '000002' then head_count else '0' end) EL,(case when head_id = '000002' then head_count else '0' end) SL," +
        //                    //    "head_id from emp_salary_process where head_flag = 'ELH') a group by client_id, client_unit_id, vch_num, vch_date, type, currmmmyyyy, emp_code, emp_name) lv on es.client_id = lv.client_id " +
        //                    //    "and es.client_unit_id = lv.client_unit_id and es.emp_code = lv.emp_code and es.currmmmyyyy = lv.currmmmyyyy " +
        //                    //    "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type='ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id <> '000019' ";
        //                    //DataTable dtern = sgen.getdata(userCode, mq);
        //                    //Pivot pv = new Pivot(dtern);
        //                    //try
        //                    //{
        //                    //    dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
        //                    //    {"el","cl","sl","pdays","wdays","hdays", "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern","pf_no","pf_uan","esi_no","salary_yr","basic_ern","hra_ern","cony_ern" },
        //                    //    new string[] { "head_name", "head_order" }, "ERN_TOT");
        //                    //}
        //                    //catch (Exception ex) { }
        //                    #endregion
        //                    ////////////////////=======================
        //                    #region dt deduct                                    
        //                    //mq1 = "select 0 as el,0 as cl,0 as sl,0 as pdays,0 as wdays,0 as hdays, to_number(nvl(bs.basic_ern,'0')) as basic_ern,to_number(nvl(hs.hra_ern,'0')) as hra_ern,to_number(nvl(cs.cony_ern,'0')) as cony_ern, substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name ,'-') dept , nvl(mdg.master_name,'-') desig" +
        //                    //   ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
        //                    //      "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                    //      "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                    //       "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //                    //      "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                    //        "inner join(select col1, SUM(col10) as gm_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,trim(ref_code)) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
        //                    //    "inner join(select col1, sum(col10) as basic_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000001' group by col1,trim(ref_code)) bs on bs.col1 = es.emp_code  and bs.ref_code=es.inc_ver " +
        //                    //    "inner join(select col1, sum(col10) as hra_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000002' group by col1,trim(ref_code)) hs on hs.col1 = es.emp_code  and hs.ref_code=es.inc_ver " +
        //                    //    "inner join(select col1, sum(col10) as cony_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000006' group by col1,trim(ref_code)) cs on cs.col1 = es.emp_code  and cs.ref_code=es.inc_ver " +
        //                    //  "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                    //      "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                    //      "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                    //      "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000022'";
        //                    //DataTable dtded = sgen.getdata(userCode, mq1);
        //                    //Pivot pv1 = new Pivot(dtded);
        //                    //try
        //                    //{
        //                    //    dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                    //    { "el","cl","sl","pdays","wdays","hdays","emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" ,"pf_no","pf_uan","esi_no" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
        //                    //    new string[] { "head_name" }, "DED_TOT");
        //                    //}
        //                    //catch (Exception ex) { }
        //                    #endregion
        //                    //===================old
        //                    #region dt earn                 
        //                    string cond = "";
        //                    cond = curryyyymmm;
        //                    mq = "select to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr," +
        //                        "em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name, '-') dept,nvl(mdg.master_name, '-') desig,em.f_name," +
        //                        "es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,(case when substr(upper(es.head_name),1,3)= 'ARR' then 'AR_'||upper(sh.col3) else upper(sh.col3) end) head_name," +
        //                        "to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id " +
        //                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
        //                        "inner join(select col1, SUM(col10) as gm_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,trim(ref_code)) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
        //                        "inner join(select col1, sum(col10) as basic_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000001' group by col1,trim(ref_code)) bs on bs.col1 = es.emp_code  and bs.ref_code=es.inc_ver " +
        //                        "inner join(select col1, sum(col10) as hra_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000002' group by col1,trim(ref_code)) hs on hs.col1 = es.emp_code  and hs.ref_code=es.inc_ver " +
        //                        "inner join(select col1, sum(col10) as cony_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000006' group by col1,trim(ref_code)) cs on cs.col1 = es.emp_code  and cs.ref_code=es.inc_ver " +
        //                        "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                        "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type='ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id <> '000019' ";
        //                    DataTable dtern = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtern, MyGuid);
        //                    try
        //                    {
        //                        dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
        //                        { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern","pf_no","pf_uan","esi_no","salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name", "head_order" }, "ERN_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    ////////////////////=======================
        //                    #region dt deduct                                    
        //                    mq1 = "select to_number(nvl(bs.basic_ern,'0')) as basic_ern,to_number(nvl(hs.hra_ern,'0')) as hra_ern,to_number(nvl(cs.cony_ern,'0')) as cony_ern, substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name ,'-') dept , nvl(mdg.master_name,'-') desig" +
        //                       ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
        //                          "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                          "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                           "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //                          "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                            "inner join(select col1, SUM(col10) as gm_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,trim(ref_code)) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
        //                        "inner join(select col1, sum(col10) as basic_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000001' group by col1,trim(ref_code)) bs on bs.col1 = es.emp_code  and bs.ref_code=es.inc_ver " +
        //                        "inner join(select col1, sum(col10) as hra_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000002' group by col1,trim(ref_code)) hs on hs.col1 = es.emp_code  and hs.ref_code=es.inc_ver " +
        //                        "inner join(select col1, sum(col10) as cony_ern,trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000006' group by col1,trim(ref_code)) cs on cs.col1 = es.emp_code  and cs.ref_code=es.inc_ver " +
        //                      "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                          "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                          "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                          "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000022'";
        //                    DataTable dtded = sgen.getdata(userCode, mq1);
        //                    Pivot pv1 = new Pivot(dtded, MyGuid);
        //                    try
        //                    {
        //                        dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                        { "emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" ,"pf_no","pf_uan","esi_no" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name" }, "DED_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    dtm = dtern.Copy();
        //                    foreach (DataColumn dc in dtded.Columns)
        //                    {
        //                        if (dc.Ordinal > 16) dtm.Columns.Add(dc.ColumnName);
        //                    }
        //                    string netname = "NETPAYABLE";
        //                    dtm.Columns.Add(netname);
        //                    for (int r = 0; r < dtded.Rows.Count; r++)
        //                    {
        //                        foreach (DataColumn dc in dtded.Columns)
        //                        {
        //                            if (dc.Ordinal > 16)
        //                            {
        //                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
        //                            }
        //                        }
        //                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
        //                    }
        //                    var dtf = dtm;
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        string nn = "Col" + (c + 1);
        //                        dtcols.Columns.Add(nn);
        //                    }
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    bool netadded = false;
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtm.Columns[c + 17].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded)
        //                                {
        //                                    throw new Exception();
        //                                }
        //                                dtcols.Rows[0][c] = dtm.Columns[c + 17].ColumnName.ToString();
        //                                dtm.Columns[c + 17].ColumnName = "VCol" + (c + 1);
        //                            }
        //                            else
        //                            {
        //                                string nn = "VCol" + (c + 1);
        //                                dtm.Columns.Add(nn, typeof(decimal));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            string nn = "VCol" + (c + 1);
        //                            dtm.Columns.Add(nn);
        //                            dtcols.Rows[0][c] = "-";
        //                        }
        //                    }
        //                    dtm.Columns[netname].SetOrdinal(56);
        //                    DataTable dtCloned = dtm.Clone();
        //                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
        //                    {
        //                        if (i > 16)
        //                        { dtCloned.Columns[i].DataType = typeof(decimal); }
        //                    }
        //                    foreach (DataRow row in dtm.Rows)
        //                    {
        //                        dtCloned.ImportRow(row);
        //                    }
        //                    //dtm.TableName = "prepcur";
        //                    dtCloned.TableName = "prepcur";
        //                    dst.Tables.Add(dtCloned);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    dst.Tables.Add();
        //                    sgen.open_report_byDs_xml(userCode, dst, "monthly_arr_salary", "Monthly Arrear Salary");
        //                } //done
        //                if (command == "Company Wise Total Monthly Salary")
        //                {
        //                    /////////////////////=======================
        //                    #region dt earn                 
        //                    string cond = "";
        //                    cond = curryyyymmm;
        //                    //mq = "select count(distinct a.emp_code) emp_count,a.client_unit_id,c.unit_name,max(head_order)head_order,a.month_name," +
        //                    //    "a.month_days,a.head_type,a.head_id,a.head_name,sum(to_number(a.basic_ern)) basic_ern,sum(to_number(a.hra_ern) )hra_ern," +
        //                    //    "sum(to_number(a.cony_ern)) cony_ern,a.salary_yr,sum(to_number( a.paid_days/2) )paid_days,sum(a.gm_ern) gm_ern," +
        //                    //    "sum(to_number(nvl(a.head_count,'0'))) head_count from " +
        //                    //    "(select es.client_unit_id,to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern," +
        //                    //    "substr(es.currmmmyyyy, 0, 4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name,'-') dept," +
        //                    //    "nvl(mdg.master_name, '-') desig,em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id," +
        //                    //    "upper(sh.col3) head_name, to_number(es.head_count) head_count, (to_number(sh.col41)) head_order from emp_salary_process es " +
        //                    //    "inner join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id in ('" + cl + "') and sh.client_unit_id in ('" + ut + "') " +
        //                    //    "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id in ('" + cl + "') and em.client_unit_id in ('" + ut + "') " +
        //                    //    "inner join(select col1,SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id in ('" + cl + "') and client_unit_id in ('" + ut + "') group by col1) en on en.col1 = es.emp_code " +
        //                    //    "inner join(select col1,SUM(col10) as basic_ern from enx_tab where type = 'KES' and client_id in ('" + cl + "') and client_unit_id in ('" + ut + "') and col4 = '000001' group by col1) bs on bs.col1 = es.emp_code " +
        //                    //    "inner join(select col1,SUM(col10) as hra_ern from enx_tab where type = 'KES' and client_id in ('" + cl + "') and client_unit_id in ('" + ut + "') and col4 = '000002' group by col1) hs on hs.col1 = es.emp_code " +
        //                    //    "inner join(select col1,SUM(col10) as cony_ern from enx_tab where type = 'KES' and client_id in ('" + cl + "') and client_unit_id in ('" + ut + "') and col4 = '000006' group by col1) cs on cs.col1 = es.emp_code " +
        //                    //    "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, '" + ut + "') = 1 " +
        //                    //    "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id,'" + ut + "') = 1 " +
        //                    //    "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id in ('" + cl + "') and es.client_unit_id in ('" + ut + "') and es.head_id <> '000019') a " +
        //                    //    "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id in ('" + cl + "') group by a.client_unit_id, a.salary_yr, c.unit_name , a.month_name,a.month_days,a.head_type,a.head_id,a.head_name ";
        //                    mq = "select count(distinct a.emp_code) emp_count,a.client_unit_id,c.unit_name,max(head_order)head_order,a.month_name,a.month_days,a.head_type,a.head_id," +
        //                        "a.head_name,sum(to_number(a.basic_ern)) basic_ern,sum(to_number(a.hra_ern) )hra_ern,sum(to_number(a.cony_ern)) cony_ern,a.salary_yr," +
        //                        "sum(to_number(a.paid_days/2) )paid_days,sum(a.gm_ern) gm_ern,sum(to_number(nvl(a.head_count,'0'))) head_count from (select es.client_unit_id," +
        //                        "to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy, 0, 4) as salary_yr,em.pf_no," +
        //                        "em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name,'-') dept,nvl(mdg.master_name, '-') desig,em.f_name,es.month_name," +
        //                        "es.month_days,to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(sh.col3) head_name, to_number(es.head_count) head_count," +
        //                        "(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                        "inner join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id " +
        //                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
        //                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as gm_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' group by col1,client_id,client_unit_id,trim(ref_code)) en on en.col1 = es.emp_code and en.client_id = es.client_id and en.client_unit_id = es.client_unit_id and en.ref_code=es.inc_ver " +
        //                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as basic_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000001' group by col1,client_id,client_unit_id,trim(ref_code)) bs on bs.col1 = es.emp_code and bs.client_id = es.client_id and bs.client_unit_id = es.client_unit_id and bs.ref_code=es.inc_ver " +
        //                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as hra_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000002' group by col1,client_id,client_unit_id,trim(ref_code)) hs on hs.col1 = es.emp_code and hs.client_id = es.client_id and hs.client_unit_id = es.client_unit_id and hs.ref_code=es.inc_ver " +
        //                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as cony_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000006' group by col1,client_id,client_unit_id,trim(ref_code)) cs on cs.col1 = es.emp_code and cs.client_id = es.client_id and cs.client_unit_id = es.client_unit_id and cs.ref_code=es.inc_ver " +
        //                        "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, em.client_id)= 1 and find_in_set(mdp.client_unit_id, em.client_unit_id)= 1 " +
        //                        "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id, em.client_id)= 1 and find_in_set(mdg.client_unit_id, em.client_unit_id)= 1 " +
        //                        "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id in ('" + cl + "') and es.client_unit_id in ('" + ut + "') and es.head_id <> '000019') a " +
        //                        "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id in ('" + cl + "') " +
        //                        "group by a.client_unit_id, a.salary_yr,c.unit_name,a.month_name,a.month_days,a.head_type,a.head_id,a.head_name order by c.unit_name asc";
        //                    DataTable dtern = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtern, MyGuid);
        //                    try
        //                    {
        //                        dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
        //                        { "client_unit_id","unit_name","emp_count","month_name", "month_days", "paid_days","gm_ern","salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name" }, "ERN_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    DataView dve = dtern.DefaultView;
        //                    dve.Sort = "unit_name";
        //                    dtern = dve.ToTable();
        //                    #endregion
        //                    ////////////////////=======================
        //                    #region dt deduct                                    
        //                    //mq1 = "select count(distinct a.emp_code) emp_count,a.client_unit_id,c.unit_name,max(head_order)head_order,a.month_name,a.month_days,a.head_type," +
        //                    //    "a.head_id,a.head_name,0 basic_ern,0 hra_ern,0 cony_ern,a.salary_yr,0 paid_days," +
        //                    //    "0 gm_ern,sum(to_number(nvl(a.head_count, '0'))) head_count from (select es.client_unit_id, to_number(nvl(bs.basic_ern, '0')) as basic_ern," +
        //                    //    "to_number(nvl(hs.hra_ern, '0')) hra_ern,to_number(nvl(cs.cony_ern, '0')) cony_ern,substr(es.currmmmyyyy, 0, 4) as salary_yr,em.pf_no,em.pf_uan," +
        //                    //    "em.esi_no,em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name, '-') dept,nvl(mdg.master_name, '-') desig,em.f_name,es.month_name,es.month_days," +
        //                    //    " to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order " +
        //                    //    "from emp_salary_process es " +
        //                    //    "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                    //    "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //                    //    "inner join(select col1, sum(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1) en on en.col1 = es.emp_code " +
        //                    //    "inner join(select col1, sum(col10) as basic_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000001' group by col1) bs on bs.col1 = es.emp_code " +
        //                    //    "inner join(select col1, sum(col10) as hra_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000002' group by col1) hs on hs.col1 = es.emp_code " +
        //                    //    "inner join(select col1, sum(col10) as cony_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000006' group by col1) cs on cs.col1 = es.emp_code " +
        //                    //    "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, '" + ut + "') = 1 " +
        //                    //    "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id, '" + ut + "') = 1 " +
        //                    //    "where es.currmmmyyyy = '2019005' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id <> '000022') a " +
        //                    //    "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id in ('001') group by a.client_unit_id,a.salary_yr,c.unit_name, a.month_name," +
        //                    //    "a.month_days,a.head_type,a.head_id,a.head_name ";
        //                    mq1 = "select count(distinct a.emp_code) emp_count,a.client_unit_id,c.unit_name,max(head_order)head_order,a.month_name,a.month_days,a.head_type," +
        //                       "a.head_id,a.head_name,0 basic_ern,0 hra_ern,0 cony_ern,a.salary_yr,0 paid_days," +
        //                       "0 gm_ern,sum(to_number(nvl(a.head_count, '0'))) head_count from (select es.client_unit_id,to_number(nvl(bs.basic_ern, '0')) as basic_ern," +
        //                       "to_number(nvl(hs.hra_ern, '0')) hra_ern,to_number(nvl(cs.cony_ern, '0')) cony_ern,substr(es.currmmmyyyy, 0, 4) as salary_yr,em.pf_no,em.pf_uan," +
        //                       "em.esi_no,em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name, '-') dept,nvl(mdg.master_name, '-') desig,em.f_name,es.month_name,es.month_days," +
        //                       " to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order " +
        //                       "from emp_salary_process es " +
        //                       "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id=es.client_id and sh.client_unit_id=es.client_unit_id " +
        //                       "left join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id =es.client_unit_id and em.client_unit_id=es.client_unit_id " +
        //                       "inner join (select client_id, client_unit_id,col1, sum(col10) as gm_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' group by col1,client_id,client_unit_id,trim(ref_code)) en on en.col1 = es.emp_code and en.client_id = es.client_id and en.client_unit_id = es.client_unit_id and en.ref_code=es.inc_ver " +
        //                       "inner join (select client_id, client_unit_id,col1, sum(col10) as basic_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000001' group by col1,client_id,client_unit_id,trim(ref_code)) bs on bs.col1 = es.emp_code and en.client_id = bs.client_id and en.client_unit_id = bs.client_unit_id and bs.ref_code=es.inc_ver " +
        //                       "inner join (select client_id, client_unit_id,col1, sum(col10) as hra_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000002' group by col1,client_id,client_unit_id,trim(ref_code)) hs on hs.col1 = es.emp_code and en.client_id = hs.client_id and en.client_unit_id = hs.client_unit_id and hs.ref_code=es.inc_ver " +
        //                       "inner join (select client_id, client_unit_id,col1, sum(col10) as cony_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000006' group by col1,client_id,client_unit_id,trim(ref_code)) cs on cs.col1 = es.emp_code and en.client_id = cs.client_id and en.client_unit_id = cs.client_unit_id and cs.ref_code=es.inc_ver " +
        //                       "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,em.client_id) = 1 and find_in_set(mdp.client_unit_id,em.client_unit_id) = 1 " +
        //                       "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,em.client_id) = 1 and find_in_set(mdg.client_unit_id,em.client_unit_id) = 1 " +
        //                       "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id <> '000022') a " +
        //                       "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id in ('" + cl + "') " +
        //                       "group by a.client_unit_id,a.salary_yr,c.unit_name, a.month_name,a.month_days,a.head_type,a.head_id,a.head_name order by c.unit_name asc";
        //                    DataTable dtded = sgen.getdata(userCode, mq1);
        //                    Pivot pv1 = new Pivot(dtded, MyGuid);
        //                    try
        //                    {
        //                        dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                        { "client_unit_id", "unit_name", "emp_count", "month_name", "month_days", "paid_days","gm_ern" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name" }, "DED_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    DataView dvd = dtded.DefaultView;
        //                    dvd.Sort = "unit_name";
        //                    dtded = dvd.ToTable();
        //                    #endregion
        //                    dtm = dtern.Copy();
        //                    foreach (DataColumn dc in dtded.Columns)
        //                    {
        //                        if (dc.Ordinal > 10) dtm.Columns.Add(dc.ColumnName);
        //                    }
        //                    string netname = "NETPAYABLE";
        //                    dtm.Columns.Add(netname);
        //                    for (int r = 0; r < dtded.Rows.Count; r++)
        //                    {
        //                        foreach (DataColumn dc in dtded.Columns)
        //                        {
        //                            if (dc.Ordinal > 10)
        //                            {
        //                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
        //                            }
        //                        }
        //                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
        //                    }
        //                    var dtf = dtm;
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        string nn = "Col" + (c + 1);
        //                        dtcols.Columns.Add(nn);
        //                    }
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    bool netadded = false;
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtm.Columns[c + 11].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded)
        //                                {
        //                                    throw new Exception();
        //                                }
        //                                dtcols.Rows[0][c] = dtm.Columns[c + 11].ColumnName.ToString();
        //                                dtm.Columns[c + 11].ColumnName = "VCol" + (c + 1);
        //                            }
        //                            else
        //                            {
        //                                string nn = "VCol" + (c + 1);
        //                                dtm.Columns.Add(nn, typeof(decimal));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            string nn = "VCol" + (c + 1);
        //                            dtm.Columns.Add(nn);
        //                            dtcols.Rows[0][c] = "-";
        //                        }
        //                    }
        //                    dtm.Columns[netname].SetOrdinal(61);
        //                    DataTable dtCloned = dtm.Clone();
        //                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
        //                    {
        //                        if (i > 11)
        //                        { dtCloned.Columns[i].DataType = typeof(decimal); }
        //                    }
        //                    foreach (DataRow row in dtm.Rows)
        //                    {
        //                        dtCloned.ImportRow(row);
        //                    }
        //                    //dtm.TableName = "prepcur";
        //                    dtCloned.TableName = "prepcur";
        //                    dst.Tables.Add(dtCloned);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    dst.Tables.Add();
        //                    sgen.open_report_byDs_xml(userCode, dst, "comp_monthly_salary", "Company Wise Monthly Salary");
        //                }
        //                if (command == "Contractor Monthly Salary")
        //                {
        //                    /////////////////////=======================
        //                    #region dt earn                 
        //                    string cond = "";
        //                    cond = curryyyymmm;
        //                    mq = "select to_number(bs.basic_ern) basic_ern,to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr,vd.c_name Contr, " +
        //                        "em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig" +
        //                      ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,bs.gm_ern," +
        //                      "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                      "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type='KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                      "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
        //                      "and contr<>'000000' and contr<>'0'" +
        //                      "" + cond_dpjoin + "" + cond_dgjoin + " inner join " +
        //                      "   (select col1, sum(gm_ern) as gm_ern, ref_code, sum(basic_ern) as basic_ern, sum(hra_ern) hra_ern, sum(oth_ern) oth_ern, sum(cony_ern) cony_ern from " +
        //                                    "(select col1, (case when col4= '000001' then sum(col10) else 0 end) as basic_ern,(case when col4 = '000002' then sum(col10) else 0 end) as hra_ern," +
        //                                    "(case when col4 = '000005' then sum(col10) else 0 end) as oth_ern,(case when col4 = '000006' then sum(col10) else 0 end) as cony_ern,sum(col10) as gm_ern," +
        //                                    "trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + clientid_mst + "' and client_unit_id in ('" + unitid_mst + "') group by col1,trim(ref_code),col4) a " +
        //                                    "group by col1, ref_code) bs on bs.col1 = es.emp_code and bs.ref_code = es.inc_ver " +
        //                      "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                      "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                      "inner join clients_mst vd on vd.vch_num=em.contr and vd.type='PVD' and vd.client_id=em.client_id and vd.client_unit_id=em.client_unit_id " +
        //                      "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                      "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000019' ";
        //                    //                    mq = @"select to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr,
        //                    //em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days,
        //                    //to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(es.head_name) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from 
        //                    //emp_salary_process es INNER
        //                    //join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id
        //                    //inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and em.emp_status = 'Y' and to_char(em.ex_dt,'YYYY')= '1900'
        //                    //inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') group by col1) en on en.col1 = es.emp_code
        //                    //inner join(select col1, col10 as basic_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000001' ) bs on bs.col1 = es.emp_code
        //                    //inner join(select col1, col10 as hra_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000002' ) hs on hs.col1 = es.emp_code
        //                    //inner join(select col1, col10 as cony_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000006' ) cs on cs.col1 = es.emp_code
        //                    //LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP'
        //                    //LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG'
        //                    //where es.currmmmyyyy = '2019005' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '001' and es.client_unit_id in ('001008') and es.head_id <> '000019' ";
        //                    //18
        //                    DataTable dtern = sgen.getdata(userCode, mq);
        //                    Pivot pv = new Pivot(dtern, MyGuid);
        //                    try
        //                    {
        //                        dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
        //                        { "Contr","emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern","pf_no","pf_uan","esi_no","salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name", "head_order" }, "ERN_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    ////////////////////=======================
        //                    #region dt deduct                                    
        //                    mq1 = "select to_number(nvl(bs.basic_ern,'0')) as basic_ern,to_number(nvl(hs.hra_ern,'0')) as hra_ern,to_number(nvl(cs.cony_ern,'0')) as cony_ern, substr(es.currmmmyyyy,0,4) as salary_yr,vd.c_name Contr, " +
        //                        "em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name ,'-') dept , nvl(mdg.master_name,'-') desig" +
        //                       ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
        //                          "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
        //                          "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
        //                          "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') and contr<>'000000' and contr<>'0' " +
        //                          "" + cond_dpjoin + "" + cond_dgjoin + "" +
        //                          "inner join (select col1, SUM(col10) as gm_ern,ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,ref_code) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
        //                          "inner join (select col1, SUM(col10) as basic_ern,ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000001' group by col1,ref_code) bs on bs.col1 = es.emp_code and bs.ref_code=es.inc_ver " +
        //                          "inner join (select col1, SUM(col10) as hra_ern,ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000002' group by col1,ref_code) hs on hs.col1 = es.emp_code and hs.ref_code=es.inc_ver " +
        //                          "inner join (select col1, SUM(col10) as cony_ern,ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000006' group by col1,ref_code) cs on cs.col1 = es.emp_code and cs.ref_code=es.inc_ver " +
        //                          "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
        //                          "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
        //                          "inner join clients_mst vd on vd.vch_num=em.contr and vd.type='PVD' and vd.client_id=em.client_id and vd.client_unit_id=em.client_unit_id " +
        //                          "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
        //                          "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000022'";
        //                    DataTable dtded = sgen.getdata(userCode, mq1);
        //                    Pivot pv1 = new Pivot(dtded, MyGuid);
        //                    try
        //                    {
        //                        dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
        //                        { "Contr","emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" ,"pf_no","pf_uan","esi_no" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
        //                        new string[] { "head_name" }, "DED_TOT");
        //                    }
        //                    catch (Exception ex) { }
        //                    #endregion
        //                    dtm = dtern.Copy();
        //                    foreach (DataColumn dc in dtded.Columns)
        //                    {
        //                        if (dc.Ordinal > 17) dtm.Columns.Add(dc.ColumnName);
        //                    }
        //                    string netname = "NETPAYABLE";
        //                    dtm.Columns.Add(netname);
        //                    for (int r = 0; r < dtded.Rows.Count; r++)
        //                    {
        //                        foreach (DataColumn dc in dtded.Columns)
        //                        {
        //                            if (dc.Ordinal > 17)
        //                            {
        //                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
        //                            }
        //                        }
        //                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
        //                    }
        //                    var dtf = dtm;
        //                    var dtcols = new DataTable();
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        string nn = "Col" + (c + 1);
        //                        dtcols.Columns.Add(nn);
        //                    }
        //                    var drc = dtcols.NewRow();
        //                    drc[0] = "-";
        //                    dtcols.Rows.Add(drc);
        //                    bool netadded = false;
        //                    for (int c = 0; c < 50; c++)
        //                    {
        //                        try
        //                        {
        //                            if (!dtm.Columns[c + 18].ColumnName.Equals(netname))
        //                            {
        //                                if (netadded)
        //                                {
        //                                    throw new Exception();
        //                                }
        //                                dtcols.Rows[0][c] = dtm.Columns[c + 18].ColumnName.ToString();
        //                                dtm.Columns[c + 18].ColumnName = "VCol" + (c + 1);
        //                            }
        //                            else
        //                            {
        //                                string nn = "VCol" + (c + 1);
        //                                dtm.Columns.Add(nn, typeof(decimal));
        //                                netadded = true;
        //                            }
        //                        }
        //                        catch (Exception err)
        //                        {
        //                            string nn = "VCol" + (c + 1);
        //                            dtm.Columns.Add(nn);
        //                            dtcols.Rows[0][c] = "-";
        //                        }
        //                    }
        //                    dtm.Columns[netname].SetOrdinal(56);
        //                    DataTable dtCloned = dtm.Clone();
        //                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
        //                    {
        //                        if (i > 17)
        //                        { dtCloned.Columns[i].DataType = typeof(decimal); }
        //                    }
        //                    foreach (DataRow row in dtm.Rows)
        //                    {
        //                        dtCloned.ImportRow(row);
        //                    }
        //                    //dtm.TableName = "prepcur";
        //                    dtCloned.TableName = "prepcur";
        //                    dst.Tables.Add(dtCloned);
        //                    dtcols.TableName = "heads";
        //                    dst.Tables.Add(dtcols);
        //                    dst.Tables.Add();
        //                    sgen.open_report_byDs_xml(userCode, dst, "contrms", "Contractor Monthly Salary");
        //                } //done
        //                if (command == "Monthly Paiddays")
        //                {
        //                    /////////////////////=======================
        //                    string toDt = sgen.GetCookie(MyGuid, "year_to");
        //                    string fromDt = sgen.GetCookie(MyGuid, "year_from");
        //                    DateTime tFromDt = sgen.Make_datetime(fromDt);
        //                    string yr = tFromDt.Year.ToString();
        //                    //mq = "select * from (select substr(MONTH_id,2,2)||'-'||(case when to_number(month_id)<4 then to_number(" + yr + ")+1 else to_number(" + yr + ") end) as myr,TO_NUMBER(TRIM(t.femaleratio)) AS MONTHNO, t.MONTH_ID ," +
        //                    //    "t.MONTH_NAME||'-'||(case when to_number(month_id)<4 then to_number(" + yr + ")+1 else to_number(" + yr + ") end) AS MONTH_NAME,t.PF_No,t.PF_UAN,t.ESI_NO,t.EMP_CODE,t.EXTERNAL_EMPNO,t.EMP_NAME,max(t.dept) DEPT,max(t.desig) DESIG," +
        //                    //   "max(t.f_name) F_NAME,sum(t.paid_days) PAID_DAYS,sum(t.month_days)  MONTH_DAYS from (" +
        //                    //   "select m.femaleratio, m.master_id as month_id ,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, d.dept,d.desig," +
        //                    //   "d.f_name,to_number(d.month_days) month_days,to_number(d.paid_days) paid_days from  master_setting m left outer join " +
        //                    //   "(select substr(es.currmmmyyyy,0,4) as salary_yr,es.head_name, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept," +
        //                    //   "nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_id,es.month_days,to_number(es.paid_days) paid_days from emp_salary_process es " +
        //                    //   " inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
        //                    //   " LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + cl + "')=1 and find_in_set(mdp.client_unit_id,'" + ut + "')=1 " +
        //                    //   "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + cl + "')=1 and find_in_set(mdg.client_unit_id,'" + ut + "')=1 " +
        //                    //   "where  es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.head_id='000001' and substr(upper(trim(es.head_name)),1,4)='ARR_' and es.type = 'ESP' " +
        //                    //   "and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')) d on m.master_id=d.month_id  where m.type='MNT'" +
        //                    //   "union all " +
        //                    //   "select m.femaleratio, m.master_id as month_id ,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, '-' dept,'-' desig," +
        //                    //   "D.f_name,0 month_days,0 paid_days from  master_setting m inner join (select  DISTINCT substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code," +
        //                    //   "em.external_empno,es.emp_name,EM.f_name from emp_salary_process es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
        //                    //   "em.client_unit_id in ('" + ut + "') where  es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.head_id='000001' and substr(upper(trim(es.head_name)),1,4)='ARR_' " +
        //                    //   "and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')) d on 1=1 where m.type='MNT' ) t  WHERE EMP_CODE IS NOT NULL group by t.femaleratio, t.month_id ,t.month_name," +
        //                    //   "t.pf_no,t.pf_uan,t.esi_no,t.emp_code,t.external_empno,t.emp_name ) t1 where to_date(myr,'MM-yyyy') between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "')" +
        //                    //   " and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "') order by EMP_CODE, MONTHNO";
        //                    DataTable dtot = sgen.getdata(userCode, mq);
        //                    Pivot pivot = new Pivot(dtot, MyGuid);
        //                    dtot = pivot.PivotData("paid_days", AggregateFunction.Sum, new string[] { "PF_No"
        //                        ,"PF_UAN","ESI_NO","EMP_CODE","EXTERNAL_EMPNO","EMP_NAME","F_NAME"}, new string[] { "MONTH_NAME" });
        //                    dtot.TableName = "prepcur";
        //                    //dst.Tables.Add(dtot);
        //                    //mq = "select '-' as year, femaleratio as mn,Classid as mth from master_setting where type='MNT'";
        //                    //DataTable dth = sgen.getdata(userCode, mq);
        //                    //Pivot pivoth = new Pivot(dth);
        //                    //dth = pivoth.PivotData("mth", AggregateFunction.Max, new string[] { "year" }, new string[] { "mn" });
        //                    //dth.TableName = "heads";
        //                    //dst.Tables.Add(dth);
        //                    //sgen.open_report_byDs_xml(userCode, dst, "emp_salary_days", "Monthly Paiddays Salary Report");
        //                    mq1 = sgen.open_grid_dt("Monthly Paiddays Salary Report", dtot, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Monthly Paiddays Salary Report');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                } //done
        //            }
        //            if (model[0].Col10.Trim().Equals("9011.9"))
        //            {
        //                if (command == "PF Check")
        //                {
        //                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.pf_no PF_No,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
        //                        "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
        //                        "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
        //                        "to_char(convert_tz(b.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOL," +
        //                        "(ut.unit_name || ' (' || b.client_unit_id || ')') Unit from (select count(vch_num) cnt, pf_no from emp_master " +
        //                        "where type= 'EMP' group by pf_no having count(vch_num)> 1) a inner join emp_master b on a.pf_no = b.pf_no " +
        //                        "inner join company_unit_profile ut on ut.cup_id = b.client_unit_id where (trim(b.pf_no) <> '0' or " +
        //                        "trim(b.pf_no)<>'') order by b.pf_no";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("PF Check Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('PF Check Report');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //                if (command == "UAN Check")
        //                {
        //                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.pf_uan PF_UAN,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
        //                       "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
        //                       "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
        //                       "to_char(convert_tz(b.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOL," +
        //                       "(ut.unit_name || ' (' || b.client_unit_id || ')') Unit from (select count(vch_num) cnt,pf_uan from emp_master " +
        //                       "where type= 'EMP' group by pf_uan having count(vch_num)> 1) a inner join emp_master b on a.pf_uan = b.pf_uan " +
        //                       "inner join company_unit_profile ut on ut.cup_id = b.client_unit_id where (trim(b.pf_uan) <> '0' or " +
        //                       "trim(b.pf_uan)<>'') order by b.pf_uan";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("UAN Check Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('UAN Check Report');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //                if (command == "ESI Check")
        //                {
        //                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.esi_no ESI_No,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
        //                       "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
        //                       "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
        //                       "to_char(convert_tz(b.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOL," +
        //                       "(ut.unit_name || ' (' || b.client_unit_id || ')') Unit from (select count(vch_num) cnt,esi_no from emp_master " +
        //                       "where type= 'EMP' group by esi_no having count(vch_num)> 1) a inner join emp_master b on a.esi_no = b.esi_no " +
        //                       "inner join company_unit_profile ut on ut.cup_id = b.client_unit_id where (trim(b.esi_no) <> '0' or " +
        //                       "trim(b.esi_no)<>'') order by b.esi_no";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("ESI Check Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('ESI Check Report');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //                if (command == "Adhaar Check")
        //                {
        //                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.adhaar_no Adhaar_No,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
        //                       "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
        //                       "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
        //                       "to_char(convert_tz(b.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOL," +
        //                       "(ut.unit_name || ' (' || b.client_unit_id || ')') Unit from (select count(vch_num) cnt, adhaar_no from emp_master " +
        //                       "where type= 'EMP' group by adhaar_no having count(vch_num)> 1) a inner join emp_master b on a.adhaar_no = b.adhaar_no " +
        //                       "inner join company_unit_profile ut on ut.cup_id = b.client_unit_id where (trim(b.adhaar_no) <> '0' or " +
        //                       "trim(b.adhaar_no)<>'') order by b.adhaar_no";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("Adhaar Check Report", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Adhaar Check Report');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //            }
        //            if (model[0].Col10.Trim().Equals("9011.10"))
        //            {
        //                if (command == "All Employees")
        //                {
        //                    mq = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Employee_Code," +
        //                        "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,to_char(emp.dob, 'dd/mm/yyyy') " +
        //                        "as DOB,emp.gender as Gender,to_char(emp.st_dt, 'dd/mm/yyyy') as date_of_join,to_char(emp.dom, 'dd/mm/yyyy') as DOM," +
        //                        "(replace(emp.per_address, '0', '') || ' ' || replace(emp.per_pincode, '0', '') || ' ' || replace(emp.per_city, '0', '') || ' ' ||" +
        //                        " replace(emp.per_country, '0', '')) per_Address,emp.addr Address, emp.emer_contact_no,emp.emer_contact_name,emp.emer_contact_relation," +
        //                        "(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.st_dt, 'yyyy'))) as service_years,emp.emp_address,emp.old_empcode" +
        //                        " as OldEmpCode,emp.External_EmpNo,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.email_id as Per_Email,off_email" +
        //                        " Offi_Email, emp.pan_no as PANNo,nvl(bk.master_name, '-') as bank_name,emp.account_no as bank_acc,emp.ifsc_code as bank_ifsc,dp.master_name " +
        //                        "emp_dept, nvl(dg.master_name, '-') emp_desig from emp_master emp inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type " +
        //                        "= 'MDP' and find_in_set(emp.client_id, dp.client_id)= 1 and find_in_set(emp.client_unit_id, dp.client_unit_id)= 1 left join master_setting " +
        //                        "dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(emp.client_id, dg.client_id)= 1 and find_in_set(emp.client_unit_id, " +
        //                        "dg.client_unit_id)= 1 left join master_setting bk on bk.master_id = emp.bank_name and bk.type = 'ABD' and find_in_set(emp.client_id, " +
        //                        "bk.client_id)= 1 and find_in_set(emp.client_unit_id, bk.client_unit_id)= 1 where emp.client_id = '" + cl + "' and emp.client_unit_id in " +
        //                        "('" + ut + "') and emp.type = 'EMP'";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("All Employees", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('All Employees');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //                else if (command == "Active Employees")
        //                {
        //                    mq = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Employee_Code," +
        //                         "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,to_char(emp.dob, 'dd/mm/yyyy') " +
        //                         "as DOB,emp.gender as Gender,to_char(emp.st_dt, 'dd/mm/yyyy') as date_of_join,to_char(emp.dom, 'dd/mm/yyyy') as DOM," +
        //                         "(replace(emp.per_address, '0', '') || ' ' || replace(emp.per_pincode, '0', '') || ' ' || replace(emp.per_city, '0', '') || ' ' ||" +
        //                         " replace(emp.per_country, '0', '')) per_Address,emp.addr Address, emp.emer_contact_no,emp.emer_contact_name,emp.emer_contact_relation," +
        //                         "(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.st_dt, 'yyyy'))) as service_years,emp.emp_address,emp.old_empcode" +
        //                         " as OldEmpCode,emp.External_EmpNo,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.email_id as Per_Email,off_email" +
        //                         " Offi_Email, emp.pan_no as PANNo,nvl(bk.master_name, '-') as bank_name,emp.account_no as bank_acc,emp.ifsc_code as bank_ifsc,dp.master_name " +
        //                         "emp_dept, nvl(dg.master_name, '-') emp_desig from emp_master emp inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type " +
        //                         "= 'MDP' and find_in_set(emp.client_id, dp.client_id)= 1 and find_in_set(emp.client_unit_id, dp.client_unit_id)= 1 left join master_setting " +
        //                         "dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(emp.client_id, dg.client_id)= 1 and find_in_set(emp.client_unit_id, " +
        //                         "dg.client_unit_id)= 1 left join master_setting bk on bk.master_id = emp.bank_name and bk.type = 'ABD' and find_in_set(emp.client_id, " +
        //                         "bk.client_id)= 1 and find_in_set(emp.client_unit_id, bk.client_unit_id)= 1 where emp.client_id = '" + cl + "' and emp.client_unit_id in " +
        //                         "('" + ut + "') and emp.type = 'EMP' and emp.emp_status != 'R' and(case when to_char(emp.ex_dt, 'yyyy') = '1900' then 1 when emp.ex_dt >" +
        //                         " to_date(to_char(utc_timestamp()), 'dd/MM/yyyy') then 1 else 0 end)= 1";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("Active Employees", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Active Employees');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //                else if (command == "Left Employees")
        //                {
        //                    mq = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Employee_Code," +
        //                        "(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,to_char(emp.dob, 'dd/mm/yyyy') " +
        //                        "as DOB,emp.gender as Gender,to_char(emp.st_dt, 'dd/mm/yyyy') as date_of_join,to_char(emp.dom, 'dd/mm/yyyy') as DOM," +
        //                        "(replace(emp.per_address, '0', '') || ' ' || replace(emp.per_pincode, '0', '') || ' ' || replace(emp.per_city, '0', '') || ' ' ||" +
        //                        " replace(emp.per_country, '0', '')) per_Address,emp.addr Address, emp.emer_contact_no,emp.emer_contact_name,emp.emer_contact_relation," +
        //                        "(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.st_dt, 'yyyy'))) as service_years,emp.emp_address,emp.old_empcode" +
        //                        " as OldEmpCode,emp.External_EmpNo,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.email_id as Per_Email,off_email" +
        //                        " Offi_Email, emp.pan_no as PANNo,nvl(bk.master_name, '-') as bank_name,emp.account_no as bank_acc,emp.ifsc_code as bank_ifsc,dp.master_name " +
        //                        "emp_dept, nvl(dg.master_name, '-') emp_desig from emp_master emp inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type " +
        //                        "= 'MDP' and find_in_set(emp.client_id, dp.client_id)= 1 and find_in_set(emp.client_unit_id, dp.client_unit_id)= 1 left join master_setting " +
        //                        "dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(emp.client_id, dg.client_id)= 1 and find_in_set(emp.client_unit_id, " +
        //                        "dg.client_unit_id)= 1 left join master_setting bk on bk.master_id = emp.bank_name and bk.type = 'ABD' and find_in_set(emp.client_id, " +
        //                        "bk.client_id)= 1 and find_in_set(emp.client_unit_id, bk.client_unit_id)= 1 where emp.client_id = '" + cl + "' and emp.client_unit_id in " +
        //                        "('" + ut + "') and emp.type = 'EMP' and emp.emp_status = 'R' ";
        //                    dt = sgen.getdata(userCode, mq);
        //                    mq1 = sgen.open_grid_dt("Left Employees", dt, 0);
        //                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Left Employees');"; }
        //                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
        //                    return View(model);
        //                }
        //            }
        //            {
        //            }
        //            ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
        //            return View(model);
        //        }
        #endregion
        #endregion
        //====================head orderwise============
        #region head orderwise - commented code
        //public ActionResult head_orderwise()
        //{
        //    userCode = sgen.GetCookie(MyGuid, "userCode");
        //    if (userCode.Equals("")) Response.Redirect("~/erp/login_main.aspx");
        //    Session["sch_upd1"] = null;
        //    Session["sch_upd2"] = null;
        //    Session["sch_upd3"] = null;
        //    Session["vch_num_std"] = "";
        //    ViewBag.vnew = "";
        //    ViewBag.vedit = "";
        //    ViewBag.vsave = "disabled='disabled'";
        //    ViewBag.scripCall = "disableForm();";
        //    List<SelectListItem> mod1 = new List<SelectListItem>();
        //    List<Tmodelmain> model = new List<Tmodelmain>();
        //    Tmodelmain tm = new Tmodelmain();
        //    tm.Chk3 = true;
        //    tm.Col71 = "Choose File";
        //    tm.Col72 = "Choose File";
        //    tm.Col73 = "Choose File";
        //    tm.TList1 = mod1;
        //    tm.TList2 = mod1;
        //    tm.TList3 = mod1;
        //    tm.TList4 = mod1;
        //    tm.TList5 = mod1;
        //    tm.TList6 = mod1;
        //    tm.TList7 = mod1;
        //    tm.TList8 = mod1;
        //    tm.TList9 = mod1;
        //    tm.TList10 = mod1;
        //    tm.TList11 = mod1;
        //    tm.TList12 = mod1;
        //    tm.TList13 = mod1;
        //    tm.TList14 = mod1;
        //    tm.SelectedItems1 = new string[] { "" };
        //    tm.SelectedItems2 = new string[] { "" };
        //    tm.SelectedItems3 = new string[] { "" };
        //    tm.SelectedItems4 = new string[] { "" };
        //    tm.SelectedItems5 = new string[] { "" };
        //    tm.SelectedItems6 = new string[] { "" };
        //    tm.SelectedItems7 = new string[] { "" };
        //    tm.SelectedItems8 = new string[] { "" };
        //    tm.SelectedItems9 = new string[] { "" };
        //    tm.SelectedItems10 = new string[] { "" };
        //    tm.SelectedItems11 = new string[] { "" };
        //    tm.SelectedItems12 = new string[] { "" };
        //    tm.SelectedItems13 = new string[] { "" };
        //    tm.SelectedItems14 = new string[] { "" };
        //    model.Add(tm);
        //    return View(model);
        //}
        //[HttpPost]
        //public ActionResult head_orderwise(List<Tmodelmain> model, string command)
        //{
        //    List<SelectListItem> mod1 = new List<SelectListItem>();
        //    string mage = "", fage = "";
        //    tab_name = "emp_master";
        //    tab_name1 = "file_tab";
        //    type_desc = "Employee Detail";
        //    type = "EMP";
        //    #region file1
        //    IList<HttpPostedFileBase> fileCollection1 = new List<HttpPostedFileBase>();
        //    try
        //    {
        //        if (Session["sch_upd1"] == null)
        //        {
        //            for (int f = 0; f < Request.Files.Count; f++)
        //                if (Request.Files.Keys[f].ToString().Trim().EndsWith("upd1"))
        //                {
        //                    if (Request.Files[f].ContentLength > 0)
        //                    {
        //                        fileCollection1.Add(upd1);
        //                        Session["sch_upd1"] = fileCollection1;
        //                        if (fileCollection1.Count > 1) model[0].Col71 = fileCollection1.Count + " Files Selected";
        //                        else model[0].Col71 = fileCollection1[0].FileName;
        //                    }
        //                }
        //        }
        //        else if (((List<HttpPostedFileBase>)Session["sch_upd1"]).Count == 0)
        //        {
        //            if (upd1 != null) fileCollection1.Add(upd1);
        //            Session["sch_upd1"] = fileCollection1;
        //            if (fileCollection1.Count > 1) model[0].Col71 = fileCollection1.Count + " Files Selected";
        //            else model[0].Col71 = fileCollection1[0].FileName;
        //        }
        //        else
        //        {
        //            fileCollection1 = (List<HttpPostedFileBase>)Session["sch_upd1"];
        //            if (fileCollection1.Count > 1) model[0].Col71 = fileCollection1.Count + " Files Selected";
        //            else model[0].Col71 = fileCollection1[0].FileName;
        //        }
        //    }
        //    catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
        //    #endregion
        //    #region file2
        //    IList<HttpPostedFileBase> fileCollection2 = new List<HttpPostedFileBase>();
        //    try
        //    {
        //        if (Session["sch_upd2"] == null)
        //        {
        //            for (int f = 0; f < Request.Files.Count; f++)
        //                if (Request.Files.Keys[f].ToString().Trim().EndsWith("upd2"))
        //                {
        //                    if (Request.Files[f].ContentLength > 0)
        //                    {
        //                        fileCollection2.Add(upd2);
        //                        Session["sch_upd2"] = fileCollection2;
        //                        if (fileCollection2.Count > 1) model[0].Col72 = fileCollection2.Count + " Files Selected";
        //                        else model[0].Col72 = fileCollection2[0].FileName;
        //                    }
        //                }
        //        }
        //        else if (((List<HttpPostedFileBase>)Session["sch_upd2"]).Count == 0)
        //        {
        //            if (upd1 != null) fileCollection1.Add(upd2);
        //            Session["sch_upd2"] = fileCollection2;
        //            if (fileCollection2.Count > 1) model[0].Col72 = fileCollection2.Count + " Files Selected";
        //            else model[0].Col72 = fileCollection2[0].FileName;
        //        }
        //        else
        //        {
        //            fileCollection2 = (List<HttpPostedFileBase>)Session["sch_upd2"];
        //            if (fileCollection2.Count > 1) model[0].Col72 = fileCollection2.Count + " Files Selected";
        //            else model[0].Col72 = fileCollection2[0].FileName;
        //        }
        //    }
        //    catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
        //    #endregion
        //    #region file3
        //    IList<HttpPostedFileBase> fileCollection3 = new List<HttpPostedFileBase>();
        //    try
        //    {
        //        if (Session["sch_upd3"] == null)
        //        {
        //            for (int f = 0; f < Request.Files.Count; f++)
        //                if (Request.Files.Keys[f].ToString().Trim().EndsWith("upd3"))
        //                {
        //                    if (Request.Files[f].ContentLength > 0)
        //                    {
        //                        fileCollection3.Add(upd3);
        //                        Session["sch_upd3"] = fileCollection3;
        //                        if (fileCollection3.Count > 1) model[0].Col73 = fileCollection3.Count + " Files Selected";
        //                        else model[0].Col73 = fileCollection3[0].FileName;
        //                    }
        //                }
        //        }
        //        else if (((List<HttpPostedFileBase>)Session["sch_upd3"]).Count == 0)
        //        {
        //            if (upd1 != null) fileCollection1.Add(upd2);
        //            Session["sch_upd3"] = fileCollection3;
        //            if (fileCollection3.Count > 1) model[0].Col73 = fileCollection3.Count + " Files Selected";
        //            else model[0].Col73 = fileCollection3[0].FileName;
        //        }
        //        else
        //        {
        //            fileCollection3 = (List<HttpPostedFileBase>)Session["sch_upd3"];
        //            if (fileCollection3.Count > 1) model[0].Col73 = fileCollection3.Count + " Files Selected";
        //            else model[0].Col73 = fileCollection3[0].FileName;
        //        }
        //    }
        //    catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
        //    #endregion
        //    if (command == "New")
        //    {
        //        Session["sch_upd1"] = null;
        //        Session["sch_upd2"] = null;
        //        Session["sch_upd3"] = null;
        //        Session["vch_num_std"] = "";
        //        Session["EDMODE"] = "N";
        //        ViewBag.vnew = "disabled='disabled'";
        //        ViewBag.vedit = "disabled='disabled'";
        //        ViewBag.vsave = "";
        //        ViewBag.scripCall = "enableForm();";
        //        mq = "select max(convert(vch_num,UNSIGNED INTEGER)) as auto_genid from " + tab_name + " where type='" + type + "' and client_id='" + clientid_mst
        //            + "' and client_unit_id='" + unitid_mst + "'";
        //        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
        //        #region masters
        //        //nationality
        //        #region
        //        DataTable dtn = new DataTable();
        //        dtn = sgen.getdata(userCode, "select DISTINCT alpha_2,country_name from country_state");
        //        if (dtn.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtn.Rows)
        //            {
        //                mod1.Add(new SelectListItem { Text = dr["country_name"].ToString(), Value = dr["alpha_2"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList1"] = mod1;
        //        #endregion
        //        //caste
        //        #region
        //        DataTable dtc = new DataTable();
        //        List<SelectListItem> mod2 = new List<SelectListItem>();
        //        dtc = sgen.getdata(userCode, "select master_id,master_name FROM master_setting where type='ECT'");
        //        if (dtc.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtc.Rows)
        //            {
        //                mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList2"] = mod2;
        //        #endregion
        //        //religion
        //        #region
        //        DataTable dtr = new DataTable();
        //        List<SelectListItem> mod3 = new List<SelectListItem>();
        //        dtr = sgen.getdata(userCode, "select master_id,master_name FROM master_setting where type='ERT'");
        //        if (dtr.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtr.Rows)
        //            {
        //                mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList3"] = mod3;
        //        #endregion
        //        //blood group
        //        #region
        //        List<SelectListItem> mod4 = new List<SelectListItem>();
        //        mod4.Add(new SelectListItem { Text = "A+", Value = "A+" });
        //        mod4.Add(new SelectListItem { Text = "B+", Value = "B+" });
        //        mod4.Add(new SelectListItem { Text = "A-", Value = "A-" });
        //        mod4.Add(new SelectListItem { Text = "B-", Value = "B-" });
        //        mod4.Add(new SelectListItem { Text = "O+", Value = "O+" });
        //        mod4.Add(new SelectListItem { Text = "O-", Value = "O-" });
        //        mod4.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
        //        mod4.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
        //        TempData[MyGuid + "_TList4"] = mod4;
        //        #endregion
        //        // pickup
        //        #region
        //        DataTable dtploc = new DataTable();
        //        List<SelectListItem> mod5 = new List<SelectListItem>();
        //        dtploc = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='LOC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        if (dtploc.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtploc.Rows)
        //            {
        //                mod5.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList5"] = mod5;
        //        #endregion
        //        //drop
        //        #region
        //        DataTable dtdloc = new DataTable();
        //        List<SelectListItem> mod6 = new List<SelectListItem>();
        //        dtdloc = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='LOC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        if (dtdloc.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtdloc.Rows)
        //            {
        //                mod6.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList6"] = mod6;
        //        #endregion
        //        //disability type
        //        #region
        //        List<SelectListItem> mod7 = new List<SelectListItem>();
        //        mod7.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
        //        mod7.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
        //        TempData[MyGuid + "_TList7"] = mod7;
        //        #endregion
        //        //language known
        //        #region
        //        DataTable dtlang = new DataTable();
        //        List<SelectListItem> mod8 = new List<SelectListItem>();
        //        dtlang = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KLG'");
        //        if (dtlang.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtlang.Rows)
        //            {
        //                mod8.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList8"] = mod8;
        //        #endregion
        //        //department
        //        #region
        //        DataTable dtdp = new DataTable();
        //        List<SelectListItem> mod9 = new List<SelectListItem>();
        //        dtdp = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='MDP'");
        //        if (dtdp.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtdp.Rows)
        //            {
        //                mod9.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList9"] = mod9;
        //        #endregion
        //        //designation
        //        #region
        //        DataTable dtdg = new DataTable();
        //        List<SelectListItem> mod10 = new List<SelectListItem>();
        //        dtdg = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='MDG'");
        //        if (dtdg.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtdg.Rows)
        //            {
        //                mod10.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList10"] = mod10;
        //        #endregion
        //        //employee type
        //        #region
        //        DataTable dtet = new DataTable();
        //        List<SelectListItem> mod11 = new List<SelectListItem>();
        //        dtet = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KET'");
        //        if (dtet.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtet.Rows)
        //            {
        //                mod11.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList11"] = mod11;
        //        #endregion
        //        //employee category
        //        #region
        //        DataTable dtec = new DataTable();
        //        List<SelectListItem> mod12 = new List<SelectListItem>();
        //        dtec = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KEC'");
        //        if (dtec.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtec.Rows)
        //            {
        //                mod12.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList12"] = mod12;
        //        #endregion
        //        //bank
        //        #region
        //        DataTable dtb = new DataTable();
        //        List<SelectListItem> mod13 = new List<SelectListItem>();
        //        dtb = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='ABD'");
        //        if (dtb.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtb.Rows)
        //            {
        //                mod13.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList13"] = mod13;
        //        #endregion
        //        //account type
        //        #region
        //        DataTable dtac = new DataTable();
        //        List<SelectListItem> mod14 = new List<SelectListItem>();
        //        dtac = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KAC'");
        //        if (dtac.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in dtac.Rows)
        //            {
        //                mod14.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
        //            }
        //        }
        //        TempData[MyGuid + "_TList14"] = mod14;
        //        #endregion
        //        //joinee age
        //        #region            
        //        DataTable dt = new DataTable();
        //        mq = "select master_name,classid from master_Setting where type='JAM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        //        dt = sgen.getdata(userCode, mq);
        //        if (dt.Rows.Count > 0)
        //        {
        //            mage = sgen.seekval_dt(dt, "master_name='001'", "classid");
        //            fage = sgen.seekval_dt(dt, "master_name='002'", "classid");
        //        }
        //        #endregion
        //        #endregion
        //        #region bind model
        //        model[0].Col11 = vch_num;
        //        model[0].Col10 = "";
        //        model[0].Col69 = mage;
        //        model[0].Col70 = fage;
        //        model[0].Col71 = "Choose File";
        //        model[0].Col72 = "Choose File";
        //        model[0].Col73 = "Choose File";
        //        model[0].Chk3 = true;
        //        model[0].TList1 = mod1;
        //        model[0].SelectedItems1 = new string[] { "" };
        //        model[0].TList2 = mod2;
        //        model[0].SelectedItems2 = new string[] { "" };
        //        model[0].TList3 = mod3;
        //        model[0].SelectedItems3 = new string[] { "" };
        //        model[0].TList4 = mod4;
        //        model[0].SelectedItems4 = new string[] { "" };
        //        model[0].TList5 = mod5;
        //        model[0].SelectedItems5 = new string[] { "" };
        //        model[0].TList6 = mod6;
        //        model[0].SelectedItems6 = new string[] { "" };
        //        model[0].TList7 = mod7;
        //        model[0].SelectedItems7 = new string[] { "" };
        //        model[0].TList8 = mod8;
        //        model[0].SelectedItems8 = new string[] { "" };
        //        model[0].TList9 = mod9;
        //        model[0].SelectedItems9 = new string[] { "" };
        //        model[0].TList10 = mod10;
        //        model[0].SelectedItems10 = new string[] { "" };
        //        model[0].TList11 = mod11;
        //        model[0].SelectedItems11 = new string[] { "" };
        //        model[0].TList12 = mod12;
        //        model[0].SelectedItems12 = new string[] { "" };
        //        model[0].TList13 = mod13;
        //        model[0].SelectedItems13 = new string[] { "" };
        //        model[0].TList14 = mod14;
        //        model[0].SelectedItems14 = new string[] { "" };
        //        #endregion
        //    }
        //    else if (command == "Edit")
        //    {
        //        ViewBag.vnew = "disabled='disabled'";
        //        ViewBag.vedit = "disabled='disabled'";
        //        ViewBag.vsave = "";
        //    }
        //    else if (command == "View")
        //    {
        //        try
        //        {
        //            ViewBag.vnew = "disabled='disabled'";
        //            ViewBag.vedit = "disabled='disabled'";
        //            ViewBag.vsave = "";
        //            ViewBag.scripCall = "disableForm();";
        //        }
        //        catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 2); }
        //    }
        //    else if (command == "Cancel")
        //    {
        //        try
        //        {
        //            ViewBag.vnew = "";
        //            ViewBag.vedit = "";
        //            ViewBag.vsave = "disabled='disabled'";
        //            ViewBag.scripCall = "disableForm();";
        //            TempData[MyGuid + "_Tlist1"] = mod1;
        //            TempData[MyGuid + "_Tlist2"] = mod1;
        //            TempData[MyGuid + "_Tlist3"] = mod1;
        //            TempData[MyGuid + "_Tlist4"] = mod1;
        //            TempData[MyGuid + "_Tlist5"] = mod1;
        //            TempData[MyGuid + "_Tlist6"] = mod1;
        //            TempData[MyGuid + "_Tlist7"] = mod1;
        //            TempData[MyGuid + "_Tlist8"] = mod1;
        //            TempData[MyGuid + "_Tlist9"] = mod1;
        //            TempData[MyGuid + "_Tlist10"] = mod1;
        //            TempData[MyGuid + "_Tlist11"] = mod1;
        //            TempData[MyGuid + "_Tlist12"] = mod1;
        //            TempData[MyGuid + "_Tlist13"] = mod1;
        //            TempData[MyGuid + "_Tlist14"] = mod1;
        //            model[0].Col11 = "";
        //            model[0].Chk3 = true;
        //            model[0].Chk5 = true;
        //            model[0].TList1 = mod1;
        //            model[0].TList2 = mod1;
        //            model[0].TList3 = mod1;
        //            model[0].TList4 = mod1;
        //            model[0].TList5 = mod1;
        //            model[0].TList6 = mod1;
        //            model[0].TList7 = mod1;
        //            model[0].TList8 = mod1;
        //            model[0].TList9 = mod1;
        //            model[0].TList10 = mod1;
        //            model[0].TList11 = mod1;
        //            model[0].TList12 = mod1;
        //            model[0].TList13 = mod1;
        //            model[0].TList14 = mod1;
        //            model[0].SelectedItems1 = new string[] { "" };
        //            model[0].SelectedItems2 = new string[] { "" };
        //            model[0].SelectedItems3 = new string[] { "" };
        //            model[0].SelectedItems4 = new string[] { "" };
        //            model[0].SelectedItems5 = new string[] { "" };
        //            model[0].SelectedItems6 = new string[] { "" };
        //            model[0].SelectedItems7 = new string[] { "" };
        //            model[0].SelectedItems8 = new string[] { "" };
        //            model[0].SelectedItems9 = new string[] { "" };
        //            model[0].SelectedItems10 = new string[] { "" };
        //            model[0].SelectedItems11 = new string[] { "" };
        //            model[0].SelectedItems12 = new string[] { "" };
        //            model[0].SelectedItems13 = new string[] { "" };
        //            model[0].SelectedItems14 = new string[] { "" };
        //        }
        //        catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
        //    }
        //    else if (command == "Callback")
        //    {
        //        try
        //        {
        //            if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
        //            model = CallbackFun(btnval, "N", "employee_details", "Hr", model);
        //            ViewBag.vnew = "disabled='disabled'";
        //            ViewBag.vedit = "disabled='disabled'";
        //            ViewBag.vsave = "";
        //        }
        //        catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
        //    }
        //    else if (command == "Save")
        //    {
        //        try
        //        {
        //            var tmodel = model.FirstOrDefault();
        //            if (tmodel.Col69.ToString().Trim().Equals("") && tmodel.Col70.ToString().Trim().Equals("")) { sgen.showmsg(1, "Please Fill Joinee Age Master For Both Male And Female", 2); return View(model); }
        //            ismarried = "N"; isspouseworking = "N"; havechild = "No";
        //            string currdate = sgen.server_datetime_local(userCode);
        //            ent_date = sgen.Savedate(currdate, true);
        //            gender = tmodel.Col15;
        //            havechild = tmodel.Col25;
        //            havetransport = tmodel.Col35;
        //            if (tmodel.Chk1 == true) ismarried = "Y";
        //            if (tmodel.Chk2 == true) isspouseworking = "Y";
        //            if (tmodel.Chk4 == true) isdisable = "Y";
        //            if (tmodel.Chk5 == true) vpf = "Y";
        //            if (tmodel.Chk6 == true) ispflimit = "Y";
        //            if (tmodel.Chk7 == true) emp_status = "Y";
        //            DataTable dtstr = new DataTable();
        //            dtstr = sgen.getdata(userCode, "select * from " + tab_name + " WHERE 1=2");
        //            if (Session["EDMODE"].ToString().Equals("Y"))
        //            {
        //                mq1 = " and vch_num<>'" + tmodel.Col11.Trim() + "'";
        //                isedit = true;
        //                vch_num = tmodel.Col11.Trim();
        //                emp_code = tmodel.Col58.Trim();
        //            }
        //            else
        //            {
        //                mq = "select max(convert(vch_num,UNSIGNED INTEGER)) as auto_genid from " + tab_name + " where type='"
        //                    + type + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        //                vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
        //                isedit = false;
        //                emp_code = "gmc" + vch_num;
        //            }
        //            #region dtstr
        //            DataRow dr = dtstr.NewRow();
        //            dr["vch_num"] = tmodel.Col11.Trim();
        //            dr["vch_date"] = ent_date;
        //            dr["type"] = type.Trim();
        //            dr["type_desc"] = type_desc.Trim();
        //            dr["first_name"] = tmodel.Col12.Trim();
        //            dr["middle_name"] = tmodel.Col13.Trim();
        //            dr["last_name"] = tmodel.Col14.Trim();
        //            dr["gender"] = gender.Trim();
        //            dr["dob"] = sgen.Savedate(tmodel.Col16.Trim(), false);
        //            dr["nationality"] = tmodel.SelectedItems1.FirstOrDefault().ToString().Trim();
        //            dr["pob"] = tmodel.Col17.Trim();
        //            dr["mother_tongue"] = tmodel.Col18.Trim();
        //            dr["adhaar_no"] = tmodel.Col19.Trim();
        //            dr["caste"] = tmodel.SelectedItems2.FirstOrDefault().ToString().Trim();
        //            dr["religion"] = tmodel.SelectedItems3.FirstOrDefault().ToString().Trim();
        //            dr["f_name"] = tmodel.Col22.Trim();
        //            dr["m_name"] = tmodel.Col21.Trim();
        //            dr["blood_grp"] = tmodel.SelectedItems4.FirstOrDefault().ToString().Trim();
        //            dr["ismarried"] = ismarried.Trim();
        //            if (ismarried.Trim().Equals("Y"))
        //            {
        //                dr["dom"] = sgen.Savedate(tmodel.Col23.Trim(), false);
        //                dr["spouse_name"] = tmodel.Col24.Trim();
        //                dr["havechild"] = havechild.Trim();
        //                dr["child_count"] = tmodel.Col26.Trim();
        //                dr["isspouseworking"] = isspouseworking.Trim();
        //                if (isspouseworking.Trim().Equals("Y"))
        //                {
        //                    dr["spouse_org"] = tmodel.Col27.Trim();
        //                    dr["spouse_desig"] = tmodel.Col28.Trim();
        //                }
        //            }
        //            dr["contact_no"] = tmodel.Col29.Trim();
        //            dr["alt_contact_no"] = tmodel.Col30.Trim();
        //            dr["emer_contact_no"] = tmodel.Col32.Trim();
        //            dr["emer_contact_name"] = tmodel.Col33.Trim();
        //            dr["emer_contact_relation"] = tmodel.Col34.Trim();
        //            dr["email_id"] = tmodel.Col31.Trim();
        //            dr["havetransport"] = havetransport.Trim();
        //            dr["pick_point"] = tmodel.SelectedItems5.FirstOrDefault().ToString().Trim();
        //            dr["drop_point"] = tmodel.SelectedItems6.FirstOrDefault().ToString().Trim();
        //            try
        //            {
        //                DataTable dtadd = new DataTable();
        //                mq1 = "select * from country_state where rec_id='" + tmodel.Col8.ToString() + "'";
        //                dtadd = sgen.getdata(userCode, mq1);
        //                if (dtadd.Rows.Count > 0)
        //                {
        //                    dr["per_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
        //                    dr["per_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
        //                    dr["per_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
        //                    dr["per_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
        //                    dr["per_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
        //                    dr["per_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
        //                    dr["per_address"] = tmodel.Col36.Trim();
        //                    dr["per_pincode"] = dtadd.Rows[0]["pincode"].ToString().Trim();
        //                    if (tmodel.Chk3 == true)
        //                    {
        //                        isperadd = "Y";
        //                        dr["cur_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
        //                        dr["cur_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
        //                        dr["cur_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
        //                        dr["cur_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
        //                        dr["cur_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
        //                        dr["cur_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
        //                        dr["cur_address"] = tmodel.Col36.Trim();
        //                        dr["cur_pincode"] = dtadd.Rows[0]["pincode"].ToString().Trim();
        //                    }
        //                    else
        //                    {
        //                        DataTable dtadd1 = new DataTable();
        //                        mq1 = "select * from country_state where rec_id='" + tmodel.Col9.Trim() + "'";
        //                        dtadd1 = sgen.getdata(userCode, mq1);
        //                        dr["cur_country"] = dtadd1.Rows[0]["alpha_2"].ToString().Trim();
        //                        dr["cur_state"] = dtadd1.Rows[0]["state_gst_code"].ToString().Trim();
        //                        dr["cur_city"] = dtadd1.Rows[0]["city_name"].ToString().Trim();
        //                        dr["cur_district"] = dtadd1.Rows[0]["district_id"].ToString().Trim();
        //                        dr["cur_tehsil"] = dtadd1.Rows[0]["teh_id"].ToString().Trim();
        //                        dr["cur_village"] = dtadd1.Rows[0]["v_id"].ToString().Trim();
        //                        dr["cur_address"] = tmodel.Col43.Trim();
        //                        dr["cur_pincode"] = dtadd1.Rows[0]["pincode"].ToString().Trim();
        //                    }
        //                }
        //            }
        //            catch (Exception ex) { }
        //            dr["isperadd"] = isperadd.Trim();
        //            dr["isdisable"] = isdisable.Trim();
        //            if (isdisable.Equals("Y"))
        //            {
        //                dr["dis_type"] = tmodel.SelectedItems7.FirstOrDefault().ToString().Trim();
        //                dr["dis_desc"] = tmodel.Col50.Trim();
        //            }
        //            dr["pan_no"] = tmodel.Col51.Trim();
        //            dr["pf_no"] = tmodel.Col52.Trim();
        //            dr["pf_uan"] = tmodel.Col53.Trim();
        //            dr["esi_no"] = tmodel.Col54.Trim();
        //            dr["emp_code"] = tmodel.Col58.Trim();
        //            dr["external_empno"] = tmodel.Col59.Trim();
        //            dr["biometric_id"] = tmodel.Col55.Trim();
        //            dr["st_dt"] = sgen.Savedate(tmodel.Col61.Trim(), false);
        //            dr["ex_dt"] = sgen.Savedate(tmodel.Col62.Trim(), false);
        //            dr["language"] = String.Join(",", tmodel.SelectedItems8);
        //            dr["col1"] = tmodel.Col63.Trim();
        //            dr["passport_no"] = tmodel.Col56.Trim();
        //            dr["passport_dt"] = sgen.Savedate(tmodel.Col57.Trim(), false);
        //            dr["bank_name"] = tmodel.SelectedItems13.FirstOrDefault().ToString().Trim();
        //            dr["account_no"] = tmodel.Col66.Trim();
        //            dr["ifsc_code"] = tmodel.Col67.Trim();
        //            dr["account_type"] = tmodel.SelectedItems14.FirstOrDefault().ToString().Trim();
        //            dr["emp_type"] = tmodel.SelectedItems11.FirstOrDefault().ToString().Trim();
        //            dr["emp_category"] = tmodel.SelectedItems12.FirstOrDefault().ToString().Trim();
        //            dr["emp_dept"] = tmodel.SelectedItems9.FirstOrDefault().ToString().Trim();
        //            dr["emp_desig"] = tmodel.SelectedItems10.FirstOrDefault().ToString().Trim();
        //            dr["emp_status"] = emp_status.Trim();
        //            dr["micr_no"] = tmodel.Col68.Trim();
        //            dr["vid_no"] = tmodel.Col20.Trim();
        //            dr["is_vpf"] = vpf.Trim();
        //            if (vpf.Trim().Equals("Y")) dr["vpf"] = tmodel.Col64.Trim();
        //            dr["old_empcode"] = tmodel.Col60.Trim();
        //            dr["ispflimit"] = ispflimit.Trim();
        //            if (ispflimit.Trim().Equals("Y")) dr["pf_limit"] = tmodel.Col65.Trim();
        //            if (isedit)
        //            {
        //                dr["ent_by"] = tmodel.Col3.Trim();
        //                dr["rec_id"] = tmodel.Col7.Trim();
        //                dr["ent_date"] = tmodel.Col4.Trim();
        //                dr["client_id"] = tmodel.Col1.Trim();
        //                dr["client_unit_id"] = tmodel.Col2.Trim();
        //                dr["edit_by"] = userid_mst.Trim();
        //                dr["edit_date"] = ent_date;
        //            }
        //            else
        //            {
        //                dr["rec_id"] = "0";
        //                dr["ent_by"] = userid_mst;
        //                dr["ent_date"] = ent_date;
        //                dr["client_id"] = clientid_mst;
        //                dr["client_unit_id"] = unitid_mst;
        //                dr["edit_by"] = "-";
        //                dr["edit_date"] = ent_date;
        //            }
        //            #endregion
        //            dtstr.Rows.Add(dr);
        //            bool ok = sgen.Update_data(userCode, dtstr, tab_name, tmodel.Col10, isedit);
        //            if (ok)
        //            {
        //                DataTable dtfile = new DataTable();
        //                dtfile = sgen.getdata(userCode, "select * from " + tab_name1 + " WHERE 1=2");
        //                string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
        //                try
        //                {
        //                    HttpPostedFileBase file3 = fileCollection3[0];
        //                    ctype3 = file3.ContentType;
        //                    fileName3 = file3.FileName;
        //                    path3 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName3;
        //                    encpath3 = sgen.Convert_Stringto64(path3).ToString();
        //                    finalpath3 = serverpath + encpath3;
        //                    file3.SaveAs(finalpath3);
        //                    filesave(model, ent_date, dtfile, fileName3, encpath3, "Blank Cheque", ctype3);
        //                }
        //                catch (Exception ex) { }
        //                try
        //                {
        //                    HttpPostedFileBase file2 = fileCollection2[0];
        //                    ctype2 = file2.ContentType;
        //                    fileName2 = file2.FileName;
        //                    path2 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName2;
        //                    encpath2 = sgen.Convert_Stringto64(path2).ToString();
        //                    finalpath2 = serverpath + encpath2;
        //                    file2.SaveAs(finalpath2);
        //                    filesave(model, ent_date, dtfile, fileName2, encpath2, "Employee Photo", ctype2);
        //                }
        //                catch (Exception ex) { /*sgen.showmsg(1, ex.Message.ToString(), 0); return;*/ }
        //                try
        //                {
        //                    HttpPostedFileBase file1 = fileCollection1[0];
        //                    ctype1 = file1.ContentType;
        //                    fileName1 = file1.FileName;
        //                    path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
        //                    encpath1 = sgen.Convert_Stringto64(path1).ToString();
        //                    finalpath1 = serverpath + encpath1;
        //                    file1.SaveAs(finalpath1);
        //                    filesave(model, ent_date, dtfile, fileName1, encpath1, "Health Certificate", ctype1);
        //                }
        //                catch (Exception ex) { }
        //                bool res = sgen.Update_data(userCode, dtfile, tab_name1, tmodel.Col10, false);
        //                ViewBag.vnew = "";
        //                ViewBag.vedit = "";
        //                ViewBag.vsave = "disabled='disabled'";
        //                if (res)
        //                {
        //                    Session["vch_num_std"] = null;
        //                    Session["sch_upd1"] = null;
        //                    Session["sch_upd2"] = null;
        //                    Session["sch_upd3"] = null;
        //                    ViewBag.scripCall = "showmsgJS(3, 'Record Saved Successfully', 1);disableForm();";
        //                    model = new List<Tmodelmain>();
        //                    model.Add(new Tmodelmain
        //                    {
        //                        Chk3 = true,
        //                        Col71 = tmodel.Col71,
        //                        Col72 = tmodel.Col72,
        //                        Col73 = tmodel.Col73,
        //                        TList1 = mod1,
        //                        SelectedItems1 = new string[] { "" }
        //                    });
        //                }
        //            }
        //        }
        //        catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
        //    }
        //    else if (command == "Cancel")
        //    {
        //        ViewBag.vnew = "";
        //        ViewBag.vedit = "";
        //        ViewBag.vsave = "disabled='disabled'";
        //    }
        //    else if (command == "Callback")
        //    {
        //        if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
        //        model = CallbackFun(btnval, "N", "employee_details", "HOME", model);
        //        ViewBag.vnew = "disabled='disabled'";
        //        ViewBag.vedit = "disabled='disabled'";
        //        ViewBag.vsave = "";
        //    }
        //    return View(model);
        //}       
        #endregion
        //==================Bonus====================
        #region bonus config
        public ActionResult bonus_config()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                Col1 = "",
                Col9 = mid_mst,
                Col10 = m_id_mst,
                Col13 = "Save",
                TList1 = mod1,
                TList2 = mod1,
                TList3 = mod1,
                TList4 = mod1,
                SelectedItems1 = new string[] { "" },
                SelectedItems2 = new string[] { "" },
                SelectedItems3 = new string[] { "" },
                SelectedItems4 = new string[] { "" },
            });
            return View(model);
        }
        [HttpPost]
        public ActionResult bonus_config(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            tab_name = "enx_tab";
            type_desc = "Bonus_Config";
            type = "KBC";
            where = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            var tmodel = model.FirstOrDefault();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            TempData[MyGuid + "_Tlist1"] = mod1;
            TempData[MyGuid + "_Tlist2"] = mod2;
            TempData[MyGuid + "_Tlist3"] = mod3;
            TempData[MyGuid + "_Tlist4"] = mod4;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (command == "New")
            {
                // shiv
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "'" + where + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    //salary head
                    #region bindhead
                    // shiv
                    DataTable dt = new DataTable();
                    dt = sgen.getdata(userCode, "select col1,vch_num from vehicle_master where type='KSP'" + where + "");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["col1"].ToString(), Value = dr["vch_num"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod1;
                    #endregion
                    //Bonus limit
                    #region                   
                    mod3.Add(new SelectListItem { Text = "No Bonus and Exgratia", Value = "01" });
                    mod3.Add(new SelectListItem { Text = "Only Bonus Upto Limit", Value = "02" });
                    mod3.Add(new SelectListItem { Text = "Bonus Upto Limit and Balance Exgratia", Value = "03" });
                    mod3.Add(new SelectListItem { Text = "Only Exgratia On Total", Value = "04" });
                    TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
                    #endregion
                    //unit
                    #region bindhead
                    // shiv
                    mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                    if (role_mst.ToUpper().Equals("OWNER")) cond = "where unit_status='1'";
                    else cond = "where cup_id in ('" + mq1.Replace(",", "','") + "') and unit_status='1'";
                    mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as name FROM company_unit_profile " + cond + "";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod4.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["cup_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    #endregion
                    model[0].Col15 = vch_num;




                    model[0].SelectedItems1 = new string[] { "" };
                    model[0].SelectedItems2 = new string[] { "" };
                    model[0].SelectedItems3 = new string[] { "" };
                    model[0].SelectedItems4 = new string[] { "" };
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "bonus_config", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string currdate = sgen.server_datetime_local(userCode);
                    ent_date = sgen.Savedate(currdate, true);
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + tab_name + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, tab_name);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col15.Trim() + "'";
                        isedit = true;
                        vch_num = model[0].Col15.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "'" + where + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        isedit = false;
                        mq1 = "";
                    }
                    string cond = sgen.seekval(userCode, "select col2 as bonustype from " + tab_name + " where type='" + type + "' and col2='" + model[0].Col16.Trim() + "'" + where + "" + mq1 + "", "bonustype");
                    if (!cond.Equals("0"))
                    {
                        //Means Already Exits....            
                        ViewBag.scripCall = "showmsgJS(1, 'You Can Only Update Your Setting', 2);";
                        model[0].TList1 = mod1;
                        model[0].TList2 = mod2;
                        model[0].TList3 = mod3;
                        return View(model);
                    }
                    #region dtstr title
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = ent_date;
                    dr["type"] = type.Trim();
                    dr["col2"] = model[0].Col16.Trim();
                    dr["col4"] = model[0].Col17;
                    dr["col1"] = string.Join(",", model[0].SelectedItems1);
                    dr["col6"] = model[0].Col18 == null ? "" : model[0].Col18.Trim();
                    dr["col3"] = string.Join(",", model[0].SelectedItems2);
                    dr["col7"] = model[0].Col19 == null ? "" : model[0].Col19.Trim();
                    dr["col8"] = model[0].Col20.Trim();
                    dr["col5"] = model[0].SelectedItems3.FirstOrDefault().ToString().Trim();
                    // shiv
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                        dr["rec_id"] = model[0].Col7;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dtstr.Rows.Add(dr);
                    #endregion
                    bool Result = sgen.Update_data(userCode, dtstr, tab_name, model[0].Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col1 = "",
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col13 = "Save",
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            TList4 = mod4,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                        });
                    }
                    else { ViewBag.scripCall = "showmsgJS(1, 'Record Not Saved', 0);"; }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
            }
            else if (command == "Copy Config")
            {
                try
                {
                    mq = "select * from enx_tab where type='KBC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    DataTable dtsh = sgen.getdata(userCode, mq);
                    if (dtsh.Rows.Count > 0) { ViewBag.scripCall = "showmsg(1, 'Bonus Config Already there in this Unit', 2);"; return View(model); }
                    mq = "insert into enx_tab (created_date,vch_num,vch_date,type,type_desc,client_id,client_unit_id,ent_by,ent_date,edit_by,edit_date,col1," +
                        "col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,date1,date2,r_no,ref_code,ref_dt,chkvalue,curryyyymmm)" +
                        "(SELECT UTC_TIMESTAMP(),vch_num,UTC_TIMESTAMP(),type,type_desc,client_id,'" + unitid_mst + "','" + userid_mst + "',UTC_TIMESTAMP(),'-',UTC_TIMESTAMP(),col1,col2,col3," +
                        "col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,date1,date2,r_no,ref_code,ref_dt,chkvalue,curryyyymmm FROM enx_tab WHERE type = 'KBC' and client_id='" + clientid_mst + "' " +
                        "and client_unit_id='" + model[0].SelectedItems4.FirstOrDefault().ToString().Trim() + "')";
                    res = sgen.execute_cmd(userCode, mq);
                    if (res)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Copy data from Unit Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col1 = "",
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col13 = "Save",
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            TList4 = mod4,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                        });
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0)"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        //=================actual salary master====
        #region actual salary master
        public ActionResult actual_salary_master()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "ACTUAL SALARY MASTER"; tm1.Col10 = "emp_master";
            tm1.Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KA1"; tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim(); tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult actual_salary_master(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            List<Tmodelmain> emp_model = new List<Tmodelmain>();
            var tm = model.FirstOrDefault();
            if (command == "Revise")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    DataTable dtemp = new DataTable();
                    mq = "select DISTINCT em.client_id,em.client_unit_id,em.vch_num,em.vch_date,em.type,em.edit_by,em.edit_date,em.ent_by,em.ent_date," +
                        "em.nid as rec_id,em.emp_code,(em.first_name||' '||replace(em.middle_name,'0','')||' '||REPLACE(em.last_name,'0','')) emp_name,'0' act_salary,em.act_hrs," +
                        "'0' gross,otc.col4 shft_hrs from (select rowid as nid, a.* from emp_master a) em " +
                        "left join enx_tab otc on 1=1 and otc.type='OTC' and otc.client_id='" + clientid_mst + "' and otc.client_unit_id='" + unitid_mst + "' " +
                        "where em.type='EMP' and em.client_id='" + clientid_mst + "' and em.client_unit_id='" + unitid_mst + "' and " +
                        "em.emp_status='Y' and to_char(em.ex_dt,'yyyy')='1900'  " +
                        "order by em.emp_code asc";
                    dtemp = sgen.getdata(userCode, mq);
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            emp_model.Add(new Tmodelmain
                            {
                                Col1 = dr["client_id"].ToString(),
                                Col2 = dr["client_unit_id"].ToString(),
                                Col3 = dr["ent_by"].ToString(),
                                Col4 = dr["ent_date"].ToString(),
                                Col5 = dr["edit_by"].ToString(),
                                Col6 = dr["edit_date"].ToString(),
                                Col7 = dr["rec_id"].ToString(),
                                Col8 = "type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'",
                                Col9 = tm.Col9,
                                Col10 = tm.Col10,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col13 = "Update",
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = dr["emp_code"].ToString(),
                                Col17 = dr["emp_name"].ToString(),
                                Col18 = dr["gross"].ToString(),
                                Col19 = dr["shft_hrs"].ToString(),
                                Col20 = dr["act_salary"].ToString(),
                                Col21 = dr["act_hrs"].ToString()
                            });
                        }
                        model = emp_model;
                    }
                    else
                    {
                        model = new List<Tmodelmain>();
                        model.Add(tm);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                // shiv
                if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                model = CallbackFun(btnval, "N", "actual_salary_master", "Hr", model);
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vsave = "";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    //DataTable dtstr = new DataTable();
                    ////dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + " WHERE 1=2");
                    //dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y")) { isedit = true; }
                    Satransaction sat = new Satransaction(userCode, MyGuid);
                    #region dtstr module
                    mq = "";
                    for (int k = 0; k < model.Count; k++)
                    {
                        //DataRow dr = dtstr.NewRow();
                        string colval = "";
                        //dr["act_salary"] = model[k].Col20;
                        if (model[k].Col21 != null)
                        {
                            colval = DateTime.ParseExact(model[k].Col21.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                            mq = "update " + model[0].Col10.Trim() + " set act_hrs='" + colval + "' where" +
                                " rowid='" + model[k].Col7 + "'";
                            res = sat.Execute_cmd(mq);
                            if (!res)
                            {
                                sat.Rollback();
                                break;
                            }
                        }
                    }
                    #endregion                   
                    //res = sgen.Update_data(userCode, dtstr, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        sat.Commit();
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Data Saved Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        tmodel.Col16 = "";
                        tmodel.Col18 = "";
                        tmodel.Col20 = "";
                        tmodel.Col21 = "";
                        tmodel.Col13 = "Save";
                        model.Add(tmodel);
                    }
                    else { ViewBag.scripCall = "showmsgJS(1, 'Something Went Wrong, Data Not Saved', 0);"; }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        //============filter form===========
        #region filter form
        public ActionResult filter_form(string headid, string mid, string m_id, string btnid, string Myguid)
        {
            FillMst(Myguid);
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> ct_list = new List<SelectListItem>();
            List<SelectListItem> ut_list = new List<SelectListItem>();
            List<SelectListItem> m_list = new List<SelectListItem>();
            List<SelectListItem> kdp_list = new List<SelectListItem>();
            List<SelectListItem> kdg_list = new List<SelectListItem>();
            List<SelectListItem> kcat_list = new List<SelectListItem>();
            #region client id's
            mq = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
            if (!role_mst.ToUpper().Equals("OWNER")) where = " and company_profile_id in ('" + mq.Replace(",", "','") + "')";
            DataTable dtcomp = new DataTable();
            mq = "SELECT Company_Profile_Id, company_name ||'('|| company_profile_id ||')'  as nameid FROM company_profile " +
                "where type='CP' " + where + " order by company_name";
            dtcomp = sgen.getdata(userCode, mq);
            if (dtcomp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtcomp.Rows)
                {
                    ct_list.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["Company_Profile_Id"].ToString() });
                }
            }
            TempData[MyGuid + "_ct_list"] = ct_list;
            #endregion
            #region months
            m_list = cmd_Fun.month(userCode, unitid_mst);
            TempData[MyGuid + "_m_list"] = m_list;
            #endregion
            #region dept
            kdp_list = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
            TempData[MyGuid + "_kdp_list"] = kdp_list;
            #endregion
            #region desig
            kdg_list = cmd_Fun.desig(userCode, unitid_mst);
            TempData[MyGuid + "_kdg_list"] = kdg_list;
            #endregion
            #region  empcat
            kcat_list = cmd_Fun.empcat(userCode, unitid_mst);
            TempData[MyGuid + "_kcat_list"] = kcat_list;
            #endregion
            tm1.TList1 = ct_list;
            #region unit id's                   
            mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
            if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq1.Replace(",", "','") + "')";
            mq = clientid_mst;
            tm1.Col31 = clientid_mst;
            mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as nameid FROM company_unit_profile where company_profile_id in (" + mq + ")" + where + " and unit_status='1' order by unit_name";
            DataTable dtunit = new DataTable();
            dtunit = sgen.getdata(userCode, mq);
            if (dtunit.Rows.Count > 0)
            {
                foreach (DataRow dr in dtunit.Rows)
                {
                    ut_list.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                }
            }
            TempData[MyGuid + "_ut_list"] = ut_list;
            #endregion
            tm1.TList2 = ut_list;
            tm1.TList3 = m_list;
            tm1.TList4 = kdp_list;
            tm1.TList5 = kdg_list;
            tm1.TList6 = kcat_list;
            tm1.Col9 = headid;
            tm1.Col10 = mid;
            tm1.Col11 = Myguid;
            tm1.Col12 = btnid;
            tm1.SelectedItems1 = new string[] { clientid_mst };
            tm1.SelectedItems2 = new string[] { unitid_mst };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.SelectedItems4 = new string[] { "" };
            tm1.SelectedItems5 = new string[] { "" };
            tm1.SelectedItems6 = new string[] { "" };
            model.Add(tm1);
            return PartialView(model);
        }
        [HttpPost]
        public ActionResult filter_form(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col11);
            List<SelectListItem> ct_list = new List<SelectListItem>();
            List<SelectListItem> ut_list = new List<SelectListItem>();
            List<SelectListItem> m_list = new List<SelectListItem>();
            List<SelectListItem> kdp_list = new List<SelectListItem>();
            List<SelectListItem> kdg_list = new List<SelectListItem>();
            List<SelectListItem> kcat_list = new List<SelectListItem>();
            ct_list = (List<SelectListItem>)TempData[MyGuid + "_ct_list"];
            m_list = (List<SelectListItem>)TempData[MyGuid + "_m_list"];
            kdp_list = (List<SelectListItem>)TempData[MyGuid + "_kdp_list"];
            kdg_list = (List<SelectListItem>)TempData[MyGuid + "_kdg_list"];
            kcat_list = (List<SelectListItem>)TempData[MyGuid + "_kcat_list"];
            TempData[MyGuid + "_ct_list"] = ct_list;
            TempData[MyGuid + "_m_list"] = m_list;
            TempData[MyGuid + "_kdp_list"] = kdp_list;
            TempData[MyGuid + "_kdg_list"] = kdg_list;
            TempData[MyGuid + "_kcat_list"] = kcat_list;
            model[0].TList1 = ct_list;
            model[0].TList2 = ut_list;
            model[0].TList3 = m_list;
            model[0].TList4 = kdp_list;
            model[0].TList5 = kdg_list;
            model[0].TList6 = kcat_list;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (command == "DDL_CHANGE")
            {
                try
                {
                    #region unit id's                   
                    mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                    if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq1.Replace(",", "','") + "')";
                    mq = string.Join(",", model[0].SelectedItems1);
                    model[0].Col31 = mq;
                    mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as nameid FROM company_unit_profile where company_profile_id in (" + mq + ")" + where + " and unit_status='1' order by unit_name";
                    DataTable dtunit = new DataTable();
                    dtunit = sgen.getdata(userCode, mq);
                    if (dtunit.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtunit.Rows)
                        {
                            ut_list.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_ut_list"] = ut_list;
                    #endregion
                    model[0].TList1 = ct_list;
                    model[0].TList2 = ut_list;
                    model[0].TList3 = m_list;
                    model[0].TList4 = kdp_list;
                    model[0].TList5 = kdg_list;
                    model[0].TList6 = kcat_list;
                    model[0].SelectedItems2 = new string[] { "" };
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Search")
            {
                sgen.SetSession(MyGuid, "KCOMMAND", model[0].Col12.Trim());
                sgen.SetSession(MyGuid, "KDDL_CL", model[0].Col31);
                sgen.SetSession(MyGuid, "KDDL_UT", String.Join(",", model[0].SelectedItems2));
                sgen.SetSession(MyGuid, "KDDL_MONTH", String.Join(",", model[0].SelectedItems3));
                sgen.SetSession(MyGuid, "KDDL_DEPT", String.Join(",", model[0].SelectedItems4));
                sgen.SetSession(MyGuid, "KDDL_DESIG", String.Join(",", model[0].SelectedItems5));
                sgen.SetSession(MyGuid, "KDDL_ECAT", String.Join(",", model[0].SelectedItems6));
                sgen.SetSession(MyGuid, "KFRM_TYPE", "1");
                //return stat_report(model, model[0].Col12.Trim());
            }
            ModelState.Clear();
            return PartialView(model);
        }
        #endregion        
        //============print salary slip
        #region print payslip
        //public ActionResult print_payslip()
        //{
        //    FillMst("");
        //    List<Tmodelmain> pp_mod = new List<Tmodelmain>();
        //    List<SelectListItem> ddl_month = new List<SelectListItem>();
        //    Tmodelmain tm = new Tmodelmain();
        //    mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
        //    m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
        //    ViewBag.vnew = "";
        //    ViewBag.vprint = "disabled='disabled'";
        //    ViewBag.scripCall = "disableForm();";
        //    if (mid_mst.Trim().Equals("9003.2.12")) tm.Col9 = "PRINT PAY SLIP";
        //    else tm.Col9 = "PRINT ICARD";
        //    tm.Col14 = mid_mst;
        //    tm.Col15 = m_id_mst;
        //    tm.TList1 = ddl_month;
        //    tm.TList2 = ddl_month;
        //    tm.TList3 = ddl_month;
        //    tm.TList4 = ddl_month;
        //    tm.SelectedItems1 = new string[] { "" };
        //    tm.SelectedItems2 = new string[] { "" };
        //    tm.SelectedItems3 = new string[] { "" };
        //    tm.SelectedItems4 = new string[] { "" };
        //    pp_mod.Add(tm);
        //    return View(pp_mod);
        //}
        //[HttpPost]
        //public ActionResult print_payslip(List<Tmodelmain> pp_mod, string command)
        //{
        //    FillMst(pp_mod[0].Col15);
        //    #region ddl
        //    List<SelectListItem> ddl_month = (List<SelectListItem>)TempData[MyGuid + "_ddl_month"];
        //    List<SelectListItem> ddl_rcd = (List<SelectListItem>)TempData[MyGuid + "_ddl_rcd"];
        //    List<SelectListItem> ddl_dept = (List<SelectListItem>)TempData[MyGuid + "_ddl_dept"];
        //    List<SelectListItem> ddl_desig = (List<SelectListItem>)TempData[MyGuid + "_ddl_desig"];
        //    pp_mod[0].TList1 = ddl_month;
        //    pp_mod[0].TList2 = ddl_rcd;
        //    pp_mod[0].TList3 = ddl_dept;
        //    pp_mod[0].TList4 = ddl_desig;
        //    TempData[MyGuid + "_ddl_month"] = ddl_month;
        //    TempData[MyGuid + "_ddl_rcd"] = ddl_rcd;
        //    TempData[MyGuid + "_ddl_dept"] = ddl_dept;
        //    TempData[MyGuid + "_ddl_desig"] = ddl_desig;
        //    if (pp_mod[0].SelectedItems1 == null) pp_mod[0].SelectedItems1 = new string[] { "" };
        //    if (pp_mod[0].SelectedItems2 == null) pp_mod[0].SelectedItems2 = new string[] { "" };
        //    if (pp_mod[0].SelectedItems3 == null) pp_mod[0].SelectedItems3 = new string[] { "" };
        //    if (pp_mod[0].SelectedItems4 == null) pp_mod[0].SelectedItems4 = new string[] { "" };
        //    #endregion
        //    if (command == "New")
        //    {
        //        try
        //        {
        //            sgen.SetSession(MyGuid, "EDMODE", "N");
        //            ViewBag.vnew = "disabled='disabled'";
        //            ViewBag.vprint = "";
        //            ViewBag.scripCall = "enableForm();";
        //            ddl_month = new List<SelectListItem>();
        //            ddl_rcd = new List<SelectListItem>();
        //            ddl_dept = new List<SelectListItem>();
        //            ddl_desig = new List<SelectListItem>();
        //            //months
        //            #region
        //            ddl_month = cmd_Fun.month(userCode, unitid_mst);
        //            TempData[MyGuid + "_ddl_month"] = ddl_month;
        //            #endregion
        //            //record (manual fixed)
        //            #region
        //            ddl_rcd.Add(new SelectListItem { Text = "25", Value = "25" });
        //            ddl_rcd.Add(new SelectListItem { Text = "50", Value = "50" });
        //            ddl_rcd.Add(new SelectListItem { Text = "100", Value = "100" });
        //            ddl_rcd.Add(new SelectListItem { Text = "500", Value = "500" });
        //            ddl_rcd.Add(new SelectListItem { Text = "1000", Value = "1000" });
        //            TempData[MyGuid + "_ddl_rcd"] = ddl_rcd;
        //            #endregion
        //            //dept
        //            #region
        //            ddl_dept = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
        //            TempData[MyGuid + "_ddl_dept"] = ddl_dept;
        //            #endregion
        //            //desig
        //            #region
        //            ddl_desig = cmd_Fun.desig(userCode, unitid_mst);
        //            TempData[MyGuid + "_ddl_desig"] = ddl_desig;
        //            #endregion
        //            pp_mod[0].TList1 = ddl_month;
        //            pp_mod[0].SelectedItems1 = new string[] { "" };
        //            pp_mod[0].TList2 = ddl_rcd;
        //            pp_mod[0].SelectedItems2 = new string[] { "" };
        //            pp_mod[0].TList3 = ddl_dept;
        //            pp_mod[0].SelectedItems3 = new string[] { "" };
        //            pp_mod[0].TList4 = ddl_desig;
        //            pp_mod[0].SelectedItems4 = new string[] { "" };
        //        }
        //        catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
        //    }
        //    else if (command == "Callback")
        //    {
        //        try
        //        {
        //            if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
        //            pp_mod = CallbackFun(btnval, "N", "print_payslip", "Hr", pp_mod);
        //            ViewBag.vnew = "disabled='disabled'";
        //            ViewBag.vedit = "disabled='disabled'";
        //            ViewBag.vsave = "";
        //        }
        //        catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
        //    }
        //    else if (command == "Print")
        //    {
        //        try
        //        {
        //            ViewBag.vnew = "";
        //            ViewBag.vprint = "disabled='disabled'";
        //            ViewBag.scripCall = "disableForm();";
        //            if (pp_mod[0].Col14.Trim() == "9003.2.12")
        //            {
        //                mq = "select ms.client_name rpt_name from vehicle_master vm INNER join master_setting ms on ms.master_name=vm.col7 and ms.type='PSF' " +
        //                    "where vm.type='KCR' and vm.client_id='" + clientid_mst + "' and vm.client_unit_id='" + unitid_mst + "'";
        //                mq1 = sgen.seekval(userCode, mq, "rpt_name");
        //                if (!mq1.Trim().Equals("0"))
        //                {
        //                    mq1 = mq1.Split('.')[0].ToString();
        //                    DataSet dst = new DataSet();
        //                    DataTable dtern = (DataTable)sgen.GetSession(MyGuid, "PAY_DTERN");
        //                    DataTable dtded = (DataTable)sgen.GetSession(MyGuid, "PAY_DTDED");
        //                    DataTable dtcols_earn = (DataTable)sgen.GetSession(MyGuid, "earn_col");
        //                    DataTable dtcols_ded = (DataTable)sgen.GetSession(MyGuid, "ded_col");
        //                    DataTable dtstd_ear = (DataTable)sgen.GetSession(MyGuid, "std_ear");
        //                    dtern.TableName = "prepcur";
        //                    dtded.TableName = "prepcur_d";
        //                    dtcols_earn.TableName = "earn_head";
        //                    dtcols_ded.TableName = "ded_head";
        //                    dtstd_ear.TableName = "std_ear";
        //                    dst.Tables.Add(dtern);
        //                    dst.Tables.Add(dtded);
        //                    dst.Tables.Add(dtcols_earn);
        //                    dst.Tables.Add(dtcols_ded);
        //                    dst.Tables.Add(dtstd_ear);
        //                    pp_mod[0].Col18 = "";
        //                    sgen.open_report_byDs_xml(userCode, dst, mq1, "Salary_Slip");
        //                    //string mailfrom = "", mailcc = "", emailidcc = "";


        //                    //DataTable datatable = sgen.getdata(userCode, "select com_email from company_profile where Company_Profile_Id='" + clientid_mst + "' and type='CP'");
        //                    //if (datatable.Rows.Count > 0)
        //                    //{
        //                    //    mailfrom = Convert.ToString(datatable.Rows[0]["com_email"]);
        //                    //}
        //                    //var body = new StringBuilder();
        //                    //body.AppendLine(@"</table><br /><p>" + "Heading" + "</p><br />" +
        //                    //    "<br /><p>Thank You,<br />" + clientname_mst + "<br /></p><br />");
        //                    //sgen.Send_mail_SA_attc(userCode, clientid_mst, unitid_mst, "Ram@skyinfy.com", "Ram@skyinfy.com", "", body.ToString(), "V Schedule", "", );

        //                    ////File(stream, "application/pdf", "title.pdf").FileStream;
        //                    ////ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
        //                    ViewBag.scripCall += "showRptnew('Reports');";
        //                }
        //                else { ViewBag.scripCall = "showmsgJS(1, 'No Payslip Seleted in Config ', 0);"; }
        //            }
        //            else if (pp_mod[0].Col14.Trim() == "9003.2.14")
        //            {
        //                DataSet dst = new DataSet();
        //                DataTable dtic = (DataTable)sgen.GetSession(MyGuid, "icempdt");
        //                dtic.TableName = "prepcur";
        //                dst.Tables.Add(dtic);
        //                pp_mod[0].Col18 = "";
        //                sgen.open_report_byDs_xml(userCode, dst, "empicard", "Employee Icard");
        //                //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
        //                ViewBag.scripCall += "showRptnew('Reports');";
        //            }
        //        }
        //        catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
        //    }
        //    ModelState.Clear();
        //    return View(pp_mod);
        //}
        public static FileStream SaveStreamAsFile(string filePath, Stream inputStream, string fileName)
        {
            DirectoryInfo info = new DirectoryInfo(filePath);
            if (!info.Exists)
            {
                info.Create();
            }
            string path = Path.Combine(filePath, fileName);
            using (FileStream outputFileStream = new FileStream(path, FileMode.Create))
            {
                inputStream.CopyTo(outputFileStream);
                return outputFileStream;

            }
        }
        [HttpGet]
        public FileResult exp_pdf(DataTable dt)
        {
            FillMst();
            //model = (TableResultModel)sgen.GetSession(MyGuid, "model");
            string cg_com_name = sgen.GetCookie(MyGuid, "cg_com_name");
            string filename = sgen.GetSession(MyGuid, "filename").ToString();
            MemoryStream stream = sgen.exp_to_pdf(dt, filename);
            //return File(System.Net.Mime.MediaTypeNames.Application.Octet, filename);
            return File(stream.ToArray(), "application/pdf", "Grid.pdf");

        }

        #endregion
        #region print payslip_n
        public ActionResult print_payslip_n()
        {
            FillMst("");
            chkRef();
            List<Tmodelmain> pp_mod = new List<Tmodelmain>();
            List<SelectListItem> ddl_month = new List<SelectListItem>();
            Tmodelmain tm = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            ViewBag.vnew = "";
            ViewBag.vprint = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            if (mid_mst.Trim().Equals("9003.2.12")) tm.Col9 = "PRINT PAY SLIP";
            else tm.Col9 = "PRINT ICARD";
            tm.Col14 = mid_mst;
            tm.Col15 = m_id_mst;
            tm.TList1 = ddl_month;
            tm.TList2 = ddl_month;
            tm.TList3 = ddl_month;
            tm.TList4 = ddl_month;
            tm.SelectedItems1 = new string[] { "" };
            tm.SelectedItems2 = new string[] { "" };
            tm.SelectedItems3 = new string[] { "" };
            tm.SelectedItems4 = new string[] { "" };
            pp_mod.Add(tm);
            return View(pp_mod);
        }
        [HttpPost]
        public ActionResult print_payslip_n(List<Tmodelmain> pp_mod, string command)
        {
            FillMst(pp_mod[0].Col15);
            #region ddl
            List<SelectListItem> ddl_month = (List<SelectListItem>)TempData[MyGuid + "_ddl_month"];
            List<SelectListItem> ddl_rcd = (List<SelectListItem>)TempData[MyGuid + "_ddl_rcd"];
            List<SelectListItem> ddl_dept = (List<SelectListItem>)TempData[MyGuid + "_ddl_dept"];
            List<SelectListItem> ddl_desig = (List<SelectListItem>)TempData[MyGuid + "_ddl_desig"];
            pp_mod[0].TList1 = ddl_month;
            pp_mod[0].TList2 = ddl_rcd;
            pp_mod[0].TList3 = ddl_dept;
            pp_mod[0].TList4 = ddl_desig;
            TempData[MyGuid + "_ddl_month"] = ddl_month;
            TempData[MyGuid + "_ddl_rcd"] = ddl_rcd;
            TempData[MyGuid + "_ddl_dept"] = ddl_dept;
            TempData[MyGuid + "_ddl_desig"] = ddl_desig;
            if (pp_mod[0].SelectedItems1 == null) pp_mod[0].SelectedItems1 = new string[] { "" };
            if (pp_mod[0].SelectedItems2 == null) pp_mod[0].SelectedItems2 = new string[] { "" };
            if (pp_mod[0].SelectedItems3 == null) pp_mod[0].SelectedItems3 = new string[] { "" };
            if (pp_mod[0].SelectedItems4 == null) pp_mod[0].SelectedItems4 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vprint = "";
                    ViewBag.scripCall = "enableForm();";
                    ddl_month = new List<SelectListItem>();
                    ddl_rcd = new List<SelectListItem>();
                    ddl_dept = new List<SelectListItem>();
                    ddl_desig = new List<SelectListItem>();
                    //months
                    #region
                    ddl_month = cmd_Fun.month(userCode, unitid_mst);
                    TempData[MyGuid + "_ddl_month"] = ddl_month;
                    #endregion
                    //record (manual fixed)
                    #region
                    ddl_rcd.Add(new SelectListItem { Text = "25", Value = "25" });
                    ddl_rcd.Add(new SelectListItem { Text = "50", Value = "50" });
                    ddl_rcd.Add(new SelectListItem { Text = "100", Value = "100" });
                    ddl_rcd.Add(new SelectListItem { Text = "500", Value = "500" });
                    ddl_rcd.Add(new SelectListItem { Text = "1000", Value = "1000" });
                    TempData[MyGuid + "_ddl_rcd"] = ddl_rcd;
                    #endregion
                    //dept
                    #region
                    ddl_dept = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                    TempData[MyGuid + "_ddl_dept"] = ddl_dept;
                    #endregion
                    //desig
                    #region
                    ddl_desig = cmd_Fun.desig(userCode, unitid_mst);
                    TempData[MyGuid + "_ddl_desig"] = ddl_desig;
                    #endregion
                    pp_mod[0].TList1 = ddl_month;
                    pp_mod[0].SelectedItems1 = new string[] { "" };
                    pp_mod[0].TList2 = ddl_rcd;
                    pp_mod[0].SelectedItems2 = new string[] { "" };
                    pp_mod[0].TList3 = ddl_dept;
                    pp_mod[0].SelectedItems3 = new string[] { "" };
                    pp_mod[0].TList4 = ddl_desig;
                    pp_mod[0].SelectedItems4 = new string[] { "" };
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Callback")
            {
                try
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    pp_mod = CallbackFun(btnval, "N", "print_payslip_n", "Hr", pp_mod);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(pp_mod);
            }
            else if (command == "Print")
            {
                try
                {
                    ViewBag.vnew = "";
                    //ViewBag.vprint = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                    if (pp_mod[0].Col14.Trim() == "9003.2.12")
                    {
                        mq = "select ms.client_name rpt_name from vehicle_master vm INNER join master_setting ms on ms.master_name=vm.col7 and ms.type='PSF' " +
                            "where vm.type='KCR' and vm.client_id='" + clientid_mst + "' and vm.client_unit_id='" + unitid_mst + "'";
                        mq1 = sgen.seekval(userCode, mq, "rpt_name");
                        if (!mq1.Trim().Equals("0"))
                        {
                            mq1 = mq1.Split('.')[0].ToString();
                            DataSet dst = new DataSet();
                            DataTable dtern = (DataTable)sgen.GetSession(MyGuid, "PAY_DTERN");
                            DataTable DTHEADS = (DataTable)sgen.GetSession(MyGuid, "PAY_HEADS");
                            dtern.TableName = "prepcur";
                            DTHEADS.TableName = "earn_head";
                            dst.Tables.Add(dtern.Copy());
                            dst.Tables.Add(DTHEADS.Copy());
                            pp_mod[0].Col18 = "";
                            sgen.open_report_byDs_xml(userCode, dst, "pay_slip_format7_n1", "Salary_Slip_n");
                            //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
                            ViewBag.scripCall += "showRptpdf('Salary Slip');";
                        }
                        else { ViewBag.scripCall = "showmsgJS(1, 'No Payslip Seleted in Config ', 0);"; }
                    }
                    else if (pp_mod[0].Col14.Trim() == "9003.2.14")
                    {
                        DataSet dst = new DataSet();
                        DataTable dtic = (DataTable)sgen.GetSession(MyGuid, "icempdt");
                        dtic.TableName = "prepcur";
                        dst.Tables.Add(dtic);
                        pp_mod[0].Col18 = "";
                        sgen.open_report_byDs_xml(userCode, dst, "empicard", "Employee Icard");
                        //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
                        ViewBag.scripCall += "showRptpdf('Icard');";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(pp_mod);
        }
        #endregion

        #region print_payslip_mail
        public ActionResult print_payslip_mail()
        {
            FillMst("");
            chkRef();
            List<Tmodelmain> pp_mod = new List<Tmodelmain>();
            List<SelectListItem> ddl_month = new List<SelectListItem>();
            Tmodelmain tm = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            ViewBag.vnew = "";
            ViewBag.vprint = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            if (mid_mst.Trim().Equals("9003.2.12")) tm.Col9 = "PRINT PAY SLIP";
            else tm.Col9 = "PRINT ICARD";
            tm.Col14 = mid_mst;
            tm.Col15 = m_id_mst;
            tm.TList1 = ddl_month;
            tm.TList2 = ddl_month;
            tm.TList3 = ddl_month;
            tm.TList4 = ddl_month;
            tm.SelectedItems1 = new string[] { "" };
            tm.SelectedItems2 = new string[] { "" };
            tm.SelectedItems3 = new string[] { "" };
            tm.SelectedItems4 = new string[] { "" };
            pp_mod.Add(tm);
            return View(pp_mod);
        }
        [HttpPost]
        public ActionResult print_payslip_mail(List<Tmodelmain> pp_mod, string command)
        {
            FillMst(pp_mod[0].Col15);
            #region ddl
            List<SelectListItem> ddl_month = (List<SelectListItem>)TempData[MyGuid + "_ddl_month"];
            List<SelectListItem> ddl_rcd = (List<SelectListItem>)TempData[MyGuid + "_ddl_rcd"];
            List<SelectListItem> ddl_dept = (List<SelectListItem>)TempData[MyGuid + "_ddl_dept"];
            List<SelectListItem> ddl_desig = (List<SelectListItem>)TempData[MyGuid + "_ddl_desig"];
            pp_mod[0].TList1 = ddl_month;
            pp_mod[0].TList2 = ddl_rcd;
            pp_mod[0].TList3 = ddl_dept;
            pp_mod[0].TList4 = ddl_desig;
            TempData[MyGuid + "_ddl_month"] = ddl_month;
            TempData[MyGuid + "_ddl_rcd"] = ddl_rcd;
            TempData[MyGuid + "_ddl_dept"] = ddl_dept;
            TempData[MyGuid + "_ddl_desig"] = ddl_desig;
            if (pp_mod[0].SelectedItems1 == null) pp_mod[0].SelectedItems1 = new string[] { "" };
            if (pp_mod[0].SelectedItems2 == null) pp_mod[0].SelectedItems2 = new string[] { "" };
            if (pp_mod[0].SelectedItems3 == null) pp_mod[0].SelectedItems3 = new string[] { "" };
            if (pp_mod[0].SelectedItems4 == null) pp_mod[0].SelectedItems4 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vprint = "";
                    ViewBag.scripCall = "enableForm();";
                    ddl_month = new List<SelectListItem>();
                    ddl_rcd = new List<SelectListItem>();
                    ddl_dept = new List<SelectListItem>();
                    ddl_desig = new List<SelectListItem>();
                    //months
                    #region
                    ddl_month = cmd_Fun.month(userCode, unitid_mst);
                    TempData[MyGuid + "_ddl_month"] = ddl_month;
                    #endregion
                    //record (manual fixed)
                    #region
                    ddl_rcd.Add(new SelectListItem { Text = "25", Value = "25" });
                    ddl_rcd.Add(new SelectListItem { Text = "50", Value = "50" });
                    ddl_rcd.Add(new SelectListItem { Text = "100", Value = "100" });
                    ddl_rcd.Add(new SelectListItem { Text = "500", Value = "500" });
                    ddl_rcd.Add(new SelectListItem { Text = "1000", Value = "1000" });
                    TempData[MyGuid + "_ddl_rcd"] = ddl_rcd;
                    #endregion
                    //dept
                    #region
                    ddl_dept = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                    TempData[MyGuid + "_ddl_dept"] = ddl_dept;
                    #endregion
                    //desig
                    #region
                    ddl_desig = cmd_Fun.desig(userCode, unitid_mst);
                    TempData[MyGuid + "_ddl_desig"] = ddl_desig;
                    #endregion
                    pp_mod[0].TList1 = ddl_month;
                    pp_mod[0].SelectedItems1 = new string[] { "" };
                    pp_mod[0].TList2 = ddl_rcd;
                    pp_mod[0].SelectedItems2 = new string[] { "" };
                    pp_mod[0].TList3 = ddl_dept;
                    pp_mod[0].SelectedItems3 = new string[] { "" };
                    pp_mod[0].TList4 = ddl_desig;
                    pp_mod[0].SelectedItems4 = new string[] { "" };
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Callback")
            {
                try
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    pp_mod = CallbackFun(btnval, "N", "print_payslip_mail", "Hr", pp_mod);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Print")
            {
                try
                {
                    ViewBag.vnew = "";
                    ViewBag.vprint = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                    if (pp_mod[0].Col14.Trim() == "9003.2.12")
                    {
                        mq = "select ms.client_name rpt_name from vehicle_master vm INNER join master_setting ms on ms.master_name=vm.col7 and ms.type='PSF' " +
                            "where vm.type='KCR' and vm.client_id='" + clientid_mst + "' and vm.client_unit_id='" + unitid_mst + "'";
                        mq1 = sgen.seekval(userCode, mq, "rpt_name");
                        if (!mq1.Trim().Equals("0"))
                        {
                            mq1 = mq1.Split('.')[0].ToString();
                            DataSet dst = new DataSet();
                            DataTable dtern = (DataTable)sgen.GetSession(MyGuid, "PAY_DTERN");
                            DataTable DTHEADS = (DataTable)sgen.GetSession(MyGuid, "PAY_HEADS");


                            string mqq = sgen.seekval(userCode, "select param1 from controls where id='000015' and type='CTL'", "param1");

                            pp_mod[0].Col18 = "";
                            for (int i = 0; i < dtern.Rows.Count; i++)
                            {
                                dst = new DataSet();
                                var empcode = dtern.Rows[i]["emp_code"].ToString();
                                var dttemp = dtern.Select("emp_code='" + empcode + "'").CopyToDataTable();
                                var dttemphead = DTHEADS.Copy();
                                dttemp.TableName = "prepcur";
                                dttemphead.TableName = "earn_head";

                                dst.Tables.Add(dttemp);
                                dst.Tables.Add(dttemphead);
                                //if (i==0)
                                //{
                                //    dst.Tables.Add(DTHEADS);
                                //}
                                Stream stream;
                                bool ok = false;
                                bool ismailvalid = sgen.ValidateEmail(dtern.Rows[i]["email_id"].ToString());
                                if (ismailvalid)
                                {
                                    sgen.open_report_byDs_xml(userCode, dst, "pay_slip_format7_n1", "Salary_Slip_mail");
                                    var rd = sgen.getRptDoc(userCode, clientid_mst, unitid_mst);
                                    var streaminput = rd.ExportToStream(ExportFormatType.PortableDocFormat);
                                    if (mqq == "Y")
                                    {
                                        stream = sgen.PassPdf(streaminput, dtern.Rows[i]["Emp_Name"].ToString().Substring(0, 2) + dtern.Rows[i]["ddoobbbb"].ToString().Substring(0, 4));
                                        ok = sendmail_stream(userCode, clientid_mst, dtern.Rows[i]["email_id"].ToString(), "", stream, "password is first two letters of empname and first four digits of employee date of birth", "SALARY SLIP");
                                    }
                                    else
                                    {
                                        stream = streaminput;
                                        ok = sendmail_stream(userCode, clientid_mst, dtern.Rows[i]["email_id"].ToString(), "", stream, "Download Salary Pay Slip", "SALARY SLIP");
                                    }

                                }
                            }
                        }
                        else { ViewBag.scripCall = "showmsgJS(1, 'No Payslip Seleted in Config ', 0);"; }
                    }
                    else if (pp_mod[0].Col14.Trim() == "9003.2.14")
                    {
                        DataSet dst = new DataSet();
                        DataTable dtic = (DataTable)sgen.GetSession(MyGuid, "icempdt");
                        dtic.TableName = "prepcur";
                        dst.Tables.Add(dtic);
                        pp_mod[0].Col18 = "";
                        sgen.open_report_byDs_xml(userCode, dst, "empicard", "Employee Icard");
                        //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
                        ViewBag.scripCall += "showRptnew('Reports');";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(pp_mod);
        }
        #endregion
        #region paymain
        public ActionResult paymain()
        {
            FillMst("");
            chkRef();
            sgen.SetSession(MyGuid, "EDMODE", "");
            ViewBag.vnew = "";
            ViewBag.vnext = "disabled='disabled'";
            ViewBag.vcalc = "disabled='disabled'";
            ViewBag.vgetdata = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm = new Tmodelmain();
            tm.Col9 = "SALARY PROCESS NEW";
            tm.Col10 = "paymain";
            tm.Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            tm.Col12 = "PAY";
            tm.Col13 = "Next";
            tm.Col14 = mid_mst.Trim();
            tm.Col15 = m_id_mst.Trim();
            tm.TList1 = mod1;
            TempData[MyGuid + "_Tlist1"] = mod1;
            tm.SelectedItems1 = new string[] { "" };
            model.Add(tm);
            return View(model);
        }
        [HttpPost]
        public ActionResult paymain(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            try
            {
                string stng = "";
                bool error = false;
                FillMst(model[0].Col15);
                DataTable dtm = sgen.settable(hftable);
                sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
                model[0].dt1 = dtm;
                #region list
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                if (mod1 == null)
                {
                    //months
                    #region
                    mod1 = cmd_Fun.month(userCode, unitid_mst);
                    #endregion
                }

                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                #endregion
                var tmodel = model.FirstOrDefault();
                if (command == "New")
                {
                    try
                    {
                        sgen.SetSession(MyGuid, "CHECKBTN", "NEXT");
                        sgen.SetSession(MyGuid, "EDMODE", "N");
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vnext = "disabled='disabled'";
                        ViewBag.vcalc = "disabled='disabled'";
                        ViewBag.vgetdata = "";
                        ViewBag.scripCall = ViewBag.scripCall + " enableForm();";
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "'" + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col18 = vch_num.Trim();
                        //months
                        #region
                        TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);

                        #endregion

                        model[0].SelectedItems1 = new string[] { "" };
                    }
                    catch (Exception ex)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vnext = "disabled='disabled'";
                        ViewBag.vcalc = "disabled='disabled'";
                        ViewBag.vgetdata = "disabled='disabled'";
                        ViewBag.scripCall = "disableForm();";
                        ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0);disableForm();";
                    }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Delete")
                {
                    mq = "update empincr";
                }
                else if (command == "Callback")
                // shiv
                {
                    try
                    {
                        if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                        model = CallbackFun(btnval, "Y", "paymain", "Hr", model);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vgetdata = "";
                        ViewBag.vnext = "";
                        ViewBag.vcalc = "";
                    }
                    catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
                }
                else if (command == "Get Data")
                {
                    if (sgen.GetSession(MyGuid, "EDMODE") != null && sgen.GetSession(MyGuid, "EDMODE").ToString() == "Y") isedit = true;
                    else isedit = false;
                    #region month checking
                    int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault());
                    int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                    string lastyyyymmm = "";
                    string curryyyymmm = "";
                    if (currmonth <= 12 && currmonth > 4)
                    {
                        lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                    }
                    else if (currmonth == 1)
                    {
                        lastyyyymmm = curryear + sgen.padlc(12, 3);
                        curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                    }
                    else if (currmonth > 1 && currmonth < 4)
                    {
                        lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                    }
                    else if (currmonth == 4)
                    {
                        lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                    }
                    sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                    string Fdate = "01/" + sgen.padlc(currmonth, 2) + "/" + curryyyymmm.Substring(0, 4);
                    string Ldate = DateTime.DaysInMonth(sgen.Make_int(curryyyymmm.Substring(0, 4)), currmonth) + "/" + sgen.padlc(currmonth, 2) + "/" + curryyyymmm.Substring(0, 4);
                    #endregion
                    #region check month
                    mq1 = "select max(curryyyymmm) curryyyymmm from paymain where type='PAY' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    mq = sgen.seekval(userCode, mq1, "curryyyymmm");
                    if (mq.Trim() == "0") { }
                    else
                    {
                        cond = sgen.seekval(userCode, "select curryyyymmm from paymain where type='PAY' and client_id='" + clientid_mst + "' and " +
                        "client_unit_id='" + unitid_mst + "' and curryyyymmm='" + curryyyymmm + "'", "curryyyymmm");
                        if (!cond.Equals("0") && command == "Get Data" && !isedit)
                        {
                            //Means Already Exits....   
                            ViewBag.vnew = "";
                            ViewBag.vnext = "disabled='disabled'";
                            ViewBag.vcalc = "disabled='disabled'";
                            ViewBag.vgetdata = "disabled='disabled'";
                            ViewBag.scripCall = "showmsgJS(1,'Already generated this month salary,cannot generate again',2);disableForm()";
                            return View(model);
                        }
                        mq1 = "select distinct curryyyymmm from PAYMAIN where type='PAY' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and " +
                            "(to_char(M_LASTDT,'yyyy')||month_id)='" + lastyyyymmm + "'";
                        mq = sgen.seekval(userCode, mq1, "curryyyymmm");
                        if (mq.Trim() == "0")
                        {
                            ViewBag.vnew = "";
                            ViewBag.vnext = "disabled='disabled'";
                            ViewBag.vcalc = "disabled='disabled'";
                            ViewBag.vgetdata = "disabled='disabled'";
                            ViewBag.scripCall = "showmsgJS(1,'Your previous month salary is pending. you cannot create salary',2);disableForm()";
                            return View(model);
                        }
                    }
                    #endregion
                    var DtLeaveMain = sgen.getdata(userCode, "select col1 as name,col2 as id from kc_tab where type='KLV' " +
                        "and client_id='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                        ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE TYPE='KSP' AND  CUR_STATE IN ('1','2','4') AND " +
                        "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                    sgen.SetSession(MyGuid, "DtLeaveMain", DtLeaveMain);
                    sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                    string[] pfheads = new string[] { "" }, esiheads = new string[] { "" }, lwfheads = new string[] { "" };
                    try
                    {
                        pfheads = sgen.seekval_dt(Dtheadmain, "PFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                    }
                    catch (Exception err) { }
                    try
                    {
                        esiheads = sgen.seekval_dt(Dtheadmain, "ESIABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                    }
                    catch (Exception err) { }
                    try
                    {
                        lwfheads = sgen.seekval_dt(Dtheadmain, "LWFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                    }
                    catch (Exception err) { }
                    mq0 = @"SELECT A.emp_category ,'" + model[0].SelectedItems1.FirstOrDefault() + "' AS MONTH_ID ,'" + curryyyymmm + "' as  CURRYYYYMMM ,'" + Ldate + "' as M_LASTDT, A.VCH_NUM AS EMP_CODE ,A.FIRST_NAME,ATD.MDAYS,ATD.WDAYS ,ATD.HDAYS ,ATD.LV1,ATD.LV2,ATD.LV3,ATD.LV4,ATD.LV5,ATD.LEAVES" +
                        " ,ATD.ABSENTS ,ATD.PRESENTS ,ATD.PAIDDAYS" +
                        ",ATD.LATEDAYS ,ATD.HRS,MNTS,ATD.OT_HRS,ATD.OT_HRS AS OT_HRS_V,ATD.OT_MNTS,(CASE WHEN A.ACT_HRS='0' THEN OT.hrs ELSE A.ACT_HRS END ) AS OT_DAY_HRS" +
    ",OT.rate AS OTRATE,OT.HEADS AS OTHEADS,OT.COL3 AS OT_DAY_MNTH,'" + string.Join(",", pfheads) + "' PFHEADS,'" + string.Join(",", esiheads) + "' ESIHEADS,'" + string.Join(",", lwfheads) + "'" +
    " LWFHEADS,a.ispflimit as cutpf,pf.col6 as PFRATE_ER,pf.col5 as PFRATE,(CASE WHEN a.pf_limit > 0 THEN A.PF_LIMIT ELSE PF.COL29 END ) PFLIMIT," +
    "(CASE WHEN a.pf_limit > 0 THEN A.PF_LIMIT ELSE PF.COL29 END ) PFLIMIT_ER" +
    ",ESI.COL5 AS ESIRATE,ESI.COL6 AS ESIRATE_ER,a.isesilimit as CUTESI,(CASE WHEN a.esi_limit > 0 THEN A.ESI_LIMIT ELSE ESI.col12 END) AS ESILIMIT," +
    "(CASE WHEN a.esi_limit > 0 THEN A.ESI_LIMIT ELSE ESI.col12 END) AS ESILIMIT_ER" +
    "  , (CASE WHEN LWF.COL17='0%' THEN LWF.COL11 ELSE LWF.COL17 END) AS LWFRATE,(CASE WHEN LWF.COL18='0%' THEN  LWF.COL15 ELSE LWF.COL18 END) AS LWFRATE_ER," +
    "LWF.COL11 AS LWFLIMIT,LWF.COL15 AS LWFLIMIT_ER,'Y' as CUTLWF , A.IS_VPF AS CUTVPF,a.vpf as VPFRATE,a.vpf as VPFLIMIT,a.iscanteen ,(CASE WHEN TO_NUMBER(a.canteen)=0 THEN TO_NUMBER(CT.COL1) ELSE TO_NUMBER(a.canteen) END) CANTEENRATE " +
    ",ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
    "S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
    "S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,s.ACTRATE,NVL(ATD.CANT_DED,'0') AS CANT_DED,S.ESI_ALL FROM EMP_MASTER A " +
    "LEFT JOIN  SALMAIN S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
    "LEFT JOIN ATTN ATD ON A.VCH_NUM = ATD.EMP_CODE AND A.CLIENT_UNIT_ID = ATD.CLIENT_UNIT_ID AND ATD.CURRYYYYMMM='" + curryyyymmm + "' " + " " +
    "INNER JOIN vehicle_master pf on a.client_unit_id = pf.client_unit_id AND PF.type = 'KPF' " +
    "INNER JOIN vehicle_master ESI on a.client_unit_id = ESI.client_unit_id AND ESI.type = 'KES' " +
    "INNER JOIN vehicle_master LWF on a.client_unit_id = LWF.client_unit_id AND LWF.type = 'KLW' " +
    "INNER JOIN enx_tab2 CT on a.client_unit_id = CT.client_unit_id AND CT.type = 'KCD' " +
    "INNER JOIN (select GROUP_CONCAT(en.col1) as heads,col2 as rate,col4 as hrs,COL3,client_unit_id from enx_tab en " +
    "where en.type = 'OTC' and en.client_unit_id = '" + unitid_mst + "' group by col2,col4,client_unit_id,COL3) OT ON OT.CLIENT_UNIT_ID=A.CLIENT_UNIT_ID " +
    "WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and (case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') " +
    "then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
                    var dtbase = sgen.getdata(userCode, mq0);
                    sgen.SetSession(MyGuid, "dtbase", dtbase);
                    mq1 = "";
                    if (userCode.ToUpper() == "SKYKESHO") mq1 = ",S.ACT_F,S.ACT_ARR,S.ACT_OT,S.AMT1,S.OT_HRS_V";
                    mq1 = @"SELECT A.VCH_NUM AS EMP_CODE,A.external_empno ,
A.FIRST_NAME||' '||replace(A.MIDDLE_NAME,'0','')||' '||replace(A.LAST_NAME,'0','')||'('||dp.master_name||')' AS FIRST_NAME,S.MDAYS,S.WDAYS ,S.HDAYS ,S.LV1,S.LV2,S.LV3,S.LV4,S.LV5,S.LEAVES ,S.ABSENTS ,S.PRESENTS ,S.PAIDDAYS
,S.LATEDAYS ,S.OT_HRS,S.ER1,S.ER2,S.ER3,S.ER4,S.ER5,S.ER6,S.ER7,S.ER8,S.ER9,S.ER10,S.ER11,S.ER12,S.ER13,S.ER14,
S.ER15,S.ER16,S.ER17,S.ER18,S.ER19,S.ER20,S.OT,S.ARR_OT,S.AR1,S.AR2,S.AR3,S.AR4,S.AR5,S.AR6,S.AR7,S.AR8,S.AR9,S.AR10,S.AR11,S.AR12,S.AR13,S.AR14,
S.AR15,S.AR16,S.AR17,S.AR18,S.AR19,S.AR20,S.DED1,S.DED2,S.DED3,S.DED4,S.DED5,S.DED6,S.DED7,S.DED8,S.DED9,
S.DED10,S.ESI_OT,S.ARD1,S.ARD2,S.ARD3,S.ARD4,S.ARD5,S.ARD6,S.ARD7,S.ARD8,S.ARD9,S.ARD10,S.TOTEARN,S.TOTDED,S.NETSALARY " + mq1 + " FROM EMP_MASTER A" +
    " LEFT JOIN  PAYMAIN S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID AND 1=2" +
    "left join master_setting dp on dp.master_id = a.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, a.client_id)= 1 and find_in_set(dp.client_unit_id, a.client_unit_id)= 1 " +
    " WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and (case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') " +
    "then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
                    var dtt = sgen.getdata(userCode, mq1);
                    #region CALCULATE               
                    ViewBag.scripCall = "";
                    dtt = CleanDT(dtt);
                    dtt = CalcNow(dtt, 0, false, model);
                    model[0].Col21 = "N";
                    #endregion
                    //TO SHOW ON GRID
                    #region grID
                    dtt = GiveHeadName(dtt);
                    model[0].dt1 = dtt;
                    #endregion
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vnext = "";
                    ViewBag.vcalc = "";
                    ViewBag.vgetdata = "";
                    ViewBag.scripCall += "";
                }
                else if (command == "Calculate")
                {
                    if (sgen.GetSession(MyGuid, "EDMODE") != null && sgen.GetSession(MyGuid, "EDMODE").ToString() == "Y")
                    {
                        Checkmasters(model);
                    }
                    dtm = RemoveHeadName(dtm);
                    if (model[0].Col21 == "N")
                    {
                        dtm = CalcNow(dtm, 0, false,model);
                    }
                    else
                    {
                        dtm = CalcNow(dtm, 0, true,model);
                    }
                    dtm = GiveHeadName(dtm);
                    model[0].dt1 = dtm;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vnext = "";
                    ViewBag.vcalc = "";
                    ViewBag.vgetdata = "";
                }
                else if (command == "Generate")
                {
                    if (sgen.GetSession(MyGuid, "EDMODE") != null && sgen.GetSession(MyGuid, "EDMODE").ToString() == "Y")
                    {
                        Checkmasters(model);
                    }
                    DataTable dtbase = (DataTable)sgen.GetSession(MyGuid, "dtbase");
                    dtm = RemoveHeadName(dtm);
                    var dts = sgen.getdata(userCode, "select * from paymain where 1=2");
                    var dtsalmain = sgen.getdata(userCode, "select * from salmain where 1=2");
                    sgen.SetSession(MyGuid, "dtsalmain", dtsalmain);
                    int mrows = dtm.Rows.Count;
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        //mq1 = " and vch_num<>'" + model[0].Col18.Trim() + "'";
                        isedit = true;
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from paymain where type='PAY' " +
                            "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        isedit = false;
                    }
                    var curryyyymmm = sgen.GetSession(MyGuid, "curryyyymmm").ToString();
                    DateTime currdatedt = sgen.server_datetime_dt(userCode);
                    string currdate = currdatedt.ToString("yyyy-MM-dd HH:mm:ss");
                    string vch_date = currdatedt.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    string ent_dt = currdate;
                    for (int m = 0; m < mrows; m++)
                    {
                        DataRow dr = dts.NewRow();
                        dr.BeginEdit();
                        foreach (DataColumn dc in dtm.Columns)
                        {
                            try { dr[dc.ColumnName] = dtm.Rows[m][dc.ColumnName]; }
                            catch (Exception err) { }
                        }
                        dr["REC_ID"] = "0";
                        dr["TYPE"] = "PAY";
                        if (isedit)
                        {
                            dr["CURRYYYYMMM"] = dtbase.Rows[0]["CURRYYYYMMM"].ToString();
                            dr["MONTH_ID"] = curryyyymmm.Substring(4, 3);
                            dr["VCH_NUM"] = model[0].Col18;
                            dr["VCH_DATE"] = model[0].Col16;
                            try
                            {
                                dr["M_LASTDT"] = dtbase.Rows[0]["M_LASTDT"].ToString();
                            }
                            catch (Exception err)
                            {
                                dr["M_LASTDT"] = sgen.Make_date_S(dtbase.Rows[0]["M_LASTDT"].ToString(), "dd/MM/yyyy");
                            }
                            dr["CLIENT_ID"] = model[0].Col1;
                            dr["CLIENT_UNIT_ID"] = model[0].Col2;
                            dr["ENT_BY"] = model[0].Col3;
                            dr["ENT_DATE"] = model[0].Col4;
                            dr["CREATED_DATE"] = model[0].Col23;
                        }
                        else
                        {
                            dr["VCH_NUM"] = vch_num;
                            dr["VCH_DATE"] = sgen.Make_date_S(vch_date);
                            dr["TYPE"] = "PAY";
                            dr["month_ID"] = model[0].SelectedItems1.FirstOrDefault();
                            dr["CURRYYYYMMM"] = curryyyymmm;
                            dr["CLIENT_ID"] = clientid_mst;
                            dr["CLIENT_UNIT_ID"] = unitid_mst;
                            dr["ENT_BY"] = userid_mst;
                            dr["ENT_DATE"] = currdate;
                            dr["EDIT_BY"] = "-";
                            dr["EDIT_DATE"] = currdate;
                            dr["CREATED_DATE"] = currdate;
                            dr["M_LASTDT"] = sgen.Make_date_S(dtbase.Rows[0]["M_LASTDT"].ToString(), "dd/MM/yyyy");
                        }
                        dr["EDIT_BY"] = userid_mst;
                        dr["EDIT_DATE"] = currdate;
                        dr["DEPT"] = "-";
                        dr["DEPT2"] = "-";
                        dr.EndEdit();
                        dts.Rows.Add(dr);
                    }
                    dts.AcceptChanges();
                  
                        if (model[0].Col21 == "N")
                        {
                            dts = CalcNow(dts, 1, false, model);
                        }
                        else
                        {
                            dts = CalcNow(dts, 1, true, model);
                        }
                    

                    //save dts;
                    Satransaction sat = new Satransaction(userCode, MyGuid);
                    bool ok = sgen.Update_data_fast1_uncommit(userCode, dts, "paymain", model[0].Col8, isedit, sat);
                    if (ok)
                    {
                        var salmain = (DataTable)sgen.GetSession(MyGuid, "dtsalmain");
                        if (salmain.Rows.Count > 0 && !isedit)
                        {
                            foreach (DataRow row in salmain.Rows)
                            {
                                row["created_date"] = row["ent_date"] = row["vch_date"] = sgen.Make_date_S(vch_date);
                                row["type"] = "SAL";
                                row["client_id"] = clientid_mst;
                                row["client_unit_id"] = unitid_mst;
                            }
                            var codes = salmain.Rows.OfType<DataRow>().Select(k => k[8].ToString()).ToArray();
                            cond = "type='SAL' and  trim(client_unit_id)='" + unitid_mst + "' and trim(emp_code) in ('" + string.Join("','", codes) + "')";
                            ok = sgen.Update_data_fast1_uncommit(userCode, salmain, "salmain", cond, true, sat);
                        }
                    }
                    if (ok)
                    {

                        string vty = "30";
                        mq = "Select param1 as res from controls  " +
                            "where id='000003' and upper(trim(type))='CTL'";
                        mq = sgen.getstring(userCode, mq);
                        if (mq == "Y")
                        {

                            #region Tally Save Done
                            if (isedit)
                            {
                                sat.Execute_cmd("delete from vouchers where type='" + vty + "' and invno='" + curryyyymmm + "' and client_unit_id='" + unitid_mst + "' ");
                            }
                            mq = "Select param1 as res from controls  " +
                           "where id='000007' and upper(trim(type))='CTL'";
                            var wcode = sgen.getstring(userCode, mq);
                            var tdate = sgen.Make_date_S(vch_date);
                            decimal netcr = 0, netdr = 0;
                            var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                            ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18,col43||'~'||COL44 as ahead FROM VEHICLE_MASTER WHERE TYPE='KSP' AND  CUR_STATE IN ('1','2','4') AND " +
                            "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");

                            var ldate = sgen.Make_date_S(dtbase.Rows[0]["M_LASTDT"].ToString(), "dd/MM/yyyy HH:mm:ss");
                            mq = "select to_number(nvl(max(vch_num),'0')) as vch_num from vouchers where type='" + vty + "' and client_unit_id='" + clientid_mst + "'";
                            var vchnum = sgen.genNo(userCode, mq, 6, "vch_num");

                            List<salary> sal = new List<salary>();
                            salary sal1 = new salary();

                            for (int a = 0; a < 20; a++)
                            {

                                decimal dr = 0, cr = 0;
                                try
                                {
                                    mq = "";
                                    cr = 0; dr = 0;
                                    var headname = "";
                                    var headnames = sgen.seekval_dt(Dtheadmain, "ID='ER" + (a + 1) + "'", "ahead");
                                    //if (headname.Split('~')[0].ToString().Trim() == "0")
                                    //{
                                    cr = Convert.ToDecimal(dts.Compute("sum(er" + (a + 1) + ")+sum(ar" + (a + 1) + ")", ""));
                                    headname = headnames.Split('~')[1].ToString();
                                    sal.Add(new salary { hid = headname, cramt = cr });
                                    //}
                                    //else
                                    //{
                                    dr = Convert.ToDecimal(dts.Compute("sum(er" + (a + 1) + ")+sum(ar" + (a + 1) + ")", ""));
                                    headname = headnames.Split('~')[0].ToString();
                                    sal.Add(new salary { hid = headname, dramt = dr });
                                    //}
                                    netcr += cr;
                                    netdr += dr;
                                    //     if ((cr + dr) != 0)
                                    //     {
                                    //         mq = "insert into vouchers (rec_id,ent_by,ent_date,edit_by,edit_date,vch_num,type,vch_date,invno,invdate,totremark,acode,aname,cramount,dramount" +
                                    //         ",client_id,client_unit_id) " +
                                    //" values('0','" + userid_mst + "',to_date('" + currdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + userid_mst + "',to_date('" + currdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + vchnum + "','" + vty + "',to_date('" + tdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + curryyyymmm + "'," +
                                    //"to_date('" + ldate + "','" + sgen.GetSaveSqlDateFormat() + "'),'Salary Voucher','" + headname + "','-','" + dr + "','" + cr + "'" +
                                    //",'" + clientid_mst + "','" + unitid_mst + "')";

                                    //         sat.Execute_cmd(mq);
                                    //     }


                                }
                                catch (Exception err)
                                { }


                                try

                                {
                                    mq = "";
                                    cr = 0; dr = 0;
                                    var headname = "";
                                    var headnames = sgen.seekval_dt(Dtheadmain, "ID='DED" + (a + 1) + "'", "ahead");
                                    //if (headname.Split('~')[0].ToString().Trim() == "0")
                                    //{
                                    cr = Convert.ToDecimal(dts.Compute("sum(ded" + (a + 1) + ")+sum(ard" + (a + 1) + ")", ""));
                                    headname = headnames.Split('~')[1].ToString();
                                    sal.Add(new salary { hid = headname, cramt = cr });

                                    //}
                                    //else
                                    //{
                                    dr = Convert.ToDecimal(dts.Compute("sum(ded" + (a + 1) + ")+sum(ard" + (a + 1) + ")", ""));
                                    headname = headnames.Split('~')[0].ToString();
                                    sal.Add(new salary { hid = headname, dramt = dr });
                                    netcr -= cr;
                                    netdr -= dr;
                                    //}

                                    //net -= cr + dr;
                                    //  if ((cr + dr) != 0)
                                    //  {
                                    //      mq = "insert into vouchers (rec_id,ent_by,ent_date,edit_by,edit_date,vch_num,type,vch_date,invno,invdate,totremark,acode,aname,cramount,dramount" +
                                    //          ",client_id,client_unit_id) " +
                                    //" values('0','" + userid_mst + "',to_date('" + currdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + userid_mst + "',to_date('" + currdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + vchnum + "','" + vty + "',to_date('" + tdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + curryyyymmm + "'," +
                                    //"to_date('" + ldate + "','" + sgen.GetSaveSqlDateFormat() + "'),'Salary Voucher','" + headname + "','-','" + dr + "','" + cr + "'" +
                                    //",'" + clientid_mst + "','" + unitid_mst + "')";
                                    //      sat.Execute_cmd(mq);
                                    //  }
                                }
                                catch (Exception err)
                                {
                                }
                            }
                            var headgroupby = sal.GroupBy(t => t.hid).Select(t => new
                            {
                                hid = t.Key,
                                dramount = t.Sum(dmt => dmt.dramt),
                                cramount = t.Sum(cmt => cmt.cramt)
                            }).ToList();
                            mq = "";
                            foreach (var item in headgroupby)
                            {
                                decimal val = (item.dramount - item.cramount);

                                if (val != 0)
                                {
                                    decimal creditamt = 0;
                                    decimal debitamt = 0;
                                    if (val < 0)
                                    {
                                        creditamt = Math.Abs(val);
                                    }
                                    else
                                    {
                                        debitamt = val;
                                    }
                                    mq = "insert into vouchers (rec_id,ent_by,ent_date,edit_by,edit_date,vch_num,type,vch_date,invno,invdate,totremark,acode,aname,cramount,dramount" +
                                    ",client_id,client_unit_id) " +
                           " values('0','" + userid_mst + "',to_date('" + currdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + userid_mst + "',to_date('" + currdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + vchnum + "','" + vty + "',to_date('" + tdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + curryyyymmm + "'," +
                           "to_date('" + ldate + "','" + sgen.GetSaveSqlDateFormat() + "'),'Salary Voucher','" + item.hid + "','-','" + debitamt + "','" + creditamt + "'" +
                           ",'" + clientid_mst + "','" + unitid_mst + "')";

                                    sat.Execute_cmd(mq);
                                }
                            }
                            //mq = "insert into vouchers (rec_id,ent_by,ent_date,edit_by,edit_date,vch_num,type,vch_date,invno,invdate,totremark,acode,aname,cramount,dramount,client_id,client_unit_id) " +
                            //  " values('0','" + userid_mst + "',to_date('" + currdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + userid_mst + "',to_date('" + currdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + vchnum + "','" + vty + "',to_date('" + tdate + "','" + sgen.GetSaveSqlDateFormat() + "'),'" + curryyyymmm + "'," +
                            //  "to_date('" + ldate + "','" + sgen.GetSaveSqlDateFormat() + "'),'Salary Voucher','" + wcode + "','-','0','" + net + "','" + clientid_mst + "','" + unitid_mst + "')";



                            //string xmlstc = "<ENV ELOPE>" + "\r\n";
                            //try
                            //{

                            //    xmlstc = "<ENVELOPE><HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>" +
                            //        "<BODY><IMPORTDATA><REQUESTDESC><REPORTNAME>Vouchers</REPORTNAME>" +
                            //        "<STATICVARIABLES><SVCURRENTCOMPANY>##SVCURRENTCOMPANY</SVCURRENTCOMPANY></STATICVARIABLES>" +
                            //        "</REQUESTDESC><REQUESTDATA><TALLYMESSAGE xmlns:UDF='TallyUDF' >" +
                            //        "<VOUCHER VCHTYPE='Journal'>" +
                            //        "<DATE>2-Apr-2019</DATE>" +
                            //        "<VOUCHERTYPENAME>Journal</VOUCHERTYPENAME>" +
                            //        "<NARRATION> My Naration from Code</NARRATION> " +
                            //        "<VOUCHERNUMBER>004</VOUCHERNUMBER>" +
                            //        "<REFERENCE>004</REFERENCE>" +
                            //        "<EFFECTIVEDATE>2-Apr-2019</EFFECTIVEDATE>";
                            //}
                            //catch (Exception ex)
                            //{
                            //    //MessageBox.Show(ex.Message, ex.StackTrace);
                            //}

                            //for (int a = 0; a < 20; a++)
                            //{

                            //    try
                            //    {
                            //        var headname = sgen.seekval_dt(Dtheadmain, "NAME='ER" + (a + 1) + "'", "COL44");
                            //        var er = Convert.ToDecimal(dts.Compute("sum(er" + (a + 1) + ")+sum(ar" + (a + 1) + ")", ""));
                            //        net += er;

                            //        xmlstc = xmlstc + "<ALLLEDGERENTRIES.LIST>" +
                            //            "<LEDGERNAME>ER</LEDGERNAME>" +
                            //            "<REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>" +
                            //            "<AMOUNT>-" + er + "</AMOUNT>" +
                            //            "</ALLLEDGERENTRIES.LIST>";
                            //    }
                            //    catch (Exception err)
                            //    {
                            //    }
                            //    try
                            //    {
                            //        var headname = sgen.seekval_dt(Dtheadmain, "NAME='DED" + (a + 1) + "'", "COL44");
                            //        var ded = Convert.ToDecimal(dts.Compute("sum(ded" + (a + 1) + ")+sum(ard" + (a + 1) + ")", ""));
                            //        net -= ded;
                            //        xmlstc = xmlstc + "<ALLLEDGERENTRIES.LIST>" +
                            //            "<LEDGERNAME>DED</LEDGERNAME>" +
                            //            "<REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>" +
                            //            "<AMOUNT>" + ded + "</AMOUNT>" +
                            //            "</ALLLEDGERENTRIES.LIST>";

                            //    }
                            //    catch (Exception err) { }

                            //}
                            //xmlstc = xmlstc + "<ALLLEDGERENTRIES.LIST>" +
                            //          "<LEDGERNAME>WAGES</LEDGERNAME>" +
                            //          "<REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>" +
                            //          "<AMOUNT>" + net + "</AMOUNT>" +
                            //          "</ALLLEDGERENTRIES.LIST>";
                            //xmlstc = xmlstc + "</VOUCHER></TALLYMESSAGE></REQUESTDATA></IMPORTDATA></BODY></ENVELOPE>";

                            #endregion
                        }
                        sat.Commit();
                        //sgen.Tally_Sync(xmlstc);
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vnext = "disabled='disabled'";
                        ViewBag.vcalc = "disabled='disabled'";
                        ViewBag.vgetdata = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain()
                        {
                            TList1 = mod1,
                            TList2 = mod1,
                            TList3 = mod1,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = tmodel.Col13,
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            LTM1 = new List<Tmodelmain>()
                        });
                    }
                    else
                    {
                        sat.Rollback();
                        ViewBag.scripCall = "showmsgJS(1, 'Record Not Saved', 2);";
                    }
                }
            }
            catch (Exception err)
            {
                if (err.Message.Trim() == "There is no row at position 0")
                {
                    ViewBag.scripCall = "showmsgJS(1, 'Please Check Salary Heads,Leave Heads,PF,ESI,LWF,OT and Canteen Settings properly', 2);";
                }
                else ViewBag.scripCall = "showmsgJS(1, '" + err.Message.ToString().Replace("'", "") + "', 2);";
            }
            ModelState.Clear();
            return View(model);
        }
        private DataTable RemoveHeadName(DataTable dtt)
        {
            int NETID = 0;
            DataTable Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
            DataTable DtLeaveMain = (DataTable)sgen.GetSession(MyGuid, "DtLeaveMain");
            string colname = "";
            var cols = dtt.Columns.Count;
            for (int c = 0; c < cols; c++)
            {
                colname = dtt.Columns[c].ColumnName.ToUpper().Trim();
                string headname = "", NewName = "";
                if (colname.StartsWith("ARR_"))
                {
                    colname = colname.Substring(4, colname.Length - 4);
                    headname = sgen.seekval_dt(Dtheadmain, "NAME='" + colname + "'", "ID");
                    if (!headname.Equals("0"))
                    {
                        if (headname.StartsWith("DED")) NewName = "ARD" + headname.Substring(3, headname.Length - 3);
                        else if (headname.StartsWith("ER")) NewName = "AR" + headname.Substring(2, headname.Length - 2);
                        if (!NewName.Trim().Equals("")) dtt.Columns[c].ColumnName = NewName;
                    }
                }
                else
                {
                    headname = sgen.seekval_dt(Dtheadmain, "NAME='" + colname + "'", "ID");
                    if (headname.Equals("0"))
                    {
                        headname = sgen.seekval_dt(DtLeaveMain, "NAME='" + colname + "'", "ID");
                    }
                    if (!headname.Equals("0") && (headname.StartsWith("LV") || headname.StartsWith("ER") || headname.StartsWith("DED")))
                    {
                        dtt.Columns[c].ColumnName = headname;
                    }
                }
            }
            return dtt;
        }
        private DataTable GiveHeadName(DataTable dtt)
        {
            DataTable Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
            DataTable DtLeaveMain = (DataTable)sgen.GetSession(MyGuid, "DtLeaveMain");
            int NETID = 0;
            string colname = "";
            var cols = dtt.Columns.Count;
            for (int c = 0; c < cols; c++)
            {
                colname = dtt.Columns[c].ColumnName.ToUpper().Trim();
                string headname = "", NewName = "";
                //if (NETID > 0) { dtt.Columns.Remove(dtt.Columns[c]); cols--; c--; }
                //else
                //{
                if (colname.StartsWith("ARD"))
                {
                    colname = "DED" + colname.Substring(3, colname.Length - 3);
                    headname = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "NAME");
                    NewName = "ARR_" + headname;
                }
                else if (colname.StartsWith("AR"))
                {
                    colname = "ER" + colname.Substring(2, colname.Length - 2);
                    headname = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "NAME");
                    NewName = "ARR_" + headname;
                }
                else if (colname.StartsWith("LV"))
                {
                    colname = "LV" + colname.Substring(2, colname.Length - 2);
                    headname = sgen.seekval_dt(DtLeaveMain, "id='" + colname + "'", "NAME");
                    NewName = headname;
                }
                else
                {
                    headname = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "NAME");
                    NewName = headname;
                }
                if (!headname.Equals("0")) dtt.Columns[c].ColumnName = NewName;
                //if (colname.Contains("ERRATE") || colname.Contains("DEDRATE")) { dtt.Columns.Remove(dtt.Columns[c]); cols--; c--; }
                //if (colname.Contains("NETSALARY")) NETID = c;
                //}
            }
            return dtt;
        }
        private DataTable CleanDT(DataTable dtt)
        {
            var DtLeaveMain = (DataTable)sgen.GetSession(MyGuid, "DtLeaveMain");
            var Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
            int ers = 20;
            string colname = "";
            for (int e = 1; e <= ers; e++)
            { //Leaves
                try
                {
                    colname = dtt.Columns["LV" + e].ColumnName.ToUpper().ToString();
                    var Head_Name_Actual = sgen.seekval_dt(DtLeaveMain, "id='" + colname + "'", "NAME").ToString();
                    if (Head_Name_Actual == "0") dtt.Columns.Remove(dtt.Columns[colname]);
                }
                catch (Exception err)
                {
                }
                //EARNINGS
                try
                {
                    colname = dtt.Columns["ER" + e].ColumnName.ToUpper().ToString();
                    var Head_Name_Actual = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "NAME").ToString();
                    if (Head_Name_Actual == "0") dtt.Columns.Remove(dtt.Columns[colname]);
                }
                catch (Exception err)
                {
                }
                //AREARS
                try
                {
                    colname = dtt.Columns["AR" + e].ColumnName.ToUpper().ToString();
                    var colname_T = "ER" + colname.Substring(2, colname.Length - 2);
                    var Head_Name_Actual = sgen.seekval_dt(Dtheadmain, "id='" + colname_T + "'", "NAME");
                    if (Head_Name_Actual == "0") dtt.Columns.Remove(dtt.Columns[colname]);
                }
                catch (Exception err)
                {
                }
                //DEDUCTIONS
                try
                {
                    colname = dtt.Columns["DED" + e].ColumnName.ToUpper().ToString();
                    var colname_T = "DED" + colname.Substring(3, colname.Length - 3);
                    var Head_Name_Actual = sgen.seekval_dt(Dtheadmain, "id='" + colname_T + "'", "NAME");
                    if (Head_Name_Actual == "0") dtt.Columns.Remove(dtt.Columns[colname]);
                }
                catch (Exception err)
                {
                }
                //DEDUCTIONS ARREARS
                try
                {
                    colname = dtt.Columns["ARD" + e].ColumnName.ToUpper().ToString();
                    var colname_T = "DED" + colname.Substring(3, colname.Length - 3);
                    var Head_Name_Actual = sgen.seekval_dt(Dtheadmain, "id='" + colname_T + "'", "NAME");
                    if (Head_Name_Actual == "0") dtt.Columns.Remove(dtt.Columns[colname]);
                }
                catch (Exception err)
                {
                }
            }
            return dtt;
        }
        private void Checkmasters(List<Tmodelmain> model)
        {
            #region month checking
            var curryyyymmm = sgen.GetSession(MyGuid, "curryyyymmm").ToString();
            string Fdate = "01/" + curryyyymmm.Substring(5, 2) + "/" + curryyyymmm.Substring(0, 4);
            string Ldate = DateTime.DaysInMonth(sgen.Make_int(curryyyymmm.Substring(0, 4)), sgen.Make_int(curryyyymmm.Substring(5, 2))) + "/" + curryyyymmm.Substring(5, 2)
                + "/" + curryyyymmm.Substring(0, 4);
            #endregion
            if (model[0].Chk1 && model[0].Chk2)
            {
                var Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
                string[] pfheads = new string[] { "" }, esiheads = new string[] { "" }, lwfheads = new string[] { "" };
                try
                {
                    pfheads = sgen.seekval_dt(Dtheadmain, "PFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                }
                catch (Exception err) { }
                try
                {
                    esiheads = sgen.seekval_dt(Dtheadmain, "ESIABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                }
                catch (Exception err) { }
                try
                {
                    lwfheads = sgen.seekval_dt(Dtheadmain, "LWFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                }
                catch (Exception err) { }
                //string[] pfheads = sgen.seekval_dt(Dtheadmain, "PFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                //string[] esiheads = sgen.seekval_dt(Dtheadmain, "ESIABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                //string[] lwfheads = sgen.seekval_dt(Dtheadmain, "LWFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
                mq0 = @"SELECT A.emp_category, '" + model[0].Col20 + "' AS MONTH_ID ,'" + curryyyymmm + "' CURRYYYYMMM, '" + clientid_mst + "' AS CLIENT_ID,'" + unitid_mst + "' AS CLIENT_UNIT_ID , '" + Ldate + "' as M_LASTDT, A.VCH_NUM AS EMP_CODE ,A.FIRST_NAME,ATD.MDAYS,ATD.WDAYS ,ATD.HDAYS ,ATD.LV1,ATD.LV2,ATD.LV3,ATD.LV4,ATD.LV5,ATD.LEAVES" +
                    " ,ATD.ABSENTS ,ATD.PRESENTS ,ATD.PAIDDAYS" +
                    ",ATD.LATEDAYS ,ATD.HRS,MNTS,ATD.OT_HRS,ATD.OT_HRS AS OT_HRS_V,ATD.OT_MNTS,(CASE WHEN A.ACT_HRS='0' THEN OT.hrs ELSE A.ACT_HRS END ) AS OT_DAY_HRS" +
    ",OT.rate AS OTRATE,OT.HEADS AS OTHEADS,OT.COL3 AS OT_DAY_MNTH,'" + string.Join(",", pfheads) + "' PFHEADS,'" + string.Join(",", esiheads) + "' ESIHEADS,'" + string.Join(",", lwfheads) + "' LWFHEADS," +
    "a.ispflimit as cutpf,pf.col6 as PFRATE_ER,pf.col5 as PFRATE,(CASE WHEN a.pf_limit > 0 THEN A.PF_LIMIT ELSE PF.COL29 END ) PFLIMIT" +
    ",(CASE WHEN a.pf_limit > 0 THEN A.PF_LIMIT ELSE PF.COL29 END ) PFLIMIT_ER" +
    ",ESI.COL5 AS ESIRATE,ESI.COL6 AS ESIRATE_ER,a.isesilimit as CUTESI,(CASE WHEN a.esi_limit > 0 THEN A.ESI_LIMIT ELSE ESI.col12 END) AS ESILIMIT," +
    "(CASE WHEN a.esi_limit > 0 THEN A.ESI_LIMIT ELSE ESI.col12 END) AS ESILIMIT_ER" +
    "  , (CASE WHEN LWF.COL17='0%' THEN LWF.COL11 ELSE LWF.COL17 END) AS LWFRATE,(CASE WHEN LWF.COL18='0%' THEN  LWF.COL15 ELSE LWF.COL18 END) AS LWFRATE_ER," +
"LWF.COL11 AS LWFLIMIT,LWF.COL15 AS LWFLIMIT_ER,'Y' as CUTLWF" +
    "     , A.IS_VPF AS CUTVPF,a.vpf as VPFRATE,a.vpf as VPFLIMIT,a.iscanteen ,(CASE WHEN TO_NUMBER(a.canteen)=0 THEN TO_NUMBER(CT.COL1) ELSE TO_NUMBER(a.canteen) END) CANTEENRATE " +
    ",ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
    "S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
    "S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,s.ACTRATE,nvl(atd.CANT_DED,'0') AS CANT_DED FROM EMP_MASTER A " +
    "LEFT JOIN  SALMAIN S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
    "LEFT JOIN ATTN ATD ON A.VCH_NUM = ATD.EMP_CODE AND A.CLIENT_UNIT_ID = ATD.CLIENT_UNIT_ID AND ATD.CURRYYYYMMM='" + curryyyymmm + "' " + " " +
    "INNER JOIN vehicle_master pf on a.client_unit_id = pf.client_unit_id AND PF.type = 'KPF' " +
    "INNER JOIN vehicle_master ESI on a.client_unit_id = ESI.client_unit_id AND ESI.type = 'KES' " +
    "INNER JOIN vehicle_master LWF on a.client_unit_id = LWF.client_unit_id AND LWF.type = 'KLW' " +
    "INNER JOIN enx_tab2 CT on a.client_unit_id = CT.client_unit_id AND CT.type = 'KCD' " +
    "INNER JOIN (select GROUP_CONCAT(en.col1) as heads,col2 as rate,col4 as hrs,COL3,client_unit_id from enx_tab en " +
    "where en.type = 'OTC' and en.client_unit_id = '" + unitid_mst + "' group by col2,col4,COL3,client_unit_id) OT ON OT.CLIENT_UNIT_ID=A.CLIENT_UNIT_ID " +
    "WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and (case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') " +
    "then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
                var dtbase = sgen.getdata(userCode, mq0);
                sgen.SetSession(MyGuid, "dtbase", dtbase);
            }
//            else if (model[0].Chk1)
//            {
//                mq0 = @"SELECT A.emp_category, S.MONTH_ID, S.CURRYYYYMMM, S.CLIENT_ID,S.CLIENT_UNIT_ID, '" + Ldate + "' as M_LASTDT, A.VCH_NUM AS EMP_CODE ,A.FIRST_NAME,ATD.MDAYS,ATD.WDAYS ,ATD.HDAYS ,ATD.LV1,ATD.LV2,ATD.LV3,ATD.LV4,ATD.LV5,ATD.LEAVES" +
//                    " ,ATD.ABSENTS ,ATD.PRESENTS ,ATD.PAIDDAYS" +
//                    ",ATD.LATEDAYS ,ATD.HRS,ATD.MNTS,ATD.OT_HRS,ATD.OT_HRS AS OT_HRS_V,ATD.OT_MNTS,S.OT_DAY_HRS" +
//    ",S.OTRATE,S.OTHEADS,S.OT_DAY_MNTH,S.PFHEADS,S.ESIHEADS,S.LWFHEADS,S.cutpf,S.PFRATE_ER,S.PFRATE,S.PFLIMIT,S.PFLIMIT_ER" +
//    ",S.ESIRATE,S.ESIRATE_ER,S.CUTESI,S.ESILIMIT,S.ESILIMIT_ER" +
//    "  ,S.LWFRATE,S.LWFRATE_ER,S.CUTLWF,S.LWFLIMIT,S.LWFLIMIT_ER" +
//    "     , S.CUTVPF,S.VPFRATE,S.VPFLIMIT,S.iscanteen ,S.CANTEENRATE " +
//    ",S.ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
//    "S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
//    "S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,s.ACTRATE FROM EMP_MASTER A " +
//    "LEFT JOIN  (SELECT * FROM PAYMAIN WHERE " + model[0].Col8 + ") S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
//    "LEFT JOIN ATTN ATD ON A.VCH_NUM = ATD.EMP_CODE AND A.CLIENT_UNIT_ID = ATD.CLIENT_UNIT_ID AND ATD.CURRYYYYMMM='" + curryyyymmm + "' " + " " +
//       "WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and (case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') " +
//    "then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
//                var dtbase = sgen.getdata(userCode, mq0);
//                sgen.SetSession(MyGuid, "dtbase", dtbase);
//            }
//            else if (model[0].Chk2)
//            {
//                var Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
//                string[] pfheads = new string[] { "" }, esiheads = new string[] { "" }, lwfheads = new string[] { "" };
//                try
//                {
//                    pfheads = sgen.seekval_dt(Dtheadmain, "PFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
//                }
//                catch (Exception err) { }
//                try
//                {
//                    esiheads = sgen.seekval_dt(Dtheadmain, "ESIABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
//                }
//                catch (Exception err) { }
//                try
//                {
//                    lwfheads = sgen.seekval_dt(Dtheadmain, "LWFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
//                }
//                catch (Exception err) { }
//                //string[] pfheads = sgen.seekval_dt(Dtheadmain, "PFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
//                //string[] esiheads = sgen.seekval_dt(Dtheadmain, "ESIABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
//                //string[] lwfheads = sgen.seekval_dt(Dtheadmain, "LWFABLE='Y'").AsEnumerable().Select(x => x.Field<string>("ID").ToString()).ToArray().Distinct<string>().ToArray();
//                mq0 = @"SELECT  A.emp_category,P.MONTH_ID, P.CURRYYYYMMM, P.CLIENT_ID,P.CLIENT_UNIT_ID, '" + Ldate + "' as M_LASTDT, A.VCH_NUM AS EMP_CODE ,A.FIRST_NAME,P.MDAYS,P.WDAYS ,P.HDAYS ,P.LV1,P.LV2,P.LV3,P.LV4,P.LV5,P.LEAVES" +
//                    " ,P.ABSENTS ,P.PRESENTS ,P.PAIDDAYS" +
//                    ",P.LATEDAYS ,P.HRS,P.MNTS,P.OT_HRS,P.OT_HRS AS OT_HRS_V,P.OT_MNTS,P.OT_DAY_HRS" +
//    ",OT.rate AS OTRATE,OT.HEADS AS OTHEADS,OT.COL3 AS OT_DAY_MNTH,'" + string.Join(",", pfheads) + "' PFHEADS,'" + string.Join(",", esiheads) + "' ESIHEADS,'" + string.Join(",", lwfheads) + "' LWFHEADS" +
//    ",a.ispflimit as cutpf,pf.col6 as PFRATE_ER,pf.col5 as PFRATE,(CASE WHEN a.pf_limit > 0 THEN A.PF_LIMIT ELSE PF.COL29 END ) PFLIMIT" +
//    ",(CASE WHEN a.pf_limit > 0 THEN A.PF_LIMIT ELSE PF.COL29 END ) PFLIMIT_ER" +
//    ",ESI.COL5 AS ESIRATE,ESI.COL6 AS ESIRATE_ER,a.isesilimit as CUTESI,(CASE WHEN a.esi_limit > 0 THEN A.ESI_LIMIT ELSE ESI.col12 END) AS ESILIMIT," +
//    "(CASE WHEN a.esi_limit > 0 THEN A.ESI_LIMIT ELSE ESI.col12 END) AS ESILIMIT_ER" +
//    "  ,(CASE WHEN LWF.COL17='0%' THEN LWF.COL11 ELSE LWF.COL17 END) AS LWFRATE,(CASE WHEN LWF.COL18='0%' THEN  LWF.COL15 ELSE LWF.COL18 END) AS LWFRATE_ER," +
//"LWF.COL11 AS LWFLIMIT,LWF.COL15 AS LWFLIMIT_ER,'Y' as CUTLWF" +
//    "     , A.IS_VPF AS CUTVPF,a.vpf as VPFRATE,a.vpf as VPFLIMIT,a.iscanteen ,(CASE WHEN TO_NUMBER(a.canteen)=0 THEN TO_NUMBER(CT.COL1) ELSE TO_NUMBER(a.canteen) END) CANTEENRATE " +
//    ",ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
//    "S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
//    "S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,s.ACTRATE FROM EMP_MASTER A " +
//    "LEFT JOIN  SALMAIN S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
//    "LEFT JOIN  (SELECT * FROM PAYMAIN WHERE " + model[0].Col8 + ") P ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
//    "INNER JOIN vehicle_master pf on a.client_unit_id = pf.client_unit_id AND PF.type = 'KPF' " +
//    "INNER JOIN vehicle_master ESI on a.client_unit_id = ESI.client_unit_id AND ESI.type = 'KES' " +
//    "INNER JOIN vehicle_master LWF on a.client_unit_id = LWF.client_unit_id AND LWF.type = 'KLW' " +
//    "INNER JOIN enx_tab2 CT on a.client_unit_id = CT.client_unit_id AND CT.type = 'KCD' " +
//    "INNER JOIN (select GROUP_CONCAT(en.col1) as heads,col2 as rate,col4 as hrs,COL3,client_unit_id from enx_tab en " +
//    "where en.type = 'OTC' and en.client_unit_id = '" + unitid_mst + "' group by col2,col4,COL3,client_unit_id) OT ON OT.CLIENT_UNIT_ID=A.CLIENT_UNIT_ID " +
//    "WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and (case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') " +
//    "then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
//                var dtbase = sgen.getdata(userCode, mq0);
//                sgen.SetSession(MyGuid, "dtbase", dtbase);
//            }
            else
            {
                //                mq0 = @"SELECT S.MONTH_ID, S.CLIENT_ID,S.CLIENT_UNIT_ID, s.M_LASTDT,s.VCH_NUM,S.VCH_DATE,S.CREATED_DATE,S.ENT_BY,S.ENT_DATE,S.MONTH_ID,S.CURRYYYYMMM,S.TYPE,
                //A.VCH_NUM AS EMP_CODE ,A.FIRST_NAME,S.MDAYS,S.WDAYS ,S.HDAYS ,S.LV1,S.LV2,S.LV3,S.LV4,S.LV5,S.LEAVES ,S.ABSENTS ,S.PRESENTS ,S.PAIDDAYS
                //                            ,S.LATEDAYS ,S.HRS,S.MNTS,S.OT_HRS,S.OT_MNTS,S.OT_DAY_HRS,S.OT_HRS_V,S.OTRATE,S.OTHEADS,S.PFHEADS,S.ESIHEADS,S.LWFHEADS
                //                            ,S.cutpf,S.PFRATE_ER,S.PFRATE,S.PFLIMIT,S.PFLIMIT_ER
                //                            ,S.ESIRATE,S.ESIRATE_ER,S.CUTESI,S.ESILIMIT
                //                              , S.LWFRATE,S.LWFRATE_ER,S.CUTLWF,S.LWFLIMIT,S.LWFLIMIT_ER
                //                                 , S.CUTVPF,
                //                            S.VPFRATE,S.iscanteen ,S.CANTEENRATE ,S.ERRATE1,
                //S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14,
                //                            S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9,
                //                            S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,S.ACTRATE FROM EMP_MASTER A
                //                            LEFT JOIN (select * FROM PAYMAIN WHERE " + model[0].Col8 + ") S ON A.CLIENT_UNIT_ID=S.CLIENT_UNIT_ID AND A.VCH_NUM=S.EMP_CODE " +
                //"  WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and " +
                //"(case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 and " +
                //"a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
                //                var dtbase = sgen.getdata(userCode, mq0);
                mq0 = @"SELECT S.emp_category, S.CLIENT_ID,S.CLIENT_UNIT_ID, s.M_LASTDT,s.VCH_NUM,S.VCH_DATE,S.CREATED_DATE,S.ENT_BY,S.ENT_DATE,S.MONTH_ID,S.CURRYYYYMMM,S.TYPE,
A.VCH_NUM AS EMP_CODE ,A.FIRST_NAME,S.MDAYS,S.WDAYS ,S.HDAYS ,S.LV1,S.LV2,S.LV3,S.LV4,S.LV5,S.LEAVES ,S.ABSENTS ,S.PRESENTS ,S.PAIDDAYS
                            ,S.LATEDAYS ,S.HRS,S.MNTS,S.OT_HRS,S.OT_MNTS,S.OT_DAY_HRS,S.OT_DAY_MNTH,S.OT_HRS_V,S.OTRATE,S.OTHEADS,S.PFHEADS,S.ESIHEADS,S.LWFHEADS
                            ,S.cutpf,S.PFRATE_ER,S.PFRATE,S.PFLIMIT,S.PFLIMIT_ER
                            ,S.ESIRATE,S.ESIRATE_ER,S.CUTESI,S.ESILIMIT,S.ESILIMIT_ER
                              , S.LWFRATE,S.LWFRATE_ER,S.LWFLIMIT,S.LWFLIMIT_ER,S.CUTLWF
                                 , S.CUTVPF,S.VPFLIMIT,S.VPFRATE,S.iscanteen ,S.CANTEENRATE ,S.ERRATE1,
S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14,
                            S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9,
                            S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,S.ACTRATE FROM EMP_MASTER A
                            LEFT JOIN (select * FROM PAYMAIN WHERE " + model[0].Col8 + ") S ON A.CLIENT_UNIT_ID=S.CLIENT_UNIT_ID AND A.VCH_NUM=S.EMP_CODE " +
                            " WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and " +
"(case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
                var dtbase = sgen.getdata(userCode, mq0);
                sgen.SetSession(MyGuid, "dtbase", dtbase);
            }
        }
        private DataTable CalcNow(DataTable dtt, int final, bool edmode = true,List<Tmodelmain> model= null)
        {
            int ers = 20;
            bool ToSave = Convert.ToBoolean(final);
            string colname = "";
            DataTable dtbase = (DataTable)sgen.GetSession(MyGuid, "dtbase");
            DataTable Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
            var dtroundot = sgen.getdata(userCode, "select col5 roundval,col6 roundamt,col4 FROM enx_tab WHERE type='OTC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
            var dtroundpf = sgen.getdata(userCode, "SELECT col13 roundval,cur_village roundamt FROM vehicle_master WHERE type='KPF' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
            var dtroundesi = sgen.getdata(userCode, "SELECT col9 roundval,col17 roundamt FROM vehicle_master WHERE type='KES' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
            var dtroundlwf = sgen.getdata(userCode, "SELECT col19 roundval,col20 roundamt FROM vehicle_master WHERE type='KLW' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
            var EsiRule = sgen.seekval(userCode, "select col19 as amount from vehicle_master where type='KES' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "amount");
            var otroundval = dtroundot.Rows[0]["roundval"].ToString().Trim();
            int otroundamt = Convert.ToInt16(dtroundot.Rows[0]["roundamt"].ToString().Trim());
            //pf
            var pfroundval = dtroundpf.Rows[0]["roundval"].ToString().Trim();
            int pfroundamt = Convert.ToInt16(dtroundpf.Rows[0]["roundamt"].ToString().Trim());
            //esi
            var esiroundval = dtroundesi.Rows[0]["roundval"].ToString().Trim();
            int esiroundamt = Convert.ToInt16(dtroundesi.Rows[0]["roundamt"].ToString().Trim());
            var dtallround = sgen.getdata(userCode, "select col7 rndtype,cur_village rndamt,COL2 hid from vehicle_master where type='KSP' and client_id='" + clientid_mst + "'");
            //lwf
            var lwfroundval = dtroundlwf.Rows[0]["roundval"].ToString().Trim();
            int lwfroundamt = Convert.ToInt16(dtroundlwf.Rows[0]["roundamt"].ToString().Trim());
            string[] OTheads = dtbase.Rows[0]["OTHEADS"].ToString().Split(',');
            string[] pfheads = dtbase.Rows[0]["pfheads"].ToString().Split(',');
            string[] esiheads = dtbase.Rows[0]["esiheads"].ToString().Split(',');
            string[] lwfheads = dtbase.Rows[0]["lwfheads"].ToString().Split(',');
            string Ldate = dtbase.Rows[0]["M_LASTDT"].ToString();
            string CURRYYYYMMM = dtbase.Rows[0]["CURRYYYYMMM"].ToString();
            mq0 = "SELECT  A.emp_category, '" + CURRYYYYMMM.Substring(4, 3) + "' AS MONTH_ID , '" + CURRYYYYMMM + "' as  CURRYYYYMMM, '" + Ldate + "' as M_LASTDT,TO_CHAR(S.EFF_DT,'dd/MM/yyyy') AS EFF_DT,TO_CHAR(S.APPL_DT,'dd/MM/yyyy') AS APPL_DT, A.VCH_NUM AS EMP_CODE ,A.FIRST_NAME,ATD.MDAYS,ATD.WDAYS ,ATD.HDAYS ,ATD.LV1,ATD.LV2,ATD.LV3,ATD.LV4,ATD.LV5,ATD.LEAVES" +
               " ,ATD.ABSENTS ,ATD.PRESENTS ,ATD.PAIDDAYS" +
               ",ATD.LATEDAYS ,ATD.HRS,MNTS,ATD.OT_HRS,ATD.OT_HRS AS OT_HRS_V,ATD.OT_MNTS,(CASE WHEN A.ACT_HRS='0' THEN OT.hrs ELSE A.ACT_HRS END ) AS OT_DAY_HRS" +
",OT.rate AS OTRATE,OT.HEADS AS OTHEADS,OT.COL3 AS OT_DAY_MNTH,'" + string.Join(",", pfheads) + "' PFHEADS,'" + string.Join(",", esiheads) + "' ESIHEADS,'" + string.Join(",", lwfheads) + "'" +
" LWFHEADS,a.ispflimit as cutpf,pf.col6 as PFRATE_ER,pf.col5 as PFRATE,(CASE WHEN a.pf_limit > 0 THEN A.PF_LIMIT ELSE PF.COL29 END ) PFLIMIT," +
"(CASE WHEN a.pf_limit > 0 THEN A.PF_LIMIT ELSE PF.COL29 END ) PFLIMIT_ER" +
",ESI.COL5 AS ESIRATE,ESI.COL6 AS ESIRATE_ER,a.isesilimit as CUTESI,(CASE WHEN a.esi_limit > 0 THEN A.ESI_LIMIT ELSE ESI.col12 END) AS ESILIMIT," +
"(CASE WHEN a.esi_limit > 0 THEN A.ESI_LIMIT ELSE ESI.col12 END) AS ESILIMIT_ER" +
"  , (CASE WHEN LWF.COL17='0%' THEN LWF.COL11 ELSE LWF.COL17 END) AS LWFRATE,(CASE WHEN LWF.COL18='0%' THEN  LWF.COL15 ELSE LWF.COL18 END) AS LWFRATE_ER," +
"LWF.COL11 AS LWFLIMIT,LWF.COL15 AS LWFLIMIT_ER,'Y' as CUTLWF " +
"  , A.IS_VPF AS CUTVPF,a.vpf as VPFRATE,a.vpf as VPFLIMIT,a.iscanteen ,(CASE WHEN TO_NUMBER(a.canteen)=0 THEN TO_NUMBER(CT.COL1) ELSE TO_NUMBER(a.canteen) END) CANTEENRATE " +
",ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
"S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
"S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,s.ACTRATE,NVL(ATD.CANT_DED,'0') AS CANT_DED FROM EMP_MASTER A " +
"INNER JOIN  EMPINCR S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  AND LAST_DAY(APPL_DT)=LAST_DAY(TO_DATE('" + Ldate + "','DD/MM/yyyy'))" +
"LEFT JOIN ATTN ATD ON A.VCH_NUM = ATD.EMP_CODE AND A.CLIENT_UNIT_ID = ATD.CLIENT_UNIT_ID AND ATD.CURRYYYYMMM='" + CURRYYYYMMM + "' " + " " +
"INNER JOIN vehicle_master pf on a.client_unit_id = pf.client_unit_id AND PF.type = 'KPF' " +
"INNER JOIN vehicle_master ESI on a.client_unit_id = ESI.client_unit_id AND ESI.type = 'KES' " +
"INNER JOIN vehicle_master LWF on a.client_unit_id = LWF.client_unit_id AND LWF.type = 'KLW' " +
"INNER JOIN enx_tab2 CT on a.client_unit_id = CT.client_unit_id AND CT.type = 'KCD' " +
"INNER JOIN (select GROUP_CONCAT(en.col1) as heads,col2 as rate,col4 as hrs,COL3,client_unit_id from enx_tab en " +
"where en.type = 'OTC' and en.client_unit_id = '" + unitid_mst + "' group by col2,col4,client_unit_id,COL3) OT ON OT.CLIENT_UNIT_ID=A.CLIENT_UNIT_ID " +
"WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and (case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt> trunc(to_date('" + Ldate + "','dd/MM/yyyy'),'month')  " +
"then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Ldate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
            DataTable dtincr = new DataTable();
            if (!edmode)
            {
                dtincr = sgen.getdata(userCode, mq0);
            }
            var dtsalmain = (DataTable)sgen.GetSession(MyGuid, "dtsalmain");
            int rows = dtt.Rows.Count;
            if (dtincr.Rows.Count > 0)
            {
                ViewBag.scripCall = "showmsgJS(1, 'This Month Has Increment of Some Employees," +
                    "Saving This Month Salary will change the Master Rate of Employees which can not be rollbacked.Be Sure Before Saving', 1);";
            }
            for (int r = 0; r < rows; r++)
            {
                bool hadesi = false, hasarrear = false;
                Decimal PFABLE = 0, ESIABLE = 0, LWFABLE = 0, PFABLE_ARR = 0, ESIABLE_ARR = 0, LWFABLE_ARR = 0, TOTEARN = 0,
                        TOTDED = 0, OTABLE = 0, ESICHECK = 0,OTHER_ERN=0;
                decimal tmaxpf = 0;
                decimal paidays = 0, monthday = 0, presentdays = 0, arr_days = 0;
                string EMP_CODE = dtt.Rows[r]["EMP_CODE"].ToString();
                //dtt.Rows[r].BeginEdit();
                DataRow BASEROW, BASEROW_OLD = null;
                DataTable DTARRS = new DataTable();
                try
                {
                    BASEROW = dtbase.Select("emp_code='" + EMP_CODE.Split('-')[1].Trim() + "'")[0];
                    dtt.Rows[r]["EMP_CODE"] = EMP_CODE.Split('-')[1].Trim();
                    EMP_CODE = EMP_CODE.Split('-')[1].Trim();
                }
                catch (Exception err)
                {
                    BASEROW = dtbase.Select("emp_code='" + EMP_CODE + "'")[0];
                    dtt.Rows[r]["EMP_CODE"] = EMP_CODE;
                }
                try
                {
                    if (dtincr.Rows.Count > 0)
                    {
                        var FROWS = dtincr.Select("emp_code='" + EMP_CODE + "' and curryyyymmm='" + CURRYYYYMMM + "'");
                        if (FROWS.Count() > 0)
                        {
                            BASEROW_OLD = BASEROW;
                            BASEROW = FROWS[0];
                            hasarrear = true;
                            DTARRS = sgen.getdata(userCode, "SELECT * FROM PAYMAIN WHERE " +
                                "M_LASTDT BETWEEN to_date('" + BASEROW["EFF_DT"].ToString() + "','dd/MM/yyyy') AND  " +
                                " to_date('" + BASEROW["APPL_DT"].ToString() + "','dd/MM/yyyy') AND EMP_CODE='" + EMP_CODE + "'");
                            if (ToSave && sgen.GetSession(MyGuid, "EDMODE").ToString() != "Y")
                            {
                                DataRow drsal = dtsalmain.NewRow();
                                foreach (DataColumn dc in dtsalmain.Columns)
                                {
                                    drsal["REC_ID"] = "0";
                                    try
                                    {
                                        drsal[dc] = BASEROW[dc.ColumnName];
                                    }
                                    catch (Exception ERR) { }
                                }
                                dtsalmain.Rows.Add(drsal);
                            }
                        }
                    }
                    monthday = sgen.Make_decimal(BASEROW["mdays"].ToString());
                    paidays = sgen.Make_decimal(BASEROW["paiddays"].ToString());
                    presentdays = sgen.Make_decimal(BASEROW["presents"].ToString());
                    dtt.Rows[r]["MDAYS"] = BASEROW["MDAYS"];
                    dtt.Rows[r]["WDAYS"] = BASEROW["WDAYS"];
                    dtt.Rows[r]["HDAYS"] = BASEROW["HDAYS"];
                    dtt.Rows[r]["LEAVES"] = BASEROW["LEAVES"];
                    dtt.Rows[r]["ABSENTS"] = BASEROW["ABSENTS"];
                    dtt.Rows[r]["PRESENTS"] = BASEROW["PRESENTS"];
                    dtt.Rows[r]["PAIDDAYS"] = BASEROW["PAIDDAYS"];
                    dtt.Rows[r]["LATEDAYS"] = BASEROW["LATEDAYS"];
                    //if (userCode.Trim().ToUpper().Equals("SKYKESHO"))
                    {
                        dtt.Rows[r]["DED5"] = BASEROW["CANT_DED"];
                    }
                    dtt.Rows[r]["LV1"] = BASEROW["LV1"];
                    dtt.Rows[r]["LV2"] = BASEROW["LV2"];
                    dtt.Rows[r]["LV3"] = BASEROW["LV3"];
                    dtt.Rows[r]["LV4"] = BASEROW["LV4"];
                    dtt.Rows[r]["LV5"] = BASEROW["LV5"];
                    
                }
                catch (Exception ERR)
                {
                }
                try
                {
                    //EARNINGS
                    ers = 20;
                    for (int e = 1; e <= ers; e++)
                    {
                        try
                        {
                            decimal earned = 0;
                            decimal headval_diff = 0;
                            colname = dtt.Columns["ER" + e].ColumnName.ToUpper().ToString();
                            var iseditable = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "cur_tehsil").ToString();
                            var hid = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "vch_num");
                            if (ToSave)
                            {
                                dtt.Rows[r]["ERRATE" + e] = BASEROW["ERRATE" + e].ToString();
                            }
                            if (hid == "000007")
                            {
                                var headval = sgen.Make_decimal(BASEROW["ERRATE" + e].ToString());
                                if (iseditable.ToString().Trim().Equals("N"))
                                {
                                    decimal CRATE = 0;
                                    var iscanteen = BASEROW["iscanteen"].ToString();
                                    if (iscanteen.Trim().Equals("Y"))
                                    {
                                        CRATE = sgen.Make_decimal(BASEROW["canteenRATE"].ToString());
                                        earned = CRATE * sgen.RoundDown(presentdays, 1);
                                        earned = Math.Round(earned, 2);
                                        dtt.Rows[r][colname] = Math.Round(earned, 2);
                                        if (ToSave)
                                        {
                                            dtt.Rows[r]["ISCANTEEN"] = iscanteen;
                                            dtt.Rows[r]["CANTEEN_F"] = Math.Round(earned, 2);
                                            dtt.Rows[r]["CANTEENRATE"] = CRATE;
                                        }
                                    }
                                }
                                else
                                {
                                    earned = Math.Round(sgen.Make_decimal(dtt.Rows[r]["ER" + e].ToString()), 2);
                                }
                                decimal arr_Val = 0;
                                if (hasarrear)
                                {
                                    //DateTime eff_dt = (DateTime)BASEROW["eff_dt"];
                                    headval_diff = sgen.Make_decimal(BASEROW["ERRATE" + e].ToString()) - sgen.Make_decimal(BASEROW_OLD["ERRATE" + e].ToString());
                                    foreach (DataRow dr in DTARRS.Rows)
                                    {
                                        arr_Val += Math.Round((headval_diff / sgen.Make_decimal(dr["MDAYS"].ToString())) * sgen.Make_decimal(dr["PAIDDAYS"].ToString()), 2);
                                    }
                                }
                                else
                                {
                                    arr_Val = sgen.Make_decimal(dtt.Rows[r]["AR" + e].ToString());
                                }
                                dtt.Rows[r]["AR" + e] = arr_Val;
                                dtt.Rows[r][colname] = Math.Round(earned, 2);
                                TOTEARN += Math.Round(earned, 2) + Math.Round(arr_Val, 2);
                                if (pfheads.Contains(colname)) { PFABLE += Math.Round(earned, 2); PFABLE_ARR += Math.Round(arr_Val, 2); }
                                if (esiheads.Contains(colname)) { ESIABLE += Math.Round(earned, 2); ESICHECK += Math.Round(headval, 2); ESIABLE_ARR += Math.Round(arr_Val, 2); }
                                if (lwfheads.Contains(colname)) { LWFABLE += Math.Round(earned, 2); LWFABLE += Math.Round(arr_Val, 2); }
                                if (OTheads.Contains(hid)) OTABLE += headval;
                            }
                            else
                            {
                                string rndtype = sgen.seekval_dt(dtallround, "hid='" + colname + "'", "rndtype");
                                int rndamt = sgen.Make_int(sgen.seekval_dt(dtallround, "hid='" + colname + "'", "rndamt"));
                                var headval = sgen.Make_decimal(BASEROW["ERRATE" + e].ToString());
                                if (iseditable.ToString().Trim().Equals("N")) earned = Math.Round((headval / monthday) * paidays, 2);
                                else earned = sgen.Make_decimal(dtt.Rows[r]["ER" + e].ToString());
                                dtt.Rows[r][colname] = sgen.Roundval(rndtype, earned, rndamt);
                                decimal arr_Val = 0;
                                if (hasarrear)
                                {
                                    //DateTime eff_dt = (DateTime)BASEROW["eff_dt"];
                                    headval_diff = sgen.Make_decimal(BASEROW["ERRATE" + e].ToString()) - sgen.Make_decimal(BASEROW_OLD["ERRATE" + e].ToString());
                                    foreach (DataRow dr in DTARRS.Rows)
                                    {
                                        arr_Val += Math.Round((headval_diff / sgen.Make_decimal(dr["MDAYS"].ToString())) * sgen.Make_decimal(dr["PAIDDAYS"].ToString()), 2);
                                    }
                                }
                                else
                                {
                                    arr_Val = sgen.Make_decimal(dtt.Rows[r]["AR" + e].ToString());
                                }
                                dtt.Rows[r]["AR" + e] = sgen.Roundval(rndtype, arr_Val, rndamt);
                                if (pfheads.Contains(colname)) { PFABLE += sgen.Roundval(rndtype, earned, rndamt); PFABLE_ARR += sgen.Roundval(rndtype, arr_Val, rndamt); }
                                if (esiheads.Contains(colname))
                                {
                                    ESIABLE += sgen.Roundval(rndtype, earned, rndamt); ESICHECK += Math.Round(headval, 2);
                                    ESIABLE_ARR += sgen.Roundval(rndtype, arr_Val, rndamt);
                                }
                                if (lwfheads.Contains(colname)) { LWFABLE += sgen.Roundval(rndtype, earned, rndamt); LWFABLE += sgen.Roundval(rndtype, arr_Val, rndamt); }
                                if (OTheads.Contains(hid))
                                {
                                    OTABLE += headval;
                                }
                                TOTEARN += sgen.Roundval(rndtype, earned, rndamt) + sgen.Roundval(rndtype, arr_Val, rndamt);
                                if (hid == "000005")
                                {

                                    OTHER_ERN = sgen.Roundval(rndtype, earned, rndamt) + sgen.Roundval(rndtype, arr_Val, rndamt);
                                }
                            }
                            
                        }
                        catch (Exception err)
                        {
                            break;
                        }
                    }
                    //DEDUCTIONS
                    ers = 10;
                    for (int e = 1; e <= ers; e++)
                    {
                        try
                        {
                            if (ToSave)
                            {
                                dtt.Rows[r]["DEDRATE" + e] = BASEROW["DEDRATE" + e].ToString();
                            }
                            colname = dtt.Columns["DED" + e].ColumnName.ToUpper().ToString();
                            var hid = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "vch_num");
                            switch (hid)
                            {
                                //Employee PF
                                #region
                                case "000011":
                                    decimal ded = 0, PFempl = 0, PFempr = 0, PF_AR = 0;
                                    tmaxpf = 0;
                                    string ispflimit = "";
                                    try
                                    {
                                        ispflimit = BASEROW["cutpf"].ToString();
                                        if (ispflimit.Trim().Equals("Y"))
                                        {
                                            tmaxpf = sgen.Make_decimal(BASEROW["pflimit"].ToString().Replace("%", "").Trim());
                                            if (ToSave) dtt.Rows[r]["CUTPF"] = "Y";
                                            if (tmaxpf > 0)
                                            {
                                                PFempl = sgen.Make_decimal(BASEROW["PFRATE"].ToString().Replace("%", "").Trim());
                                                PFempr = sgen.Make_decimal(BASEROW["PFRATE_ER"].ToString().Replace("%", "").Trim());
                                                if (PFABLE > tmaxpf) PFABLE = tmaxpf;
                                                ded = ((PFABLE * PFempl) / 100);
                                                PF_AR = ((PFABLE_ARR * PFempl) / 100);
                                            }
                                        }
                                    }
                                    catch (Exception ex) { dtt.Rows[r]["DED" + e] = 0; }
                                    dtt.Rows[r]["DED" + e] = sgen.Roundval(pfroundval, ded + PF_AR, pfroundamt);
                                    //dtt.Rows[r]["ARD" + e] = sgen.Roundval(pfroundval, PF_AR, pfroundamt);
                                    dtt.Rows[r]["ARD" + e] = "0";
                                    if (ToSave)
                                    {
                                        dtt.Rows[r]["CUTPF"] = ispflimit;
                                        dtt.Rows[r]["PF_F"] = sgen.Roundval(pfroundval, ded + PF_AR, pfroundamt);
                                        dtt.Rows[r]["PFWAGES"] = PFABLE + PFABLE_ARR;
                                        dtt.Rows[r]["PFRATE"] = BASEROW["PFRATE"].ToString();
                                        dtt.Rows[r]["PFLIMIT"] = sgen.Make_decimal(BASEROW["pflimit"].ToString().Replace("%", "").Trim());
                                        dtt.Rows[r]["PFHEADS"] = String.Join(",", pfheads);
                                        dtt.Rows[r]["PF_ER"] = sgen.Roundval(pfroundval, (((PFABLE + PFABLE_ARR) * PFempr) / 100), pfroundamt);
                                        dtt.Rows[r]["PFWAGES_ER"] = PFABLE + PFABLE_ARR;
                                        dtt.Rows[r]["PFRATE_ER"] = BASEROW["PFRATE_ER"].ToString();
                                        dtt.Rows[r]["PFLIMIT_ER"] = sgen.Make_decimal(BASEROW["pflimit_er"].ToString().Replace("%", "").Trim());
                                        //dtt.Rows[r]["PF_AR"] = sgen.Roundval(pfroundval, PF_AR, pfroundamt);
                                    }
                                    TOTDED += sgen.Roundval(pfroundval, ded + PF_AR, pfroundamt);
                                    //TOTDED += sgen.Roundval(pfroundval, ded, pfroundamt) + sgen.Roundval(pfroundval, PF_AR, pfroundamt);
                                    break;
                                #endregion
                                //Employee ESI
                                #region
                                case "000014":
                                    decimal esi_ar = 0, ESIemp = 0, ESIempr = 0;
                                    tmaxpf = 0; ded = 0;
                                    string isesilimit = "";
                                    ded = Convert.ToDecimal(dtt.Rows[r]["DED" + e].ToString());
                                    if (!model[0].Chk3)
                                    {
                                        try
                                        {
                                            isesilimit = BASEROW["cutesi"].ToString();
                                            if (isesilimit.Trim().Equals("Y"))
                                            {
                                                if (EsiRule.Trim().Equals("1"))
                                                {
                                                    string esimntid = "000";
                                                    decimal monthiddd = sgen.Make_decimal(BASEROW["month_id"].ToString());
                                                    if (monthiddd > 4 && monthiddd < 10)
                                                    {
                                                        esimntid = "004";
                                                    }
                                                    else if (monthiddd > 10 || monthiddd < 4)
                                                    {
                                                        esimntid = "010";
                                                    }
                                                    mq2 = "select ESI_F as val from PAYMAIN where  month_id='" + esimntid + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_code='" + EMP_CODE + "'";
                                                    mq2 = sgen.seekval(userCode, mq2, "val");
                                                    if (sgen.Make_decimal(mq2) > 0) hadesi = true;
                                                }
                                                tmaxpf = sgen.Make_decimal(BASEROW["ESIlimit"].ToString().Replace("%", "").Trim());
                                                if (ToSave) dtt.Rows[r]["CUTESI"] = "Y";
                                                if (tmaxpf > 0)
                                                {
                                                    ESIemp = sgen.Make_decimal(BASEROW["ESIRATE"].ToString().Replace("%", "").Trim());
                                                    ESIempr = sgen.Make_decimal(BASEROW["ESIRATE_ER"].ToString().Replace("%", "").Trim());
                                                    if (!hadesi && ESICHECK > tmaxpf)
                                                    {
                                                        ESIABLE = 0;
                                                        ESIABLE_ARR = 0;
                                                    }
                                                    else
                                                    {
                                                        ded = ((ESIABLE * ESIemp) / 100);
                                                        esi_ar = ((ESIABLE_ARR * ESIemp) / 100);
                                                    }
                                                }
                                            }
                                        }
                                        catch (Exception ex) { dtt.Rows[r]["DED" + e] = 0; }
                                        dtt.Rows[r]["DED" + e] = sgen.Roundval(esiroundval, ded + esi_ar, esiroundamt);
                                    }
                                    //dtt.Rows[r]["ARD" + e] = sgen.Roundval(pfroundval, esi_ar, pfroundamt);
                                    dtt.Rows[r]["ARD" + e] = "0";
                                    TOTDED += sgen.Roundval(esiroundval, ded + esi_ar, esiroundamt);
                                    //TOTDED += sgen.Roundval(esiroundval, ded, esiroundamt) + sgen.Roundval(esiroundval, esi_ar, esiroundamt);
                                    if (ToSave)
                                    {
                                        dtt.Rows[r]["CUTESI"] = isesilimit;
                                        dtt.Rows[r]["ESI_F"] = sgen.Roundval(esiroundval, ded + esi_ar, esiroundamt);                                        
                                        dtt.Rows[r]["ESIWAGES"] = ESIABLE + ESIABLE_ARR;
                                        dtt.Rows[r]["ESIRATE"] = BASEROW["ESIRATE"].ToString();
                                        dtt.Rows[r]["ESILIMIT"] = BASEROW["ESILIMIT"].ToString();
                                        dtt.Rows[r]["ESIHEADS"] = String.Join(",", esiheads);
                                        dtt.Rows[r]["ESI_ALL"] = ded + esi_ar;
                                        //dtt.Rows[r]["ESI_AR"] = sgen.Roundval(esiroundval, esi_ar, esiroundamt);
                                    }
                                    break;
                                #endregion
                                //Employee VPF
                                #region
                                case "000020":
                                    PFempl = 0; ded = 0;
                                    string isvpf = "";
                                    decimal vpf_ar = 0;
                                    try
                                    {
                                        isvpf = BASEROW["CUTVPF"].ToString();
                                        if (isvpf.Trim().Equals("Y"))
                                        {
                                            PFempl = sgen.Make_decimal(BASEROW["PFRATE"].ToString().Replace("%", "").Trim());
                                            ded = ((PFABLE * sgen.Make_decimal(BASEROW["VPFRATE"].ToString().Replace("%", "").Trim())) / 100);
                                            vpf_ar = ((PFABLE_ARR * PFempl) / 100);
                                        }
                                    }
                                    catch (Exception ex) { dtt.Rows[r]["DED" + e] = 0; }
                                    dtt.Rows[r]["DED" + e] = Math.Round(ded + vpf_ar);
                                    //dtt.Rows[r]["ARD" + e] = Math.Round(vpf_ar);
                                    TOTDED += Math.Round(ded) + Math.Round(vpf_ar);
                                    if (ToSave)
                                    {
                                        dtt.Rows[r]["CUTVPF"] = isvpf;
                                        //dtt.Rows[r]["VPF_AR"] = Math.Round(vpf_ar + ded);
                                        dtt.Rows[r]["VPF_F"] = Math.Round(ded + vpf_ar);
                                        dtt.Rows[r]["VPFWAGES"] = PFABLE + PFABLE_ARR;
                                        dtt.Rows[r]["VPFRATE"] = sgen.Make_decimal(BASEROW["VPFRATE"].ToString().Replace("%", "").Trim());
                                        dtt.Rows[r]["VPFLIMIT"] = sgen.Make_decimal(BASEROW["VPFLIMIT"].ToString().Replace("%", "").Trim());
                                    }
                                    break;
                                #endregion
                                //Employee LWF
                                #region
                                case "000017":
                                    ded = 0;
                                    decimal LWFEMPL = 0, LWFEMPR = 0;
                                    var ISLWF = BASEROW["CUTLWF"].ToString();
                                    try
                                    {
                                        if (ISLWF.Trim().Equals("Y") && paidays > 0)
                                        {
                                            LWFEMPL = sgen.Make_decimal(BASEROW["LWFRATE"].ToString().Replace("%", "").Trim());
                                            if (!BASEROW["LWFRATE"].ToString().EndsWith("%"))
                                            {
                                                ded = sgen.Roundval(lwfroundval, LWFEMPL, lwfroundamt);
                                            }
                                            else
                                            {
                                                ded = ((LWFABLE * LWFEMPL) / 100);
                                                var llimit = sgen.Make_decimal(BASEROW["LWFLIMIT"].ToString());
                                                if (ded > llimit) ded = llimit;
                                                ded = sgen.Roundval(lwfroundval, ded, lwfroundamt);
                                            }
                                        }
                                    }
                                    catch (Exception ex) { dtt.Rows[r]["DED" + e] = 0; }
                                    dtt.Rows[r]["DED" + e] = ded;
                                    if (ToSave)
                                    {
                                        decimal deder = 0;
                                        LWFEMPR = sgen.Make_decimal(BASEROW["LWFRATE_ER"].ToString().Replace("%", "").Trim());
                                        if (!BASEROW["LWFRATE_ER"].ToString().EndsWith("%"))
                                        {
                                            deder = LWFEMPR;
                                        }
                                        else
                                        {
                                            deder = ((LWFABLE * LWFEMPR) / 100);
                                            var llimit = sgen.Make_decimal(BASEROW["LWFLIMIT_ER"].ToString());
                                            if (deder > llimit) deder = llimit;
                                        }
                                        dtt.Rows[r]["LWF_F"] = ded;
                                        dtt.Rows[r]["LWFWAGES"] = LWFABLE;
                                        dtt.Rows[r]["LWFRATE"] = BASEROW["LWFRATE"];
                                        dtt.Rows[r]["LWFLIMIT"] = sgen.Make_decimal(BASEROW["LWFLIMIT"].ToString());
                                        dtt.Rows[r]["CUTLWF"] = ISLWF;
                                        //LWF Emplr
                                        dtt.Rows[r]["LWF_ER"] = sgen.Roundval(lwfroundval, deder, lwfroundamt);
                                        //dtt.Rows[r]["LWF_ER"] = ded * 2;
                                        dtt.Rows[r]["LWFWAGES_ER"] = LWFABLE;
                                        dtt.Rows[r]["LWFRATE_ER"] = BASEROW["LWFRATE_ER"];
                                        dtt.Rows[r]["LWFLIMIT_ER"] = sgen.Make_decimal(BASEROW["LWFLIMIT_ER"].ToString());
                                        dtt.Rows[r]["LWFHEADS"] = String.Join(",", lwfheads);
                                    }
                                    TOTDED += sgen.Roundval(lwfroundval, ded, lwfroundamt);
                                    break;
                                #endregion
                                //Employee ADVANCE
                                #region Advance
                                case "000021":
                                    //yyyymmm ==mmm  and year 
                                    // c# code mmm=month
                                    //month+year 
                                    ded = 0;
                                    decimal bal = 0;
                                    ded = sgen.Make_decimal(dtt.Rows[r]["DED" + e].ToString());
                                    
                                   
                                        var curryyyymmm = sgen.GetSession(MyGuid, "curryyyymmm").ToString();
                                        var monthname = sgen.seekval(userCode, "select master_name monthname from master_setting where type='MNT'" +
                                            " and master_id='" + curryyyymmm.Substring(4, 3).Trim() + "'", "monthname");
                                        monthname = monthname + " - " + curryyyymmm.Substring(0, 4).Trim();
                                    //var dtadv = "select sum(total_paid) bal_adv ,sum(inst) as inst,sum(total_adv) as adv from ( " +
                                    //    "select sum(col5) total_paid,'0' inst,'0' total_adv  from enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and" +
                                    //    " client_unit_id = '" + unitid_mst + "' " +
                                    //    "and col1 = '" + EMP_CODE + "' union all select  0 total_paid," +
                                    //    "col5 inst, col7 total_adv from enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' " +
                                    //    "and col1 = '" + EMP_CODE + "' and col4='" + monthname + "' union all select * from " +
                                    //    "(select -sum(ADV_F) adv_amount, '0' a, '0' n from paymain where emp_code = '" + EMP_CODE + "' and type='PAY' " +
                                    //    "and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'" +
                                    //    " and CURRYYYYMMM!='" + curryyyymmm + "') a) kk";
                                    var mq = "select sum(total_adv)-sum(total_paid) bal_adv ,sum(inst) as inst,sum(total_adv) as adv from ( " +
                                   "select sum(col10) total_paid,'0' inst,'0' total_adv from enx_tab2 where type = 'ADJ' and client_unit_id = '" + unitid_mst + "' " +
                                   "and col1 = '" + EMP_CODE + "' union all select sum(ADV_F) adv_amount, '0' a, '0' n from paymain where " +
                                   "emp_code = '" + EMP_CODE + "' and type = 'PAY' and client_unit_id = '" + unitid_mst + "' and curryyyymmm<>'" + curryyyymmm + "' " +
                                   "union all select total_paid,inst,total_adv from (select distinct vch_num,  0 total_paid," +
                                   "(CASE when TO_CHAR(DATE3,'YYYY')<>'1900' and TO_CHAR(DATE3,'YYYY')||'0'||TO_CHAR(DATE3,'MM')<" + curryyyymmm + " THEN '0' ELSE  col8 END)  inst, col7 total_adv" +
                                " from enx_tab2 where type = 'HAS' and client_unit_id = '" + unitid_mst + "' and col1 = '" + EMP_CODE + "') a ) kk";
                                    decimal dednew = 0;
                                    try
                                        {
                                            var adv = sgen.getdata(userCode, mq);
                                            bal = sgen.Make_decimal(adv.Rows[0]["bal_adv"].ToString());
                                            var given = sgen.Make_decimal(adv.Rows[0]["adv"].ToString());
                                            var inst = sgen.Make_decimal(adv.Rows[0]["inst"].ToString());
                                            if (bal < inst) inst = bal;
                                            dednew = inst;
                                        }
                                        catch (Exception err)
                                        {
                                            dtt.Rows[r]["DED" + e] = "0";
                                        }

                                    

                                    if (((model[0].Chk1 && model[0].Chk2 && edmode == true) || edmode == false))
                                    {
                                        TOTDED += dednew;
                                        dtt.Rows[r]["DED" + e] = dednew;
                                        if (ToSave)
                                        {
                                            dtt.Rows[r]["ADV_BAL"] = bal;
                                            dtt.Rows[r]["ADV_F"] = dednew;

                                        }
                                    }
                                    else
                                    {
                                        TOTDED += ded;
                                        dtt.Rows[r]["DED" + e] = ded;
                                        if (ToSave)
                                        {
                                            dtt.Rows[r]["ADV_BAL"] = bal;
                                            dtt.Rows[r]["ADV_F"] = ded;

                                        }
                                    }
                                    break;
                                #endregion
                                default:
                                    ded = 0;
                                    decimal ARR_ded = 0;
                                    var iseditable = sgen.seekval_dt(Dtheadmain, "vch_num='" + hid + "'", "cur_tehsil").ToString();
                                    var attndep = sgen.seekval_dt(Dtheadmain, "vch_num='" + hid + "'", "col18").ToString();
                                    if (attndep.ToUpper().Equals("Y") && iseditable.ToString().Trim().Equals("N"))
                                    {
                                        var headval = sgen.Make_decimal(BASEROW["DEDRATE" + e].ToString());
                                        ded = Math.Round((headval / monthday) * presentdays, 2);
                                        var ARR_HD = sgen.Make_decimal(dtt.Rows[r]["ER" + e]);
                                        ARR_ded = Math.Round((ARR_HD / monthday) * presentdays, 2);
                                    }
                                    else if (iseditable.ToString().Trim().Equals("N"))
                                    {
                                        var headval = sgen.Make_decimal(BASEROW["DEDRATE" + e].ToString());
                                        ded += Math.Round(headval, 2);
                                        var ARR_HD = sgen.Make_decimal(dtt.Rows[r]["ARD" + e]);
                                        ARR_ded = Math.Round(ARR_HD, 2);
                                    }
                                    else
                                    {
                                        ded += Math.Round(sgen.Make_decimal(dtt.Rows[r]["DED" + e].ToString()), 2);
                                        ARR_ded += Math.Round(sgen.Make_decimal(dtt.Rows[r]["ARD" + e].ToString()), 2);
                                    }
                                    dtt.Rows[r]["DED" + e] = Math.Round(ded, 2);
                                    TOTDED += Math.Round(ded, 2);
                                    dtt.Rows[r]["ARD" + e] = Math.Round(ARR_ded, 2);
                                    TOTDED += Math.Round(ARR_ded, 2);
                                    //if (attndep.ToUpper().Equals("N") || iseditable.ToString().Trim().Equals("Y"))
                                    //{
                                    //    var ded = sgen.Make_decimal(BASEROW["DEDRATE" + e].ToString());
                                    //    dtt.Rows[r]["DED" + e] = Math.Round(ded);
                                    //    TOTDED += Math.Round(ded);
                                    //}
                                    //if (attndep.ToUpper().Equals("N") || iseditable.ToString().Trim().Equals("Y"))
                                    //{
                                    //}
                                    //else
                                    //{
                                    //    var ded = sgen.Make_decimal(dtt.Rows[r]["DEDRATE" + e].ToString());
                                    //    dtt.Rows[r]["DED" + e] = Math.Round(ded);
                                    //    TOTDED += Math.Round(ded);
                                    //}
                                    break;
                            }
                        }
                        catch (Exception err)
                        {
                        }
                    }
                    #region Actual 
                    var OT_DAY_MNTH = sgen.Make_decimal(BASEROW["OT_DAY_MNTH"].ToString());
                    if (OT_DAY_MNTH == 1) OT_DAY_MNTH = monthday;
                    decimal ot_hrss = 0, ot_hrssT = 0, otamt = 0, arr_ot = 0, esi_ot = 0;
                    string dayhours = BASEROW["OT_DAY_HRS"].ToString();
                    decimal shifthrs = 0;
                    decimal otd = 0, act_ot = 0;
                    var otfrml = sgen.Make_decimal(BASEROW["OTRATE"].ToString().Trim());
                    if (userCode.ToUpper() == "SKYKESHO")
                    {
                        var headval = sgen.Make_decimal(BASEROW["ACTRATE"].ToString());
                        var act_earned = Math.Round((headval / monthday) * paidays, 2);
                        decimal arr_Val = 0;
                        if (hasarrear)
                        {
                            //DateTime eff_dt = (DateTime)BASEROW["eff_dt"];
                            foreach (DataRow dr in DTARRS.Rows)
                            {
                                var headval_diff = sgen.Make_decimal(BASEROW["ACTRATE"].ToString()) - sgen.Make_decimal(dr["ACTRATE"].ToString());
                                arr_Val += Math.Round((headval_diff / sgen.Make_decimal(dr["MDAYS"].ToString())) * sgen.Make_decimal(dr["PAIDDAYS"].ToString()), 2);
                            }
                        }
                        dtt.Rows[r]["ACT_F"] = act_earned;
                        dtt.Rows[r]["ACT_ARR"] = arr_Val;
                        if (ToSave) dtt.Rows[r]["ACTRATE"] = headval;
                        #region Actual OT
                        // Actual OT
                        if (!dayhours.Trim().Equals("-"))
                        {
                            try
                            {
                                string[] ddd = dayhours.Split(':');
                                decimal hh = sgen.Make_int(ddd[0].ToString());
                                decimal mm = sgen.Make_int(ddd[1].ToString());
                                decimal ss = sgen.Make_int(ddd[2].ToString());
                                shifthrs = hh + (mm / 60) + (ss / 60 / 60);
                            }
                            catch (Exception ex) { }
                        }
                        Decimal othrs_new = 0;
                        try
                        {
                            ot_hrss = sgen.Make_decimal(BASEROW["OT_hrs_v"].ToString().Trim());
                            var ot_hrsT = ot_hrss;
                            if (ot_hrsT > shifthrs)
                            {
                                otd = ot_hrsT / shifthrs;
                                ot_hrsT = Math.Abs(ot_hrsT - (otd * shifthrs));
                            }
                            else { otd = ot_hrsT / shifthrs; ot_hrsT = 0; }
                            if (ot_hrsT > 0) otd = otd + (ot_hrsT / shifthrs);
                            var amtt = ((((sgen.Make_decimal(BASEROW["ACTRATE"].ToString()) / monthday) * otd)));
                            act_ot = Math.Round(amtt, 2);
                            //if (hasarrear)
                            //{
                            //    foreach (DataRow dr in DTARRS.Rows)
                            //    {                                   
                            //        var headval_diff = sgen.Make_decimal(BASEROW["ACTRATE"].ToString()) - sgen.Make_decimal(dr["ACTRATE"].ToString());
                            //        dayhours = dr["OT_DAY_HRS"].ToString().Trim();
                            //        if (!dayhours.Trim().Equals("-"))
                            //        {
                            //            try
                            //            {
                            //                string[] ddd = dayhours.Split(':');
                            //                decimal hh = sgen.Make_int(ddd[0].ToString());
                            //                decimal mm = sgen.Make_int(ddd[1].ToString());
                            //                decimal ss = sgen.Make_int(ddd[2].ToString());
                            //                shifthrs = hh + (mm / 60) + (ss / 60 / 60);
                            //            }
                            //            catch (Exception ex) { }
                            //        }
                            //        ot_hrss = sgen.Make_decimal(dr["OT_HRS_V"].ToString().Trim());
                            //        if (ot_hrssT > shifthrs)
                            //        {
                            //            otd = ot_hrssT / shifthrs;
                            //            ot_hrssT = Math.Abs(ot_hrss - (otd * shifthrs));
                            //        }
                            //        else { otd = ot_hrssT / shifthrs; ot_hrssT = 0; }
                            //        if (ot_hrssT > 0) otd = otd + (ot_hrssT / shifthrs);
                            //        arr_ot += ((((headval_diff / monthday) * otd)));
                            //    }
                            //}
                            dtt.Rows[r]["ACT_OT"] = act_ot + arr_ot;
                            dtt.Rows[r]["OT_HRS_V"] = ot_hrss;
                            arr_ot = 0;
                        }
                        catch (Exception err) { }
                        var other_deductions = sgen.Make_decimal(dtt.Rows[r]["DED6"].ToString());
                        var cash = (act_earned + arr_Val + act_ot + arr_ot) - (TOTDED - other_deductions) -
                        ((TOTEARN - OTHER_ERN) - TOTDED);

                        cash = Math.Round(cash, 0);
                        var perhrs = Math.Round((OTABLE / OT_DAY_MNTH / 8), 0);//changes done from 2 decimal to 0 decimal on 26/02/2020
                        if (cash <= 0)
                        {

                            othrs_new = 0;
                            dtt.Rows[r]["DED6"] = sgen.Make_decimal(dtt.Rows[r]["DED6"].ToString()) + Math.Abs(cash);
                            TOTDED += Math.Abs(cash);
                            cash = 0;
                        }
                        else
                        {
                            othrs_new = Math.Round(sgen.RoundOnly(cash / perhrs, 1) / (otfrml / 100), 2);//changes done from RoundDown to RoundOnly on 26/02/2020
                        }
                        dtt.Rows[r]["AMT1"] = cash;
                        dtt.Rows[r]["OT_HRS"] = othrs_new;
                        BASEROW["OT_HRS"] = othrs_new;
                        if (BASEROW["emp_category"].ToString() == "002")
                        {
                            dtt.Rows[r]["OT_HRS"] = 0;
                            BASEROW["OT_HRS"] = 0;
                        }
                        #endregion
                    }
                    #endregion
                    #region OT
                    //OT

                    dayhours = dtroundot.Rows[0]["col4"].ToString();
                    if (dayhours.Trim().Length < 5) dayhours = "8:00:00";
                    if (!dayhours.Trim().Equals("-"))
                    {
                        try
                        {
                            string[] ddd = dayhours.Split(':');
                            decimal hh = sgen.Make_int(ddd[0].ToString());
                            decimal mm = sgen.Make_int(ddd[1].ToString());
                            decimal ss = sgen.Make_int(ddd[2].ToString());
                            shifthrs = hh + (mm / 60) + (ss / 60 / 60);
                        }
                        catch (Exception ex) { }
                    }
                    ot_hrss = sgen.Make_decimal(BASEROW["OT_hrs"].ToString().Trim());
                    ot_hrssT = ot_hrss;
                    decimal ESIempr_1 = sgen.Make_decimal(BASEROW["ESIRATE_ER"].ToString().Replace("%", "").Trim());
                    try
                    {
                        if (userCode.Trim().ToUpper() == "SKYKESHO")
                        {

                            var hrrate = Math.Round(OTABLE / OT_DAY_MNTH / shifthrs, 0);
                            otamt = Math.Round((ot_hrss * hrrate * otfrml) / 100, 0);
                        }

                        else
                        {
                            if (ot_hrssT > shifthrs)
                            {
                                otd = ot_hrssT / shifthrs;
                                ot_hrssT = Math.Abs(ot_hrss - (otd * shifthrs));
                            }
                            else { otd = ot_hrssT / shifthrs; ot_hrssT = 0; }
                            if (ot_hrssT > 0) otd = otd + (ot_hrssT / shifthrs);
                            otamt = ((((OTABLE / OT_DAY_MNTH) * otd) * otfrml) / 100);
                            otamt = sgen.Roundval(otroundval, otamt, otroundamt);
                        }
                        //if (hasarrear)
                        //{
                        //    decimal c_headval = 0;
                        //    for (int a = 0; a < 20; a++)
                        //    {
                        //        try
                        //        {
                        //            if (OTheads.Contains("ER" + a)) c_headval += sgen.Make_decimal(BASEROW["ERRATE" + a].ToString());
                        //        }
                        //        catch (Exception err) { }
                        //    }
                        //    foreach (DataRow dr in DTARRS.Rows)
                        //    {
                        //        decimal l_headval = 0;
                        //        for (int a = 0; a < 20; a++)
                        //        {
                        //            try
                        //            {
                        //                if (OTheads.Contains("ER" + a)) l_headval += sgen.Make_decimal(dr["ERRATE" + a].ToString());
                        //            }
                        //            catch (Exception err) { }
                        //        }
                        //        var headval_diff = c_headval - l_headval;
                        //        if (!dayhours.Trim().Equals("-"))
                        //        {
                        //            try
                        //            {
                        //                string[] ddd = dayhours.Split(':');
                        //                decimal hh = sgen.Make_int(ddd[0].ToString());
                        //                decimal mm = sgen.Make_int(ddd[1].ToString());
                        //                decimal ss = sgen.Make_int(ddd[2].ToString());
                        //                shifthrs = hh + (mm / 60) + (ss / 60 / 60);
                        //            }
                        //            catch (Exception ex) { }
                        //        }
                        //        ot_hrss = sgen.Make_decimal(dr["OT_hrs"].ToString().Trim());
                        //        if (ot_hrssT > shifthrs)
                        //        {
                        //            otd = ot_hrssT / shifthrs;
                        //            ot_hrssT = Math.Abs(ot_hrss - (otd * shifthrs));
                        //        }
                        //        else { otd = ot_hrssT / shifthrs; ot_hrssT = 0; }
                        //        if (ot_hrssT > 0) otd = otd + (ot_hrssT / shifthrs);
                        //        arr_ot += ((((headval_diff / sgen.Make_decimal(dr["OT_DAY_MNTH"].ToString())) * otd) * otfrml) / 100);
                        //        OTABLE += headval_diff;
                        //    }
                        //}
                        //else
                        {
                            arr_ot = sgen.Make_decimal(dtt.Rows[r]["ARR_OT"].ToString());
                        }
                        //ESI On OT
                        decimal ESIemp = sgen.Make_decimal(BASEROW["ESIRATE"].ToString().Replace("%", "").Trim());
                        var isesilimit = BASEROW["cutesi"].ToString();
                        if (isesilimit.Trim().Equals("Y"))
                        {
                            //tmaxpf = sgen.Make_decimal(BASEROW["ESIlimit_ER"].ToString().Replace("%", "").Trim());
                            tmaxpf = sgen.Make_decimal(BASEROW["ESIlimit"].ToString().Replace("%", "").Trim());
                            if (ToSave) dtt.Rows[r]["CUTESI"] = "Y";
                            if (tmaxpf > 0)
                            {
                                ESIemp = sgen.Make_decimal(BASEROW["ESIRATE"].ToString().Replace("%", "").Trim());
                                if (!hadesi && ESICHECK > tmaxpf)
                                {
                                    ESIABLE = 0;
                                    ESIABLE_ARR = 0;
                                }
                                else
                                {
                                    esi_ot = (((otamt + arr_ot) * ESIemp) / 100);
                                }
                            }
                        }
                    }
                    catch (Exception err) { dtt.Rows[r][colname] = "0"; }
                    //dtt.Rows[r]["OT"] = otamt + arr_ot;///07/09/2020 commented 4 gloval
                    dtt.Rows[r]["OT"] = otamt;///07/09/2020 changed for gloval
                    dtt.Rows[r]["ARR_OT"] = Math.Round(arr_ot, 2);///07/09/2020 UNcommented 4 gloval
                    dtt.Rows[r]["OT_hrs"] = ot_hrss;
                    dtt.Rows[r]["ESI_OT"] = sgen.Roundval(esiroundval, esi_ot, esiroundamt);

                    if (ToSave)
                    {                        
                        dtt.Rows[r]["ESI_ALL"] = sgen.Roundval(esiroundval, Convert.ToDecimal(dtt.Rows[r]["ESI_ALL"].ToString()) + esi_ot, esiroundamt);
                        dtt.Rows[r]["OT_DAY_HRS"] = BASEROW["OT_DAY_HRS"].ToString();
                        dtt.Rows[r]["OT_DAY_MNTH"] = OT_DAY_MNTH;
                        dtt.Rows[r]["OTRATE"] = otfrml;
                        dtt.Rows[r]["OTHEADS"] = String.Join(",", OTheads);
                        dtt.Rows[r]["OTWAGES"] = OTABLE;
                        var isesilimit = BASEROW["cutesi"].ToString();
                        if (isesilimit.Trim().Equals("Y"))
                        {
                            tmaxpf = sgen.Make_decimal(BASEROW["ESIlimit"].ToString().Replace("%", "").Trim());
                            if (ToSave) dtt.Rows[r]["CUTESI"] = "Y";
                            if (tmaxpf > 0)
                            {
                                var ESIemp = sgen.Make_decimal(BASEROW["ESIRATE"].ToString().Replace("%", "").Trim());
                                if (ESIABLE > tmaxpf)
                                {
                                    ESIABLE = 0;
                                    ESIABLE_ARR = 0;
                                }
                                else
                                {
                                    dtt.Rows[r]["ESI_ER"] = sgen.Roundval(esiroundval, (((ESIABLE + Math.Round(ESIABLE_ARR, 2) + otamt) * ESIempr_1) / 100), esiroundamt);
                                    dtt.Rows[r]["ESIWAGES_ER"] = Math.Round(ESIABLE + Math.Round(ESIABLE_ARR, 2) + otamt, 2);
                                    dtt.Rows[r]["ESIRATE_ER"] = BASEROW["ESIRATE_ER"].ToString();
                                    dtt.Rows[r]["ESILIMIT_ER"] = BASEROW["ESILIMIT_ER"].ToString();
                                }
                            }
                        }
                        dtt.Rows[r]["ESIWAGES_OT"] = Math.Round(otamt + arr_ot, 2);
                        //ESI Emplr
                    }
                    #endregion
                    dtt.Rows[r]["TOTEARN"] = Math.Round(TOTEARN, 2);
                    dtt.Rows[r]["TOTDED"] = Math.Round(TOTDED, 2);
                    dtt.Rows[r]["NETSALARY"] = Math.Round(TOTEARN - TOTDED, 2);
                }
                catch (Exception ERR)
                {
                }
                //dtt.Rows[r].EndEdit();
            }
            sgen.SetSession(MyGuid, "dtsalmain", dtsalmain);
            return dtt;
        }
        #endregion
        #region attn
        public ActionResult attn()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vimport = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm = new Tmodelmain();
            tm.Col14 = mid_mst;
            tm.Col15 = m_id_mst;
            tm.Col9 = "EMPLOYEE ATTENDANCE";
            tm.Col10 = "ATTN";
            tm.Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            tm.Col12 = "ATN";//employee attendance
            tm.Col13 = "Save";
            tm.TList1 = mod1;
            tm.Col22 = "Choose File";
            tm.SelectedItems1 = new string[] { "" };
            tm.LTM1 = new List<Tmodelmain>();
            tm.Col74 = "N";
            model.Add(tm);
            return View(model);
        }
        [HttpPost]
        public ActionResult attn(List<Tmodelmain> model, string command, string hfrow, string hftable, HttpPostedFileBase upd1)
        {
            string stng = "";
            bool error = false;
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
            model[0].dt1 = dtm;
            #region list
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            if (mod1 == null)
            {
                //months
                #region
                mod1 = cmd_Fun.month(userCode, unitid_mst);
                #endregion  
            }

            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            #endregion
            var tmodel = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "CHECKBTN", "NEXT");
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.scripCall = ViewBag.scripCall + " enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "'" + model[0].Col11 + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num.Trim();
                    var DtLeaveMain = sgen.getdata(userCode, "select col1 as name,col2 as id from kc_tab where type='KLV' " +
                        "and client_id='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                    sgen.SetSession(MyGuid, "DtLeaveMain", DtLeaveMain);
                    //months
                    #region
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);

                    #endregion
                    model[0].Col74 = "Y";

                    model[0].SelectedItems1 = new string[] { "" };
                }
                catch (Exception ex)
                {
                    ViewBag.vnew = "";
                    ViewBag.vnext = "disabled='disabled'";
                    ViewBag.vcalc = "disabled='disabled'";
                    ViewBag.vgetdata = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                    ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0);disableForm();";
                }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            // shiv
            {
                try
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "Y", "attn", "Hr", model);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vimport = "";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Save")
            {
                //;
                dtm = RemoveHeadName_LV(dtm);
                var dts = sgen.getdata(userCode, "select * from attn where 1=2");
                int mrows = dtm.Rows.Count;
                if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                {
                    isedit = true;
                }
                else
                {
                    mq = "select max(to_number(vch_num)) as auto_genid from attn where type='ATN' " +
                        "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    isedit = false;
                }
                var curryyyymmm = sgen.GetSession(MyGuid, "curryyyymmm").ToString();
                int currmonth = sgen.Make_int(curryyyymmm.Substring(5, 2));
                string ldate = DateTime.DaysInMonth(sgen.Make_int(curryyyymmm.Substring(0, 4)), currmonth) + "" + sgen.padlc(currmonth, 2) + "" + curryyyymmm.Substring(0, 4);
                model[0].Col20 = ldate;
                mq = sgen.seekval(userCode, "select vch_num from attn where CURRYYYYMMM='" + curryyyymmm + "' and client_unit_id='" + unitid_mst + "'", "vch_num");
                if (!isedit && !mq.Trim().Equals("0"))
                {
                    ViewBag.scripCall += "showmsgJS(1, 'Attendance already added for the month.Please Edit', 0);";
                    return View(model);
                }
                DataTable DtLeaveMain = (DataTable)sgen.GetSession(MyGuid, "DtLeaveMain");
                string colname = "", headname = "";
                string currdate = sgen.server_datetime(userCode);
                string ent_dt = currdate;
                string lastdate = sgen.Make_date_S(model[0].Col20, "ddMMyyyy");
                for (int m = 0; m < mrows; m++)
                {
                    decimal totleaves = 0, paiddays = 0;
                    DataRow dr = dts.NewRow();
                    dr.BeginEdit();
                    foreach (DataColumn dc in dtm.Columns)
                    {
                        try { dr[dc.ColumnName] = dtm.Rows[m][dc.ColumnName]; }
                        catch (Exception err) { }
                    }
                    dr["REC_ID"] = "0";
                    dr["emp_code"] = dr["emp_code"].ToString().Substring(3, 6);
                    dr["m_lastdt"] = lastdate;
                    if (isedit)
                    {
                        DataTable dtbase = (DataTable)sgen.GetSession(MyGuid, "dtbase");
                        dr["TYPE"] = dtbase.Rows[0]["TYPE"].ToString();
                        dr["CURRYYYYMMM"] = dtbase.Rows[0]["CURRYYYYMMM"].ToString();
                        dr["MONTH_ID"] = dtbase.Rows[0]["MONTH_ID"].ToString();
                        dr["VCH_NUM"] = dtbase.Rows[0]["VCH_NUM"].ToString();
                        dr["VCH_DATE"] = dtbase.Rows[0]["VCH_DATE"];
                        dr["CLIENT_ID"] = dtbase.Rows[0]["CLIENT_ID"].ToString();
                        dr["CLIENT_UNIT_ID"] = dtbase.Rows[0]["CLIENT_UNIT_ID"].ToString();
                        dr["ENT_BY"] = dtbase.Rows[0]["ENT_BY"].ToString();
                        dr["ENT_DATE"] = dtbase.Rows[0]["ENT_DATE"].ToString();
                        dr["EDIT_BY"] = userid_mst;
                        dr["EDIT_DATE"] = currdate;
                        dr["CREATED_DATE"] = dtbase.Rows[0]["CREATED_DATE"].ToString();
                    }
                    else
                    {
                        dr["VCH_NUM"] = vch_num;
                        dr["VCH_DATE"] = currdate;
                        dr["TYPE"] = "ATN";
                        dr["month_ID"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["CURRYYYYMMM"] = curryyyymmm;
                        dr["CLIENT_ID"] = clientid_mst;
                        dr["CLIENT_UNIT_ID"] = unitid_mst;
                        dr["ENT_BY"] = userid_mst;
                        dr["ENT_DATE"] = currdate;
                        dr["EDIT_BY"] = "-";
                        dr["EDIT_DATE"] = currdate;
                        dr["CREATED_DATE"] = currdate;
                    }
                    try
                    {
                        for (int l = 1; l <= 5; l++)
                        {
                            totleaves = totleaves + sgen.Make_decimal(dtm.Rows[m]["LV" + l].ToString());
                        }
                    }
                    catch (Exception rr) { }
                    decimal ABSENTS = sgen.Make_decimal(dr["MDAYS"].ToString()) - (sgen.Make_decimal(dr["PRESENTS"].ToString()) + sgen.Make_decimal(dr["HDAYS"].ToString()) + sgen.Make_decimal(dr["WDAYS"].ToString()) + totleaves);
                    if (ABSENTS < 0)
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Total Days are More then the Month Days (" + sgen.Make_decimal(dr["MDAYS"].ToString()) + ") in Rows No. " + m + 1 + "', 1);";
                        return View(model);
                    }
                    dr["LEAVES"] = totleaves;
                    dr["ABSENTS"] = ABSENTS;
                    dr["PAIDDAYS"] = sgen.Make_decimal(dr["PRESENTS"].ToString()) + sgen.Make_decimal(dr["HDAYS"].ToString()) + sgen.Make_decimal(dr["WDAYS"].ToString()) + totleaves;
                    dr["DEPT"] = "-";
                    dr["DEPT2"] = "-";
                    dr["CANT_DED"] = sgen.Make_decimal(dr["CANT_DED"].ToString());
                    dr.EndEdit();
                    dts.Rows.Add(dr);
                }
                //save dts;
                bool ok = sgen.Update_data_fast1(userCode, dts, "ATTN", model[0].Col8, isedit);
                if (ok)
                {
                    model[0].Col74 = "N";
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vimport = "disabled='disabled'";
                    //ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Extended Successfully');disableForm(); ";
                    model = new List<Tmodelmain>();
                    model.Add(new Tmodelmain()
                    {
                        TList1 = mod1,
                        SelectedItems1 = new string[] { "" },
                        Col9 = tmodel.Col9,
                        Col10 = tmodel.Col10,
                        Col11 = tmodel.Col11,
                        Col12 = tmodel.Col12,
                        Col13 = tmodel.Col13,
                        Col14 = tmodel.Col14,
                        Col15 = tmodel.Col15,
                        LTM1 = new List<Tmodelmain>()
                    });
                }
                else
                {
                    ViewBag.scripCall = "showmsgJS(1, 'Record Not Saved', 2);disableForm();";
                }
            }
            else if (command == "Import")
            {
                if (model[0].SelectedItems1 == null) { /*sgen.showmsg(1, "Please select month", 2);*/ }
                int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault().Trim());
                int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                string lastyyyymmm = "";
                string curryyyymmm = "";
                if (currmonth <= 12 && currmonth > 4)
                {
                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                }
                else if (currmonth == 1)
                {
                    lastyyyymmm = curryear + sgen.padlc(12, 3);
                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                }
                else if (currmonth > 1 && currmonth < 4)
                {
                    lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                }
                else if (currmonth == 4)
                {
                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                }
                sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                string Fdate = "01/" + sgen.padlc(currmonth, 2) + "/" + curryyyymmm.Substring(0, 4);
                string ldate = DateTime.DaysInMonth(sgen.Make_int(curryyyymmm.Substring(0, 4)), currmonth) + "" + sgen.padlc(currmonth, 2) + "" + curryyyymmm.Substring(0, 4);
                model[0].Col20 = ldate;
                mq0 = "SELECT  S.CLIENT_ID,S.CLIENT_UNIT_ID, s.VCH_NUM,S.VCH_DATE,S.CREATED_DATE,S.ENT_BY,S.ENT_DATE,S.MONTH_ID,S.CURRYYYYMMM,S.TYPE,A.VCH_NUM EMP_CODE,A.FIRST_NAME,S.MDAYS," +
                    "S.WDAYS,S.HDAYS,S.LV1,S.LV2,S.LV3,S.LV4,S.LV5,S.LEAVES,S.ABSENTS,S.PRESENTS,S.PAIDDAYS,S.LATEDAYS,S.HRS,S.MNTS,S.OT_HRS,S.OT_MNTS FROM EMP_MASTER A " +
                    "LEFT JOIN (SELECT * FROM ATTN WHERE " + model[0].Col8 + ")  S ON A.CLIENT_UNIT_ID=S.CLIENT_UNIT_ID AND A.VCH_NUM=S.EMP_CODE AND S.TYPE='ATN' " +
                    "WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and (case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 " +
                    "and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) ORDER BY EMP_CODE";
                var dtbase = sgen.getdata(userCode, mq0);
                sgen.SetSession(MyGuid, "dtbase", dtbase);
                model[0].Col19 = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text.Trim().ToUpper() + " - " + curryyyymmm.Trim().Substring(0, 4).ToString().Trim();
                HttpPostedFileBase file1 = upd1;
                DataTable dt = new DataTable();
                if (file1.ContentLength > 1)
                {
                    string ext = Path.GetExtension(file1.FileName).ToLower();
                    if (ext == ".csv")
                    {
                        string filesavepath = AppDomain.CurrentDomain.BaseDirectory + "\\Uploads\\" + cg_com_name.Replace(" ", "")
                            + "\\file" + DateTime.Now.ToString("ddMMyyyyhhmmfff") + ext;
                        file1.SaveAs(filesavepath);
                        // Read sample data from CSV file
                        int i = 0;
                        using (CsvFileReader reader = new CsvFileReader(filesavepath))
                        {
                            CsvRow row = new CsvRow();
                            while (reader.ReadRow(row, i))
                            {
                                DataRow dr = dt.NewRow();
                                for (int c = 0; c < row.Count; c++)
                                {
                                    if (i == 0)
                                    {
                                        if (!row[c].ToString().Trim().ToUpper().Equals("UNIT")) dt.Columns.Add(row[c].ToString());
                                    }
                                    else if (i == 1)
                                    {
                                        if (row[c].ToString().Trim().ToUpper().Contains("U_"))
                                        {
                                            if (!row[c].ToString().Trim().Split('_')[1].Trim().Equals(unitid_mst))
                                            {
                                                ViewBag.vnew = "disabled='disabled'";
                                                ViewBag.vedit = "disabled='disabled'";
                                                ViewBag.vsave = "";
                                                ViewBag.vimport = "";
                                                ViewBag.scripCall += "showmsgJS(1, 'Please upload current loggedin unit sheet', 0);";
                                                return View(model);
                                            }
                                        }
                                        else { dr[c] = row[c].ToString(); }
                                    }
                                    else
                                    {
                                        if (!row[c].ToString().Trim().ToUpper().Contains("U_")) dr[c] = row[c].ToString();
                                    }
                                    //if (c > dt.Columns.Count) break;                                                                 
                                }
                                i++;
                                dt.Rows.Add(dr);
                            }
                        }
                    }
                    try
                    {
                        dt.Rows[0].Delete();
                        //grdviewnew.DataSource = dt;
                        //grdviewnew.DataBind();
                        model[0].dt1 = dt;
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vimport = "";
                    }
                    catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 0);"; }
                }
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpGet]
        public FileResult emptemp_lv(string Myguid)
        {
            string monthname = "", ddl_month = "", ddl_emp = "";
            FillMst(Myguid);
            List<Tmodelmain> model = (List<Tmodelmain>)sgen.GetSession(MyGuid, "model");
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];

            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            DataTable dtl = new DataTable();
            if (model[0].SelectedItems1 == null) { /*sgen.showmsg(1, "Please select month from drop down", 2); return;*/ }
            ddl_month = model[0].SelectedItems1.FirstOrDefault().Trim();
            monthname = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text;
            int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault());
            int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
            string lastyyyymmm = "";
            string curryyyymmm = "";
            if (currmonth <= 12 && currmonth > 4)
            {
                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
            }
            else if (currmonth == 1)
            {
                lastyyyymmm = curryear + sgen.padlc(12, 3);
                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
            }
            else if (currmonth > 1 && currmonth < 4)
            {
                lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
            }
            else if (currmonth == 4)
            {
                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
            }
            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
            string Fdate = "01/" + sgen.padlc(currmonth, 2) + "/" + curryyyymmm.Substring(0, 4);
            int mdays = DateTime.DaysInMonth(sgen.Make_int(curryyyymmm.Substring(0, 4)), currmonth);
            int wdays = 0;
            DayOfWeek day = DayOfWeek.Sunday;
            for (int i = 1; i <= mdays; i++)
            {
                DateTime d = new DateTime(sgen.Make_int(curryyyymmm.Substring(0, 4)), currmonth, i);
                if (d.DayOfWeek == day)
                {
                    wdays++;
                }
            }
            mq = "select '" + monthname.Trim() + " (" + ddl_month.Trim() + ")" + "' month_name,a.Emp_Code,external_empno External_EmpCode,old_empcode Old_EmpCode," +
            "(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Employee_Name,'0' Cant_Ded,'0' OT_HRS,'" + mdays + "' MDAYS,'0' PRESENTS,'" + wdays + "' WDAYS,'0' HDAYS," +
            "LV1,LV2,LV3,LV4,LV5,'U_" + unitid_mst + "' unit from emp_master A " +
            "LEFT OUTER JOIN ATTN B ON A.VCH_NUM=B.emp_code AND A.CLIENT_UNIT_ID=B.CLIENT_UNIT_ID and 1=2 " +
            "where A.type='EMP' and A.client_id='" + clientid_mst + "' and A.client_unit_id='" + unitid_mst + "' and a.emp_status != 'R' and " +
            "(case when to_char(a.ex_dt,'yyyy')='1900' then 1 when a.ex_dt>to_date('" + Fdate + "','dd/MM/yyyy') then 1 else 0 end)=1 and a.st_dt<=last_day(to_date('" + Fdate + "','dd/MM/yyyy')) " +
            "ORDER BY a.EMP_CODE";
            dtl = sgen.getdata(userCode, mq);
            dtl = CleanDT_Lv(dtl);
            dtl = GiveHeadName_LV(dtl);
            string cg_com_name = sgen.GetCookie(MyGuid, "cg_com_name");
            Byte[] fileBytes = sgen.Exp_to_csv_new(dtl, "Employee Attendance", cg_com_name);
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Zip, "Employee Attendance");
        }
        private DataTable RemoveHeadName_LV(DataTable dtt)
        {
            DataTable DtLeaveMain = (DataTable)sgen.GetSession(MyGuid, "DtLeaveMain");
            string colname = "";
            var cols = dtt.Columns.Count;
            for (int c = 0; c < cols; c++)
            {
                colname = dtt.Columns[c].ColumnName.ToUpper().Trim();
                string headname = "", NewName = "";
                headname = sgen.seekval_dt(DtLeaveMain, "NAME='" + colname + "'", "ID");
                if (!headname.Equals("0") && (headname.StartsWith("LV")))
                {
                    dtt.Columns[c].ColumnName = headname;
                }
            }
            return dtt;
        }
        private DataTable GiveHeadName_LV(DataTable dtt)
        {
            DataTable DtLeaveMain = (DataTable)sgen.GetSession(MyGuid, "DtLeaveMain");
            int NETID = 0;
            string colname = "";
            var cols = dtt.Columns.Count;
            for (int c = 0; c < cols; c++)
            {
                colname = dtt.Columns[c].ColumnName.ToUpper().Trim();
                string headname = "", NewName = "";
                colname = "LV" + colname.Substring(2, colname.Length - 2);
                headname = sgen.seekval_dt(DtLeaveMain, "id='" + colname + "'", "NAME");
                NewName = headname;
                if (!headname.Equals("0")) dtt.Columns[c].ColumnName = NewName;
            }
            return dtt;
        }
        private DataTable CleanDT_Lv(DataTable dtt)
        {
            var DtLeaveMain = (DataTable)sgen.GetSession(MyGuid, "DtLeaveMain");
            int ers = 5;
            string colname = "";
            for (int e = 1; e <= ers; e++)
            { //Leaves
                try
                {
                    colname = dtt.Columns["LV" + e].ColumnName.ToUpper().ToString();
                    var Head_Name_Actual = sgen.seekval_dt(DtLeaveMain, "id='" + colname + "'", "NAME").ToString();
                    if (Head_Name_Actual == "0") dtt.Columns.Remove(dtt.Columns[colname]);
                }
                catch (Exception err)
                {
                }
            }
            return dtt;
        }
        #endregion
        #region bulk_rate
        public ActionResult bulk_rate()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.vold = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "EDIT EMPLOYEE SALARY RATE";
            tm1.Col10 = "SALMAIN";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "SAL";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();


            tm1.TList3 = tm1.TList2 = tm1.TList1 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.dt1 = null;
            tm1.dt2 = null;
            //Session["dtkin1"] = null;
            //Session["dtkin2"] = null;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult bulk_rate(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            try
            {
                string stng = "";
                bool error = false;
                FillMst(model[0].Col15);
                DataTable dtm = sgen.settable(hftable);
                sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
                model[0].dt1 = dtm;
                #region list
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
                if (mod1 == null)
                {
                    //months             
                    mod1 = cmd_Fun.month(userCode, unitid_mst);
                }
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
                //TempData[MyGuid + "_TList1"] = mod1;
                //TempData[MyGuid + "_TList2"] = mod2;
                //TempData[MyGuid + "_TList3"] = mod3;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                #endregion
                var tmodel = model.FirstOrDefault();
                if (command == "New")
                {
                    try
                    {
                        sgen.SetSession(MyGuid, "EDMODE", "N");
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vget = "";
                        ViewBag.scripCall = "enableForm();";
                        mq = "select max(to_number(vch_num)) as auto_genid from " + tmodel.Col10 + " where type='" + tmodel.Col12 + "'" + tmodel.Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col18 = vch_num;
                        mod1 = new List<SelectListItem>();
                        mod2 = new List<SelectListItem>();
                        mod3 = new List<SelectListItem>();
                        #region grade
                        // shiv
                        DataTable dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KGM' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                            }
                        }
                        TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                        #endregion
                        #region Dept
                        dt = sgen.getdata(userCode, "SELECT master_id,master_name FROM master_setting where type = 'MDP' and " +
                            "find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                            }
                        }
                        TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                        #endregion
                        #region Desig
                        dt = sgen.getdata(userCode, "SELECT master_id,master_name FROM master_setting where type = 'MDG' and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                        if (dt.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt.Rows)
                            {
                                mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                            }
                        }
                        TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
                        #endregion



                        model[0].SelectedItems2 = new string[] { "001" };
                        model[0].SelectedItems3 = new string[] { "001" };
                        model[0].SelectedItems1 = new string[] { "001" };
                    }
                    catch (Exception ex)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vnext = "disabled='disabled'";
                        ViewBag.vcalc = "disabled='disabled'";
                        ViewBag.vgetdata = "disabled='disabled'";
                        ViewBag.scripCall = "disableForm();";
                        ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);disableForm();";
                    }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                // shiv
                {
                    try
                    {
                        if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                        model = CallbackFun(btnval, "Y", "paymain", "Hr", model);
                        ViewBag.vnew = "disabled='disabled'";
                    }
                    catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
                }
                else if (command == "Get Data")
                {
                    mq0 = @"SELECT DISTINCT  A.emp_code AS EMP_CODE ,
A.FIRST_NAME||' '||replace(A.MIDDLE_NAME,'0','')||' '||replace(A.LAST_NAME,'0','')||'('||dp.master_name||'-'||dg.master_name||')' AS FIRST_NAME,S.ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10,
S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
    "S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6," +
    "S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
    "S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,S.ACTRATE FROM EMP_MASTER A " +
    "LEFT JOIN  SALMAIN S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
    "left join master_setting dp on dp.master_id = a.emp_dept and dp.type = 'MDP' and " +
    "find_in_set(dp.client_id, a.client_id)= 1 and find_in_set(dp.client_unit_id, a.client_unit_id)= 1 " +
     "left join master_setting dg on dg.master_id = a.emp_desig and dg.type = 'MDG' and " +
     "find_in_set(dg.client_id, a.client_id)= 1 and find_in_set(dg.client_unit_id, a.client_unit_id)= 1 " +
    "WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and to_char(a.ex_dt,'yyyy')='1900'  ORDER BY EMP_CODE";
                    var dtt = sgen.getdata(userCode, mq0);
                    #region CALCULATE
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                        ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE TYPE='KSP' AND CUR_STATE IN ('1','2','4') AND " +
                        "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                    sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                    dtt = CleanDT_br(dtt);
                    #endregion
                    //TO SHOW ON GRID
                    #region grID
                    dtt = GiveHeadName_br(dtt);
                    model[0].dt1 = dtt;
                    #endregion
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vget = "";
                    ViewBag.vold = "";
                }
                else if (command == "Old Data")
                {
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                     ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE TYPE='KSP' AND  CUR_STATE IN ('1','2','4') AND " +
                     "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                    sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                    mq = "select * from " +
                              "(SELECT(emp.client_id || emp.client_unit_id || emp.vch_num || (case when nvl(en.rec_id, '0') = '0' then 0 else 1 end)) Sno,nvl(en.rec_id, '0') rec_id," +
                              "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code Emp_Code, emp.old_empcode Old_EmpCode," +
                              "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department," +
                              "dg.master_name Designation, vm.vch_num headid,(vm.col1) headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype,to_number(nvl(vm.col41,0)) as ordd FROM " +
                              "emp_master emp " +
                              "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                              "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                              "left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                              "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id,col1,max(ref_code) vers from enx_tab where type = 'KES' " +
                              "group by client_id,client_unit_id,col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) en " +
                              "on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                              "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                              "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.fnf_dt,'yyyy')='1900' and to_char(emp.ex_dt,'yyyy')= '1900' " +
                              "union all " +
                              "SELECT (emp.client_id || emp.client_unit_id || emp.vch_num || (case when nvl(en.rec_id, '0') = '0' then 0 else 1 end)) Sno,nvl(en.rec_id, '0') rec_id," +
                              "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code EmpCode, emp.old_empcode Old_EmpCode," +
                              "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department," +
                              "dg.master_name Designation,vm.vch_num headid,(vm.col1) headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype,to_number(nvl(vm.col41,0)) as ordd FROM " +
                              "emp_master emp " +
                              "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                              "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                              "left outer join vehicle_master vm on 1 = 1 and vm.type = 'ASP' and vm.client_id = '" + clientid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                              "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id, col1, max(ref_code) as vers from enx_tab where type = 'AES' " +
                              "group by client_id, client_unit_id, col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) " +
                              "en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'AES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                              "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                              "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.fnf_dt,'yyyy')='1900' and to_char(emp.ex_dt,'yyyy')= '1900' " +
                              ") tab  where headid is not null order by emp_code,ordd, headid asc";
                    DataTable dtl = new DataTable();
                    dtl = sgen.getdata(userCode, mq);
                    sgen.SetSession(MyGuid, "KESDTB", dtl);
                    DataView dv = dtl.DefaultView;
                    DataTable dtemp = dv.ToTable(true, "emp_code");
                    for (int a = 0; a < dtemp.Rows.Count; a++)
                    {
                        var sno = dtl.Select("emp_code='" + dtemp.Rows[a]["emp_code"].ToString() + "'").CopyToDataTable().Compute("MAX(sno)", string.Empty);
                        var verno = dtl.Select("emp_code='" + dtemp.Rows[a]["emp_code"].ToString() + "'").CopyToDataTable().Compute("MAX(verno)", string.Empty);
                        dtl.Select(string.Format("[emp_code] = '{0}'", dtemp.Rows[a]["emp_code"].ToString())).ToList<DataRow>()
                         .ForEach(r =>
                         {
                             r["sno"] = sno;
                             r["verno"] = verno;
                         });
                    }
                    dtl.AcceptChanges();
                    if (dtl.Rows.Count > 0)
                    {
                        Pivot pv = new Pivot(dtl, MyGuid);
                        dtl = pv.PivotData("amount", AggregateFunction.Sum, new string[] { "Emp_Code", "Employee_Name" }, new string[] { "headname" });
                        dtl.AcceptChanges();
                    }
                    model[0].dt1 = dtl;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vget = "";
                    ViewBag.vold = "";
                }
                else if (command == "Save")
                {
                    //DataTable dtbase = (DataTable)Session["dtbase"];
                    dtm = RemoveHeadName_br(dtm);
                    var dts = sgen.getdata(userCode, "select * from salmain where 1=2");
                    int mrows = dtm.Rows.Count;
                    string currdate = sgen.server_datetime(userCode);
                    string ent_dt = currdate;
                    string conds = "";
                    for (int m = 0; m < mrows; m++)
                    {
                        DataRow dr = dts.NewRow();
                        foreach (DataColumn dc in dtm.Columns)
                        {
                            try { dr[dc.ColumnName] = dtm.Rows[m][dc.ColumnName]; }
                            catch (Exception err) { }
                        }
                        dr["REC_ID"] = "0";
                        dr["emp_code"] = dr["emp_code"].ToString().Split('-')[1].Substring(3, 6);
                        //if (isedit)
                        //{
                        //    dr["TYPE"] = dtbase.Rows[0]["TYPE"].ToString();
                        //    dr["VCH_NUM"] = dtbase.Rows[0]["VCH_NUM"].ToString();
                        //    dr["VCH_DATE"] = dtbase.Rows[0]["VCH_DATE"];
                        //    dr["CLIENT_ID"] = dtbase.Rows[0]["CLIENT_ID"].ToString();
                        //    dr["CLIENT_UNIT_ID"] = dtbase.Rows[0]["CLIENT_UNIT_ID"].ToString();
                        //    dr["ENT_BY"] = dtbase.Rows[0]["ENT_BY"].ToString();
                        //    dr["ENT_DATE"] = dtbase.Rows[0]["ENT_DATE"].ToString();
                        //    dr["EDIT_BY"] = userid_mst;
                        //    dr["EDIT_DATE"] = currdate;
                        //    dr["CREATED_DATE"] = dtbase.Rows[0]["CREATED_DATE"].ToString();
                        //}
                        //else
                        {
                            dr["VCH_NUM"] = vch_num;
                            dr["VCH_DATE"] = currdate;
                            dr["TYPE"] = "SAL";
                            dr["CLIENT_ID"] = clientid_mst;
                            dr["CLIENT_UNIT_ID"] = unitid_mst;
                            dr["ENT_BY"] = userid_mst;
                            dr["ENT_DATE"] = currdate;
                            dr["EDIT_BY"] = "-";
                            dr["EDIT_DATE"] = currdate;
                            dr["CREATED_DATE"] = currdate;
                        }
                        conds += "(1,'" + clientid_mst + unitid_mst + dr["emp_code"].ToString() + "'),";
                        dr["DEPT"] = "-";
                        dr["DEPT2"] = "-";
                        dts.Rows.Add(dr);
                    }
                    //save dts;
                    if (conds.Length > 3) conds = conds.Substring(0, conds.Length - 1);
                    //string[] vals = conds.Split(',').Distinct().ToArray();
                    cond = "type='SAL' and  (1,trim(client_id)||trim(client_unit_id)||trim(emp_code)) in (" + conds + ")";
                    ok = sgen.Update_data_fast1(userCode, dts, "SALMAIN", cond, true);
                    ViewBag.vnew = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vget = "disabled='disabled'";
                    ViewBag.vold = "disabled='disabled'";
                    ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                    model = new List<Tmodelmain>();
                    model.Add(new Tmodelmain()
                    {
                        TList1 = mod1,
                        TList2 = mod1,
                        TList3 = mod1,
                        SelectedItems1 = new string[] { "" },
                        SelectedItems2 = new string[] { "" },
                        SelectedItems3 = new string[] { "" },
                        Col9 = tmodel.Col9,
                        Col10 = tmodel.Col10,
                        Col11 = tmodel.Col11,
                        Col12 = tmodel.Col12,
                        Col13 = tmodel.Col13,
                        Col14 = tmodel.Col14,
                        Col15 = tmodel.Col15,
                        LTM1 = new List<Tmodelmain>()
                    });
                }
            }
            catch (Exception err)
            {
                var LineNumber = sgen.GetError(err);
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        private DataTable RemoveHeadName_br(DataTable dtt)
        {
            int NETID = 0;
            DataTable Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
            DataTable DtLeaveMain = (DataTable)sgen.GetSession(MyGuid, "DtLeaveMain");
            string colname = "";
            var cols = dtt.Columns.Count;
            for (int c = 0; c < cols; c++)
            {
                colname = dtt.Columns[c].ColumnName.ToUpper().Trim();
                string headname = "", NewName = "";
                //colname = colname.Substring(4, colname.Length - 4);
                headname = sgen.seekval_dt(Dtheadmain, "NAME='" + colname + "'", "ID");
                if (!headname.Equals("0"))
                {
                    if (headname.StartsWith("DED")) NewName = "DEDRATE" + headname.Substring(3, headname.Length - 3);
                    else if (headname.StartsWith("ER")) NewName = "ERRATE" + headname.Substring(2, headname.Length - 2);
                    if (!NewName.Trim().Equals("")) dtt.Columns[c].ColumnName = NewName;
                }
            }
            return dtt;
        }
        private DataTable GiveHeadName_br(DataTable dtt)
        {
            DataTable Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
            int NETID = 0;
            string colname = "";
            var cols = dtt.Columns.Count;
            for (int c = 0; c < cols; c++)
            {
                colname = dtt.Columns[c].ColumnName.ToUpper().Trim();
                string headname = "0", NewName = "";
                if (colname.StartsWith("ER")) headname = sgen.seekval_dt(Dtheadmain, "id='ER" + colname.Substring(6, colname.Length - 6) + "'", "NAME");
                if (colname.StartsWith("DED")) headname = sgen.seekval_dt(Dtheadmain, "id='DED" + colname.Substring(7, colname.Length - 7) + "'", "NAME");
                NewName = headname;
                if (!headname.Equals("0")) dtt.Columns[c].ColumnName = NewName;
            }
            return dtt;
        }
        private DataTable CleanDT_br(DataTable dtt)
        {
            var Dtheadmain = (DataTable)sgen.GetSession(MyGuid, "Dtheadmain");
            int ers = 20;
            string colname = "";
            for (int e = 1; e <= ers; e++)
            {
                //EARNINGS
                try
                {
                    colname = "ER" + e;
                    var Head_Name_Actual = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "NAME").ToString();
                    if (Head_Name_Actual == "0") dtt.Columns.Remove(dtt.Columns["ERRATE" + e]);
                }
                catch (Exception err)
                {
                }
                //DEDUCTIONS
                try
                {
                    colname = "DED" + e;
                    //colname = dtt.Columns["DEDRATE" + e].ColumnName.ToUpper().ToString().Replace("DEDRATE", "DED"); ;
                    //var colname_T = "DED" + colname.Substring(3, colname.Length - 3);
                    var Head_Name_Actual = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "NAME");
                    var iseditable = sgen.seekval_dt(Dtheadmain, "id='" + colname + "'", "cur_tehsil").ToString();
                    if (Head_Name_Actual == "0" || iseditable == "Y") dtt.Columns.Remove(dtt.Columns["DEDRATE" + e]);
                }
                catch (Exception err)
                {
                }
            }
            return dtt;
        }
        #endregion
        #region incr_new
        public ActionResult incr_new()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.vold = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "BULK INCREMENT";
            tm1.Col10 = "empincr";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "INC";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            tm1.TList2 = mod1;
            tm1.TList3 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.dt1 = null;
            tm1.dt2 = null;
            //Session["dtkin1"] = null;
            //Session["dtkin2"] = null;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult incr_new(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            string stng = "";
            bool error = false;
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
            model[0].dt1 = dtm;
            #region list
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            if (mod1 == null)
            {
                //months             
                mod1 = cmd_Fun.month(userCode, unitid_mst);
            }
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
            //TempData[MyGuid + "_TList1"] = mod1;
            //TempData[MyGuid + "_TList2"] = mod2;
            //TempData[MyGuid + "_TList3"] = mod3;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            #endregion
            var tmodel = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vget = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + tmodel.Col10 + " where type='" + tmodel.Col12 + "'" + tmodel.Col11 + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num;
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    #region grade
                    // shiv
                    DataTable dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KGM' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                        }

                    }
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    #endregion
                    #region Dept
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                    #endregion
                    #region Desig
                    TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.desig(userCode, unitid_mst);

                    #endregion



                    model[0].SelectedItems2 = new string[] { "001" };
                    model[0].SelectedItems3 = new string[] { "001" };
                    model[0].SelectedItems1 = new string[] { "001" };
                }
                catch (Exception ex)
                {
                    ViewBag.vnew = "";
                    ViewBag.vnext = "disabled='disabled'";
                    ViewBag.vcalc = "disabled='disabled'";
                    ViewBag.vgetdata = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                    ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0);disableForm();";
                }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                try
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "Y", actionName, controllerName, model);
                    ViewBag.vnew = "disabled='disabled'";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Get Data")
            {
                mq0 = "SELECT  A.emp_code AS EMP_CODE ,A.FIRST_NAME,S.ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10," +
                    "S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
"S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
"S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,S.ACTRATE FROM EMP_MASTER A LEFT JOIN  SALMAIN S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
"WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and to_char(a.ex_dt,'yyyy')='1900'  ORDER BY EMP_CODE";
                var dtt = sgen.getdata(userCode, mq0);
                #region CALCULATE
                var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                    ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE TYPE='KSP' AND CUR_STATE IN ('1','2','4') AND " +
                    "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                dtt = CleanDT_br(dtt);
                #endregion
                //TO SHOW ON GRID
                #region grID
                dtt = GiveHeadName_br(dtt);
                model[0].dt1 = dtt;
                #endregion
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vget = "";
                ViewBag.vold = "";
            }
            else if (command == "Old Data")
            {
                var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                 ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE  TYPE='KSP' AND CUR_STATE IN ('1','2','4') AND " +
                 "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                mq = "select * from " +
                          "(SELECT(emp.client_id || emp.client_unit_id || emp.vch_num || (case when nvl(en.rec_id, '0') = '0' then 0 else 1 end)) Sno,nvl(en.rec_id, '0') rec_id," +
                          "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code Emp_Code, emp.old_empcode Old_EmpCode," +
                          "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department," +
                          "dg.master_name Designation, vm.vch_num headid,(vm.col1) headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype,to_number(nvl(vm.col41,0)) as ordd FROM " +
                          "emp_master emp " +
                          "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                          "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                          "left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                          "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id,col1,max(ref_code) vers from enx_tab where type = 'KES' " +
                          "group by client_id,client_unit_id,col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) en " +
                          "on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                          "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                          "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.fnf_dt,'yyyy')='1900' and to_char(emp.ex_dt,'yyyy')= '1900' " +
                          "union all " +
                          "SELECT (emp.client_id || emp.client_unit_id || emp.vch_num || (case when nvl(en.rec_id, '0') = '0' then 0 else 1 end)) Sno,nvl(en.rec_id, '0') rec_id," +
                          "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code EmpCode, emp.old_empcode Old_EmpCode," +
                          "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department," +
                          "dg.master_name Designation,vm.vch_num headid,(vm.col1) headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype,to_number(nvl(vm.col41,0)) as ordd FROM " +
                          "emp_master emp " +
                          "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                          "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                          "left outer join vehicle_master vm on 1 = 1 and vm.type = 'ASP' and vm.client_id = '" + clientid_mst + "'  and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                          "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id, col1, max(ref_code) as vers from enx_tab where type = 'AES' " +
                          "group by client_id, client_unit_id, col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) " +
                          "en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'AES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                          "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                          "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.fnf_dt,'yyyy')='1900' and to_char(emp.ex_dt,'yyyy')= '1900' " +
                          ") tab  where headid is not null order by emp_code,ordd, headid asc";
                DataTable dtl = new DataTable();
                dtl = sgen.getdata(userCode, mq);
                sgen.SetSession(MyGuid, "KESDTB", dtl);
                DataView dv = dtl.DefaultView;
                DataTable dtemp = dv.ToTable(true, "emp_code");
                for (int a = 0; a < dtemp.Rows.Count; a++)
                {
                    var sno = dtl.Select("emp_code='" + dtemp.Rows[a]["emp_code"].ToString() + "'").CopyToDataTable().Compute("MAX(sno)", string.Empty);
                    var verno = dtl.Select("emp_code='" + dtemp.Rows[a]["emp_code"].ToString() + "'").CopyToDataTable().Compute("MAX(verno)", string.Empty);
                    dtl.Select(string.Format("[emp_code] = '{0}'", dtemp.Rows[a]["emp_code"].ToString())).ToList<DataRow>()
                     .ForEach(r =>
                     {
                         r["sno"] = sno;
                         r["verno"] = verno;
                     });
                }
                dtl.AcceptChanges();
                if (dtl.Rows.Count > 0)
                {
                    Pivot pv = new Pivot(dtl, MyGuid);
                    dtl = pv.PivotData("amount", AggregateFunction.Sum, new string[] { "Emp_Code", "Employee_Name" }, new string[] { "headname" });
                    dtl.AcceptChanges();
                }
                model[0].dt1 = dtl;
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vget = "";
                ViewBag.vold = "";
            }
            else if (command == "Save" || command == "Update")
            {
                //DataTable dtbase = (DataTable)Session["dtbase"];
                dtm = RemoveHeadName_br(dtm);
                var dts = sgen.getdata(userCode, "select * from " + model[0].Col10 + " where 1=2");
                int mrows = dtm.Rows.Count;
                if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                {
                    isedit = true;
                    vch_num = model[0].Col16;
                }
                else
                {
                    cond = "";
                    isedit = false;
                    vch_num = sgen.genNo(userCode, "select max(to_number(vch_num)) as max from " + model[0].Col10 + " where client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and type='" + model[0].Col12 + "'", 6, "max");
                }
                string currdate = sgen.server_datetime(userCode);
                string ent_dt = currdate;
                string conds = "";
                for (int m = 0; m < mrows; m++)
                {
                    DataRow dr = dts.NewRow();
                    foreach (DataColumn dc in dtm.Columns)
                    {
                        try { dr[dc.ColumnName] = dtm.Rows[m][dc.ColumnName]; }
                        catch (Exception err) { }
                    }
                    dr["REC_ID"] = "0";
                    dr["emp_code"] = dr["emp_code"].ToString().Split('-')[1].Substring(3, 6);
                    dr["eff_dt"] = sgen.Make_date_S(model[0].Col19);
                    dr["appl_dt"] = sgen.Make_date_S(model[0].Col20);
                    //if (isedit)
                    //{
                    //    dr["TYPE"] = dtbase.Rows[0]["TYPE"].ToString();
                    //    dr["VCH_NUM"] = dtbase.Rows[0]["VCH_NUM"].ToString();
                    //    dr["VCH_DATE"] = dtbase.Rows[0]["VCH_DATE"];
                    //    dr["CLIENT_ID"] = dtbase.Rows[0]["CLIENT_ID"].ToString();
                    //    dr["CLIENT_UNIT_ID"] = dtbase.Rows[0]["CLIENT_UNIT_ID"].ToString();
                    //    dr["ENT_BY"] = dtbase.Rows[0]["ENT_BY"].ToString();
                    //    dr["ENT_DATE"] = dtbase.Rows[0]["ENT_DATE"].ToString();
                    //    dr["EDIT_BY"] = userid_mst;
                    //    dr["EDIT_DATE"] = currdate;
                    //    dr["CREATED_DATE"] = dtbase.Rows[0]["CREATED_DATE"].ToString();
                    //}
                    //else
                    {
                        dr["VCH_NUM"] = vch_num;
                        dr["VCH_DATE"] = currdate;
                        dr["TYPE"] = model[0].Col12;
                        if (isedit)
                        {
                            dr["client_id"] = model[0].Col1.Trim();
                            dr["client_unit_id"] = model[0].Col2.Trim();
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                    }
                    conds += clientid_mst + unitid_mst + dr["emp_code"].ToString() + ",";
                    dr["DEPT"] = "-";
                    dr["DEPT2"] = "-";
                    dts.Rows.Add(dr);
                }
                //save dts;
                if (conds.Length > 3) conds = conds.Substring(0, conds.Length - 1);
                string[] vals = conds.Split(',').Distinct().ToArray();
                cond = "type='" + model[0].Col12 + "' and  trim(client_id)||trim(client_unit_id)||trim(emp_code) in ('" + string.Join("','", vals) + "')";
                //ok = sgen.Update_data_fast1(userCode, dts, model[0].Col10, cond, isedit);
                ok = sgen.Update_data_fast1(userCode, dts, model[0].Col10, model[0].Col8, isedit);
                ViewBag.vnew = "";
                ViewBag.vsave = "disabled='disabled'";
                ViewBag.vget = "disabled='disabled'";
                ViewBag.vold = "disabled='disabled'";
                ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                model = new List<Tmodelmain>();
                model.Add(new Tmodelmain()
                {
                    TList1 = mod1,
                    TList2 = mod1,
                    TList3 = mod1,
                    SelectedItems1 = new string[] { "" },
                    SelectedItems2 = new string[] { "" },
                    SelectedItems3 = new string[] { "" },
                    Col9 = tmodel.Col9,
                    Col10 = tmodel.Col10,
                    Col11 = tmodel.Col11,
                    Col12 = tmodel.Col12,
                    Col13 = tmodel.Col13,
                    Col14 = tmodel.Col14,
                    Col15 = tmodel.Col15,
                    LTM1 = new List<Tmodelmain>()
                });
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region incr_one
        public ActionResult incr_one()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.vold = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "BULK INCREMENT";
            tm1.Col10 = "EMPINCR";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "INC";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            tm1.TList2 = mod1;
            tm1.TList3 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.dt1 = null;
            tm1.dt2 = null;
            TempData[MyGuid + "_TList1"] = mod1;
            TempData[MyGuid + "_TList2"] = mod1;
            TempData[MyGuid + "_TList3"] = mod1;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult incr_one(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            string stng = "";
            bool error = false;
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
            model[0].dt1 = dtm;
            #region list
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            if (mod1 == null)
            {
                //months             
                mod1 = cmd_Fun.month(userCode, unitid_mst);
            }
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
            //TempData[MyGuid + "_TList1"] = mod1;
            //TempData[MyGuid + "_TList2"] = mod2;
            //TempData[MyGuid + "_TList3"] = mod3;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            #endregion
            var tmodel = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vget = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + tmodel.Col10 + " where type='" + tmodel.Col12 + "'" + tmodel.Col11 + "";
                    try
                    {
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    catch { }
                    model[0].Col18 = vch_num;
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    #region grade
                    // shiv
                    DataTable dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KGM' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                        }

                    }
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    #endregion
                    #region Dept
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                    #endregion
                    #region Desig
                    TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.desig(userCode, unitid_mst);

                    #endregion



                    model[0].SelectedItems2 = new string[] { "001" };
                    model[0].SelectedItems3 = new string[] { "001" };
                    model[0].SelectedItems1 = new string[] { "001" };
                }
                catch (Exception ex)
                {
                    ViewBag.vnew = "";
                    ViewBag.vnext = "disabled='disabled'";
                    ViewBag.vcalc = "disabled='disabled'";
                    ViewBag.vgetdata = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                    ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0);disableForm();";
                }
            }
            else if (command == "View")
            {
                mq0 = "SELECT  A.emp_code AS EMP_CODE ," +
                              "A.FIRST_NAME||' '||replace(A.MIDDLE_NAME,'0','')||' '||replace(A.LAST_NAME,'0','')||'('||dp.master_name||')' AS FIRST_NAME,TO_CHAR(EFF_DT,'DD/MM/YYYY') AS EFF_DT" +
                              ",TO_CHAR(APPL_DT,'DD/MM/YYYY') AS APPL_DT,S.ERRATE1,S.ERRATE2,S.ERRATE3,S.ERRATE4,S.ERRATE5,S.ERRATE6,S.ERRATE7,S.ERRATE8,S.ERRATE9,S.ERRATE10," +
                 "S.ERRATE11,S.ERRATE12,S.ERRATE13,S.ERRATE14," +
"S.ERRATE15,S.ERRATE16,S.ERRATE17,S.ERRATE18,S.ERRATE19,S.ERRATE20,S.DEDRATE1,S.DEDRATE2,S.DEDRATE3,S.DEDRATE4,S.DEDRATE5,S.DEDRATE6,S.DEDRATE7,S.DEDRATE8,S.DEDRATE9," +
"S.DEDRATE10,S.TOTEARN,S.TOTDED,S.NETSALARY,S.ACTRATE FROM EMP_MASTER A " +
"LEFT JOIN  empincr S ON A.VCH_NUM = S.EMP_CODE AND A.CLIENT_UNIT_ID = S.CLIENT_UNIT_ID  " +
"left join master_setting dp on dp.master_id = a.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, a.client_id)= 1 and find_in_set(dp.client_unit_id, a.client_unit_id)= 1 " +
"WHERE A.CLIENT_UNIT_ID = '" + unitid_mst + "' and a.emp_status != 'R' and to_char(a.ex_dt,'yyyy')='1900' AND a.client_unit_id ='"+unitid_mst+"'  ORDER BY EMP_CODE";
              DataTable  dtt = sgen.getdata(userCode, mq0);
                #region CALCULATE
                var Dtheadmain = sgen.getdata(userCode, "SELECT COL1 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                    ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                    "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001'");
                sgen.SetSession(MyGuid, "Dtheadmain", Dtheadmain);
                dtt = CleanDT_br(dtt);

                sgen.open_grid_dt("List of Increments", dtt, 0);
                //ViewBag.pageurl = sgen.GetSession(MyGuid, "pageurl").ToString();
                ViewBag.scripCall = "callFoo('List of Increments');";
                #endregion


            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                try
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "Y", actionName, controllerName, model);
                    ViewBag.vnew = "disabled='disabled'";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Save" || command == "Update")
            {

                var ef_dt = DateTime.ParseExact(model[0].Col19, sgen.Getdateformat(), CultureInfo.InvariantCulture).ToString("yyyyMM");
                var ap_dt = DateTime.ParseExact(model[0].Col20, sgen.Getdateformat(), CultureInfo.InvariantCulture).ToString("yyyyMM");
                //DataTable dtbase = (DataTable)Session["dtbase"];
                var dts = sgen.getdata(userCode, "select * from " + model[0].Col10 + " where 1=2");
                int mrows = dtm.Rows.Count;
                string vch_date = "";
                string currdate = sgen.server_datetime(userCode);
                string ent_dt = currdate;
                if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                {
                    isedit = true;
                    vch_num = model[0].Col16;
                    vch_date = sgen.Make_date_S(model[0].Col18);
                }
                else
                {
                    vch_date = currdate;
                    cond = "";
                    isedit = false;
                    vch_num = sgen.genNo(userCode, "select max(to_number(vch_num)) as max from " + model[0].Col10 + " where client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and type='" + model[0].Col12 + "'", 6, "max");
                }
                string conds = "";
                //for (int m = 0; m < mrows; m++)
                //{
                //    var empcode = dtm.Rows[m]["emp_code"].ToString().Split('-')[1].Substring(3, 6);
                  
                //    mq = sgen.seekval(userCode, "SELECT VCH_NUM FROM EMPINCR WHERE TYPE='INC' AND CLIENT_UNIT_ID='" + unitid_mst + "' AND EMP_CODE='" + empcode + "' " +
                //        " and to_char(appl_dt,'YYYYMM')='" + ap_dt + "' and vch_num<>'" + vch_num + "' and " +
                //        "to_char(vch_date,'" + sgen.Getsqldateformat() + "')<>'" + model[0].Col18.Trim() + "'", "VCH_NUM");
                //    if (mq.Trim() == "0") { }
                //    else
                //    {
                //        ViewBag.vnext = "";
                //        ViewBag.vnew = "disabled='disabled'";
                //        ViewBag.vgetdata = "disabled='disabled'";
                //        ViewBag.scripCall = "showmsgJS(1,'Employee Increment already Done for the Month (" + ap_dt + ") for " +
                //            "Employee (" + dtm.Rows[m]["FIRST_NAME"].ToString() + "(" + empcode + ")).Please cheeck Entry No." + mq + "',0)";
                //        return View(model);
                //    }
                //}
                dtm = RemoveHeadName_br(dtm);
                for (int m = 0; m < mrows; m++)
                {
                    DataRow dr = dts.NewRow();
                    foreach (DataColumn dc in dtm.Columns)
                    {
                        try { dr[dc.ColumnName] = dtm.Rows[m][dc.ColumnName]; }
                        catch (Exception err) { }
                    }
                    dr["REC_ID"] = "0";
                    dr["emp_code"] = dr["emp_code"].ToString().Split('-')[1].Substring(3, 6);
                    dr["eff_dt"] = sgen.Make_date_S(model[0].Col19);
                    dr["appl_dt"] = sgen.Make_date_S(model[0].Col20);
                    dr["VCH_NUM"] = vch_num;
                    dr["VCH_date"] = vch_date;
                    dr["TYPE"] = model[0].Col12;
                    if (isedit)
                    {
                        dr["client_id"] = model[0].Col1.Trim();
                        dr["client_unit_id"] = model[0].Col2.Trim();
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                    }
                    conds += clientid_mst + unitid_mst + dr["emp_code"].ToString() + ",";
                    dr["DEPT"] = "-";
                    dr["DEPT2"] = "-";
                    dts.Rows.Add(dr);

                    if (!isedit)
                    {
                        var empcode = dr["emp_code"].ToString();
                        mq = sgen.seekval(userCode, "SELECT VCH_NUM FROM EMPINCR WHERE TYPE='INC' AND CLIENT_UNIT_ID='" + unitid_mst + "' AND EMP_CODE='" + empcode + "' " +
                            " and to_char(appl_dt,'YYYYMM')='" + ap_dt + "' and vch_num<>'" + vch_num + "' and " +
                            "to_char(vch_date,'" + sgen.Getsqldateformat() + "')<>'" + model[0].Col18.Trim() + "'", "VCH_NUM");
                        if (mq.Trim() != "0") { isedit = true; }
                    }
                    
                }
                //save dts;
                if (conds.Length > 3)
                {
                    conds = conds.Substring(0, conds.Length - 1);

                }

                string[] vals = conds.Split(',').Distinct().ToArray();
                cond = "type='" + model[0].Col12 + "' and  trim(client_id)||trim(client_unit_id)||trim(emp_code) in ('" + string.Join("','", vals) + "') " +
                    "and to_char(appl_dt,'YYYYMM')='" + ap_dt + "'";
                ok = sgen.Update_data_fast1(userCode, dts, model[0].Col10, cond, isedit);
                //ok = sgen.Update_data_fast1(userCode, dts, model[0].Col10, model[0].Col8, isedit);
                ViewBag.vnew = "";
                ViewBag.vsave = "disabled='disabled'";
                ViewBag.vget = "disabled='disabled'";
                ViewBag.vold = "disabled='disabled'";
                ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                model = new List<Tmodelmain>();
                model.Add(new Tmodelmain()
                {
                    TList1 = mod1,
                    TList2 = mod1,
                    TList3 = mod1,
                    SelectedItems1 = new string[] { "" },
                    SelectedItems2 = new string[] { "" },
                    SelectedItems3 = new string[] { "" },
                    Col9 = tmodel.Col9,
                    Col10 = tmodel.Col10,
                    Col11 = tmodel.Col11,
                    Col12 = tmodel.Col12,
                    Col13 = tmodel.Col13,
                    Col14 = tmodel.Col14,
                    Col15 = tmodel.Col15,
                    LTM1 = new List<Tmodelmain>()
                });
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region emp_salary_process - commented
        //public ActionResult emp_salary_process()
        //{
        //    FillMst("");
        //    chkRef();
        //    ViewBag.vnew = "";
        //    ViewBag.vnext = "disabled='disabled'";
        //    ViewBag.vcalc = "disabled='disabled'";
        //    ViewBag.vgetdata = "disabled='disabled'";
        //    ViewBag.scripCall = "disableForm();";
        //    mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
        //    m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
        //    List<SelectListItem> mod1 = new List<SelectListItem>();
        //    List<Tmodelmain> model = new List<Tmodelmain>();
        //    Tmodelmain tm = new Tmodelmain();
        //    tm.Col9 = "SALARY PROCESS";
        //    tm.Col10 = "emp_salary_process";
        //    tm.Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        //    tm.Col12 = "ESP";
        //    tm.Col13 = "Next";
        //    tm.Col14 = mid_mst.Trim();
        //    tm.Col15 = m_id_mst.Trim();
        //    tm.TList1 = mod1;
        //    TempData[MyGuid + "_Tlist1"] = mod1;
        //    tm.SelectedItems1 = new string[] { "" };
        //    model.Add(tm);
        //    return View(model);
        //}
        //[HttpPost]
        //public ActionResult emp_salary_process(List<Tmodelmain> model, string command, string hfrow, string hftable)
        //{
        //    //string stng = "";
        //    //bool error = false;
        //    //FillMst(model[0].Col15);
        //    //DataTable dtm = sgen.settable(hftable);
        //    //sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
        //    //model[0].dt1 = dtm;
        //    //#region list
        //    //List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
        //    //if (mod1 == null)
        //    //{
        //    //    //months
        //    //    #region
        //    //    mod1 = cmd_Fun.month(userCode, unitid_mst);
        //    //    #endregion
        //    //}
        //    //model[0].TList1 = mod1;
        //    //TempData[MyGuid + "_TList1"] = mod1;
        //    //if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
        //    //#endregion
        //    //var tmodel = model.FirstOrDefault();
        //    //if (command == "Cancel")
        //    //{
        //    //    // shiv
        //    //    try
        //    //    {
        //    //        ViewBag.vnew = "";
        //    //        ViewBag.vnext = "disabled='disabled'";
        //    //        ViewBag.vcalc = "disabled='disabled'";
        //    //        ViewBag.vgetdata = "disabled='disabled'";
        //    //        ViewBag.scripCall = "disableForm();";
        //    //        model = new List<Tmodelmain>();
        //    //        Tmodelmain tm = new Tmodelmain();
        //    //        tm.Col9 = "SALARY PROCESS";
        //    //        tm.Col10 = "emp_salary_process";
        //    //        tm.Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        //    //        tm.Col12 = "ESP";
        //    //        tm.Col13 = "Next";
        //    //        tm.Col14 = mid_mst.Trim();
        //    //        tm.Col15 = m_id_mst.Trim();
        //    //        tm.TList1 = mod1;
        //    //        tm.SelectedItems1 = new string[] { "" };
        //    //        model.Add(tm);
        //    //    }
        //    //    catch (Exception ex)
        //    //    {
        //    //        ViewBag.vnew = "";
        //    //        ViewBag.vnext = "disabled='disabled'";
        //    //        ViewBag.vcalc = "disabled='disabled'";
        //    //        ViewBag.vgetdata = "disabled='disabled'";
        //    //        ViewBag.scripCall = "disableForm();";
        //    //        ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0);disableForm();";
        //    //    }
        //    //}
        //    //if (command == "New")
        //    //{
        //    //    try
        //    //    {
        //    //        sgen.SetSession(MyGuid, "CHECKBTN", "NEXT");
        //    //        sgen.SetSession(MyGuid, "EDMODE", "N");
        //    //        ViewBag.vnew = "disabled='disabled'";
        //    //        ViewBag.vnext = "disabled='disabled'";
        //    //        ViewBag.vcalc = "disabled='disabled'";
        //    //        ViewBag.vgetdata = "";
        //    //        ViewBag.scripCall = ViewBag.scripCall + "enableForm();";
        //    //        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "'" + model[0].Col11 + "";
        //    //        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
        //    //        model[0].Col18 = vch_num.Trim();
        //    //        //months
        //    //        #region
        //    //        mod1 = cmd_Fun.month(userCode, unitid_mst);
        //    //        TempData[MyGuid + "_TList1"] = mod1;
        //    //        #endregion
        //    //        model[0].TList1 = mod1;
        //    //        model[0].SelectedItems1 = new string[] { "" };
        //    //    }
        //    //    catch (Exception ex)
        //    //    {
        //    //        ViewBag.vnew = "";
        //    //        ViewBag.vnext = "disabled='disabled'";
        //    //        ViewBag.vcalc = "disabled='disabled'";
        //    //        ViewBag.vgetdata = "disabled='disabled'";
        //    //        ViewBag.scripCall = "disableForm();";
        //    //        ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0);disableForm();";
        //    //    }
        //    //}
        //    //else if (command == "Cancel")
        //    //{
        //    //    return CancelFun(model);
        //    //}
        //    //else if (command == "Callback")
        //    //// shiv
        //    //{
        //    //    try
        //    //    {
        //    //        if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
        //    //        model = CallbackFun(btnval, "Y", "emp_salary_process", "Hr", model);
        //    //        ViewBag.vnew = "disabled='disabled'";
        //    //    }
        //    //    catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
        //    //}
        //    #region
        //    //else if (command == "Get Data11")
        //    //{
        //    //    try
        //    //    {
        //    //        #region month checking
        //    //        int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault());
        //    //        int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
        //    //        string lastyyyymmm = "";
        //    //        string curryyyymmm = "";
        //    //        if (currmonth <= 12 && currmonth > 4)
        //    //        {
        //    //            lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //    //            curryyyymmm = curryear + sgen.padlc((currmonth), 3);
        //    //        }
        //    //        else if (currmonth == 1)
        //    //        {
        //    //            lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //    //            curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
        //    //        }
        //    //        else if (currmonth > 1 && currmonth < 4)
        //    //        {
        //    //            lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
        //    //            curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
        //    //        }
        //    //        else if (currmonth == 4)
        //    //        {
        //    //            lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //    //            curryyyymmm = curryear + sgen.padlc((currmonth), 3);
        //    //        }
        //    //        Session["curryyyymmm"] = curryyyymmm;
        //    //        mq1 = "select max(currmmmyyyy) currmmmyyyy from emp_salary_process where type='ESP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        //    //        mq = sgen.seekval(userCode, mq1, "currmmmyyyy");
        //    //        if (mq.Trim() == "0") { }
        //    //        else
        //    //        {
        //    //            mq1 = "select distinct currmmmyyyy from emp_salary_process where type='ESP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and " +
        //    //                "(to_char(vch_date,'yyyy')||month_id)='" + lastyyyymmm + "'";
        //    //            mq = sgen.seekval(userCode, mq1, "currmmmyyyy");
        //    //            if (mq.Trim() == "0")
        //    //            {
        //    //                ViewBag.vnew = "";
        //    //                ViewBag.vnext = "disabled='disabled'";
        //    //                ViewBag.vback = "disabled='disabled'";
        //    //                ViewBag.vcalc = "disabled='disabled'";
        //    //                ViewBag.vgetdata = "disabled='disabled'";
        //    //                ViewBag.scripCall = "showmsgJS(1,'Your previous month salary is pending. you cannot create salary',2);disableForm()";
        //    //                return View(model);
        //    //            }
        //    //            if (Session["EDMODE"].ToString().Equals("Y"))
        //    //            {
        //    //                cond = sgen.seekval(userCode, "select currmmmyyyy from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and " +
        //    //                "client_unit_id='" + unitid_mst + "' and currmmmyyyy='" + curryyyymmm + "'", "currmmmyyyy");
        //    //                if (!cond.Equals("0"))
        //    //                {
        //    //                    //Means Already Exits....   
        //    //                    ViewBag.vnew = "";
        //    //                    ViewBag.vnext = "disabled='disabled'";
        //    //                    ViewBag.vback = "disabled='disabled'";
        //    //                    ViewBag.vcalc = "disabled='disabled'";
        //    //                    ViewBag.vgetdata = "disabled='disabled'";
        //    //                    ViewBag.scripCall = "showmsgJS(1,'Already have this month record',0);disableForm()";
        //    //                    return View(model);
        //    //                }
        //    //            }
        //    //        }
        //    //        #endregion
        //    //        mq = "select sectionid from master_setting where master_id='" + model[0].SelectedItems1.FirstOrDefault() + "' and type='MNT'";
        //    //        string dys = sgen.getstring(userCode, mq);
        //    //        if (!dys.Trim().Equals(""))
        //    //        {
        //    //            model[0].Col19 = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " - " + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim();
        //    //            mq = "SELECT '" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month,em.emp_code EmpCode,em.external_empno " +
        //    //                "External_EmpCode,(em.FIRST_NAME|| ' '|| REPLACE(em.MIDDLE_NAME,'0','')|| ' '||REPLACE(em.LAST_NAME,'0','')) as Employee_Name,'" + dys.Trim() + "' as Days," +
        //    //                "nvl(en.col8,'0') as OT_hrs,'0' as Paid_Days," +
        //    //                "(kc.col1||' ('|| kc.vch_num||')') headname, nvl(leave_ob.leave_count, 0) as t_count from " +
        //    //                "emp_master em " +
        //    //                "left outer join kc_tab kc on 1 = 1 and kc.type = 'KLV' and kc.client_id = '" + clientid_mst + "' and kc.client_unit_id = '" + unitid_mst + "' " +
        //    //                "left join (select a.* from leave_ob a inner join (select max(vch_num) as vch_num,max(vch_date) as vch_date from leave_ob " +
        //    //                "where type = 'EAT' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "') b on a.vch_num = b.vch_num and a.vch_date = b.vch_date) " +
        //    //                "leave_ob on em.vch_num = leave_ob.emp_code and kc.vch_num = leave_ob.leave_type_id AND leave_ob.curryyyymmm='" + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim() + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //    //                "and leave_ob.type = 'EAT' and leave_ob.client_id = '" + clientid_mst + "' and leave_ob.client_unit_id = '" + unitid_mst + "' and leave_ob.month_id = '" + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //    //               "left outer join enx_tab en on en.col7=em.vch_num and leave_ob.curryyyymmm='" + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim() + model[0].SelectedItems1.FirstOrDefault() + "' and en.type='OTE' and en.client_id='" + clientid_mst + "' and en.client_unit_id='" + unitid_mst + "' and en.col9='" + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //    //               "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' and em.emp_status='Y' and to_char(em.ex_dt,'yyyy')='1900'";
        //    //            mq = "select '" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month ," +
        //    //                " a.ot,a.formula,a.htype,a.pf,a.fixamt,a.ordd,a.rec_id,a.External_EmpCode,a.EmpCode,a.Employee_Name,a.headname,a.headid,a.headlimit,a.amount,b.head_count newamount from " +
        //    //                "(select b.esi as ot, b.formula,b.col8 as htype,b.pf,b.col6 as fixamt,b.ordd as ordd, a.* from (select * from (SELECT nvl(en.rec_id,'0') rec_id,emp.external_empno as External_EmpCode," +
        //    //                "emp.emp_code EmpCode,trim(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(emp.LAST_NAME, '0', '')) as Employee_Name,(vm.col1|| ' ('|| vm.vch_num|| ')') headname," +
        //    //                "vm.vch_num as headid,(CASE WHEN vm.vch_num = '000011' THEN emp.ispflimit WHEN vm.vch_num = '000020' THEN emp.is_vpf ELSE '0' END) as headlimit,(case WHEN vm.vch_num = '000011' " +
        //    //                "THEN emp.pf_limit WHEN vm.vch_num = '000020' THEN emp.vpf ELSE nvl(en.col10, '0') END) amount,'0.00' as newamount FROM emp_master emp left outer join vehicle_master vm on 1 = 1 and " +
        //    //                "vm.type = 'KSP' and vm.client_id = '001' and vm.client_unit_id = '001001' and vm.cur_state <> '0' LEFT outer join enx_tab en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and " +
        //    //                "en.type = 'KES' and en.client_id = '001' and en.client_unit_id = '001001' WHERE emp.type = 'EMP' and emp.client_id = '001' and emp.client_unit_id = '001001' and emp.emp_status='Y' " +
        //    //                "and to_char(emp.ex_dt,'YYYY')='1900' union all SELECT nvl(en.rec_id,'0') rec_id,emp.external_empno as External_EmpCode,emp.emp_code EmpCode,trim((emp.FIRST_NAME|| ' '" +
        //    //                "|| REPLACE(emp.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(emp.LAST_NAME, '0', ''))) as Employee_Name,('ARR_'||vm.col1|| ' ('|| vm.vch_num|| ')') headname,vm.vch_num as headid,'0' " +
        //    //                "headlimit,'0' amount,'0.00' as newamount FROM emp_master emp left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '001' and vm.client_unit_id = '001001' " +
        //    //                "and vm.cur_state <> '0' and (vm.vch_num in ('000011','000014') OR vm.col10='Earning') LEFT outer join enx_tab en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' " +
        //    //                "and en.client_id = '001' and en.client_unit_id = '001001' WHERE emp.type = 'EMP' and emp.client_id = '001' and emp.client_unit_id = '001001' and emp.emp_status='Y' and " +
        //    //                "to_char(emp.ex_dt,'yyyy')='1900') tab2 order by headid asc ) a inner join (select * from (select '0' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,'-' formula,'-' col6,'-' " +
        //    //                "col7,sh.cur_state as col9,'No' col10,'-' as pf,'-' as esi,to_number(sh.col41) as ordd from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '001' and sh.client_unit_id = '001001' " +
        //    //                "and sh.cur_state <> '0' and sh.date2 > utc_timestamp()) a where a.col4 not in ('000011','000012','000013','000014','000015','000017','000018','000019') UNION all select * from(select '0' " +
        //    //                "col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,pf.col5 as formula,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10,pff.heads pf,'-' esi,to_number(sh.col41) as ordd from " +
        //    //                "vehicle_master sh left JOIN vehicle_master pf on 1 = 1 and pf.type = 'KPF' and pf.client_id='001' and pf.client_unit_id='001001' INNER join (select GROUP_CONCAT(sh.vch_num) as heads " +
        //    //                "from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '001' and sh.client_unit_id = '001001' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and " +
        //    //                "sh.col30='Y')pff on 1=1  where sh.type = 'KSP' and trim(sh.vch_num)= '000011' and sh.client_id = '001' and sh.client_unit_id = '001001' and sh.date2 > utc_timestamp() UNION select '0' " +
        //    //                "col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,esi.col5 formula,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10,pff.heads pf,'-' esi,to_number(sh.col41) as ordd from " +
        //    //                "vehicle_master sh left JOIN vehicle_master esi on 1 = 1 and esi.type = 'KES' and esi.client_id='001' and esi.client_unit_id='001001' INNER join (select GROUP_CONCAT(sh.vch_num) as " +
        //    //                "heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '001' and sh.client_unit_id = '001001' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp()" +
        //    //                " and sh.col31='Y') pff on 1=1 where sh.type = 'KSP' and trim(sh.vch_num)= '000014' and sh.client_id = '001' and sh.client_unit_id = '001001' and sh.date2 > utc_timestamp() UNION select '0' " +
        //    //                "col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,lwf.col17 formula,lwf.col11 col6,'-' col7,sh.cur_state as col9,'Yes' col10,pff.heads pf,'-' esi,to_number(sh.col41) as ordd from " +
        //    //                "vehicle_master sh left JOIN vehicle_master lwf on 1 = 1 and lwf.type = 'KLW' and lwf.client_id='001' and lwf.client_unit_id='001001' INNER join (select GROUP_CONCAT(sh.vch_num) as heads " +
        //    //                "from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '001' and sh.client_unit_id = '001001' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and" +
        //    //                " sh.col42='Y') pff on 1=1 where sh.type = 'KSP' and trim(sh.vch_num)= '000017' and sh.client_id = '001' and sh.client_unit_id = '001001' and sh.date2 > utc_timestamp() UNION select '0' " +
        //    //                "col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,eno.col2 formula,eno.col4 col6,'-' col7,sh.cur_state as col9,'Yes' col10,pff.heads pf,'y' esi,to_number(sh.col41) as ordd from " +
        //    //                "vehicle_master sh left JOIN (select col2,col4 from enx_tab where type='OTC' and client_id='001' and client_unit_id='001001') eno on 1 = 1 INNER join(select GROUP_CONCAT(en.col1) as heads " +
        //    //                "from enx_tab en where en.type = 'OTC' and en.client_id = '001' and en.client_unit_id = '001001') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num)= '000019' and sh.client_id = '001' " +
        //    //                "and sh.client_unit_id = '001001' and sh.date2 > utc_timestamp()) b) b on a.headid=b.col4) a INNER JOIN (select * from emp_salary_process where (currmmmyyyy||type||client_id|| client_unit_id)" +
        //    //                "='2019004ESP001001001') b on b.emp_code=substr(a.empcode,4,6) and b.head_id=a.headid and trim(upper(b.head_name))=trim(upper(trim(regexp_substr(a.headname, '[^(]+', 1, 1))))";
        //    //            DataTable dtl = new DataTable();
        //    //            dtl = sgen.getdata(userCode, mq);
        //    //            if (dtl.Rows.Count > 0)
        //    //            {
        //    //                 Pivot pv = new Pivot(dtl, MyGuid);
        //    //                dtl = pv.PivotData("t_count", AggregateFunction.Sum, new string[] { "Month", "EmpCode", "External_EmpCode", "Employee_Name", "Days", "OT_hrs", "Paid_Days" }, new string[] { "headname" });
        //    //                foreach (DataRow drr in dtl.Rows)
        //    //                {
        //    //                    drr["Paid_Days"] = sgen.Make_decimal(drr["Days"].ToString()) - sgen.Make_decimal(drr["LOP (000005)"].ToString());
        //    //                }
        //    //                dtl.AcceptChanges();
        //    //                Session["CHECKBTN"] = "NEXT";
        //    //                Session["CHECKDT"] = dtl;
        //    //                model[0].dt1 = dtl;
        //    //                ViewBag.vnew = "disabled='disabled'";
        //    //                ViewBag.vgetdata = "";
        //    //                ViewBag.vback = "disabled='disabled'";
        //    //                ViewBag.vcalc = "disabled='disabled'";
        //    //                ViewBag.vnext = "";
        //    //            }
        //    //        }
        //    //    }
        //    //    catch (Exception ex)
        //    //    {
        //    //        ViewBag.vnew = "";
        //    //        ViewBag.vnext = "disabled='disabled'";
        //    //        ViewBag.vback = "disabled='disabled'";
        //    //        ViewBag.vcalc = "disabled='disabled'";
        //    //        ViewBag.vgetdata = "disabled='disabled'";
        //    //        ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0);disableForm()";
        //    //    }
        //    //}
        //    #endregion
        //    //else if (command == "Get Data" || command == "Supp. Salary")
        //    //{
        //    //    try
        //    //    {
        //    //        mq0 = "select '-' vch_num,'-' type,'-' as name from dual " +
        //    //           "union all select vch_num,type,'PF Setting' as name from vehicle_master where type='KPF'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'ESI Setting' as name from vehicle_master where type='KES'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'LWF Setting' as name from vehicle_master where type='KLW'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'Salary Rules' as name from vehicle_master where type = 'KCR'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'OT Setting' as name from enx_tab where type='OTC'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'Bonus Setting' as name from enx_tab where type='KBC'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'Salary Advance Rule' as name from enx_tab where type='KAS'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'Salary Heads' as name from vehicle_master where type='KSP'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'Leave Heads' as name from kc_tab where type='KLV'" + model[0].Col11 + " " +
        //    //          "union all select vch_num,type,'Canteen Config' as name from enx_tab2 where type='KCD'" + model[0].Col11 + "";
        //    //        var dtcheck = sgen.getdata(userCode, mq0);
        //    //        string chkstr = "", seprator = ", ";
        //    //        if (sgen.seekval_dt(dtcheck, "type='KPF'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "PF Setting" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='KES'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "ESI Setting" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='KLW'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "LWF Setting" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='KCR'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "Salary Rules" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='OTC'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "OT Setting" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='KBC'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "Bonus Setting" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='KAS'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "Salary Advance Rules" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='KSP'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "Salary Heads" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='KLV'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "Leave Heads" + seprator; }
        //    //        if (sgen.seekval_dt(dtcheck, "type='KCD'", "vch_num").Trim().Equals("0")) { error = true; chkstr += "Canteen Config" + seprator; }
        //    //        if (error)
        //    //        {
        //    //            chkstr = "Please Configure Following settings " + seprator + chkstr;
        //    //            ViewBag.scripCall = "showmsgJS(1, '" + chkstr + "', 2);";
        //    //            ViewBag.vnew = "";
        //    //            ViewBag.vnext = "disabled='disabled'";
        //    //            ViewBag.vcalc = "disabled='disabled'";
        //    //            ViewBag.vgetdata = "disabled='disabled'";
        //    //            ViewBag.scripCall += ";disableForm();";
        //    //            return View(model);
        //    //        }
        //    //        #region month checking
        //    //        int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault());
        //    //        int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
        //    //        string lastyyyymmm = "";
        //    //        string curryyyymmm = "";
        //    //        if (currmonth <= 12 && currmonth > 4)
        //    //        {
        //    //            lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //    //            curryyyymmm = curryear + sgen.padlc((currmonth), 3);
        //    //        }
        //    //        else if (currmonth == 1)
        //    //        {
        //    //            lastyyyymmm = curryear + sgen.padlc(12, 3);
        //    //            curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
        //    //        }
        //    //        else if (currmonth > 1 && currmonth < 4)
        //    //        {
        //    //            lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
        //    //            curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
        //    //        }
        //    //        else if (currmonth == 4)
        //    //        {
        //    //            lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //    //            curryyyymmm = curryear + sgen.padlc((currmonth), 3);
        //    //        }
        //    //        sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
        //    //        string Fdate = "01/" + sgen.padlc(currmonth, 2) + "/" + curryear;
        //    //        mq1 = "select max(currmmmyyyy) currmmmyyyy from emp_salary_process where type='ESP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        //    //        mq = sgen.seekval(userCode, mq1, "currmmmyyyy");
        //    //        if (mq.Trim() == "0") { }
        //    //        else
        //    //        {
        //    //            //if (Session["EDMODE"].ToString().Equals("Y"))
        //    //            //{
        //    //            cond = sgen.seekval(userCode, "select currmmmyyyy from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and " +
        //    //            "client_unit_id='" + unitid_mst + "' and currmmmyyyy='" + curryyyymmm + "'", "currmmmyyyy");
        //    //            if (!cond.Equals("0") && command == "Get Data")
        //    //            {
        //    //                //Means Already Exits....   
        //    //                ViewBag.vnew = "";
        //    //                ViewBag.vnext = "disabled='disabled'";
        //    //                ViewBag.vcalc = "disabled='disabled'";
        //    //                ViewBag.vgetdata = "disabled='disabled'";
        //    //                ViewBag.scripCall = "showmsgJS(1,'Already generated this month salary,cannot generate again',2);disableForm()";
        //    //                return View(model);
        //    //            }
        //    //            mq1 = "select distinct currmmmyyyy from emp_salary_process where type='ESP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and " +
        //    //                "(to_char(vch_date,'yyyy')||month_id)='" + lastyyyymmm + "'";
        //    //            mq = sgen.seekval(userCode, mq1, "currmmmyyyy");
        //    //            if (mq.Trim() == "0")
        //    //            {
        //    //                ViewBag.vnew = "";
        //    //                ViewBag.vnext = "disabled='disabled'";
        //    //                ViewBag.vcalc = "disabled='disabled'";
        //    //                ViewBag.vgetdata = "disabled='disabled'";
        //    //                ViewBag.scripCall = "showmsgJS(1,'Your previous month salary is pending. you cannot create salary',2);disableForm()";
        //    //                return View(model);
        //    //            }
        //    //            //}
        //    //        }
        //    //        #endregion
        //    //        // shiv
        //    //        mq = "select sectionid as mdays from master_setting where master_id='" + model[0].SelectedItems1.FirstOrDefault() + "' and type='MNT'";
        //    //        string dys = sgen.seekval(userCode, mq, "mdays");
        //    //        DataTable dtfinal = new DataTable();
        //    //        mq = Salary_Base_query_new(model, curryyyymmm, dys, Fdate);
        //    //        //mq = "SELECT * FROM (" + mq + " ) A  where empcode='GMC000072'";
        //    //        if (command == "Supp. Salary")
        //    //        {
        //    //            mq = "select * from (" + mq + ") t WHERE SUBSTR(T.empcode,4,LENGTH(T.EMPCODE)-1) NOT IN  (SELECT DISTINCT  emp_CODE " +
        //    //                " from " + model[0].Col10 + " where type = '" + model[0].Col12 + "' and client_id = '" + clientid_mst + "' and " +
        //    //            "client_unit_id='" + unitid_mst + "' and currmmmyyyy='" + curryyyymmm + "')";
        //    //        }
        //    //        dtfinal = sgen.getdata(userCode, mq);
        //    //        DataView dv = dtfinal.DefaultView;
        //    //        DataTable dtemp = dv.ToTable(true, "empcode");
        //    //        for (int a = 0; a < dtemp.Rows.Count; a++)
        //    //        {
        //    //            var ot_hrs = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(OT_HRS)", string.Empty);
        //    //            var wkoff = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(wkoff)", string.Empty);
        //    //            var hlday = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(hlday)", string.Empty);
        //    //            var presents = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(PRESENTS)", string.Empty);
        //    //            var inc_ver = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(inc_ver)", string.Empty);
        //    //            var slel = dtfinal.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "' and htype='leaves' and headid<>'000005'").
        //    //                CopyToDataTable().Compute("MAX(newamount)", string.Empty);
        //    //            decimal paid_days = sgen.Make_decimal(presents.ToString()) + sgen.Make_decimal(slel.ToString()) + sgen.Make_decimal(wkoff.ToString()) + sgen.Make_decimal(hlday.ToString());
        //    //            foreach (var r in dtfinal.Select(string.Format("[empcode] = '{0}'", dtemp.Rows[a]["empcode"].ToString())))
        //    //            {
        //    //                r["PRESENTS"] = presents;
        //    //                r["ot_hrs"] = ot_hrs;
        //    //                r["paid_days"] = paid_days;
        //    //                r["wkoff"] = wkoff;
        //    //                r["hlday"] = hlday;
        //    //                r["inc_ver"] = inc_ver;
        //    //            }
        //    //        }
        //    //        dtfinal.AcceptChanges();
        //    //        sgen.SetSession(MyGuid, "DRESP", dtfinal);
        //    //        Pivot pv = new Pivot(dtfinal, MyGuid);
        //    //        dtfinal = pv.PivotData("newamount", AggregateFunction.Sum, new string[] { "EmpCode", "External_EmpCode", "Employee_Name", "Month", "Days", "Presents", "Wkoff", "HLDay", "OT_hrs", "Paid_days", "Bal_ADV" }, new string[] { "headname" });
        //    //        model[0].dt1 = dtfinal;
        //    //        model[0].Col13 = "Generate";
        //    //        ViewBag.vnext = "disabled='disabled'";
        //    //    }
        //    //    catch (Exception ex) { }
        //    //}
        //    //else if (command == "Generate")
        //    //{
        //    //    try
        //    //    {
        //    //        //DataTable dtbase = CalculateNow(dtm);
        //    //        DataTable dtbase = (DataTable)sgen.GetSession(MyGuid, "DRESP");
        //    //        dtm = ESCalc(dtm);
        //    //        //Pivot pv = new Pivot(dtbase);
        //    //        //dtm = pv.PivotData("newamount", AggregateFunction.Sum, new string[] { "EmpCode", "External_EmpCode", "Employee_Name", "Month", "Days", "Presents", "Wkoff", "HLDay", "OT_hrs", "Paid_days", "Bal_ADV" }, new string[] { "headname" });
        //    //        if (canbesaved)
        //    //        {
        //    //            DataTable dtstr = new DataTable();
        //    //            //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
        //    //            if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
        //    //            {
        //    //                mq1 = " and vch_num<>'" + model[0].Col18.Trim() + "'";
        //    //                isedit = true;
        //    //                vch_num = model[0].Col18.Trim();
        //    //            }
        //    //            else
        //    //            {
        //    //                mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " +
        //    //                    "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        //    //                vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
        //    //                isedit = false;
        //    //            }
        //    //            string currdate = sgen.server_datetime(userCode);
        //    //            string ent_dt = currdate;
        //    //            type = model[0].Col12;
        //    //            #region dtstr
        //    //            DataTable dtsp = new DataTable();
        //    //            var flg = "";
        //    //            int kcount = 0;
        //    //            dtsp = dtm;
        //    //            //flg = "ESH"; // employee salary head
        //    //            kcount = 11;
        //    //            //}
        //    //            Satransaction sat1 = new Satransaction(userCode, MyGuid);
        //    //            string empcodes = "";
        //    //            dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
        //    //            Decimal total_dbt = 0, total_payable = 0, total_esi = 0, total_pf = 0, total_vpf = 0, total_cant = 0, total_pt = 0, total_adv = 0, total_lwf = 0, total_oth = 0;
        //    //            foreach (DataRow gr in dtsp.Rows)
        //    //            {
        //    //                var empcode = gr["empcode"].ToString();
        //    //                string empvch = empcode.Trim().Substring(empcode.Length - 6, 6).ToString();
        //    //                if (empcodes.Trim().Equals("")) empcodes = empvch;
        //    //                else empcodes += "','" + empvch;
        //    //                string inc_ver = sgen.seekval_dt(dtbase, "empcode='GMC" + empvch + "'", "inc_ver").Trim();
        //    //                if (inc_ver == "0")
        //    //                {
        //    //                    inc_ver = sgen.seekval(userCode, "select max(ref_code) as vers " +
        //    //                        "from enx_tab where to_date(to_char(date2,'yyyyMMdd'),'yyyyMMdd')<=to_date(to_char(sysdate,'yyyyMMdd'),'yyyyMMdd')" +
        //    //                        " and type='KES' and col1='" + empcode.Trim().Substring(empcode.Length - 6, 6).ToString() + "'", "vers");
        //    //                }
        //    //                for (int k = kcount; k < dtsp.Columns.Count; k++)
        //    //                {
        //    //                    //var emp = gr["empcode"].ToString();
        //    //                    //try
        //    //                    //{
        //    //                    //    emp = gr["empcode"].ToString().Split('-')[1].ToString().Trim();
        //    //                    //}
        //    //                    //catch (Exception err) { }
        //    //                    string head_type = "", headid = "", headname = "";
        //    //                    head_type = "";
        //    //                    decimal cVal = 0;
        //    //                    headid = dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
        //    //                    headname = dtsp.Columns[k].ToString().Trim();
        //    //                    head_type = sgen.seekval_dt(dtbase, "headname='" + headname + "'", "htype").Trim();
        //    //                    if (head_type.ToUpper() == "LEAVES") flg = "ELH";
        //    //                    else flg = "ESH";
        //    //                    //emp_vchnum = sgen.seekval_dt(dtsp, "empcode='" + emp + "'", "empcode").Trim();
        //    //                    DataRow dr = dtstr.NewRow();
        //    //                    dr["vch_num"] = vch_num.Trim();
        //    //                    dr["vch_date"] = ent_dt;
        //    //                    if (isedit) dr["vch_date"] = model[0].Col16;
        //    //                    dr["type"] = type.Trim();
        //    //                    dr["emp_code"] = empcode.Trim().Substring(empcode.Length - 6, 6).ToString();
        //    //                    dr["emp_name"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "Employee_name").Trim();
        //    //                    dr["month_id"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "month").Trim().Split('(')[1].Trim().Split(')')[0].Trim();
        //    //                    dr["month_name"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "month").Trim().Split('(')[0].Trim().Split(')')[0].Trim();
        //    //                    dr["month_days"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "days").Trim();
        //    //                    dr["currmmmyyyy"] = sgen.GetSession(MyGuid, "curryyyymmm").ToString();
        //    //                    dr["paid_days"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "paid_days").Trim();
        //    //                    dr["pdays"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "presents").Trim();
        //    //                    dr["wdays"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "WKOFF").Trim();
        //    //                    dr["hdays"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "HLDAY").Trim();
        //    //                    dr["inc_ver"] = inc_ver;
        //    //                    dr["head_type"] = head_type.Trim();
        //    //                    dr["head_name"] = dtsp.Columns[k].ToString().Trim().Split('(')[0].Trim();
        //    //                    dr["head_id"] = dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
        //    //                    dr["head_count"] = gr[k].ToString().Trim();
        //    //                    cVal = sgen.Make_decimal(gr[k].ToString().Trim());
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000011") total_pf += cVal;
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000014" ||
        //    //                       dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000022")
        //    //                    {
        //    //                        total_esi += cVal;
        //    //                    }
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000016") total_pt += cVal;
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000017") total_lwf += cVal;
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000020") total_vpf += cVal;
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000021") total_adv += cVal;
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000024") total_cant += cVal;
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "000025") total_oth += cVal;
        //    //                    if (dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim().ToUpper() == "999999") total_payable += cVal;
        //    //                    if (head_type.ToUpper().Trim().Equals("EARNING"))
        //    //                    {
        //    //                        total_dbt += cVal;
        //    //                    }
        //    //                    //if (flg.Trim().Equals("ESH"))
        //    //                    //{
        //    //                    //    mq0 = sgen.seekval(userCode, "select col10 from vehicle_master where type='KSP' and client_id='" + clientid_mst + "' " +
        //    //                    //        "and client_unit_id='" + unitid_mst + "' and vch_num='" + dtsp.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim() + "'", "col10");
        //    //                    //    if (!mq0.Trim().Equals("0")) dr["head_type"] = mq0.Trim();
        //    //                    //}
        //    //                    dr["head_flag"] = flg;
        //    //                    dr["ot_hrs"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "ot_hrs").Trim();
        //    //                    dr["bal_adv"] = sgen.seekval_dt(dtsp, "empcode='" + empcode + "'", "bal_adv").Trim();
        //    //                    if (isedit)
        //    //                    {
        //    //                        dr["ent_by"] = model[0].Col3;
        //    //                        dr["ent_date"] = model[0].Col4;
        //    //                        dr["client_id"] = clientid_mst;
        //    //                        dr["client_unit_id"] = unitid_mst;
        //    //                        dr["edit_by"] = userid_mst;
        //    //                        dr["edit_date"] = ent_dt;
        //    //                    }
        //    //                    else
        //    //                    {
        //    //                        dr["ent_by"] = userid_mst;
        //    //                        dr["ent_date"] = ent_dt;
        //    //                        dr["client_id"] = clientid_mst;
        //    //                        dr["client_unit_id"] = unitid_mst;
        //    //                        dr["edit_by"] = '-';
        //    //                        dr["edit_date"] = ent_dt;
        //    //                    }
        //    //                    dr["rec_id"] = "0";
        //    //                    dtstr.Rows.Add(dr);
        //    //                }
        //    //            }
        //    //            string tcond = "emp_code in ('" + empcodes + "') and currmmmyyyy = '" + sgen.GetSession(MyGuid, "curryyyymmm").ToString().Trim() + "'";
        //    //            Satransaction sat = new Satransaction(userCode, MyGuid);
        //    //            ok = sgen.Update_data_fast1_uncommit(userCode, dtstr, model[0].Col10, tcond, isedit, sat);
        //    //            #endregion
        //    //            if (ok)
        //    //            {
        //    //                mq0 = sgen.seekval(userCode, "select param1 from controls where type='CTL' and id='000003' ", "param1");
        //    //                if (mq0 == "Y")
        //    //                {
        //    //                    #region Voucher
        //    //                    model[0].Col48 = sgen.server_datetime_dt(userCode).ToString(sgen.GetSaveDateFormat());
        //    //                    DataTable dtv = cmd_Fun.GetStructure(userCode, "vouchers");
        //    //                    #region party
        //    //                    DataRow drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000015";//party code
        //    //                    drv["ANAME"] = "Customer 1";//party name
        //    //                    drv["CRAMOUNT"] = "0";
        //    //                    drv["DRAMOUNT"] = total_dbt;
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region Salary
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000012";//party code
        //    //                    drv["ANAME"] = "Salary Payable";//party name
        //    //                    drv["CRAMOUNT"] = total_payable;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region ESI
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000013";//party code
        //    //                    drv["ANAME"] = "ESI Payable";//party name
        //    //                    drv["CRAMOUNT"] = total_esi;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region PF
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000014";//party code
        //    //                    drv["ANAME"] = "PF Payable";//party name
        //    //                    drv["CRAMOUNT"] = total_pf;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region VPF
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000020";//party code
        //    //                    drv["ANAME"] = "VPF Payable";//party name
        //    //                    drv["CRAMOUNT"] = total_vpf;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region Adv
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000019";//party code
        //    //                    drv["ANAME"] = "Salary Advance";//party name
        //    //                    drv["CRAMOUNT"] = total_adv;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region Lwf
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000017";//party code
        //    //                    drv["ANAME"] = "LWF Payable";//party name
        //    //                    drv["CRAMOUNT"] = total_lwf;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region Pt
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000016";//party code
        //    //                    drv["ANAME"] = "PT Payable";//party name
        //    //                    drv["CRAMOUNT"] = total_pt;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region canteen
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000018";//party code
        //    //                    drv["ANAME"] = "Canteen Payable";//party name
        //    //                    drv["CRAMOUNT"] = total_cant;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    #region other
        //    //                    drv = dtv.NewRow();
        //    //                    drv["REC_ID"] = "0";
        //    //                    drv["VCH_NUM"] = vch_num;
        //    //                    drv["VCH_DATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TYPE"] = model[0].Col12;
        //    //                    drv["CLIENT_ID"] = clientid_mst;
        //    //                    drv["CLIENT_UNIT_ID"] = unitid_mst;
        //    //                    drv["ENT_BY"] = userid_mst;
        //    //                    drv["ENT_DATE"] = currdate;
        //    //                    drv["EDIT_BY"] = userid_mst;
        //    //                    drv["EDIT_DATE"] = currdate;
        //    //                    drv["CREATED_DATE"] = currdate;
        //    //                    drv["ACODE"] = "000021";//party code
        //    //                    drv["ANAME"] = "Other Exp";//party name
        //    //                    drv["CRAMOUNT"] = total_oth;
        //    //                    drv["DRAMOUNT"] = "0";
        //    //                    drv["INVNO"] = vch_num;
        //    //                    drv["INVDATE"] = sgen.Make_date_S(model[0].Col48);
        //    //                    drv["TOTREMARK"] = "-";
        //    //                    dtv.Rows.Add(drv);
        //    //                    #endregion
        //    //                    ok = sgen.Update_data_fast1_uncommit(userCode, dtv, "vouchers", "vch_num='" + vch_num + "' and " +
        //    //                        "client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", isedit, sat);
        //    //                    #endregion
        //    //                }
        //    //                if (ok)
        //    //                {
        //    //                    sat.Commit();
        //    //                    ViewBag.vnew = "";
        //    //                    ViewBag.vgetdata = "disabled='disabled'";
        //    //                    ViewBag.vcalc = "disabled='disabled'";
        //    //                    ViewBag.vnext = "disabled='disabled'";
        //    //                    ViewBag.scripCall = "showmsgJS(1, 'Data Saved Successfully', 1);disableForm();";
        //    //                    model = new List<Tmodelmain>();
        //    //                    model.Add(new Tmodelmain()
        //    //                    {
        //    //                        TList1 = mod1,
        //    //                        SelectedItems1 = new string[] { "" },
        //    //                        Col9 = tmodel.Col9,
        //    //                        Col10 = tmodel.Col10,
        //    //                        Col11 = tmodel.Col11,
        //    //                        Col12 = tmodel.Col12,
        //    //                        Col13 = "Next",
        //    //                        Col14 = tmodel.Col14,
        //    //                        Col15 = tmodel.Col15,
        //    //                    });
        //    //                }
        //    //                else
        //    //                {
        //    //                    sat.Rollback();
        //    //                    ViewBag.vnext = "";
        //    //                    ViewBag.vnew = "disabled='disabled'";
        //    //                    ViewBag.vgetdata = "disabled='disabled'";
        //    //                    ViewBag.scripCall = "showmsgJS(1,'Could not Save Please Try again',0)";
        //    //                }
        //    //            }
        //    //            else
        //    //            {
        //    //                sat.Rollback();
        //    //                ViewBag.vnext = "";
        //    //                ViewBag.vnew = "disabled='disabled'";
        //    //                ViewBag.vgetdata = "disabled='disabled'";
        //    //                ViewBag.scripCall = "showmsgJS(1,'Could not Save Please Try again',0)";
        //    //            }
        //    //        }
        //    //        else
        //    //        {
        //    //            ViewBag.scripCall += "showmsgJS(1,'Data Not Calculated Properly Please Calculate and Check Each Value',0)";
        //    //        }
        //    //    }
        //    //    catch (Exception ex)
        //    //    {
        //    //        ViewBag.vnext = "disabled='disabled'";
        //    //        ViewBag.vnew = "disabled='disabled'";
        //    //        ViewBag.vgetdata = "disabled='disabled'";
        //    //        ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString().Replace("'", "") + "',0)";
        //    //    }
        //    //}
        //    //else if (command == "Back")
        //    //{
        //    //    try
        //    //    {
        //    //        if (model[0].dt1.Rows.Count <= 0)
        //    //        {
        //    //            ViewBag.vnew = "";
        //    //            ViewBag.vnext = "disabled='disabled'";
        //    //            ViewBag.vcalc = "disabled='disabled'";
        //    //            ViewBag.vgetdata = "disabled='disabled'";
        //    //            ViewBag.scripCall = "showmsgJS(1,No Data Found,2);disableForm();";
        //    //        }
        //    //        if (sgen.GetSession(MyGuid, "dtleaves") != null)
        //    //        {
        //    //            dtm = (DataTable)sgen.GetSession(MyGuid, "dtleaves");
        //    //            if (dtm.Rows.Count > 0)
        //    //            {
        //    //                sgen.SetSession(MyGuid, "CHECKBTN", "NEXT");
        //    //                dtm.Columns.Remove("bal_adv");
        //    //                dtm.AcceptChanges();
        //    //                model[0].dt1 = dtm;
        //    //                ViewBag.vnew = "disabled='disabled'";
        //    //                ViewBag.vgetdata = "disabled='disabled'";
        //    //                ViewBag.vcalc = "disabled='disabled'";
        //    //                ViewBag.vnext = "";
        //    //                model[0].Col13 = "Next";
        //    //            }
        //    //        }
        //    //    }
        //    //    catch (Exception ex)
        //    //    {
        //    //        ViewBag.vnew = "disabled='disabled'";
        //    //        ViewBag.vgetdata = "disabled='disabled'";
        //    //        ViewBag.vcalc = "disabled='disabled'";
        //    //        ViewBag.vnext = "";
        //    //        model[0].Col13 = "Next";
        //    //        ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0)";
        //    //    }
        //    //}
        //    //else if (command == "Calculate")
        //    //{
        //    //    try
        //    //    {
        //    //        //DataTable dtesp = CalculateNow(dtm);
        //    //        DataTable dtesp = ESCalc(dtm);
        //    //        if (dtesp.Rows.Count > 0)
        //    //        {
        //    //            // Pivot pv = new Pivot(dtesp,MyGuid);
        //    //            //dtesp = pv.PivotData("newamount", AggregateFunction.Sum, new string[] { "EmpCode", "External_EmpCode", "Employee_Name", "Month", "Days", "Presents", "Wkoff", "HLDay", "OT_hrs", "Paid_days", "Bal_ADV" }, new string[] { "headname" });
        //    //            model[0].dt1 = dtesp;
        //    //            model[0].Col13 = "Generate";
        //    //            ViewBag.vnew = "disabled='disabled'";
        //    //            ViewBag.vgetdata = "disabled='disabled'";
        //    //        }
        //    //    }
        //    //    catch (Exception err) { }
        //    //}
        //    ModelState.Clear();
        //    return View(model);
        //}
        //        private string Salary_Base_query_new(List<Tmodelmain> model, string curryyyymmm, string dys, string FDate)
        //        {
        //            mq = @"select * from (select '0' bal_adv,a.month,a.paid_days,a.ot_hrs,a.pdays as presents,a.wdays as wkoff,a.hdays as hlday,a.days, a.ot,a.formula,a.attndep,a.htype,a.pf,a.fixamt,a.ordd,
        //a.External_EmpCode,a.EmpCode,a.Employee_Name,a.headname,a.headid,(case when a.htype = 'leaves' then '0' else  a.headlimit end ) headlimit,a.amount,(case when a.htype = 'leaves' 
        //then a.headlimit else '0' end) newamount,a.inc_ver from (select b.esi as ot, b.formula,b.pf,b.col6 as fixamt,(case when upper(htype)='LEAVES' then  to_number('1'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') else (case when upper(htype)='EARNING' then 
        //(case when substr(upper(a.headname),1,4)='ARR_'  then  to_number('2'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.1') 
        //else to_number('2'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') end) else (case when substr(upper(a.headname),1,4)='ARR_' 
        //then  to_number('3'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.1') else to_number('3'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') end) end) end) as ordd, a.* from
        //(select * from (select * from (SELECT vm.col18 as attndep, vm.col10 as htype, '" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"emp.emp_code EmpCode, emp.external_empno as External_EmpCode, trim((emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', ''))) as Employee_Name," +
        //"'" + dys.Trim() + "' as Days, '0' as OT_hrs, '0' as Paid_Days, '0' as pdays, '0' wdays, '0' hdays, (vm.col1 || ' (' || vm.vch_num || ')') headname, vm.vch_num as headid, " +
        //"(CASE WHEN vm.vch_num = '000011' THEN emp.ispflimit WHEN vm.vch_num = '000020' THEN emp.is_vpf WHEN vm.vch_num = '000007' THEN emp.iscanteen WHEN vm.vch_num = '000014' THEN emp.isesilimit ELSE '0' END) as headlimit," +
        //" (case WHEN vm.vch_num = '000011' THEN emp.pf_limit WHEN vm.vch_num = '000020' THEN emp.vpf WHEN vm.vch_num = '000007' THEN emp.canteen WHEN vm.vch_num = '000014' THEN emp.esi_limit ELSE nvl(en.col10, '0') END) amount, 0.00 as newamount" +
        //",to_number(vm.col41) as ord1,nvl(en.ref_code,'0') as inc_ver " +
        //" FROM emp_master emp left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and " +
        //"vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '0'  and trim(vm.col29)='Y'  LEFT outer join " +
        //"( select a.* from enx_tab a inner join  (select client_id,client_unit_id,col1,type,max(ref_code) as vers from enx_tab where " +
        //"to_date(to_char(date2,'yyyyMMdd'),'yyyyMMdd')<=to_date(to_char(sysdate,'yyyyMMdd'),'yyyyMMdd') and type='KES' group by client_id,client_unit_id,col1,type )b " +
        //"on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and nvl(a.ref_code,'0') = nvl(b.vers, '0') and a.type = b.type and a.type = 'KES') en " +
        //"on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and " +
        //"en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' " +
        //"and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status != 'R'  " +
        //"and (case when to_char(emp.ex_dt,'yyyy')='1900' then 1 when emp.ex_dt>to_date('" + FDate + "','dd/MM/yyyy') then 1 else 0 end)=1 and emp.st_dt<=last_day(to_date('" + FDate + "','dd/MM/yyyy')) ) tab union all select * from (SELECT vm.col18 as attndep,  vm.col10 as htype " +
        //",'" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"emp.emp_code EmpCode, emp.external_empno as External_EmpCode," +
        //"trim((emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', ''))) as Employee_Name,'" + dys.Trim() + "' as Days,'0' as OT_hrs,'0' as Paid_Days" +
        //",'0' as pdays," +
        //"'0' wdays,'0' hdays,('ARR_' || vm.col1 || ' (' || vm.vch_num || ')') headname,vm.vch_num as headid,'0' headlimit,'0' amount,0.00 as newamount,to_number(vm.col41) as ord1 ,'0' as inc_ver " +
        //"FROM emp_master emp left outer join " +
        //"vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '0' and trim(vm.col29)='Y'  and (vm.vch_num in ('000011', '000014', '000020') OR " +
        //"vm.col10 = 'Earning')  LEFT outer join enx_tab en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' " +
        //"WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status != 'R' and  (case when to_char(emp.ex_dt,'yyyy')='1900' then 1 when emp.ex_dt>to_date('" + FDate + "','dd/MM/yyyy') then 1 else 0 end)=1 and emp.st_dt<=last_day(to_date('" + FDate + "','dd/MM/yyyy'))) tab1 union all select * from " +
        //"(SELECT '-' as attndep, 'leaves' as htype,'" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"em.emp_code EmpCode, em.external_empno External_EmpCode, trim((em.FIRST_NAME || ' ' || REPLACE(em.MIDDLE_NAME, '0', '') || ' ' || " +
        //"REPLACE(em.LAST_NAME, '0', ''))) as Employee_Name,'" + dys.Trim() + "' as Days,nvl(leave_ob.othrs, '0') as OT_hrs,'0' as Paid_Days,nvl(leave_ob.pdays, '0') pdays,nvl(leave_ob.wdays, '0') wdays," +
        //"nvl(leave_ob.hdays, '0') hdays,(kc.col1 || ' (' || kc.vch_num || ')') headname,kc.vch_num as headid,nvl(leave_ob.leave_count, 0) as headlimit,'0' amount,0.00 as newamount ,to_number(kc.col41) as ord1 ,'0' as inc_ver from " +
        //"emp_master em left outer join kc_tab kc on 1 = 1 and kc.type = 'KLV' and kc.client_id = '" + clientid_mst + "' and kc.client_unit_id = '" + unitid_mst + "' and kc.vch_num<>'000005' " +
        //"left join (select a.* from leave_ob a inner join (select max(vch_num) as vch_num,max(vch_date) as vch_date,emp_code,client_id,client_unit_id from leave_ob " +
        //"where type = 'EAT' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' and curryyyymmm = '" + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim() + model[0].SelectedItems1.FirstOrDefault() + "' group by emp_code,client_id,client_unit_id) b " +
        //"on a.vch_num = b.vch_num  AND A.VCH_DATE = b.vch_date AND a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.emp_code = b.emp_code) leave_ob " +
        //"on em.vch_num = leave_ob.emp_code and kc.vch_num = leave_ob.leave_type_id and leave_ob.curryyyymmm = '" + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim() + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //"and leave_ob.type = 'EAT' and leave_ob.client_id = '" + clientid_mst + "' and leave_ob.client_unit_id = '" + unitid_mst + "' and leave_ob.month_id = '" + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //"where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' and " +
        //"em.emp_status != 'R' and (case when to_char(em.ex_dt,'yyyy')='1900' then 1 when em.ex_dt>to_date('" + FDate + "','dd/MM/yyyy') then 1 else 0 end)=1 and em.st_dt<=last_day(to_date('" + FDate + "','dd/MM/yyyy'))) tab3) tab2 order by headid asc) a left join (select * from (select '0' col2, sh.col1 as col3, sh.vch_num as col4, " +
        //"sh.col10 as col8, '-' formula, '-' col6, '-' col7, sh.cur_state as col9, 'No' col10, '-' as pf, '-' as esi, to_number(sh.col41) as ordd from vehicle_master sh where sh.type = 'KSP' " +
        //"and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '0' and sh.date2 > utc_timestamp()) a where a.col4 not in " +
        //"('000011', '000012', '000013', '000014', '000015', '000017', '000018', '000019','000022','000023') " +
        //"UNION all " +
        //"select * from (select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8," +
        //"pf.col5 as formula, '-' col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, to_number(sh.col41) as ordd from vehicle_master sh left JOIN vehicle_master pf " +
        //"on 1 = 1 and pf.type = 'KPF' and pf.client_id = '" + clientid_mst + "' and pf.client_unit_id = '" + unitid_mst + "' INNER join (select GROUP_CONCAT(sh.vch_num) as heads from vehicle_master sh where sh.type = 'KSP' " +
        //"and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y') pff on 1 = 1  where " +
        //"sh.type = 'KSP' and trim(sh.vch_num) = '000011' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, " +
        //"sh.vch_num as col4, sh.col10 as col8, esi.col5 formula, '-' col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, to_number(sh.col41) as ordd from vehicle_master sh " +
        //"left JOIN vehicle_master esi on 1 = 1 and esi.type = 'KES' and esi.client_id = '" + clientid_mst + "' and esi.client_unit_id = '" + unitid_mst + "' INNER join (select GROUP_CONCAT(sh.vch_num) as heads from " +
        //"vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and " +
        //"sh.col31 = 'Y') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) in('000014','000022') and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8, lwf.col17 formula, lwf.col11 col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, " +
        //"to_number(sh.col41) as ordd from vehicle_master sh left JOIN vehicle_master lwf on 1 = 1 and lwf.type = 'KLW' and lwf.client_id = '" + clientid_mst + "' and lwf.client_unit_id = '" + unitid_mst + "' INNER join " +
        //"(select GROUP_CONCAT(sh.vch_num) as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and " +
        //"sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col42 = 'Y') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) = '000017' and sh.client_id = '" + clientid_mst + "' and " +
        //"sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8, eno.col2 formula, eno.col4 col6, '-' col7, " +
        //"sh.cur_state as col9, 'Yes' col10, pff.heads pf, 'y' esi, to_number(sh.col41) as ordd from vehicle_master sh left JOIN (select col2, col4 from enx_tab where type = 'OTC' and " +
        //"client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "') eno on 1 = 1 INNER join (select GROUP_CONCAT(en.col1) as heads from enx_tab en where en.type = 'OTC' and en.client_id = '" + clientid_mst + "' and " +
        //"en.client_unit_id = '" + unitid_mst + "') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) = '000019' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and " +
        //"sh.date2 > utc_timestamp()) b) b on a.headid = b.col4) a) b order by ordd";
        //            return mq;
        //        }
        //        private string Salary_Base_query_edit(List<Tmodelmain> model, string curryyyymmm, string dys, string FDate)
        //        {
        //            mq = @"select * from (select '0' bal_adv,a.month,a.paid_days,a.ot_hrs,a.pdays as presents,a.wdays as wkoff,a.hdays as hlday,a.days, a.ot,a.formula,a.attndep,a.htype,a.pf,a.fixamt,a.ordd,
        //a.External_EmpCode,a.EmpCode,a.Employee_Name,a.headname,a.headid,(case when a.htype = 'leaves' then '0' else  a.headlimit end ) headlimit,a.amount,(case when a.htype = 'leaves' 
        //then a.headlimit else '0' end) newamount,a.inc_ver from (select b.esi as ot, b.formula,b.pf,b.col6 as fixamt,(case when upper(htype)='LEAVES' then  to_number('1'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') else (case when upper(htype)='EARNING' then 
        //(case when substr(upper(a.headname),1,4)='ARR_'  then  to_number('2'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.1') 
        //else to_number('2'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') end) else (case when substr(upper(a.headname),1,4)='ARR_' 
        //then  to_number('3'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.1') else to_number('3'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') end) end) end) as ordd, a.* from
        //(select * from (select * from (SELECT vm.col18 as attndep, vm.col10 as htype, '" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"emp.emp_code EmpCode, emp.external_empno as External_EmpCode, trim((emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', ''))) as Employee_Name," +
        //"'" + dys.Trim() + "' as Days, '0' as OT_hrs, '0' as Paid_Days, '0' as pdays, '0' wdays, '0' hdays, (vm.col1 || ' (' || vm.vch_num || ')') headname, vm.vch_num as headid, " +
        //"(CASE WHEN vm.vch_num = '000011' THEN emp.ispflimit WHEN vm.vch_num = '000020' THEN emp.is_vpf WHEN vm.vch_num = '000007' THEN emp.iscanteen WHEN vm.vch_num = '000014' THEN emp.isesilimit ELSE '0' END) as headlimit," +
        //" (case WHEN vm.vch_num = '000011' THEN emp.pf_limit WHEN vm.vch_num = '000020' THEN emp.vpf WHEN vm.vch_num = '000007' THEN emp.canteen WHEN vm.vch_num = '000014' THEN emp.esi_limit ELSE nvl(en.col10, '0') END) amount," +
        //" 0.00 as newamount,to_number(vm.col41) as ord1,nvl(en.ref_code,'0') as inc_ver" +
        //" FROM emp_master emp left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and " +
        //"vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '0'  and trim(vm.col29)='Y'  LEFT outer join " +
        //"  (select a.* from enx_tab a inner join  ( select distinct client_id,client_unit_id,emp_code as col1,inc_ver as vers from emp_salary_process" +
        //" where type = 'ESP' and currmmmyyyy = '" + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim() + model[0].SelectedItems1.FirstOrDefault() + "' and client_id='" + clientid_mst + "' " +
        //"and client_unit_id = '" + unitid_mst + "' ) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and nvl(a.ref_code,'0') = nvl(b.vers, '0')" +
        //" and a.type = 'KES') en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and " +
        //"en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "'  and " +
        //" (case when to_char(emp.ex_dt,'yyyy')='1900' then 1 when emp.ex_dt>to_date('" + FDate + "','dd/MM/yyyy') then 1 else 0 end)=1) tab union all select * from (SELECT vm.col18 as attndep,  vm.col10 as htype ,'" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"emp.emp_code EmpCode, emp.external_empno as External_EmpCode," +
        //"trim((emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', ''))) as Employee_Name,'" + dys.Trim() + "' as Days,'0' as OT_hrs,'0' as Paid_Days,'0' as pdays," +
        //"'0' wdays,'0' hdays,('ARR_' || vm.col1 || ' (' || vm.vch_num || ')') headname,vm.vch_num as headid,'0' headlimit,'0' amount,0.00 as newamount,to_number(vm.col41) as ord1 ,'0' inc_ver FROM emp_master emp left outer join " +
        //"vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '0' and trim(vm.col29)='Y'  and (vm.vch_num in ('000011', '000014', '000020') OR " +
        //"vm.col10 = 'Earning')  LEFT outer join enx_tab en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' " +
        //"WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "'  and (case when to_char(emp.ex_dt,'yyyy')='1900' then 1 when emp.ex_dt>to_date('" + FDate + "','dd/MM/yyyy') then 1 else 0 end)=1) tab1 union all select * from " +
        //"(SELECT '-' as attndep, 'leaves' as htype,'" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"em.emp_code EmpCode, em.external_empno External_EmpCode, trim((em.FIRST_NAME || ' ' || REPLACE(em.MIDDLE_NAME, '0', '') || ' ' || " +
        //"REPLACE(em.LAST_NAME, '0', ''))) as Employee_Name,'" + dys.Trim() + "' as Days,nvl(leave_ob.othrs, '0') as OT_hrs,'0' as Paid_Days,nvl(leave_ob.pdays, '0') pdays,nvl(leave_ob.wdays, '0') wdays," +
        //"nvl(leave_ob.hdays, '0') hdays,(kc.col1 || ' (' || kc.vch_num || ')') headname,kc.vch_num as headid,nvl(leave_ob.leave_count, 0) as headlimit,'0' amount,0.00 as newamount ,to_number(kc.col41) as ord1,'0' inc_ver from " +
        //"emp_master em left outer join kc_tab kc on 1 = 1 and kc.type = 'KLV' and kc.client_id = '" + clientid_mst + "' and kc.client_unit_id = '" + unitid_mst + "' and kc.vch_num<>'000005' " +
        //"left join (select a.* from leave_ob a inner join (select max(vch_num) as vch_num,max(vch_date) as vch_date,emp_code,client_id,client_unit_id from leave_ob " +
        //"where type = 'EAT' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' and curryyyymmm = '" + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim() + model[0].SelectedItems1.FirstOrDefault() + "' group by emp_code,client_id,client_unit_id) b " +
        //"on a.vch_num = b.vch_num  AND A.VCH_DATE = b.vch_date AND a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.emp_code = b.emp_code) leave_ob " +
        //"on em.vch_num = leave_ob.emp_code and kc.vch_num = leave_ob.leave_type_id and leave_ob.curryyyymmm = '" + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim() + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //"and leave_ob.type = 'EAT' and leave_ob.client_id = '" + clientid_mst + "' and leave_ob.client_unit_id = '" + unitid_mst + "' and leave_ob.month_id = '" + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //"where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' and " +
        //"  (case when to_char(em.ex_dt,'yyyy')='1900' then 1 when em.ex_dt>to_date('" + FDate + "','dd/MM/yyyy') then 1 else 0 end)=1) tab3) tab2 order by headid asc) a left join (select * from (select '0' col2, sh.col1 as col3, sh.vch_num as col4, " +
        //"sh.col10 as col8, '-' formula, '-' col6, '-' col7, sh.cur_state as col9, 'No' col10, '-' as pf, '-' as esi, to_number(sh.col41) as ordd from vehicle_master sh where sh.type = 'KSP' " +
        //"and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '0' and sh.date2 > utc_timestamp()) a where a.col4 not in " +
        //"('000011', '000012', '000013', '000014', '000015', '000017', '000018', '000019','000022','000023') " +
        //"UNION all " +
        //"select * from (select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8," +
        //"pf.col5 as formula, '-' col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, to_number(sh.col41) as ordd from vehicle_master sh left JOIN vehicle_master pf " +
        //"on 1 = 1 and pf.type = 'KPF' and pf.client_id = '" + clientid_mst + "' and pf.client_unit_id = '" + unitid_mst + "' INNER join (select GROUP_CONCAT(sh.vch_num) as heads from vehicle_master sh where sh.type = 'KSP' " +
        //"and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y') pff on 1 = 1  where " +
        //"sh.type = 'KSP' and trim(sh.vch_num) = '000011' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, " +
        //"sh.vch_num as col4, sh.col10 as col8, esi.col5 formula, '-' col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, to_number(sh.col41) as ordd from vehicle_master sh " +
        //"left JOIN vehicle_master esi on 1 = 1 and esi.type = 'KES' and esi.client_id = '" + clientid_mst + "' and esi.client_unit_id = '" + unitid_mst + "' INNER join (select GROUP_CONCAT(sh.vch_num) as heads from " +
        //"vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and " +
        //"sh.col31 = 'Y') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) in('000014','000022') and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8, lwf.col17 formula, lwf.col11 col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, " +
        //"to_number(sh.col41) as ordd from vehicle_master sh left JOIN vehicle_master lwf on 1 = 1 and lwf.type = 'KLW' and lwf.client_id = '" + clientid_mst + "' and lwf.client_unit_id = '" + unitid_mst + "' INNER join " +
        //"(select GROUP_CONCAT(sh.vch_num) as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and " +
        //"sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col42 = 'Y') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) = '000017' and sh.client_id = '" + clientid_mst + "' and " +
        //"sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8, eno.col2 formula, eno.col4 col6, '-' col7, " +
        //"sh.cur_state as col9, 'Yes' col10, pff.heads pf, 'y' esi, to_number(sh.col41) as ordd from vehicle_master sh left JOIN (select col2, col4 from enx_tab where type = 'OTC' and " +
        //"client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "') eno on 1 = 1 INNER join (select GROUP_CONCAT(en.col1) as heads from enx_tab en where en.type = 'OTC' and en.client_id = '" + clientid_mst + "' and " +
        //"en.client_unit_id = '" + unitid_mst + "') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) = '000019' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and " +
        //"sh.date2 > utc_timestamp()) b) b on a.headid = b.col4) a) b order by ordd";
        //            return mq;
        //        }
        //        private string Salary_Base_query(List<Tmodelmain> model, string curryyyymmm, string dys)
        //        {
        //            mq = @"select * from (select '0' bal_adv,a.month,a.paid_days,a.ot_hrs,a.pdays as presents,a.wdays as wkoff,a.hdays as hlday,a.days, a.ot,a.formula,a.attndep,a.htype,a.pf,a.fixamt,a.ordd,
        //a.External_EmpCode,a.EmpCode,a.Employee_Name,a.headname,a.headid,(case when a.htype = 'leaves' then '0' else  a.headlimit end ) headlimit,a.amount,(case when a.htype = 'leaves' 
        //then a.headlimit else '0' end) newamount from (select b.esi as ot, b.formula,b.pf,b.col6 as fixamt,(case when upper(htype)='LEAVES' then  to_number('1'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') else (case when upper(htype)='EARNING' then 
        //(case when substr(upper(a.headname),1,4)='ARR_'  then  to_number('2'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.1') 
        //else to_number('2'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') end) else (case when substr(upper(a.headname),1,4)='ARR_' 
        //then  to_number('3'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.1') else to_number('3'||lpad(nvl(b.ordd,a.ord1),2,'0')||'.0') end) end) end) as ordd, a.* from
        //(select * from (select * from (SELECT vm.col18 as attndep, vm.col10 as htype, '" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"emp.emp_code EmpCode, emp.external_empno as External_EmpCode, trim((emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', ''))) as Employee_Name," +
        //"'" + dys.Trim() + "' as Days, '0' as OT_hrs, '0' as Paid_Days, '0' as pdays, '0' wdays, '0' hdays, (vm.col1 || ' (' || vm.vch_num || ')') headname, vm.vch_num as headid, " +
        //"(CASE WHEN vm.vch_num = '000011' THEN emp.ispflimit WHEN vm.vch_num = '000020' THEN emp.is_vpf WHEN vm.vch_num = '000007' THEN emp.iscanteen ELSE '0' END) as headlimit," +
        //" (case WHEN vm.vch_num = '000011' THEN emp.pf_limit WHEN vm.vch_num = '000020' THEN emp.vpf WHEN vm.vch_num = '000007' THEN emp.canteen ELSE nvl(en.col10, '0') END) amount, 0.00 as newamount,to_number(vm.col41) as ord1" +
        //" FROM emp_master emp left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and " +
        //"vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '0'  and trim(vm.col29)='Y'  LEFT outer join enx_tab en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and " +
        //"en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and " +
        //"to_char(emp.ex_dt, 'yyyy') = '1900') tab union all select * from (SELECT vm.col18 as attndep,  vm.col10 as htype ,'" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"emp.emp_code EmpCode, emp.external_empno as External_EmpCode," +
        //"trim((emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', ''))) as Employee_Name,'" + dys.Trim() + "' as Days,'0' as OT_hrs,'0' as Paid_Days,'0' as pdays," +
        //"'0' wdays,'0' hdays,('ARR_' || vm.col1 || ' (' || vm.vch_num || ')') headname,vm.vch_num as headid,'0' headlimit,'0' amount,0.00 as newamount,to_number(vm.col41) as ord1 FROM emp_master emp left outer join " +
        //"vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '0' and trim(vm.col29)='Y'  and (vm.vch_num in ('000011', '000014') OR " +
        //"vm.col10 = 'Earning')  LEFT outer join enx_tab en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' " +
        //"WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.ex_dt,'yyyy')= '1900') tab1 union all select * from " +
        //"(SELECT '-' as attndep, 'leaves' as htype,'" + model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text + " (" + model[0].SelectedItems1.FirstOrDefault() + ")" + "' Month," +
        //"em.emp_code EmpCode, em.external_empno External_EmpCode, trim((em.FIRST_NAME || ' ' || REPLACE(em.MIDDLE_NAME, '0', '') || ' ' || " +
        //"REPLACE(em.LAST_NAME, '0', ''))) as Employee_Name,'" + dys.Trim() + "' as Days,nvl(leave_ob.othrs, '0') as OT_hrs,'0' as Paid_Days,nvl(leave_ob.pdays, '0') pdays,nvl(leave_ob.wdays, '0') wdays," +
        //"nvl(leave_ob.hdays, '0') hdays,(kc.col1 || ' (' || kc.vch_num || ')') headname,kc.vch_num as headid,nvl(leave_ob.leave_count, 0) as headlimit,'0' amount,0.00 as newamount ,to_number(kc.col41) as ord1 from " +
        //"emp_master em left outer join kc_tab kc on 1 = 1 and kc.type = 'KLV' and kc.client_id = '" + clientid_mst + "' and kc.client_unit_id = '" + unitid_mst + "' and kc.vch_num<>'000005' left join" +
        //"  leave_ob on em.vch_num = leave_ob.emp_code and kc.vch_num = leave_ob.leave_type_id and leave_ob.curryyyymmm = '" + curryyyymmm.Trim().ToString().Substring(0, 4).ToString().Trim() + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //"and leave_ob.type = 'EAT' and leave_ob.client_id = '" + clientid_mst + "' and leave_ob.client_unit_id = '" + unitid_mst + "' and leave_ob.month_id = '" + model[0].SelectedItems1.FirstOrDefault() + "' " +
        //"where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' and " +
        //"em.emp_status = 'Y' and to_char(em.ex_dt,'yyyy')= '1900') tab3) tab2 order by headid asc) a left join (select * from (select '0' col2, sh.col1 as col3, sh.vch_num as col4, " +
        //"sh.col10 as col8, '-' formula, '-' col6, '-' col7, sh.cur_state as col9, 'No' col10, '-' as pf, '-' as esi, to_number(sh.col41) as ordd from vehicle_master sh where sh.type = 'KSP' " +
        //"and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '0' and sh.date2 > utc_timestamp()) a where a.col4 not in " +
        //"('000011', '000012', '000013', '000014', '000015', '000017', '000018', '000019','000022','000023') " +
        //"UNION all " +
        //"select * from (select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8," +
        //"pf.col5 as formula, '-' col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, to_number(sh.col41) as ordd from vehicle_master sh left JOIN vehicle_master pf " +
        //"on 1 = 1 and pf.type = 'KPF' and pf.client_id = '" + clientid_mst + "' and pf.client_unit_id = '" + unitid_mst + "' INNER join (select GROUP_CONCAT(sh.vch_num) as heads from vehicle_master sh where sh.type = 'KSP' " +
        //"and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y') pff on 1 = 1  where " +
        //"sh.type = 'KSP' and trim(sh.vch_num) = '000011' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, " +
        //"sh.vch_num as col4, sh.col10 as col8, esi.col5 formula, '-' col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, to_number(sh.col41) as ordd from vehicle_master sh " +
        //"left JOIN vehicle_master esi on 1 = 1 and esi.type = 'KES' and esi.client_id = '" + clientid_mst + "' and esi.client_unit_id = '" + unitid_mst + "' INNER join (select GROUP_CONCAT(sh.vch_num) as heads from " +
        //"vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and " +
        //"sh.col31 = 'Y') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) in('000014','000022') and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8, lwf.col17 formula, lwf.col11 col6, '-' col7, sh.cur_state as col9, 'Yes' col10, pff.heads pf, '-' esi, " +
        //"to_number(sh.col41) as ordd from vehicle_master sh left JOIN vehicle_master lwf on 1 = 1 and lwf.type = 'KLW' and lwf.client_id = '" + clientid_mst + "' and lwf.client_unit_id = '" + unitid_mst + "' INNER join " +
        //"(select GROUP_CONCAT(sh.vch_num) as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and sh.cur_state <> '3' and " +
        //"sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col42 = 'Y') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) = '000017' and sh.client_id = '" + clientid_mst + "' and " +
        //"sh.client_unit_id = '" + unitid_mst + "' and sh.date2 > utc_timestamp() " +
        //"UNION " +
        //"select '0' col2, sh.col1 as col3, sh.vch_num as col4, sh.col10 as col8, eno.col2 formula, eno.col4 col6, '-' col7, " +
        //"sh.cur_state as col9, 'Yes' col10, pff.heads pf, 'y' esi, to_number(sh.col41) as ordd from vehicle_master sh left JOIN (select col2, col4 from enx_tab where type = 'OTC' and " +
        //"client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "') eno on 1 = 1 INNER join (select GROUP_CONCAT(en.col1) as heads from enx_tab en where en.type = 'OTC' and en.client_id = '" + clientid_mst + "' and " +
        //"en.client_unit_id = '" + unitid_mst + "') pff on 1 = 1 where sh.type = 'KSP' and trim(sh.vch_num) = '000019' and sh.client_id = '" + clientid_mst + "' and sh.client_unit_id = '" + unitid_mst + "' and " +
        //"sh.date2 > utc_timestamp()) b) b on a.headid = b.col4) a) b order by ordd";
        //            return mq;
        //        }
        //private DataTable CalculateNow(DataTable dtm)
        //{
        //    //DataTable dtesp = Refresh_DT_to_Base(dtm);
        //    DataTable dtesp = ESCalc(dtm);
        //    DataView dv = dtesp.DefaultView;
        //    DataTable dtemp = dv.ToTable(true, "empcode");
        //    for (int a = 0; a < dtemp.Rows.Count; a++)
        //    {
        //        var bal_adv = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(bal_adv)", string.Empty);
        //        var month = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(month)", string.Empty);
        //        var days = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(days)", string.Empty);
        //        var ot_hrs = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(OT_HRS)", string.Empty);
        //        var wkoff = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(wkoff)", string.Empty);
        //        var hlday = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(hlday)", string.Empty);
        //        var presents = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(PRESENTS)", string.Empty);
        //        var slel = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "' and htype='leaves' and headid<>'000005'").
        //            CopyToDataTable().Compute("MAX(newamount)", string.Empty);
        //        decimal paid_days = sgen.Make_decimal(presents.ToString()) + sgen.Make_decimal(slel.ToString()) + sgen.Make_decimal(wkoff.ToString()) + sgen.Make_decimal(hlday.ToString());
        //        foreach (var r in dtesp.Select(string.Format("[empcode] = '{0}'", dtemp.Rows[a]["empcode"].ToString())))
        //        {
        //            r["PRESENTS"] = presents;
        //            r["ot_hrs"] = ot_hrs;
        //            r["paid_days"] = paid_days;
        //            r["wkoff"] = wkoff;
        //            r["hlday"] = hlday;
        //            r["bal_adv"] = bal_adv;
        //            r["month"] = month;
        //            r["days"] = days;
        //        }
        //    }
        //    dtesp.AcceptChanges();
        //    return dtesp;
        //}
        //private DataTable Refresh_DT_to_Base(DataTable dtm)
        //{
        //    DataTable dtesp = new DataTable();
        //    dtesp = (DataTable)sgen.GetSession(MyGuid, "DRESP");
        //    DataView dv1 = new DataView(dtesp);
        //    dv1.Sort = "empcode";
        //    dtesp = dv1.ToTable();
        //    int kcount = 10;
        //    for (int g = 0; g < dtm.Rows.Count; g++)
        //    {
        //        var gr = dtm.Rows[g];
        //        for (int k = 0; k < dtm.Columns.Count; k++)
        //        {
        //            if (k > kcount)
        //            {
        //                string headname = dtm.Columns[k].ColumnName.ToString();
        //                string empcode = dtm.Columns[0].ColumnName.ToString();
        //                try
        //                {
        //                    empcode = gr["empcode"].ToString().Split('-')[1].Trim().ToString();
        //                }
        //                catch (Exception err)
        //                {
        //                    empcode = gr["empcode"].ToString();
        //                }
        //                int idx = sgen.seekval_dt_rowindex(dtesp, " empcode='" + empcode + "' and headname='" + headname + "'") - 1;
        //                if (idx > 0)
        //                {
        //                    //int idx = sgen.seekval_dt_rowindex(dtesp, "headname='" + headname + "' and empcode='" + empcode + "'") - 1;
        //                    dtesp.Rows[idx]["newamount"] = gr[k].ToString().Trim();
        //                }
        //            }
        //            else
        //            {
        //                string headname = dtm.Columns[k].ColumnName.ToString();
        //                string empcode = dtm.Columns[0].ColumnName.ToString();
        //                try
        //                {
        //                    empcode = gr["empcode"].ToString().Split('-')[1].Trim().ToString();
        //                }
        //                catch (Exception err)
        //                {
        //                    empcode = gr["empcode"].ToString();
        //                }
        //                dtesp.Select(string.Format("[empcode] = '{0}'", empcode)).ToList<DataRow>()
        //                 .ForEach(r =>
        //                 {
        //                     r[headname] = gr[k].ToString().Trim();
        //                     r["empcode"] = empcode;
        //                 });
        //                //foreach (var r in dtesp.Select(string.Format("[empcode] = '{0}'", empcode)))
        //                //{
        //                //    r[headname] = gr[k].ToString().Trim();
        //                //    r["empcode"] = empcode;
        //                //}
        //            }
        //        }
        //    }
        //    dtesp.AcceptChanges();
        //    DataView dv = dtesp.DefaultView;
        //    DataTable dtemp = dv.ToTable(true, "empcode");
        //    for (int a = 0; a < dtemp.Rows.Count; a++)
        //    {
        //        var ot_hrs = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(OT_HRS)", string.Empty);
        //        var wkoff = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(wkoff)", string.Empty);
        //        var hlday = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(hlday)", string.Empty);
        //        var presents = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(PRESENTS)", string.Empty);
        //        var slel = dtesp.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "' and htype='leaves' and headid<>'000005'").
        //            CopyToDataTable().Compute("MAX(newamount)", string.Empty);
        //        decimal paid_days = sgen.Make_decimal(presents.ToString()) + sgen.Make_decimal(slel.ToString()) + sgen.Make_decimal(wkoff.ToString()) + sgen.Make_decimal(hlday.ToString());
        //        dtesp.Select(string.Format("[empcode] = '{0}'", dtemp.Rows[a]["empcode"].ToString())).ToList<DataRow>()
        //         .ForEach(r =>
        //         {
        //             r["PRESENTS"] = presents;
        //             r["ot_hrs"] = ot_hrs;
        //             r["paid_days"] = paid_days;
        //             r["wkoff"] = wkoff;
        //             r["hlday"] = hlday;
        //         });
        //    }
        //    dtesp.AcceptChanges();
        //    return dtesp;
        //}
        //private DataTable ESCalc(DataTable dtl)
        //{
        //    //DataTable dtfinal = new DataTable();
        //    try
        //    {
        //        canbesaved = true;
        //        DataTable dtbase = (DataTable)sgen.GetSession(MyGuid, "DRESP");
        //        decimal monthday = sgen.Make_decimal(dtl.Rows[0]["Days"].ToString().Trim());
        //        //dtfinal = dtl.Clone();
        //        //DataView dtv = dtl.DefaultView;
        //        //dtv.Sort = "empcode";
        //        //var dtx = dtv.ToTable(true, "empcode");
        //        // shiv ??
        //        var EsiRule = sgen.seekval(userCode, "select col19 as amount from vehicle_master where type='KES' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "amount");
        //        var maxcant = sgen.Make_decimal(sgen.seekval(userCode, "select col1 amount from enx_tab2 where type = 'KCD' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "amount"));
        //        var maxpf = sgen.Make_decimal(sgen.seekval(userCode, "select col25 amount from vehicle_master where type = 'KPF' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "amount"));
        //        var maxesi = sgen.Make_decimal(sgen.seekval(userCode, "select col12 as amount from vehicle_master where type='KES' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "amount"));
        //        var dtroundot = sgen.getdata(userCode, "select col5 roundval,col6 roundamt FROM enx_tab WHERE type='OTC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        var dtroundpf = sgen.getdata(userCode, "SELECT col13 roundval,cur_village roundamt FROM vehicle_master WHERE type='KPF' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        var dtroundesi = sgen.getdata(userCode, "SELECT col9 roundval,col17 roundamt FROM vehicle_master WHERE type='KES' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        var dtroundlwf = sgen.getdata(userCode, "SELECT col19 roundval,col20 roundamt FROM vehicle_master WHERE type='KLW' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        var dtround = sgen.getdata(userCode, "SELECT vch_num,col7,cur_village,cur_tehsil FROM vehicle_master WHERE type='KSP' and client_id='" + clientid_mst + "' " +
        //            "and client_unit_id='" + unitid_mst + "' and cur_state<>'0' and date2 > utc_timestamp() and vch_num not in ('000011','000012','000013','000014'," +
        //            "'000015','000017','000018','000019','000020','000022','000023')");
        //        //bool hasnetpay = false;
        //        if (!dtl.Columns.Contains("Net Payable (999999)"))
        //        {
        //            DataColumn dc = new DataColumn("Net Payable (999999)", typeof(decimal));
        //            dtl.Columns.Add(dc);
        //        }
        //        // otheads
        //        var otroundval = dtroundot.Rows[0]["roundval"].ToString().Trim();
        //        int otroundamt = Convert.ToInt16(dtroundot.Rows[0]["roundamt"].ToString().Trim());
        //        //pf
        //        var pfroundval = dtroundpf.Rows[0]["roundval"].ToString().Trim();
        //        int pfroundamt = Convert.ToInt16(dtroundpf.Rows[0]["roundamt"].ToString().Trim());
        //        //esi
        //        var esiroundval = dtroundesi.Rows[0]["roundval"].ToString().Trim();
        //        int esiroundamt = Convert.ToInt16(dtroundesi.Rows[0]["roundamt"].ToString().Trim());
        //        //lwf
        //        var lwfroundval = dtroundlwf.Rows[0]["roundval"].ToString().Trim();
        //        int lwfroundamt = Convert.ToInt16(dtroundlwf.Rows[0]["roundamt"].ToString().Trim());
        //        for (int b = 0; b < dtl.Rows.Count; b++)
        //        {
        //            var dre = dtl.Rows[b];
        //            decimal paidays = 0, presentdays = 0;
        //            var gmccode = dre["EmpCode"].ToString().Trim();
        //            try { gmccode = dre["EmpCode"].ToString().Split('-')[1].Trim(); } catch (Exception err) { }
        //            var basic = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000001' and headname not like 'ARR_%' and htype<>'leaves'").CopyToDataTable().Rows[0]["amount"].ToString());
        //            double totearn = 0, toded = 0;
        //            presentdays = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0]["presents"].ToString());
        //            for (int h = 3; h < dtl.Columns.Count; h++)
        //            {
        //                var colname = dtl.Columns[h].ColumnName.Trim().Trim().ToLower();
        //                if (paidays > monthday)
        //                {
        //                    ViewBag.scripCall += "showmsgJS(1, 'No. of Paid_days are greater (" + paidays + ") than Monthdays (" + monthday + ")', 0);"; canbesaved = false;
        //                }
        //                if (colname == "presents" || colname == "wkoff" || colname == "hlday")
        //                {
        //                    dre[colname] = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0][colname].ToString());
        //                    paidays += sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0][colname].ToString());
        //                }
        //                if (colname == "ot_hrs" || colname == "bal_adv")
        //                {
        //                    dre[colname] = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0][colname].ToString());
        //                }
        //                var headtype = "";
        //                try
        //                {
        //                    var hname = dtl.Columns[h].ColumnName.Trim().Split('(')[0].Trim();
        //                    var hid = dtl.Columns[h].ColumnName.Trim().Split('(')[1].Trim().Split(')')[0].Trim();
        //                    headtype = dtbase.Select("empcode='" + gmccode + "'  and headname='" + dtl.Columns[h].ColumnName.Trim() + "'")[0]["htype"].ToString().ToLower();
        //                    if (headtype.Trim().Equals("leaves"))
        //                    {
        //                        dre[colname] = dtbase.Select("empcode='" + gmccode + "'  and headname='" + dtl.Columns[h].ColumnName.Trim() + "'")[0]["newamount"].ToString().ToLower();
        //                        paidays += sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'  and headname='" + dtl.Columns[h].ColumnName.Trim() + "'")[0]["newamount"].ToString().ToLower());
        //                        continue;
        //                    }
        //                    dre["Paid_days"] = paidays;
        //                    decimal tmaxpf = 0;
        //                    string headlimit = "";
        //                    decimal amtt = 0;
        //                    //decimal frml = 0;
        //                    decimal totpfable = 0;
        //                    decimal pfamount = 0;
        //                    var fixamt = "";
        //                    switch (hid)
        //                    {
        //                        //ot
        //                        #region
        //                        case "000019":
        //                            //if (userCode.Trim().ToUpper() == "SKYKESHO")
        //                            //{ }
        //                            //else
        //                            {
        //                                string dayhours = "";
        //                                decimal shifthrs = 0;
        //                                decimal otd = 0;
        //                                var otfrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000019' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());
        //                                var otids = dtbase.Select("empcode='" + gmccode + "' and headid='000019' and headname not like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                var otheads = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + otids + "') and headname not like 'ARR_%'").CopyToDataTable();
        //                                if (userCode.Trim().ToUpper() == "SKYKESHO")
        //                                {
        //                                    mq0 = "select act_hrs from emp_master where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_code='" + gmccode + "'";
        //                                    dayhours = mq0 = sgen.seekval(userCode, mq0, "act_hrs");
        //                                }
        //                                else
        //                                {
        //                                    dayhours = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                                }
        //                                if (!dayhours.Trim().Equals("-"))
        //                                {
        //                                    try
        //                                    {
        //                                        string[] ddd = dayhours.Split(':');
        //                                        decimal hh = sgen.Make_int(ddd[0].ToString());
        //                                        decimal mm = sgen.Make_int(ddd[1].ToString());
        //                                        decimal ss = sgen.Make_int(ddd[2].ToString());
        //                                        shifthrs = hh + (mm / 60) + (ss / 60 / 60);
        //                                    }
        //                                    catch (Exception ex) { }
        //                                }
        //                                try
        //                                {
        //                                    if (!hname.Contains("ARR_"))
        //                                    {
        //                                        var ot_hrss = sgen.Make_decimal(dtl.Rows[b]["OT_hrs"].ToString().Trim());
        //                                        if (ot_hrss > shifthrs)
        //                                        {
        //                                            otd = ot_hrss / shifthrs;
        //                                            ot_hrss = Math.Abs(ot_hrss - (otd * shifthrs));
        //                                        }
        //                                        if (ot_hrss > 0) otd = otd + (ot_hrss / shifthrs);
        //                                        totpfable = otheads.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                        amtt = ((((totpfable / monthday) * otd) * otfrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(otroundval, amtt, otroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                catch (Exception err) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            }
        //                            break;
        //                        #endregion
        //                        //Employee PF
        //                        #region
        //                        case "000011":
        //                            try
        //                            {
        //                                if (!hname.StartsWith("ARR_"))
        //                                {
        //                                    var pffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000011' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var pfids = dtbase.Select("empcode='" + gmccode + "' and headid='000011' and headname not like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var pfdtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + pfids + "') and headname not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] pfheads = pfdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    tmaxpf = 0;
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, pfheads);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["headlimit"].ToString();
        //                                    if (headlimit.Trim().Equals("Y"))
        //                                    {
        //                                        var limitamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["amount"].ToString();
        //                                        tmaxpf = sgen.Make_decimal(limitamt.Replace("%", "").Trim());
        //                                    }
        //                                    else { tmaxpf = maxpf; }
        //                                    if (totpfable > tmaxpf) totpfable = tmaxpf;
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * pffrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(pfroundval, amtt, pfroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    var pffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000011' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var pfidsarr = dtbase.Select("empcode='" + gmccode + "' and headid='000011' and headname  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var pfdtpfarr = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + pfidsarr + "') and headname  like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] pfheadsarr = pfdtpfarr.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, pfheadsarr);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    //if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                                    dre[dtl.Columns[h].ColumnName] = 0;
        //                                    {
        //                                        amtt = ((totpfable * pffrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(pfroundval, amtt, pfroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            break;
        //                        #endregion
        //                        //Employee ESI
        //                        #region
        //                        case "000014":
        //                            try
        //                            {
        //                                if (!hname.Contains("ARR_"))
        //                                {
        //                                    var esifrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000014' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var esiids = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var esidtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] esiheads = esidtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, esiheads);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["headlimit"].ToString();
        //                                    if (headlimit.Trim().Equals("Y"))
        //                                    {
        //                                        var limitamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["amount"].ToString();
        //                                        tmaxpf = sgen.Make_decimal(limitamt.Replace("%", "").Trim());
        //                                    }
        //                                    else { tmaxpf = maxesi; }
        //                                    var esicheck = esidtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    bool hadesi = false;
        //                                    if (esicheck < tmaxpf) hadesi = true;
        //                                    else
        //                                    {
        //                                        if (EsiRule.Trim().Equals("1"))
        //                                        {
        //                                            string esimntid = "000";
        //                                            decimal monthiddd = sgen.Make_decimal(dtbase.Rows[0]["month"].ToString().Split('(')[1].Split(')')[0].ToString().Trim());
        //                                            if (monthiddd > 4 && monthiddd < 10)
        //                                            {
        //                                                esimntid = "004";
        //                                            }
        //                                            else if (monthiddd > 10 || monthiddd < 4)
        //                                            {
        //                                                esimntid = "010";
        //                                            }
        //                                            mq2 = "select head_count as val from emp_salary_process where head_id='000014' and month_id='" + esimntid + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_code='" + emp_code + "'";
        //                                            mq2 = sgen.seekval(userCode, mq2, "val");
        //                                            if (sgen.Make_decimal(mq2) > 0) hadesi = true;
        //                                        }
        //                                    }
        //                                    if (!hadesi && esicheck > tmaxpf) totpfable = 0;
        //                                    //pfamount = Math.Round(((((totpfable / monthday) * paidays) * frml) / 100), 2, MidpointRounding.AwayFromZero);
        //                                    //if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                    dre[dtl.Columns[h].ColumnName] = "0";
        //                                    //else
        //                                    {
        //                                        amtt = ((totpfable * esifrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(esiroundval, amtt, esiroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    var esiids = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var esidtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] esiheads = esidtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var esifrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000014' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var esiidsarr = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname   like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var esidtpfarr = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiidsarr + "') and headid<>'000019' and headname  like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] esiheadsarr = esidtpfarr.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, esiheadsarr);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["headlimit"].ToString();
        //                                    if (headlimit.Trim().Equals("Y"))
        //                                    {
        //                                        var limitamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["amount"].ToString();
        //                                        tmaxpf = sgen.Make_decimal(limitamt.Replace("%", "").Trim());
        //                                    }
        //                                    else { tmaxpf = maxesi; }
        //                                    var esicheck = esidtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    bool hadesi = false;
        //                                    if (esicheck < tmaxpf) hadesi = true;
        //                                    else
        //                                    {
        //                                        if (EsiRule.Trim().Equals("1"))
        //                                        {
        //                                            string esimntid = "000";
        //                                            decimal monthiddd = sgen.Make_decimal(dtbase.Rows[0]["month"].ToString().Split('(')[1].Split(')')[0].ToString().Trim());
        //                                            if (monthiddd > 4 && monthiddd < 10)
        //                                            {
        //                                                esimntid = "004";
        //                                            }
        //                                            else if (monthiddd > 10 || monthiddd < 4)
        //                                            {
        //                                                esimntid = "010";
        //                                            }
        //                                            mq2 = "select head_count as val from emp_salary_process where head_id='000014' and month_id='" + esimntid + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_code='" + emp_code + "'";
        //                                            mq2 = sgen.seekval(userCode, mq2, "val");
        //                                            if (sgen.Make_decimal(mq2) > 0) hadesi = true;
        //                                        }
        //                                    }
        //                                    if (!hadesi && esicheck > tmaxpf) totpfable = 0;
        //                                    dre[dtl.Columns[h].ColumnName] = "0";
        //                                    {
        //                                        amtt = ((totpfable * esifrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(esiroundval, amtt, esiroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            break;
        //                        #endregion
        //                        //Employee ESI On OT
        //                        #region
        //                        case "000022":
        //                            try
        //                            {
        //                                if (!hname.Contains("ARR_"))
        //                                {
        //                                    var esiotfrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000022' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var esiotdtpf = dtbase.Select("empcode='" + gmccode + "' and headid='000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] esiotheads = esiotdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var esiids = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var esidtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    //var esifrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000014' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    //var esiids = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    //var esidtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    //string[] esiheads = esidtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, esiotheads);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    var esicheck = esidtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["headlimit"].ToString();
        //                                    if (headlimit.Trim().Equals("Y"))
        //                                    {
        //                                        var limitamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["amount"].ToString();
        //                                        tmaxpf = sgen.Make_decimal(limitamt.Replace("%", "").Trim());
        //                                    }
        //                                    else { tmaxpf = maxesi; }
        //                                    //var esicheck = esiotdtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    if (esicheck >= tmaxpf) totpfable = 0;
        //                                    //pfamount = Math.Round(((((totpfable / monthday) * paidays) * frml) / 100), 2, MidpointRounding.AwayFromZero);
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * esiotfrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(esiroundval, amtt, esiroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    decimal esiotfrmlarr = 0;
        //                                    DataTable esiotdtpfarr = new DataTable();
        //                                    string[] esiotheadsarr = new string[] { "" };
        //                                    try
        //                                    {
        //                                        esiotfrmlarr = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and  headid='000022' and headname  not like 'ARR_%' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                        esiotdtpfarr = dtbase.Select(" empcode='" + gmccode + "' and  headid='000019' and headname  like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                        esiotheadsarr = esiotdtpfarr.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    }
        //                                    catch (Exception rr) { }
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, esiotheadsarr);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    var esicheck = esiotdtpfarr.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["headlimit"].ToString();
        //                                    if (headlimit.Trim().Equals("Y"))
        //                                    {
        //                                        var limitamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["amount"].ToString();
        //                                        tmaxpf = sgen.Make_decimal(limitamt.Replace("%", "").Trim());
        //                                    }
        //                                    else { tmaxpf = maxesi; }
        //                                    if (esicheck >= tmaxpf) totpfable = 0;
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * esiotfrmlarr) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(esiroundval, amtt, esiroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            break;
        //                        #endregion
        //                        //VPF
        //                        #region
        //                        case "000020":
        //                            try
        //                            {
        //                                //vpf
        //                                if (!hname.StartsWith("ARR_"))
        //                                {
        //                                    var vpfroundval = dtroundpf.Rows[0]["roundval"].ToString().Trim();
        //                                    int vpfroundamt = Convert.ToInt16(dtroundpf.Rows[0]["roundamt"].ToString().Trim());
        //                                    var vpffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "'")[0]["amount"].ToString().Replace("%", ""));//12%
        //                                    var vpfids = dtbase.Select("headid='000011' and headname not like 'ARR_%'")[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var vpfdtpf = dtbase.Select("headid in ('" + vpfids + "') and htype<>'leaves' and headname not like 'ARR_%'").CopyToDataTable();
        //                                    string[] vpfheads = vpfdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and headname not like 'ARR_%' and htype<>'leaves'")[0]["headlimit"].ToString();
        //                                    if (headlimit.Trim().Equals("Y"))
        //                                    {
        //                                        var tdt = dtl.Clone();
        //                                        tdt.ImportRow(dre);
        //                                        DataView dv = tdt.DefaultView;
        //                                        DataTable NewTable = dv.ToTable(false, vpfheads);
        //                                        decimal rowSum = SumFirstRow(NewTable);
        //                                        totpfable = rowSum;
        //                                        amtt = ((totpfable * vpffrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(vpfroundval, amtt, vpfroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    var vpfroundval = dtroundpf.Rows[0]["roundval"].ToString().Trim();
        //                                    int vpfroundamt = Convert.ToInt16(dtroundpf.Rows[0]["roundamt"].ToString().Trim());
        //                                    var vpffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "'   and headname not like 'ARR_%'")[0]["amount"].ToString().Replace("%", ""));//12%
        //                                    var vpfids = dtbase.Select("headid='000011' and headname not  like 'ARR_%'")[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var vpfdtpf = dtbase.Select("headid in ('" + vpfids + "') and htype<>'leaves' and headname  like 'ARR_%'").CopyToDataTable();
        //                                    string[] vpfheads = vpfdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and headname not like 'ARR_%' and htype<>'leaves'")[0]["headlimit"].ToString();
        //                                    if (headlimit.Trim().Equals("Y"))
        //                                    {
        //                                        var tdt = dtl.Clone();
        //                                        tdt.ImportRow(dre);
        //                                        DataView dv = tdt.DefaultView;
        //                                        DataTable NewTable = dv.ToTable(false, vpfheads);
        //                                        decimal rowSum = SumFirstRow(NewTable);
        //                                        totpfable = rowSum;
        //                                        amtt = ((totpfable * vpffrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(vpfroundval, amtt, vpfroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            break;
        //                        #endregion
        //                        //Employee LWF
        //                        #region
        //                        case "000017":
        //                            try
        //                            {
        //                                //var frml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                //var ids = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and headname not like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                //var dtpf = dtbase.Select("empcode='" + gmccode + "'  and headid in ('" + ids + "') and headname not like 'ARR_%'").CopyToDataTable();
        //                                ////var lwftotpfable = dtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["newamount"]));
        //                                //var lwftotpfable = dtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["newamount"]));
        //                                //fixamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                                var lwffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000017' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                var lwfids = dtbase.Select("empcode='" + gmccode + "' and headid='000017' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                var lwfdtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + lwfids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                string[] lwfheads = lwfdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                fixamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                                var tdt = dtl.Clone();
        //                                tdt.ImportRow(dre);
        //                                DataView dv = tdt.DefaultView;
        //                                DataTable NewTable = dv.ToTable(false, lwfheads);
        //                                decimal rowSum = SumFirstRow(NewTable);
        //                                totpfable = rowSum;
        //                                if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                else if (lwffrml == 0)
        //                                {
        //                                    dre[dtl.Columns[h].ColumnName] = sgen.Make_decimal(fixamt.ToString().Replace("%", "").Trim());
        //                                }
        //                                else
        //                                {
        //                                    amtt = ((totpfable * lwffrml) / 100);
        //                                    amtt = Math.Round(amtt, 2);
        //                                    pfamount = sgen.Roundval(lwfroundval, amtt, lwfroundamt);
        //                                    if (pfamount > sgen.Make_decimal(fixamt.ToString().Replace("%", "").Trim()))
        //                                    {
        //                                        dre[dtl.Columns[h].ColumnName] = sgen.Make_decimal(fixamt.ToString().Replace("%", "").Trim());
        //                                    }
        //                                    else dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                }
        //                            }
        //                            catch (Exception err) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                            break;
        //                        #endregion
        //                        // Employee Advance
        //                        #region
        //                        case "000021":
        //                            //yyyymmm ==mmm  and year 
        //                            // c# code mmm=month
        //                            //month+year 
        //                            var curryyyymmm = sgen.GetSession(MyGuid, "curryyyymmm").ToString();
        //                            var monthname = sgen.seekval(userCode, "select master_name monthname from master_setting where type='MNT' and master_id='" + curryyyymmm.Substring(4, 3).Trim() + "'", "monthname");
        //                            monthname = monthname + " - " + curryyyymmm.Substring(0, 4).Trim();
        //                            var dtadv = "select sum(total_paid) bal_adv ,sum(inst) as inst,sum(total_adv) as adv from ( " +
        //                                "select sum(col5) total_paid,'0' inst,'0' total_adv  from enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' " +
        //                                "and col1 = '" + dre[0].ToString().Substring(dre[0].ToString().Length - 6, 6).ToString() + "' union all select  0 total_paid," +
        //                                "col5 inst, col7 total_adv from enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' " +
        //                                "and col1 = '" + dre[0].ToString().Substring(dre[0].ToString().Length - 6, 6).ToString() + "' and col4='" + monthname + "' union all select * from " +
        //                                "(select -sum(head_count) adv_amount, '0' a, '0' n from emp_salary_process where emp_code = '" + dre[0].ToString().Substring(dre[0].ToString().Length - 6, 6).ToString() + "' " +
        //                                "and head_id='000021' and type='ESP' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' and currmmmyyyy!='" + curryyyymmm + "') a) kk";
        //                            try
        //                            {
        //                                var adv = sgen.getdata(userCode, dtadv);
        //                                var bal = sgen.Make_decimal(adv.Rows[0]["bal_adv"].ToString());
        //                                var given = sgen.Make_decimal(adv.Rows[0]["adv"].ToString());
        //                                var inst = sgen.Make_decimal(adv.Rows[0]["inst"].ToString());
        //                                if (bal < inst) inst = bal;
        //                                dre[dtl.Columns[h].ColumnName] = inst;
        //                                DataRow drl = dtl.AsEnumerable().Where(r => ((string)r["EmpCode"]).Equals(dre[0].ToString())).First();
        //                                drl["bal_adv"] = bal;
        //                            }
        //                            catch (Exception err)
        //                            {
        //                                dre[dtl.Columns[h].ColumnName] = "0";
        //                            }
        //                            break;
        //                        #endregion
        //                        //netpayable
        //                        #region
        //                        case "999999":
        //                            //hasnetpay = true;
        //                            //var earning1 = mydt.AsEnumerable().Where(x => x["htype"].ToString().ToUpper() == "EARNING").Sum(x => Convert.ToDecimal(x["newamount"]));
        //                            //var deduction1 = mydt.AsEnumerable().Where(x => x["htype"].ToString().ToUpper() == "DEDUCTION").Sum(x => Convert.ToDecimal(x["newamount"]));
        //                            //var net1 = earning1 - deduction1;
        //                            //dre[dtl.Columns[h].ColumnName] = Math.Round(net1);
        //                            break;
        //                        #endregion
        //                        //canteen earning
        //                        #region
        //                        case "000007":
        //                            if (!hname.StartsWith("ARR_"))
        //                            {
        //                                tmaxpf = 0;
        //                                headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["headlimit"].ToString();
        //                                if (headlimit.Trim().Equals("Y"))
        //                                {
        //                                    var limitamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["amount"].ToString();
        //                                    tmaxpf = sgen.Make_decimal(limitamt.Replace("%", "").Trim());
        //                                }
        //                                else { tmaxpf = maxcant; }
        //                                if (totpfable > tmaxpf) totpfable = tmaxpf;
        //                                if (basic < 1 || presentdays < 1) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                                else
        //                                {
        //                                    amtt = tmaxpf * sgen.RoundDown(presentdays, 1);
        //                                    amtt = Math.Round(amtt, 2);
        //                                    //pfamount = sgen.Roundval(pfroundval, amtt, pfroundamt);
        //                                    dre[dtl.Columns[h].ColumnName] = amtt;
        //                                }
        //                            }
        //                            break;
        //                        #endregion
        //                        //canteen deduction
        //                        #region 
        //                        case "000024":
        //                            //var roundtype = sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "col7").ToString();
        //                            //var roundamt = sgen.Make_int(sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "cur_village").ToString());
        //                            var iseditable1 = sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "cur_tehsil").ToString();
        //                            fixamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                            if (sgen.Make_decimal(fixamt.ToString()) > 0) dre[dtl.Columns[h].ColumnName] = sgen.Make_decimal(fixamt);
        //                            else
        //                            {
        //                                var headval = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'")[0]["amount"].ToString());
        //                                if (iseditable1.ToString().Trim().Equals("N") && !hname.Contains("ARR_"))
        //                                {
        //                                    var earned = Math.Round((headval / monthday) * paidays, 2);
        //                                    //earned = sgen.Roundval(roundtype, earned, roundamt);
        //                                    dre[dtl.Columns[h].ColumnName] = earned;
        //                                }
        //                            }
        //                            break;
        //                        #endregion
        //                        //default
        //                        #region default
        //                        default:
        //                            var roundtype = sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "col7").ToString();
        //                            var roundamt = sgen.Make_int(sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "cur_village").ToString());
        //                            var iseditable = sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "cur_tehsil").ToString();
        //                            fixamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                            if (sgen.Make_decimal(fixamt.ToString()) > 0) dre[dtl.Columns[h].ColumnName] = sgen.Make_decimal(fixamt);
        //                            else
        //                            {
        //                                var headval = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'")[0]["amount"].ToString());
        //                                if (iseditable.ToString().Trim().Equals("N") && !hname.Contains("ARR_"))
        //                                {
        //                                    var earned = Math.Round((headval / monthday) * paidays, 2);
        //                                    earned = sgen.Roundval(roundtype, earned, roundamt);
        //                                    dre[dtl.Columns[h].ColumnName] = earned;
        //                                }
        //                            }
        //                            if (headtype.ToUpper().Equals("DEDUCTION"))
        //                            {
        //                                var attndep = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["attndep"].ToString();
        //                                if (attndep.ToUpper().Equals("Y"))
        //                                {
        //                                    var headval = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'")[0]["amount"].ToString());
        //                                    if (iseditable.ToString().Trim().Equals("N") && !hname.Contains("ARR_"))
        //                                    {
        //                                        var earned = Math.Round((headval / monthday) * presentdays, 2);
        //                                        earned = sgen.Roundval(roundtype, earned, roundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = earned;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    var headval = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'")[0]["amount"].ToString());
        //                                    if (iseditable.ToString().Trim().Equals("N") && !hname.Contains("ARR_"))
        //                                    {
        //                                        var earned = headval;
        //                                        earned = sgen.Roundval(roundtype, earned, roundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = earned;
        //                                    }
        //                                }
        //                            }
        //                            break;
        //                            #endregion
        //                    }
        //                }
        //                catch (Exception err) { }
        //                if (headtype.Trim().Equals("earning"))
        //                {
        //                    totearn += sgen.Make_double(dre[dtl.Columns[h].ColumnName].ToString());
        //                }
        //                else if (headtype.Trim().Equals("deduction"))
        //                {
        //                    toded += sgen.Make_double(dre[dtl.Columns[h].ColumnName].ToString());
        //                }
        //            }
        //            dre["Net Payable (999999)"] = totearn - toded;
        //            #region kesho
        //            if (userCode.Trim().ToUpper() == "SKYKESHO")
        //            {
        //                #region actual salary
        //                var inc_ver = dtbase.Select("empcode='" + gmccode + "' and headid='000001' and htype<>'leaves'")[0]["inc_ver"].ToString();
        //                mq = "select col10 act_salary from enx_tab where type='AES' and client_id='" + clientid_mst + "' and " +
        //                    "client_unit_id='" + unitid_mst + "' and col1='" + gmccode.Substring(3, 6).Trim() + "' and ref_code='" + inc_ver + "'";
        //                mq = sgen.seekval(userCode, mq, "act_salary");
        //                mq0 = "select act_hrs from emp_master where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='"
        //                    + unitid_mst + "' and emp_code='" + gmccode + "'";
        //                mq0 = sgen.seekval(userCode, mq0, "act_hrs");
        //                //earning = sgen.Make_decimal(sgen.seekval(userCode, mq, "act_salary"));
        //                decimal shifthrs_act = 0;
        //                decimal otd_act = 0;
        //                //DataTable dtact = sgen.getdata(userCode, mq);
        //                var actearning = sgen.Make_decimal(mq);
        //                if (!dtl.Columns.Contains("Actual Net Payable (777777)"))
        //                {
        //                    DataColumn dcact = new DataColumn("Actual Net Payable (777777)", typeof(string));
        //                    dtl.Columns.Add(dcact);
        //                }
        //                var actnet = Math.Round((actearning / monthday) * paidays);
        //                dtl.Rows[dtl.Rows.IndexOf(dre)]["Actual Net Payable (777777)"] = Math.Round(actnet);
        //                #endregion
        //                #region actual ot
        //                try
        //                {
        //                    if (!dtl.Columns.Contains("Actual_OT (777776)"))
        //                    {
        //                        DataColumn dcactot = new DataColumn("Actual_OT (777776)", typeof(string));
        //                        dtl.Columns.Add(dcactot);
        //                    }
        //                    var otroundval_act = dtroundot.Rows[0]["roundval"].ToString().Trim();
        //                    int otroundamt_act = Convert.ToInt16(dtroundot.Rows[0]["roundamt"].ToString().Trim());
        //                    //string dayhours_act = dtact.Rows[0][1].ToString();
        //                    string dayhours_act = mq0;
        //                    if (!dayhours_act.Trim().Equals("-"))
        //                    {
        //                        try
        //                        {
        //                            string[] ddd = dayhours_act.Split(':');
        //                            decimal hh = sgen.Make_decimal(ddd[0].ToString());
        //                            decimal mm = sgen.Make_decimal(ddd[1].ToString());
        //                            decimal ss = sgen.Make_decimal(ddd[2].ToString());
        //                            shifthrs_act = hh + (mm / 60) + (ss / 60 / 60);
        //                        }
        //                        catch (Exception ex) { }
        //                    }
        //                    //var ot_hrss_act = sgen.Make_decimal(dtbase.Select("empcode='" + dre[0].ToString() + "'").CopyToDataTable().Rows[0]["ot_hrs"].ToString());
        //                    var ot_hrss_act = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0]["ot_hrs"].ToString());
        //                    if (ot_hrss_act > shifthrs_act)
        //                    {
        //                        otd_act = ot_hrss_act / shifthrs_act;
        //                        ot_hrss_act = Math.Abs(ot_hrss_act - (otd_act * shifthrs_act));
        //                    }
        //                    if (ot_hrss_act > 0) otd_act = otd_act + (ot_hrss_act / shifthrs_act);
        //                    paidays = otd_act;
        //                    var pfamount_act = Math.Round((actearning / monthday) * paidays);
        //                    dtl.Rows[dtl.Rows.IndexOf(dre)]["Actual_OT (777776)"] = Math.Round(pfamount_act);
        //                }
        //                catch (Exception ex) { dtl.Rows[dtl.Rows.IndexOf(dre)]["Actual_OT (777776)"] = "0"; }
        //                #endregion
        //            }
        //            #endregion
        //        }
        //    }
        //    catch (Exception err) { }
        //    return dtl;
        //}
        //private DataTable ESCalc_old(DataTable dtl)
        //{
        //    //DataTable dtfinal = new DataTable();
        //    try
        //    {
        //        canbesaved = true;
        //        DataTable dtbase = (DataTable)sgen.GetSession(MyGuid, "DRESP");
        //        decimal monthday = sgen.Make_decimal(dtl.Rows[0]["Days"].ToString().Trim());
        //        //dtfinal = dtl.Clone();
        //        //DataView dtv = dtl.DefaultView;
        //        //dtv.Sort = "empcode";
        //        //var dtx = dtv.ToTable(true, "empcode");
        //        // shiv ??
        //        var maxcant = sgen.Make_decimal(sgen.seekval(userCode, "select col1 amount from enx_tab2 where type = 'KCD' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "amount"));
        //        var maxpf = sgen.Make_decimal(sgen.seekval(userCode, "select col25 amount from vehicle_master where type = 'KPF' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "amount"));
        //        var maxesi = sgen.Make_decimal(sgen.seekval(userCode, "select col12 as amount from vehicle_master where type='KES' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "amount"));
        //        var dtroundot = sgen.getdata(userCode, "select col5 roundval,col6 roundamt FROM enx_tab WHERE type='OTC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        var dtroundpf = sgen.getdata(userCode, "SELECT col13 roundval,cur_village roundamt FROM vehicle_master WHERE type='KPF' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        var dtroundesi = sgen.getdata(userCode, "SELECT col9 roundval,col17 roundamt FROM vehicle_master WHERE type='KES' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        var dtroundlwf = sgen.getdata(userCode, "SELECT col19 roundval,col20 roundamt FROM vehicle_master WHERE type='KLW' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        var dtround = sgen.getdata(userCode, "SELECT vch_num,col7,cur_village,cur_tehsil FROM vehicle_master WHERE type='KSP' and client_id='" + clientid_mst + "' " +
        //            "and client_unit_id='" + unitid_mst + "' and cur_state<>'0' and date2 > utc_timestamp() and vch_num not in ('000011','000012','000013','000014'," +
        //            "'000015','000017','000018','000019','000020','000022','000023')");
        //        //bool hasnetpay = false;
        //        if (!dtl.Columns.Contains("Net Payable (999999)"))
        //        {
        //            DataColumn dc = new DataColumn("Net Payable (999999)", typeof(decimal));
        //            dtl.Columns.Add(dc);
        //        }
        //        // otheads
        //        var otroundval = dtroundot.Rows[0]["roundval"].ToString().Trim();
        //        int otroundamt = Convert.ToInt16(dtroundot.Rows[0]["roundamt"].ToString().Trim());
        //        //pf
        //        var pfroundval = dtroundpf.Rows[0]["roundval"].ToString().Trim();
        //        int pfroundamt = Convert.ToInt16(dtroundpf.Rows[0]["roundamt"].ToString().Trim());
        //        //esi
        //        var esiroundval = dtroundesi.Rows[0]["roundval"].ToString().Trim();
        //        int esiroundamt = Convert.ToInt16(dtroundesi.Rows[0]["roundamt"].ToString().Trim());
        //        //lwf
        //        var lwfroundval = dtroundlwf.Rows[0]["roundval"].ToString().Trim();
        //        int lwfroundamt = Convert.ToInt16(dtroundlwf.Rows[0]["roundamt"].ToString().Trim());
        //        for (int b = 0; b < dtl.Rows.Count; b++)
        //        {
        //            var dre = dtl.Rows[b];
        //            decimal paidays = 0, presentdays = 0;
        //            //var mydt = dtbase.Select("empcode='" + dre[0].ToString() + "'").CopyToDataTable();
        //            //DataView dv = mydt.DefaultView;
        //            //dv.Sort = "headid";
        //            //mydt = dv.ToTable();
        //            var gmccode = dre["EmpCode"].ToString().Trim();
        //            try { gmccode = dre["EmpCode"].ToString().Split('-')[1].Trim(); } catch (Exception err) { }
        //            var basic = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000001' and headname not like 'ARR_%' and htype<>'leaves'").CopyToDataTable().Rows[0]["amount"].ToString());
        //            double totearn = 0, toded = 0;
        //            presentdays = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0]["presents"].ToString());
        //            for (int h = 0; h < dtl.Columns.Count; h++)
        //            {
        //                //paidays = sgen.Make_decimal(dtl.Rows[b]["Paid_days"].ToString().Trim());
        //                //presentdays = sgen.Make_decimal(dtl.Rows[b]["PRESENTS"].ToString().Trim());
        //                var colname = dtl.Columns[h].ColumnName.Trim().Trim().ToLower();
        //                if (paidays > monthday)
        //                {
        //                    ViewBag.scripCall += "showmsgJS(1, 'No. of Paid_days are greater (" + paidays + ") than Monthdays (" + monthday + ")', 0);"; canbesaved = false;
        //                }
        //                if (colname == "presents" || colname == "wkoff" || colname == "hlday")
        //                {
        //                    dre[colname] = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0][colname].ToString());
        //                    paidays += sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0][colname].ToString());
        //                }
        //                if (colname == "ot_hrs" || colname == "bal_adv")
        //                {
        //                    dre[colname] = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0][colname].ToString());
        //                }
        //                var headtype = "";
        //                try
        //                {
        //                    var hname = dtl.Columns[h].ColumnName.Trim().Split('(')[0].Trim();
        //                    var hid = dtl.Columns[h].ColumnName.Trim().Split('(')[1].Trim().Split(')')[0].Trim();
        //                    headtype = dtbase.Select("empcode='" + gmccode + "'  and headname='" + dtl.Columns[h].ColumnName.Trim() + "'")[0]["htype"].ToString().ToLower();
        //                    if (headtype.Trim().Equals("leaves"))
        //                    {
        //                        dre[colname] = dtbase.Select("empcode='" + gmccode + "'  and headname='" + dtl.Columns[h].ColumnName.Trim() + "'")[0]["newamount"].ToString().ToLower();
        //                        paidays += sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'  and headname='" + dtl.Columns[h].ColumnName.Trim() + "'")[0]["newamount"].ToString().ToLower());
        //                        continue;
        //                    }
        //                    dre["Paid_days"] = paidays;
        //                    decimal tmaxpf = 0;
        //                    string headlimit = "";
        //                    decimal amtt = 0;
        //                    //decimal frml = 0;
        //                    decimal totpfable = 0;
        //                    decimal pfamount = 0;
        //                    var fixamt = "";
        //                    switch (hid)
        //                    {
        //                        //ot
        //                        #region
        //                        case "000019":
        //                            //if (userCode.Trim().ToUpper() == "SKYKESHO")
        //                            //{ }
        //                            //else
        //                            {
        //                                decimal shifthrs = 0;
        //                                decimal otd = 0;
        //                                var otfrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000019' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());
        //                                var otids = dtbase.Select("empcode='" + gmccode + "' and headid='000019' and headname not like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                var otheads = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + otids + "') and headname not like 'ARR_%'").CopyToDataTable();
        //                                string dayhours = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                                if (!dayhours.Trim().Equals("-"))
        //                                {
        //                                    try
        //                                    {
        //                                        string[] ddd = dayhours.Split(':');
        //                                        decimal hh = sgen.Make_int(ddd[0].ToString());
        //                                        decimal mm = sgen.Make_int(ddd[1].ToString());
        //                                        decimal ss = sgen.Make_int(ddd[2].ToString());
        //                                        shifthrs = hh + (mm / 60) + (ss / 60 / 60);
        //                                    }
        //                                    catch (Exception ex) { }
        //                                }
        //                                try
        //                                {
        //                                    if (!hname.Contains("ARR_"))
        //                                    {
        //                                        var ot_hrss = sgen.Make_decimal(dtl.Rows[b]["OT_hrs"].ToString().Trim());
        //                                        if (ot_hrss > shifthrs)
        //                                        {
        //                                            otd = ot_hrss / shifthrs;
        //                                            ot_hrss = Math.Abs(ot_hrss - (otd * shifthrs));
        //                                        }
        //                                        if (ot_hrss > 0) otd = otd + (ot_hrss / shifthrs);
        //                                        totpfable = otheads.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                        amtt = ((((totpfable / monthday) * otd) * otfrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(otroundval, amtt, otroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                catch (Exception err) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            }
        //                            break;
        //                        #endregion
        //                        //Employee PF
        //                        #region
        //                        case "000011":
        //                            try
        //                            {
        //                                if (!hname.StartsWith("ARR_"))
        //                                {
        //                                    var pffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000011' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var pfids = dtbase.Select("empcode='" + gmccode + "' and headid='000011' and headname not like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var pfdtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + pfids + "') and headname not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] pfheads = pfdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    tmaxpf = 0;
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, pfheads);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["headlimit"].ToString();
        //                                    if (headlimit.Trim().Equals("Y"))
        //                                    {
        //                                        var limitamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["amount"].ToString();
        //                                        tmaxpf = sgen.Make_decimal(limitamt.Replace("%", "").Trim());
        //                                    }
        //                                    else { tmaxpf = maxpf; }
        //                                    if (totpfable > tmaxpf) totpfable = tmaxpf;
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * pffrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(pfroundval, amtt, pfroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    var pffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000011' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var pfidsarr = dtbase.Select("empcode='" + gmccode + "' and headid='000011' and headname  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var pfdtpfarr = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + pfidsarr + "') and headname  like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] pfheadsarr = pfdtpfarr.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, pfheadsarr);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * pffrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(pfroundval, amtt, pfroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            break;
        //                        #endregion
        //                        //Employee ESI
        //                        #region
        //                        case "000014":
        //                            try
        //                            {
        //                                if (!hname.Contains("ARR_"))
        //                                {
        //                                    var esifrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000014' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var esiids = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var esidtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] esiheads = esidtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, esiheads);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    var esicheck = esidtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    if (esicheck > maxesi) totpfable = 0;
        //                                    //pfamount = Math.Round(((((totpfable / monthday) * paidays) * frml) / 100), 2, MidpointRounding.AwayFromZero);
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * esifrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(esiroundval, amtt, esiroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    var esiids = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var esidtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] esiheads = esidtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var esifrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000014' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var esiidsarr = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname   like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var esidtpfarr = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiidsarr + "') and headid<>'000019' and headname  like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] esiheadsarr = esidtpfarr.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, esiheadsarr);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    var esicheck = esidtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    if (esicheck > maxesi) totpfable = 0;
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * esifrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(esiroundval, amtt, esiroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            break;
        //                        #endregion
        //                        //Employee ESI On OT
        //                        #region
        //                        case "000022":
        //                            try
        //                            {
        //                                if (!hname.Contains("ARR_"))
        //                                {
        //                                    var esiotfrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000022' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    var esiotdtpf = dtbase.Select("empcode='" + gmccode + "' and headid='000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    string[] esiotheads = esiotdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var esiids = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    var esidtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    //var esifrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000014' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                    //var esiids = dtbase.Select("empcode='" + gmccode + "' and headid='000014' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                    //var esidtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + esiids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                    //string[] esiheads = esidtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, esiotheads);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    var esicheck = esidtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    //var esicheck = esiotdtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    if (esicheck > maxesi) totpfable = 0;
        //                                    //pfamount = Math.Round(((((totpfable / monthday) * paidays) * frml) / 100), 2, MidpointRounding.AwayFromZero);
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * esiotfrml) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(esiroundval, amtt, esiroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    decimal esiotfrmlarr = 0;
        //                                    DataTable esiotdtpfarr = new DataTable();
        //                                    string[] esiotheadsarr = new string[] { "" };
        //                                    try
        //                                    {
        //                                        esiotfrmlarr = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and  headid='000022' and headname  not like 'ARR_%' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                        esiotdtpfarr = dtbase.Select(" empcode='" + gmccode + "' and  headid='000019' and headname  like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                        esiotheadsarr = esiotdtpfarr.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                    }
        //                                    catch (Exception rr) { }
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, esiotheadsarr);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    var esicheck = esiotdtpfarr.AsEnumerable().Sum(x => Convert.ToDecimal(x["amount"]));
        //                                    if (esicheck > maxesi) totpfable = 0;
        //                                    if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                    else
        //                                    {
        //                                        amtt = ((totpfable * esiotfrmlarr) / 100);
        //                                        amtt = Math.Round(amtt, 2);
        //                                        pfamount = sgen.Roundval(esiroundval, amtt, esiroundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            break;
        //                        #endregion
        //                        //VPF
        //                        #region
        //                        case "000020":
        //                            try
        //                            {
        //                                //vpf
        //                                var vpfroundval = dtroundpf.Rows[0]["roundval"].ToString().Trim();
        //                                int vpfroundamt = Convert.ToInt16(dtroundpf.Rows[0]["roundamt"].ToString().Trim());
        //                                var vpffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "'")[0]["amount"].ToString().Replace("%", ""));//12%
        //                                var vpfids = dtbase.Select("headid='000011' and headname not like 'ARR_%'")[0]["pf"].ToString().Replace(",", "\',\'");
        //                                var vpfdtpf = dtbase.Select("headid in ('" + vpfids + "') and headname not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                string[] vpfheads = vpfdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and headname not like 'ARR_%' and htype<>'leaves'")[0]["headlimit"].ToString();
        //                                if (headlimit.Trim().Equals("Y"))
        //                                {
        //                                    var tdt = dtl.Clone();
        //                                    tdt.ImportRow(dre);
        //                                    DataView dv = tdt.DefaultView;
        //                                    DataTable NewTable = dv.ToTable(false, vpfheads);
        //                                    decimal rowSum = SumFirstRow(NewTable);
        //                                    totpfable = rowSum;
        //                                    amtt = ((totpfable * vpffrml) / 100);
        //                                    amtt = Math.Round(amtt, 2);
        //                                    pfamount = sgen.Roundval(vpfroundval, amtt, vpfroundamt);
        //                                    dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                }
        //                            }
        //                            catch (Exception ex) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                            break;
        //                        #endregion
        //                        //Employee LWF
        //                        #region
        //                        case "000017":
        //                            try
        //                            {
        //                                //var frml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                //var ids = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and headname not like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                //var dtpf = dtbase.Select("empcode='" + gmccode + "'  and headid in ('" + ids + "') and headname not like 'ARR_%'").CopyToDataTable();
        //                                ////var lwftotpfable = dtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["newamount"]));
        //                                //var lwftotpfable = dtpf.AsEnumerable().Sum(x => Convert.ToDecimal(x["newamount"]));
        //                                //fixamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                                var lwffrml = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='000017' and htype<>'leaves'")[0]["formula"].ToString().Replace("%", "").Trim());//12%
        //                                var lwfids = dtbase.Select("empcode='" + gmccode + "' and headid='000017' and headname not  like 'ARR_%'").CopyToDataTable().Rows[0]["pf"].ToString().Replace(",", "\',\'");
        //                                var lwfdtpf = dtbase.Select("empcode='" + gmccode + "' and headid in ('" + lwfids + "') and headid<>'000019' and headname  not like 'ARR_%' and htype<>'leaves'").CopyToDataTable();
        //                                string[] lwfheads = lwfdtpf.AsEnumerable().Select(x => x.Field<string>("headname").ToString()).ToArray().Distinct<string>().ToArray();
        //                                fixamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                                var tdt = dtl.Clone();
        //                                tdt.ImportRow(dre);
        //                                DataView dv = tdt.DefaultView;
        //                                DataTable NewTable = dv.ToTable(false, lwfheads);
        //                                decimal rowSum = SumFirstRow(NewTable);
        //                                totpfable = rowSum;
        //                                if (basic < 1 || paidays < 1) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                                else if (lwffrml == 0)
        //                                {
        //                                    dre[dtl.Columns[h].ColumnName] = sgen.Make_decimal(fixamt.ToString().Replace("%", "").Trim());
        //                                }
        //                                else
        //                                {
        //                                    amtt = ((totpfable * lwffrml) / 100);
        //                                    amtt = Math.Round(amtt, 2);
        //                                    pfamount = sgen.Roundval(lwfroundval, amtt, lwfroundamt);
        //                                    if (pfamount > sgen.Make_decimal(fixamt.ToString().Replace("%", "").Trim()))
        //                                    {
        //                                        dre[dtl.Columns[h].ColumnName] = sgen.Make_decimal(fixamt.ToString().Replace("%", "").Trim());
        //                                    }
        //                                    else dre[dtl.Columns[h].ColumnName] = pfamount;
        //                                }
        //                            }
        //                            catch (Exception err) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                            break;
        //                        #endregion
        //                        // Employee Advance
        //                        #region
        //                        case "000021":
        //                            //yyyymmm ==mmm  and year 
        //                            // c# code mmm=month
        //                            //month+year 
        //                            var curryyyymmm = sgen.GetSession(MyGuid, "curryyyymmm").ToString();
        //                            var monthname = sgen.seekval(userCode, "select master_name monthname from master_setting where type='MNT' and master_id='" + curryyyymmm.Substring(4, 3).Trim() + "'", "monthname");
        //                            monthname = monthname + " - " + curryyyymmm.Substring(0, 4).Trim();
        //                            //var dtadv = "select sum(total_paid) tota_paid ,sum(inst) as inst,sum(total_adv) as adv from (select * from (select to_number('0') total_paid," +
        //                            //    "col5 inst, col7 total_adv from enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' " +
        //                            //    "and col1 = '" + dre[0].ToString().Substring(dre[0].ToString().Length - 6, 6).ToString() + "' and col4='" + monthname + "') p union all select * from " +
        //                            //    "(select sum(head_count) adv_amount, '0' a, '0' n from emp_salary_process where emp_code = '" + dre[0].ToString().Substring(dre[0].ToString().Length - 6, 6).ToString() + "' " +
        //                            //    "and head_id='000021' and type='ESP' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' and currmmmyyyy!='" + curryyyymmm + "') a) kk";
        //                            var dtadv = "select sum(total_paid) bal_adv ,sum(inst) as inst,sum(total_adv) as adv from (select sum(col5) total_paid ,'0' inst,'0' total_adv from " +
        //                                "enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' " +
        //                                "and col1 = '" + dre[0].ToString().Substring(dre[0].ToString().Length - 6, 6).ToString() + "' union all select 0 total_paid," +
        //                               "col5 inst, col7 total_adv from enx_tab2 where type = 'HAS' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' " +
        //                               "and col1 = '" + dre[0].ToString().Substring(dre[0].ToString().Length - 6, 6).ToString() + "' and col4='" + monthname + "' union all select * from " +
        //                               "(select -sum(head_count) adv_amount, '0' a, '0' n from emp_salary_process where emp_code = '" + dre[0].ToString().Substring(dre[0].ToString().Length - 6, 6).ToString() + "' " +
        //                               "and head_id='000021' and type='ESP' and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' and currmmmyyyy!='" + curryyyymmm + "') a) kk";
        //                            try
        //                            {
        //                                var adv = sgen.getdata(userCode, dtadv);
        //                                var rcvd = sgen.Make_decimal(adv.Rows[0]["tota_paid"].ToString());
        //                                var given = sgen.Make_decimal(adv.Rows[0]["adv"].ToString());
        //                                var inst = sgen.Make_decimal(adv.Rows[0]["inst"].ToString());
        //                                decimal bal = 0;
        //                                if (given > 0)
        //                                {
        //                                    bal = given - rcvd;
        //                                    if (bal < inst) inst = bal;
        //                                }
        //                                dre[dtl.Columns[h].ColumnName] = inst;
        //                                DataRow drl = dtl.AsEnumerable().Where(r => ((string)r["EmpCode"]).Equals(dre[0].ToString())).First();
        //                                drl["bal_adv"] = bal;
        //                            }
        //                            catch (Exception err) { dre[dtl.Columns[h].ColumnName] = "0"; }
        //                            break;
        //                        #endregion
        //                        //netpayable
        //                        #region
        //                        case "999999":
        //                            //hasnetpay = true;
        //                            //var earning1 = mydt.AsEnumerable().Where(x => x["htype"].ToString().ToUpper() == "EARNING").Sum(x => Convert.ToDecimal(x["newamount"]));
        //                            //var deduction1 = mydt.AsEnumerable().Where(x => x["htype"].ToString().ToUpper() == "DEDUCTION").Sum(x => Convert.ToDecimal(x["newamount"]));
        //                            //var net1 = earning1 - deduction1;
        //                            //dre[dtl.Columns[h].ColumnName] = Math.Round(net1);
        //                            break;
        //                        #endregion
        //                        //canteen earning
        //                        #region
        //                        case "000007":
        //                            if (!hname.StartsWith("ARR_"))
        //                            {
        //                                tmaxpf = 0;
        //                                headlimit = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["headlimit"].ToString();
        //                                if (headlimit.Trim().Equals("Y"))
        //                                {
        //                                    var limitamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'").CopyToDataTable().Rows[0]["amount"].ToString();
        //                                    tmaxpf = sgen.Make_decimal(limitamt.Replace("%", "").Trim());
        //                                }
        //                                else { tmaxpf = maxcant; }
        //                                if (totpfable > tmaxpf) totpfable = tmaxpf;
        //                                if (basic < 1 || presentdays < 1) { dre[dtl.Columns[h].ColumnName] = 0; }
        //                                else
        //                                {
        //                                    amtt = tmaxpf * sgen.RoundDown(presentdays, 1);
        //                                    amtt = Math.Round(amtt, 2);
        //                                    //pfamount = sgen.Roundval(pfroundval, amtt, pfroundamt);
        //                                    dre[dtl.Columns[h].ColumnName] = amtt;
        //                                }
        //                            }
        //                            break;
        //                        #endregion
        //                        //canteen deduction
        //                        #region 
        //                        case "000024":
        //                            //var roundtype = sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "col7").ToString();
        //                            //var roundamt = sgen.Make_int(sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "cur_village").ToString());
        //                            var iseditable1 = sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "cur_tehsil").ToString();
        //                            fixamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                            if (sgen.Make_decimal(fixamt.ToString()) > 0) dre[dtl.Columns[h].ColumnName] = sgen.Make_decimal(fixamt);
        //                            else
        //                            {
        //                                var headval = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'")[0]["amount"].ToString());
        //                                if (iseditable1.ToString().Trim().Equals("N") && !hname.Contains("ARR_"))
        //                                {
        //                                    var earned = Math.Round((headval / monthday) * paidays, 2);
        //                                    //earned = sgen.Roundval(roundtype, earned, roundamt);
        //                                    dre[dtl.Columns[h].ColumnName] = earned;
        //                                }
        //                            }
        //                            break;
        //                        #endregion
        //                        //default
        //                        #region default
        //                        default:
        //                            var roundtype = sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "col7").ToString();
        //                            var roundamt = sgen.Make_int(sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "cur_village").ToString());
        //                            var iseditable = sgen.seekval_dt(dtround, "vch_num='" + hid + "'", "cur_tehsil").ToString();
        //                            fixamt = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["fixamt"].ToString();
        //                            if (sgen.Make_decimal(fixamt.ToString()) > 0) dre[dtl.Columns[h].ColumnName] = sgen.Make_decimal(fixamt);
        //                            else
        //                            {
        //                                var headval = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'")[0]["amount"].ToString());
        //                                if (iseditable.ToString().Trim().Equals("N") && !hname.Contains("ARR_"))
        //                                {
        //                                    var earned = Math.Round((headval / monthday) * paidays, 2);
        //                                    earned = sgen.Roundval(roundtype, earned, roundamt);
        //                                    dre[dtl.Columns[h].ColumnName] = earned;
        //                                }
        //                            }
        //                            if (headtype.ToUpper().Equals("DEDUCTION"))
        //                            {
        //                                var attndep = dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves'")[0]["attndep"].ToString();
        //                                if (attndep.ToUpper().Equals("Y"))
        //                                {
        //                                    var headval = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'")[0]["amount"].ToString());
        //                                    if (iseditable.ToString().Trim().Equals("N") && !hname.Contains("ARR_"))
        //                                    {
        //                                        var earned = Math.Round((headval / monthday) * presentdays, 2);
        //                                        earned = sgen.Roundval(roundtype, earned, roundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = earned;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    var headval = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "' and headid='" + hid + "' and htype<>'leaves' and headname not like 'ARR%'")[0]["amount"].ToString());
        //                                    if (iseditable.ToString().Trim().Equals("N") && !hname.Contains("ARR_"))
        //                                    {
        //                                        var earned = headval;
        //                                        earned = sgen.Roundval(roundtype, earned, roundamt);
        //                                        dre[dtl.Columns[h].ColumnName] = earned;
        //                                    }
        //                                }
        //                            }
        //                            break;
        //                            #endregion
        //                    }
        //                }
        //                catch (Exception err) { }
        //                if (headtype.Trim().Equals("earning"))
        //                {
        //                    totearn += sgen.Make_double(dre[dtl.Columns[h].ColumnName].ToString());
        //                }
        //                else if (headtype.Trim().Equals("deduction"))
        //                {
        //                    toded += sgen.Make_double(dre[dtl.Columns[h].ColumnName].ToString());
        //                }
        //            }
        //            dre["Net Payable (999999)"] = totearn - toded;
        //            #region kesho
        //            //if (userCode.Trim().ToUpper() == "SKYKESHO")
        //            //{
        //            //    #region actual salary
        //            //    mq = "select act_salary,act_hrs from emp_master where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='"
        //            //        + unitid_mst + "' and emp_code='" + gmccode + "'";
        //            //    //earning = sgen.Make_decimal(sgen.seekval(userCode, mq, "act_salary"));
        //            //    decimal shifthrs_act = 0;
        //            //    decimal otd_act = 0;
        //            //    DataTable dtact = sgen.getdata(userCode, mq);
        //            //    var actearning = sgen.Make_decimal(dtact.Rows[0][0].ToString());
        //            //    if (!dtl.Columns.Contains("Actual Net Payable (777777)"))
        //            //    {
        //            //        DataColumn dcact = new DataColumn("Actual Net Payable (777777)", typeof(string));
        //            //        dtl.Columns.Add(dcact);
        //            //    }
        //            //    var actnet = Math.Round((actearning / monthday) * paidays);
        //            //    dtl.Rows[dtl.Rows.IndexOf(dre)]["Actual Net Payable (777777)"] = Math.Round(actnet);
        //            //    #endregion
        //            //    #region actual ot
        //            //    try
        //            //    {
        //            //        if (!dtl.Columns.Contains("Actual_OT (777776)"))
        //            //        {
        //            //            DataColumn dcactot = new DataColumn("Actual_OT (777776)", typeof(string));
        //            //            dtl.Columns.Add(dcactot);
        //            //        }
        //            //        var otroundval_act = dtroundot.Rows[0]["roundval"].ToString().Trim();
        //            //        int otroundamt_act = Convert.ToInt16(dtroundot.Rows[0]["roundamt"].ToString().Trim());
        //            //        string dayhours_act = dtact.Rows[0][1].ToString();
        //            //        if (!dayhours_act.Trim().Equals("-"))
        //            //        {
        //            //            try
        //            //            {
        //            //                string[] ddd = dayhours_act.Split(':');
        //            //                decimal hh = sgen.Make_decimal(ddd[0].ToString());
        //            //                decimal mm = sgen.Make_decimal(ddd[1].ToString());
        //            //                decimal ss = sgen.Make_decimal(ddd[2].ToString());
        //            //                shifthrs_act = hh + (mm / 60) + (ss / 60 / 60);
        //            //            }
        //            //            catch (Exception ex) { }
        //            //        }
        //            //        //var ot_hrss_act = sgen.Make_decimal(dtbase.Select("empcode='" + dre[0].ToString() + "'").CopyToDataTable().Rows[0]["ot_hrs"].ToString());
        //            //        var ot_hrss_act = sgen.Make_decimal(dtbase.Select("empcode='" + gmccode + "'")[0]["ot_hrs"].ToString());
        //            //        if (ot_hrss_act > shifthrs_act)
        //            //        {
        //            //            otd_act = ot_hrss_act / shifthrs_act;
        //            //            ot_hrss_act = Math.Abs(ot_hrss_act - (otd_act * shifthrs_act));
        //            //        }
        //            //        if (ot_hrss_act > 0) otd_act = otd_act + (ot_hrss_act / shifthrs_act);
        //            //        paidays = otd_act;
        //            //        var pfamount_act = Math.Round((actearning / monthday) * paidays);
        //            //        dtl.Rows[dtl.Rows.IndexOf(dre)]["Actual_OT (777776)"] = Math.Round(pfamount_act);
        //            //    }
        //            //    catch (Exception ex) { dtl.Rows[dtl.Rows.IndexOf(dre)]["Actual_OT (777776)"] = "0"; }
        //            //    #endregion
        //            //}
        //            #endregion
        //        }
        //    }
        //    catch (Exception err) { }
        //    return dtl;
        //}

        #endregion
        #region
        private static decimal SumFirstRow(DataTable NewTable)
        {
            var row = NewTable.Rows[0];
            decimal rowSum = 0;
            foreach (DataColumn col in NewTable.Columns)
            {
                if (!row.IsNull(col))
                {
                    string stringValue = row[col].ToString();
                    decimal d;
                    if (decimal.TryParse(stringValue, out d))
                        rowSum += d;
                }
            }
            return rowSum;
        }
        #endregion
        #region emp_attendance  - commented code
        //public ActionResult emp_attendance()
        //{
        //    FillMst("");
        //    chkRef();
        //    ViewBag.vnew = "";
        //    ViewBag.vedit = "";
        //    ViewBag.vsave = "disabled='disabled'";
        //    ViewBag.vimport = "disabled='disabled'";
        //    ViewBag.scripCall = "disableForm();";
        //    mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
        //    m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
        //    List<SelectListItem> mod1 = new List<SelectListItem>();
        //    List<Tmodelmain> model = new List<Tmodelmain>();
        //    Tmodelmain tm = new Tmodelmain();
        //    tm.Col14 = mid_mst;
        //    tm.Col15 = m_id_mst;
        //    tm.Col9 = "EMPLOYEE ATTENDANCE";
        //    tm.Col10 = "leave_ob";
        //    tm.Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        //    tm.Col12 = "EAT";//employee attendance
        //    tm.Col13 = "Save";
        //    tm.TList1 = mod1;
        //    tm.TList2 = mod1;
        //    tm.Col22 = "Choose File";
        //    tm.SelectedItems1 = new string[] { "" };
        //    tm.SelectedItems2 = new string[] { "" };
        //    tm.LTM1 = new List<Tmodelmain>();
        //    tm.Col74 = "N";
        //    model.Add(tm);
        //    return View(model);
        //}
        //[HttpPost]
        //public ActionResult emp_attendance(List<Tmodelmain> model, string command, HttpPostedFileBase upd1, string hfrow, string hftable)
        //{
        //    // bool haserror = false;
        //    string emp_name = "", exter_empno = "", emp_vchnum = "", old_empcode = "", month_name = "", month_id = "", emp_code = "";
        //    FillMst(model[0].Col15);
        //    DataTable dtm = sgen.settable(hftable);
        //    sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
        //    model[0].dt1 = dtm;
        //    #region ddl
        //    List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
        //    List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
        //    model[0].TList1 = mod1;
        //    model[0].TList2 = mod2;
        //    TempData[MyGuid + "_TList1"] = mod1;
        //    TempData[MyGuid + "_TList2"] = mod2;
        //    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
        //    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
        //    #endregion
        //    if (command == "New")
        //    {
        //        // shiv
        //        sgen.SetSession(MyGuid, "EDMODE", "N");
        //        ViewBag.vnew = "disabled='disabled'";
        //        ViewBag.vedit = "disabled='disabled'";
        //        ViewBag.vsave = "disabled='disabled'";
        //        ViewBag.vimport = "";
        //        ViewBag.scripCall = ViewBag.scripCall + ";enableForm();";
        //        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "'" + model[0].Col11 + "";
        //        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
        //        model[0].Col17 = vch_num.Trim();
        //        mod1 = new List<SelectListItem>();
        //        mod2 = new List<SelectListItem>();
        //        model[0].LTM1 = new List<Tmodelmain>();
        //        model[0].Col74 = "Y";
        //        //month
        //        #region
        //        mod1 = cmd_Fun.month(userCode, unitid_mst);
        //        TempData[MyGuid + "_TList1"] = mod1;
        //        #endregion              
        //        //emp type - hard type
        //        #region
        //        mod2.Add(new SelectListItem { Text = "All Employee", Value = "000" });
        //        mod2.Add(new SelectListItem { Text = "Selected Employee", Value = "001" });
        //        TempData[MyGuid + "_TList2"] = mod2;
        //        #endregion
        //        model[0].TList1 = mod1;
        //        model[0].SelectedItems1 = new string[] { "001" };
        //        model[0].TList2 = mod2;
        //        model[0].SelectedItems2 = new string[] { "000" };
        //    }
        //    else if (command == "Cancel")
        //    {
        //        return CancelFun(model);
        //    }
        //    else if (command == "Callback")
        //    // shiv
        //    {
        //        try
        //        {
        //            model[0].Col74 = "Y";
        //            if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; }
        //            else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
        //            model = CallbackFun(btnval, "N", "emp_attendance", "Hr", model);
        //            ViewBag.vnew = "disabled='disabled'";
        //            ViewBag.vedit = "disabled='disabled'";
        //            ViewBag.vsave = "";
        //        }
        //        catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 0);"; }
        //    }
        //    else if (command == "Save" || command == "Update")
        //    {
        //        try
        //        {
        //            if (model[0].dt1.Rows.Count <= 0) { ViewBag.scripCall = "showmsgJS(1, 'No Data Found', 0);"; }
        //            var tmodel = model.FirstOrDefault();
        //            string currdate = sgen.server_datetime(userCode);
        //            ent_date = currdate;
        //            DataTable dtstr = new DataTable();
        //            //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
        //            dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
        //            //dtstr = sgen.getdata(userCode, "select * from " + tab_name + " WHERE rownum<10");            
        //            DataTable data = sgen.getdata(userCode, "select distinct curryyyymmm,vch_num,vch_date,emp_code  from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' " +
        //                "and client_unit_id='" + unitid_mst + "' and curryyyymmm='" + sgen.GetSession(MyGuid, "Attcurryyyymmm").ToString().Trim() + "'");
        //            //if (!cond.Equals("0"))
        //            //{
        //            //    //Session["EDMODE"] = "Y";
        //            //    mq = "select a.vch_num,a.vch_date,a.ent_by,a.ent_date,a.edit_by,a.edit_date,a.type,a.client_id,a.client_unit_id,em.emp_code EmpCode, fstst," +
        //            //        "em.external_empno External_EmpCode,(em.first_Name|| ' '|| replace(em.middle_name, '0', '')|| ' '|| replace(em.last_name, '0', '')) Employee_Name," +
        //            //        "a.othrs OT,a.pdays Pdays,a.wdays Wdays,a.hdays Hdays,(b.col1|| ' ('|| b.vch_num|| ')') lv_head,a.leave_count,(a.month_name|| ' ('|| a.month_id|| ')') Month_Name," +
        //            //        "a.month_id,a.month_name m_name,a.curryyyymmm from leave_ob a " +
        //            //        "inner join kc_tab b on a.leave_type_id = b.vch_num and b.type = 'KLV' and b.client_id = a.client_id and b.client_unit_id = a.client_unit_id " +
        //            //        "inner join emp_master em on em.vch_num = a.emp_code and em.type = 'EMP' and em.client_id = a.client_id and em.client_unit_id = a.client_unit_id " +
        //            //        "where (a.curryyyymmm|| a.type|| a.client_id|| a.client_unit_id)='" + Session["Attcurryyyymmm"].ToString().Trim() + model[0].Col12 + clientid_mst + unitid_mst + "'";
        //            //    DataTable dt = sgen.getdata(userCode, mq);
        //            //    if (dt.Rows.Count > 0)
        //            //    {
        //            //        model[0].Col17 = dt.Rows[0]["vch_num"].ToString();
        //            //        model[0].Col8 = "(curryyyymmm|| type|| client_id|| client_unit_id) = '" + Session["Attcurryyyymmm"].ToString().Trim() + model[0].Col12 + clientid_mst + unitid_mst + "'";
        //            //        Pivot pv = new Pivot(dt);
        //            //        dt = pv.PivotData("leave_count", AggregateFunction.Sum, new string[] { "Month_Name", "EmpCode", "Old_EmpCode", "External_EmpCode", "Employee_Name", "OT", "Pdays", "Wdays", "Hdays" }, new string[] { "lv_head" });
        //            //        for (int k = 0; k < model[0].dt1; k++)
        //            //        {
        //            //            dt.Select("EmpCode='" + model[0].dt1.Rows[k]["EmpCode"].ToString() + "'");
        //            //        }
        //            //    }
        //            //}
        //            if (data.Rows.Count > 0)
        //            {
        //                vch_num = data.Rows[0]["vch_num"].ToString();
        //                ent_date = data.Rows[0]["vch_date"].ToString();
        //            }
        //            else if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
        //            {
        //                mq1 = " and vch_num<>'" + model[0].Col17.Trim() + "'";
        //                isedit = true;
        //                vch_num = model[0].Col17.Trim();
        //            }
        //            else
        //            {
        //                mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "'" + model[0].Col11 + "";
        //                vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
        //                model[0].Col17 = vch_num.Trim();
        //                isedit = false;
        //            }
        //            Satransaction sat1 = new Satransaction(userCode, MyGuid);
        //            foreach (DataRow gr in model[0].dt1.Rows)
        //            {
        //                #region dtstr
        //                month_id = gr[0].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
        //                month_name = gr[0].ToString().Trim().Split('(')[0].Trim().Split('-')[1].Trim().ToString();
        //                emp_code = gr[1].ToString().Trim();
        //                exter_empno = gr[2].ToString().Trim();
        //                mq1 = sgen.seekval(userCode, "select vch_num from emp_master where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_code='" + emp_code + "'", "vch_num");
        //                if (mq1.Trim() != "0") { emp_vchnum = mq1.Trim(); }
        //                old_empcode = gr[3].ToString().Trim();
        //                emp_name = gr[4].ToString().Trim();
        //                isedit = false;
        //                string tcond = "";
        //                if (data.Rows.Count > 0)
        //                {
        //                    try
        //                    {
        //                        if (sgen.seekval_dt(data, "emp_code='" + emp_vchnum + "'").Rows.Count > 0)
        //                        {
        //                            isedit = true;
        //                            tcond = " type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_code='" + emp_vchnum + "' and vch_num='" + vch_num + "' and curryyyymmm='" + data.Rows[0]["curryyyymmm"].ToString() + "'";
        //                        }
        //                    }
        //                    catch (Exception err)
        //                    { }
        //                }
        //                dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
        //                for (int k = 9; k < dtm.Columns.Count; k++)
        //                {
        //                    DataRow dr = dtstr.NewRow();
        //                    dr["rec_id"] = "0";
        //                    dr["vch_num"] = vch_num.Trim();
        //                    dr["vch_date"] = ent_date;
        //                    dr["type"] = "EAT";
        //                    dr["month_name"] = month_name;
        //                    dr["month_id"] = month_id.Trim();
        //                    dr["emp_code"] = emp_vchnum;
        //                    dr["emp_name"] = emp_name;
        //                    dr["old_empcode"] = old_empcode;
        //                    dr["othrs"] = gr[5].ToString().Trim();
        //                    dr["pdays"] = gr[6].ToString().Trim();
        //                    dr["wdays"] = gr[7].ToString().Trim();
        //                    dr["hdays"] = gr[8].ToString().Trim();
        //                    dr["leave_type"] = dtm.Columns[k].ToString().Trim().Split('(')[0].Trim();
        //                    dr["leave_type_id"] = dtm.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
        //                    dr["leave_count"] = sgen.Make_decimal(gr[k].ToString().Trim());
        //                    dr["curryyyymmm"] = sgen.GetSession(MyGuid, "Attcurryyyymmm").ToString().Trim();
        //                    dr["client_id"] = clientid_mst;
        //                    dr["client_unit_id"] = unitid_mst;
        //                    dr["ent_by"] = userid_mst;
        //                    dr["ent_date"] = currdate;
        //                    dr["edit_by"] = "-";
        //                    dr["edit_date"] = currdate;
        //                    dtstr.Rows.Add(dr);
        //                }
        //                ok = sgen.Update_data_uncommit2(userCode, dtstr, model[0].Col10, tcond, isedit, sat1);
        //                if (!ok)
        //                {
        //                    break;
        //                }
        //                #endregion
        //            }
        //            if (ok)
        //            {
        //                sat1.Commit();
        //                model[0].Col74 = "N";
        //                ViewBag.vnew = "";
        //                ViewBag.vedit = "";
        //                ViewBag.vsave = "disabled='disabled'";
        //                ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
        //                model = new List<Tmodelmain>();
        //                model.Add(new Tmodelmain()
        //                {
        //                    TList1 = mod1,
        //                    TList2 = mod2,
        //                    SelectedItems1 = new string[] { "" },
        //                    SelectedItems2 = new string[] { "" },
        //                    Col9 = tmodel.Col9,
        //                    Col10 = tmodel.Col10,
        //                    Col11 = tmodel.Col11,
        //                    Col12 = tmodel.Col12,
        //                    Col13 = tmodel.Col13,
        //                    Col14 = tmodel.Col14,
        //                    Col15 = tmodel.Col15,
        //                    LTM1 = new List<Tmodelmain>()
        //                });
        //            }
        //            else
        //            {
        //                sat1.Rollback();
        //                ViewBag.scripCall += "showmsgJS(1, 'Record Not Saved ', 0);disableForm();";
        //            }
        //        }
        //        catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 0);"; }
        //    }
        //    else if (command == "Import")
        //    {
        //        if (model[0].SelectedItems1 == null) { /*sgen.showmsg(1, "Please select month", 2);*/ }
        //        int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault().Trim());
        //        int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
        //        string lastyyyymmm = "";
        //        string curryyyymmm = "";
        //        if (currmonth <= 12 && currmonth > 4)
        //        {
        //            lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //            curryyyymmm = curryear + sgen.padlc((currmonth), 3);
        //        }
        //        else if (currmonth == 1)
        //        {
        //            lastyyyymmm = curryear + sgen.padlc(12, 3);
        //            curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
        //        }
        //        else if (currmonth > 1 && currmonth < 4)
        //        {
        //            lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
        //            curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
        //        }
        //        else if (currmonth == 4)
        //        {
        //            lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
        //            curryyyymmm = curryear + sgen.padlc((currmonth), 3);
        //        }
        //        sgen.SetSession(MyGuid, "Attcurryyyymmm", curryyyymmm);
        //        model[0].Col19 = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text.Trim().ToUpper() + " - " + curryyyymmm.Trim().Substring(0, 4).ToString().Trim();
        //        HttpPostedFileBase file1 = upd1;
        //        DataTable dt = new DataTable();
        //        if (file1.ContentLength > 1)
        //        {
        //            string ext = Path.GetExtension(file1.FileName).ToLower();
        //            if (ext == ".csv")
        //            {
        //                string filesavepath = AppDomain.CurrentDomain.BaseDirectory + "\\Uploads\\" + cg_com_name.Replace(" ", "")
        //                    + "\\file" + DateTime.Now.ToString("ddMMyyyyhhmmfff") + ext;
        //                file1.SaveAs(filesavepath);
        //                // Read sample data from CSV file
        //                int i = 0;
        //                using (CsvFileReader reader = new CsvFileReader(filesavepath))
        //                {
        //                    CsvRow row = new CsvRow();
        //                    while (reader.ReadRow(row))
        //                    {
        //                        DataRow dr = dt.NewRow();
        //                        for (int c = 0; c < row.Count; c++)
        //                        {
        //                            if (i == 0) { dt.Columns.Add(row[c].ToString()); }
        //                            else { dr[c] = row[c].ToString(); }
        //                            //if (c > dt.Columns.Count) break;                                                                 
        //                        }
        //                        i++;
        //                        dt.Rows.Add(dr);
        //                    }
        //                }
        //            }
        //            try
        //            {
        //                dt.Rows[0].Delete();
        //                //grdviewnew.DataSource = dt;
        //                //grdviewnew.DataBind();
        //                model[0].dt1 = dt;
        //                //haserror = false;
        //                //for (int l = 5; l < grdviewnew.HeaderRow.Cells.Count; l++)
        //                //{
        //                //    mq0 = grdviewnew.HeaderRow.Cells[l].Text.Trim().Split('(')[1].Trim().Split(')')[0].Trim();
        //                //    mq = sgen.seekval(userCode, "select vch_num from kc_tab where type='KLV' and client_id='" + clientid_mst + "' " +
        //                //        "and client_unit_id='" + unitid_mst + "' and vch_num='" + mq0 + "'", "vch_num");
        //                //    if (mq.Trim() == "0")
        //                //    {
        //                //        haserror = true;
        //                //        grdviewnew.HeaderRow.Cells[l].BackColor = System.Drawing.Color.LightGray;
        //                //        grdviewnew.HeaderRow.Cells[l].Style.Add("text-decoration", "line-through");
        //                //    }
        //                //    if (grdviewnew.HeaderRow.Cells[l].Text.Trim() == "LOP (000005)") { mq1 = l.ToString().Trim(); }
        //                //}
        //                //foreach (GridViewRow r1 in grdviewnew.Rows)
        //                //{
        //                //    mq0 = r1.Cells[1].Text.Trim();
        //                //    mq = sgen.seekval(userCode, "Select emp_code from emp_master where emp_code='" + mq0 + "' and type='EMP' and client_id='"
        //                //        + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "emp_code");
        //                //    if (mq.Trim() == "0")
        //                //    {
        //                //        haserror = true;
        //                //        r1.Cells[1].BackColor = System.Drawing.Color.LightGray;
        //                //        r1.Cells[1].Style.Add("text-decoration", "line-through");
        //                //    }
        //                //    r1.Cells[sgen.Make_int(mq1)].Text = Math.Abs(sgen.Make_decimal(r1.Cells[sgen.Make_int(mq1)].Text.Trim())).ToString();
        //                //do not check external empcode
        //                //mq0 = r1.Cells[2].Text.Trim();
        //                //mq = sgen.seekval(userCode, "Select external_empno from emp_master where external_empno='" + mq0 + "' and type='EMP' and client_id='"
        //                //    + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "external_empno");
        //                //if (mq.Trim() == "0")
        //                //{
        //                //    haserror = true;
        //                //    r1.Cells[2].BackColor = System.Drawing.Color.LightGray;
        //                //    r1.Cells[2].Style.Add("text-decoration", "line-through");
        //                //}
        //                //}
        //                //if (haserror)
        //                //{
        //                //    btnsave.Disabled = true;
        //                //    sgen.showmsg(1, "Please do not change the format, headers and check your data again before upload", 2);
        //                //}
        //                //else { btnsave.Disabled = false; }
        //                //Session["hr_empatt"] = null;
        //                //spanupd1.Text = "";
        //                //btnsave.Disabled = false;
        //                ViewBag.vnew = "disabled='disabled'";
        //                ViewBag.vedit = "disabled='disabled'";
        //                ViewBag.vsave = "";
        //                ViewBag.vimport = "";
        //            }
        //            catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 0);"; }
        //        }
        //    }
        //    ModelState.Clear();
        //    return View(model);
        //}
        [HttpPost]
        public ContentResult SetSession(List<Tmodelmain> Val, string Name)
        {
            sgen = new sgenFun(Val[0].Col15);
            sgen.SetSession(Val[0].Col15, Name, Val);
            return Content("");
        }
        //[HttpGet]
        //public FileResult emptemp()
        //{
        //    string monthname = "", ddl_month = "", ddl_emp = "";
        //    FillMst();
        //    List<Tmodelmain> model = (List<Tmodelmain>)sgen.GetSession(MyGuid,"model");
        //    List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
        //    model[0].TList1 = mod1;
        //    TempData[MyGuid + "_TList1"] = mod1;
        //    DataTable dtl = new DataTable();
        //    if (model[0].SelectedItems1 == null) { /*sgen.showmsg(1, "Please select month from drop down", 2); return;*/ }
        //    if (model[0].SelectedItems2 == null) { /*sgen.showmsg(1, "Please select type from drop down", 2); return;*/ }
        //    ddl_month = model[0].SelectedItems1.FirstOrDefault().Trim();
        //    ddl_emp = model[0].SelectedItems2.FirstOrDefault().Trim();
        //    monthname = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text;
        //    if (ddl_emp.Trim().Equals("000"))
        //    {
        //        mq = "select '" + monthname.Trim() + " (" + ddl_month.Trim() + ")" + "' month_name,emp_code EmpCode,external_empno External_EmpCode,old_empcode Old_EmpCode," +
        //            "(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Employee_Name,'0' OT,'0' Pdays,'0' Wdays,'0' Hdays from emp_master " +
        //            "where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y' and to_char(ex_dt,'yyyy')='1900' order by emp_code asc";
        //    }
        //    else if (ddl_emp.Trim().Equals("001"))
        //    {
        //        mq = "select '" + monthname.Trim() + " (" + ddl_month.Trim() + ")" + "' month_name,emp_code EmpCode,external_empno External_EmpCode,old_empcode Old_EmpCode," +
        //            "(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Employee_Name,'0' OT,'0' Pdays,'0' Wdays,'0' Hdays from emp_master " +
        //            "where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and " +
        //            "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) in ('" + sgen.GetSession(MyGuid,"KEMPATT").ToString() + "') order by emp_code asc";
        //    }
        //    dtl = sgen.getdata(userCode, mq);
        //    DataTable dtlt = new DataTable();
        //    mq1 = "select vch_num,col1,col3 from kc_tab where type='KLV' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and vch_num<>'000005'";
        //    dtlt = sgen.getdata(userCode, mq1);
        //    for (int k = 0; k < dtlt.Rows.Count; k++)
        //    {
        //        dtl.Columns.Add(dtlt.Rows[k]["col1"].ToString() + " (" + dtlt.Rows[k]["vch_num"].ToString() + ")");
        //    }
        //    dtl.AcceptChanges();
        //    string cg_com_name = sgen.GetCookie(MyGuid, "cg_com_name");
        //    Byte[] fileBytes = sgen.Exp_to_csv_new(dtl, "Employee Attendance", cg_com_name);
        //    return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Zip, "Employee Attendance");
        //}
        #endregion        
        #region lwf_setting
        public ActionResult lwf_setting()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "LABOUR WELFARE FUND SETTINGS";
            model[0].Col10 = "vehicle_master";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "KLW"; //KLW   
            model[0].TList9 = model[0].TList8 = model[0].TList7 = model[0].TList6 = model[0].TList5 = model[0].TList4 = model[0].TList3 = model[0].TList2 = model[0].TList1 = mod1;
            model[0].SelectedItems9 = model[0].SelectedItems8 = model[0].SelectedItems7 = model[0].SelectedItems6 = model[0].SelectedItems5 = model[0].SelectedItems4 = model[0].SelectedItems3 = model[0].SelectedItems2 = model[0].SelectedItems1 = new string[] { "" };

            //model[0].TList1 = mod1;
            //model[0].SelectedItems1 = new string[] { "" };
            //model[0].TList2 = mod1;
            //model[0].SelectedItems2 = new string[] { "" };
            //model[0].TList3 = mod1;
            //model[0].SelectedItems3 = new string[] { "" };
            //model[0].TList4 = mod1;
            //model[0].SelectedItems4 = new string[] { "" };
            //model[0].TList5 = mod1;
            //model[0].SelectedItems5 = new string[] { "" };
            //model[0].TList6 = mod1;
            //model[0].SelectedItems6 = new string[] { "" };
            //model[0].TList7 = mod1;
            //model[0].SelectedItems7 = new string[] { "" };
            //model[0].TList8 = mod1;
            //model[0].SelectedItems8 = new string[] { "" };
            //model[0].TList9 = mod1;
            //model[0].SelectedItems9 = new string[] { "" };
            cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr from "
    + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
            if (!cond.Equals("0"))
            {
                sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                model = CallbackFun("DETAIL", "N", "lwf_setting", "Hr", model);
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult lwf_setting(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_Tlist7"];
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_Tlist8"];
            List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_Tlist9"];
            //TempData[MyGuid + "_Tlist1"] = mod1;
            //TempData[MyGuid + "_Tlist2"] = mod2;
            //TempData[MyGuid + "_Tlist3"] = mod3;
            //TempData[MyGuid + "_Tlist4"] = mod4;
            //TempData[MyGuid + "_Tlist5"] = mod5;
            //TempData[MyGuid + "_Tlist6"] = mod6;
            //TempData[MyGuid + "_Tlist7"] = mod7;
            //TempData[MyGuid + "_Tlist8"] = mod8;
            //TempData[MyGuid + "_Tlist9"] = mod9;
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
            TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
            TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
            TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (tm.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (tm.SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            if (tm.SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            if (tm.SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    //Session["EDMODE"] = "N";
                    //ViewBag.vnew = "disabled='disabled'";
                    //ViewBag.vedit = "disabled='disabled'";
                    //ViewBag.vsave = "";
                    //ViewBag.scripCall = "enableForm();";                   
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod6 = new List<SelectListItem>();
                    mod7 = new List<SelectListItem>();
                    mod8 = new List<SelectListItem>();
                    mod9 = new List<SelectListItem>();
                    #region Country 
                    mod4 = cmd_Fun.country(userCode, unitid_mst);
                    //DataTable dt = new DataTable();
                    //dt = sgen.getdata(userCode, "select distinct country_name,alpha_2 from country_state order by country_name");
                    //if (dt.Rows.Count > 0)
                    //{
                    //    foreach (DataRow dr in dt.Rows)
                    //    {
                    //        mod4.Add(new SelectListItem { Text = dr["country_name"].ToString(), Value = dr["alpha_2"].ToString() });
                    //    }
                    //}
                    #endregion
                    #region company_name 
                    // shiv
                    mq1 = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
                    if (!role_mst.ToUpper().Equals("OWNER")) where = " and company_profile_id in ('" + mq1.Replace(",", "','") + "')";
                    DataTable dt3 = new DataTable();
                    mq1 = "SELECT Company_Profile_Id, (company_name|| ' ('|| company_profile_id||')') as nameid FROM company_profile where type='CP' " + where + "";
                    dt3 = sgen.getdata(userCode, mq1);
                    if (dt3.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt3.Rows)
                        {
                            mod6.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["company_profile_id"].ToString() });
                        }
                    }
                    #endregion
                    mod8.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                    mod8.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                    mod8.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                    mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod1.Add(new SelectListItem { Text = " No", Value = "No" });
                    mod9.Add(new SelectListItem { Text = "Earning", Value = "Earning" });
                    mod9.Add(new SelectListItem { Text = "Deduction", Value = "Deduction" });
                    mod2.Add(new SelectListItem { Text = "Do Not Deduct LWF on Arrear", Value = "001" });
                    mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                    //TempData[MyGuid + "_Tlist1"] = mod1;
                    //TempData[MyGuid + "_Tlist2"] = mod2;
                    //TempData[MyGuid + "_Tlist3"] = mod3;
                    //TempData[MyGuid + "_Tlist4"] = mod4;
                    //TempData[MyGuid + "_Tlist5"] = mod5;
                    //TempData[MyGuid + "_Tlist6"] = mod6;
                    //TempData[MyGuid + "_Tlist7"] = mod7;
                    //TempData[MyGuid + "_Tlist8"] = mod8;
                    //TempData[MyGuid + "_Tlist9"] = mod9;
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                    TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                    TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                    TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                    TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                }
                catch (Exception ex) { }
            }
            else if (command == "Edit")
            {
                cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr from "
           + tm.Col10 + " where type='" + tm.Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
                if (!cond.Equals("0"))
                {
                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    model[0].Col13 = "Update";
                    model[0].Col121 = "U";
                    model[0].Col122 = "<u>U</u>pdate";
                    ViewBag.scripCall = "enableForm();";
                }
                else
                {
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                }

            }
            else if (command == "State")
            {
                try
                {
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                    if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                    if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
                    if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
                    if (model[0].SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
                    DataTable dtt2 = new DataTable();
                    mod5 = new List<SelectListItem>();
                    // shiv
                    dtt2 = sgen.getdata(userCode, "select distinct state_name,state_gst_code from country_state where alpha_2='" + model[0].SelectedItems4.FirstOrDefault() + "' and state_name!='-' order by state_name");
                    if (dtt2.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtt2.Rows)
                        {
                            mod5.Add(new SelectListItem { Text = dr["state_name"].ToString(), Value = dr["state_gst_code"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist5"] = mod5;
                    model[0].TList5 = mod5;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { }
            }
            else if (command == "Company")
            {
                try
                {
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                    if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                    if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
                    if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
                    if (model[0].SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
                    mod7 = new List<SelectListItem>();
                    DataTable dtunit = new DataTable();
                    // shiv
                    string mq0 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                    if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq0.Replace(",", "','") + "')";
                    // shiv
                    mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as nameid FROM company_unit_profile where company_profile_id='" + model[0].SelectedItems6.FirstOrDefault() + "'" + where + "";
                    dtunit = sgen.getdata(userCode, mq);
                    if (dtunit.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtunit.Rows)
                        {
                            mod7.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist7"] = mod7;
                    model[0].TList7 = mod7;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    type = model[0].Col12;
                    DataRow dr = dataTable.NewRow();
                    dr["type"] = model[0].Col12;
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = currdate;
                    dr["col1"] = model[0].SelectedItems9.FirstOrDefault();
                    dr["col2"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["col3"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["col4"] = model[0].Col18;
                    dr["col7"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["col8"] = model[0].SelectedItems5.FirstOrDefault();
                    dr["col9"] = model[0].SelectedItems6.FirstOrDefault();
                    dr["col10"] = model[0].SelectedItems7.FirstOrDefault();
                    dr["col11"] = model[0].Col19;
                    dr["col15"] = model[0].Col20;
                    dr["col13"] = model[0].Col21;
                    dr["col14"] = model[0].Col22;
                    dr["col12"] = model[0].SelectedItems2.FirstOrDefault(); //name
                    dr["col17"] = model[0].Col23;
                    dr["col18"] = model[0].Col24;
                    dr["col20"] = model[0].Col25;
                    dr["col19"] = model[0].SelectedItems8.FirstOrDefault();
                    dr["col21"] = model[0].SelectedItems1.FirstOrDefault();
                    if (isedit)
                    {
                        dr["rec_id"] = model[0].Col7;
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    //dr = getsave(currdate, dr, model);
                    dataTable.Rows.Add(dr);
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10, model[0].Col8, isedit);
                    if (res == true)
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        cond = clientid_mst + unitid_mst + vch_num + DateTime.ParseExact(currdate, sgen.GetSaveDateFormat(), CultureInfo.InvariantCulture).ToString("yyyyMMdd") + model[0].Col12;
                        sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                        if (!cond.Equals("0"))
                        {
                            sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                            model = CallbackFun("DETAIL", "N", "lwf_setting", "Hr", model);
                            //ViewBag.scripCall = "showmsgJS(1, 'Detail Updated', 1);disableForm();";
                        }
                        if (isedit) ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Updated Successfully');disableForm();";
                        else ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Added Successfully');disableForm();";

                        //ViewBag.scripCall = "showmsgJS(1, 'Detail Added', 1);disableForm();";
                        model[0].Col13 = "Save";
                        model[0].Col121 = "S";
                        model[0].Col122 = "<u>S</u>ave";
                        //     model = new List<Tmodelmain>();
                        //     model.Add(new Tmodelmain
                        //     {
                        //         Col9 = tm.Col9,
                        //         Col10 = tm.Col10,
                        //         Col11 = tm.Col11,
                        //         Col12 = tm.Col12,
                        //         Col13 = "Save",
                        //         Col14 = tm.Col14,
                        //         Col15 = tm.Col15,
                        //         TList1 = mod1,
                        //         SelectedItems1 = new string[] { "" },
                        //         TList2 = mod2,
                        //         SelectedItems2 = new string[] { "" },
                        //         TList3 = mod3,
                        //         SelectedItems3 = new string[] { "" },
                        //         TList4 = mod4,
                        //         SelectedItems4 = new string[] { "" },
                        //         TList5 = mod5,
                        //         SelectedItems5 = new string[] { "" },
                        //         TList6 = mod6,
                        //         SelectedItems6 = new string[] { "" },
                        //         TList7 = mod7,
                        //         SelectedItems7 = new string[] { "" },
                        //         TList8 = mod8,
                        //         TList9 = mod9,
                        //         SelectedItems8 = new string[] { "" },
                        //         SelectedItems9 = new string[] { "" }
                        //     }
                        //);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region esi_setting
        public ActionResult esi_setting()
        {
            FillMst("");
            chkRef();
            // shiv
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "EMPLOYEE STATE INSURANCE SETTINGS";
            tm1.Col10 = "vehicle_master";
            tm1.Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            tm1.Col12 = "KES";
            tm1.Col13 = "Save";
            tm1.Col121 = "S";
            tm1.Col122 = "<u>S</u>ave";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            tm1.TList1 = mod1;
            tm1.TList2 = mod1;
            tm1.TList3 = mod1;
            tm1.TList4 = mod1;
            tm1.TList5 = mod1;
            tm1.TList6 = mod1;
            tm1.TList7 = mod1;
            tm1.TList8 = mod1;
            tm1.TList9 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.SelectedItems4 = new string[] { "" };
            tm1.SelectedItems5 = new string[] { "" };
            tm1.SelectedItems6 = new string[] { "" };
            tm1.SelectedItems7 = new string[] { "" };
            tm1.SelectedItems8 = new string[] { "" };
            tm1.SelectedItems9 = new string[] { "" };
            cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr from "
                    + tm1.Col10 + " where type='" + tm1.Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
            model.Add(tm1);
            if (!cond.Equals("0"))
            {
                sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                model = CallbackFun("DETAIL", "N", "esi_setting", "Hr", model);
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult esi_setting(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_Tlist7"];
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_Tlist8"];
            List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_Tlist9"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
            TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
            TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
            TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;

            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            if (model[0].SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col16 = vch_num;
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod6 = new List<SelectListItem>();
                    mod7 = new List<SelectListItem>();
                    mod8 = new List<SelectListItem>();
                    mod9 = new List<SelectListItem>();
                    #region
                    mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod1.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    mod2.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod2.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    mod4.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod4.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    mod5.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                    mod5.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                    mod5.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                    mod6.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod6.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                    mod7.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                    mod7.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                    mod7.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                    TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                    mod8.Add(new SelectListItem { Text = "No", Value = "No" });
                    mod8.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod8.Add(new SelectListItem { Text = "None", Value = "None" });
                    TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                    mod9.Add(new SelectListItem { Text = "No", Value = "No" });
                    mod9.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod9.Add(new SelectListItem { Text = "None", Value = "None" });
                    TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                    #endregion

                }
                catch (Exception ex) { }
            }
            else if (command == "Edit")
            {
                cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr from "
 + tm.Col10 + " where type='" + tm.Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
                if (!cond.Equals("0"))
                {
                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    model[0].Col13 = "Update";
                    model[0].Col121 = "U";
                    model[0].Col122 = "<u>U</u>pdate";
                    //ViewBag.scripCall = "enableForm();";
                }
                else
                {
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Applicable', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].Col18.Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill ESI Number', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].Col22.Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill  Employee (%)', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].Col23.Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill  Employer (%)', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].SelectedItems5.FirstOrDefault().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Select Employee Round Value', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    else
                    {
                        if (model[0].Col20.Equals(""))
                        {
                            ViewBag.scripCall += "showmsgJS(1,'Please Fill Employee Round Amount', 2);"; ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }
                    }
                    if (model[0].SelectedItems7.FirstOrDefault().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Employer Round Value', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    else
                    {
                        if (model[0].Col21.Equals(""))
                        {
                            ViewBag.scripCall += "showmsgJS(1,'Please Fill Employer Round Amount', 2);"; ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }
                    }
                    //var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["type"] = model[0].Col12;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    dr["vch_num"] = model[0].Col16;
                    dr["col1"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["col2"] = model[0].Col18;
                    dr["col3"] = model[0].Col19;
                    dr["col4"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["col5"] = model[0].Col22;
                    dr["col6"] = model[0].Col23;
                    dr["col7"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["col8"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["col9"] = model[0].SelectedItems5.FirstOrDefault();
                    dr["col10"] = model[0].SelectedItems6.FirstOrDefault();
                    dr["col11"] = model[0].SelectedItems7.FirstOrDefault();
                    dr["col12"] = model[0].Col24;
                    dr["col13"] = model[0].SelectedItems8.FirstOrDefault();
                    dr["col14"] = model[0].SelectedItems9.FirstOrDefault();
                    dr["col15"] = model[0].Col30;
                    dr["col16"] = sgen.Savedate(model[0].Col25.Trim(), false);
                    dr["col17"] = model[0].Col20;
                    dr["col18"] = model[0].Col21;
                    dr["col19"] = model[0].Chk1 == true ? "1" : "0";
                    // shiv
                    if (isedit)
                    {
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["rec_id"] = model[0].Col7;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst; ;
                    }
                    dataTable.Rows.Add(dr);
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10, model[0].Col8, isedit);
                    if (res == true)
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        //if (isedit) sgen.showmsg(1, "Detail Updated", 1);
                        //else sgen.showmsg(1, "Detail Added", 1); model[0].Col13 = "Save";
                        cond = clientid_mst + unitid_mst + vch_num + DateTime.ParseExact(currdate, sgen.GetSaveDateFormat(), CultureInfo.InvariantCulture).ToString("yyyyMMdd") + model[0].Col12;
                        sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                        if (!cond.Equals("0"))
                        {
                            sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                            model = CallbackFun("DETAIL", "N", "esi_setting", "Hr", model);
                        }
                        if (isedit) ViewBag.scripCall = "showmsgJS(1, 'Detail Updated Successfully', 1);disableForm();";
                        else ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Added Successfully');disableForm();";
                        //ViewBag.scripCall = "showmsgJS(1, 'Detail Added', 1);disableForm();";
                        //ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model[0].Col13 = "Save";
                        model[0].Col121 = "S";
                        model[0].Col122 = "<u>S</u>ave";
                        //ViewBag.vnew = "";
                        //ViewBag.vedit = "";
                        //ViewBag.vsave = "disabled='disabled'";
                        //ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        //model = new List<Tmodelmain>();
                        //model.Add(new Tmodelmain
                        //{
                        //    Col9 = tm.Col9,
                        //    Col10 = tm.Col10,
                        //    Col11 = tm.Col11,
                        //    Col12 = tm.Col12,
                        //    Col13 = "Save",
                        //    Col14 = tm.Col14,
                        //    Col15 = tm.Col15,
                        //    TList1 = mod1,
                        //    SelectedItems1 = new string[] { "" },
                        //    TList2 = mod2,
                        //    SelectedItems2 = new string[] { "" },
                        //    TList3 = mod3,
                        //    SelectedItems3 = new string[] { "" },
                        //    TList4 = mod4,
                        //    SelectedItems4 = new string[] { "" },
                        //    TList5 = mod5,
                        //    SelectedItems5 = new string[] { "" },
                        //    TList6 = mod6,
                        //    SelectedItems6 = new string[] { "" },
                        //    TList7 = mod7,
                        //    SelectedItems7 = new string[] { "" },
                        //    TList8 = mod8,
                        //    SelectedItems8 = new string[] { "" },
                        //    TList9 = mod9,
                        //    SelectedItems9 = new string[] { "" },
                        //});
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel") { return CancelFun(model); }
            else if (command == "Callback") { model = StartCallback(model); }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region pf_setting
        public ActionResult pf_setting()
        {
            FillMst("");
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "PROVIDENT FUND SETTINGS";
            tm1.Col10 = "vehicle_master";
            tm1.Col12 = "KPF"; //KPF
            tm1.Col13 = "Save";
            tm1.Col121 = "S";
            tm1.Col122 = "<u>S</u>ave";
            tm1.Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            #region Dropdwon

            tm1.TList16 = tm1.TList15 = tm1.TList14 = tm1.TList13 = tm1.TList12 = tm1.TList11 = tm1.TList10 = tm1.TList9 = tm1.TList8 = tm1.TList7 = tm1.TList6 = tm1.TList5 = tm1.TList4 = tm1.TList3 = tm1.TList2 = tm1.TList1 = mod1;
            tm1.SelectedItems17 = tm1.SelectedItems16 = tm1.SelectedItems15 = tm1.SelectedItems14 = tm1.SelectedItems13 = tm1.SelectedItems12 = tm1.SelectedItems11 = new string[] { "" };
            tm1.SelectedItems10 = tm1.SelectedItems9 = tm1.SelectedItems8 = tm1.SelectedItems7 = tm1.SelectedItems6 = tm1.SelectedItems5 = tm1.SelectedItems4 = tm1.SelectedItems3 = tm1.SelectedItems2 = tm1.SelectedItems1 = new string[] { "" };
            TempData[MyGuid + "_Tlist1"] = mod1;
            TempData[MyGuid + "_Tlist2"] = mod1;
            TempData[MyGuid + "_Tlist3"] = mod1;
            TempData[MyGuid + "_Tlist4"] = mod1;
            TempData[MyGuid + "_Tlist5"] = mod1;
            TempData[MyGuid + "_Tlist6"] = mod1;
            TempData[MyGuid + "_Tlist7"] = mod1;
            TempData[MyGuid + "_Tlist8"] = mod1;
            TempData[MyGuid + "_Tlist9"] = mod1;
            TempData[MyGuid + "_Tlist10"] = mod1;
            TempData[MyGuid + "_Tlist11"] = mod1;
            TempData[MyGuid + "_Tlist12"] = mod1;
            TempData[MyGuid + "_Tlist13"] = mod1;
            TempData[MyGuid + "_Tlist14"] = mod1;
            TempData[MyGuid + "_Tlist15"] = mod1;
            TempData[MyGuid + "_Tlist16"] = mod1;
            TempData[MyGuid + "_Tlist17"] = mod1;
            //tm1.TList1 = mod1;
            //tm1.TList2 = mod1;
            //tm1.TList3 = mod1;
            //tm1.TList4 = mod1;
            //tm1.TList5 = mod1;
            //tm1.TList6 = mod1;
            //tm1.TList7 = mod1;
            //tm1.TList8 = mod1;
            //tm1.TList9 = mod1;
            //tm1.TList10 = mod1;
            //tm1.TList11 = mod1;
            //tm1.TList12 = mod1;
            //tm1.TList13 = mod1;
            //tm1.TList14 = mod1;
            //tm1.TList15 = mod1;
            //tm1.TList17 = mod1;
            //tm1.TList16 = mod1;
            //tm1.SelectedItems1 = new string[] { "" };
            //tm1.SelectedItems2 = new string[] { "" };
            //tm1.SelectedItems3 = new string[] { "" };
            //tm1.SelectedItems4 = new string[] { "" };
            //tm1.SelectedItems5 = new string[] { "" };
            //tm1.SelectedItems6 = new string[] { "" };
            //tm1.SelectedItems7 = new string[] { "" };
            //tm1.SelectedItems8 = new string[] { "" };
            //tm1.SelectedItems9 = new string[] { "" };
            //tm1.SelectedItems10 = new string[] { "" };
            //tm1.SelectedItems11 = new string[] { "" };
            //tm1.SelectedItems12 = new string[] { "" };
            //tm1.SelectedItems13 = new string[] { "" };
            //tm1.SelectedItems14 = new string[] { "" };
            //tm1.SelectedItems15 = new string[] { "" };
            //tm1.SelectedItems16 = new string[] { "" };
            //tm1.SelectedItems17 = new string[] { "" };
            #endregion
            cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr from "
                + tm1.Col10 + " where type='" + tm1.Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
            model.Add(tm1);
            if (!cond.Equals("0"))
            {
                sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                model = CallbackFun("DETAIL", "N", "pf_setting", "Hr", model);
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult pf_setting(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_Tlist7"];
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_Tlist8"];
            List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_Tlist9"];
            List<SelectListItem> mod10 = (List<SelectListItem>)TempData[MyGuid + "_Tlist10"];
            List<SelectListItem> mod11 = (List<SelectListItem>)TempData[MyGuid + "_Tlist11"];
            List<SelectListItem> mod12 = (List<SelectListItem>)TempData[MyGuid + "_Tlist12"];
            List<SelectListItem> mod13 = (List<SelectListItem>)TempData[MyGuid + "_Tlist13"];
            List<SelectListItem> mod14 = (List<SelectListItem>)TempData[MyGuid + "_Tlist14"];
            List<SelectListItem> mod15 = (List<SelectListItem>)TempData[MyGuid + "_Tlist15"];
            List<SelectListItem> mod16 = (List<SelectListItem>)TempData[MyGuid + "_Tlist16"];
            List<SelectListItem> mod17 = (List<SelectListItem>)TempData[MyGuid + "_Tlist17"];

            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
            TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
            TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
            TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
            TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod10;
            TempData[MyGuid + "_Tlist11"] = model[0].TList11 = mod11;
            TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;
            TempData[MyGuid + "_Tlist13"] = model[0].TList13 = mod13;
            TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod14;
            TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod15;
            TempData[MyGuid + "_Tlist16"] = model[0].TList16 = mod16;
            TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod17;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (tm.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (tm.SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            if (tm.SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            if (tm.SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
            if (tm.SelectedItems10 == null) model[0].SelectedItems10 = new string[] { "" };
            if (tm.SelectedItems11 == null) model[0].SelectedItems11 = new string[] { "" };
            if (tm.SelectedItems12 == null) model[0].SelectedItems12 = new string[] { "" };
            if (tm.SelectedItems13 == null) model[0].SelectedItems13 = new string[] { "" };
            if (tm.SelectedItems14 == null) model[0].SelectedItems14 = new string[] { "" };
            if (tm.SelectedItems15 == null) model[0].SelectedItems15 = new string[] { "" };
            if (tm.SelectedItems16 == null) model[0].SelectedItems16 = new string[] { "" };
            if (tm.SelectedItems17 == null) model[0].SelectedItems17 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col16 = vch_num;
                    #region Dropdwon
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod6 = new List<SelectListItem>();
                    mod7 = new List<SelectListItem>();
                    mod8 = new List<SelectListItem>();
                    mod9 = new List<SelectListItem>();
                    mod10 = new List<SelectListItem>();
                    mod11 = new List<SelectListItem>();
                    mod12 = new List<SelectListItem>();
                    mod13 = new List<SelectListItem>();
                    mod14 = new List<SelectListItem>();
                    mod15 = new List<SelectListItem>();
                    mod16 = new List<SelectListItem>();
                    mod15 = new List<SelectListItem>();
                    mod16 = new List<SelectListItem>();
                    mod17 = new List<SelectListItem>();
                    mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod1.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    mod2.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod2.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    mod4.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod4.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    mod5.Add(new SelectListItem { Text = "Exempted", Value = "Exempted" });
                    mod5.Add(new SelectListItem { Text = "Not Exempted", Value = "Not Exempted" });
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                    mod6.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod6.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                    mod7.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod7.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                    mod8.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod8.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                    mod9.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod9.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                    mod10.Add(new SelectListItem { Text = "Round off", Value = "001" });
                    mod10.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                    mod10.Add(new SelectListItem { Text = "Round down", Value = "003" });
                    TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod10;
                    mod11.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod11.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist11"] = model[0].TList11 = mod11;
                    mod12.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod12.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;
                    mod13.Add(new SelectListItem { Text = "Basic Wages", Value = "Basic Wages" });
                    mod13.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist13"] = model[0].TList13 = mod13;
                    mod14.Add(new SelectListItem { Text = "Basic Wages", Value = "Basic Wages" });
                    mod14.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod14;
                    mod15.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod15.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod15;
                    mod16.Add(new SelectListItem { Text = "50 Paise", Value = "50 Paise" });
                    mod16.Add(new SelectListItem { Text = "1 Rs", Value = "1 Rs" });
                    mod16.Add(new SelectListItem { Text = "5 Rs", Value = "5 Rs" });
                    TempData[MyGuid + "_Tlist16"] = model[0].TList16 = mod16;
                    mod17.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod17.Add(new SelectListItem { Text = "No", Value = "No" });
                    TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod17;
                    #endregion


                }
                catch (Exception ex) { }
            }
            else if (command == "Edit")
            {
                cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr from "
               + tm.Col10 + " where type='" + tm.Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
                if (!cond.Equals("0"))
                {
                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    model[0].Col13 = "Update";
                    model[0].Col121 = "U";
                    model[0].Col122 = "<u>U</u>pdate";
                    ViewBag.scripCall = "enableForm();";
                }
                else
                {
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                }

            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Applicable', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].Col18.Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill PF Number', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].Col22.Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill Employee (%)', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].Col23.Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill Employer (%)', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].SelectedItems10.FirstOrDefault().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill Employee round value', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    else
                    {
                        if (model[0].Col19.Equals(""))
                        {
                            ViewBag.scripCall += "showmsgJS(1,'Please Fill Employee round Amount', 2);"; ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }
                    }
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["type"] = model[0].Col12;
                    dr["vch_date"] = currdate;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    dr["vch_num"] = model[0].Col16;
                    dr["col1"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["col2"] = model[0].Col18;
                    dr["col3"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["col4"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["col5"] = model[0].Col21;
                    dr["col6"] = model[0].Col22;
                    dr["col7"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["col8"] = model[0].SelectedItems5.FirstOrDefault();
                    dr["col9"] = model[0].SelectedItems6.FirstOrDefault();
                    dr["col10"] = model[0].SelectedItems7.FirstOrDefault();
                    dr["col11"] = model[0].SelectedItems8.FirstOrDefault();
                    dr["col12"] = model[0].SelectedItems9.FirstOrDefault();
                    dr["col13"] = model[0].SelectedItems10.FirstOrDefault();
                    dr["col14"] = model[0].Col23;
                    dr["col15"] = model[0].Col24;
                    dr["col16"] = sgen.Make_date_S(model[0].Col33);
                    dr["col17"] = model[0].Col25;
                    dr["col18"] = model[0].Col26;
                    dr["col19"] = model[0].Col27;
                    dr["col20"] = model[0].Col28;
                    dr["col21"] = model[0].Col29;
                    dr["col25"] = model[0].Col30;
                    dr["col28"] = model[0].SelectedItems11.FirstOrDefault();
                    dr["col29"] = model[0].Col31;
                    dr["col30"] = model[0].Col32;
                    dr["col31"] = model[0].SelectedItems12.FirstOrDefault();
                    dr["col32"] = model[0].SelectedItems13.FirstOrDefault();
                    dr["col33"] = model[0].SelectedItems14.FirstOrDefault();
                    dr["col34"] = model[0].SelectedItems15.FirstOrDefault();
                    dr["col36"] = model[0].SelectedItems16.FirstOrDefault();
                    dr["col37"] = model[0].SelectedItems17.FirstOrDefault();
                    dr["col38"] = model[0].Col38;
                    dr["cur_village"] = model[0].Col19;
                    dr["col40"] = model[0].Col20;
                    dr["col42"] = model[0].Col39;
                    if (model[0].Chk1 == true)
                    {
                        status = "Y";
                    }
                    if (model[0].Chk1 == false)
                    {
                        status = "N";
                    }
                    dr["col39"] = status;
                    // shiv
                    if (isedit)
                    {
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["rec_id"] = model[0].Col7;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        //if (isedit) sgen.showmsg(1, "Detail Updated", 1);
                        //else sgen.showmsg(1, "Detail Added", 1); model[0].Col13 = "Save";
                        cond = clientid_mst + unitid_mst + vch_num + DateTime.ParseExact(currdate, sgen.GetSaveDateFormat(), CultureInfo.InvariantCulture).ToString("yyyyMMdd") + model[0].Col12;
                        sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                        if (!cond.Equals("0"))
                        {
                            sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                            model = CallbackFun("DETAIL", "N", "pf_setting", "Hr", model);
                        }
                        if (isedit) ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Details Updated Successfully');disableForm();";
                        else ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Details Added Successfully');disableForm();";

                        //ViewBag.scripCall = "showmsgJS(1, 'Detail Added', 1);disableForm();";
                        model[0].Col13 = "Save";
                        model[0].Col121 = "S";
                        model[0].Col122 = "<u>S</u>ave";
                        //     ViewBag.vnew = "";
                        //     ViewBag.vedit = "";
                        //     ViewBag.vsave = "disabled='disabled'";
                        //     ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        //     model = new List<Tmodelmain>();
                        //     model.Add(new Tmodelmain
                        //     {
                        //         Col9 = tm.Col9,
                        //         Col10 = tm.Col10,
                        //         Col11 = tm.Col11,
                        //         Col12 = tm.Col12,
                        //         Col13 = "Save",
                        //         Col14 = tm.Col14,
                        //         Col15 = tm.Col15,
                        //         TList1 = mod1,
                        //         SelectedItems1 = new string[] { "" },
                        //         TList2 = mod2,
                        //         SelectedItems2 = new string[] { "" },
                        //         TList3 = mod3,
                        //         SelectedItems3 = new string[] { "" },
                        //         TList4 = mod4,
                        //         SelectedItems4 = new string[] { "" },
                        //         TList5 = mod5,
                        //         SelectedItems5 = new string[] { "" },
                        //         TList6 = mod6,
                        //         SelectedItems6 = new string[] { "" },
                        //         TList7 = mod7,
                        //         SelectedItems7 = new string[] { "" },
                        //         TList8 = mod8,
                        //         SelectedItems8 = new string[] { "" },
                        //         TList9 = mod9,
                        //         SelectedItems9 = new string[] { "" },
                        //         TList10 = mod10,
                        //         SelectedItems10 = new string[] { "" },
                        //         TList11 = mod11,
                        //         SelectedItems11 = new string[] { "" },
                        //         TList12 = mod12,
                        //         SelectedItems12 = new string[] { "" },
                        //         TList13 = mod13,
                        //         SelectedItems13 = new string[] { "" },
                        //         TList14 = mod14,
                        //         SelectedItems14 = new string[] { "" },
                        //         TList15 = mod15,
                        //         SelectedItems15 = new string[] { "" },
                        //         TList16 = mod16,
                        //         SelectedItems16 = new string[] { "" },
                        //         TList17 = mod17,
                        //         SelectedItems17 = new string[] { "" },
                        //     }
                        //);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "pf_setting", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region bulk_empmst
        public ActionResult bulk_empmst()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vupload = "disabled='disabled'";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vnew = "";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "ADD BULK EMPLOYEE";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.Col40 = "Choose File";
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult bulk_empmst(List<Tmodelmain> model, string command, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            DataTable dt = new DataTable();
            if (command == "New")
            {
                // shiv
                sgen.SetSession(MyGuid, "EDMODE", "N");
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vupload = "";
                ViewBag.vsave = "disabled='disabled'";
                ViewBag.scripCall = ViewBag.scripCall + ";enableForm();";
                model[0].LTM1 = new List<Tmodelmain>();
            }
            if (command == "Upload")
            {
                ViewBag.vupload = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vnew = "disabled='disabled'";
                HttpPostedFileBase file;
                if (model[0].File1[0] != null)
                {
                    file = model[0].File1[0];
                    dt = Read_xls(file);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        sgen.SetSession(MyGuid, "dtn", dt);
                        model[0].dt1 = dt;
                    }
                }
            }
            else if (command == "Save")
            {
                tab_name = "";
                if (model[0].Col18 != null)
                {
                    try
                    {
                        string currdate = sgen.server_datetime(userCode);
                        model[0].Col62 = "01/01/1900";
                        tab_name = model[0].Col18;
                        //dt = (DataTable)Session["dtn"];
                        dt = model[0].dt1;
                        if (model[0].Col17.Trim().Equals("001"))
                        {
                            DataTable dtf = cmd_Fun.GetStructure(userCode, tab_name);
                            int vch = sgen.Make_int(sgen.seekval(userCode, "select max(to_number(vch_num)) as vch from " + tab_name + " where client_id='" + clientid_mst + "'", "vch"));
                            int i = 1;
                            status = "Y";
                            foreach (DataRow dr in dt.Rows)
                            {
                                DataRow drf = dtf.NewRow();
                                drf["rec_id"] = "0";
                                foreach (DataColumn dc in dt.Columns)
                                {
                                    string colname = dc.ColumnName.ToString();
                                    string colval = dr[dc.ColumnName].ToString();
                                    string coltype = dtf.Columns[colname].DataType.Name.ToString().Trim().ToUpper();
                                    if (dc.Ordinal == 0)
                                    {
                                        try { colval = dr[dc.ColumnName].ToString().Split('-')[1].ToString().Trim(); }
                                        catch (Exception ex) { }
                                        drf[dc.ColumnName] = colval;
                                    }
                                    else
                                    {
                                        if (coltype.Equals("DATETIME"))
                                        {
                                            try
                                            {
                                                DateTime temp = DateTime.ParseExact(colval, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                colval = temp.ToString("yyyy-MM-dd HH:mm:ss");
                                                drf[dc.ColumnName] = colval;
                                            }
                                            catch (Exception err)
                                            {
                                                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.ToString().Replace("'", "") + "', 2);";
                                                return View(model);
                                            }
                                        }
                                        else
                                        {
                                            drf[dc.ColumnName] = colval;
                                        }
                                        //if (sgen.IsDate(dr[dc.ColumnName].ToString(), "dd/MM/yyyy"))
                                        //{
                                        //    drf[dc.ColumnName] = DateTime.ParseExact(dr[dc.ColumnName].ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");
                                        //}
                                        //else
                                        //{
                                        //    if (dr[dc.ColumnName].ToString().Trim().Equals("")) dr[dc.ColumnName] = "0";
                                        //    drf[dc.ColumnName] = dr[dc.ColumnName].ToString().Trim().Replace("'", "");
                                        //}
                                    }
                                }
                                try
                                {
                                    drf["vch_num"] = sgen.padlc(vch + i, 6);
                                    drf["emp_code"] = "GMC" + sgen.padlc(vch + i, 6);
                                    drf["type"] = "EMP";
                                    drf["type_desc"] = "Employee Detail";
                                    drf["client_id"] = clientid_mst;
                                    drf["client_unit_id"] = unitid_mst;
                                    drf["ent_by"] = userid_mst;
                                    drf["ent_date"] = currdate;
                                    drf["ex_dt"] = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");
                                    drf["fnf_dt"] = DateTime.ParseExact("01/01/1900", "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");
                                    drf["emp_status"] = status;
                                    drf["temp_ldate"] = currdate;
                                    drf["temp_rdate"] = currdate;
                                    drf["temp_effdate"] = currdate;
                                    drf["created_date"] = currdate;
                                    drf["vch_date"] = currdate;
                                    drf["edit_date"] = currdate;
                                    drf["dom"] = currdate;
                                    drf["edit_by"] = "-";
                                    drf["is_vpf"] = "N";
                                    drf["isspouseworking"] = "N";
                                    drf["isperadd"] = "N";
                                    drf["jtype"] = "001";
                                    if (!userCode.Trim().ToUpper().Equals("SKYKESHO"))
                                    {
                                        //drf["emp_dept"] = "001";
                                        //drf["emp_desig"] = "007";
                                        //drf["emp_type"] = "001";
                                        //drf["emp_category"] = "001";
                                        if (drf["emp_dept"].ToString().Trim().Length < 3) drf["emp_dept"] = "001";
                                        if (drf["emp_desig"].ToString().Trim().Length < 3) drf["emp_desig"] = "001";
                                        if (drf["emp_type"].ToString().Trim().Length < 3) drf["emp_type"] = "001";
                                        if (drf["emp_category"].ToString().Trim().Length < 3) drf["emp_category"] = "001";
                                    }
                                    drf["passport_dt"] = currdate;
                                    drf["nationality"] = "IN";
                                    drf["caste"] = "001";
                                    drf["religion"] = "001";
                                    drf["iscanteen"] = "N";
                                }
                                catch (Exception err)
                                {
                                    ViewBag.scripCall += "showmsgJS(1, '" + err.Message.ToString().Replace("'", "") + "', 0);";
                                }
                                i++;
                                dtf.Rows.Add(drf);
                            }
                            bool res = sgen.Update_data_fast1(userCode, dtf, tab_name, "", false);
                            if (res)
                            {
                                ViewBag.vnew = "'";
                                ViewBag.vsave = "disabled='disabled";
                                ViewBag.vupload = "disabled='disabled";
                                model[0].dt1 = null;
                                ViewBag.scripCall += "showmsgJS(1, 'Data Saved Successfully', 1);";
                            }
                            else { ViewBag.scripCall += "showmsgJS(1, 'Could not Save', 0);"; }
                        }
                        else if (model[0].Col17.Trim().Equals("002"))
                        {
                            string res1 = "";
                            Satransaction sat = new Satransaction(userCode, MyGuid);
                            //DataTable dtsave = sgen.getdata(userCode, "select * from " + tab_name + "  where 1=2");
                            DataTable dtsave = cmd_Fun.GetStructure(userCode, tab_name);
                            foreach (DataRow dr in dt.Rows)
                            {
                                String Allcols = "", mcolname = "", mcolval = "";
                                foreach (DataColumn dc in dt.Columns)
                                {
                                    if (dc.Ordinal == 0)
                                    {
                                        mcolname = dc.ColumnName;
                                        mcolval = dr[dc].ToString().Trim();
                                    }
                                    else
                                    {
                                        string colname = dc.ColumnName;
                                        string colval = dr[dc].ToString().Trim();
                                        string coltype = dtsave.Columns[colname].DataType.Name.ToString().Trim().ToUpper();
                                        if (coltype.Equals("DATETIME"))
                                        {
                                            try
                                            {
                                                DateTime temp = DateTime.ParseExact(colval, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                colval = "TO_DATE('" + temp.ToString("yyyy-MM-dd HH:mm:ss") + "','YYYY-MM-DD HH24:MI:SS')";
                                                if (Allcols.Trim().Equals("")) { Allcols = colname + "=" + colval + ""; }
                                                else Allcols = Allcols + "," + colname + "=" + colval + "";
                                            }
                                            catch (Exception err)
                                            {
                                                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.ToString().Replace("'", "") + "', 2);";
                                                return View(model);
                                                //show error and return from function 
                                            }
                                        }
                                        else
                                        {
                                            if (Allcols.Trim().Equals("")) { Allcols = colname + "='" + colval + "'"; }
                                            else Allcols = Allcols + "," + colname + "='" + colval + "'";
                                        }
                                    }
                                }
                                string val1 = mcolval.Trim();
                                try
                                {
                                    val1 = mcolval.Split('-')[1].Trim();
                                }
                                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 2);"; }
                                mq = "update " + tab_name + " set " + Allcols + " where upper(trim(" + mcolname.Trim() + "))='" + val1.Trim().ToUpper() + "'";
                                res1 = sat.Execute_cmd(mq, "");
                                if (!res1.Equals("1"))
                                {
                                    ViewBag.scripCall += "showmsgJS(1, '" + res1.ToString().Replace("'", "") + "~~" + mq + "', 2);";
                                    break;
                                }
                            }
                            if (res1.Equals("1"))
                            {
                                sat.Commit();
                                model[0].dt1 = null;
                                ViewBag.scripCall += "showmsgJS(1, 'Records Updated Successfully', 1);";
                            }
                            else
                            {
                                sat.Rollback();
                                ViewBag.scripCall += "showmsgJS(1, '" + res1.ToString().Replace("'", "") + "', 2);";
                            }
                        }
                    }
                    catch (Exception err) { ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "").ToString() + "', 0);"; }
                }
                else { ViewBag.scripCall += "showmsgJS(1, 'Please Fill Table Name', 2);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            // shiv
            {
                if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                model = CallbackFun(btnval, "N", "bulk_empmst", "Hr", model);
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vsave = "";
            }
            ModelState.Clear();
            return View(model);
        }
        private DataTable Read_xls(HttpPostedFileBase file1)
        {
            string excelConString = "";
            DataTable dt = new DataTable();
            if (file1.ContentLength > 1)
            {
                string ext = Path.GetExtension(file1.FileName).ToLower();
                if (ext == ".xls")
                {
                    string filesavepath = AppDomain.CurrentDomain.BaseDirectory + "\\Uploads\\" + cg_com_name.Replace(" ", "") + "\\file" + DateTime.Now.ToString("ddMMyyyyhhmmfff") + ".xls";
                    file1.SaveAs(filesavepath);
                    excelConString = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=" + filesavepath + ";Extended Properties=\"Excel 8.0;HDR=YES;\"";
                }
                else
                {
                    ViewBag.scripCall = "showmsgJS(1, 'Please Select Excel File only in xls format!!', 2);";
                    return null;
                }
                try
                {
                    OleDbConnection OleDbConn = new OleDbConnection(); OleDbConn.ConnectionString = excelConString;
                    OleDbConn.Open();
                    dt = OleDbConn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    OleDbConn.Close();
                    String[] excelSheets = new String[dt.Rows.Count];
                    int i = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        excelSheets[i] = row["TABLE_NAME"].ToString();
                        i++;
                    }
                    OleDbCommand OleDbCmd = new OleDbCommand();
                    String Query = "";
                    Query = "SELECT  * FROM [" + excelSheets[0] + "]";
                    OleDbCmd.CommandText = Query;
                    OleDbCmd.Connection = OleDbConn;
                    OleDbCmd.CommandTimeout = 0;
                    OleDbDataAdapter objAdapter = new OleDbDataAdapter();
                    objAdapter.SelectCommand = OleDbCmd;
                    objAdapter.SelectCommand.CommandTimeout = 0;
                    dt = null;
                    dt = new DataTable();
                    objAdapter.Fill(dt);
                    dt = sgen.RemoveEmptyRowsFromDataTable(dt);
                }
                catch (Exception err) { ViewBag.scripCall = "showmsgJS(1, '" + err.Message.ToString() + "', 2);"; }
            }
            return dt;
        }
        #endregion
        #region salary rule
        public ActionResult configure_rule()
        {
            FillMst("");
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "CONFIGURE RULES";
            model[0].Col10 = "vehicle_master";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "KCR"; //KCR
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].TList4 = mod1;
            model[0].TList5 = mod1;
            model[0].TList6 = mod1;
            model[0].TList7 = mod1;
            model[0].TList8 = mod1;
            model[0].TList9 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            model[0].SelectedItems6 = new string[] { "" };
            model[0].SelectedItems7 = new string[] { "" };
            model[0].SelectedItems8 = new string[] { "" };
            model[0].SelectedItems9 = new string[] { "" };

            cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' " +
"and client_unit_id='" + unitid_mst + "'", "fstr");
            if (!cond.Equals("0"))
            {
                sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                model = CallbackFun("DETAIL", "N", "configure_rule", "Hr", model);
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult configure_rule(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            type_desc = "Configure rules";

            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_Tlist7"];
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_Tlist8"];
            List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_Tlist9"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
            TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
            TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
            TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (tm.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (tm.SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            if (tm.SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            if (tm.SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                // shiv
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col16 = vch_num;
                    #region Dropdwon All hard code
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod6 = new List<SelectListItem>();
                    mod7 = new List<SelectListItem>();
                    mod8 = new List<SelectListItem>();
                    mod9 = new List<SelectListItem>();
                    mod1.Add(new SelectListItem { Text = "CTC Based", Value = "CTC Based" });
                    mod1.Add(new SelectListItem { Text = "Adhoc", Value = "Adhoc" });
                    mod1.Add(new SelectListItem { Text = "Gross", Value = "Gross" });
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    mod2.Add(new SelectListItem { Text = "Standard", Value = "Standard" });
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    mod3.Add(new SelectListItem { Text = "30 days", Value = "30 days" });
                    mod3.Add(new SelectListItem { Text = "31 days", Value = "31 days" });
                    mod3.Add(new SelectListItem { Text = "Actual days in a month", Value = "Actual days in a month" });
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    mod4.Add(new SelectListItem { Text = "Both", Value = "Both" });
                    mod4.Add(new SelectListItem { Text = "Set off against leave", Value = "Set off against leave" });
                    mod4.Add(new SelectListItem { Text = "Payout", Value = "Payout" });
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    #region 5 dropdwon
                    for (int i = 1; i <= 31; i++)
                    {
                        if (i.ToString().Length.Equals(1))
                        {
                            mod5.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                        }
                    }
                    #endregion
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                    mod6.Add(new SelectListItem { Text = "Attendance and Payroll", Value = "Attendance and Payroll" });
                    mod6.Add(new SelectListItem { Text = "Attendance only", Value = " Attendance only" });
                    TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                    #region 7 dropdwon
                    for (int i = 1; i <= 31; i++)
                    {
                        if (i.ToString().Length.Equals(1))
                        {
                            mod7.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                        }
                    }
                    #endregion
                    TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                    mod8.Add(new SelectListItem { Text = "Dont Send Email", Value = "Dont Send Email" });
                    mod8.Add(new SelectListItem { Text = "Common Email", Value = "Common Email" });
                    TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                    mod9.Add(new SelectListItem { Text = "Month", Value = "Month" });
                    mod9.Add(new SelectListItem { Text = "Date", Value = "Date" });
                    TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                    #endregion

                }
                catch (Exception ex) { }
            }
            else if (command == "Edit")
            {
                sgen.SetSession(MyGuid, "EDMODE", "Y");
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                model[0].Col13 = "Update";
                ViewBag.scripCall = "enableForm();";
            }
            if (command == "viewPayslip")
            {
                DataTable dt = new DataTable();
                string mq = "select (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as name,emp.emp_code," +
                        "emp.old_empcode Old_EmpCode,nvl(dg.master_name,'-') as desig,nvl(dp.master_name,'-') as dept,emp.pf_no,emp.account_no," +
                        "to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as join_date" +
                        " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' " +
                        "and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE emp.type= 'EMP' " +
                        "and emp.client_id= '" + clientid_mst + "' and emp.client_unit_id= '" + unitid_mst + "' and to_char(emp.ex_dt,'yyyy')='1900' and emp.emp_status='Y' order by emp.emp_code asc";

                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {
                    DataTable dt1 = new DataTable();
                    dt1 = sgen.getdata(userCode, "select client_name from master_setting where type='PSF' and master_name='" + model[0].Col20.Trim() + "'");
                    string rpt = "../../erp/schoolReports_Rpts/" + dt1.Rows[0]["client_name"].ToString();

                    sgen.open_report_bydt(userCode, dt, rpt, "Employee Pay Slip");
                    //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_Viewer.aspx','95%','900px','Reports');";
                    ViewBag.scripCall += "showRptnew('Employee Pay Slip');";

                }
                else
                {
                    ViewBag.scripCall += "showmsgJS(1,'No Data Found',2);";
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string Disable = "", Personal = "", prorate = "", apply = "", Calculations = "",
                     leave = "", Encashment = "", standard = "", Allow = "", loan = "", Amounts = "", Period = "";
                    if (model[0].SelectedItems1.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Calculation Of Basic Salary', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                    }
                    if (model[0].Col19 == "" || model[0].Col19 == null)
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill Minimum Basic Amount', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                    }
                    if (model[0].SelectedItems2.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Salary Definition', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                    }
                    if (model[0].Col20 == "" || model[0].Col20 == null)
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select PaySlip Format', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                    }
                    if (model[0].SelectedItems3.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Base Days', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                    }
                    if (model[0].SelectedItems4.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Comp Off Treatment', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                    }
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["type"] = model[0].Col12;
                    dr["vch_date"] = currdate;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    dr["vch_num"] = vch_num;
                    dr["col1"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["col2"] = model[0].Col18;
                    dr["col3"] = model[0].Col19;
                    dr["col4"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["col7"] = model[0].Col20;
                    dr["col8"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["col9"] = model[0].Col21;
                    dr["col10"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["col11"] = model[0].SelectedItems5.FirstOrDefault();
                    dr["col12"] = model[0].SelectedItems6.FirstOrDefault();
                    dr["col13"] = model[0].SelectedItems7.FirstOrDefault();
                    dr["col14"] = model[0].SelectedItems8.FirstOrDefault();
                    dr["col15"] = model[0].SelectedItems9.FirstOrDefault();
                    if (model[0].Chk5 == true) { Disable = "Y"; }
                    if (model[0].Chk5 == false) { Disable = "N"; }
                    dr["col18"] = Disable;
                    if (model[0].Chk6 == true) { Personal = "Y"; }
                    if (model[0].Chk6 == false) { Personal = "N"; }
                    dr["col19"] = Personal;
                    if (model[0].Chk1 == true) { prorate = "Y"; }
                    if (model[0].Chk1 == false) { prorate = "N"; }
                    dr["col20"] = prorate;
                    if (model[0].Chk2 == true) { apply = "Y"; }
                    if (model[0].Chk2 == false) { apply = "N"; }
                    dr["col21"] = apply;
                    if (model[0].Chk3 == true) { standard = "Y"; }
                    if (model[0].Chk3 == false) { standard = "N"; }
                    dr["col25"] = standard;
                    if (model[0].Chk4 == true) { Allow = "Y"; }
                    if (model[0].Chk4 == false) { Allow = "N"; }
                    dr["col29"] = Allow;
                    if (model[0].Chk7 == true) { Encashment = "Y"; }
                    if (model[0].Chk7 == false) { Encashment = "N"; }
                    dr["col30"] = Encashment;
                    if (model[0].Chk8 == true) { loan = "Y"; }
                    if (model[0].Chk8 == false) { loan = "N"; }
                    dr["col31"] = loan;
                    if (model[0].Chk9 == true) { Amounts = "Y"; }
                    if (model[0].Chk9 == false) { Amounts = "N"; }
                    dr["col32"] = Amounts;
                    if (model[0].Chk10 == true) { Period = "Y"; }
                    if (model[0].Chk10 == false) { Period = "N"; }
                    dr["col33"] = Period;
                    if (model[0].Chk11 == true) { Calculations = "Y"; }
                    if (model[0].Chk11 == false) { Calculations = "N"; }
                    dr["col34"] = Calculations;
                    dr["col36"] = model[0].Col22;
                    if (isedit)
                    {
                        dr["rec_id"] = model[0].Col7;
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst; ;
                    }
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        cond = clientid_mst + unitid_mst + vch_num + DateTime.ParseExact(currdate, sgen.GetSaveDateFormat(), CultureInfo.InvariantCulture).ToString("yyyyMMdd") + model[0].Col12;
                        sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                        if (!cond.Equals("0"))
                        {
                            sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                            model = CallbackFun("DETAIL", "N", "configure_rule", "Hr", model);
                        }
                        if (isedit) ViewBag.scripCall = "showmsgJS(1, 'Detail Updated', 1);disableForm();";
                        else ViewBag.scripCall = "showmsgJS(1, 'Detail Added', 1);disableForm();"; model[0].Col13 = "Save";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                            TList4 = mod4,
                            SelectedItems4 = new string[] { "" },
                            TList5 = mod5,
                            SelectedItems5 = new string[] { "" },
                            TList6 = mod6,
                            SelectedItems6 = new string[] { "" },
                            TList7 = mod7,
                            SelectedItems7 = new string[] { "" },
                            TList8 = mod8,
                            SelectedItems8 = new string[] { "" },
                            TList9 = mod9,
                            SelectedItems9 = new string[] { "" },
                        }
                   );
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "configure_rule", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region holiday_type
        public ActionResult holiday_type()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            model = getload(model);
            if (mid_mst.Trim().Equals("9002.6"))
            {
                type_desc = "Weekly Holiday";
                model[0].Col9 = "WEEKLY HOLIDAY"; model[0].Col12 = "KHD";
                model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            }
            if (mid_mst.Trim().Equals("9002.7"))
            {
                type_desc = "General Holiday";
                model[0].Col9 = "GENERAL HOLIDAY"; model[0].Col12 = "KGH";
                model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            }
            model[0].Col10 = "enx_tab";
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].TList3 = mod3;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            return View(model);
        }
        [HttpPost]
        public ActionResult holiday_type(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;



            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    #region Leave Year 
                    DataTable dt = new DataTable();
                    mq = "select academic_year_id, (to_char(convert_tz(From_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')||' - '||" +
                        "to_char(convert_tz( To_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')) as leaveyr from add_academic_year where type='LYR'" +
                        "and client_id='" + clientid_mst + "' ";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["leaveyr"].ToString(), Value = dr["academic_year_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    #endregion
                    #region Branch/Location
                    DataTable dt1 = new DataTable();
                    mq = "select vch_num,col2 from vehicle_master where type='LOM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "'";
                    dt1 = sgen.getdata(userCode, mq);
                    if (dt1.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt1.Rows)
                        {
                            mod2.Add(new SelectListItem { Text = dr["col2"].ToString(), Value = dr["vch_num"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    #endregion
                    #region Dropdwon hard code
                    mod3.Add(new SelectListItem { Text = "Sunday", Value = "001" });
                    mod3.Add(new SelectListItem { Text = "Monday", Value = "002" });
                    mod3.Add(new SelectListItem { Text = "Tuesday", Value = "003" });
                    mod3.Add(new SelectListItem { Text = "Wednesday", Value = "004" });
                    mod3.Add(new SelectListItem { Text = "Thursday", Value = "005" });
                    mod3.Add(new SelectListItem { Text = "Friday", Value = "006" });
                    mod3.Add(new SelectListItem { Text = "Saturday", Value = "007" });
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    #endregion
                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Leave Year', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].SelectedItems2.FirstOrDefault().Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Branch', 2);"; ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (mid_mst.Trim().Equals("9002.6"))
                    {
                        if (model[0].SelectedItems3.FirstOrDefault().Trim().Equals(""))
                        {
                            ViewBag.scripCall += "showmsgJS(1,'Please Select Day', 2);"; ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }
                    }
                    if (mid_mst.Trim().Equals("9002.7"))
                    {
                        if (model[0].Col17.Equals(""))
                        {
                            ViewBag.scripCall += "showmsgJS(1,'Please Fill From Date', 2);"; ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }
                        if (model[0].Col18.Equals(""))
                        {
                            ViewBag.scripCall += "showmsgJS(1,'Please Fill To Date', 2);"; ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }
                        if (model[0].Col19.Equals(""))
                        {
                            ViewBag.scripCall += "showmsgJS(1,'Please Fill Holiday Name', 2);"; ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }
                    }
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    string week = "", halfday = "N", rule = "N";
                    if (mid_mst.Trim().Equals("9002.6"))
                    {
                        if (model[0].Chk6.Equals(true)) halfday = "Y";
                        if (model[0].Chk7.Equals(true)) rule = "Y";
                        if (model[0].Chk1.Equals(true)) week = week + "1,";
                        if (model[0].Chk2.Equals(true)) week = week + "2,";
                        if (model[0].Chk3.Equals(true)) week = week + "3,";
                        if (model[0].Chk4.Equals(true)) week = week + "4,";
                        if (model[0].Chk5.Equals(true)) week = week + "5,";
                        if (model[0].Chk1.Equals(false) && model[0].Chk2.Equals(false) && model[0].Chk3.Equals(false) && model[0].Chk4.Equals(false) && model[0].Chk2.Equals(false)) week = "";
                    }
                    if (mid_mst.Trim().Equals("9002.7")) if (model[0].Chk8.Equals(true)) rule = "Y";
                    //string day_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist3"]).SingleOrDefault(item => item.Value == model[0].SelectedItems3.FirstOrDefault().ToString()).Text.ToString();
                    //DataTable dataTable = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["type"] = model[0].Col12;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    dr["vch_num"] = model[0].Col16;
                    dr["vch_date"] = currdate;
                    dr["created_date"] = currdate;
                    dr["type_desc"] = type_desc;
                    dr["col1"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["col2"] = string.Join(",", model[0].SelectedItems2);
                    if (model[0].Col14 == "9002.6")
                    {
                        string day_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist3"]).SingleOrDefault(item => item.Value == model[0].SelectedItems3.FirstOrDefault().ToString()).Text.ToString();
                        dr["col3"] = model[0].SelectedItems3.FirstOrDefault();
                        dr["col4"] = day_name;
                        dr["col5"] = week.Trim();
                        dr["col6"] = halfday.Trim();
                        dr["col7"] = rule.Trim();
                    }
                    if (model[0].Col14 == "9002.7")
                    {
                        dr["col3"] = model[0].Col19;
                        dr["col4"] = rule;
                        dr["date1"] = sgen.Make_date_S(model[0].Col17);
                        dr["date2"] = sgen.Make_date_S(model[0].Col18);
                    }
                    // shiv
                    if (isedit)
                    {
                        dr["rec_id"] = model[0].Col7;
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                    }
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tm.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        //ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                        }
                   );
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "holiday_type", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region ot_config
        public ActionResult ot_config()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "OVERTIME CONFIG";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "OTC";
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].TList4 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            return View(model);
        }
        [HttpPost]
        public ActionResult ot_config(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;




            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    #region OT Earning Head
                    DataTable dt = sgen.getdata(userCode, "SELECT vch_num,col1 as Earning_head FROM vehicle_master WHERE  type='KSP'" +
                          " and client_id='" + clientid_mst + "' and col10='Earning' and cur_state<>'0'");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["Earning_head"].ToString(), Value = dr["vch_num"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    #endregion
                    #region month
                    // shiv
                    DataTable dt1 = new DataTable();
                    dt1 = sgen.BindMonthlyDay(userCode);
                    if (dt1.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt1.Rows)
                        {
                            mod3.Add(new SelectListItem { Text = dr["Mday"].ToString(), Value = dr["id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    #endregion
                    #region OT Multiply
                    mod2.Add(new SelectListItem { Text = "Single", Value = "100" });
                    mod2.Add(new SelectListItem { Text = "Double", Value = "200" });
                    mod2.Add(new SelectListItem { Text = "None", Value = "0" });
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    #endregion
                    mod4.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                    mod4.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                    mod4.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;




                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        //mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        //vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        //model[0].Col16 = vch_num;
                    }
                    cond = sgen.seekval(userCode, "select vch_num from enx_tab where type = 'OTC' and client_id = '" + clientid_mst + "' and " +
    "client_unit_id = '" + unitid_mst + "'" + vch_num + "", "vch_num");
                    if (cond != "0")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Already Exist, You Can Only Update', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    string[] Apay = string.Join(",", model[0].SelectedItems1).Split(',');
                    type_desc = "Over Time Config";
                    if (model[0].SelectedItems1.FirstOrDefault() != "")
                    {
                        for (int i = 0; i < Apay.Length; i++)
                        {
                            DataRow dr = dataTable.NewRow();
                            dr["rec_id"] = "0";
                            dr["type"] = model[0].Col12;
                            dr["vch_date"] = currdate;
                            dr["type_desc"] = type_desc;
                            dr["vch_num"] = model[0].Col16;
                            dr["col1"] = Apay[i];
                            dr["col2"] = model[0].SelectedItems2.FirstOrDefault();
                            dr["col3"] = model[0].SelectedItems3.FirstOrDefault();
                            dr["col5"] = model[0].SelectedItems4.FirstOrDefault();
                            dr["col4"] = DateTime.ParseExact(model[0].Col18.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                            dr["col6"] = model[0].Col19;
                            if (isedit)
                            {
                                dr["client_id"] = model[0].Col1;
                                dr["client_unit_id"] = model[0].Col2;
                                dr["ent_by"] = model[0].Col3;
                                dr["ent_date"] = model[0].Col4;
                                dr["edit_by"] = userid_mst;
                                dr["edit_date"] = currdate;
                            }
                            else
                            {
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = currdate;
                                dr["edit_by"] = "-";
                                dr["edit_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                            }
                            dataTable.Rows.Add(dr);
                        }
                    }
                    else
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["vch_num"] = vch_num;
                        dr["vch_date"] = currdate;
                        dr["type"] = model[0].Col12;
                        dr["type_desc"] = type_desc;
                        dr["col1"] = "-";
                        dr["col2"] = model[0].SelectedItems2.FirstOrDefault();
                        dr["col3"] = model[0].SelectedItems3.FirstOrDefault();
                        dr["col4"] = DateTime.ParseExact(model[0].Col18.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss"); ;
                        dr["col5"] = model[0].SelectedItems4.FirstOrDefault();
                        dr["col6"] = model[0].Col19.Trim();
                        if (isedit)
                        {
                            dr["client_id"] = model[0].Col1;
                            dr["client_unit_id"] = model[0].Col2;
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        if (isedit) ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Updated Successfully');disableForm();";
                        else ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                            TList4 = mod4,
                            SelectedItems4 = new string[] { "" },
                        }
                    );
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "ot_config", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region salary_advance
        public ActionResult salary_advance()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "SALARY ADVANCE POLICY";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "KAS";
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].TList4 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            return View(model);
        }
        [HttpPost]
        public ActionResult salary_advance(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;




            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    #region UNIT
                    // shiv
                    DataTable dtu = new DataTable();
                    mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                    if (!role_mst.ToUpper().Equals("OWNER")) cond = "where cup_id in ('" + mq1.Replace(",", "','") + "')";
                    mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as name FROM company_unit_profile " + cond + "";
                    dtu = sgen.getdata(userCode, mq);
                    if (dtu.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtu.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["cup_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    #endregion
                    #region Dropdwon Pay Group
                    mod2.Add(new SelectListItem { Text = "1", Value = "1" });
                    mod2.Add(new SelectListItem { Text = "2", Value = "2" });
                    mod2.Add(new SelectListItem { Text = "3", Value = "3" });
                    mod2.Add(new SelectListItem { Text = "4", Value = "4" });
                    mod2.Add(new SelectListItem { Text = "5", Value = "5" });
                    mod2.Add(new SelectListItem { Text = "6", Value = "6" });
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    #endregion
                    #region Pay Component
                    // shiv
                    DataTable dt = new DataTable();
                    mq = "select col1,vch_num from vehicle_master where type='KSP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and col21='Y'";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod3.Add(new SelectListItem { Text = dr["col1"].ToString(), Value = dr["vch_num"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    #endregion
                    #region Allow Exception
                    mod4.Add(new SelectListItem { Text = "No", Value = "No" });
                    mod4.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    #endregion




                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col16.Trim() + "'";
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    cond = sgen.seekval(userCode, "select col8 from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='"
                        + unitid_mst + "'" + mq1 + "", "col8");
                    if (!cond.Equals("0"))
                    {
                        model[0].Col17 = "";
                        ViewBag.scripCall = "showmsgJS(1, 'Policy Name Already Exists', 2);";
                        goto End;
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    string[] Apay = string.Join(",", model[0].SelectedItems3).Split(',');
                    for (int i = 0; i < Apay.Length; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["type"] = model[0].Col12;
                        dr["rec_id"] = "0";
                        dr["vch_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["vch_num"] = model[0].Col16;
                        dr["col1"] = model[0].Col17;
                        dr["col2"] = model[0].Col18;
                        dr["date1"] = sgen.Make_date_S(model[0].Col19);
                        dr["col3"] = model[0].Col20;
                        dr["col4"] = model[0].Col21;
                        dr["col5"] = model[0].SelectedItems2.FirstOrDefault();
                        dr["col6"] = Apay[i];
                        dr["col7"] = model[0].SelectedItems4.FirstOrDefault();
                        // shiv
                        if (isedit)
                        {
                            dr["client_id"] = model[0].Col1;
                            dr["client_unit_id"] = model[0].Col2;
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                            TList4 = mod4,
                            SelectedItems4 = new string[] { "" },
                        }
                   );
                    }
                End:;
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "COPYUNIT")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Equals(""))
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Please Select Unit', 2)";
                        goto End;
                    }
                    mq = "select * from enx_tab where type='KAS' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    DataTable dtsh = sgen.getdata(userCode, mq);
                    if (dtsh.Rows.Count > 0)
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Salary Advance Policy already there in this Unit', 2)"; goto End;
                    }
                    mq = "insert into enx_tab (vch_num,vch_date,type,client_id,client_unit_id,ent_by,ent_date,edit_by,edit_date,col1," +
               "col2,col3,col4,col5,col6,col7,date1)" +
               "(SELECT vch_num, UTC_TIMESTAMP(), type, client_id, '" + unitid_mst + "', '" + userid_mst + "', UTC_TIMESTAMP(), '-', UTC_TIMESTAMP(), col1, col2, col3," +
               " col4, col5, col6, col7,date1 FROM enx_tab WHERE type = 'KAS' and client_id='" + clientid_mst + "' and client_unit_id='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "')";
                    res = sgen.execute_cmd(userCode, mq);
                End:;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "salary_advance", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region location_master
        public ActionResult location_master()
        {
            FillMst("");
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "LOCATION INFORMATION";
            tm1.Col10 = "vehicle_master";
            tm1.Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "LOM";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            tm1.TList1 = mod1;
            tm1.TList2 = mod1;
            tm1.TList3 = mod1;
            tm1.TList4 = mod1;
            tm1.TList5 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.SelectedItems4 = new string[] { "" };
            tm1.SelectedItems5 = new string[] { "" };
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult location_master(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region Dropdwon All 
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];

            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            #endregion
            if (command == "New")
            // shiv
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col16 = vch_num;
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    #region State
                    // shiv
                    DataTable dt3 = new DataTable();
                    dt3 = sgen.getdata(userCode, "select distinct state_name,state_gst_code from country_state where state_name!='-' order by state_name");
                    if (dt3.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt3.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["state_name"].ToString(), Value = dr["state_gst_code"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    #endregion
                    #region Metro - fix
                    mod3.Add(new SelectListItem { Text = "Yes", Value = "Y" });
                    mod3.Add(new SelectListItem { Text = "No", Value = "N" });
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    #endregion
                    #region ESI Type - fix
                    mod4.Add(new SelectListItem { Text = "Standard Contribution", Value = "S" });
                    mod4.Add(new SelectListItem { Text = "Reduced Contribution ", Value = "R" });
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    #endregion
                    #region Active - fix
                    mod5.Add(new SelectListItem { Text = "Yes", Value = "Y" });
                    mod5.Add(new SelectListItem { Text = "No", Value = "N" });
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                    #endregion

                    model[0].TList2 = mod2;



                }
                catch (Exception ex) { }
            }
            #region City
            else if (command == "Class")
            {
                try
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    string section_id = string.Join(",", model[0].SelectedItems2);
                    DataTable dtt = new DataTable();
                    mod2 = new List<SelectListItem>();
                    dtt = sgen.getdata(userCode, "SELECT city_name FROM (SELECT city_name FROM country_state where state_gst_code='" + model[0].SelectedItems1.FirstOrDefault() + "' group BY city_name) tab union " +
                        "SELECT 'Other' city_name from dual");
                    if (dtt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtt.Rows)
                        {
                            mod2.Add(new SelectListItem { Text = dr["city_name"].ToString(), Value = dr["city_name"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;

                }
                catch (Exception ex) { }
            }
            #endregion
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    string[] Apay = string.Join(",", model[0].SelectedItems1).Split(',');
                    for (int i = 0; i < Apay.Length; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["vch_num"] = model[0].Col16;
                        dr["col39"] = model[0].Col17;
                        dr["col1"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["col2"] = model[0].SelectedItems2.FirstOrDefault();
                        dr["col3"] = model[0].SelectedItems3.FirstOrDefault();
                        dr["col4"] = model[0].Col18;
                        dr["col7"] = model[0].Col19;
                        dr["col8"] = model[0].Col20;
                        dr["col9"] = model[0].SelectedItems4.FirstOrDefault();
                        dr["col10"] = model[0].SelectedItems5.FirstOrDefault();
                        dr["date1"] = model[0].Col21;
                        dr["col11"] = model[0].Col22;
                        dr["col12"] = model[0].Col23;
                        // shiv
                        if (isedit)
                        {
                            dr["client_id"] = model[0].Col1;
                            dr["rec_id"] = model[0].Col7;
                            dr["client_unit_id"] = model[0].Col2;
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                            TList4 = mod4,
                            TList5 = mod5,
                            SelectedItems5 = new string[] { "" },
                        }
                    );
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region canteen_config
        public ActionResult canteen_config()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "CANTEEN CONFIG";
            tm1.Col10 = "enx_tab2";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KCD";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult canteen_config(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            DataTable dt = new DataTable();
            var tm = model.FirstOrDefault();
            if (command == "New")
            // shiv
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "'" + model[0].Col11 + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num;
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "canteen_config", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    type = model[0].Col12;
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col18;
                        mq1 = " and vch_num<>'" + vch_num + "'";
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col18 = vch_num;
                        mq1 = "";
                    }
                    mq = sgen.seekval(userCode, "select vch_num from enx_tab2 where type='" + model[0].Col12 + "'" + model[0].Col11 + "" + mq1 + "", "vch_num");
                    if (!mq.Trim().Equals("0"))
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "showmsgJS(1, 'You Can Only Update Your Setting', 2);";
                        return View(model);
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + " where 1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = currdate;
                    dr["type"] = type.Trim();
                    dr["type_desc"] = "Canteen Config";
                    dr["col1"] = model[0].Col19;
                    // shiv
                    if (isedit)
                    {
                        dr["rec_id"] = model[0].Col7;
                        dr["client_id"] = model[0].Col1.Trim();
                        dr["client_unit_id"] = model[0].Col2.Trim();
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                    }
                    dataTable.Rows.Add(dr);
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        //ViewBag.scripCall += "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15
                        });
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion                      
        #region salary_rate
        public ActionResult salary_rate()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "EMPLOYEE SALARY RATE";
            tm1.Col10 = "enx_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KES";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.dt1 = null;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult salary_rate(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            DataTable dt = new DataTable();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            TempData[MyGuid + "_TList1"] = model[0].TList1;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (command == "New")
            // shiv
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vget = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "'" + where + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num;
                    mod1 = new List<SelectListItem>();
                    #region grade
                    // shiv
                    dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KGM' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                        }

                    }
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    #endregion

                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "salary_rate", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vget = "";
                //ViewBag.vsave = "";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string empcode = "", emp_vchnum = "", emp_name = "", oldcode = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    isedit = false;
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num;
                    type = model[0].Col12.Trim();
                    int colstart = 5;
                    foreach (DataRow gr in model[0].dt1.Rows)
                    {
                        //DataTable dataTable = sgen.getdata(userCode, "select  * from " + model[0].Col10.Trim() + "  where  1=2");
                        DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                        isedit = Convert.ToBoolean(sgen.Make_int(gr[0].ToString().Substring(15, 1).Trim()));
                        empcode = gr[1].ToString().Trim();
                        oldcode = gr[2].ToString().Trim();
                        emp_vchnum = empcode.Substring(3, 6);
                        emp_name = gr[4].ToString().Trim();
                        for (int k = colstart; k < model[0].dt1.Columns.Count - 1; k++)
                        {
                            var htype = sgen.seekval(userCode, "select col10 from vehicle_master where vch_num='" + dtm.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim() + "' " +
                                    " and type='KSP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "col10");
                            //var grd = sgen.seekval(userCode, "select msg.master_name grade from emp_master emp inner join master_setting msdp on " +
                            //           "emp.emp_dept = msdp.master_id and msdp.type = 'MDP' inner join master_setting msdg on emp.emp_desig = msdg.master_id and " +
                            //           "msdg.type = 'MDG' INNER join enx_tab en on en.col1 = emp.emp_dept and en.col3 = emp.emp_desig and en.type = 'KSG' and " +
                            //           "en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' INNER join master_setting msg on " +
                            //           "msg.master_id = en.col2 and msg.type = 'KGM' and msg.client_id = '" + clientid_mst + "' and msg.client_unit_id = '" + unitid_mst + "' " +
                            //           "where emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "' and emp.type='EMP' and emp.emp_status='Y' and " +
                            //           "emp.vch_num='" + emp_vchnum + "' and to_char(emp.ex_dt,'yyyy')='1900'", "grade");
                            DataRow dr = dataTable.NewRow();
                            dr["vch_num"] = vch_num.Trim();
                            dr["vch_date"] = currdate;
                            dr["type"] = type.Trim();
                            dr["type_desc"] = "Employee_salary";
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["rec_id"] = "0";
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                            dr["date1"] = currdate;
                            dr["date2"] = currdate;
                            dr["col1"] = emp_vchnum;
                            dr["col2"] = gr["Total (000000)"].ToString();
                            dr["col3"] = model[0].dt1.Columns[k].ToString().Trim().Split('(')[0].Trim();
                            dr["col4"] = model[0].dt1.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
                            dr["col5"] = oldcode;
                            dr["col8"] = htype;
                            dr["col9"] = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text;
                            dr["col10"] = gr[k].ToString().Trim();
                            dr["col12"] = "001";
                            dr["col13"] = "Abs";
                            dataTable.Rows.Add(dr);
                        }
                        res = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), "(client_id||client_unit_id||col1)='" + gr[0].ToString().Substring(0, 15).Trim() + "'", isedit);
                    }
                    //if (res == true)
                    //{                                             
                    model = new List<Tmodelmain>();
                    model.Add(new Tmodelmain
                    {
                        Col9 = tmodel.Col9,
                        Col10 = tmodel.Col10,
                        Col11 = tmodel.Col11,
                        Col12 = tmodel.Col12,
                        Col13 = "Save",
                        Col14 = tmodel.Col14,
                        Col15 = tmodel.Col15,
                        TList1 = mod1,
                        SelectedItems1 = new string[] { "" },
                        dt1 = dt
                    });
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.scripCall += "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                    //}
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "GetData")
            {
                try
                {
                    mq = "SELECT (emp.client_id||emp.client_unit_id||emp.vch_num||(case when nvl(en.rec_id,'0')='0' then 0 else 1 end)) Sno,nvl(en.rec_id,'0') rec_id," +
                        "emp.external_empno as External_EmpCode,emp.emp_code EmpCode,emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| " +
                        "REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name,(vm.col1||' ('||vm.vch_num||')') headname," +
                        "nvl(en.col10,'0') amount,UPPER(vm.col10) as htype FROM emp_master emp " +
                        "left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' " +
                        "and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                        "LEFT outer join enx_tab en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' " +
                        "and en.client_unit_id = '" + unitid_mst + "' and  en.col9 <> '4' " +
                        "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' " +
                        "and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                        "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status='Y' and to_char(emp.ex_dt,'yyyy')='1900' " +
                        "order by emp.emp_code,vm.vch_num asc";
                    DataTable dtl = new DataTable();
                    dtl = sgen.getdata(userCode, mq);
                    sgen.SetSession(MyGuid, "KESDTB", dtl);
                    DataView dv = dtl.DefaultView;
                    DataTable dtemp = dv.ToTable(true, "empcode");
                    for (int a = 0; a < dtemp.Rows.Count; a++)
                    {
                        var sno = dtl.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(sno)", string.Empty);
                        dtl.Select(string.Format("[empcode] = '{0}'", dtemp.Rows[a]["empcode"].ToString())).ToList<DataRow>()
                         .ForEach(r =>
                         {
                             r["sno"] = sno;
                         });
                    }
                    dtl.AcceptChanges();
                    if (dtl.Rows.Count > 0)
                    {
                        Pivot pv = new Pivot(dtl, MyGuid);
                        dtl = pv.PivotData("amount", AggregateFunction.Sum, new string[] { "Sno", "EmpCode", "Old_EmpCode", "External_EmpCode", "Employee_Name" }, new string[] { "headname" });
                        dtl.AcceptChanges();
                        sgen.SetSession(MyGuid, "KESDT", dtl);
                        mq1 = sgen.open_grid_dt("Employee Salary Rate", dtl, 2);
                        if (mq1 == "ok")
                        {
                            ViewBag.scripCall += "showwait();";
                            ViewBag.scripCall += "callFoo('Employee Salary Rate');";
                            ViewBag.vsave = "";
                        }
                        else
                        {
                            ViewBag.scripCall += "showmsgJS(1,'No Data Found',2);";
                            ViewBag.vsave = "disabled='disabled'";
                        }
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vget = "";
                        return View(model);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion                      
        #region emp_attendance
        public ActionResult savr_attn()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vimport = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm = new Tmodelmain();
            tm.Col14 = mid_mst;
            tm.Col15 = m_id_mst;
            tm.Col9 = "EMPLOYEE ATTENDANCE FROM SAVIOR";
            tm.Col10 = "leave_ob";
            tm.Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            tm.Col12 = "EAT";//employee attendance
            tm.Col13 = "Save";
            tm.TList1 = mod1;
            tm.TList2 = mod1;
            tm.Col22 = "Choose File";
            tm.SelectedItems1 = new string[] { "" };
            tm.SelectedItems2 = new string[] { "" };
            tm.LTM1 = new List<Tmodelmain>();
            model.Add(tm);
            return View(model);
        }
        [HttpPost]
        public ActionResult savr_attn(List<Tmodelmain> model, string command, HttpPostedFileBase upd1, string hfrow, string hftable)
        {
            // bool haserror = false;
            string emp_name = "", exter_empno = "", emp_vchnum = "", old_empcode = "", month_name = "", month_id = "", emp_code = "";
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
            model[0].dt1 = dtm;
            #region ddl
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];


            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                // shiv
                sgen.SetSession(MyGuid, "EDMODE", "N");
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "disabled='disabled'";
                ViewBag.vimport = "";
                ViewBag.scripCall = ViewBag.scripCall + ";enableForm();";
                mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "'" + model[0].Col11 + "";
                vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                model[0].Col17 = vch_num.Trim();
                mod1 = new List<SelectListItem>();
                mod2 = new List<SelectListItem>();
                model[0].LTM1 = new List<Tmodelmain>();
                //month
                #region
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);

                #endregion
                //emp type - hard type
                #region
                mod2.Add(new SelectListItem { Text = "All Employee", Value = "000" });
                mod2.Add(new SelectListItem { Text = "Selected Employee", Value = "001" });
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                #endregion

                model[0].SelectedItems1 = new string[] { "" };

                model[0].SelectedItems2 = new string[] { "" };
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            // shiv
            {
                try
                {
                    if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; }
                    else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "N", "emp_attendance", "Hr", model);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].dt1.Rows.Count <= 0) { ViewBag.scripCall = "showmsgJS(1, 'No Data Found', 0);"; }
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    //dtstr = sgen.getdata(userCode, "select * from " + tab_name + " WHERE rownum<10");            
                    DataTable data = sgen.getdata(userCode, "select distinct curryyyymmm,vch_num,vch_date,emp_code  from " + model[0].Col10 + " where " +
                        "type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and " +
                        "curryyyymmm='" + sgen.GetSession(MyGuid, "Attcurryyyymmm").ToString().Trim() + "'");
                    if (data.Rows.Count > 0)
                    {
                        vch_num = data.Rows[0]["vch_num"].ToString();
                        ent_date = data.Rows[0]["vch_date"].ToString();
                    }
                    else if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col17.Trim() + "'";
                        isedit = true;
                        vch_num = model[0].Col17.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "'" + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col17 = vch_num.Trim();
                        isedit = false;
                    }
                    Satransaction sat1 = new Satransaction(userCode, MyGuid);
                    foreach (DataRow gr in model[0].dt1.Rows)
                    {
                        #region dtstr
                        month_id = gr[0].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
                        month_name = gr[0].ToString().Trim().Split('(')[0].Trim().Split('-')[1].Trim().ToString();
                        emp_code = gr[1].ToString().Trim();
                        mq1 = sgen.seekval(userCode, "select vch_num from emp_master where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' " +
                              "and trim(external_empno)='" + emp_code.Trim() + "'", "vch_num");
                        if (mq1.Trim() != "0") { emp_vchnum = mq1.Trim(); }
                        emp_name = gr[2].ToString().Trim();
                        isedit = false;
                        string tcond = "";
                        if (data.Rows.Count > 0)
                        {
                            try
                            {
                                if (sgen.seekval_dt(data, "emp_code='" + emp_vchnum + "'").Rows.Count > 0)
                                {
                                    isedit = true;
                                    tcond = " type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_code='" + emp_vchnum + "' and vch_num='" + vch_num + "' and curryyyymmm='" + data.Rows[0]["curryyyymmm"].ToString() + "'";
                                }
                            }
                            catch (Exception err) { }
                        }
                        dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                        for (int k = 7; k < dtm.Columns.Count; k++)
                        {
                            DataRow dr = dtstr.NewRow();
                            dr["rec_id"] = "0";
                            dr["vch_num"] = vch_num.Trim();
                            dr["vch_date"] = ent_date;
                            dr["type"] = "EAT";
                            dr["month_name"] = month_name;
                            dr["month_id"] = month_id.Trim();
                            dr["emp_code"] = emp_vchnum;
                            dr["emp_name"] = emp_name;
                            dr["external_empno"] = emp_code;
                            dr["othrs"] = gr[3].ToString().Trim();
                            dr["pdays"] = gr[4].ToString().Trim();
                            dr["wdays"] = gr[5].ToString().Trim();
                            dr["hdays"] = gr[6].ToString().Trim();
                            dr["leave_type"] = dtm.Columns[k].ToString().Trim().Split('(')[0].Trim();
                            dr["leave_type_id"] = dtm.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
                            dr["leave_count"] = gr[k].ToString().Trim();
                            dr["curryyyymmm"] = sgen.GetSession(MyGuid, "Attcurryyyymmm").ToString().Trim();
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                            dtstr.Rows.Add(dr);
                        }
                        ok = sgen.Update_data_uncommit2(userCode, dtstr, model[0].Col10, tcond, isedit, sat1);
                        if (!ok)
                        {
                            break;
                        }
                        #endregion
                    }
                    if (ok)
                    {
                        sat1.Commit();
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain()
                        {
                            TList1 = mod1,
                            TList2 = mod2,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = tmodel.Col13,
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            LTM1 = new List<Tmodelmain>()
                        });
                    }
                    else
                    {
                        sat1.Rollback();
                        ViewBag.scripCall += "showmsgJS(1, 'Record Not Saved ', 0);disableForm();";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Import")
            {
                if (model[0].SelectedItems1 == null) { /*sgen.showmsg(1, "Please select month", 2);*/ }
                int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault().Trim());
                int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                string lastyyyymmm = "";
                string curryyyymmm = "";
                if (currmonth <= 12 && currmonth > 4)
                {
                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                }
                else if (currmonth == 1)
                {
                    lastyyyymmm = curryear + sgen.padlc(12, 3);
                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                }
                else if (currmonth > 1 && currmonth < 4)
                {
                    lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                }
                else if (currmonth == 4)
                {
                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                }
                sgen.SetSession(MyGuid, "Attcurryyyymmm", curryyyymmm);
                model[0].Col19 = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text.Trim().ToUpper() + " - " + curryyyymmm.Trim().Substring(0, 4).ToString().Trim();
                HttpPostedFileBase file1 = upd1;
                DataTable dt = new DataTable();
                if (file1.ContentLength > 1)
                {
                    string ext = Path.GetExtension(file1.FileName).ToLower();
                    if (ext == ".csv")
                    {
                        string filesavepath = AppDomain.CurrentDomain.BaseDirectory + "\\Uploads\\" + cg_com_name.Replace(" ", "")
                            + "\\file" + DateTime.Now.ToString("ddMMyyyyhhmmfff") + ext;
                        file1.SaveAs(filesavepath);
                        // Read sample data from CSV file
                        int i = 0;
                        using (CsvFileReader reader = new CsvFileReader(filesavepath))
                        {
                            CsvRow row = new CsvRow();
                            while (reader.ReadRow(row))
                            {
                                DataRow dr = dt.NewRow();
                                for (int c = 0; c < row.Count; c++)
                                {
                                    if (i == 0) { dt.Columns.Add(row[c].ToString()); }
                                    else { dr[c] = row[c].ToString(); }
                                    //if (c > dt.Columns.Count) break;                                                                 
                                }
                                i++;
                                dt.Rows.Add(dr);
                            }
                        }
                    }
                    try
                    {
                        dt.Rows[0].Delete();
                        //grdviewnew.DataSource = dt;
                        //grdviewnew.DataBind();
                        model[0].dt1 = dt;
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vimport = "";
                    }
                    catch (Exception err) { sgen.showmsg(1, err.Message.ToString(), 0); }
                }
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ContentResult SetSession_savr(List<Tmodelmain> Val, string Name)
        {
            sgen.SetSession(MyGuid, Name, Val);
            return Content("");
        }
        [HttpGet]
        public FileResult emptemp_savr(string Myguid)
        {
            string monthname = "", ddl_month = "", ddl_emp = "";
            MyGuid = Myguid;
            FillMst(MyGuid);
            var model = (List<Tmodelmain>)sgen.GetSession(MyGuid, "model");
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];

            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            DataTable dtl = new DataTable();
            if (model[0].SelectedItems1 == null) { /*sgen.showmsg(1, "Please select month from drop down", 2); return;*/ }
            if (model[0].SelectedItems2 == null) { /*sgen.showmsg(1, "Please select type from drop down", 2); return;*/ }
            ddl_month = model[0].SelectedItems1.FirstOrDefault().Trim();
            ddl_emp = model[0].SelectedItems2.FirstOrDefault().Trim();
            monthname = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text;
            if (ddl_emp.Trim().Equals("000"))
            {
                mq = "select '" + monthname.Trim() + " (" + ddl_month.Trim() + ")" + "' month_name,emp_code EmpCode,external_empno External_EmpCode,old_empcode Old_EmpCode," +
                    "(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Employee_Name,'0' OT,'0' Pdays,'0' Wdays,'0' Hdays from emp_master " +
                    "where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y' and to_char(ex_dt,'yyyy')='1900' order by emp_code asc";
            }
            else if (ddl_emp.Trim().Equals("001"))
            {
                mq = "select '" + monthname.Trim() + " (" + ddl_month.Trim() + ")" + "' month_name,emp_code EmpCode,external_empno External_EmpCode,old_empcode Old_EmpCode," +
                    "(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Employee_Name,'0' OT,'0' Pdays,'0' Wdays,'0' Hdays from emp_master " +
                    "where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and " +
                    "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) in ('" + sgen.GetSession(MyGuid, "KEMPATT").ToString() + "') order by emp_code asc";
            }
            dtl = sgen.getdata(userCode, mq);
            DataTable dtlt = new DataTable();
            mq1 = "select vch_num,col1,col3 from kc_tab where type='KLV' and client_id='" + clientid_mst + "' and vch_num<>'000005'";
            dtlt = sgen.getdata(userCode, mq1);
            for (int k = 0; k < dtlt.Rows.Count; k++)
            {
                dtl.Columns.Add(dtlt.Rows[k]["col1"].ToString() + " (" + dtlt.Rows[k]["vch_num"].ToString() + ")");
            }
            dtl.AcceptChanges();
            string cg_com_name = sgen.GetCookie(MyGuid, "cg_com_name");
            Byte[] fileBytes = sgen.Exp_to_csv_new(dtl, "Employee Attendance", cg_com_name);
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, "Employee Attendance");
        }
        #endregion
        #region create_team
        public ActionResult create_team()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            FillMst(m_id_mst);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "CREATE TEAM";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "KTM"; //
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            return View(model);
        }
        public List<Tmodelmain> newcreate_team(List<Tmodelmain> model)
        {
            model = getnew(model);
            model[0].Col16 = vch_num;
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();


            TempData[MyGuid + "_Tlist1"] = mod1 = cmd_Fun.username(userCode);
            //TempData[MyGuid + "_Tlist2"] = mod2 = cmd_Fun.username(userCode);
            TempData[MyGuid + "_Tlist2"] = mod1;
            return model;
        }
        [HttpPost]
        public ActionResult create_team(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            #region ddl
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];


            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                model = newcreate_team(model);
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                try
                {
                    model = StartCallback(model);
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    string[] member = string.Join(",", model[0].SelectedItems2).Split(',');
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime_local(userCode);
                    currdate = sgen.Savedate(currdate, true);
                    string vch_num = "", calb = "";
                    string cond = "";
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        cond = "";
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    foreach (string mem in member)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num;
                        dr["col1"] = model[0].Col17;
                        dr["col2"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["col3"] = mem;
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = newcreate_team(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully')";
                                model = new List<Tmodelmain>();
                                model.Add(new Tmodelmain()
                                {
                                    Col9 = tmodel.Col9,
                                    Col10 = tmodel.Col10,
                                    Col11 = tmodel.Col11,
                                    Col12 = tmodel.Col12,
                                    Col14 = tmodel.Col14,
                                    Col15 = tmodel.Col15,
                                    Col13 = "Save",
                                    Col100 = "Save & New",
                                    TList1 = mod1,
                                    TList2 = mod2,
                                    SelectedItems1 = new string[] { "" },
                                    SelectedItems2 = new string[] { "" },
                                });
                            }
                            catch (Exception ex) { }
                        }
                    }
                }
                catch { }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region daily_work
        public ActionResult daily_work()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "DAILY WORK";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "PER"; //
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            return View(model);
        }
        public List<Tmodelmain> newdaily_work(List<Tmodelmain> model)
        {
            model = getnew(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.natwrk(userCode, unitid_mst);


            model[0].Col16 = vch_num;
            model[0].Col17 = sgen.server_datetime_local(userCode);
            model[0].Col24 = sgen.server_datetime_local(userCode);
            mq = "select * from (select a.m_id as menu_id,a.m_name as menu_name,a.m_link,nvl(b.m_name,'Common') as m_name,nvl(b.m_id,'0') as m_id " +
                     "from menus a left outer join menus b on a.m_module3 = b.m_module2 and b.m_level='1' and a.m_id='19000.1' and b.m_id='19000.1' ) a where a.menu_id='19000.1' ";
            DataTable dtval = sgen.getdata(userCode, mq);
            sgen.SetSession(MyGuid, "perdt", dtval);
            return model;
        }
        [HttpPost]
        public ActionResult daily_work(List<Tmodelmain> model, string command, HttpPostedFileBase upd1, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];


            if (command == "New")
            {
                model = newdaily_work(model);
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                try
                {
                    model = StartCallback(model);
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime_local(userCode);
                    currdate = sgen.Savedate(currdate, true);
                    string vch_num = "", calb = "";
                    string cond = "";
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        cond = "";
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dtnew = (DataTable)sgen.GetSession(MyGuid, "perdt");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int k = 0; k < dtnew.Rows.Count; k++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num;
                        dr["col1"] = dtnew.Rows[k]["menu_id"].ToString();
                        dr["col2"] = dtnew.Rows[k]["menu_name"].ToString();
                        dr["col3"] = dtnew.Rows[k]["m_link"].ToString();
                        dr["col4"] = dtnew.Rows[k]["m_id"].ToString();
                        dr["col5"] = dtnew.Rows[k]["m_name"].ToString();
                        dr["col6"] = model[0].Col25;
                        dr["date1"] = sgen.Savedate(model[0].Col24.Trim(), false);
                        dr["vch_date"] = sgen.Savedate(model[0].Col17.Trim(), false);
                        dr["col7"] = model[0].Col26;//customer_id
                        dr["col8"] = model[0].SelectedItems1.FirstOrDefault();//nature of work;
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = newcreate_team(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully')";
                                model = new List<Tmodelmain>();
                                model.Add(new Tmodelmain()
                                {
                                    Col9 = tmodel.Col9,
                                    Col10 = tmodel.Col10,
                                    Col11 = tmodel.Col11,
                                    Col12 = tmodel.Col12,
                                    Col14 = tmodel.Col14,
                                    Col15 = tmodel.Col15,
                                    Col13 = "Save",
                                    Col100 = "Save & New",
                                    TList1 = mod1,
                                    SelectedItems1 = new string[] { "" },
                                });
                            }
                            catch (Exception ex) { }
                        }
                    }
                }
                catch { }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region checklist template
        public ActionResult chk_temp()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "CHECKLIST TEMPLATE";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "CTM"; // checklist template
            //model[0].TList1 = mod1;
            //DataTable dt = sgen.getdata(userCode, "select '' Activity,'1' as  SNo ,'-' as Nature of Activity,'-' as Priority,'-' Mandatory,'-'  What else if not complete,'-' as Attachment,'0' Mail,'0' SMS,'0' Assignee,'0' Dptt," +
            //    "'-' Desg,'0' Reviewer,'0' Dept,'0' Desg");
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod3;
            model[0].SelectedItems3 = new string[] { "" };
            model[0].TList4 = mod4;
            model[0].SelectedItems4 = new string[] { "" };
            model[0].TList5 = mod5;
            model[0].SelectedItems5 = new string[] { "" };
            return View(model);
        }
        public List<Tmodelmain> new_chk_temp(List<Tmodelmain> model)
        {
            model = getnew(model);
            var tm = model.FirstOrDefault();
            #region Dropdwon
            List<SelectListItem> mod1 = new List<SelectListItem>();
            TempData[MyGuid + "_TList1"] = model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            List<SelectListItem> mod2 = new List<SelectListItem>();
            TempData[MyGuid + "_TList2"] = model[0].TList2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];

            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            List<SelectListItem> mod3 = new List<SelectListItem>();
            TempData[MyGuid + "_TList3"] = model[0].TList3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];

            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            List<SelectListItem> mod4 = new List<SelectListItem>();
            TempData[MyGuid + "_TList4"] = model[0].TList4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];

            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            List<SelectListItem> mod5 = new List<SelectListItem>();
            TempData[MyGuid + "_TList5"] = model[0].TList5 = (List<SelectListItem>)TempData[MyGuid + "_TList5"];

            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            #endregion
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.natwrk(userCode, unitid_mst);

            TempData[MyGuid + "_Tlist2"] = mod2;
            TempData[MyGuid + "_Tlist3"] = mod3;
            TempData[MyGuid + "_Tlist4"] = mod4;
            TempData[MyGuid + "_Tlist5"] = mod5;
            model[0].Col16 = vch_num;
            model[0].Col17 = sgen.server_datetime_local(userCode);
            model[0].Col24 = sgen.server_datetime_local(userCode);
            return model;
        }
        [HttpPost]
        public ActionResult chk_temp(List<Tmodelmain> model, string command, HttpPostedFileBase upd1, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region Dropdwon
            List<SelectListItem> mod1 = new List<SelectListItem>();
            TempData[MyGuid + "_TList1"] = model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            List<SelectListItem> mod2 = new List<SelectListItem>();
            TempData[MyGuid + "_TList2"] = model[0].TList2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];

            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            List<SelectListItem> mod3 = new List<SelectListItem>();
            TempData[MyGuid + "_TList3"] = model[0].TList3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];

            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            List<SelectListItem> mod4 = new List<SelectListItem>();
            TempData[MyGuid + "_TList4"] = model[0].TList4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];

            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            List<SelectListItem> mod5 = new List<SelectListItem>();
            TempData[MyGuid + "_TList5"] = model[0].TList5 = (List<SelectListItem>)TempData[MyGuid + "_TList5"];

            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                model = new_chk_temp(model);
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                try
                {
                    model = StartCallback(model);
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime_local(userCode);
                    currdate = sgen.Savedate(currdate, true);
                    string vch_num = "", calb = "";
                    string cond = "";
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        cond = "";
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dtnew = (DataTable)sgen.GetSession(MyGuid, "perdt");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int k = 0; k < dtnew.Rows.Count; k++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num;
                        dr["col1"] = dtnew.Rows[k]["menu_id"].ToString();
                        dr["col2"] = dtnew.Rows[k]["menu_name"].ToString();
                        dr["col3"] = dtnew.Rows[k]["m_link"].ToString();
                        dr["col4"] = dtnew.Rows[k]["m_id"].ToString();
                        dr["col5"] = dtnew.Rows[k]["m_name"].ToString();
                        dr["col6"] = model[0].Col25;
                        dr["date1"] = sgen.Savedate(model[0].Col24.Trim(), false);
                        dr["vch_date"] = sgen.Savedate(model[0].Col17.Trim(), false);
                        dr["col7"] = model[0].Col26;//customer_id
                        dr["col8"] = model[0].SelectedItems1.FirstOrDefault();//nature of work;
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = newcreate_team(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully')";
                                model = new List<Tmodelmain>();
                                model.Add(new Tmodelmain()
                                {
                                    Col9 = tmodel.Col9,
                                    Col10 = tmodel.Col10,
                                    Col11 = tmodel.Col11,
                                    Col12 = tmodel.Col12,
                                    Col14 = tmodel.Col14,
                                    Col15 = tmodel.Col15,
                                    Col13 = "Save",
                                    Col100 = "Save & New",
                                    TList1 = mod1,
                                    SelectedItems1 = new string[] { "" },
                                });
                            }
                            catch (Exception ex) { }
                        }
                    }
                }
                catch { }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region component order
        public ActionResult comp_order()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vsave = "";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.scripCall = "enableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "SET COMPONENT ORDER";
            tm1.Col10 = "vehicle_master";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KSP";
            tm1.Col13 = "Update";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.TList2 = mod2;
            tm1.SelectedItems2 = new string[] { "" };
            tm1.dt1 = null;
            #region component type
            DataTable dt = sgen.getdata(userCode, "select distinct col10 as comp_type  from vehicle_master where type='KSP' and client_unit_id='" + unitid_mst + "' ");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["comp_type"].ToString(), Value = dr["comp_type"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist1"] = mod1;
            #endregion
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult comp_order(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            model[0].TList2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            TempData[MyGuid + "_TList1"] = model[0].TList1;
            TempData[MyGuid + "_TList2"] = model[0].TList2;
            foreach (var tm2 in model)
            {
                tm2.TList2 = mod2;
            }
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (command == "comptype")
            {
                try
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vget = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select vch_num  head_id, col1 head_name,col41 as position   from vehicle_master where type='KSP' and client_unit_id = '" + unitid_mst + "' and col10 = '" + model[0].SelectedItems1.FirstOrDefault() + "' ";
                    DataTable dt = sgen.getdata(userCode, mq);
                    DataTable dt1 = sgen.getdata(userCode, "SELECT column_value FROM XMLTABLE('1 to " + dt.Rows.Count + "')");
                    mod2 = sgen.dt_to_selectlist(dt1);
                    TempData[MyGuid + "_Tlist2"] = mod2;
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col16 = dt.Rows[i]["head_id"].ToString();
                            tmm.Col17 = dt.Rows[i]["head_name"].ToString();
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            tmm.SelectedItems2 = dt.Rows[i]["position"].ToString().Split(',');
                            tmm.TList2 = mod2;
                            tmm.Col14 = tm.Col14;
                            tmm.Col14 = tm.Col15;
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col18 = tm.Col18;
                            model.Add(tmm);
                        }
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                DataTable dtsample = new DataTable();
                dtsample.Columns.Add("head_id", typeof(string));
                dtsample.Columns.Add("position", typeof(Int32));
                dtsample.Columns.Add("head_type", typeof(string));
                for (int i = 0; i < model.Count; i++)
                {
                    if (model[i].SelectedItems2 == null) model[i].SelectedItems2 = new string[] { "0" };
                    if (model[i].SelectedItems1 == null) model[i].SelectedItems1 = new string[] { "" };
                    if (model[i].Col16 != null)
                    {
                        DataRow dr = dtsample.NewRow();
                        dr["head_id"] = model[i].Col16;
                        dr["position"] = model[i].SelectedItems2.FirstOrDefault();
                        dr["head_type"] = model[0].SelectedItems1.FirstOrDefault();
                        dtsample.Rows.Add(dr);
                    }
                }
                if (dtsample.Rows.Count > 0)
                {
                    DataView dv = dtsample.DefaultView;
                    dv.Sort = "position";
                    dtsample = dv.ToTable();
                }
                var duplicates = dtsample.AsEnumerable()
              .Select(dr => dr.Field<int>("position"))
              .GroupBy(x => x)
              .Where(g => g.Count() > 1)
              .Select(g => g.Key)
              .ToList();
                bool data = false;
                if (duplicates.Count > 0)
                {
                    ViewBag.scripCall = "showmsgJS(1, 'Please Reset Position', 2);";
                    return View(model);
                }
                else
                {
                    for (int i = 0; i < dtsample.Rows.Count; i++)
                    {
                        mq = "update vehicle_master set col41='" + dtsample.Rows[i]["position"].ToString() + "' where vch_num='" + dtsample.Rows[i]["head_id"].ToString() + "'  and type='KSP' and client_unit_id = '" + unitid_mst + "' and col10 = '" + dtsample.Rows[i]["head_type"].ToString() + "' ";
                        data = sgen.execute_cmd(userCode, mq);
                    }
                    if (data == true)
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Record Updated Successfully', 1);";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            TList2 = mod2,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                        });
                    }
                }
            }
            TempData[MyGuid + "_Tlist1"] = model.FirstOrDefault().TList1;
            TempData[MyGuid + "_TList2"] = model.FirstOrDefault().TList2;
            foreach (var tm2 in model)
            {
                tm2.TList2 = mod2;
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        [HttpPost]
        public ContentResult SeekServer(string SeekCode, string SeekVal, string Param1, string Myguid)
        {
            sgen = new sgenFun(Myguid);
            string result = "";
            try
            {
                switch (SeekCode.ToUpper())
                {
                    case "HEADTYPEBULK":
                        DataTable dt = ((DataTable)sgen.GetSession(MyGuid, "KESDTB"));
                        dt.CaseSensitive = false;
                        result = sgen.seekval_dt(dt, "headname='" + SeekVal + "'", "htype");
                        break;
                    default:
                        break;
                }
            }
            catch (Exception ex) { result = "Error"; }
            return Content(result);
        }
        #region Contractor Salary
        public ActionResult cont_salary()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "CONTRACTOR SALARY";
            tm1.Col10 = "kc_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "CES";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            TempData[MyGuid + "_Tlist1"] = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            DataTable dt = sgen.getdata(userCode, "select '-' Item,'1' SNo ,'-' Emp_Code,'-' Emp_Name,'-' F_Name,'-' W_Hours," +
                "'-' RATE_PER_HR,'-' Amount from dual");
            tm1.dt1 = dt;
            sgen.SetSession(MyGuid, "RVA_DT", dt);
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult cont_salary(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            TempData[MyGuid + "_TList1"] = mod1;
            model[0].TList1 = mod1;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                    model[0].Col17 = currdate;
                    model[0].Col19 = currdate;
                    model[0].Col20 = currdate;
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);


                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
                //return RedirectToAction("vendor_app", new { @m_id = EncryptDecrypt.Encrypt(model[0].Col15), @mid = EncryptDecrypt.Encrypt(model[0].Col14) });
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "vendor_app", "Purchase", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vedit = "disabled='disabled'";
                //ViewBag.vsave = "";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    #region month checking
                    int currmonth = sgen.Make_int(model[0].SelectedItems1.FirstOrDefault());
                    int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                    string lastyyyymmm = "";
                    string curryyyymmm = "";
                    if (currmonth <= 12 && currmonth > 4)
                    {
                        lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                    }
                    else if (currmonth == 1)
                    {
                        lastyyyymmm = curryear + sgen.padlc(12, 3);
                        curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                    }
                    else if (currmonth > 1 && currmonth < 4)
                    {
                        lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                    }
                    else if (currmonth == 4)
                    {
                        lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                    }
                    sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
                    #endregion
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select  * from " + model[0].Col10.Trim() + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["rec_id"] = "0";
                    dr["type"] = model[0].Col12;
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = sgen.Make_date_S(model[0].Col17);
                    dr["col10"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["col11"] = model[0].Col21;
                    dr["col12"] = model[0].Col31;
                    dr["col13"] = model[0].Col32;
                    dr["col14"] = model[0].Col33;
                    dr["col15"] = model[0].Col34;
                    dr["col16"] = model[0].Col35;
                    dr["col17"] = model[0].Col36;
                    dr["col18"] = model[0].Col21;
                    dr["col19"] = model[0].Col37;
                    dr["col21"] = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                    dr["col40"] = curryyyymmm;
                    if (isedit)
                    {
                        dr["client_id"] = model[0].Col1.Trim();
                        dr["client_unit_id"] = model[0].Col2.Trim();
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                    }
                    dataTable.Rows.Add(dr);
                    //for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    //{
                    //    DataRow dr = dataTable.NewRow();
                    //    dr["rec_id"] = "0";
                    //    dr["type"] = model[0].Col12;
                    //    dr["vch_num"] = vch_num.Trim();
                    //    dr["vch_date"] = sgen.Savedate(model[0].Col17, true);
                    //    dr["col1"] = model[0].dt1.Rows[i][2].ToString();
                    //    dr["col2"] = model[0].dt1.Rows[i][5].ToString();
                    //    dr["col3"] = model[0].dt1.Rows[i][6].ToString();
                    //    dr["col4"] = model[0].dt1.Rows[i][7].ToString();
                    //    dr["col5"] = model[0].dt1.Rows[i][7].ToString();
                    //    dr["col10"] = model[0].SelectedItems1.FirstOrDefault();
                    //    dr["col11"] = model[0].Col21;
                    //    dr["col12"] = model[0].Col31;
                    //    dr["col13"] = model[0].Col32;
                    //    dr["col14"] = model[0].Col33;
                    //    dr["col15"] = model[0].Col34;
                    //    dr["col16"] = model[0].Col35;
                    //    dr["col17"] = model[0].Col36;
                    //    dr["col18"] = model[0].Col21;
                    //    dr["col21"] = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                    //    dr["col40"] = curryyyymmm;
                    //    if (isedit)
                    //    {
                    //        dr["client_id"] = model[0].Col1.Trim();
                    //        dr["client_unit_id"] = model[0].Col2.Trim();
                    //        dr["ent_by"] = model[0].Col3;
                    //        dr["ent_date"] = model[0].Col4;
                    //        dr["edit_by"] = userid_mst;
                    //        dr["edit_date"] = currdate;
                    //    }
                    //    else
                    //    {
                    //        dr["client_id"] = clientid_mst;
                    //        dr["client_unit_id"] = unitid_mst;
                    //        dr["ent_by"] = userid_mst;
                    //        dr["ent_date"] = currdate;
                    //        dr["edit_by"] = "-";
                    //        dr["edit_date"] = currdate;
                    //    }
                    //    dataTable.Rows.Add(dr);
                    //}
                    res = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        //ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT");
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else
                {
                    model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT");
                }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Bonus Calc
        public ActionResult bonus_calc()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "BONUS CALCULATION";
            tm1.Col10 = "kc_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "BON";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            DataTable dt = sgen.getdata(userCode, "select '-' Item,'1' SNo ,'-' Emp_Code,'-' Emp_Name,'-' F_Name,'-' Bonus_Rate,'-' Presents,'-' Amount from dual");
            tm1.dt1 = dt;
            sgen.SetSession(MyGuid, "RVA_DT", dt);
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult bonus_calc(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                    model[0].Col17 = currdate;
                    model[0].Col18 = currdate;
                    model[0].Col19 = currdate;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel") { return CancelFun(model); }
            else if (command == "Callback") { model = StartCallback(model); }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = sgen.Savedate(model[0].Col17, true);
                        dr["date1"] = sgen.Savedate(model[0].Col18, true);//from date
                        dr["date2"] = sgen.Savedate(model[0].Col19, true);//todate
                        dr["col1"] = model[0].dt1.Rows[i][2].ToString().Substring(3, 6).Trim();//empcode
                        dr["col2"] = model[0].dt1.Rows[i][5].ToString();//bonus rate
                        dr["col3"] = model[0].dt1.Rows[i][6].ToString();//presents
                        dr["col4"] = model[0].dt1.Rows[i][7].ToString();//amount
                        if (isedit)
                        {
                            dr["client_id"] = model[0].Col1.Trim();
                            dr["client_unit_id"] = model[0].Col2.Trim();
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT")
                        });
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region incr_rate
        public ActionResult incr_rate()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "EMPLOYEE INCREMENT RATE";
            tm1.Col10 = "enx_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KES";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            tm1.TList2 = mod1;
            tm1.TList3 = mod1;
            TempData[MyGuid + "_TList1"] = mod1;
            TempData[MyGuid + "_TList2"] = mod1;
            TempData[MyGuid + "_TList3"] = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.dt1 = null;
            tm1.dt2 = null;
            //Session["dtkin1"] = null;
            //Session["dtkin2"] = null;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult incr_rate(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataSet ds = new DataSet();
            ds = sgen.setDS(hftable);
            if (ds.Tables.Count > 1)
            {
                model[0].dt1 = ds.Tables[1];
                model[0].dt2 = ds.Tables[2];
                //if (model[0].dt2.Rows.Count == 0) model[0].dt2 = ((DataTable)Session["dtkin2"]);
                //if (model[0].dt1.Rows.Count == 0) model[0].dt1 = ((DataTable)Session["dtkin1"]);
            }
            var tm = model.FirstOrDefault();
            DataTable dt = new DataTable();
            #region DDL
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].TList3 = mod3;
            TempData[MyGuid + "_TList1"] = model[0].TList1;
            TempData[MyGuid + "_TList2"] = model[0].TList2;
            TempData[MyGuid + "_TList3"] = model[0].TList3;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            #endregion
            if (command == "New")
            // shiv
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vget = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "'" + where + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num;
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    #region grade
                    // shiv
                    dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KGM' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                        }

                    }
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    #endregion
                    #region Dept
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                    #endregion
                    #region Desig
                    TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.desig(userCode, unitid_mst);

                    #endregion



                    model[0].SelectedItems2 = new string[] { "001" };
                    model[0].SelectedItems3 = new string[] { "001" };
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "hfbtnyes")
            {
                String URL = TempData[MyGuid + "_URL"].ToString();
                bool deleted = sgen.execute_cmd(userCode, "delete from enx_tab where client_unit_id||trim(col1)||'-'||trim(ref_code) in ('" + URL + "') and type in ('AES','KES')");
                if (deleted) ViewBag.scripCall += "showmsgJS(1, 'Records Deleted ', 2);";
                else ViewBag.scripCall += "showmsgJS(1, 'Error in Deleting ', 2);";
            }
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "salary_rate", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vget = "";
                //ViewBag.vsave = "";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string empcode = "", emp_vchnum = "", emp_name = "", oldcode = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    isedit = false;
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num;
                    type = model[0].Col12.Trim();
                    string effdt = sgen.Savedate(model[0].Col19, false);
                    int colstart = 8;
                    string conds = "";
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    isedit = false;
                    foreach (DataRow gr in model[0].dt1.Rows)
                    {
                        empcode = gr[2].ToString().Trim();
                        oldcode = gr[3].ToString().Trim();
                        emp_vchnum = empcode.Substring(3, 6);
                        emp_name = gr[5].ToString().Trim();
                        for (int k = colstart; k < model[0].dt1.Columns.Count - 1; k++)
                        {
                            var htype = sgen.seekval(userCode, "select col10 from vehicle_master where vch_num='" + model[0].dt1.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim() + "' " +
                                    " and type='KSP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "col10");
                            type = model[0].Col12.Trim();
                            if (model[0].dt1.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim() == "777777")
                            {
                                type = "AES";
                            }
                            DataRow dr = dataTable.NewRow();
                            dr["vch_num"] = vch_num.Trim();
                            dr["vch_date"] = currdate;
                            dr["type"] = type.Trim();
                            dr["type_desc"] = "Employee_salary";
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["rec_id"] = "0";
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                            dr["date1"] = currdate;
                            dr["date2"] = effdt;
                            string verno = gr["Verno"].ToString();
                            dr["ref_code"] = verno;
                            dr["col1"] = emp_vchnum;
                            dr["col2"] = gr["Total (000000)"].ToString();
                            dr["col3"] = model[0].dt1.Columns[k].ToString().Trim().Split('(')[0].Trim();
                            dr["col4"] = model[0].dt1.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
                            dr["col5"] = oldcode;
                            dr["col8"] = htype;
                            dr["col9"] = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text;
                            dr["col10"] = gr[k].ToString().Trim();
                            dr["col12"] = "001";
                            dr["col13"] = "Abs";
                            dataTable.Rows.Add(dr);
                        }
                    }
                    res = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), cond, isedit);
                    if (res)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = "Save",
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            dt1 = null,
                            dt2 = null
                        });
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                    }
                    else { ViewBag.scripCall += "showmsgJS(1,'Records Could not Saved', 0);"; }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Get Data")
            {
                try
                {
                    sgen.SetSession(MyGuid, "btnval", "GDATA");
                    string dept = string.Join(",", model[0].SelectedItems2).Replace(",", "','");
                    string desig = string.Join(",", model[0].SelectedItems3).Replace(",", "','");
                    //mq = "SELECT (emp.client_id||emp.client_unit_id||emp.vch_num||(case when nvl(en.rec_id,'0')='0' then 0 else 1 end)) Sno,nvl(en.rec_id,'0') rec_id," +
                    //    "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code EmpCode, emp.old_empcode Old_EmpCode,(emp.FIRST_NAME || " +
                    //    "' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' '|| REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department,dg.master_name Designation," +
                    //    "(vm.col1 || ' (' || vm.vch_num || ')') headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype FROM emp_master emp " +
                    //    "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                    //    "left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                    //    "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id, col1, max(ref_code) as vers from enx_tab where type = 'KES' " +
                    //    "group by client_id, client_unit_id, col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) en " +
                    //    "on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                    //    "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                    //    "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.ex_dt,'yyyy')= '1900' and " +
                    //    "emp_dept in ('" + dept + "') and emp_desig in ('" + desig + "') order by emp.emp_code,vm.vch_num asc";
                    mq = "select * from " +
                        "(SELECT(emp.client_id || emp.client_unit_id || emp.vch_num || (case when nvl(en.rec_id, '0') = '0' then 0 else 1 end)) Sno,nvl(en.rec_id, '0') rec_id," +
                        "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code EmpCode, emp.old_empcode Old_EmpCode," +
                        "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department," +
                        "dg.master_name Designation, vm.vch_num headid,(vm.col1 || ' (' || vm.vch_num || ')') headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype,to_number(nvl(vm.col41,0)) as ordd FROM " +
                        "emp_master emp " +
                        "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                        "left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                        "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id,col1,max(ref_code) vers from enx_tab where type = 'KES' " +
                        "group by client_id,client_unit_id,col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) en " +
                        "on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                        "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                        "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.fnf_dt,'yyyy')='1900' and to_char(emp.ex_dt,'yyyy')= '1900' and " +
                        "emp_dept in ('" + dept + "') and emp_desig in ('" + desig + "') " +
                        "union all " +
                        "SELECT (emp.client_id || emp.client_unit_id || emp.vch_num || (case when nvl(en.rec_id, '0') = '0' then 0 else 1 end)) Sno,nvl(en.rec_id, '0') rec_id," +
                        "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code EmpCode, emp.old_empcode Old_EmpCode," +
                        "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department," +
                        "dg.master_name Designation,vm.vch_num headid,(vm.col1 || ' (' || vm.vch_num || ')') headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype,to_number(nvl(vm.col41,0)) as ordd FROM " +
                        "emp_master emp " +
                        "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                        "left outer join vehicle_master vm on 1 = 1 and vm.type = 'ASP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                        "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id, col1, max(ref_code) as vers from enx_tab where type = 'AES' " +
                        "group by client_id, client_unit_id, col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) " +
                        "en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'AES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                        "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                        "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.fnf_dt,'yyyy')='1900' and to_char(emp.ex_dt,'yyyy')= '1900' and " +
                        "emp_dept in ('" + dept + "') and emp_desig in ('" + desig + "')) tab  where headid is not null order by empcode,ordd, headid asc";
                    DataTable dtl = new DataTable();
                    dtl = sgen.getdata(userCode, mq);
                    sgen.SetSession(MyGuid, "KESDTB", dtl);
                    DataView dv = dtl.DefaultView;
                    DataTable dtemp = dv.ToTable(true, "empcode");
                    for (int a = 0; a < dtemp.Rows.Count; a++)
                    {
                        var sno = dtl.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(sno)", string.Empty);
                        var verno = dtl.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(verno)", string.Empty);
                        dtl.Select(string.Format("[empcode] = '{0}'", dtemp.Rows[a]["empcode"].ToString())).ToList<DataRow>()
                         .ForEach(r =>
                         {
                             r["sno"] = sno;
                             r["verno"] = verno;
                         });
                    }
                    dtl.AcceptChanges();
                    if (dtl.Rows.Count > 0)
                    {
                        Pivot pv = new Pivot(dtl, MyGuid);
                        dtl = pv.PivotData("amount", AggregateFunction.Sum, new string[] { "Sno", "Verno", "EmpCode", "Old_EmpCode", "External_EmpCode", "Employee_Name", "Department", "Designation" }, new string[] { "headname" });
                        dtl.AcceptChanges();
                        sgen.SetSession(MyGuid, "KINDT", dtl);
                        mq1 = sgen.open_grid_dt("Employee Salary Rate", dtl, 2);
                        if (mq1 == "ok")
                        {
                            ViewBag.scripCall += "showwait();";
                            ViewBag.scripCall += "callFoo('Employee Salary Rate');";
                            ViewBag.vsave = "";
                        }
                        else
                        {
                            ViewBag.scripCall += "showmsgJS(1,'No Data Found',2);";
                            ViewBag.vsave = "disabled='disabled'";
                        }
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vget = "";
                        return View(model);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        public ActionResult incr_edit()
        {
            FillMst("");
            // shiv
            //if (userCode.Equals("")) { return Redirect(sgenFun.callbackurl); }
            //if (Request.UrlReferrer == null) { return Redirect(sgenFun.callbackurl); }
            ViewBag.vnew = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "EDIT EMPLOYEE SALARY RATE";
            tm1.Col10 = "enx_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KES";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            tm1.TList2 = mod1;
            tm1.TList3 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.dt1 = null;
            tm1.dt2 = null;
            //Session["dtkin1"] = null;
            //Session["dtkin2"] = null;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult incr_edit(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataSet ds = new DataSet();
            ds = sgen.setDS(hftable);
            if (ds.Tables.Count > 1)
            {
                model[0].dt1 = ds.Tables[1];
                model[0].dt2 = ds.Tables[2];
                //if (model[0].dt2.Rows.Count == 0) model[0].dt2 = ((DataTable)Session["dtkin2"]);
                //if (model[0].dt1.Rows.Count == 0) model[0].dt1 = ((DataTable)Session["dtkin1"]);
            }
            var tm = model.FirstOrDefault();
            DataTable dt = new DataTable();
            #region DDL
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].TList3 = mod3;
            TempData[MyGuid + "_TList1"] = model[0].TList1;
            TempData[MyGuid + "_TList2"] = model[0].TList2;
            TempData[MyGuid + "_TList3"] = model[0].TList3;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            #endregion
            if (command == "New")
            // shiv
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vget = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + tab_name + " where type='" + type + "'" + where + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num;
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    #region grade
                    // shiv
                    dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='KGM' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                        }

                    }
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    #endregion
                    #region Dept
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                    #endregion
                    #region Desig
                    TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.desig(userCode, unitid_mst);

                    #endregion



                    model[0].SelectedItems2 = new string[] { "001" };
                    model[0].SelectedItems3 = new string[] { "001" };
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
                //if (Session["btnval"] != null) btnval = Session["btnval"].ToString();
                //model = CallbackFun(btnval, "N", "salary_rate", "Hr", model);
                //ViewBag.vnew = "disabled='disabled'";
                //ViewBag.vget = "";
                //ViewBag.vsave = "";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string empcode = "", emp_vchnum = "", emp_name = "", oldcode = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    isedit = false;
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col18 = vch_num;
                    type = model[0].Col12.Trim();
                    string effdt = sgen.Savedate(model[0].Col19, false);
                    int colstart = 8;
                    string conds = "";
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    isedit = false;
                    foreach (DataRow gr in model[0].dt1.Rows)
                    {
                        empcode = gr[2].ToString().Trim();
                        oldcode = gr[3].ToString().Trim();
                        emp_vchnum = empcode.Substring(3, 6);
                        emp_name = gr[5].ToString().Trim();
                        string verno = gr["Verno"].ToString();
                        {
                            var dtver = sgen.getdata(userCode, "select date2,ref_code from enx_tab where client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' " +
                                "and col1='" + emp_vchnum + "' and ref_code='" + (sgen.Make_int(gr["Verno"].ToString()) - 1) + "'");
                            if (dtver.Rows.Count > 0)
                            {
                                effdt = ((DateTime)dtver.Rows[0]["date2"]).ToString(sgen.GetSaveDateFormat());
                                verno = dtver.Rows[0]["ref_code"].ToString();
                            }
                            conds += emp_vchnum + "-" + verno + ",";
                            isedit = true;
                        }
                        for (int k = colstart; k < model[0].dt1.Columns.Count - 1; k++)
                        {
                            var htype = sgen.seekval(userCode, "select col10 from vehicle_master where vch_num='" + model[0].dt1.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim() + "' " +
                                    " and type='KSP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "col10");
                            type = model[0].Col12.Trim();
                            if (model[0].dt1.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim() == "777777")
                            {
                                type = "AES";
                            }
                            DataRow dr = dataTable.NewRow();
                            dr["vch_num"] = vch_num.Trim();
                            dr["vch_date"] = currdate;
                            dr["type"] = type.Trim();
                            dr["type_desc"] = "Employee_salary";
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["rec_id"] = "0";
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                            dr["date1"] = currdate;
                            dr["date2"] = effdt;
                            dr["ref_code"] = verno;
                            //if (model[0].Chk3)
                            dr["col1"] = emp_vchnum;
                            dr["col2"] = gr["Total (000000)"].ToString();
                            dr["col3"] = model[0].dt1.Columns[k].ToString().Trim().Split('(')[0].Trim();
                            dr["col4"] = model[0].dt1.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
                            dr["col5"] = oldcode;
                            dr["col8"] = htype;
                            dr["col9"] = model[0].TList1.Where(w => w.Value == model[0].SelectedItems1.FirstOrDefault()).FirstOrDefault().Text;
                            dr["col10"] = gr[k].ToString().Trim();
                            dr["col12"] = "001";
                            dr["col13"] = "Abs";
                            dataTable.Rows.Add(dr);
                        }
                    }
                    if (conds.Length > 3) conds = conds.Substring(0, conds.Length - 1);
                    string[] vals = conds.Split(',').Distinct().ToArray();
                    cond = "type='KES' and  trim(col1)||'-'||trim(ref_code) in ('" + string.Join("','", vals) + "')";
                    //res = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), "(client_id||client_unit_id||col1)='" + gr[0].ToString().Substring(0, 15).Trim() + "'", isedit);
                    res = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), cond, isedit);
                    if (res)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = "Save",
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            dt1 = null,
                            dt2 = null
                        });
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                    }
                    else { ViewBag.scripCall += "showmsgJS(1,'Records Could not Saved', 0);"; }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Get Data")
            {
                try
                {
                    string dept = string.Join(",", model[0].SelectedItems2).Replace(",", "','");
                    string desig = string.Join(",", model[0].SelectedItems3).Replace(",", "','");
                    //mq = "SELECT (emp.client_id||emp.client_unit_id||emp.vch_num||(case when nvl(en.rec_id,'0')='0' then 0 else 1 end)) Sno,nvl(en.rec_id,'0') rec_id," +
                    //    "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code EmpCode, emp.old_empcode Old_EmpCode,(emp.FIRST_NAME || " +
                    //    "' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' '|| REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department,dg.master_name Designation," +
                    //    "(vm.col1 || ' (' || vm.vch_num || ')') headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype FROM emp_master emp " +
                    //    "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                    //    "left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                    //    "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id, col1, max(ref_code) as vers from enx_tab where type = 'KES' " +
                    //    "group by client_id, client_unit_id, col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) en " +
                    //    "on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                    //    "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                    //    "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status = 'Y' and to_char(emp.ex_dt,'yyyy')= '1900' and " +
                    //    "emp_dept in ('" + dept + "') and emp_desig in ('" + desig + "') order by emp.emp_code,vm.vch_num asc";
                    mq = "select * from " +
                        "(SELECT(emp.client_id || emp.client_unit_id || emp.vch_num || (case when nvl(en.rec_id, '0') = '0' then 0 else 1 end)) Sno,nvl(en.rec_id, '0') rec_id," +
                        "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code EmpCode, emp.old_empcode Old_EmpCode," +
                        "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department," +
                        "dg.master_name Designation, vm.vch_num headid,(vm.col1 || ' (' || vm.vch_num || ')') headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype,to_number(nvl(vm.col41,0)) as ordd FROM " +
                        "emp_master emp " +
                        "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                        "left outer join vehicle_master vm on 1 = 1 and vm.type = 'KSP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                        "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id,col1,max(ref_code) vers from enx_tab where type = 'KES' " +
                        "group by client_id,client_unit_id,col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) en " +
                        "on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'KES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                        "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                        "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status != 'R' and to_char(emp.fnf_dt,'yyyy')='1900' and " +
                        "emp_dept in ('" + dept + "') and emp_desig in ('" + desig + "') " +
                        "union all " +
                        "SELECT (emp.client_id || emp.client_unit_id || emp.vch_num || (case when nvl(en.rec_id, '0') = '0' then 0 else 1 end)) Sno,nvl(en.rec_id, '0') rec_id," +
                        "to_number(nvl(en.ref_code, '0')) + 1 verno,emp.external_empno as External_EmpCode,emp.emp_code EmpCode, emp.old_empcode Old_EmpCode," +
                        "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,dp.master_name Department," +
                        "dg.master_name Designation,vm.vch_num headid,(vm.col1 || ' (' || vm.vch_num || ')') headname,nvl(en.col10, '0') amount,UPPER(vm.col10) as htype,to_number(nvl(vm.col41,0)) as ordd FROM " +
                        "emp_master emp " +
                        "inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, emp.client_id)= 1 and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, emp.client_id)= 1 and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                        "left outer join vehicle_master vm on 1 = 1 and vm.type = 'ASP' and vm.client_id = '" + clientid_mst + "' and vm.client_unit_id = '" + unitid_mst + "' and vm.cur_state <> '4'  and vm.cur_state <> '0' " +
                        "left outer join (select a.* from enx_tab a inner join (select client_id, client_unit_id, col1, max(ref_code) as vers from enx_tab where type = 'AES' " +
                        "group by client_id, client_unit_id, col1) b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id and a.col1 = b.col1 and a.ref_code = b.vers) " +
                        "en on en.col1 = emp.vch_num and en.col4 = vm.vch_num and en.type = 'AES' and en.client_id = '" + clientid_mst + "' and en.client_unit_id = '" + unitid_mst + "' and en.col9 <> '4' " +
                        "left outer join enx_tab gr on gr.col1 = emp.emp_dept and gr.col2 = '" + model[0].SelectedItems1.FirstOrDefault() + "' and gr.col3 = emp.emp_desig and gr.type = 'KSG' and gr.client_id = '" + clientid_mst + "' and gr.client_unit_id = '" + unitid_mst + "' " +
                        "WHERE emp.type = 'EMP' and emp.client_id = '" + clientid_mst + "' and emp.client_unit_id = '" + unitid_mst + "' and emp.emp_status != 'R' and to_char(emp.fnf_dt,'yyyy')='1900' and " +
                        "emp_dept in ('" + dept + "') and emp_desig in ('" + desig + "')) tab  where headid is not null order by empcode,ordd, headid asc";
                    DataTable dtl = new DataTable();
                    dtl = sgen.getdata(userCode, mq);
                    sgen.SetSession(MyGuid, "KESDTB", dtl);
                    DataView dv = dtl.DefaultView;
                    DataTable dtemp = dv.ToTable(true, "empcode");
                    for (int a = 0; a < dtemp.Rows.Count; a++)
                    {
                        var sno = dtl.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(sno)", string.Empty);
                        var verno = dtl.Select("empcode='" + dtemp.Rows[a]["empcode"].ToString() + "'").CopyToDataTable().Compute("MAX(verno)", string.Empty);
                        dtl.Select(string.Format("[empcode] = '{0}'", dtemp.Rows[a]["empcode"].ToString())).ToList<DataRow>()
                         .ForEach(r =>
                         {
                             r["sno"] = sno;
                             r["verno"] = verno;
                         });
                    }
                    dtl.AcceptChanges();
                    if (dtl.Rows.Count > 0)
                    {
                        Pivot pv = new Pivot(dtl, MyGuid);
                        dtl = pv.PivotData("amount", AggregateFunction.Sum, new string[] { "Sno", "Verno", "EmpCode", "Old_EmpCode", "External_EmpCode", "Employee_Name", "Department", "Designation" }, new string[] { "headname" });
                        dtl.AcceptChanges();
                        sgen.SetSession(MyGuid, "KINDT", dtl);
                        mq1 = sgen.open_grid_dt("Employee Salary Rate", dtl, 2);
                        if (mq1 == "ok")
                        {
                            ViewBag.scripCall += "showwait();";
                            ViewBag.scripCall += "callFoo('Employee Salary Rate');";
                            ViewBag.vsave = "";
                        }
                        else
                        {
                            ViewBag.scripCall += "showmsgJS(1,'No Data Found',2);";
                            ViewBag.vsave = "disabled='disabled'";
                        }
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vget = "";
                        return View(model);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region full_final
        public ActionResult full_final_bulk()
        {
            FillMst("");
            // shiv
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "BULK EMPLOYEE FULL & FINAL";
            tm1.Col10 = "enx_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "EFB";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.dt1 = null;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult full_final_bulk(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataSet ds = new DataSet();
            ds = sgen.setDS(hftable);
            if (ds.Tables.Count > 0)
            {
                model[0].dt1 = ds.Tables[0];
            }
            var tm = model.FirstOrDefault();
            DataTable dt = new DataTable();
            if (command == "New")
            // shiv
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vget = "";
                    ViewBag.scripCall = "enableForm();";
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "hfbtnyes")
            {
                String URL = TempData[MyGuid + "_URL"].ToString();
                bool deleted = sgen.execute_cmd(userCode, "delete from enx_tab where client_unit_id||trim(col1)||'-'||trim(ref_code)||type in ('" + URL + "')");
                if (deleted) ViewBag.scripCall += "showmsgJS(1, 'Records Deleted ', 2);";
                else ViewBag.scripCall += "showmsgJS(1, 'Error in Deleting ', 2);";
            }
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string empcode = "", emp_vchnum = "", emp_name = "", oldcode = "";
                    var tmodel = model.FirstOrDefault();
                    Satransaction sat = new Satransaction(userCode, MyGuid);
                    foreach (DataRow gr in model[0].dt1.Rows)
                    {
                        empcode = gr[1].ToString().Trim();
                        string fnf_dt = gr[6].ToString().Trim();
                        emp_vchnum = empcode.Substring(3, 6);
                        res = sat.Execute_cmd("update emp_master set fnf_dt=to_date('" + fnf_dt + "','" + sgen.Getsqldateformat() + "') where vch_num='" + emp_vchnum + "'");
                        if (!res) break;
                    }
                    if (res)
                    {
                        sat.Commit();
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = "Save",
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            dt1 = null,
                        });
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "showmsgJS(1, 'Record Saved Successfully', 1);disableForm();";
                    }
                    else { sat.Rollback(); ViewBag.scripCall += "showmsgJS(1,'Records Could not Saved', 0);"; }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Get Data")
            {
                try
                {
                    sgen.SetSession(MyGuid, "btnval", "GDATA");
                    mq = "SELECT(emp.client_id || emp.client_unit_id || emp.vch_num) fstr," +
                        "emp.emp_code EmpCode, emp.old_empcode Old_EmpCode,emp.external_empno as External_EmpCode," +
                        "(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) Employee_Name,to_char(emp.ex_dt,'" + sgen.Getsqldateformat() + "') as Leave_Dt " +
                        " ,'" + model[0].Col19 + "' Final_date FROM emp_master emp  where to_char(emp.fnf_dt,'yyyy')='1900' and emp.emp_status='N'" +
                        " and emp.client_id='" + clientid_mst + "' and emp.client_unit_id='" + unitid_mst + "'";
                    DataTable dtl = new DataTable();
                    dtl = sgen.getdata(userCode, mq);
                    if (dtl.Rows.Count > 0)
                    {
                        sgen.SetSession(MyGuid, "KINDT", dtl);
                        mq1 = sgen.open_grid_dt("Employee Full & Final", dtl, 2);
                        if (mq1 == "ok")
                        {
                            ViewBag.scripCall += "showwait();";
                            ViewBag.scripCall += "callFoo('Employee Full & Final');";
                            ViewBag.vsave = "";
                        }
                        else
                        {
                            ViewBag.scripCall += "showmsgJS(1,'No Data Found',2);";
                            ViewBag.vsave = "disabled='disabled'";
                        }
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vget = "";
                        ModelState.Clear();
                        return View(model);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Salary Grade
        public ActionResult salary_grade()
        {
            FillMst("");
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            type_desc = "salary grade";
            model[0].Col9 = "SALARY GRADE";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "KSG";
            model[0].Col13 = "Save";
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult salary_grade(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            string dept = "", desig = "";
            var tm = model.FirstOrDefault();
            #region ddls
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;



            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    #region DDLS
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.grade(userCode, unitid_mst);


                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);


                    TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.desig(userCode, unitid_mst);


                    #endregion
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string Vdept = "", Vdesig = "";
                    dept = "";
                    desig = "";
                    string[] Adept = null; string[] Adesig = null;
                    if (model[0].SelectedItems1.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please select grade', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    if (model[0].SelectedItems2.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please select Department', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    if (model[0].SelectedItems3.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please select Designation', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                        mq1 = " and vch_num<>'" + model[0].Col16.Trim() + "'";
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    cond = sgen.seekval(userCode, "select col2 from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "'  and " +
        "col2='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "' and client_unit_id='" + unitid_mst + "'" + mq1 + "", "col2");
                    if (!cond.Equals("0"))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Name Already Exists', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    Adept = string.Join(",", model[0].SelectedItems2).Split(',');
                    Adesig = string.Join(",", model[0].SelectedItems3).Split(',');
                    DataTable dtstr = new DataTable();
                    dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    for (Int32 i = 0; i < Adept.Length; i++)
                    {
                        Vdept = Adept[i];
                        for (int j = 0; j < Adesig.Length; j++)
                        {
                            Vdesig = Adesig[j];
                            DataRow dr = dtstr.NewRow();
                            dr["vch_num"] = vch_num.Trim();
                            dr["vch_date"] = currdate;
                            dr["type"] = model[0].Col12.Trim();
                            dr["type_desc"] = type_desc.Trim();
                            dr["col1"] = Vdept.Trim(); ;
                            dr["col2"] = model[0].SelectedItems1.FirstOrDefault().Trim();
                            dr["col3"] = Vdesig.Trim();
                            if (isedit)
                            {
                                dr["ent_by"] = model[0].Col3;
                                dr["ent_date"] = model[0].Col4;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                            }
                            else
                            {
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                            }
                            dr["rec_id"] = "0";
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                            dtstr.Rows.Add(dr);
                        }
                    }
                    res = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col12 = tm.Col12,
                            Col18 = "",
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" }
                        });
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Leave Year
        public ActionResult leave_year()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "LEAVE YEAR";
            model[0].Col10 = "add_academic_year";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' ";
            model[0].Col12 = "LYR";
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult leave_year(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11 + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    mq1 = "select max(to_number(academic_year_id)) as auto_genid from " + model[0].Col10.Trim() + " where type='" + model[0].Col12.Trim() + "' " + model[0].Col11 + "";
                    string lyr_id = sgen.genNo(userCode, mq1, 3, "auto_genid");
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                string lyr_id = "";
                try
                {
                    if (model[0].Col17.Equals(""))
                    {
                        sgen.showmsg(1, "Please Fill From Year", 2);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    if (model[0].Col18.Equals(""))
                    {
                        sgen.showmsg(1, "Please Fill To Year", 2);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    DataTable dtstr = new DataTable();
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col16 + "'";
                        isedit = true;
                        vch_num = model[0].Col16.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        mq1 = "select max(to_number(academic_year_id)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        lyr_id = sgen.genNo(userCode, mq1, 3, "auto_genid");
                        isedit = false;
                    }
                    //cond = sgen.seekval(userCode, "select col2 from " + tab_name + " where type='" + type + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'" + mq1 + "", "col2");
                    //if (!cond.Equals("0"))
                    //{
                    //    //Means Already Exits....               
                    //    sgen.showmsg(1, "Name Already Exists", 2);
                    //    return;
                    //}
                    string currdate = sgen.server_datetime(userCode);
                    string ent_dt = currdate;
                    var lyrfrom = DateTime.ParseExact(model[0].Col17, sgen.Getdateformat(), CultureInfo.InvariantCulture).Year;
                    var lyrto = DateTime.ParseExact(model[0].Col18, sgen.Getdateformat(), CultureInfo.InvariantCulture).Year;
                    string lyear = (lyrfrom + " " + lyrto).ToString();
                    var lmonthfrom = DateTime.ParseExact(model[0].Col17, sgen.Getdateformat(), CultureInfo.InvariantCulture).Month;
                    var lmonthto = DateTime.ParseExact(model[0].Col18, sgen.Getdateformat(), CultureInfo.InvariantCulture).Month;
                    string lmonthfromn = monthName.GetMonthName(lmonthfrom).ToString();
                    var lmonthton = monthName.GetMonthName(lmonthto).ToString();
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = ent_dt;
                    dr["type"] = model[0].Col12;
                    //dr["type_desc"] = type_desc.Trim();
                    dr["academic_year_id"] = lyr_id.Trim();
                    dr["academic_year"] = lyear.Trim();
                    dr["From_Month"] = lmonthfromn.Trim();
                    dr["To_Month"] = lmonthton;
                    dr["FMonthId"] = lmonthfrom;
                    dr["TMonthId"] = lmonthto;
                    dr["From_Date"] = sgen.Savedate(model[0].Col17.Trim(), false);
                    dr["To_date"] = sgen.SaveDate_dt(model[0].Col18.Trim(), false);
                    // dr = getsave(currdate, dr, model);
                    dr["rec_id"] = "0";
                    if (isedit)
                    {
                        //drn["rec_id"] = model[0].Col7;
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                        dr["academic_year_id"] = model[0].Col19;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = ent_dt;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dtstr.Rows.Add(dr);
                    #endregion
                    bool ok = sgen.Update_data(userCode, dtstr, model[0].Col10, model[0].Col8, isedit);
                    if (ok)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        //if (isedit) sgen.showmsg(1, "Detail Updated", 1);
                        if (isedit) ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Updated');disableForm();";
                        //else sgen.showmsg(1, "Detail Added", 1); model[0].Col13 = "Save";
                        else ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Added');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                        });
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Open Position
        public ActionResult open_p()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "OPEN POSITION";
            tm1.Col10 = "kc_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "OPN";
            tm1.Col13 = "Save";
            tm1.Col121 = "S";
            tm1.Col122 = "<u>S</u>ave";
            tm1.Col24 = sgen.server_datetime_local(userCode);
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            TempData[MyGuid + "_Tlist1"] = tm1.TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = tm1.TList2 = mod1;
            TempData[MyGuid + "_Tlist3"] = tm1.TList3 = mod1;
            TempData[MyGuid + "_Tlist4"] = tm1.TList4 = mod1;
            TempData[MyGuid + "_Tlist5"] = tm1.TList5 = mod1;
            TempData[MyGuid + "_Tlist6"] = tm1.TList6 = mod1;
            TempData[MyGuid + "_Tlist7"] = tm1.TList7 = mod1;
            TempData[MyGuid + "_Tlist8"] = tm1.TList8 = mod1;
            TempData[MyGuid + "_Tlist9"] = tm1.TList9 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            tm1.SelectedItems3 = new string[] { "" };
            tm1.SelectedItems4 = new string[] { "" };
            tm1.SelectedItems5 = new string[] { "" };
            tm1.SelectedItems6 = new string[] { "" };
            tm1.SelectedItems7 = new string[] { "" };
            tm1.SelectedItems8 = new string[] { "" };
            tm1.SelectedItems9 = new string[] { "" };
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult open_p(List<Tmodelmain> model, string command, HttpPostedFileBase upd1)
        {
            FillMst(model[0].Col15);
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_TList5"];
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_TList6"];
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_TList7"];
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_TList8"];
            List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_TList9"];
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5;
            TempData[MyGuid + "_TList6"] = model[0].TList6 = mod6;
            TempData[MyGuid + "_TList7"] = model[0].TList7 = mod7;
            TempData[MyGuid + "_TList8"] = model[0].TList8 = mod8;
            TempData[MyGuid + "_TList9"] = model[0].TList9 = mod9;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            if (model[0].SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    string defval = "";
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    #region designation 1
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.desig(userCode, unitid_mst);
                    #endregion
                    #region Sub category 2
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.desig(userCode, unitid_mst);
                    #endregion
                    #region Department 3
                    TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                    #endregion
                    #region Grade 5
                    TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5 = cmd_Fun.grade(userCode, unitid_mst);
                    #endregion
                    #region level 6
                    TempData[MyGuid + "_TList6"] = model[0].TList6 = mod6 = cmd_Fun.grade(userCode, unitid_mst);
                    #endregion
                    #region qualification 7
                    TempData[MyGuid + "_TList7"] = model[0].TList7 = mod7 = cmd_Fun.qualification(userCode, unitid_mst, out defval);
                    #endregion
                    #region Employement Type 8
                    TempData[MyGuid + "_TList8"] = model[0].TList8 = mod8 = cmd_Fun.emptype(userCode, unitid_mst);
                    #endregion
                    #region Position Type 9
                    TempData[MyGuid + "_TList9"] = model[0].TList9 = mod9 = cmd_Fun.grade(userCode, unitid_mst);
                    #endregion
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "dept")
            {
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
                ViewBag.scripCall = "enableForm();";
                TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4 = cmd_Fun.subdept(userCode, unitid_mst, model[0].SelectedItems3.FirstOrDefault());
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["rec_id"] = "0";
                    dr["type"] = model[0].Col12;
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = currdate;
                    dr["col1"] = model[0].Col17;//postion code
                    dr["col21"] = model[0].Col18; //title
                    dr["col2"] = model[0].SelectedItems1.FirstOrDefault();//designation
                    dr["col3"] = model[0].SelectedItems2.FirstOrDefault();//sub category
                    dr["col4"] = model[0].SelectedItems3.FirstOrDefault();//department
                    dr["col5"] = model[0].SelectedItems4.FirstOrDefault();//Sub department
                    dr["col6"] = model[0].SelectedItems5.FirstOrDefault();//Grade
                    dr["col7"] = model[0].SelectedItems6.FirstOrDefault();//level
                    dr["col8"] = model[0].SelectedItems7.FirstOrDefault();//qualification
                    dr["col9"] = model[0].Col20;//Min Experience (Year)
                    dr["col10"] = model[0].Col19;//Max Experience (Year)
                    dr["col11"] = model[0].Col22;//Min Annual Salary
                    dr["col12"] = model[0].Col21;//Max Annual Salary
                    dr["col13"] = model[0].SelectedItems8.FirstOrDefault();//Employement Type
                    dr["col14"] = model[0].SelectedItems9.FirstOrDefault();//Position Type                         
                    dr["col15"] = model[0].Col23; //No.Of Position
                    dr["date1"] = sgen.Make_date_S(model[0].Col24);//Opening Date
                    dr["date2"] = sgen.Make_date_S(model[0].Col25);//Expected Closing Date
                    dr["col16"] = model[0].Col26;//Reporting Manager
                    if (isedit)
                    {
                        dr["client_id"] = model[0].Col1.Trim();
                        dr["client_unit_id"] = model[0].Col2.Trim();
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                    }
                    dataTable.Rows.Add(dr);
                    res = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), tm.Col8, isedit);
                    #region attachment
                    DataTable dtfile = cmd_Fun.GetStructure(userCode, "file_tab");
                    string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                    //purchase Upload
                    try
                    {
                        HttpPostedFileBase file1 = upd1;
                        ctype1 = file1.ContentType;
                        fileName1 = file1.FileName;
                        path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
                        encpath1 = sgen.Convert_Stringto64(path1).ToString();
                        finalpath1 = serverpath + encpath1;
                        file1.SaveAs(finalpath1);
                        filesave(model, currdate, dtfile, fileName1, encpath1, "OPN", ctype1, model[0].Col28, model[0].Col27, "", "");
                        res = sgen.Update_data_fast1(userCode, dtfile, "file_tab", "", false);
                    }
                    catch (Exception ex) { }
                    #endregion
                    if (res == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col9 = tm.Col9,
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            TList4 = mod4,
                            TList5 = mod5,
                            TList6 = mod6,
                            TList7 = mod7,
                            TList8 = mod8,
                            TList9 = mod9,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },
                            SelectedItems6 = new string[] { "" },
                            SelectedItems7 = new string[] { "" },
                            SelectedItems8 = new string[] { "" },
                            SelectedItems9 = new string[] { "" },
                        });
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Interview
        public ActionResult intr()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "SALARY GRADE";
            tm1.Col10 = "enx_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KSG";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            TempData[MyGuid + "_Tlist1"] = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult intr(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            TempData[MyGuid + "_TList1"] = mod1;
            model[0].TList1 = mod1;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                    model[0].Col17 = currdate;
                    model[0].Col19 = currdate;
                    model[0].Col20 = currdate;
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);

                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = sgen.Savedate(model[0].Col17, true);
                        dr["col1"] = model[0].dt1.Rows[i][2].ToString();
                        dr["col2"] = model[0].dt1.Rows[i][5].ToString();
                        dr["col3"] = model[0].dt1.Rows[i][6].ToString();
                        dr["col4"] = model[0].dt1.Rows[i][7].ToString();
                        dr["col5"] = model[0].dt1.Rows[i][7].ToString();
                        dr["col10"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["col11"] = model[0].Col21;
                        dr["col12"] = model[0].Col31;
                        dr["col13"] = model[0].Col32;
                        dr["col14"] = model[0].Col33;
                        dr["col15"] = model[0].Col34;
                        dr["col16"] = model[0].Col35;
                        dr["col17"] = model[0].Col36;
                        dr["col18"] = model[0].Col21;
                        dr["col21"] = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                        if (isedit)
                        {
                            dr["client_id"] = model[0].Col1.Trim();
                            dr["client_unit_id"] = model[0].Col2.Trim();
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT");
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion

        #region stat rpt
        //[DonutOutputCache(Duration = sgenFun.duration)]
        public ActionResult stat_rpt()
        {
            FillMst("");
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            if (mid_mst.Trim().Equals("9011.1")) { tm1.Col9 = "PF REPORT"; }
            if (mid_mst.Trim().Equals("9011.2")) { tm1.Col9 = "ESI REPORT"; }
            if (mid_mst.Trim().Equals("9011.3")) { tm1.Col9 = "PT REPORT"; }
            if (mid_mst.Trim().Equals("9011.4")) { tm1.Col9 = "IT REPORT"; }
            if (mid_mst.Trim().Equals("9011.5")) { tm1.Col9 = "LWF REPORT"; }
            if (mid_mst.Trim().Equals("9011.6")) { tm1.Col9 = "LOAN DETAIL"; }
            if (mid_mst.Trim().Equals("9011.7")) { tm1.Col9 = "OT REPORT"; }
            if (mid_mst.Trim().Equals("9011.8")) { tm1.Col9 = "SALARY REPORT"; }
            if (mid_mst.Trim().Equals("9011.9")) { tm1.Col9 = "CHECK DUPLICATE"; }
            if (mid_mst.Trim().Equals("9011.11")) { tm1.Col9 = "VARIANCE ANALYSIS"; }
            if (mid_mst.Trim().Equals("9011.12")) { tm1.Col9 = "UNDER PROBATION"; }
            if (mid_mst.Trim().Equals("9012.1")) { tm1.Col9 = "RETIREMENT BENEFITS"; }
            if (mid_mst.Trim().Equals("9012.2")) { tm1.Col9 = "RETIREMENT BENEFITS"; }
            if (mid_mst.Trim().Equals("9011.13")) { tm1.Col9 = "GRATUITY REPORT"; }
            tm1.Col10 = mid_mst.Trim();
            tm1.Col11 = m_id_mst.Trim();
            sgen.SetSession(MyGuid, "TR_MID", mid_mst.Trim());
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult stat_rpt(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col11);
            string cl = "", ut = "", monthid = "", dept = "", desig = "", ecat = "", zerodiff = "N", formtype = "", prd1 = "", prd2 = "";
            DataSet dst = new DataSet();
            DataTable dt = new DataTable();
            DataTable dtm = new DataTable();
            tab_name = "paymain";
            type_desc = "Employee Salary";
            type = "PAY";
            if (sgen.GetSession(MyGuid, "KDDL_CL") != null) cl = sgen.GetSession(MyGuid, "KDDL_CL").ToString();
            if (sgen.GetSession(MyGuid, "KDDL_UT") != null) ut = sgen.GetSession(MyGuid, "KDDL_UT").ToString().Replace(",", "','");
            if (sgen.GetSession(MyGuid, "KDDL_MONTH") != null) monthid = sgen.GetSession(MyGuid, "KDDL_MONTH").ToString();
            if (sgen.GetSession(MyGuid, "KDDL_DEPT") != null) dept = sgen.GetSession(MyGuid, "KDDL_DEPT").ToString();
            if (sgen.GetSession(MyGuid, "KDDL_DESIG") != null) desig = sgen.GetSession(MyGuid, "KDDL_DESIG").ToString();
            if (sgen.GetSession(MyGuid, "KDDL_ECAT") != null) ecat = sgen.GetSession(MyGuid, "KDDL_ECAT").ToString();
            if (sgen.GetSession(MyGuid, "KCOMMAND") != null) command = sgen.GetSession(MyGuid, "KCOMMAND").ToString();
            if (sgen.GetSession(MyGuid, "KFRM_TYPE") != null) formtype = sgen.GetSession(MyGuid, "KFRM_TYPE").ToString();
            if (formtype.Trim().Equals("2"))
            {
                if (sgen.GetSession(MyGuid, "KCHK_ZERO") != null) zerodiff = sgen.GetSession(MyGuid, "KCHK_ZERO").ToString();
                if (sgen.GetSession(MyGuid, "KTXT_PD1") != null) prd1 = sgen.GetSession(MyGuid, "KTXT_PD1").ToString();
                if (sgen.GetSession(MyGuid, "KTXT_PD2") != null) prd2 = sgen.GetSession(MyGuid, "KTXT_PD2").ToString();
            }
            //if (!model[0].Col10.Trim().Equals("9011.13"))
            //{
            //    if (cl == "") { ViewBag.scripCall = "showmsgJS(1,'Please Select Company_Name',2)"; return View(model); }
            //}
            if (dept.Trim() != "") { cond_dpjoin = " and em.emp_dept in ('" + dept.Replace(",", "','") + "') "; }
            if (desig.Trim() != "") { cond_dgjoin = " and em.emp_desig in ('" + desig.Replace(",", "','") + "') "; }
            if (ecat.Trim() != "") { cond_catjoin = " and em.emp_category in ('" + ecat.Replace(",", "','") + "') "; }
            #region month checking
            int currmonth = sgen.Make_int(monthid);
            int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
            string lastyyyymmm = "";
            string curryyyymmm = "";
            if (currmonth <= 12 && currmonth > 4)
            {
                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
            }
            else if (currmonth == 1)
            {
                lastyyyymmm = curryear + sgen.padlc(12, 3);
                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
            }
            else if (currmonth > 1 && currmonth < 4)
            {
                lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
            }
            else if (currmonth == 4)
            {
                lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                curryyyymmm = curryear + sgen.padlc((currmonth), 3);
            }
            sgen.SetSession(MyGuid, "curryyyymmm", curryyyymmm);
            #endregion
            DataTable dtr = new DataTable();
            dtr.Columns.Add("temp");
            DataRow dr = dtr.NewRow();
            dr["temp"] = "temp";
            dtr.Rows.Add(dr);
            if (model[0].Col10.Trim().Equals("9011.3"))
            {
                if (command == "PT Tax Challan")
                {
                    string headnm = "";
                    headnm = sgen.seekval(userCode, "select distinct col2 from vehicle_master vm where vm.type='KSP' and vm.col45='Y' and " +
                        "client_id='" + cl + "'", "col2");
                    mq = "select distinct em.emp_code as Employee_Code,(em.FIRST_NAME || ' ' || REPLACE(em.MIDDLE_NAME, '0', '') || ' ' || REPLACE(em.LAST_NAME, '0', '')) as Employee_Name" +
                        ",em.gender as Gender,to_char(em.dob,'" + sgen.Getsqldateformat() + "') as DOB,em.f_name as Father_Name,to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
                        "d.master_name Department,g.master_name Designation," + headnm + " as tax_amount from paymain es inner join emp_master em on " +
                        "em.vch_num = es.emp_code and em.type = 'EMP' and em.client_unit_id = es.client_unit_id inner join master_setting d on d.master_id = em.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                            "inner join master_setting g on g.master_id=em.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,'" + unitid_mst + "')=1 " + cond_dpjoin + "" + cond_dgjoin + "" +
                            " where es.TYPE = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.CURRYYYYMMM='" + curryyyymmm + "' and " + headnm + ">'0'";
                    sgen.open_grid("PT Tax Challan", mq, 0);
                    ViewBag.scripCall = "callFoo('PT Tax Challan');";

                    //dt = sgen.getdata(userCode, mq);
                    //mq1 = sgen.open_grid_dt("Employee Monthly PF Report", dt, 0);
                    //if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly PF Report');"; }
                    //else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                }
            }
            if (model[0].Col10.Trim().Equals("9011.2"))//esi
            {
                if (command == "Monthly Statement")
                {
                    mq = "select trim(substr(pm.CURRYYYYMMM,0,4)) as salary_yr,to_char(pm.m_lastdt,'month') as Month,trim(em.emp_code) emp_code," +
                        "trim(em.external_empno) Ext_Code,trim(em.old_empcode) old_empcode," +
                        "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name ,trim(em.f_name)" +
                        " Father_Name,trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj,trim(upper((em.esi_no))) esi_no," +
                        "pm.PAIDDAYS as paid_days,pm.ESILIMIT as Esi_Limit,(pm.ESI_F + pm.ESI_AR+pm.esi_ot) ESI,round(pm.esiwagES)+round(pm.ot) as WAGS from paymain pm inner join emp_master em " +
                        "on pm.emp_code = em.vch_num and em.type = 'EMP'  and nvl(em.isesilimit,'N')='Y' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = " +
                        "pm.client_unit_id where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "'" +
                        " order by em.emp_code asc";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        sgen.open_report_bydt_xml(userCode, dt, "ESI_Report_n", "ESI Report");
                    }
                } //done
                if (command == "Half Yearly Return Form-5") { sgen.open_report_bydt_xml(userCode, dtr, "esi_form5_return", "Form 5"); }
                if (command == "ESI XL Report")
                {
                    //                    mq = @"SELECT esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,
                    //upper(concat(em.first_name,' ',REPLACE(ifnull(em.middle_name,''),'0',''),' ',em.last_name)) Emp_Name,upper(em.f_name) Father_Name,
                    //to_char(convert_tz(em.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') Dob," +
                    //"to_char(convert_tz(em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') Doj,upper(em.esi_no) ESI_No,esp.paid_days Paid_Days," +
                    //"esp.client_unit_id,sum(if (esp.head_type = 'Earning',esp.head_count,0)) Gross_Rate,sum(if (esp.head_id = '000014',esp.head_count,0)) as Esi," +
                    //"sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id = '" + ut + "' and sh.cur_state <> '3' " +
                    //"and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col31='Y'),esp.head_count,0)) as Esi_Gross," +
                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id = '" + ut + "' " +
                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col31='Y'),esp.head_count,0)) as decimal (10,2)) * cast(replace(esim.col5,'%','') as decimal (5,2))/100,0) Employee_contri," +
                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id = '" + ut + "' " +
                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col31='Y'),esp.head_count,0)) as decimal (10,2)) * cast(replace(esim.col6,'%','') as decimal (5,2))/100,0) Employer_contri " +
                    //"from emp_salary_process esp LEFT JOIN vehicle_master esim on 1=1 and esim.type='KES' and esim.client_id='" + cl + "' and esim.client_unit_id='" + ut + "' " +
                    //"INNER JOIN emp_master em on esp.emp_code=em.vch_num and em.type='EMP' and em.client_id='" + cl + "' and em.client_unit_id='" + ut + "' " +
                    //"where esp.client_id='" + cl + "' and esp.client_unit_id='" + ut + "' and esp.type='ESP' and esp.head_flag='ESH' and esp.month_id='" + monthid + "' " +
                    //"group by esp.month_name,upper(em.emp_code),upper(em.external_empno),upper(em.esi_no)," +
                    //"upper(concat(em.first_name,' ',REPLACE(ifnull(em.middle_name,''),'0',''),'',em.last_name)),upper(em.f_name),esp.paid_days," +
                    //"to_char(convert_tz(em.dob,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "'),to_char(convert_tz(em.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "'),esp.client_unit_id";
                    mq = @"SELECT esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,
upper((em.first_name|| ' '|| REPLACE(nvl(em.middle_name, ''), '0', '')|| ' '|| em.last_name)) Emp_Name,upper(em.f_name) Father_Name,
to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
"to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj,upper(em.esi_no) ESI_No," +
"esp.paid_days Paid_Days, esp.client_unit_id,sum(if (esp.head_type = 'Earning',esp.head_count,0)) Gross_Rate," +
"sum(if (esp.head_id = '000014',esp.head_count,0)) as Esi,(sum(if (esp.head_id = '000014',esp.head_count,0))*100)/ replace(esim.col5, '%', '') as Esiable," +
"sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' " +
"and sh.client_unit_id = '" + ut + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col31 = 'Y'),esp.head_count,0)) as Esi_Gross," +
"round(cast((sum(if (esp.head_id = '000014',esp.head_count,0))*100)/ replace(esim.col5, '%', '') as decimal (10, 2)) *cast(replace(esim.col5, '%', '') as decimal (5, 2)) / 100,0) Employee_contri," +
"round(cast((sum(if (esp.head_id = '000014',esp.head_count,0))*100)/ replace(esim.col5, '%', '') as decimal (10, 2)) *cast(replace(esim.col6, '%', '') as decimal (5, 2)) / 100,0) Employer_contri " +
"from emp_salary_process esp " +
"LEFT JOIN vehicle_master esim on 1 = 1 and esim.type = 'KES' and esim.client_id = '" + cl + "' and esim.client_unit_id = '" + ut + "' " +
"INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' " +
"where esp.client_id = '" + cl + "' and esp.client_unit_id = '" + ut + "' and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.month_id = '" + monthid + "' " +
"group by esp.month_name,upper(em.emp_code),upper(em.external_empno),upper(em.esi_no),upper((em.first_name|| ' '|| REPLACE(nvl(em.middle_name, ''), '0', '')|| ''|| em.last_name))," +
"upper(em.f_name),esp.paid_days,to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),esp.client_unit_id";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Employee Monthly ESI Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly ESI Report');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
                if (command == "Company Wise Total")
                {

                    mq0 = sgen.seekval(userCode, "select col2 as esicode from vehicle_master where type = 'KES' and client_unit_id='001001'", "esicode");
                    mq = "select count(a.emp_code) emp_count,'" + mq0 + "' esicode,MAX(a.epr_per) AS epr_per ,MAX(a.epl_per) AS epl_per,a.unit_name,a.Month,a.salary_yr," +
                       "a.client_unit_id,sum(round(a.wags)+round(a.ot)) as wags,(sum(a.ESI_F) + sum(a.ESI_AR)+sum(a.esi_ot)) as ESI,SUM(round(a.emplr_cont)) AS emplr_cont  from (select pm.emp_code," +
                       "  pm.ESIRATE_ER as epr_per, pm.ESIRATE as epl_per, c.unit_name,to_char(pm.m_lastdt, 'month') " +
                       "as Month, trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr, pm.client_unit_id,pm.esiwagES as wags,esi_ot, pm.ESI_F, pm.ESI_AR," +
                       " pm.ESI_ER emplr_cont,pm.ot from paymain pm inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' " +
                       "and em.emp_status != 'R' and nvl(em.isesilimit,'N')='Y' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id inner join " +
                       "company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' where pm.type = 'PAY'" +
                       " and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') " +
                       " a group by(a.unit_name, a.Month, a.salary_yr, a.client_unit_id)";
                    dt = sgen.getdata(userCode, mq);
                    sgen.open_report_bydt_xml(userCode, dt, "comp_esi_n", "Company ESI Detail");
                } //done
                if (command == "Company Wise Non-ESI")
                {
                    //mq = "select count(a.emp_code) emp_count,'" + mq0 + "' esicode,MAX(a.epr_per) AS epr_per,MAX(a.epl_per) AS epl_per,a.unit_name,a.Month,a.salary_yr," +
                    //   "a.client_unit_id,sum(round(a.wags)+round(a.ot)) as wags,(sum(a.ESI_F) + sum(a.ESI_AR)+sum(a.esi_ot)) as ESI,SUM(round(a.emplr_cont)) AS emplr_cont from " +
                    //   "(select pm.emp_code,pm.ESIRATE_ER as epr_per,pm.ESIRATE as epl_per,c.unit_name,to_char(pm.m_lastdt, 'month') Month,trim(substr(pm.CURRYYYYMMM, 0, 4)) salary_yr," +
                    //   "pm.client_unit_id,pm.totearn as wags,esi_ot, pm.ESI_F, pm.ESI_AR,pm.ESI_ER emplr_cont,pm.ot from paymain pm " +
                    //   "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and nvl(em.isesilimit,'N')!='Y' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id " +
                    //   "inner join company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' " +
                    //   "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') a " +
                    //   "group by(a.unit_name, a.Month, a.salary_yr, a.client_unit_id)";

                    mq = "select count(a.emp_code) emp_count,a.unit_name,a.Month,a.salary_yr,a.client_unit_id,sum(round(a.wags)+round(a.ot)) wags from " +
                        "(select pm.emp_code, c.unit_name, to_char(pm.m_lastdt, 'month') Month, trim(substr(pm.CURRYYYYMMM, 0, 4)) salary_yr, pm.client_unit_id," +
                        "pm.totearn wags, pm.ot from paymain pm " +
                        "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and nvl(em.isesilimit, 'N') != 'Y' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id " +
                        "inner join company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' " +
                        "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') a " +
                        "group by(a.unit_name, a.Month, a.salary_yr, a.client_unit_id)";
                    dt = sgen.getdata(userCode, mq);
                    dst = new DataSet();
                    dt.TableName = "prepcur";
                    dst.Tables.Add(dt);
                    sgen.open_report_byDs_xml(userCode, dst, "comp_nonesi", "Company Non ESI Detail");
                } //done
                if (command == "Company Wise ESI and Non-ESI")
                {
                    mq = "select unit_name,month,salary_yr,sum(emp_count) empcount,sum(esiemp) esiemp,sum(nesiemp) nesiemp,sum(totamt) totamt,sum(esiamt) esiamt,sum(nesiamt) nesiamt from " +
                        "(select a.unit_name, a.Month, a.salary_yr, a.client_unit_id, count(a.emp_code) emp_count, 0 as esiemp, 0 as nesiemp,sum(round(a.wags) + round(a.ot)) totamt, " +
                        "0 as esiamt, 0 as nesiamt from (select pm.emp_code, pm.ESIRATE_ER as epr_per, pm.ESIRATE as epl_per, c.unit_name, to_char(pm.m_lastdt, 'month') Month," +
                        "trim(substr(pm.CURRYYYYMMM, 0, 4)) salary_yr, pm.client_unit_id, pm.totearn as wags, esi_ot, pm.ESI_F, pm.ESI_AR, pm.ESI_ER emplr_cont, pm.ot from paymain pm " +
                        "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id " +
                        "inner join company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' " +
                        "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') a " +
                        "group by(a.unit_name, a.Month, a.salary_yr, a.client_unit_id) " +
                        "union all " +
                        "select a.unit_name, a.Month, a.salary_yr, a.client_unit_id, 0 as empcount, count(a.emp_code) esiemp, 0 as nesiemp,0 as totamt, sum(round(a.wags)+round(a.ot)) esiamt," +
                        " 0 as nesiamt from (select pm.emp_code, pm.ESIRATE_ER as epr_per, pm.ESIRATE as epl_per, c.unit_name, to_char(pm.m_lastdt, 'month') Month," +
                        "trim(substr(pm.CURRYYYYMMM, 0, 4)) salary_yr, pm.client_unit_id, pm.totearn as wags, esi_ot, pm.ESI_F, pm.ESI_AR, pm.ESI_ER emplr_cont, pm.ot from paymain pm " +
                        "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and nvl(em.isesilimit, 'N') = 'Y' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id " +
                        "inner join company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' " +
                        "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') a " +
                        "group by(a.unit_name, a.Month, a.salary_yr, a.client_unit_id) " +
                        "union all " +
                        "select a.unit_name, a.Month, a.salary_yr, a.client_unit_id, 0 as empcount, 0 esiemp, count(a.emp_code) as nesiemp,0 as totamt, 0 as esiamt, sum(round(a.wags) + round(a.ot)) nesiamt from " +
                        "(select pm.emp_code, pm.ESIRATE_ER as epr_per, pm.ESIRATE as epl_per, c.unit_name, to_char(pm.m_lastdt, 'month') Month,trim(substr(pm.CURRYYYYMMM, 0, 4)) salary_yr," +
                        "pm.client_unit_id, pm.totearn as wags, esi_ot, pm.ESI_F, pm.ESI_AR, pm.ESI_ER emplr_cont, pm.ot from paymain pm " +
                        "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and nvl(em.isesilimit, 'N') != 'Y' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id " +
                        "inner join company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' " +
                        "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') a " +
                        "group by(a.unit_name, a.Month, a.salary_yr, a.client_unit_id)) a " +
                        "group by unit_name, month, salary_yr";
                    dt = sgen.getdata(userCode, mq);
                    dst = new DataSet();
                    dt.TableName = "prepcur";
                    dst.Tables.Add(dt);
                    sgen.open_report_byDs_xml(userCode, dst, "comp_esinonesi", "Company Non ESI Detail");
                } //done
                if (command.ToUpper() == "ESI VIEW (XLS)")
                {
                    string xdol = (lastyyyymmm.Substring(0, 4).Trim() + sgen.padlc(sgen.Make_int(lastyyyymmm.Substring(4, 3).Trim()), 2)).ToString().Trim();
                    mq = "select a.fstr,a.esi_no,a.emp_code,a.external_empno,a.old_empcode,a.Emp_Name,a.paid_days,round(a.Earning) Sal_Earning,round(a.OT) OT,round(a.earning_OT) Total_Earning" +
                        ",a.Dol,a.unit_name," +
                        "round(a.ESI) ESI,round(a.esiot) esiot,(case when  a.paid_days='0' then '1' when a.dol='0' then '0' else '2' end) as reason_code from (select em.emp_code,em.external_empno, '-' fstr,trim(upper((em.esi_no))) esi_no" +
                        ",em.old_empcode,trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name" +
                        ",pm.PAIDDAYS paid_days, pm.ESIWAGES as Earning,pm.OT as OT ,(pm.ESIWAGES + pm.OT) as earning_OT," +
                        "(case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), 'dd/MM/YYYY') = '01/01/1900' or" +
                        "  to_char(em.ex_dt, 'yyyymm') >= '" + curryyyymmm.Substring(0, 4).Trim() + curryyyymmm.Substring(5, 2).Trim() + "' then '0' else to_char(em.ex_dt,'" + sgen.Getsqldateformat() + "') end)" +
                        " as Dol,c.unit_name,(pm.ESI_F + pm.ESI_AR) as ESI,pm.ESI_OT as esiot from paymain pm inner join emp_master em on pm.emp_code = em.vch_num and" +
                        " em.type = 'EMP'  and nvl(em.isesilimit,'N')='Y' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id inner join" +
                        " company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' where pm.type = 'PAY' and " +
                        "pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') a " +
                        "union all " +
                          "select * from (select '-' as fstr,a.esi_no,a.emp_code,a.external_empno,a.old_empcode,trim(upper(((a.first_name) || ' ' || REPLACE(nvl(" +
                        "(a.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((a.last_name), ''), '0', '')))) Emp_Name,0 paid_days,0 as Earning," +
                        "0 as OT,0 as earning_OT,to_char(convert_tz(a.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') dol," +
                        "c.unit_name,0 as esi,0 as esiot,'2' as reason_code from emp_master a inner join company_unit_profile c on a.client_unit_id = c.cup_id and " +
                        "c.company_profile_id = '" + cl + "' where a.type='EMP' and a.client_id = '" + cl + "' and a.client_unit_id in ('" + ut + "') " +
                        "and (a.emp_status = 'N' and to_char(a.ex_dt, 'yyyymm') = '" + xdol + "')) tab1  order by emp_code ";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Employee Monthly ESI Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall += "callFoo('Employee Monthly ESI VIEW');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                } //done
            }
            if (model[0].Col10.Trim().Equals("9011.1"))//pf
            {
                if (command == "Form No-5")
                {

                    int tyr = 0;
                    #region month checking

                    if (currmonth <= 12 && currmonth > 4)
                    {
                        lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                        tyr = curryear;
                    }
                    else if (currmonth == 1)
                    {
                        lastyyyymmm = curryear + sgen.padlc(12, 3);
                        curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                        tyr = curryear + 1;
                    }
                    else if (currmonth > 1 && currmonth < 4)
                    {
                        lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                        tyr = curryear + 1;
                    }
                    else if (currmonth == 4)
                    {
                        lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                        curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                        tyr = curryear;
                    }
                    #endregion


                    string xdoj = tyr + sgen.padlc((currmonth), 2);
                    string month_name = monthName.GetMonthName(sgen.Make_int(monthid));
                    //mq = "select '"+month_name+"' as month_name,  '"+curryear+"' as cur_yr, trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
                    //  "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
                    //  "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name ,em.account_no" +
                    //  ",to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
                    //  "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj,em.gender" +
                    //  "  from  emp_master em    where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id  in ('" + ut + "')" +
                    //  " and to_char(em.ex_dt,'YYYY')= '1900' and to_char(em.st_dt,'yyyymm')='"+xdoj+"'      and em.emp_status = 'Y'   ";
                    //mq = "select '" + month_name + "' as month_name,  '" + curryear + "' as cur_yr,(case when em.jtype='001' then 'N' else 'Re' end) " +
                    //    "Jtype ,em.pf_no,em.pf_uan, trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
                    // "c.unit_name,trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
                    // "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name ,em.account_no" +
                    // ",to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
                    // "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
                    // "(case when em.gender='Male' then 'M' when em.gender='Female' then 'F' end) gender,upper(kpf.col2) compfno" +
                    // "  from emp_master em inner join company_unit_profile c on em.client_unit_id = c.cup_id " +
                    //    "and c.company_profile_id = '" + cl + "' inner join vehicle_master kpf on 1=1 and kpf.type='KPF' and kpf.client_id=em.client_id and kpf.client_unit_id=em.client_unit_id " +
                    //    "where em.type = 'EMP' and em.emp_status!='R'  and em.client_id = '" + cl + "' and em.client_unit_id  in ('" + ut + "')" +
                    // " and to_char(em.ex_dt,'YYYY')= '1900' and to_char(em.st_dt,'yyyymm')='" + xdoj + "' and em.emp_status = 'Y' " +
                    // "order by c.unit_name,(case when em.jtype='001' then 'N' else 'Re' end),em.st_dt asc";

                    mq = "select '" + month_name + "' as month_name,  '" + curryear + "' as cur_yr,(case when em.jtype='001' then 'N' else 'Re' end) " +
                        "Jtype ,em.pf_no,em.pf_uan, trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
                     "c.unit_name,trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
                     "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name ,em.account_no" +
                     ",to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
                     "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
                     "(case when em.gender='Male' then 'M' when em.gender='Female' then 'F' end) gender,upper(kpf.col2) compfno" +
                     "  from emp_master em inner join company_unit_profile c on em.client_unit_id = c.cup_id " +
                        "and c.company_profile_id = '" + cl + "' inner join vehicle_master kpf on 1=1 and kpf.type='KPF' and kpf.client_id=em.client_id and kpf.client_unit_id=em.client_unit_id " +
                        "where em.type = 'EMP' and em.emp_status!='R'  and em.client_id = '" + cl + "' and em.client_unit_id  in ('" + ut + "')" +
                     " and to_char(em.ex_dt,'YYYY')<> '" + xdoj + "' and to_char(em.st_dt,'yyyymm')='" + xdoj + "' " +
                     "order by c.unit_name,(case when em.jtype='001' then 'N' else 'Re' end),em.st_dt asc";
                    dt = sgen.getdata(userCode, mq);
                    sgen.open_report_bydt_xml(userCode, dt, "pf_5", "PF Form-5");
                }
                if (command == "Form No-10")
                {
                    //string xdol = curryear + sgen.padlc((currmonth), 2);
                    //string xdol = (lastyyyymmm.Substring(0, 4).Trim() + sgen.padlc(sgen.Make_int(lastyyyymmm.Substring(4, 3).Trim()), 2)).ToString().Trim();
                    string xdol = (curryyyymmm.Substring(0, 4).Trim() + sgen.padlc(sgen.Make_int(curryyyymmm.Substring(4, 3).Trim()), 2)).ToString().Trim();
                    string month_name = monthName.GetMonthName(sgen.Make_int(monthid));
                    //and to_char(em.ex_dt,'yyyymm')= '" + xdol + "'
                    mq = "select c.unit_name, '" + month_name + "' as month_name,  '" + curryear + "' as cur_yr,  nvl(lr.master_name,'-') as jtype, " +
                        " em.pf_no,em.pf_uan, trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
                      "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
                      "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name ,em.account_no" +
                      ",to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
                      "to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dol,em.gender,upper(kpf.col2) compfno" +
                      "  from emp_master em  inner join company_unit_profile c on em.client_unit_id = c.cup_id " +
                        "and c.company_profile_id = '" + cl + "' left join master_setting lr on lr.master_id=em.l_reason and lr.type='ELM' and " +
                        "find_in_set(lr.client_id,'" + clientid_mst + "')=1 and find_in_set(lr.client_unit_id,'" + unitid_mst + "')=1 " +
                        " inner join vehicle_master kpf on 1=1 and kpf.type='KPF' and " +
                        "kpf.client_id=em.client_id and kpf.client_unit_id=em.client_unit_id  where em.type = 'EMP' and em.emp_status!='R'  and " +
                        "em.client_id = '" + cl + "' and em.client_unit_id  in ('" + ut + "')" +
                      " and em.emp_status = 'N' and em.istrans<>'Y' and to_char(em.ex_dt,'yyyymm')= '" + xdol + "' order by c.unit_name,em.emp_code asc";
                    dt = sgen.getdata(userCode, mq);
                    sgen.open_report_bydt_xml(userCode, dt, "pf_10", "PF Form-10");
                }
                if (command == "Form No-3A")
                {
                    string fdate = "0103" + curryear;
                    string ldate = DateTime.DaysInMonth((curryear + 1), 2) + "02" + (curryear + 1);
                    mq = "select substr(month_id ,2,2)||'-'||(case when to_number(month_id )<4 then to_number(min(" + curryear + "))+1 else to_number(min(" + curryear + ")) end) fstr," +
                        "(case when to_number(month_id) < 4 then to_number(min(" + curryear + ")) + 1 else to_number(min(" + curryear + ")) end) || substr(month_id, 2, 2) fstr1," +
                        "emp_code,Ext_Code,old_empcode,pf_no,pf_uan,Emp_Name,father_name,comppfno,sum(to_number(Pf_Limit_ER)) Pf_Limit_ER,sum(to_number(PFLIMIT_EMP)) PFLIMIT_EMP," +
                        "sum(to_number(Gross_wages)) Gross_wages,sum(to_number(EPF_EARNED)) EPF_EARNED,sum(to_number(eps_earned)) eps_earned," +
                        "sum(to_number(edli_wages)) edli_wages,sum(to_number(EPS_Contribution)) EPS_Contribution,sum(to_number(EPf_Contribution_Empl)) EPf_Contribution_Empl," +
                        "sum(to_number(EPF)) EPF,client_unit_id,month,sum(to_number(VPF_wages)) VPF_wages,Dob,Doj,sum(to_number(vpf)) vpf," +
                        "sum(to_number(epf_contribution)) epf_contribution,sum(to_number(age)) age,sum(to_number(absents)) absents,fromdt,todt from " +
                        "(select (case when to_number(pm.month_id)=12 then '001' else lpad(to_number(pm.month_id)+1,3,'0') end) month_id, trim(em.emp_code) emp_code,trim(em.external_empno) Ext_Code,trim(em.old_empcode) old_empcode," +
                        "upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Emp_Name," +
                        "trim(em.f_name) Father_Name,kpf.col2 comppfno,to_number(kpf.col30) PF_Limit_ER,PM.PFLIMIT PFLIMIT_EMP,pm.PFWAGES Gross_wages," +
                        "pm.PFWAGES EPF_EARNED,(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) " +
                        ">= 58 then 0 else (case when(pm.pfwages) > to_number(KPF.col30) then to_number(KPF.col30) else (PM.PFwages)end) end) eps_earned," +
                        "(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12)>= 58 then 0 else " +
                        "(case when pm.PFWAGES > to_number(kpf.col30) then to_number(kpf.col30) else PM.PFWAGES end) end) edli_wages," +
                        "(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12)>= 58 then 0 else " +
                        "round((case when(pm.pfwages) > to_number(kpf.col30) then to_number(kpf.col30) else (pm.pfwages)end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) " +
                        "EPS_Contribution," +
                        "round(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) >= 58 then(pm.pf_er) " +
                        "else (pm.pf_er) - round((case when(pm.pfwages) > to_number(kpf.col30) then to_number(kpf.col30) else (pm.pfwages)end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end)" +
                        " EPf_Contribution_Empl," +
                        "(pm.PF_F + pm.PF_AR) EPF, trim(substr(pm.CURRYYYYMMM, 0, 4)) salary_yr,pm.client_unit_id,trim(to_char(add_months(pm.m_lastdt,1), 'Month')) as Month," +
                        "pm.VPFWAGES VPF_wages, trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj,(pm.VPF_F + pm.VPF_AR) vpf," +
                        "(pm.PF_F + pm.PF_AR) epf_contribution,floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) age," +
                        "to_number(pm.absents) absents,'" + fdate + "' fromdt,'" + ldate + "' todt " +
                        "from paymain pm " +
                        "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id " +
                        "and em.client_unit_id = pm.client_unit_id " +
                        "inner join vehicle_master kpf on kpf.type = 'KPF' and kpf.client_id = pm.client_id and kpf.client_unit_id = pm.client_unit_id " +
                        "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.cutpf = 'Y'  " +
                        "and  to_date(to_char(pm.m_lastdt,'yyyyMM'),'yyyyMM') between to_date('" + curryear + "03','yyyyMM') and to_date('" + (curryear + 1) + "02','yyyyMM')" +
                        "union all " +
                        "select m.master_id month_id, d.emp_code,d.external_empno Ext_Code, d.old_empcode,d.pf_no,d.pf_uan,d.emp_name,d.f_name Father_Name," +
                        "d.comppfno,0 Pf_Limit_ER,0 PFLIMIT_EMP,0 Gross_wages,0 EPF_EARNED,0 eps_earned,0 edli_wages,0 EPS_Contribution,0 EPf_Contribution_Empl," +
                        "0 EPF,d.salary_yr,d.client_unit_id,trim(m.master_name) month,0 VPF_wages,d.dob,d.doj,0 vpf,0 epf_contribution,0 age,0 absents,d.fromdt,d.todt " +
                        "from master_setting m " +
                        "inner join(select DISTINCT kpf.col2 comppfno,substr(es.CURRYYYYMMM,0,4) salary_yr,em.pf_no,em.pf_uan,em.emp_code,em.external_empno," +
                        "trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj,es.client_unit_id,em.old_empcode," +
                        "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Emp_Name," +
                        "EM.f_name,'" + fdate + "' fromdt,'" + ldate + "' todt " +
                        "from paymain es " +
                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
                        "inner join vehicle_master kpf on kpf.type = 'KPF' and kpf.client_id = es.client_id and kpf.client_unit_id = es.client_unit_id " +
                        "where es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')) d on 1 = 1 where m.type = 'MNT' " +
                        "and to_date(d.salary_yr||substr(m.master_id,2,2),'yyyyMM') between to_date('" + curryear + "03','yyyyMM') and to_date('" + (curryear + 1) + "02','yyyyMM')) a " +
                        "group by month_id ,emp_code," +
                        "Ext_Code,old_empcode,pf_no,pf_uan,Emp_Name,father_name,comppfno,client_unit_id,month,Dob,Doj,fromdt,todt order by emp_code,FSTR1 asc";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        //Pivot pv1 = new Pivot(dt);
                        //dt = pv1.PivotData_Tot_multi(new string[] { "ELWF", "erlwf", "wages" }, AggregateFunction.Sum, new string[]
                        //{ "client_unit_id","unit_name","salary_yr","Old_EmpCode","EmpCode","ExtCode","Name","Relation","Rel_Name","Country",
                        //"Adhaar_No","ESI_No","PF_No","Gender","Contact_No","DOB","DOJ","DOL","Qualification","Domicile" },
                        //new string[] { "Month" });
                        sgen.open_report_bydt_xml(userCode, dt, "pf_3A_n", "PF Form-3A");
                    }
                }
                if (command == "Form No-6A") { sgen.open_report_bydt_xml(userCode, dtr, "pf_6A", "PF Form-6A"); }
                if (command == "PF Statement")
                {
                    mq = @"select pm.cutpf as ispflimit,pm.pflimit as pf_limit, 
                    pm.client_id, pm.client_unit_id, trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr,to_char(pm.m_lastdt, 'month') as Month,trim(em.emp_code) emp_code,
                    (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12) >= 58
                then 0 else (case when (pm.PFWAGES) > (to_number(pf.col30)) then (to_number(pf.col30)) else (pm.PFWAGES) end) end) FPF_wages
                    ,trim(em.external_empno) Ext_Code,trim(em.old_empcode) old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' ||
                    replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,trim(em.f_name) Father_Name,
                    trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj,upper(em.pf_no) pf_no ,upper(em.pf_uan) pf_uan,
                    (pm.VPF_F + pm.VPF_AR) as vpf,(pm.PF_F + pm.PF_AR) as epf,
                    pm.pf_er-round(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12)
                    >= 58 then 0 else  (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12) >= 58
                then 0 else (case when (pm.PFWAGES) > (to_number(pf.col30)) then (to_number(pf.col30)) else (pm.PFWAGES) end) end) * to_number(trim(replace(pf.col14, '%', ''))) / 100 end) as mpf,
                    round(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12)
                    >= 58 then 0 else  (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12) >= 58
                then 0 else (case when (pm.PFWAGES) > (to_number(pf.col30)) then (to_number(pf.col30)) else (pm.PFWAGES) end) end) * to_number(trim(replace(pf.col14, '%', ''))) / 100 end) as fpf,pm.PFWAGES wages,
                    floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12) as age
                    from paymain pm
                    inner
                    join vehicle_master pf on pf.type = 'KPF' and pm.client_unit_id = pf.client_unit_id
                    inner join
                    emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and 
                    em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id where pm.type = 'PAY' and pm.client_id = '" + cl + "' and " +
              "pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "' and pm.cutpf='Y' order by pm.emp_code";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        sgen.open_report_bydt_xml(userCode, dt, "pf_challan_n", "PF Challan");
                    }
                } //DONE
                if (command == "PF Statement2")
                {
                    mq = @"select pm.cutpf as ispflimit,pm.pflimit as pf_limit, 
                    pm.client_id, pm.client_unit_id,u.unit_name, trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr,to_char(pm.m_lastdt, 'month') as Month,trim(em.emp_code) emp_code,
                    (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12) >= 58
                then 0 else (case when (pm.PFWAGES) > (to_number(pf.col30)) then (to_number(pf.col30)) else (pm.PFWAGES) end) end) FPF_wages
                    ,trim(em.external_empno) Ext_Code,trim(em.old_empcode) old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' ||
                    replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,trim(em.f_name) Father_Name,
                    trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj,upper(em.pf_no) pf_no ,upper(em.pf_uan) pf_uan,
                    (pm.VPF_F + pm.VPF_AR) as vpf,(pm.PF_F + pm.PF_AR) as epf,
                    pm.pf_er-round(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12)
                    >= 58 then 0 else  (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12) >= 58
                then 0 else (case when (pm.PFWAGES) > (to_number(pf.col30)) then (to_number(pf.col30)) else (pm.PFWAGES) end) end) * to_number(trim(replace(pf.col14, '%', ''))) / 100 end) as mpf,
                    round(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12)
                    >= 58 then 0 else  (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12) >= 58
                then 0 else (case when (pm.PFWAGES) > (to_number(pf.col30)) then (to_number(pf.col30)) else (pm.PFWAGES) end) end) * to_number(trim(replace(pf.col14, '%', ''))) / 100 end) as fpf,pm.PFWAGES wages,
                    floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), em.dob) / 12) as age
                    from paymain pm
                    inner join vehicle_master pf on pf.type = 'KPF' and pm.client_unit_id = pf.client_unit_id
                    inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id 
                    inner join company_unit_profile u on u.cup_id=pm.client_unit_id
                    where pm.type = 'PAY' and pm.client_id in ('" + cl + "') and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "' and pm.cutpf='Y' order by u.unit_name,trim(em.emp_code) asc";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        sgen.open_report_bydt_xml(userCode, dt, "pf_challan_all", "PF Challan");
                    }
                } //DONE
                if (command == "PF XL Report")
                {
                    //                    mq = @"SELECT esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,
                    //upper(concat(em.first_name, ' ', REPLACE(ifnull(em.middle_name, ''), '0', ''), ' ', em.last_name)) Emp_Name,upper(em.f_name) Father_Name,
                    //to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
                    //"to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj,upper(em.pf_uan) UAN_No,upper(em.pf_no) PF_No," +
                    //"esp.paid_days Paid_Days, esp.client_unit_id,sum(if (esp.head_type = 'Earning',esp.head_count,0)) Gross_Rate,sum(if (esp.head_id = '000011',esp.head_count,0)) as Pf," +
                    //"sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' and " +
                    //"sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as Pf_Gross," +
                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col15, '%', '') as decimal (5, 2)) / 100,0) Acc01," +
                    //"sum(if (esp.head_id = '000020',esp.head_count,0)) as Vpf," +
                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col14, '%', '') as decimal (5, 2)) / 100,0) Acc10," +
                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col18, '%', '') as decimal (5, 2)) / 100,0) Acc02," +
                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col18, '%', '') as decimal (5, 2)) / 100,0) Acc21," +
                    //"round(cast(sum(if (esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '"+cl+"' and sh.client_unit_id = '"+ut+"' " +
                    //"and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y'),esp.head_count,0)) as decimal (10, 2)) *cast(replace(pfm.col20, '%', '') as decimal (5, 2)) / 100,0) Acc22," +
                    //"pfm.col30 Pension_Wages " +
                    //"from emp_salary_process esp " +
                    //"LEFT JOIN vehicle_master pfm on 1 = 1 and pfm.type = 'KPF' and pfm.client_id = '"+cl+"' and pfm.client_unit_id = '"+ut+"' " +
                    //"INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.client_id = '"+cl+"' and em.client_unit_id = '"+ut+"' " +
                    //"where esp.client_id = '"+cl+"' and esp.client_unit_id = '"+ut+"' and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.month_id = '"+monthid+"' " +
                    //"group by esp.month_name,upper(em.emp_code),upper(em.external_empno),upper(em.pf_uan),upper(em.pf_no)," +
                    //"upper(concat(em.first_name, ' ', REPLACE(ifnull(em.middle_name, ''), '0', ''), '', em.last_name)),upper(em.f_name),esp.paid_days," +
                    //"to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
                    //"esp.client_unit_id";
                    mq = @"SELECT esp.month_name Month,upper(em.emp_code) Emp_Code,upper(em.external_empno) Ext_Code,
upper((em.first_name|| ' '|| REPLACE(nvl(em.middle_name, ''), '0', '')|| ' '|| em.last_name)) Emp_Name,upper(em.f_name) Father_Name,
to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob," +
"to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj,upper(em.pf_uan) UAN_No," +
"upper(em.pf_no) PF_No,esp.paid_days Paid_Days, esp.client_unit_id,sum(case when esp.head_type = 'Earning' then to_number(esp.head_count) else 0 END )as Gross_Rate," +
"sum(case when esp.head_id = '000011' then to_number(esp.head_count) else 0 END) as Pf,(sum(case when  esp.head_id = '000011' then to_number(esp.head_count) else 0 END)*100 )/ replace(pfm.col5, '%', '') Pfable," +
"sum(case when  esp.head_id in (select sh.vch_num as heads from vehicle_master sh where sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
"sh.client_unit_id = '" + ut + "' and sh.cur_state <> '3' and sh.cur_state <> '0' and sh.date2 > utc_timestamp() and sh.col30 = 'Y') then to_number(esp.head_count) else 0 END) as Pf_Gross," +
"round(to_number((sum(case when esp.head_id = '000011' then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) * to_number(replace(pfm.col15, '%', '') ) / 100,0) Acc01," +
"sum(case when esp.head_id = '000020' then to_number(esp.head_count) else 0 END) as Vpf," +
"round(to_number((sum(case when esp.head_id = '000011'  then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) *to_number(replace(pfm.col14, '%', '') ) / 100,0) Acc10," +
"round(to_number((sum(case when esp.head_id = '000011'then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) *to_number(replace(pfm.col18, '%', '') ) / 100,0) Acc02," +
"round(to_number((sum(case when esp.head_id = '000011' then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) *to_number(replace(pfm.col18, '%', '') ) / 100,0) Acc21," +
"round(to_number((sum(case when esp.head_id = '000011' then to_number(esp.head_count) else 0 END)*100)/ replace(pfm.col5, '%', '') ) *to_number(replace(pfm.col20, '%', '') ) / 100,0) Acc22," +
"pfm.col30 Pension_Wages from emp_salary_process esp LEFT JOIN vehicle_master pfm on 1 = 1 and pfm.type = 'KPF' and pfm.client_id = '" + cl + "' " +
"and pfm.client_unit_id = '" + ut + "' INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status!='R'  and em.client_id = '" + cl + "' " +
"and em.client_unit_id = '" + ut + "' where esp.client_id = '" + cl + "' and esp.client_unit_id = '" + ut + "' and esp.type = 'ESP' and " +
"esp.head_flag = 'ESH' and esp.month_id = '" + monthid + "' group by esp.month_name,upper(em.emp_code),upper(em.external_empno),upper(em.pf_uan)," +
"upper(em.pf_no),upper((em.first_name || ' ' || REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || em.last_name)),upper(em.f_name)," +
"to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),upper(em.pf_uan)," +
"upper(em.pf_no),esp.paid_days,esp.client_unit_id ,pfm.col5,pfm.col15,pfm.col14,pfm.col18,pfm.col20,pfm.col30";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Employee Monthly PF Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly PF Report');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
                if (command.ToUpper() == "PF VIEW (XLS)")
                {
                    string xdoj = curryyyymmm.Substring(0, 4);
                    string xdom = curryyyymmm.Substring(5, 2);
                    //mq = "select '-' fstr,trim(em.emp_code) emp_code,trim(em.external_empno) Ext_Code," +
                    //   "trim(em.old_empcode) old_empcode,upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' ||" +
                    //   " replace(em.LAST_NAME, '0', ''))) as Emp_Name,trim(em.f_name) Father_Name, pm.CUTPF, kpf.col30 PF_Limit_ER,PM.PFLIMIT PFLIMIT_EMP, pm.PFWAGES Gross_wages, " +
                    //   "pm.PFWAGES EPF_EARNED, (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd')," +
                    //   " EM.dob) / 12) >= 58 then 0 else (case when(pm.pfwages) > to_number(KPF.col30) then to_number(KPF.col30) else (PM.PFwages)end) end) eps_earned ," +
                    //   "(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12)>= 58 then 0 else (case when pm.PFWAGES > to_number(kpf.col30) then " +
                    //    "to_number(kpf.col30) else PM.PFWAGES end) end) edli_wages,(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12)>= 58 " +
                    //   "then 0 else round((case when(pm.pfwages) > to_number(kpf.col30) then to_number(kpf.col30) else (pm.pfwages)end) * " +
                    //   "to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) EPS_Contribution,round(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, " +
                    //   "4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) >= 58 then(pm.pf_er) else (pm.pf_er) - round((case when(pm.pfwages) >" +
                    //   " to_number(kpf.col30) then to_number(kpf.col30) else (pm.pfwages)end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) as " +
                    //   "EPf_Contribution_Empl,(pm.PF_F + pm.PF_AR) EPF, trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr,pm.client_unit_id,to_char(pm.m_lastdt, 'month') " +
                    //   "as Month,pm.ABSENTS,pm.VPFWAGES as VPF_wages,trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj," +
                    //   "(pm.VPF_F + pm.VPF_AR) as vpf,(pm.PF_F + pm.PF_AR) as epf_contribution," +
                    //   "floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) as age " +
                    //   "from paymain pm inner  join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = " +
                    //   "pm.client_id and em.client_unit_id = pm.client_unit_id inner join vehicle_master kpf on kpf.type = 'KPF' and kpf.client_id = pm.client_id " +
                    //   "and kpf.client_unit_id = pm.client_unit_id where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and " +
                    //   "pm.CURRYYYYMMM = '" + curryyyymmm + "' and pm.cutpf='Y'";


                    //mq = "select '-' fstr,trim(em.emp_code) emp_code,trim(em.external_empno) Ext_Code," +
                    //   "trim(em.old_empcode) old_empcode,upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' ||" +
                    //   " replace(em.LAST_NAME, '0', ''))) as Emp_Name,trim(em.f_name) Father_Name, pm.CUTPF, kpf.col30 PF_Limit_ER,PM.PFLIMIT PFLIMIT_EMP, pm.errate1+pm.errate2+pm.errate3+pm.errate4" +
                    //   "+pm.errate5+pm.errate6+pm.errate7+pm.errate8+pm.errate9+pm.errate10 Gross_wages, " +
                    //   "pm.PFWAGES EPF_EARNED, (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd')," +
                    //   " EM.dob) / 12) >= 58 then 0 else (case when(pm.pfwages) > to_number(KPF.col30) then to_number(KPF.col30) else (PM.PFwages)end) end) eps_earned ," +
                    //   "(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12)>= 58 then 0 else (case when pm.PFWAGES > to_number(kpf.col30) then " +
                    //    "to_number(kpf.col30) else PM.PFWAGES end) end) edli_wages,(pm.PF_F + pm.PF_AR)+(pm.VPF_F + pm.VPF_AR) as epf_cont,(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12)>= 58 " +
                    //   "then 0 else round((case when(pm.pfwages) > to_number(kpf.col30) then to_number(kpf.col30) else (pm.pfwages)end) * " +
                    //   "to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) EPS_Cont_ER,round(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, " +
                    //   "4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) >= 58 then(pm.pf_er) else (pm.pf_er) - round((case when(pm.pfwages) >" +
                    //   " to_number(kpf.col30) then to_number(kpf.col30) else (pm.pfwages)end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) as " +
                    //   "EPf_Cont_ER,(pm.PF_F + pm.PF_AR) Total_EPF_ER, trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr,pm.client_unit_id,to_char(pm.m_lastdt, 'month') " +
                    //   "as Month,round(pm.ABSENTS,0) ABSENTS,trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj," +
                    //   "floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) as age," +
                    //   "(case when trim(to_char(em.st_dt, 'YYYYMM'))='" + xdoj + xdom + "' then 0 else round(pm.ABSENTS,0) end) NCP_Days from paymain pm " +
                    //   "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id " +
                    //   "inner join vehicle_master kpf on kpf.type = 'KPF' and kpf.client_id = pm.client_id and kpf.client_unit_id = pm.client_unit_id " +
                    //   "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "' and pm.cutpf='Y'";

                    mq = "select '-' fstr,trim(em.emp_code) emp_code,trim(em.external_empno) Ext_Code," +
   "trim(em.old_empcode) old_empcode,upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' ||" +
   " replace(em.LAST_NAME, '0', ''))) as Emp_Name,trim(em.f_name) Father_Name, pm.CUTPF, kpf.col30 PF_Limit_ER,PM.PFLIMIT PFLIMIT_EMP, pm.errate1+pm.errate2+pm.errate3+pm.errate4" +
   "+pm.errate5+pm.errate6+pm.errate7+pm.errate8+pm.errate9+pm.errate10 Gross_wages, " +
   "pm.PFWAGES EPF_EARNED, (case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd')," +
   " EM.dob) / 12) >= 58 then 0 else (case when(pm.pfwages) > to_number(KPF.col30) then to_number(KPF.col30) else (PM.PFwages)end) end) eps_earned," +
   "pm.PFWAGES edli_wages,(pm.PF_F + pm.PF_AR)+(pm.VPF_F + pm.VPF_AR) as epf_cont,(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12)>= 58 " +
   "then 0 else round((case when(pm.pfwages) > to_number(kpf.col30) then to_number(kpf.col30) else (pm.pfwages)end) * " +
   "to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) EPS_Cont_ER,round(case when floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, " +
   "4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) >= 58 then(pm.pf_er) else (pm.pf_er) - round((case when(pm.pfwages) >" +
   " to_number(kpf.col30) then to_number(kpf.col30) else (pm.pfwages)end) * to_number(trim(replace(kpf.col14, '%', ''))) / 100) end) as " +
   "EPf_Cont_ER,(pm.PF_F + pm.PF_AR) Total_EPF_ER, trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr,pm.client_unit_id,to_char(pm.m_lastdt, 'month') " +
   "as Month,round(pm.ABSENTS,0) ABSENTS,trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj," +
   "floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), EM.dob) / 12) as age," +
   "(case when trim(to_char(em.st_dt, 'YYYYMM'))='" + xdoj + xdom + "' then 0 else round(pm.ABSENTS,0) end) NCP_Days from paymain pm " +
   "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id " +
   "inner join vehicle_master kpf on kpf.type = 'KPF' and kpf.client_id = pm.client_id and kpf.client_unit_id = pm.client_unit_id " +
   "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "' and pm.cutpf='Y'";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Employee Monthly PF Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly PF Detail');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                } //DONE
            }
            if (model[0].Col10.Trim().Equals("9011.5"))
            {
                if (command == "LWF Monthly Statement")
                {
                    mq = "select  trim(substr(p.CURRYYYYMMM, 0, 4)) salary_yr,to_char(p.m_lastdt,'Month') as Month ,e.Emp_Code,e.external_empno Ext_Code,e.old_empcode," +
                        "trim((replace(e.FIRST_NAME, '0', '') || ' ' || replace(e.MIDDLE_NAME, '0', '') || ' ' ||" +
                        " replace(e.LAST_NAME, '0', ''))) Emp_Name,to_char(e.dob, '" + sgen.Getsqldateformat() + "') Dob, to_char(e.st_dt, '" + sgen.Getsqldateformat() + "') Doj, " +
                        "(case when to_char(e.ex_dt, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '0' else to_char(e.ex_dt, '" + sgen.Getsqldateformat() + "') end) Dor,e.esi_no,e.pf_no,e.pf_uan,e.adhaar_no," +
                        "(case when upper(e.gender)= 'MALE' then 'FATHER' WHEN upper(e.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end) relation," +
                       " (case when upper(e.gender)= 'MALE' then upper(e.f_name) WHEN upper(e.gender)= 'FEMALE' and upper(ismarried)= 'Y' then e.spouse_name end) rel_name,e.contact_no" +
                       ",e.gender,p.paiddays as paid_days,p.lwfwages as wages,p.lwf_f as emp_cont,p.lwf_er from paymain p inner join emp_master e " +
                       "on p.client_unit_id=e.client_unit_id and p.emp_code=e.vch_num  where p.CURRYYYYMMM = '" + curryyyymmm + "' and p.client_unit_id in ('" + ut + "')  order by p.emp_code ";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0) { sgen.open_report_bydt_xml(userCode, dt, "lwfmonthly_n", "LWF Monthly Report"); }
                } //done
                if (command == "LWF Yearly Statement")
                {
                    mq = "select a.salary_yr,a.emp_code,a.Ext_Code,a.old_empcode,a.Emp_Name,a.Dob,a.Doj,a.Dor,a.esi_no,a.pf_no,a.pf_uan," +
                        "a.adhaar_no,a.relation,a.rel_name,a.contact_no,a.gender,sum(a.wages) wages,sum(a.emp_cont) as emp_cont,a.paid_days from " +
                        "(select em.ispflimit, (case when upper(em.gender)= 'MALE' then upper(em.f_name) WHEN upper(em.gender)= 'FEMALE' and" +
                        " upper(ismarried)= 'Y' then em.spouse_name end) rel_name,upper(em.emp_code) emp_code,em.pf_limit,em.adhaar_no," +
                        "pm.client_id,pm.client_unit_id,trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr,to_char(pm.m_lastdt, 'month') as Month" +
                        ",pm.PAIDDAYS paid_days, em.gender,em.contact_no,(case when upper(em.gender)= 'MALE' then 'FATHER' WHEN" +
                        " upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end) relation,trim(em.external_empno) Ext_Code," +
                        "trim(em.old_empcode) old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name" +
                        ",trim(em.f_name) Father_Name,trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj,upper(em.esi_no) as esi_no" +
                        ",(case when to_char(em.ex_dt, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '0' else to_char(em.ex_dt,'" + sgen.Getsqldateformat() + "') end) Dor" +
                        ",upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,pm.PFWAGES wages, pm.LWF_F as emp_cont," +
                        "floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), dob) / 12) as age " +
                        "from paymain pm inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and " +
                        "em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') a group by(a.salary_yr, a.emp_code, a.Ext_Code, a.old_empcode, a.Emp_Name,a.Dob, a.Doj, a.Dor, a.esi_no, a.pf_no, a.pf_uan, a.adhaar_no, a.gender, a.relation, a.rel_name, a.paid_days, a.contact_no) order by a.Emp_Code";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        sgen.open_report_bydt_xml(userCode, dt, "lwf_n", "LWF Report");
                    }
                }
                if (command == "LWF Yearly XL Challan")
                {
                    string year = sgen.GetCookie(MyGuid, "year_from").Split(' ')[0].Split('/')[2];
                    int fyr = sgen.Make_int(year);
                    string frm = fyr + "004", toym = (fyr + 1) + "003";
                    mq = "select '-' fstr,a.CURRYYYYMMM,a.client_unit_id,a.unit_name,a.salary_yr,a.Month,a.emp_code EmpCode," +
                    "a.Ext_Code as ExtCode,a.old_empcode as Old_EmpCode,a.Name,NVL(a.relation, '-') Relation,'0' Qualification," +
                    "'0' Domicile,NVL(a.rel_name, '-') as rel_name,a.Country,a.adhaar_no,a.esi_no as ESI_No,a.pf_no PF_No," +
                    " a.gender,a.contact_no,a.Dob as DOB,max(a.Gross_Earn) Gross_Earn,a.Doj DOJ, a.Dor as DOL,sum(a.wages) ernwages,sum(elwf) elwf" +
                    ",sum(erlwf) erlwf from (select em.ispflimit, (case when upper(em.gender)= 'MALE' then upper(em.f_name) " +
                    "WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then em.spouse_name end) rel_name,round((pm.errate1+pm.errate2+pm.errate3+pm.errate4+" +
                    "pm.errate5+pm.errate6+pm.errate7+pm.errate8+pm.errate9+pm.errate10)) as Gross_Earn" +
                    ",round((pm.lwf_f)) as elwf,round(pm.lwf_er) as erlwf,pm.CURRYYYYMMM,upper(em.emp_code) emp_code,em.pf_limit,em.adhaar_no" +
                    ",pm.client_id,pm.client_unit_id,trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr,to_char(pm.m_lastdt, 'Month')" +
                    " as Month,pm.PAIDDAYS paid_days, em.gender,em.contact_no,(case when upper(em.gender)= 'MALE' then 'FATHER' " +
                    "WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end) relation,trim(em.external_empno)" +
                    " Ext_Code,c.unit_name,trim(em.old_empcode) old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Name" +
                    ",trim(em.f_name) Father_Name,trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj,upper(em.esi_no) as esi_no,'0' Country" +
                    ",(case when to_char(em.ex_dt, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '0' else to_char(em.ex_dt, '" + sgen.Getsqldateformat() + "') end) Dor" +
                    ",upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,round(pm.LWFWAGES) wages,round( pm.LWF_F) as emp_cont," +
                    "floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), dob) / 12) as age" +
                    " from paymain pm inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id" +
                    " inner join company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "'" +
                    " where pm.type = 'PAY' and pm.client_id = '" + cl + "' and to_number(pm.CURRYYYYMMM) between " + frm + " and " + toym + " and " +
                    " pm.client_unit_id in ('" + ut + "') ) a group by(a.client_unit_id, a.unit_name, a.salary_yr, a.Month, a.emp_code, a.Country, " +
                    "a.Ext_Code, a.old_empcode, a.Name,a.Dob, a.Doj, a.Dor, a.esi_no, a.pf_no, a.gender, a.adhaar_no, a.relation, a.rel_name, a.contact_no," +
                    "a.CURRYYYYMMM) order by a.Emp_Code";
                    dt = sgen.getdata(userCode, mq);
                    Pivot pv1 = new Pivot(dt, MyGuid);
                    dt = pv1.PivotData_Tot_multi(new string[] { "ELWF", "erlwf", "ernwages" }, AggregateFunction.Sum, new string[]
                    { "client_unit_id","unit_name","salary_yr","Old_EmpCode","EmpCode","ExtCode","Name","Relation","Rel_Name","Country",
                        "Adhaar_No","ESI_No","PF_No","Gender","Contact_No","DOB","DOJ","DOL","Qualification","Domicile" },
                    new string[] { "Month", "CURRYYYYMMM" });
                    dtm = dt.Copy();
                    mq1 = sgen.open_grid_dt("Employee Yearly LWF Report", dtm, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Yearly LWF Report');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                } //done
                if (command == "LWF Monthly XL Challan")
                {
                    mq = "select '-' fstr,a.client_unit_id,a.unit_name,a.salary_yr,a.Month,a.emp_code EmpCode," +
                     "a.Ext_Code as ExtCode,a.old_empcode as Old_EmpCode,a.Name,NVL(a.relation, '-') Relation,'0' Qualification," +
                     "'0' Domicile,NVL(a.rel_name, '-') as rel_name,a.Country,a.adhaar_no,a.esi_no as ESI_No,a.pf_no PF_No," +
                     " a.gender,a.contact_no,a.paid_days,a.Dob as DOB,a.Gross_Earn Gross_Wages,a.Doj DOJ, a.Dor as DOL,sum(a.wages) ernwages,sum(elwf) elwf" +
                     ",sum(erlwf) erlwf from (select em.ispflimit, (case when upper(em.gender)= 'MALE' then upper(em.f_name) " +
                     "WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then em.spouse_name end) rel_name,round((pm.errate1+pm.errate2+pm.errate3+pm.errate4+" +
                     "pm.errate5+pm.errate6+pm.errate7+pm.errate8+pm.errate9+pm.errate10)) as Gross_Earn" +
                     ",round((pm.lwf_f)) as elwf,round(pm.lwf_er) as erlwf,pm.CURRYYYYMMM,upper(em.emp_code) emp_code,em.pf_limit,em.adhaar_no" +
                     ",pm.client_id,pm.client_unit_id,trim(substr(pm.CURRYYYYMMM, 0, 4)) as salary_yr,to_char(pm.m_lastdt, 'Month')" +
                     " as Month,pm.PAIDDAYS paid_days, em.gender,em.contact_no,(case when upper(em.gender)= 'MALE' then 'FATHER' " +
                     "WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end) relation,trim(em.external_empno)" +
                     " Ext_Code,c.unit_name,trim(em.old_empcode) old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Name" +
                     ",trim(em.f_name) Father_Name,trim(to_char(em.dob, 'dd/MM/YYYY')) Dob,trim(to_char(em.st_dt, 'dd/MM/YYYY')) Doj,upper(em.esi_no) as esi_no,'0' Country" +
                     ",(case when to_char(em.ex_dt, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '0' else to_char(em.ex_dt,'" + sgen.Getsqldateformat() + "') end) Dor" +
                     ",upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,round(pm.LWFWAGES) wages,round( pm.LWF_F) as emp_cont," +
                     "floor(months_between(to_date(substr(pm.CURRYYYYMMM, 1, 4) || substr(pm.CURRYYYYMMM, 6, 2) || '01', 'yyyymmdd'), dob) / 12) as age" +
                     " from paymain pm inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id" +
                     " inner join company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' where pm.type = 'PAY' and pm.client_id = '" + cl + "' and" +
                     " pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "') a group by(a.client_unit_id, a.unit_name, a.Gross_Earn, a.salary_yr, a.Month, a.emp_code, a.Country, " +
                     "a.Ext_Code, a.old_empcode, a.Name,a.Dob, a.Doj, a.Dor, a.esi_no, a.pf_no, a.gender, a.adhaar_no, a.relation, a.rel_name, a.contact_no,a.paid_days) order by a.Emp_Code";
                    dt = sgen.getdata(userCode, mq);
                    Pivot pv1 = new Pivot(dt, MyGuid);
                    dt = pv1.PivotData_Tot_multi(new string[] { "ELWF", "erlwf", "ernwages" }, AggregateFunction.Sum, new string[]
                    { "client_unit_id","unit_name","salary_yr","Old_EmpCode","EmpCode","ExtCode","Name","Relation","Rel_Name","Country",
                        "Adhaar_No","ESI_No","PF_No","Gender","Contact_No","paid_days","DOB","Gross_Wages","DOJ","DOL","Qualification","Domicile" },
                    new string[] { "Month" });
                    dtm = dt.Copy();
                    mq1 = sgen.open_grid_dt("LWF Monthly XL Challan", dtm, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('LWF Monthly XL Challan');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                } //done
                if (command == "LWF Monthly View")
                {
                    mq = "select '' as fstr, a.old_empcode ,a.Emp_code,a.Emp_Name as Name, nvl(a.emp_type, '-') as emp_type ,a.Dob,a.Doj,a.Dor,a.esi_no,a.pf_no, " +
                        "a.pf_uan,a.adhaar_no,a.relation,a.rel_name as Relation_Person_Name,a.contact_no,a.gender,a.paid_days," +
                        "'Indian' nationality,sum(a.wages) as wages ,sum(a.emp_cont) as employees_contribution ,sum(a.emp_cont * 2)" +
                        " as employeer_contribution from( SELECT  esp.head_name, trim(substr(esp.currmmmyyyy, 0, 4)) as salary_yr," +
                        " trim(esp.month_name) Month, upper(em.emp_code) Emp_Code, em.old_empcode, upper((em.first_name || ' ' ||" +
                        " REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))) Emp_Name, " +
                        "to_char(convert_tz(em.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Dob, " +
                        "to_char(convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') Doj," +
                        " (case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') = '01/01/1900' " +
                        "then '0' else  to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end) Dor," +
                        "upper(em.esi_no) esi_no,upper(em.pf_no) pf_no,upper(em.pf_uan) pf_uan,em.adhaar_no,(case when upper(em.gender)= 'MALE' " +
                        "then 'FATHER' WHEN upper(em.gender)= 'FEMALE' and upper(ismarried)= 'Y' then 'HUSBAND' end) relation,(case when upper(em.gender)= " +
                        "'MALE' then upper(em.f_name) WHEN upper(em.gender) = 'FEMALE' and upper(ismarried)= 'Y' then em.spouse_name end) rel_name," +
                        "em.contact_no,em.gender,trim(esp.paid_days) paid_days,(case when trim(nvl(hm.col42,'N'))= 'Y' and upper(esp.head_type) = 'EARNING'" +
                        " then sum(esp.head_count) else 0 end) wages, (case when head_id in (000017) and upper(esp.head_type)= 'DEDUCTION' then " +
                        "sum(to_number(trim(head_count))) else 0 end) as emp_cont, (case when ct.contr = 000000 then 'Self' else ct.c_name end ) as" +
                        " emp_type from emp_salary_process esp  INNER JOIN emp_master em   on esp.emp_code = em.vch_num and em.type = 'EMP' " +
                        "and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id and em.emp_status = 'Y'  inner join vehicle_master hm " +
                        "on hm.type = 'KSP' and hm.client_id = esp.client_id and hm.client_unit_id = esp.client_unit_id and hm.vch_num = esp.head_id " +
                        "left join clients_mst ct on ct.vch_num = em.contr and ct.type = 'PVD' and ct.contr = 'Y' where esp.client_id = '" + cl + "' and" +
                        " esp.client_unit_id  in (" + ut + ") and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "'" +
                        " group by(case when ct.contr= 000000 then 'Self' else ct.c_name end ), esp.head_name,trim(substr(esp.currmmmyyyy, 0, 4))," +
                        "trim(esp.month_name),upper(em.emp_code),upper(em.external_empno) ,em.old_empcode,upper((em.first_name || ' ' || " +
                        "REPLACE(nvl(em.middle_name, ''), '0', '') || ' ' || REPLACE(nvl(em.last_name, ''), '0', ''))),to_char(convert_tz(em.dob, " +
                        "'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),to_char (convert_tz(em.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), " +
                        "'" + sgen.Getsqldateformat() + "'),(case when to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')= '01/01/1900'" +
                        " then '0' else to_char(convert_tz(em.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') end),upper(em.esi_no) " +
                        ",upper(em.pf_no),upper(em.pf_uan),em.adhaar_no,(case when upper(em.gender)= 'MALE' then 'FATHER' WHEN upper(em.gender)= 'FEMALE' " +
                        "and upper(ismarried)= 'Y' then 'HUSBAND' end),(case when upper(em.gender)= 'MALE' then upper(em.f_name) WHEN upper(em.gender)= 'FEMALE' " +
                        "and upper(ismarried)= 'Y' then em.spouse_name end),em.contact_no,em.gender,trim(esp.paid_days),esp.head_id,esp.head_type,hm.col42  ) a " +
                        "group by a.salary_yr,a.Month,a.Emp_Code,a.old_empcode,a.Emp_Name,a.Dob,a.Doj,a.Dor,a.esi_no,a.pf_no,a.pf_uan,a.adhaar_no, " +
                        "a.relation,a.rel_name,a.contact_no,a.gender,a.paid_days,a.emp_type order by a.emp_code asc";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Employee Monthly LWF Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Monthly LWF VIEW');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
            }
            if (model[0].Col10.Trim().Equals("9011.6"))
            {
                if (command == "Loan Detail")
                {
                    //mq = "select esp.emp_code ,trim(substr(esp.currmmmyyyy,0,4)) as salary_yr, trim(esp.month_name) Month," +
                    //   "trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
                    //   "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || " +
                    //   "REPLACE(nvl((em.last_name), ''), '0', '')))) Emp_Name,trim(upper((em.f_name))) Father_Name,a.date2 as ad_date, " +
                    //   " esp.head_count as adv_ded from emp_salary_process esp inner join (select col1 emp_code, max(date2) date2 from " +
                    //   "enx_tab2 where type = 'HAS' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1) a" +
                    //   " on a.emp_code = esp.emp_code INNER JOIN emp_master em on esp.emp_code = em.vch_num and em.type = 'EMP' " +
                    //   "and em.client_id = esp.client_id and em.client_unit_id = esp.client_unit_id " +
                    //   "where esp.client_id = '" + cl + "' and esp.client_unit_id " +
                    //   " in ('" + ut + "') and esp.type = 'ESP' and esp.head_flag = 'ESH' and esp.currmmmyyyy = '" + curryyyymmm + "' " +
                    //   "and esp.head_id = '000021' and esp.head_count<>'0' order by trim(upper(em.emp_code)) asc";
                    mq = "select pm.EMP_CODE as emp_code,trim(substr(pm.CURRYYYYMMM,0,4)) as salary_yr,to_char(pm.m_lastdt,'month') as Month," +
                        "trim(upper(em.emp_code)) Emp_Code,trim(upper(em.external_empno)) Ext_Code,trim(em.old_empcode) old_empcode," +
                        "trim(upper(((em.first_name) || ' ' || REPLACE(nvl((em.middle_name), ''), '0', '') || ' ' || REPLACE(nvl((em.last_name), ''),'0', '')))) " +
                        "Emp_Name,trim(upper((em.f_name))) Father_Name,pm.m_lastdt ad_date, pm.ADV_F as adv_ded from paymain pm inner join emp_master em on " +
                        "pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id =" +
                        " pm.client_unit_id where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = " +
                        "'" + curryyyymmm + "' and pm.ADV_F<>0";
                    dt = sgen.getdata(userCode, mq);
                    sgen.open_report_bydt_xml(userCode, dt, "loan_details_n", "Loan Detail");
                } //done
                else if (command == "Advance Ledger")
                {
                    mq = "select a.emp_code,(replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME,'0','')||' '||replace(em.LAST_NAME,'0','')) as emp_name,em.f_name,a.vch_num,a.vch_date,to_number(a.adv_out) adv_out,to_number(a.adv_in) adv_in,to_number(a.adv_in)-to_number(a.adv_out) as balance,A.M_NAME from (" +
                        "select vch_num,to_char(date2, 'dd/MM/yyyy') as vch_date,col1 as emp_code, max(col7) adv_out,0 as adv_in,to_char(date2, 'Month-yyyy') M_NAME from enx_tab2  " +
                        " where type = 'HAS' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,vch_num,date2,type union all " +
                        "select vch_num,to_char(vch_date, 'dd/MM/yyyy') as vch_date,col1 as emp_code, '0' adv_out,to_number(col10) as adv_in,to_char(vch_date, 'Month-yyyy') M_NAME from enx_tab2 where type = 'ADJ' and client_unit_id in ('" + ut + "') " +
                        "union all select vch_num,to_char(m_lastdt, 'dd/MM/yyyy') as vch_date,emp_code ,'0' as adv_out, " +
                        " sum(ADV_F) adv_in ,to_char(m_lastdt, 'Month-yyyy') M_NAME from paymain where type = 'PAY' and client_id = '" + cl + "'" +
                        " and client_unit_id in ('" + ut + "') group by emp_code,vch_num,m_lastdt,type) a inner join emp_master em on a.emp_code = em.vch_num and em.emp_status != 'R' " + cond_dpjoin + "" + cond_dgjoin + "" +
                        "where (a.adv_out+a.adv_in)>0 ORDER BY a.emp_code, a.vch_date";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        sgen.open_report_bydt_xml(userCode, dt, "adv_lgr", "Advance Ledger");
                    }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                }
            }
            if (model[0].Col10.Trim().Equals("9011.7"))
            {
                DataTable dtot = new DataTable();
                if (command == "Company Wise Total OT")
                {
                    mq = "select trim(c.unit_name) unit_name,trim(pm.client_unit_id) client_unit_id,trim(substr(pm.CURRYYYYMMM,0,4)) as salary_yr,to_char(pm.m_lastdt,'month') as month_name" +
                        ",sum(pm.ot_hrs) as ot_hrs,sum(pm.ot)+sum(pm.arr_ot) as OT,sum(pm.ESIWAGES_OT) as ot_mst,sum(pm.arr_ot)  as Arr,sum(pm.ot)+sum(pm.arr_ot)  as totalot" +
                        ",sum(pm.esi_ot) esi_on_ot,round(((sum(pm.ot)+sum(pm.arr_ot)) - sum(pm.ESI_OT))) netpay from paymain pm " +
                        " inner join company_unit_profile c on pm.client_unit_id = c.cup_id and c.company_profile_id = '" + cl + "' " +
                        " where pm.type = 'PAY' and pm.client_id = '" + cl + "' and" +
                        " pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "'" +
                        "group by c.unit_name,trim(pm.client_unit_id) ,trim(substr(pm.CURRYYYYMMM,0,4)) ,to_char(pm.m_lastdt,'month') HAVING sum(pm.ot)+sum(pm.arr_ot)>0" +
                        " order by c.unit_name asc";
                    dt = sgen.getdata(userCode, mq);
                    sgen.open_report_bydt_xml(userCode, dt, "company_ot_n", "Company Wise OT Detail");
                }
                if (command == "Monthly OT Report" || command == "Contractor Monthly OT")
                {
                    mq = "select nvl(vd.c_name,'Self') as contr, trim(substr(pm.CURRYYYYMMM,0,4)) as salary_yr,to_char(pm.m_lastdt,'month') as month_name," +
                        "(round(pm.ot+pm.arr_ot) -round( pm.ESI_OT)) netpay,round(pm.ESI_OT) esi_on_ot,round(pm.ot+pm.arr_ot) totalot,pm.arr_ot as Arr," +
                        "round(pm.ot) as OT,pm.OTWAGES as ot_mst,pm.ot_hrs as OT_hrs," +
                        "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Name " +
                        ",trim(em.f_name) f_name,trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,trim(em.old_empcode) old_empcode from paymain pm " +
                        "inner join emp_master em on pm.emp_code = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id " +
                        "left join(select '000000' vch_num,'Self' c_name from dual union all select vch_num, c_name " +
                "from clients_mst where type='BCD' and substr(vch_num,0,3)='203' and contr='Y' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "') vd on " +
                "vd.vch_num=em.contr  " +
                        "and em.client_unit_id = pm.client_unit_id where pm.type = 'PAY' and pm.client_id = '" + cl + "' and pm.client_unit_id in ('" + ut + "') and pm.ot_hrs>0 " +
                        "and pm.CURRYYYYMMM = '" + curryyyymmm + "'";
                    dtot = sgen.getdata(userCode, mq);
                    dtot.TableName = "prepcur";
                    dst.Tables.Add(dtot);
                    if (command == "Contractor Monthly OT") sgen.open_report_byDs_xml(userCode, dst, "newcontrmot", "Contractor Monthly OT");

                    else
                    {
                        if (userCode.ToUpper().Trim().Equals("SKYKESHO"))
                        {
                            sgen.open_report_byDs_xml(userCode, dst, "ot_report_n_kesho", "OT Report");
                        }
                        else
                        {
                            sgen.open_report_byDs_xml(userCode, dst, "ot_report_n", "OT Report");
                        }
                    }
                }
                if (command == "Netpay With OT")
                {
                    mq = "select trim(substr(pm.CURRYYYYMMM,0,4)) as salary_yr,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', '')))" +
                      " as Name" +
                      ",trim(em.f_name) f_name,trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,trim(em.old_empcode) old_empcode," +
                      "to_char(pm.m_lastdt,'month') as month_name" +
                      ",round((round(pm.netsalary)+round(pm.ot+pm.arr_ot) - round(pm.ESI_OT))) netpay,round(pm.ot+pm.arr_ot) as OT,round(pm.netsalary) bal,round(pm.ESI_OT) ESI_OT from paymain pm inner join emp_master em on pm.emp_code" +
                      " = em.vch_num and em.type = 'EMP' and em.emp_status != 'R' and em.client_id = pm.client_id and em.client_unit_id = pm.client_unit_id " +
                      "where pm.type = 'PAY' and pm.client_id = '" + cl + "' and " +
                      "pm.client_unit_id in ('" + ut + "') and pm.CURRYYYYMMM = '" + curryyyymmm + "'";
                    dtot = sgen.getdata(userCode, mq);
                    dtot.TableName = "prepcur";
                    dst.Tables.Add(dtot);
                    sgen.open_report_byDs_xml(userCode, dst, "ern_with_ot_n", "OT Report");
                }
                //if (command == "Contractor Monthly OT")
                //{
                //    mq = "select salary_yr,vd_name,name,f_name,emp_code,external_empno,month_name,max(ot_hrs) as ot_hrs,max(ot_mst) as ot_mst," +
                //        "sum(ot) ot,sum(arr) arr,(sum(ot)+sum(arr)) totalot,max(esi_on_ot) esi_on_ot,((sum(ot)+sum(arr))-max(esi_on_ot)) netpay " +
                //        "from (select trim(substr(sp.currmmmyyyy,0,4)) salary_yr,to_number(ot_mst) ot_mst,vd.c_name vd_name," +
                //        "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Name," +
                //        "trim(em.f_name) f_name,trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,to_number(sp.ot_hrs) as OT_hrs," +
                //        "trim(sp.month_name) as month_name,(case when upper(trim(sp.head_name)) like 'ARR_%' then to_number(sp.head_count) else 0 end) Arr," +
                //        "(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count) else 0 end) OT,to_number(a.esi_on_ot) esi_on_ot " +
                //        "from emp_salary_process sp inner join emp_master em on sp.emp_code = em.vch_num and em.type='EMP' and em.emp_status!='R'  and " +
                //        "em.client_id=sp.client_id and em.client_unit_id = sp.client_unit_id " +
                //        "inner join clients_mst vd on vd.vch_num = em.contr and vd.type = 'PVD' and vd.client_id = em.client_id and " +
                //        "vd.client_unit_id = em.client_unit_id inner join (select emp_code, head_count esi_on_ot from emp_salary_process " +
                //        "where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and currmmmyyyy = '" + curryyyymmm + "' and " +
                //        "head_flag = 'ESH' and head_id = '000022') a on sp.emp_code = a.emp_code inner join(select col1, sum(col10) as ot_mst " +
                //        "from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in (select  col1 from " +
                //        "enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) group by col1) ot on ot.col1 = sp.emp_code " +
                //        "where sp.type = 'ESP' and sp.client_id = '" + cl + "' and sp.client_unit_id in ('" + ut + "') and sp.currmmmyyyy = '" + curryyyymmm + "' and " +
                //        "sp.head_flag = 'ESH' and sp.head_id = '000019') group by salary_yr,vd_name,name,f_name,emp_code,external_empno," +
                //        "month_name having max(ot_hrs) <> 0 order by vd_name";
                //    mq = "select salary_yr,vd_name,name,f_name,emp_code,external_empno,month_name,max(ot_hrs) as ot_hrs,max(ot_mst) as ot_mst," +
                //       "sum(ot) ot,sum(arr) arr,(sum(ot)+sum(arr)) totalot,max(esi_on_ot) esi_on_ot,((sum(ot)+sum(arr))-max(esi_on_ot)) netpay " +
                //       "from (select trim(substr(sp.currmmmyyyy,0,4)) salary_yr,to_number(ot_mst) ot_mst,vd.c_name vd_name," +
                //       "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Name," +
                //       "trim(em.f_name) f_name,trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,to_number(sp.ot_hrs) as OT_hrs," +
                //       "trim(sp.month_name) as month_name,(case when upper(trim(sp.head_name)) like 'ARR_%' then to_number(sp.head_count) else 0 end) Arr," +
                //       "(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count) else 0 end) OT,to_number(a.esi_on_ot) esi_on_ot " +
                //       "from paymain sp inner join emp_master em on sp.emp_code = em.vch_num and em.type='EMP' and em.emp_status!='R'  and " +
                //       "em.client_id=sp.client_id and em.client_unit_id = sp.client_unit_id " +
                //       "inner join (select '000000' vch_num,'Self' c_name from dual union all select vch_num, c_name " +
                //"from clients_mst where type='BCD' and substr(vch_num,0,3)='203' and contr='Y' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "') vd on vd.vch_num = em.contr and vd.type = 'PVD' and vd.client_id = em.client_id and " +
                //       "vd.client_unit_id = em.client_unit_id inner join (select emp_code, head_count esi_on_ot from emp_salary_process " +
                //       "where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and currmmmyyyy = '" + curryyyymmm + "' and " +
                //       "head_flag = 'ESH' and head_id = '000022') a on sp.emp_code = a.emp_code inner join(select col1, sum(col10) as ot_mst " +
                //       "from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in (select  col1 from " +
                //       "enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) group by col1) ot on ot.col1 = sp.emp_code " +
                //       "where sp.type = 'ESP' and sp.client_id = '" + cl + "' and sp.client_unit_id in ('" + ut + "') and sp.currmmmyyyy = '" + curryyyymmm + "' and " +
                //       "sp.head_flag = 'ESH' and sp.head_id = '000019') group by salary_yr,vd_name,name,f_name,emp_code,external_empno," +
                //       "month_name having max(ot_hrs) <> 0 order by vd_name";
                //    dtot = sgen.getdata(userCode, mq);
                //    dtot.TableName = "prepcur";
                //    dst.Tables.Add(dtot);
                //    sgen.open_report_byDs_xml(userCode, dst, "contrmot", "Contractor Monthly OT");
                //}
            }
            if (model[0].Col10.Trim().Equals("9011.8"))
            {
                if (command == "Monthly Salary (Total)")
                {
                    /////////////////////=======================
                    #region dt earn
                    mq = "select em.emp_code,em.external_empno,es.emp_name,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern,es.head_type," +
                        "es.head_id,upper(sh.col3) head_name,es.head_count," +
                        "(to_number(sh.col41)) head_order from emp_salary_process es " +
                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ( '" + ut + "') " +
                        "inner join emp_master em on em.vch_num=es.emp_code and em.type='EMP' and em.client_id='" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_status='Y' and to_char(em.ex_dt,'yyyy')='1900' " +
                        "inner join (select col1,SUM(col10) as gm_ern from enx_tab where type='KES' and client_id='" + cl + "' and client_unit_id in ('" + ut + "') " +
                        "group by col1) en on en.col1=es.emp_code " +
                        "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Earning' and es.type = 'ESP' and es.client_id = '"
                        + cl + "' and es.client_unit_id in ('" + ut + "')";
                    DataTable dtern = sgen.getdata(userCode, mq);
                    Pivot pv = new Pivot(dtern, MyGuid);
                    dtern = pv.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                    { "emp_code","external_empno","emp_name","f_name", "month_name", "month_days", "paid_days","gm_ern" },
                    new string[] { "head_name", "head_order" }, "ERN_TOTAL");
                    #endregion
                    ////////////////////=======================
                    #region dt deduct
                    mq1 = "select em.emp_code,em.external_empno,es.emp_name,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern,es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count," +
                             "(to_number(sh.col41)) head_order from emp_salary_process es " +
                             "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                             "inner join emp_master em on em.vch_num=es.emp_code and em.type='EMP' and em.client_id='" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_status='Y' and to_char(em.ex_dt,'yyyy')='1900' " +
                             "inner join (select col1,SUM(col10) as gm_ern from enx_tab where type='KES' and client_id='" + cl + "' and client_unit_id in ('" + ut + "') group by col1) en on en.col1=es.emp_code " +
                             "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Deduction' and es.type = 'ESP' and es.client_id = '"
                             + cl + "' and es.client_unit_id in ('" + ut + "')";
                    DataTable dtded = sgen.getdata(userCode, mq1);
                    Pivot pv1 = new Pivot(dtded, MyGuid);
                    dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                    { "emp_code", "external_empno", "emp_name", "f_name", "month_name", "month_days", "paid_days","gm_ern" },
                    new string[] { "head_name" }, "DED_TOTAL");
                    #endregion
                    dtm = dtern.Copy();
                    foreach (DataColumn dc in dtded.Columns)
                    {
                        if (dc.Ordinal > 7) dtm.Columns.Add(dc.ColumnName);
                    }
                    string netname = "NETPAYABLE";
                    dtm.Columns.Add(netname);
                    for (int r = 0; r < dtded.Rows.Count; r++)
                    {
                        foreach (DataColumn dc in dtded.Columns)
                        {
                            if (dc.Ordinal > 7)
                            {
                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
                            }
                        }
                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOTAL"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOTAL"].ToString());
                    }
                    var dtf = dtm;
                    var dtcols = new DataTable();
                    for (int c = 0; c < 50; c++)
                    {
                        string nn = "Col" + (c + 1);
                        dtcols.Columns.Add(nn);
                    }
                    var drc = dtcols.NewRow();
                    drc[0] = "-";
                    dtcols.Rows.Add(drc);
                    bool netadded = false;
                    for (int c = 0; c < 50; c++)
                    {
                        try
                        {
                            if (!dtm.Columns[c + 8].ColumnName.Equals(netname))
                            {
                                if (netadded)
                                {
                                    throw new Exception();
                                }
                                dtcols.Rows[0][c] = dtm.Columns[c + 8].ColumnName.ToString();
                                dtm.Columns[c + 8].ColumnName = "VCol" + (c + 1);
                            }
                            else
                            {
                                string nn = "VCol" + (c + 1);
                                dtm.Columns.Add(nn);
                                netadded = true;
                            }
                        }
                        catch (Exception err)
                        {
                            string nn = "VCol" + (c + 1);
                            dtm.Columns.Add(nn);
                            dtcols.Rows[0][c] = "-";
                        }
                    }
                    dtm.Columns[netname].SetOrdinal(56);
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtm);
                    dtcols.TableName = "heads";
                    dst.Tables.Add(dtcols);
                    dst.Tables.Add();
                    sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_salary_dept", "Monthly Salary (Total)");
                }
                if (command == "Actual Salary")
                {
                    //                    mq = @"select distinct (replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME,'0','')||' '||replace(em.LAST_NAME,'0','')) as Name,
                    //em.f_name as Fathers_name,em.emp_code,em.external_empno,dp.master_name as dept,dg.master_name as desig,et.master_name as emptype,ec.master_name as empcategory,
                    //nvl(bnk.master_name,'-') as bank_name,enx.col2 as Total_salary from emp_master em " +
                    //"inner join master_setting dp on dp.master_id=em.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,'" + clientid_mst + "')=1 and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                    //"inner join master_setting dg on dg.master_id=em.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,'" + clientid_mst + "')= 1 and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                    //"inner join master_setting et on et.master_id=em.emp_type and et.type='KET' and find_in_set(et.client_id,'" + clientid_mst + "')=1 and find_in_set(et.client_unit_id,'" + unitid_mst + "')=1 " +
                    //"inner join master_setting ec on ec.master_id=em.emp_category and ec.type='KEC' and find_in_set(ec.client_id,'" + clientid_mst + "')=1 and find_in_set(ec.client_unit_id,'" + unitid_mst + "')=1 " +
                    //"inner join enx_tab enx on enx.col1=em.vch_num and enx.type='KES' and enx.client_id=em.client_id and enx.client_unit_id=em.client_unit_id " +
                    //"left outer join master_setting bnk on bnk.master_id = em.bank_name and em.type='ABD' and find_in_set(bnk.client_id,'" + clientid_mst + "')=1 and" +
                    //" find_in_set(bnk.client_id,'" + clientid_mst + "')=1 " +
                    //"where em.type='EMP' and em.client_id='" + cl + "' and em.client_unit_id in ('" + ut + "') ";
                    mq = "select distinct (replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME,'0','')||' '||replace(em.LAST_NAME,'0','')) as Name,em.f_name as Fathers_name" +
                        ",em.emp_code,em.external_empno,dp.master_name as dept,dg.master_name as desig,et.master_name as emptype,ec.master_name as empcategory," +
                        "nvl(bnk.master_name, '-') as bank_name,enx.NETSALARY as Total_salary from emp_master em inner join master_setting dp on dp.master_id = em.emp_dept " +
                        "and dp.type = 'MDP' and find_in_set(dp.client_id,'" + clientid_mst + "')= 1 and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 inner join master_setting dg on dg.master_id " +
                        "= em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id,'" + clientid_mst + "')= 1 and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 inner join master_setting et " +
                        "on et.master_id = em.emp_type and et.type = 'KET' and find_in_set(et.client_id,'" + clientid_mst + "')= 1 and find_in_set(et.client_unit_id,'" + unitid_mst + "')= 1 inner join" +
                        " master_setting ec on ec.master_id = em.emp_category and ec.type = 'KEC' and find_in_set(ec.client_id,'" + clientid_mst + "')= 1 and find_in_set(ec.client_unit_id,'" + unitid_mst + "')= 1 " +
                        "inner join paymain enx on enx.emp_code = em.vch_num and enx.type = 'PAY' and enx.client_id = em.client_id and enx.client_unit_id = em.client_unit_id and " +
                        "enx.curryyyymmm = '" + curryyyymmm + "' left outer join master_setting bnk on bnk.master_id = em.bank_name and em.type = 'ABD' and find_in_set(bnk.client_id,'" + clientid_mst + "')= 1 " +
                        "and find_in_set(bnk.client_id,'" + clientid_mst + "')= 1 where em.type = 'EMP' " + cond_dpjoin + " " + cond_dgjoin + " and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        dt.TableName = "prepcur";
                        dst.Tables.Add(dt);
                        sgen.open_report_byDs_xml(userCode, dst, "emp_actual_salary1", "Employee Actual Salary");
                    }
                    else { sgen.showmsg(1, "Data Not Found", 2); }
                }
                if (command == "Monthly Transfer Salary")
                {

                    if (dept.Trim() != "") { cond_dpjoin = " and em.emp_dept in ('" + dept.Replace(",", "','") + "') "; }
                    if (desig.Trim() != "") { cond_dgjoin = " and em.emp_desig in ('" + desig.Replace(",", "','") + "') "; }
                    if (ecat.Trim() != "") { cond_catjoin = " and em.emp_category in ('" + ecat.Replace(",", "','") + "') "; }

                    mq = "select trim(substr(PM.CURRYYYYMMM,0,4)) as salary_yr,trim(upper(em.emp_code)) emp_code,trim(upper(em.external_empno)) external_empno," +
                     "trim(upper(em.old_empcode)) old_empcode,trim(replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME, '0', '')||' '||" +
                     "replace(em.LAST_NAME, '0', '')) as Name,trim(em.ifsc_code) ifsc_code,trim(em.account_no) account_no,(to_number(pm.netsalary)) Netpay," +
                     "to_char(pm.m_lastdt,'month') as month_name " +
                     "from emp_master em INNER join PAYMAIN PM on PM.emp_code=em.vch_num and PM.type='PAY' and PM.client_id='" + cl + "' and " +
                     "pm.client_unit_id in ('" + ut + "')  and pm.CURRYYYYMMM='" + curryyyymmm + "' " +
                     "INNER JOIN " +
                     "company_unit_profile up on em.client_unit_id=up.CUP_Id WHERE em.type='EMP' and em.client_id='" + cl + "' " +
                      "and em.client_unit_id in ('" + ut + "') " + cond_dpjoin + "" + cond_dgjoin + " " + cond_catjoin + " order by Name asc";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        dt.TableName = "prepcur";
                        dst.Tables.Add(dt);
                        sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_transfer", "Employee Monthly Transfer");
                    }
                    else { ViewBag.scripCall = "showmsgJS(1, 'No Data Found', 2);"; }
                }
                if (command == "Monthly Transfer OT")
                {
                    if (dept.Trim() != "") { cond_dpjoin = " and em.emp_dept in ('" + dept.Replace(",", "','") + "') "; }
                    if (desig.Trim() != "") { cond_dgjoin = " and em.emp_desig in ('" + desig.Replace(",", "','") + "') "; }
                    if (ecat.Trim() != "") { cond_catjoin = " and em.emp_category in ('" + ecat.Replace(",", "','") + "') "; }
                    mq = "select trim(substr(PM.CURRYYYYMMM,0,4)) as salary_yr,trim(upper(em.emp_code)) emp_code,trim(upper(em.external_empno)) external_empno," +
                     "trim(upper(em.old_empcode)) old_empcode,trim(replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME, '0', '')||' '||" +
                     "replace(em.LAST_NAME, '0', '')) as Name,trim(em.ifsc_code) ifsc_code,trim(em.account_no) account_no,(to_number(pm.OT))-(pm.esi_ot) Netpay," +
                     "to_char(pm.m_lastdt,'month') as month_name " +
                     "from emp_master em INNER join PAYMAIN PM on PM.emp_code=em.vch_num and PM.type='PAY' and PM.client_id='" + cl + "' and " +
                     "pm.client_unit_id in ('" + ut + "')  and pm.CURRYYYYMMM='" + curryyyymmm + "' " +
                     "INNER JOIN " +
                     "company_unit_profile up on em.client_unit_id=up.CUP_Id WHERE em.type='EMP' and em.client_id='" + cl + "' " +
                      "and em.client_unit_id in ('" + ut + "') and pm.ot>0  " + cond_dpjoin + "" + cond_dgjoin + " " + cond_catjoin + " " +
                      "  order by Name asc";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        dt.TableName = "prepcur";
                        dst.Tables.Add(dt);
                        sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_transfer", "Employee Monthly Transfer");
                    }
                    else { ViewBag.scripCall = "showmsgJS(1, 'No Data Found', 2);"; }
                }
                if (command == "Monthly Transfer Total")
                {
                    mq = "select trim(substr(PM.CURRYYYYMMM,0,4)) as salary_yr,trim(upper(em.emp_code)) emp_code,trim(upper(em.external_empno)) external_empno," +
                     "trim(upper(em.old_empcode)) old_empcode,trim(replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME, '0', '')||' '||" +
                     "replace(em.LAST_NAME, '0', '')) as Name,trim(em.ifsc_code) ifsc_code,trim(em.account_no) account_no,(to_number(pm.netsalary)+pm.OT)-pm.esi_ot Netpay," +
                     "to_char(pm.m_lastdt,'month') as month_name " +
                     "from emp_master em INNER join PAYMAIN PM on PM.emp_code=em.vch_num and PM.type='PAY' and PM.client_id='" + cl + "' and " +
                     "pm.client_unit_id in ('" + ut + "')  and pm.CURRYYYYMMM='" + curryyyymmm + "' " +
                     "INNER JOIN " +
                     "company_unit_profile up on em.client_unit_id=up.CUP_Id WHERE em.type='EMP' and em.client_id='" + cl + "' " +
                      "and em.client_unit_id in ('" + ut + "') order by em.emp_code asc";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        dt.TableName = "prepcur";
                        dst.Tables.Add(dt);
                        sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_transfer", "Employee Monthly Transfer");
                    }
                    else { ViewBag.scripCall = "showmsgJS(1, 'No Data Found', 2);"; }
                }
                //done
                //new hr
                if (command == "Actual Monthly Salary")
                {
                    #region old
                    //                    mq = @"select emp_code,max(external_empno) as external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name,
                    //max(month_days) as month_days,max(paid_days) paid_days ,sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(mtot) MTot,
                    //sum(act_salary) act_salary,sum(EBasic) EBasic,sum(EHRA) EHRA,sum(EConveyance) EConveyance,sum(Etot) Etot,sum(ot_hrs) ot_hrs,sum(OTAmount) OTAmount,
                    //sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF,SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance,(SUM(ETOT)-SUM(PF)-SUM(ESI)) AS NET_BOOK,(SUM(FTOT)-SUM(PF)-SUM(ESI)) AS Net_Actual,
                    //(SUM(FTOT)-SUM(PF)-SUM(ESI))-(SUM(ETOT)-SUM(PF)-SUM(ESI))  AS Cash FROM
                    //(select en.col1 as emp_code, '-' as external_empno, '-' as emp_name, '-' as f_name, '-' as month_name, '0' as month_days, '0' as paid_days, 
                    //sum(if (col4 = '000001',col10,0)) as MBasic,sum(if (col4 = '000002',col10,0)) as MHRA,sum(if (col4 = '000006',col10,0)) as MConveyance,sum(col10) as MTot,
                    //'0' as act_salary,'0' as EBasic,'0' as EHRA,'0' as EConveyance,'0' as Etot,'0' as ot_hrs,'0' as OTAmount,'0' as FBasic,'0' Ftot,'0' PF,'0' as ESI,
                    //'0' LWF,'0' as Advance,'0' as Lunch from enx_tab en where en.type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in ('000001', '000002', '000006') " +
                    //"group by col1 " +
                    //"union  all " +
                    //"SELECT emp_code,external_empno,emp_name,f_name,month_name,month_days,paid_days,'0' as Mbasic,'0' mhra,'0' as mconvey,'0' as mtot,act_salary," +
                    //"sum(if (head_id = '000001',head_count,0)) as Basic,sum(if (head_id = '000002',head_count,0)) as HRA,sum(if (head_id = '000006',head_count,0)) as Conveyance," +
                    //"sum(if (head_id not in ('777776', '777777'),head_count,0)) as Etot,ot_hrs,sum(if (head_id = '777776',head_count,0)) as OT," +
                    //"sum(if (head_id = '777777',head_count,0)) as FBasic,sum(if (head_id  in ('777776', '777777'),head_count,0)) as Ftot,'0' as pf,'0' as esi,'0' as lwf," +
                    //"'0' as adv,'0' as Lunch  from(select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days, es.ot_hrs," +
                    //"em.act_salary, es.head_type,es.head_id, ifnull(upper(sh.col3), 'Actual_OT') head_name, es.head_count, ifnull((CONVERT(sh.col41, UNSIGNED INTEGER)), '999') " +
                    //"head_order from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
                    //"sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
                    //"em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and " +
                    //"es.client_unit_id in ('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') order by es.emp_code, es.head_id) a group by " +
                    //"emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days, ot_hrs, act_salary " +
                    //"union all " +
                    //"SELECT emp_code, external_empno, emp_name, f_name, month_name,'0' as month_days,'0' paid_days,'0' as Mbasic,'0' mhra,'0' as mconvey,'0' as mtot," +
                    //"'0' act_salary ,'0' as ebasic,'0' as ehra,'0' as econey,'0' as etot,'0' ot_hrs,'0' as otamount,'0' as fbasic,'0' as ftot,sum(if (head_id = '000011'," +
                    //"head_count,0)) as EPF,sum(if (head_id = '000014',head_count,0)) as ESI,sum(if (head_id = '000017',head_count,0)) as LWF,sum(if (head_id = '000021'," +
                    //"head_count,0)) as ADV,sum(if (head_id = '000022'," +
                    //"head_count,0)) as Lunch from(select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days," +
                    //"es.ot_hrs, em.act_salary, es.head_type,es.head_id, ifnull(upper(sh.col3), 'Actual_OT') head_name, es.head_count,ifnull((CONVERT(sh.col41, UNSIGNED INTEGER)), '999') head_order " +
                    //"from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
                    //"sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
                    //"em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                    //"and es.client_unit_id in ('" + ut + "')  order by es.emp_code, es.head_id) a GROUP BY emp_code, external_empno, emp_name, f_name, month_name) TAB group by EMP_CODE";
                    //                    mq = @"select emp_code,max(external_empno) as external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name,
                    //max(month_days) as month_days,max(paid_days) paid_days ,sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(mtot) MTot,
                    //sum(act_salary) act_salary,sum(EBasic) EBasic,sum(EHRA) EHRA,sum(EConveyance) EConveyance,sum(Etot) Etot,sum(ot_hrs) ot_hrs,sum(OTAmount) OTAmount,
                    //sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF,SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance,(SUM(ETOT)-SUM(PF)-SUM(ESI)) AS NET_BOOK,(SUM(FTOT)-SUM(PF)-SUM(ESI)) AS Net_Actual,
                    //(SUM(FTOT)-SUM(PF)-SUM(ESI))-(SUM(ETOT)-SUM(PF)-SUM(ESI))  AS Cash,sum(bal_adv) bal_adv,sum(bal_adv)-sum(Advance) as Rest_Adv  FROM
                    //(select en.col1 as emp_code, '-' as external_empno, '-' as emp_name, '-' as f_name, '-' as month_name, '0' as month_days, '0' as paid_days, 
                    //sum(case when col4 = '000001' then col10 else '0' END ) as MBasic,sum(case when  col4 = '000002' then col10 else '0' END ) as MHRA,sum(case when col4 = '000006' then col10 else '0' END ) as MConveyance,sum(col10) as MTot,
                    //'0' as act_salary,'0' as EBasic,'0' as EHRA,'0' as EConveyance,'0' as Etot,'0' as ot_hrs,'0' as OTAmount,'0' as FBasic,'0' Ftot,'0' PF,'0' as ESI,
                    //'0' LWF,'0' as Advance,'0' as Lunch,'0' bal_adv from enx_tab en where en.type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in ('000001', '000002', '000006') " +
                    //"group by col1 " +
                    //"union  all " +
                    //"SELECT emp_code,external_empno,emp_name,f_name,month_name,month_days,paid_days,0 as Mbasic,0 mhra,0 as mconvey ,0 as mtot,act_salary ,'0' as EBasic," +
                    //"'0' as EHRA ,'0' as EConveyance,'0' as Etot,'0' as ot_hrs,'0' as OTAmount,'0' as FBasic,'0' Ftot ,0 PF,0 as ESI ,0 LWF,0 as Advance " +
                    //",0 as Lunch,'0' bal_adv  from(select es.bal_adv, em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days, es.ot_hrs, " +
                    //"em.act_salary, es.head_type,es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count, nvl((to_number(sh.col41)), '999') " +
                    //"head_order from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
                    //"sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
                    //"em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and " +
                    //"es.client_unit_id in ('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') order by es.emp_code, es.head_id) a group by " +
                    //"emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days, ot_hrs, act_salary,,bal_adv " +
                    //"union all " +
                    //"SELECT emp_code, external_empno, emp_name, f_name, month_name,'0' as month_days,'0' paid_days,0 as Mbasic,0 mhra,0 as mconvey ,0 as mtot,'0' act_salary ,'0' as ebasic,'0' as ehra ,'0' as econey,'0' as etot ,'0' ot_hrs,'0' as otamount ,'0' as fbasic,'0' as ftot," +
                    //"sum(case when head_id='000011' then head_count else '0' END ) as EPF, sum(case when head_id='000014' then head_count else '0' END ) as ESI" +
                    //",sum(case when head_id='000017' then head_count else '0' END ) as LWF,sum(case when head_id='000021' then head_count else '0' END ) as ADV," +
                    //"sum(case when head_id='000022' then head_count else '0' END ) as Lunch,'0' bal_adv from from(select em.vch_num as emp_code, em.external_empno," +
                    //" es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days," +
                    //"es.ot_hrs, em.act_salary, es.head_type,es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count,nvl((to_number(sh.col41)), '999') head_order " +
                    //"from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and " +
                    //"sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
                    //"em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                    //"and es.client_unit_id in ('" + ut + "')  order by es.emp_code, es.head_id) a GROUP BY emp_code, external_empno, emp_name, f_name, month_name) TAB group by EMP_CODE";
                    //mq = "select emp_code,max(external_empno) as external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name," +
                    //    "max(month_days) as month_days,max(paid_days) paid_days ,sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(mtot) MTot," +
                    //    "sum(act_salary) act_salary,sum(EBasic) EBasic,sum(EHRA) EHRA,sum(EConveyance) EConveyance,sum(Etot) Etot,sum(ot_hrs) ot_hrs" +
                    //    ",sum(OTAmount) OTAmount,sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF,SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance," +
                    //    "(SUM(ETOT) - SUM(PF) - SUM(ESI)) AS NET_BOOK,(SUM(FTOT) - SUM(PF) - SUM(ESI)) AS Net_Actual," +
                    //    "(SUM(FTOT) - SUM(PF) - SUM(ESI))-(SUM(ETOT) - SUM(PF) - SUM(ESI))  AS Cash, sum(bal_adv) bal_adv,sum(bal_adv) - sum(Advance)" +
                    //    " as Rest_Adv  FROM   ( select en.col1 as emp_code, '-' as external_empno, '-' as emp_name, '-' as f_name, '-' as month_name, " +
                    //    "'0' as month_days, '0' as paid_days, sum(case when col4 = '000001' then col10 else '0' END) as MBasic, sum(case when  col4 = '000002' " +
                    //    "then col10 else '0' END) as MHRA, sum(case when col4 = '000006' then col10 else '0' END) as MConveyance, sum(col10) as MTot," +
                    //    " '0' as act_salary, '0' as EBasic, '0' as EHRA, '0' as EConveyance , '0' as Etot, '0' as ot_hrs, '0' as OTAmount, '0' as FBasic, " +
                    //    "'0' Ftot, 0 PF, 0 as ESI, 0 LWF, 0 as Advance, 0 as Lunch, '0' bal_adv   from enx_tab en where en.type = 'KES'" +
                    //    " and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in ('000001', '000002', '000006') group by col1 " +
                    //    "union  all" +
                    //    " SELECT emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days, 0 as Mbasic, 0 mhra, 0 as mconvey , 0 as mtot," +
                    //    " act_salary, '0' as EBasic, '0' as EHRA, '0' as EConveyance, '0' as Etot, '0' as ot_hrs, '0' as OTAmount  , '0' as FBasic, " +
                    //    "'0' Ftot, 0 PF, 0 as ESI, 0 LWF, 0 as Advance, 0 as Lunch, '0' bal_adv from  ( select es.bal_adv, em.vch_num as emp_code," +
                    //    " em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days, es.ot_hrs, em.act_salary, es.head_type," +
                    //    " es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count, nvl((to_number(sh.col41)), '999') head_order from" +
                    //    " emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "'" +
                    //    " and sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and" +
                    //    " em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP'" +
                    //    " and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') " +
                    //    "order by es.emp_code, es.head_id ) a group by emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days," +
                    //    " ot_hrs, act_salary, bal_adv" +
                    //    " union all" +
                    //    " SELECT emp_code, external_empno, emp_name, f_name, month_name, '0' as month_days, '0' paid_days, 0 as Mbasic, 0 mhra, 0 as mconvey" +
                    //    ", 0 as mtot, '0' act_salary, '0' as ebasic, '0' as ehra, '0' as econey, '0' as etot, '0' ot_hrs, '0' as otamount , '0' as fbasic, " +
                    //    "'0' as ftot, sum(case when head_id = '000011' then head_count else '0' END) as EPF, sum(case when head_id = '000014' " +
                    //    "then head_count else '0' END) as ESI , sum(case when head_id = '000017' then head_count else '0' END) as LWF, sum(case when head_id" +
                    //    " = '000021' then head_count else '0' END) as ADV , sum(case when head_id = '000022' then head_count else '0' END) as Lunch, '0' bal_adv" +
                    //    " from  (select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days," +
                    //    " es.ot_hrs, em.act_salary, es.head_type, es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count," +
                    //    " nvl((to_number(sh.col41)), '999') head_order from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num " +
                    //    "and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code" +
                    //    " and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and" +
                    //    " es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')  order by es.emp_code," +
                    //    " es.head_id ) a GROUP BY emp_code, external_empno, emp_name, f_name, month_name ) TAB group by EMP_CODE";
                    //mq = "select emp_code,max(external_empno) as external_empno,max(emp_name) emp_name,max(f_name) f_name,max(month_name) month_name,max(month_days) as month_days,max(paid_days) " +
                    //    "paid_days ,sum(MBasic) MBasic,sum(MHRA) MHRA,sum(MConveyance) MConveyance,sum(mtot) MTot,sum(act_salary) act_salary,sum(EBasic) EBasic,sum(EHRA) EHRA,sum(EConveyance) " +
                    //    "EConveyance,sum(Etot) Etot,sum(ot_hrs) ot_hrs,sum(OTAmount) OTAmount,sum(FBasic) FBasic,SUM(Ftot) Ftot,SUM(PF) PF,SUM(ESI) ESI,SUM(LWF) LWF,SUM(Advance) Advance," +
                    //    "(SUM(ETOT) - SUM(PF) - SUM(ESI)) AS NET_BOOK,(SUM(FTOT) - SUM(PF) - SUM(ESI)) AS Net_Actual,(SUM(FTOT) - SUM(PF) - SUM(ESI))-(SUM(ETOT) - SUM(PF) - SUM(ESI))  AS Cash, " +
                    //    "sum(bal_adv) bal_adv,sum(bal_adv) - sum(Advance) as Rest_Adv  FROM ( select en.col1 as emp_code, '-' as external_empno, null as emp_name, '-' as f_name, '-' as month_name, " +
                    //    "'0' as month_days, '0' as paid_days, sum(case when col4 = '000001' then to_number(col10) else 0 END) as MBasic, sum(case when  col4 = '000002' then to_number(col10) else 0 END) " +
                    //    "as MHRA, sum(case when col4 = '000006' then to_number(col10) else 0 END) as MConveyance, sum(col10) as MTot, 0 as act_salary, 0 as EBasic, 0 as EHRA, 0 as EConveyance" +
                    //    " , 0 as Etot, 0 as ot_hrs, 0 as OTAmount, 0 as FBasic, 0 Ftot, 0 PF, 0 as ESI, 0 LWF, 0 as Advance, 0 as Lunch, 0 bal_adv   from enx_tab en where en.type = 'KES'" +
                    //    " and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in ('000001', '000002', '000006') group by col1 " +
                    //    "union  all SELECT emp_code,external_empno,emp_name,f_name,month_name,month_days,paid_days,0 as Mbasic,0 mhra,0 as mconvey,0 as mtot,to_number(act_salary)," +
                    //    "sum((case when  head_id = '000001' then to_number(head_count) else 0 end)) as Basic,sum((case when  head_id = '000002' then to_number(head_count) else 0 end)) as HRA" +
                    //    ",sum((case when head_id = '000006' then to_number(head_count) else 0 end )) as Conveyance,sum((case when  head_id not in ('777776', '777777') then " +
                    //    "to_number(head_count) else 0 end )) as Etot,to_number(ot_hrs),sum((case when head_id = '777776' then to_number(head_count) else 0 end)) as OT," +
                    //    "sum((case when  head_id = '777777' then to_number(head_count) else 0 end )) as FBasic,sum((case when head_id  in ('777776', '777777') then to_number(head_count) else 0 end))" +
                    //    " as Ftot,0 as pf,0 as esi,0 as lwf,0 as adv,0 as Lunch , to_number( bal_adv) as bal_adv from  ( select es.bal_adv, em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, " +
                    //    "es.month_name, es.month_days, es.paid_days, es.ot_hrs, em.act_salary, es.head_type, es.head_id, nvl(upper(sh.col3), 'Actual_OT') head_name, es.head_count, " +
                    //    "nvl((to_number(sh.col41)), '999') head_order from emp_salary_process es left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' " +
                    //    "and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' " +
                    //    "and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and " +
                    //    "es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id in ('000001', '000002', '000006', '777776', '777777') order by es.emp_code, es.head_id )" +
                    //    " a group by emp_code, external_empno, emp_name, f_name, month_name, month_days, paid_days,ot_hrs, act_salary, bal_adv union all SELECT emp_code, external_empno, " +
                    //    "null as emp_name, f_name, month_name, '0' as month_days, '0' paid_days, 0 as Mbasic, 0 mhra, 0 as mconvey, 0 as mtot, 0 act_salary," +
                    //    "0 as ebasic, 0 as ehra, 0 as econey, 0 as etot, 0 ot_hrs, 0 as otamount , 0 as fbasic, 0 as ftot, sum(case when head_id = '000011' then to_number(head_count) else 0 END)" +
                    //    " as EPF,sum(case when head_id = '000014' then to_number(head_count) else 0 END) as ESI , sum(case when head_id = '000017' then to_number(head_count) else 0 END) as LWF," +
                    //    "sum(case when head_id = '000021' then to_number(head_count) else 0 END) as ADV , sum(case when head_id = '000022' then to_number(head_count) else 0 END) as Lunch," +
                    //    " 0 bal_adv from (select em.vch_num as emp_code, em.external_empno, es.emp_name, em.f_name, es.month_name, es.month_days, es.paid_days, es.ot_hrs, em.act_salary," +
                    //    " es.head_type, es.head_id, nvl(upper(sh.col3),'Actual_OT') head_name, es.head_count, nvl((to_number(sh.col41)), '999') head_order from emp_salary_process es " +
                    //    "left join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                    //    "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
                    //    "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')" +
                    //    "  order by es.emp_code, es.head_id ) a GROUP BY emp_code,external_empno, emp_name, f_name, month_name ) TAB group by EMP_CODE";
                    #endregion

                    string cc = "";
                    if (!ecat.Trim().Equals(""))
                    {
                        cc = " and a.emp_category='" + ecat + "'";
                    }
                    mq = "select a.emp_code emp_code,a.external_empno,external_empno,(a.first_name||' '||replace(a.middle_name, '0', '')||' '||replace(a.last_name, '0', '')) emp_name,a.f_name father_name,to_char(B.m_lastdt,'month') month_name," +
                        "b.mdays month_days, b.paiddays paid_days, b.errate1 MBasic, B.ERRATE2 MHRA, B.ERRATE3 MConveyance, B.DED8 DMEd, B.DED5 DCanten, B.DED7 DPT, " +
                        "B.DED6 DOth,B.DED10 DOthrP,(b.errate1 + B.ERRATE2 + B.ERRATE3) MTot,(B.act_F) act_salary,(B.ER1+b.AR1) EBasic,B.ER2+B.AR2 EHRA, B.ER3+B.AR3 EConveyance," +
                        "(B.AR1 + B.AR2 + B.AR3+B.ER1 + B.ER2 + B.ER3) Etot," +
                        "(b.ot_hrs_v) ot_hrs,(B.ACT_OT+B.ACT_OT_ARR) OTAmount,B.ACTRATE FBasic, B.ACT_F+B.ACT_ARR + B.ACT_OT+B.ACT_OT_ARR Ftot,B.PF_F PF, B.ESI_F ESI, B.LWF_F LWF, B.ADV_F Advance, " +
                        "B.NETSALARY AS Net_Book,B.ACT_F+B.ACT_ARR AS Net_Actual,B.amt1-((B.amt1- b.ot)) AS Cash, B.ADV_BAL bal_adv, B.ADV_BAL- B.ADV_F  as Rest_Adv," +
                        "b.ot_hrs AS OT_HRS_N,(B.amt1- b.ot) AS DIFF,B.ESI_OT from EMP_MASTER A " +
                        "INNER JOIN PAYMAIN B ON A.VCH_NUM = B.EMP_CODE AND A.CLIENT_UNIT_ID = B.CLIENT_UNIT_ID AND B.CURRYYYYMMM = '" + curryyyymmm + "' " +
                        "WHERE A.TYPE = 'EMP' AND A.CLIENT_ID = '" + clientid_mst + "' AND A.CLIENT_UNIT_ID = '" + unitid_mst + "' " + cc + " order by emp_name asc";
                    dtm = sgen.getdata(userCode, mq);
                    //sgen.open_report_bydt_xml(userCode, dtm, "act_monthly_salary", "Actual Monthly Salary");
                    sgen.open_report_bydt_xml(userCode, dtm, "newact_monthly_salary", "Actual Monthly Salary");
                }
                if (command == "Monthly Salary (Dept/Desig)")
                {
                    /////////////////////=======================
                    #region dt earn                 
                    mq = "select em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern," +
                        "es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
                        "" + cond_dpjoin + "" + cond_dgjoin + "" +
                        "inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
                        "group by col1) en on en.col1 = es.emp_code " +
                        "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
                        "and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
                        "and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                        "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Earning' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                        "and es.client_unit_id in ('" + ut + "')";
                    DataTable dtern = sgen.getdata(userCode, mq);
                    Pivot pv = new Pivot(dtern, MyGuid);
                    dtern = pv.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                    { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern" },
                    new string[] { "head_name", "head_order" }, "ERN_TOT");
                    #endregion
                    ////////////////////=======================
                    #region dt deduct                  
                    mq1 = "select em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern," +
                           "es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
                           "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                           "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
                           "" + cond_dpjoin + "" + cond_dgjoin + "" +
                           "inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
                           "group by col1) en on en.col1 = es.emp_code " +
                           "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
                           "and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                           "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
                           "and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                           "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Deduction' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                           "and es.client_unit_id in ('" + ut + "')";
                    DataTable dtded = sgen.getdata(userCode, mq1);
                    Pivot pv1 = new Pivot(dtded, MyGuid);
                    dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                    { "emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" },
                    new string[] { "head_name" }, "DED_TOT");
                    #endregion
                    dtm = dtern.Copy();
                    foreach (DataColumn dc in dtded.Columns)
                    {
                        if (dc.Ordinal > 9) dtm.Columns.Add(dc.ColumnName);
                    }
                    string netname = "NETPAYABLE";
                    dtm.Columns.Add(netname);
                    for (int r = 0; r < dtded.Rows.Count; r++)
                    {
                        foreach (DataColumn dc in dtded.Columns)
                        {
                            if (dc.Ordinal > 9)
                            {
                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
                            }
                        }
                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
                    }
                    var dtf = dtm;
                    var dtcols = new DataTable();
                    for (int c = 0; c < 50; c++)
                    {
                        string nn = "Col" + (c + 1);
                        dtcols.Columns.Add(nn);
                    }
                    var drc = dtcols.NewRow();
                    drc[0] = "-";
                    dtcols.Rows.Add(drc);
                    bool netadded = false;
                    for (int c = 0; c < 50; c++)
                    {
                        try
                        {
                            if (!dtm.Columns[c + 10].ColumnName.Equals(netname))
                            {
                                if (netadded)
                                {
                                    throw new Exception();
                                }
                                dtcols.Rows[0][c] = dtm.Columns[c + 10].ColumnName.ToString();
                                dtm.Columns[c + 10].ColumnName = "VCol" + (c + 1);
                            }
                            else
                            {
                                string nn = "VCol" + (c + 1);
                                dtm.Columns.Add(nn);
                                netadded = true;
                            }
                        }
                        catch (Exception err)
                        {
                            string nn = "VCol" + (c + 1);
                            dtm.Columns.Add(nn);
                            dtcols.Rows[0][c] = "-";
                        }
                    }
                    dtm.Columns[netname].SetOrdinal(56);
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtm);
                    dtcols.TableName = "heads";
                    dst.Tables.Add(dtcols);
                    dst.Tables.Add();
                    sgen.open_report_byDs_xml(userCode, dst, "emp_monthly_salary_dept", "Monthly Salary (Dept/Desig)");
                }
                //new hr
                if (command == "Monthly Salary (Dept/Desig) New" || command == "Contractor Monthly Salary")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                            ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                            "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + "+AR" + e + " as ER" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + "+ARD" + e + " as DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    dth.AcceptChanges();
                    mq1 = "select nvl(vd.c_name,'Self') as Contr, e.emp_code,e.external_empno,(e.first_name||replace(e.middle_name, '0', '')||replace(e.last_name, '0', '')) emp_name,dp.master_name dept,dg.master_name desig,e.f_name," +
                      "p.month_id,m.master_name month_name,p.mdays month_days,p.paiddays,e.pf_no,e.pf_uan,e.esi_no,substr(p.curryyyymmm,0,4) salary_yr" +
                      ",p.errate1 basic_ern," +
                      "p.errate2 hra_ern,p.errate3 con_ern," + mq + " TOTEARN,TOTDED,NETSALARY from emp_master e " +
                      "inner join paymain p on e.vch_num=p.emp_code and p.type='PAY' and e.client_id=p.client_id and e.client_unit_id=p.client_unit_id and p.curryyyymmm='" + curryyyymmm + "' " +
                      "inner join master_setting dp on dp.master_id=e.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,e.client_id)=1 and find_in_set(dp.client_unit_id,e.client_unit_id)=1 " +
                      "inner join master_setting dg on dg.master_id=e.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,e.client_id)=1 and find_in_set(dg.client_unit_id,e.client_unit_id)=1 " +
                      "left  join (select '000000' vch_num,'Self' c_name from dual union all select vch_num, c_name " +
                "from clients_mst where type='BCD' and substr(vch_num,0,3)='203' and contr='Y' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "') vd on " +
                "vd.vch_num=e.contr  " +
                      "inner join master_setting m on m.master_id=p.month_id and m.type='MNT' " +
                      "where e.type='EMP' and e.client_id='" + clientid_mst + "' and e.client_unit_id='" + unitid_mst + "' order by e.emp_code";
                    dtm = sgen.getdata(userCode, mq1);
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtm);
                    dth.TableName = "heads";
                    dst.Tables.Add(dth);
                    if (command == "Contractor Monthly Salary") { sgen.open_report_byDs_xml(userCode, dst, "newcontrms", "Contractor Monthly Salary"); }
                    else sgen.open_report_byDs_xml(userCode, dst, "newemp_monthly_salary_dept_2", "Monthly Salary (Dept/Desig) New");
                }
                if (command == "Monthly Salary New (Decimal)" || command == "Merged_Report_Sum" || command == "Monthly Salary Statement (Stamp)")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                            ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                            "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + "+AR" + e + " as ER" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + "+ARD" + e + " as DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    dth.AcceptChanges();
                    if (command == "Merged_Report_Sum")
                    {
                        mq1 = "select '-' as Contr,p.client_unit_id,c.unit_name, e.emp_code,e.external_empno,(e.first_name||replace(e.middle_name, '0', '')" +
                       "||replace(e.last_name, '0', '')) emp_name,dp.master_name dept,dg.master_name desig,e.f_name," +
                     "p.month_id,m.master_name month_name,p.mdays month_days,p.paiddays,e.pf_no,e.pf_uan,e.esi_no,substr(p.curryyyymmm,0,4) salary_yr" +
                     ",p.errate1 basic_ern," +
                     "p.errate2 hra_ern,p.errate3 con_ern," + mq + " TOTEARN,TOTDED,NETSALARY from emp_master e " +
                     "inner join paymain p on e.vch_num=p.emp_code and p.type='PAY' and e.client_id=p.client_id and e.client_unit_id=p.client_unit_id and p.curryyyymmm='" + curryyyymmm + "' " +
                     "inner join master_setting dp on dp.master_id=e.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,e.client_id)=1 and find_in_set(dp.client_unit_id,e.client_unit_id)=1 " +
                     "inner join master_setting dg on dg.master_id=e.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,e.client_id)=1 and find_in_set(dg.client_unit_id,e.client_unit_id)=1 " +
                     "inner join master_setting m on m.master_id=p.month_id and m.type='MNT' " +
                      "INNER join company_unit_profile c on p.client_unit_id = c.cup_id " +
                     "where e.type='EMP' and e.client_id='" + clientid_mst + "' and e.client_unit_id in('" + ut + "') order by e.emp_code";
                    }
                    else
                    {
                        mq1 = "select nvl(vd.c_name,'Self') as Contr,p.client_unit_id,c.unit_name, e.emp_code,e.external_empno,(e.first_name||replace(e.middle_name, '0', '')" +
                        "||replace(e.last_name, '0', '')) emp_name,dp.master_name dept,dg.master_name desig,e.f_name," +
                      "p.month_id,m.master_name month_name,p.mdays month_days,p.paiddays,e.pf_no,e.pf_uan,e.esi_no,substr(p.curryyyymmm,0,4) salary_yr" +
                      ",p.errate1 basic_ern," +
                      "p.errate2 hra_ern,p.errate3 con_ern," + mq + " TOTEARN,TOTDED,NETSALARY from emp_master e " +
                      "inner join paymain p on e.vch_num=p.emp_code and p.type='PAY' and e.client_id=p.client_id and e.client_unit_id=p.client_unit_id and p.curryyyymmm='" + curryyyymmm + "' " +
                      "inner join master_setting dp on dp.master_id=e.emp_dept and dp.type='MDP' and find_in_set(dp.client_id,e.client_id)=1 and find_in_set(dp.client_unit_id,e.client_unit_id)=1 " +
                      "inner join master_setting dg on dg.master_id=e.emp_desig and dg.type='MDG' and find_in_set(dg.client_id,e.client_id)=1 and find_in_set(dg.client_unit_id,e.client_unit_id)=1 " +
                      "left  join (select '000000' vch_num,'Self' c_name from dual union all select vch_num, c_name " +
                "from clients_mst where type='BCD' and substr(vch_num,0,3)='203' and contr='Y' and client_id='" + clientid_mst + "' and client_unit_id in ('" + ut + "')) vd on " +
                "vd.vch_num=e.contr  " +
                      "inner join master_setting m on m.master_id=p.month_id and m.type='MNT' " +
                       "INNER join company_unit_profile c on p.client_unit_id = c.cup_id " +
                      "where e.type='EMP' and e.client_id='" + clientid_mst + "' and e.client_unit_id in('" + ut + "') order by e.emp_code";
                    }
                    dtm = sgen.getdata(userCode, mq1);
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtm);
                    dth.TableName = "heads";
                    dst.Tables.Add(dth);
                    if (command == "Merged_Report_Sum") sgen.open_report_byDs_xml(userCode, dst, "newmerge_sum", "Merged Report Summed");
                    else if (command == "Monthly Salary Statement (Stamp)") sgen.open_report_byDs_xml(userCode, dst, "newemp_monthly_salary_dept_4", "Monthly Salary Statement (Stamp)");
                    else
                    {
                        if (userCode.Trim().ToUpper().Equals("GLOVAL"))
                        {
                            sgen.open_report_byDs_xml(userCode, dst, "newemp_monthly_salary_dept_3glvl", "Monthly Salary (Dept/Desig) New");
                        }
                        else
                        {
                            sgen.open_report_byDs_xml(userCode, dst, "newemp_monthly_salary_dept_3", "Monthly Salary (Dept/Desig) New");
                        }
                    }
                }
                if (command == "Salary Statement" || command == "Salary Statement 2")
                {
                    /////////////////////=======================
                    #region dt earn                 
                    string cond = "";
                    cond = curryyyymmm;
                    mq = "select   lv.EL,lv.CL,lv.SL,lv.PF,lv.ESI,es.client_unit_id,cp.unit_name,em.old_empcode,to_number(pdays) as pdays,to_number(wdays) as wdays,to_number(hdays) as hdays, to_number(bs.basic_ern) basic_ern," +
                        "to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern,to_number(bs.oth_ern) oth_ern,substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code," +
                        "em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig" +
                     ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,bs.gm_ern," +
                     "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
                     "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type='KSP' and sh.client_id=es.client_id and sh.client_unit_id=es.client_unit_id and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                     "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " + cond_catjoin + cond_dpjoin + "" + cond_dgjoin + "" +
                     "inner join (select col1,sum( gm_ern) as gm_ern,ref_code,sum(basic_ern) as basic_ern,sum(hra_ern) hra_ern,sum(oth_ern) oth_ern,sum(cony_ern) cony_ern from (select col1,(case when col4='000001' then " +
                     " sum(col10) else 0 end) as basic_ern,(case when col4 = '000002' then  sum(col10) else 0 end) as hra_ern," +
                     " (case when col4 = '000005' then sum(col10) else 0 end) as oth_ern,(case when col4 = '000006' then sum(col10) else 0 end) as cony_ern,sum(col10) as  gm_ern, " +
                     "    trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "'" +
                     "    and client_unit_id in ('" + ut + "') group by col1,trim(ref_code),col4) a group by col1, ref_code) bs on bs.col1 = es.emp_code and bs.ref_code = es.inc_ver " +
                     "inner join (select client_id,client_unit_id,vch_num,vch_date,type,currmmmyyyy,emp_code,emp_name, to_number(max(CL)) as cl,to_number(max(EL)) EL,to_number(max(SL)) as SL  " +
                     ",to_number(sum(PF)) as PF,to_number(sum(ESI)) as ESI   from (select client_id, client_unit_id, vch_num, vch_date, type, currmmmyyyy, emp_code, emp_name, " +
                     "(case when head_flag = 'ELH'  and  head_id = '000001' then head_count else '0' end) CL," +
                     "(case when head_flag = 'ELH'  and head_id = '000002' then head_count else '0' end) EL," +
                     "(case when head_flag = 'ELH'  and  head_id = '000003' then head_count else '0' end) SL," +
                     "(case when head_flag = 'ESH'  and  head_id = '000011' then head_count else '0' end) PF," +
                     "(case when head_flag = 'ESH'  and  head_id = '000014' then head_count else '0' end) ESI" +
                     ",head_id from emp_salary_process) a group by client_id, client_unit_id, vch_num, vch_date, type, currmmmyyyy, emp_code, emp_name) lv on es.client_id = lv.client_id " +
                     "and es.client_unit_id = lv.client_unit_id and es.emp_code = lv.emp_code and es.currmmmyyyy = lv.currmmmyyyy " +
                     "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                     "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                     "inner join company_unit_profile cp on es.client_unit_id = cp.cup_id " +
                     "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                     "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000019' order by em.emp_code";
                    DataTable dtern = sgen.getdata(userCode, mq);
                    Pivot pv = new Pivot(dtern, MyGuid);
                    try
                    {
                        dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
                        {"el","cl","sl","ESI","PF","client_unit_id","unit_name","old_empcode","pdays","wdays","hdays","oth_ern", "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern","pf_no","pf_uan","esi_no","salary_yr","basic_ern","hra_ern","cony_ern" },
                        new string[] { "head_name", "head_order" }, "ERN_TOT");
                    }
                    catch (Exception ex) { }
                    #endregion
                    DataView dv = dtern.DefaultView;
                    dv.Sort = "emp_code asc";
                    dtern = dv.ToTable();
                    ////////////////////=======================
                    #region dt deduct                                    
                    mq1 = "select 0 as el,0 as cl,0 as sl,0 as PF,0 as ESI,'-' client_unit_id,'-' unit_name,'-' old_empcode,0 as pdays,0 as wdays,0 as hdays,to_number(nvl(bs.basic_ern,'0')) as basic_ern,to_number(nvl(hs.hra_ern,'0')) as hra_ern" +
                        ",to_number(nvl(cs.cony_ern,'0')) as cony_ern,0 as oth_ern, substr(es.currmmmyyyy,0,4) as salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name ,'-') dept , nvl(mdg.master_name,'-') desig" +
                     ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
                        "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id=es.client_id and sh.client_unit_id=es.client_unit_id and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " + cond_catjoin + " " +
                        "" + cond_dpjoin + "" + cond_dgjoin + "" +
                        "inner join (select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1) en on en.col1 = es.emp_code " +
                        "INNER join (select col1, SUM(col10) as basic_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000001' group by col1) bs on bs.col1 = es.emp_code " +
                        "INNER join (select col1, SUM(col10) as hra_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000002' group by col1) hs on hs.col1 = es.emp_code  " +
                        "INNER join (select col1, SUM(col10) as cony_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000006' group by col1) cs on cs.col1 = es.emp_code " +
                        "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP'  and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                        "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP'" +
                        " and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id<>'000022' order by em.emp_code";
                    DataTable dtded = sgen.getdata(userCode, mq1);
                    Pivot pv1 = new Pivot(dtded, MyGuid);
                    try
                    {
                        dtded = pv1.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
                        {"el","cl","sl","ESI","PF","client_unit_id","unit_name","old_empcode","pdays","wdays","hdays","oth_ern", "emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" ,"pf_no","pf_uan","esi_no" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
                        new string[] { "head_name", "head_order" }, "DED_TOT");
                    }
                    catch (Exception ex) { }
                    #endregion
                    dv = dtded.DefaultView;
                    dv.Sort = "emp_code asc";
                    dtded = dv.ToTable();
                    dtm = dtern.Copy();
                    foreach (DataColumn dc in dtded.Columns)
                    {
                        if (dc.Ordinal > 28) dtm.Columns.Add(dc.ColumnName);
                    }
                    string netname = "NETPAYABLE";
                    dtm.Columns.Add(netname);
                    for (int r = 0; r < dtded.Rows.Count; r++)
                    {
                        foreach (DataColumn dc in dtded.Columns)
                        {
                            if (dc.Ordinal > 28)
                            {
                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
                            }
                        }
                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
                    }
                    var dtf = dtm;
                    var dtcols = new DataTable();
                    for (int c = 0; c < 50; c++)
                    {
                        string nn = "Col" + (c + 1);
                        dtcols.Columns.Add(nn);
                    }
                    var drc = dtcols.NewRow();
                    drc[0] = "-";
                    dtcols.Rows.Add(drc);
                    bool netadded = false;
                    for (int c = 0; c < 50; c++)
                    {
                        try
                        {
                            if (!dtm.Columns[c + 29].ColumnName.Equals(netname))
                            {
                                if (netadded)
                                {
                                    throw new Exception();
                                }
                                dtcols.Rows[0][c] = dtm.Columns[c + 29].ColumnName.ToString();
                                dtm.Columns[c + 29].ColumnName = "VCol" + (c + 1);
                            }
                            else
                            {
                                string nn = "VCol" + (c + 1);
                                dtm.Columns.Add(nn, typeof(decimal));
                                netadded = true;
                            }
                        }
                        catch (Exception err)
                        {
                            string nn = "VCol" + (c + 1);
                            dtm.Columns.Add(nn);
                            dtcols.Rows[0][c] = "-";
                        }
                    }
                    dtm.Columns[netname].SetOrdinal(68);
                    DataTable dtCloned = dtm.Clone();
                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
                    {
                        if (i > 29)
                        { dtCloned.Columns[i].DataType = typeof(decimal); }
                    }
                    foreach (DataRow row in dtm.Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    //dtm.TableName = "prepcur";
                    dtCloned.TableName = "prepcur";
                    dst.Tables.Add(dtCloned);
                    dtcols.TableName = "heads";
                    dst.Tables.Add(dtcols);
                    dst.Tables.Add();
                    if (command == "Salary Statement 2") sgen.open_report_byDs_xml(userCode, dst, "emp_salary_stat_2", "emp_salary_stat_2");
                    else if (command == "Merged_Report") sgen.open_report_byDs_xml(userCode, dst, "emp_merged_salary", "emp_merged_salary");
                    else sgen.open_report_byDs_xml(userCode, dst, "emp_salary_stat", "emp_salary_stat");
                } //done
                if (command == "Contractor Salary Summary")
                {
                    mq = "select distinct a.col18 as acode,b.c_name,b.addr as address,b.pincode as Pincode,b.c_gstin as GSTIN,to_number(a.col12) as rrate,to_number(a.col13) as comm_per," +
                        "to_number(a.col14) as hrs_tot,to_number(a.col15) as bas_amt,to_number(a.col16) as commision,to_number(A.COL17) AS others,to_number(a.col19) as tot_payable,a.col10 as month_id ,a.col21 as month_name" +
                        ",col40 as curryyyymmm,SUBSTR(a.col40,1,4)  as yr " +
                        " from kc_tab a inner join clients_mst b on a.client_id = b.client_id and a.client_unit_id = b.client_unit_id " +
                        "and b.type = 'BCD' and substr(b.vch_num,0,3)='203' and a.col18 = b.vch_num where a.type = 'CES' and a.client_id='" + cl + "' and a.client_unit_id in ('" + ut + "')" +
                        " and trim(col40)='" + curryyyymmm + "' order by 3";
                    //mq = "select salary_yr,vd_name,name,f_name,emp_code,external_empno,month_name,max(ot_hrs) as ot_hrs,max(ot_mst) as ot_mst," +
                    //  "sum(ot) ot,sum(arr) arr,(sum(ot)+sum(arr)) totalot,max(esi_on_ot) esi_on_ot,((sum(ot)+sum(arr))-max(esi_on_ot)) netpay " +
                    //  "from (select trim(substr(sp.currmmmyyyy,0,4)) salary_yr,to_number(ot_mst) ot_mst,vd.c_name vd_name," +
                    //  "trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Name," +
                    //  "trim(em.f_name) f_name,trim(em.emp_code) emp_code,trim(em.external_empno) external_empno,to_number(sp.ot_hrs) as OT_hrs," +
                    //  "trim(sp.month_name) as month_name,(case when upper(trim(sp.head_name)) like 'ARR_%' then to_number(sp.head_count) else 0 end) Arr," +
                    //  "(case when upper(trim(sp.head_name)) not like 'ARR_%' then to_number(sp.head_count) else 0 end) OT,to_number(a.esi_on_ot) esi_on_ot " +
                    //  "from emp_salary_process sp inner join emp_master em on sp.emp_code = em.vch_num and em.type='EMP' and " +
                    //  "em.client_id=sp.client_id and em.client_unit_id = sp.client_unit_id " +
                    //  "inner join clients_mst vd on vd.vch_num = em.contr and vd.type = 'PVD' and vd.client_id = em.client_id and " +
                    //  "vd.client_unit_id = em.client_unit_id inner join (select emp_code, head_count esi_on_ot from emp_salary_process " +
                    //  "where type = 'ESP' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and currmmmyyyy = '" + curryyyymmm + "' and " +
                    //  "head_flag = 'ESH' and head_id = '000022') a on sp.emp_code = a.emp_code inner join(select col1, sum(col10) as ot_mst " +
                    //  "from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 in (select  col1 from " +
                    //  "enx_tab where type = 'OTC' and client_unit_id in ('" + ut + "')) group by col1) ot on ot.col1 = sp.emp_code " +
                    //  "where sp.type = 'ESP' and sp.client_id = '" + cl + "' and sp.client_unit_id in ('" + ut + "') and sp.currmmmyyyy = '" + curryyyymmm + "' and " +
                    //  "sp.head_flag = 'ESH' and sp.head_id = '000019') group by salary_yr,vd_name,name,f_name,emp_code,external_empno," +
                    //  "month_name having max(ot_hrs) <> 0 order by vd_name";
                    DataTable dtot = sgen.getdata(userCode, mq);
                    dtot.TableName = "prepcur";
                    dst.Tables.Add(dtot);
                    sgen.open_report_byDs_xml(userCode, dst, "contsumm", "Contractor Monthly Summary");
                } //done
                if (command == "Monthly Salary Register")
                {
                    /////////////////////=======================                
                    #region dtleave                     
                    mq = @"select em.emp_code,em.external_empno,es.emp_name,mdp.master_name dept,mdg.master_name desig,em.f_name,es.month_name,
es.month_days,es.paid_days,en.gm_ern,es.head_type,es.head_id,upper(lv.col1) head_name,es.head_count from emp_salary_process es 
INNER join kc_tab lv on es.head_id = lv.vch_num and lv.type = 'KLV' and lv.client_id = '" + cl + "' " +
"inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
"inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
"group by col1) en on en.col1 = es.emp_code " +
"INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type='MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
"INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
"where es.month_id = '" + monthid + "' and es.head_flag = 'ELH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in " +
"('" + ut + "')";
                    DataTable dtl = sgen.getdata(userCode, mq);
                    Pivot pvl = new Pivot(dtl, MyGuid);
                    dtl = pvl.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                    { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern" },
                    new string[] { "head_name" }, "LV_TOT");
                    #endregion
                    /////////////////////=======================
                    #region dt earn                 
                    mq = "select em.emp_code,em.external_empno,es.emp_name,mdp.master_name dept,mdg.master_name desig,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern," +
                        "es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count from emp_salary_process es " +
                        "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
                        "" + cond_dpjoin + "" + cond_dgjoin + "" +
                        "inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
                        "group by col1) en on en.col1 = es.emp_code " +
                        "INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                        "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Earning' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                        "and es.client_unit_id in ('" + ut + "') order by sh.col3 ASC";
                    DataTable dtern = sgen.getdata(userCode, mq);
                    Pivot pv = new Pivot(dtern, MyGuid);
                    dtern = pv.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                    { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern" },
                    new string[] { "head_name" }, "ERN_TOT");
                    #endregion
                    ////////////////////=======================
                    #region dt deduct                  
                    mq1 = "select em.emp_code,em.external_empno,es.emp_name,mdp.master_name dept,mdg.master_name desig,em.f_name,es.month_name,es.month_days,es.paid_days,en.gm_ern," +
                           "es.head_type,es.head_id,upper(sh.col3) head_name,es.head_count from emp_salary_process es " +
                           "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                           "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "')" +
                           "" + cond_dpjoin + "" + cond_dgjoin + "" +
                           "inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') " +
                           "group by col1) en on en.col1 = es.emp_code " +
                           "INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                           "INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                           "where es.month_id = '" + monthid + "' and es.head_flag = 'ESH' and es.head_type = 'Deduction' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                           "and es.client_unit_id in ('" + ut + "') order by sh.col3 ASC";
                    DataTable dtded = sgen.getdata(userCode, mq1);
                    Pivot pv1 = new Pivot(dtded, MyGuid);
                    dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                    { "emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" },
                    new string[] { "head_name" }, "DED_TOT");
                    #endregion
                    ///////////////////========================
                    #region dt earn master                 
                    mq = @"select em.emp_code,em.external_empno,(replace(em.FIRST_NAME,'0','')||' '||replace(em.MIDDLE_NAME,'0','')||' '||replace(em.LAST_NAME,'0','')) emp_name,
mdp.master_name dept,mdg.master_name desig,em.f_name,'' month_name,'' month_days,'' paid_days,en.col2 gm_ern,en.col8 head_type,
en.col4,upper(sh.col3) head_name,en.col10 head_count from enx_tab en 
INNER join vehicle_master sh on en.col4 = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
"inner join emp_master em on em.vch_num = en.col1 and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
"INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
"INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG'  and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
"where en.type = 'KES' and en.client_id = '" + cl + "' and en.client_unit_id in ('" + ut + "') order by sh.col3 ASC";
                    DataTable dtem = sgen.getdata(userCode, mq);
                    Pivot pvem = new Pivot(dtem, MyGuid);
                    try
                    {
                        dtem = pvem.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                        { "emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern" },
                        new string[] { "head_name" }, "ERNM_TOT");
                    }
                    catch (Exception ex) { }
                    #endregion
                    string netname = "";
                    bool netadded = false;
                    #region lv
                    dtm = dtl.Copy();
                    var dtcols = new DataTable();
                    for (int c = 0; c < 10; c++)
                    {
                        dtcols.Columns.Add("LV" + (c + 1));
                    }
                    dtcols.Columns.Add("LVC_TOT");
                    var drc = dtcols.NewRow();
                    drc[0] = "-";
                    dtcols.Rows.Add(drc);
                    netname = "LV_TOT";
                    netadded = false;
                    for (int c = 0; c < 10; c++)
                    {
                        try
                        {
                            if (!dtl.Columns[c + 10].ColumnName.Equals(netname))
                            {
                                if (netadded) { throw new Exception(); }
                                dtcols.Rows[0][c] = dtl.Columns[c + 10].ColumnName.ToString();
                                dtm.Columns[c + 10].ColumnName = "VLV" + (c + 1);
                            }
                            else
                            {
                                dtm.Columns.Add("VLV" + (c + 1));
                                netadded = true;
                            }
                        }
                        catch (Exception err)
                        {
                            dtm.Columns.Add("VLV" + (c + 1));
                            dtcols.Rows[0][c] = "";
                        }
                    }
                    dtm.Columns[netname].SetOrdinal(20);
                    #endregion
                    #region earn
                    var dte = dtern;
                    for (int c = 1; c <= 10; c++)
                    {
                        dtcols.Columns.Add("ER" + c);
                    }
                    dtcols.Columns.Add("E_TOT");
                    netname = "ERN_TOT";
                    netadded = false;
                    for (int c = 0; c < 10; c++)
                    {
                        try
                        {
                            if (!dte.Columns[c + 10].ColumnName.Equals(netname))
                            {
                                if (netadded) { throw new Exception(); }
                                dtcols.Rows[0][c + 11] = dte.Columns[c + 10].ColumnName.ToString();
                                dtm.Columns.Add("VER" + (c + 1));
                            }
                            else
                            {
                                dtm.Columns.Add("VER" + (c + 1));
                                netadded = true;
                            }
                        }
                        catch (Exception err)
                        {
                            dtm.Columns.Add("VER" + (c + 1));
                            dtcols.Rows[0][c] = "";
                        }
                    }
                    dtm.Columns.Add(netname);
                    dtm.Columns[netname].SetOrdinal(31);
                    #endregion
                    #region ded
                    var dtd = dtded;
                    for (int c = 1; c <= 10; c++)
                    {
                        dtcols.Columns.Add("DED" + c);
                    }
                    dtcols.Columns.Add("D_TOT");
                    netname = "DED_TOT";
                    netadded = false;
                    for (int c = 0; c < 10; c++)
                    {
                        try
                        {
                            if (!dtd.Columns[c + 10].ColumnName.Equals(netname))
                            {
                                if (netadded) { throw new Exception(); }
                                dtcols.Rows[0][c + 22] = dtd.Columns[c + 10].ColumnName.ToString();
                                dtm.Columns.Add("VDED" + (c + 1));
                            }
                            else
                            {
                                dtm.Columns.Add("VDED" + (c + 1));
                                netadded = true;
                            }
                        }
                        catch (Exception err)
                        {
                            dtm.Columns.Add("VDED" + (c + 1));
                            dtcols.Rows[0][c] = "";
                        }
                    }
                    dtm.Columns.Add(netname);
                    dtm.Columns[netname].SetOrdinal(42);
                    #endregion
                    #region ern_master
                    var dteme = dtem;
                    for (int c = 1; c <= 10; c++)
                    {
                        dtcols.Columns.Add("EM" + c);
                    }
                    dtcols.Columns.Add("EM_TOT");
                    netname = "ERNM_TOT";
                    netadded = false;
                    for (int c = 0; c < 10; c++)
                    {
                        try
                        {
                            if (!dteme.Columns[c + 10].ColumnName.Equals(netname))
                            {
                                if (netadded) { throw new Exception(); }
                                dtcols.Rows[0][c + 33] = dteme.Columns[c + 10].ColumnName.ToString();
                                dtm.Columns.Add("VEM" + (c + 1));
                            }
                            else
                            {
                                dtm.Columns.Add("VEM" + (c + 1));
                                netadded = true;
                            }
                        }
                        catch (Exception err)
                        {
                            dtm.Columns.Add("VEM" + (c + 1));
                            dtcols.Rows[0][c] = "";
                        }
                    }
                    dtm.Columns.Add(netname);
                    dtm.Columns[netname].SetOrdinal(53);
                    #endregion
                    dtm.Columns.Add("NET_PAY");
                    dtm.Columns["NET_PAY"].SetOrdinal(54);
                    for (int m = 0; m < dtm.Rows.Count; m++)
                    {
                        for (int e = 10; e < dtern.Columns.Count; e++)
                        {
                            if (!dtern.Columns[e].ColumnName.Equals("ERN_TOT"))
                            {
                                dtm.Rows[m][e + 11] = dtern.Rows[m][e].ToString();
                            }
                            else
                            {
                                dtm.Rows[m]["ERN_TOT"] = dtern.Rows[m][e].ToString();
                            }
                        }
                        for (int e = 10; e < dtded.Columns.Count; e++)
                        {
                            if (!dtded.Columns[e].ColumnName.Equals("DED_TOT"))
                            {
                                dtm.Rows[m][e + 22] = dtded.Rows[m][e].ToString();
                            }
                            else
                            {
                                dtm.Rows[m]["DED_TOT"] = dtded.Rows[m][e].ToString();
                            }
                        }
                        for (int e = 10; e < dteme.Columns.Count; e++)
                        {
                            if (!dteme.Columns[e].ColumnName.Equals("ERNM_TOT"))
                            {
                                dtm.Rows[m][e + 33] = dteme.Rows[m][e].ToString();
                            }
                            else
                            {
                                dtm.Rows[m]["ERNM_TOT"] = dteme.Rows[m][e].ToString();
                            }
                        }
                        dtm.Rows[m]["NET_PAY"] = sgen.Make_decimal(dtm.Rows[m]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtm.Rows[m]["DED_TOT"].ToString());
                    }
                    dtm.AcceptChanges();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtm);
                    dtcols.TableName = "heads";
                    dst.Tables.Add(dtcols);
                    sgen.open_report_byDs_xml(userCode, dst, "monthlysal_2", "Monthly Salary Register");
                }
                if (command == "Yearly Salary")
                {
                    #region dt
                    //                    mq = @"select em.emp_code,em.external_empno,trim(concat(replace(em.FIRST_NAME, '0', ''), ' ', replace(em.MIDDLE_NAME, '0', ''), ' ', 
                    //replace(em.LAST_NAME, '0', ''))) emp_name,to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
                    //"mdp.master_name dept, mdg.master_name desig,em.f_name,es.month_id,upper(es.head_type) head_type,es.head_id,trim(upper(sh.col3)) head_name," +
                    //"round(cast(es.head_count as decimal(10,2))) head_count,sum(if(es.head_id='999999',es.head_count,0))NetPay from emp_salary_process es " +
                    //"INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                    //"inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
                    //"INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' " +
                    //"INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' " +
                    //"where es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') " +
                    //"GROUP BY em.emp_code,em.external_empno,concat(replace(em.FIRST_NAME, '0', ''), ' ', replace(em.MIDDLE_NAME, '0', ''), ' ', replace(em.LAST_NAME, '0', ''))," +
                    //"to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "'),mdp.master_name,mdg.master_name,em.f_name,es.month_id," +
                    //"es.month_days,es.paid_days,es.head_type,es.head_id,upper(sh.col3),es.head_count";
                    mq = @"select em.emp_code,em.external_empno,trim((replace(em.FIRST_NAME, '0', '')|| ' '|| replace(em.MIDDLE_NAME, '0', '')|| ' '|| 
replace(em.LAST_NAME, '0', ''))) emp_name,to_char(convert_tz(st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
"mdp.master_name dept, mdg.master_name desig,em.f_name,es.month_id,upper(es.head_type) head_type,es.head_id,trim(upper(sh.col3)) head_name," +
"round(cast(es.head_count as decimal(10,2))) head_count,sum(case when es.head_id='999999' then es.head_count else '0'end ) NetPay from emp_salary_process es " +
"INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
"inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
"INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
"INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type='MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 " +
"and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
"where es.head_flag = 'ESH' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') " +
"GROUP BY em.emp_code,em.external_empno,trim((replace(em.FIRST_NAME, '0', '')|| ' '|| replace(em.MIDDLE_NAME, '0', '')|| ' '|| " +
"replace(em.LAST_NAME, '0', ''))),to_char(convert_tz(st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),mdp.master_name, mdg.master_name,em.f_name" +
",es.month_id,es.head_type,es.head_id,trim(upper(sh.col3)),head_count";
                    dtm = sgen.getdata(userCode, mq);
                    if (dtm.Rows.Count > 0)
                    {
                        Pivot pvl = new Pivot(dtm, MyGuid);
                        dtm = pvl.PivotData("head_count", AggregateFunction.Sum, new string[]
                        { "emp_code","external_empno","emp_name","doj","dept","desig","f_name","head_type","head_name","NetPay" },
                        new string[] { "month_id" });
                    }
                    #endregion
                    DataTable dthnew, dtheads = sgen.getdata(userCode, "select Master_id,upper(classid) as master_name,'-' as flag,'0' as mno from master_setting where type='MNT'");
                    int mid = 4;
                    dthnew = dtheads.Clone();
                    int months = 12;
                    for (int k = 0; k < months; k++)
                    {
                        int cid = k + mid;
                        if (cid > 12) { cid = cid - 12; }
                        foreach (DataRow drt in dtheads.Rows)
                        {
                            if (drt[0].ToString() == sgen.padlc(cid, 3, "0"))
                            {
                                DataRow drn = dthnew.NewRow();
                                drt["mno"] = k + 1;
                                drn.ItemArray = drt.ItemArray;
                                dthnew.Rows.Add(drn);
                            }
                        }
                    }
                    for (int c = 0; c < dthnew.Rows.Count; c++)
                    {
                        if (!dtm.Columns[c + 10].ColumnName.Equals(dthnew.Rows[c]["master_id"].ToString()))
                        {
                            DataColumn dataColumn = new DataColumn(dthnew.Rows[c]["master_id"].ToString(), typeof(decimal));
                            dtm.Columns.Add(dataColumn);
                            dataColumn.SetOrdinal(c + 10);
                        }
                    }
                    for (int c = 10; c < dtm.Columns.Count; c++)
                    {
                        dtm.Columns[c].ColumnName = "M" + (c - 9).ToString();
                    }
                    dtheads = new DataTable();
                    for (int c = 0; c < 12; c++)
                    {
                        dtheads.Columns.Add("col" + (c + 1));
                    }
                    DataRow drg = dtheads.NewRow();
                    drg[0] = "0";
                    dtheads.Rows.Add(drg);
                    for (int h = 0; h < dthnew.Rows.Count; h++)
                    {
                        dtheads.Rows[0][h] = dthnew.Rows[h]["master_name"].ToString();
                    }
                    dtheads.AcceptChanges();
                    dtheads.TableName = "heads";
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtm);
                    dst.Tables.Add(dtheads);
                    sgen.open_report_byDs_xml(userCode, dst, "emp_yearly_salary", "Yearly Salary");
                }
                if (command == "Yearly Leaves")
                {
                    #region dtleaves
                    //                    mq = @"select em.emp_code,em.external_empno,trim(concat(replace(em.FIRST_NAME, '0', ''), ' ', replace(em.MIDDLE_NAME, '0', ''), ' ', 
                    //replace(em.LAST_NAME, '0', ''))) emp_name,mdp.master_name dept, mdg.master_name desig, em.f_name,es.month_id,es.month_days,
                    //es.paid_days,es.head_type,es.head_id,trim(upper(lv.col1)) head_name,es.head_count
                    //from emp_salary_process es
                    //INNER join kc_tab lv on es.head_id = lv.vch_num and lv.type = 'KLV' and lv.client_id = '001' and lv.client_unit_id in ('001001')
                    //inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '001' and em.client_unit_id in ('001001')
                    //INNER join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP'
                    //INNER join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG'
                    //where es.head_flag = 'ELH' and es.type = 'ESP' and es.client_id = '001' and es.client_unit_id in ('001001')
                    //GROUP BY em.emp_code,em.external_empno,concat(replace(em.FIRST_NAME, '0', ''), ' ', replace(em.MIDDLE_NAME, '0', ''), ' ', replace(em.LAST_NAME, '0', '')),
                    //mdp.master_name,mdg.master_name,em.f_name,es.month_id,es.month_days,es.paid_days,es.head_type,es.head_id,upper(lv.col1),es.head_count"; 
                    mq = "select emp.emp_code,emp.external_empno,trim((replace(emp.FIRST_NAME, '0', '')|| ' '|| replace(emp.MIDDLE_NAME, '0', '')|| ' '|| " +
                        "replace(emp.LAST_NAME, '0', ''))) emp_name,to_char(convert_tz(emp.st_dt,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') doj," +
                        "mdp.master_name dept, mdg.master_name desig,emp.f_name," +
                        "sp.head_name,sp.month_id,trim(sp.month_name) as mnth,sp.head_count consume, nvl(mn.head_count, 0) as earned," +
                        "nvl(ob.leave_count, 0) as opening,'0' as closing from emp_master emp " +
                        "left join emp_salary_process sp on sp.emp_code = emp.vch_num and sp.type = 'ESP' and sp.head_flag = 'ELH' and sp.client_id = '" + cl + "' and " +
                        "sp.client_unit_id in ('" + ut + "') " +
                        "left join(select kc.col1 as head_name ,kc.col2,kc.col3,kc.col4,kc.col8 as head_count,(TO_DATE(c.num, 'm')) mnth,c.num from kc_tab kc " +
                        "INNER join(select 1 as num from dual union select 2 as num from dual union select 3 as num from dual union select 4 as num from dual " +
                        "union select 5 as num from dual union select 6 as num from dual union select 7 as num from dual union select 8 as num from dual" +
                        " union select 9 as num from dual union select 10 as num from dual union select 11 as num from dual union select 12 as num from dual) c on " +
                        "c.num <= kc.col47 where kc.type = 'KLV' and kc.client_id = '" + cl + "') mn on sp.head_name = mn.head_name and " +
                        "sp.month_id = lpad(mn.num, 3, '0') " +
                        "left join(select emp.vch_num as emp_code, emp.first_name,ob.leave_count,ob.leave_type,'January' as mnth " +
                        "from emp_master emp left join leave_ob ob on ob.emp_code = emp.vch_num and ob.type = 'KLB' and ob.client_id = '" + cl + "' and ob.client_unit_id in " +
                        "('" + ut + "')) ob on ob.emp_code = emp.vch_num and ob.leave_type = sp.head_name and ob.mnth = sp.month_name " +
                        "INNER join master_setting mdp on emp.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "INNER join master_setting mdg on emp.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                        " where emp.type = 'EMP' and emp.client_id = '" + cl + "' and emp.client_unit_id in ('" + ut + "') order by emp.vch_num,sp.head_name,sp.month_name";
                    dtm = sgen.getdata(userCode, mq);
                    if (dtm.Rows.Count > 0)
                    {
                        DataView dv = dtm.DefaultView;
                        var dtx = dv.ToTable(true, "emp_code");
                        foreach (DataRow dre in dtx.Rows)
                        {
                            var dth = dtm.Select("emp_code='" + dre[0].ToString() + "'").CopyToDataTable();
                            dv = dth.DefaultView;
                            dv.Sort = "head_name";
                            dth = dv.ToTable(true, "head_name");
                            foreach (DataRow drh in dth.Rows)
                            {
                                var dtmh = dtm.Select("emp_code='" + dre[0].ToString() + "' and head_name='" + drh[0].ToString() + "'").CopyToDataTable();
                                dv = dtmh.DefaultView;
                                dv.Sort = "month_id";
                                dtmh = dv.ToTable(true, "month_id");
                                double opening = 0, closing = 0;
                                opening = sgen.Make_double(dtm.Select("emp_code='" + dre[0].ToString() + "' and head_name='" + drh[0].ToString() + "'")[0]["opening"].ToString());
                                foreach (DataRow drmh in dtmh.Rows)
                                {
                                    var mrow = dtm.Select("emp_code='" + dre[0].ToString() + "' and head_name='" + drh[0].ToString() + "' and month_id='" + drmh[0].ToString() + "'");
                                    dtm.Rows[dtm.Rows.IndexOf(mrow[0])]["opening"] = opening;
                                    closing = opening + sgen.Make_double(mrow[0]["earned"].ToString()) - sgen.Make_double(mrow[0]["consume"].ToString());
                                    dtm.Rows[dtm.Rows.IndexOf(mrow[0])]["closing"] = closing;
                                    opening = closing;
                                }
                            }
                        }
                        dtm.Columns.Add("amt", typeof(string));
                        dtm.Columns.Add("rno", typeof(string));
                        dtm.Columns.Add("no", typeof(int));
                        var dtc = dtm.Clone();
                        foreach (DataRow drc in dtm.Rows)
                        {
                            DataRow dr1 = dtc.NewRow();
                            drc["amt"] = drc["consume"].ToString();
                            drc["rno"] = "Consumed";
                            drc["no"] = "3";
                            dr1.ItemArray = drc.ItemArray;
                            dtc.Rows.Add(dr1);
                            dr1 = dtc.NewRow();
                            drc["amt"] = drc["earned"].ToString();
                            drc["rno"] = "Earned";
                            drc["no"] = "2";
                            dr1.ItemArray = drc.ItemArray;
                            dtc.Rows.Add(dr1);
                            dr1 = dtc.NewRow();
                            drc["amt"] = drc["opening"].ToString();
                            drc["rno"] = "Opening";
                            drc["no"] = "1";
                            dr1.ItemArray = drc.ItemArray;
                            dtc.Rows.Add(dr1);
                            dr1 = dtc.NewRow();
                            drc["amt"] = drc["closing"].ToString();
                            drc["rno"] = "Closing";
                            drc["no"] = "4";
                            dr1.ItemArray = drc.ItemArray;
                            dtc.Rows.Add(dr1);
                        }
                        dtc.AcceptChanges();
                        Pivot pvl = new Pivot(dtc, MyGuid);
                        dtc = pvl.PivotData("amt", AggregateFunction.Sum, new string[]
                        { "emp_code","external_empno","emp_name","doj","dept","desig","f_name","head_name","rno","no" },
                        new string[] { "month_id" });
                        DataTable dthnew, dtheads = sgen.getdata(userCode, "select Master_id,upper(classid) as master_name,'-' as flag,'0' as mno from master_setting where type='MNT'");
                        int mid = 1;
                        dthnew = dtheads.Clone();
                        int months = 12;
                        for (int k = 0; k < months; k++)
                        {
                            int cid = k + mid;
                            if (cid > 12) { cid = cid - 12; }
                            foreach (DataRow drt in dtheads.Rows)
                            {
                                if (drt[0].ToString() == sgen.padlc(cid, 3, "0"))
                                {
                                    DataRow drn = dthnew.NewRow();
                                    drt["mno"] = k + 1;
                                    drn.ItemArray = drt.ItemArray;
                                    dthnew.Rows.Add(drn);
                                }
                            }
                        }
                        for (int c = 0; c < dthnew.Rows.Count; c++)
                        {
                            try
                            {
                                if (!dtc.Columns[c + 10].ColumnName.Equals(dthnew.Rows[c]["master_id"].ToString()))
                                {
                                    DataColumn dataColumn = new DataColumn(dthnew.Rows[c]["master_id"].ToString(), typeof(decimal));
                                    dtc.Columns.Add(dataColumn);
                                    dataColumn.SetOrdinal(c + 10);
                                }
                            }
                            catch (Exception err)
                            {
                                DataColumn dataColumn = new DataColumn(dthnew.Rows[c]["master_id"].ToString(), typeof(decimal));
                                dtc.Columns.Add(dataColumn);
                                dataColumn.SetOrdinal(c + 10);
                            }
                        }
                        for (int c = 10; c < dtc.Columns.Count; c++)
                        {
                            dtc.Columns[c].ColumnName = "M" + (c - 9).ToString();
                        }
                        dtheads = new DataTable();
                        for (int c = 0; c < 12; c++)
                        {
                            dtheads.Columns.Add("col" + (c + 1));
                        }
                        DataRow drg = dtheads.NewRow();
                        drg[0] = "0";
                        dtheads.Rows.Add(drg);
                        for (int h = 0; h < dthnew.Rows.Count; h++)
                        {
                            dtheads.Rows[0][h] = dthnew.Rows[h]["master_name"].ToString();
                        }
                        dtheads.AcceptChanges();
                        dtheads.TableName = "heads";
                        dtc.TableName = "prepcur";
                        dst.Tables.Add(dtc);
                        dst.Tables.Add(dtheads);
                    }
                    #endregion
                    sgen.open_report_byDs_xml(userCode, dst, "emp_yearly_leaves", "Yearly Leaves");
                }
                if (command == "Employee Leave")
                {
                    mq = "select  em.external_empno, es.emp_code,(em.FIRST_NAME|| ' '|| REPLACE(em.MIDDLE_NAME,'0','')|| ' '||REPLACE(em.LAST_NAMELAST_NAME,'0','')) " +
                        "as Employee_Name,em.f_name ,es.head_id,lv.col1 head_name, es.head_count,es.month_id,es.month_name,es.currmmmyyyy from" +
                        " emp_salary_process es  inner join emp_master em on em.type = 'EMP' and em.vch_num = es.emp_code and es.client_id = em.client_id " +
                        "and es.client_unit_id = em.client_unit_id inner join kc_tab lv on es.head_id = lv.vch_num and lv.type = 'KLV'" +
                        " and es.client_id = lv.client_id  where es.type = 'ESP' and es.head_flag = 'ELH'" +
                        " and es.client_id = '" + cl + "' and es.client_unit_id  in(" + ut + ") and es.month_id='" + monthid + "'";
                    DataTable dtleave = sgen.getdata(userCode, mq);
                    Pivot pv = new Pivot(dtleave, MyGuid);
                    dtleave = pv.PivotData("head_count", AggregateFunction.Sum, new string[]
                    { "emp_code","Employee_Name","f_name","month_name" },
                    new string[] { "head_name" });
                    dtm = dtleave.Copy();
                    //foreach (DataColumn dc in dtded.Columns)
                    //{
                    //    if (dc.Ordinal > 12) dtm.Columns.Add(dc.ColumnName);
                    //}
                    var dtcols = new DataTable();
                    for (int c = 0; c < 15; c++)
                    {
                        string nn = "Col" + (c + 1);
                        dtcols.Columns.Add(nn);
                    }
                    var drc = dtcols.NewRow();
                    drc[0] = "-";
                    dtcols.Rows.Add(drc);
                    for (int c = 0; c < 15; c++)
                    {
                        try
                        {
                            dtcols.Rows[0][c] = dtm.Columns[c + 4].ColumnName.ToString();
                            dtm.Columns[c + 4].ColumnName = "VCol" + (c + 1);
                        }
                        catch (Exception err)
                        {
                            string nn = "VCol" + (c + 1);
                            dtm.Columns.Add(nn);
                            dtcols.Rows[0][c] = "-";
                        }
                    }
                    DataTable dtCloned = dtm.Clone();
                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
                    {
                        if (i > 3)
                        { dtCloned.Columns[i].DataType = typeof(decimal); }
                    }
                    foreach (DataRow row in dtm.Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    //dtm.TableName = "prepcur";
                    dtCloned.TableName = "prepcur";
                    dst.Tables.Add(dtCloned);
                    dtcols.TableName = "heads";
                    dst.Tables.Add(dtcols);
                    dst.Tables.Add();
                    sgen.open_report_byDs_xml(userCode, dst, "emp_leave", "Employee Leave");
                }
                //new hr
                if (command == "Monthly Arrear Salary" || command == "Merged_Report" || command == "Monthly Arrear Salary (Stamp)" || command == "Monthly Arrear Salary (Stamp)-Legel")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 AS NAME,COL2 AS ID,VCH_NUM,COL30 AS PFABLE,col31 AS ESIABLE,COL42 AS LWFABLE" +
                            ",COL5 AS PFRATE,COL5 AS ESIRATE,COL17 AS LWFRATE,cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND " +
                            "CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        //mq += "ER" + e + "+AR" + e + " as " + sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "ER" + e) + ",";
                        mq += "ER" + e + ",AR" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        dth.Columns.Add("AR" + e, typeof(string));
                        string eh = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        drh["ER" + e] = eh;
                        drh["AR" + e] = eh == "-" ? "-" : eh + "_AR";
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        //mq += "DED" + e + "+ARD" + e + " as " + sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "DED" + e) + ",";
                        mq += "DED" + e + ",ARD" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        dth.Columns.Add("ARD" + e, typeof(string));
                        string dh = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        drh["DED" + e] = dh;
                        drh["ARD" + e] = dh == "-" ? "-" : dh + "_AR";
                    }
                    dth.AcceptChanges();
                    mq1 = "select P.LV1,P.LV2,P.LV3,p.presents,p.paiddays,p.wdays,p.hdays,p.client_unit_id,c.unit_name,e.emp_code,e.old_empcode,e.external_empno,(e.first_name||' '||replace(e.middle_name, '0', '')||' '||replace(e.last_name, '0', '')) emp_name" +
                        ",dp.master_name dept,dg.master_name desig,e.f_name," +
                      "p.month_id,to_char(p.m_lastdt,'Month') month_name,p.mdays month_days,e.pf_no,e.pf_uan,e.esi_no,substr(p.curryyyymmm,0,4) salary_yr" +
                      ",p.errate1 basic_ern," +
                      "p.errate2 hra_ern,p.errate3 con_ern," + mq + " TOTEARN,TOTDED,NETSALARY from emp_master e " +
                      "inner join paymain p on e.vch_num=p.emp_code and p.type='PAY' and e.client_unit_id=p.client_unit_id and p.curryyyymmm='" + curryyyymmm + "' " +
                      "inner join master_setting dp on dp.master_id=e.emp_dept and dp.type='MDP'  and find_in_set(dp.client_unit_id,e.client_unit_id)=1 " +
                      "inner join master_setting dg on dg.master_id=e.emp_desig and dg.type='MDG'  and find_in_set(dg.client_unit_id,e.client_unit_id)=1 " +
                      "INNER join company_unit_profile c on p.client_unit_id = c.cup_id " +
                      "where e.type='EMP' and e.client_unit_id in('" + ut + "') " + cond_dpjoin.Replace("em.","e.") + "" + cond_dgjoin.Replace("em.", "e.") + " " + cond_catjoin.Replace("em.", "e.") + "";
                    dtm = sgen.getdata(userCode, mq1);
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtm);
                    dth.TableName = "heads";
                    dst.Tables.Add(dth);
                    if (command == "Merged_Report") sgen.open_report_byDs_xml(userCode, dst, "newmerge", "newmerge");
                    else if (command == "Monthly Arrear Salary (Stamp)") sgen.open_report_byDs_xml(userCode, dst, "newmonthly_arr_salary3", "Monthly Arrear Salary (Stamp)");
                    else if (command == "Monthly Arrear Salary (Stamp)-Legel") sgen.open_report_byDs_xml(userCode, dst, "newmonthly_arr_salary_legel", "Monthly Arrear Salary (Stamp)-Legel");
                    else sgen.open_report_byDs_xml(userCode, dst, "newmonthly_arr_salary2", "Monthly Arrear Salary");
                } //done
                if (command == "Company Wise Total Monthly Salary")
                {
                    /////////////////////=======================
                    #region dt earn                 
                    string cond = "";
                    cond = curryyyymmm;
                    //mq = "select count(distinct a.emp_code) emp_count,a.client_unit_id,c.unit_name,max(head_order)head_order,a.month_name," +
                    //    "a.month_days,a.head_type,a.head_id,a.head_name,sum(to_number(a.basic_ern)) basic_ern,sum(to_number(a.hra_ern) )hra_ern," +
                    //    "sum(to_number(a.cony_ern)) cony_ern,a.salary_yr,sum(to_number( a.paid_days/2) )paid_days,sum(a.gm_ern) gm_ern," +
                    //    "sum(to_number(nvl(a.head_count,'0'))) head_count from " +
                    //    "(select es.client_unit_id,to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern," +
                    //    "substr(es.currmmmyyyy, 0, 4) as salary_yr,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name,'-') dept," +
                    //    "nvl(mdg.master_name, '-') desig,em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id," +
                    //    "upper(sh.col3) head_name, to_number(es.head_count) head_count, (to_number(sh.col41)) head_order from emp_salary_process es " +
                    //    "inner join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id in ('" + cl + "') and sh.client_unit_id in ('" + ut + "') " +
                    //    "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id in ('" + cl + "') and em.client_unit_id in ('" + ut + "') " +
                    //    "inner join(select col1,SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id in ('" + cl + "') and client_unit_id in ('" + ut + "') group by col1) en on en.col1 = es.emp_code " +
                    //    "inner join(select col1,SUM(col10) as basic_ern from enx_tab where type = 'KES' and client_id in ('" + cl + "') and client_unit_id in ('" + ut + "') and col4 = '000001' group by col1) bs on bs.col1 = es.emp_code " +
                    //    "inner join(select col1,SUM(col10) as hra_ern from enx_tab where type = 'KES' and client_id in ('" + cl + "') and client_unit_id in ('" + ut + "') and col4 = '000002' group by col1) hs on hs.col1 = es.emp_code " +
                    //    "inner join(select col1,SUM(col10) as cony_ern from enx_tab where type = 'KES' and client_id in ('" + cl + "') and client_unit_id in ('" + ut + "') and col4 = '000006' group by col1) cs on cs.col1 = es.emp_code " +
                    //    "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, '" + ut + "') = 1 " +
                    //    "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id,'" + ut + "') = 1 " +
                    //    "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id in ('" + cl + "') and es.client_unit_id in ('" + ut + "') and es.head_id <> '000019') a " +
                    //    "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id in ('" + cl + "') group by a.client_unit_id, a.salary_yr, c.unit_name , a.month_name,a.month_days,a.head_type,a.head_id,a.head_name ";
                    mq = "select count(distinct a.emp_code) emp_count,a.client_unit_id,c.unit_name,max(head_order)head_order,a.month_name,a.month_days,a.head_type,a.head_id," +
                        "a.head_name,sum(to_number(a.basic_ern)) basic_ern,sum(to_number(a.hra_ern) )hra_ern,sum(to_number(a.cony_ern)) cony_ern,a.salary_yr," +
                        "sum(to_number(a.paid_days/2) )paid_days,sum(a.gm_ern) gm_ern,sum(to_number(nvl(a.head_count,'0'))) head_count from (select es.client_unit_id," +
                        "to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy, 0, 4) as salary_yr,em.pf_no," +
                        "em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name,'-') dept,nvl(mdg.master_name, '-') desig,em.f_name,es.month_name," +
                        "es.month_days,to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(sh.col3) head_name, to_number(es.head_count) head_count," +
                        "(to_number(sh.col41)) head_order from emp_salary_process es " +
                        "inner join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id " +
                        "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as gm_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' group by col1,client_id,client_unit_id,trim(ref_code)) en on en.col1 = es.emp_code and en.client_id = es.client_id and en.client_unit_id = es.client_unit_id and en.ref_code=es.inc_ver " +
                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as basic_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000001' group by col1,client_id,client_unit_id,trim(ref_code)) bs on bs.col1 = es.emp_code and bs.client_id = es.client_id and bs.client_unit_id = es.client_unit_id and bs.ref_code=es.inc_ver " +
                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as hra_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000002' group by col1,client_id,client_unit_id,trim(ref_code)) hs on hs.col1 = es.emp_code and hs.client_id = es.client_id and hs.client_unit_id = es.client_unit_id and hs.ref_code=es.inc_ver " +
                        "inner join (select client_id, client_unit_id, col1, SUM(col10) as cony_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000006' group by col1,client_id,client_unit_id,trim(ref_code)) cs on cs.col1 = es.emp_code and cs.client_id = es.client_id and cs.client_unit_id = es.client_unit_id and cs.ref_code=es.inc_ver " +
                        "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, em.client_id)= 1 and find_in_set(mdp.client_unit_id, em.client_unit_id)= 1 " +
                        "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id, em.client_id)= 1 and find_in_set(mdg.client_unit_id, em.client_unit_id)= 1 " +
                        "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id in ('" + cl + "') and es.client_unit_id in ('" + ut + "') and es.head_id <> '000019') a " +
                        "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id in ('" + cl + "') " +
                        "group by a.client_unit_id, a.salary_yr,c.unit_name,a.month_name,a.month_days,a.head_type,a.head_id,a.head_name order by c.unit_name asc";
                    DataTable dtern = sgen.getdata(userCode, mq);
                    Pivot pv = new Pivot(dtern, MyGuid);
                    try
                    {
                        dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
                        { "client_unit_id","unit_name","emp_count","month_name", "month_days", "paid_days","gm_ern","salary_yr","basic_ern","hra_ern","cony_ern" },
                        new string[] { "head_name" }, "ERN_TOT");
                    }
                    catch (Exception ex) { }
                    DataView dve = dtern.DefaultView;
                    dve.Sort = "unit_name";
                    dtern = dve.ToTable();
                    #endregion
                    ////////////////////=======================
                    #region dt deduct                                    
                    //mq1 = "select count(distinct a.emp_code) emp_count,a.client_unit_id,c.unit_name,max(head_order)head_order,a.month_name,a.month_days,a.head_type," +
                    //    "a.head_id,a.head_name,0 basic_ern,0 hra_ern,0 cony_ern,a.salary_yr,0 paid_days," +
                    //    "0 gm_ern,sum(to_number(nvl(a.head_count, '0'))) head_count from (select es.client_unit_id, to_number(nvl(bs.basic_ern, '0')) as basic_ern," +
                    //    "to_number(nvl(hs.hra_ern, '0')) hra_ern,to_number(nvl(cs.cony_ern, '0')) cony_ern,substr(es.currmmmyyyy, 0, 4) as salary_yr,em.pf_no,em.pf_uan," +
                    //    "em.esi_no,em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name, '-') dept,nvl(mdg.master_name, '-') desig,em.f_name,es.month_name,es.month_days," +
                    //    " to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order " +
                    //    "from emp_salary_process es " +
                    //    "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                    //    "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
                    //    "inner join(select col1, sum(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1) en on en.col1 = es.emp_code " +
                    //    "inner join(select col1, sum(col10) as basic_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000001' group by col1) bs on bs.col1 = es.emp_code " +
                    //    "inner join(select col1, sum(col10) as hra_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000002' group by col1) hs on hs.col1 = es.emp_code " +
                    //    "inner join(select col1, sum(col10) as cony_ern from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4 = '000006' group by col1) cs on cs.col1 = es.emp_code " +
                    //    "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, '" + ut + "') = 1 " +
                    //    "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id, '" + ut + "') = 1 " +
                    //    "where es.currmmmyyyy = '2019005' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id <> '000022') a " +
                    //    "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id in ('001') group by a.client_unit_id,a.salary_yr,c.unit_name, a.month_name," +
                    //    "a.month_days,a.head_type,a.head_id,a.head_name ";
                    mq1 = "select count(distinct a.emp_code) emp_count,a.client_unit_id,c.unit_name,max(head_order)head_order,a.month_name,a.month_days,a.head_type," +
                       "a.head_id,a.head_name,0 basic_ern,0 hra_ern,0 cony_ern,a.salary_yr,0 paid_days," +
                       "0 gm_ern,sum(to_number(nvl(a.head_count, '0'))) head_count from (select es.client_unit_id,to_number(nvl(bs.basic_ern, '0')) as basic_ern," +
                       "to_number(nvl(hs.hra_ern, '0')) hra_ern,to_number(nvl(cs.cony_ern, '0')) cony_ern,substr(es.currmmmyyyy, 0, 4) as salary_yr,em.pf_no,em.pf_uan," +
                       "em.esi_no,em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name, '-') dept,nvl(mdg.master_name, '-') desig,em.f_name,es.month_name,es.month_days," +
                       " to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order " +
                       "from emp_salary_process es " +
                       "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id=es.client_id and sh.client_unit_id=es.client_unit_id " +
                       "left join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id =es.client_unit_id and em.client_unit_id=es.client_unit_id " +
                       "inner join (select client_id, client_unit_id,col1, sum(col10) as gm_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' group by col1,client_id,client_unit_id,trim(ref_code)) en on en.col1 = es.emp_code and en.client_id = es.client_id and en.client_unit_id = es.client_unit_id and en.ref_code=es.inc_ver " +
                       "inner join (select client_id, client_unit_id,col1, sum(col10) as basic_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000001' group by col1,client_id,client_unit_id,trim(ref_code)) bs on bs.col1 = es.emp_code and en.client_id = bs.client_id and en.client_unit_id = bs.client_unit_id and bs.ref_code=es.inc_ver " +
                       "inner join (select client_id, client_unit_id,col1, sum(col10) as hra_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000002' group by col1,client_id,client_unit_id,trim(ref_code)) hs on hs.col1 = es.emp_code and en.client_id = hs.client_id and en.client_unit_id = hs.client_unit_id and hs.ref_code=es.inc_ver " +
                       "inner join (select client_id, client_unit_id,col1, sum(col10) as cony_ern,trim(ref_code) ref_code from enx_tab where type = 'KES' and col4 = '000006' group by col1,client_id,client_unit_id,trim(ref_code)) cs on cs.col1 = es.emp_code and en.client_id = cs.client_id and en.client_unit_id = cs.client_unit_id and cs.ref_code=es.inc_ver " +
                       "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,em.client_id) = 1 and find_in_set(mdp.client_unit_id,em.client_unit_id) = 1 " +
                       "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,em.client_id) = 1 and find_in_set(mdg.client_unit_id,em.client_unit_id) = 1 " +
                       "where es.currmmmyyyy = '" + curryyyymmm + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and es.head_id <> '000022') a " +
                       "inner join company_unit_profile c on a.client_unit_id = c.cup_id and c.company_profile_id in ('" + cl + "') " +
                       "group by a.client_unit_id,a.salary_yr,c.unit_name, a.month_name,a.month_days,a.head_type,a.head_id,a.head_name order by c.unit_name asc";
                    DataTable dtded = sgen.getdata(userCode, mq1);
                    Pivot pv1 = new Pivot(dtded, MyGuid);
                    try
                    {
                        dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                        { "client_unit_id", "unit_name", "emp_count", "month_name", "month_days", "paid_days","gm_ern" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
                        new string[] { "head_name" }, "DED_TOT");
                    }
                    catch (Exception ex) { }
                    DataView dvd = dtded.DefaultView;
                    dvd.Sort = "unit_name";
                    dtded = dvd.ToTable();
                    #endregion
                    dtm = dtern.Copy();
                    foreach (DataColumn dc in dtded.Columns)
                    {
                        if (dc.Ordinal > 10) dtm.Columns.Add(dc.ColumnName);
                    }
                    string netname = "NETPAYABLE";
                    dtm.Columns.Add(netname);
                    for (int r = 0; r < dtded.Rows.Count; r++)
                    {
                        foreach (DataColumn dc in dtded.Columns)
                        {
                            if (dc.Ordinal > 10)
                            {
                                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
                            }
                        }
                        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
                    }
                    var dtf = dtm;
                    var dtcols = new DataTable();
                    for (int c = 0; c < 50; c++)
                    {
                        string nn = "Col" + (c + 1);
                        dtcols.Columns.Add(nn);
                    }
                    var drc = dtcols.NewRow();
                    drc[0] = "-";
                    dtcols.Rows.Add(drc);
                    bool netadded = false;
                    for (int c = 0; c < 50; c++)
                    {
                        try
                        {
                            if (!dtm.Columns[c + 11].ColumnName.Equals(netname))
                            {
                                if (netadded)
                                {
                                    throw new Exception();
                                }
                                dtcols.Rows[0][c] = dtm.Columns[c + 11].ColumnName.ToString();
                                dtm.Columns[c + 11].ColumnName = "VCol" + (c + 1);
                            }
                            else
                            {
                                string nn = "VCol" + (c + 1);
                                dtm.Columns.Add(nn, typeof(decimal));
                                netadded = true;
                            }
                        }
                        catch (Exception err)
                        {
                            string nn = "VCol" + (c + 1);
                            dtm.Columns.Add(nn);
                            dtcols.Rows[0][c] = "-";
                        }
                    }
                    dtm.Columns[netname].SetOrdinal(61);
                    DataTable dtCloned = dtm.Clone();
                    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
                    {
                        if (i > 11)
                        { dtCloned.Columns[i].DataType = typeof(decimal); }
                    }
                    foreach (DataRow row in dtm.Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    //dtm.TableName = "prepcur";
                    dtCloned.TableName = "prepcur";
                    dst.Tables.Add(dtCloned);
                    dtcols.TableName = "heads";
                    dst.Tables.Add(dtcols);
                    dst.Tables.Add();
                    sgen.open_report_byDs_xml(userCode, dst, "comp_monthly_salary", "Company Wise Monthly Salary");
                }
                #region commented - Contractor Monthly Salary
                //if (command == "Contractor Monthly Salary")
                //{
                //    /////////////////////=======================
                //    #region dt earn                 
                //    string cond = "";
                //    cond = curryyyymmm;
                //    mq = "select to_number(bs.basic_ern) basic_ern,to_number(bs.hra_ern) hra_ern,to_number(bs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr,vd.c_name Contr, " +
                //        "em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig" +
                //      ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,bs.gm_ern," +
                //      "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
                //      "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type='KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                //      "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
                //      "and contr<>'000000' and contr<>'0'" +
                //      "" + cond_dpjoin + "" + cond_dgjoin + " inner join " +
                //      "   (select col1, sum(gm_ern) as gm_ern, ref_code, sum(basic_ern) as basic_ern, sum(hra_ern) hra_ern, sum(oth_ern) oth_ern, sum(cony_ern) cony_ern from " +
                //                    "(select col1, (case when col4= '000001' then sum(col10) else 0 end) as basic_ern,(case when col4 = '000002' then sum(col10) else 0 end) as hra_ern," +
                //                    "(case when col4 = '000005' then sum(col10) else 0 end) as oth_ern,(case when col4 = '000006' then sum(col10) else 0 end) as cony_ern,sum(col10) as gm_ern," +
                //                    "trim(ref_code) as ref_code from enx_tab where type = 'KES' and client_id = '" + clientid_mst + "' and client_unit_id in ('" + unitid_mst + "') group by col1,trim(ref_code),col4) a " +
                //                    "group by col1, ref_code) bs on bs.col1 = es.emp_code and bs.ref_code = es.inc_ver " +
                //      "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                //      "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                //      "inner join clients_mst vd on vd.vch_num=em.contr and vd.type='PVD' and vd.client_id=em.client_id and vd.client_unit_id=em.client_unit_id " +
                //      "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                //      "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000019' ";
                //    //                    mq = @"select to_number(bs.basic_ern) basic_ern,to_number(hs.hra_ern) hra_ern,to_number(cs.cony_ern) cony_ern,substr(es.currmmmyyyy,0,4) as salary_yr,
                //    //em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,es.emp_name, nvl(mdp.master_name,'-') dept,nvl(mdg.master_name,'-') desig,em.f_name,es.month_name,es.month_days,
                //    //to_number(es.paid_days) paid_days,en.gm_ern,es.head_type,es.head_id,upper(es.head_name) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from 
                //    //emp_salary_process es INNER
                //    //join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = es.client_id and sh.client_unit_id = es.client_unit_id
                //    //inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and em.emp_status = 'Y' and to_char(em.ex_dt,'YYYY')= '1900'
                //    //inner join(select col1, SUM(col10) as gm_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') group by col1) en on en.col1 = es.emp_code
                //    //inner join(select col1, col10 as basic_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000001' ) bs on bs.col1 = es.emp_code
                //    //inner join(select col1, col10 as hra_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000002' ) hs on hs.col1 = es.emp_code
                //    //inner join(select col1, col10 as cony_ern from enx_tab where type = 'KES' and client_id = '001' and client_unit_id in ('001008') and col4 = '000006' ) cs on cs.col1 = es.emp_code
                //    //LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP'
                //    //LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG'
                //    //where es.currmmmyyyy = '2019005' and es.head_flag = 'ESH' and upper(es.head_type) = 'EARNING' and es.type = 'ESP' and es.client_id = '001' and es.client_unit_id in ('001008') and es.head_id <> '000019' ";
                //    //18
                //    DataTable dtern = sgen.getdata(userCode, mq);
                //  Pivot pv = new Pivot(dtern, MyGuid);
                //    try
                //    {
                //        dtern = pv.PivotData_Tot_dec("head_count", AggregateFunction.Sum, new string[]
                //        { "Contr","emp_code","external_empno","emp_name","dept","desig","f_name","month_name", "month_days", "paid_days","gm_ern","pf_no","pf_uan","esi_no","salary_yr","basic_ern","hra_ern","cony_ern" },
                //        new string[] { "head_name", "head_order" }, "ERN_TOT");
                //    }
                //    catch (Exception ex) { }
                //    #endregion
                //    ////////////////////=======================
                //    #region dt deduct                                    
                //    mq1 = "select to_number(nvl(bs.basic_ern,'0')) as basic_ern,to_number(nvl(hs.hra_ern,'0')) as hra_ern,to_number(nvl(cs.cony_ern,'0')) as cony_ern, substr(es.currmmmyyyy,0,4) as salary_yr,vd.c_name Contr, " +
                //        "em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,es.emp_name,nvl(mdp.master_name ,'-') dept , nvl(mdg.master_name,'-') desig" +
                //       ",em.f_name,es.month_name,es.month_days,to_number(es.paid_days) paid_days,en.gm_ern," +
                //          "es.head_type,es.head_id,upper(sh.col3) head_name,to_number(es.head_count) head_count,(to_number(sh.col41)) head_order from emp_salary_process es " +
                //          "INNER join vehicle_master sh on es.head_id = sh.vch_num and sh.type = 'KSP' and sh.client_id = '" + cl + "' and sh.client_unit_id in ('" + ut + "') " +
                //          "inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') and contr<>'000000' and contr<>'0' " +
                //          "" + cond_dpjoin + "" + cond_dgjoin + "" +
                //          "inner join (select col1, SUM(col10) as gm_ern,ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') group by col1,ref_code) en on en.col1 = es.emp_code and en.ref_code=es.inc_ver " +
                //          "inner join (select col1, SUM(col10) as basic_ern,ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000001' group by col1,ref_code) bs on bs.col1 = es.emp_code and bs.ref_code=es.inc_ver " +
                //          "inner join (select col1, SUM(col10) as hra_ern,ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000002' group by col1,ref_code) hs on hs.col1 = es.emp_code and hs.ref_code=es.inc_ver " +
                //          "inner join (select col1, SUM(col10) as cony_ern,ref_code from enx_tab where type = 'KES' and client_id = '" + cl + "' and client_unit_id in ('" + ut + "') and col4='000006' group by col1,ref_code) cs on cs.col1 = es.emp_code and cs.ref_code=es.inc_ver " +
                //          "LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id,'" + clientid_mst + "')=1 and find_in_set(mdp.client_unit_id,'" + unitid_mst + "')=1 " +
                //          "LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id,'" + clientid_mst + "')=1 and find_in_set(mdg.client_unit_id,'" + unitid_mst + "')=1 " +
                //          "inner join clients_mst vd on vd.vch_num=em.contr and vd.type='PVD' and vd.client_id=em.client_id and vd.client_unit_id=em.client_unit_id " +
                //          "where es.currmmmyyyy = '" + cond + "' and es.head_flag = 'ESH' and upper(es.head_type) = 'DEDUCTION' and es.type = 'ESP' and es.client_id = '" + cl + "' " +
                //          "and es.client_unit_id in ('" + ut + "') and es.head_id<>'000022'";
                //    DataTable dtded = sgen.getdata(userCode, mq1);
                //  Pivot pv1 = new Pivot(dtded,MyGuid);
                //    try
                //    {
                //        dtded = pv1.PivotData_Tot("head_count", AggregateFunction.Sum, new string[]
                //        { "Contr","emp_code", "external_empno", "emp_name","dept","desig", "f_name", "month_name", "month_days", "paid_days","gm_ern" ,"pf_no","pf_uan","esi_no" ,"salary_yr","basic_ern","hra_ern","cony_ern" },
                //        new string[] { "head_name" }, "DED_TOT");
                //    }
                //    catch (Exception ex) { }
                //    #endregion
                //    dtm = dtern.Copy();
                //    foreach (DataColumn dc in dtded.Columns)
                //    {
                //        if (dc.Ordinal > 17) dtm.Columns.Add(dc.ColumnName);
                //    }
                //    string netname = "NETPAYABLE";
                //    dtm.Columns.Add(netname);
                //    for (int r = 0; r < dtded.Rows.Count; r++)
                //    {
                //        foreach (DataColumn dc in dtded.Columns)
                //        {
                //            if (dc.Ordinal > 17)
                //            {
                //                dtm.Rows[r][dc.ColumnName] = dtded.Rows[r][dc.ColumnName];
                //            }
                //        }
                //        dtm.Rows[r][netname] = sgen.Make_decimal(dtm.Rows[r]["ERN_TOT"].ToString()) - sgen.Make_decimal(dtded.Rows[r]["DED_TOT"].ToString());
                //    }
                //    var dtf = dtm;
                //    var dtcols = new DataTable();
                //    for (int c = 0; c < 50; c++)
                //    {
                //        string nn = "Col" + (c + 1);
                //        dtcols.Columns.Add(nn);
                //    }
                //    var drc = dtcols.NewRow();
                //    drc[0] = "-";
                //    dtcols.Rows.Add(drc);
                //    bool netadded = false;
                //    for (int c = 0; c < 50; c++)
                //    {
                //        try
                //        {
                //            if (!dtm.Columns[c + 18].ColumnName.Equals(netname))
                //            {
                //                if (netadded)
                //                {
                //                    throw new Exception();
                //                }
                //                dtcols.Rows[0][c] = dtm.Columns[c + 18].ColumnName.ToString();
                //                dtm.Columns[c + 18].ColumnName = "VCol" + (c + 1);
                //            }
                //            else
                //            {
                //                string nn = "VCol" + (c + 1);
                //                dtm.Columns.Add(nn, typeof(decimal));
                //                netadded = true;
                //            }
                //        }
                //        catch (Exception err)
                //        {
                //            string nn = "VCol" + (c + 1);
                //            dtm.Columns.Add(nn);
                //            dtcols.Rows[0][c] = "-";
                //        }
                //    }
                //    dtm.Columns[netname].SetOrdinal(56);
                //    DataTable dtCloned = dtm.Clone();
                //    for (Int32 i = 0; i < dtCloned.Columns.Count; i++)
                //    {
                //        if (i > 17)
                //        { dtCloned.Columns[i].DataType = typeof(decimal); }
                //    }
                //    foreach (DataRow row in dtm.Rows)
                //    {
                //        dtCloned.ImportRow(row);
                //    }
                //    //dtm.TableName = "prepcur";
                //    dtCloned.TableName = "prepcur";
                //    dst.Tables.Add(dtCloned);
                //    dtcols.TableName = "heads";
                //    dst.Tables.Add(dtcols);
                //    dst.Tables.Add();
                //    sgen.open_report_byDs_xml(userCode, dst, "contrms", "Contractor Monthly Salary");
                //} //done
                #endregion
                if (command == "Salary_days")
                {
                    /////////////////////=======================
                    string toDt = sgen.GetCookie(MyGuid, "year_to");
                    string fromDt = sgen.GetCookie(MyGuid, "year_from");
                    DateTime tFromDt = sgen.Make_datetime(fromDt);
                    string yr = tFromDt.Year.ToString();
                    //mq = "select * from (select substr(MONTH_id,2,2)||'-'||(case when to_number(month_id)<4 then to_number(" + yr + ")+1 else to_number(" + yr + ") end) as myr" +
                    //    ",TO_NUMBER(TRIM(t.femaleratio)) AS MONTHNO, t.MONTH_ID ," +
                    //    "t.MONTH_NAME||'-'||(case when to_number(month_id)<4 then to_number(" + yr + ")+1 else to_number(" + yr + ") end) AS MONTH_NAME,t.PF_No,t.PF_UAN,t.ESI_NO" +
                    //    ",t.EMP_CODE,t.EXTERNAL_EMPNO,t.EMP_NAME,max(t.dept) DEPT,max(t.desig) DESIG," +
                    //   "max(t.f_name) F_NAME,sum(t.paid_days) PAID_DAYS,sum(t.month_days)  MONTH_DAYS,MAX(old_empcode) AS old_empcode,NVL(t.contr,'0') CONTR,nvl(vd.c_name,'-') Contr_Name from (select d.contr, D.old_empcode, m.femaleratio, m.master_id as month_id ,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan" +
                    //   ",d.esi_no,d.emp_code,d.external_empno,d.emp_name, d.dept,d.desig,d.f_name,to_number(d.mdays) month_days,to_number(d.paiddays) paid_days from  master_setting m " +
                    //   "left outer join(select em.contr, EM.old_empcode ,substr(es.CURRYYYYMMM, 0, 4) as salary_yr, em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno," +
                    //   " trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name," +
                    //   " nvl(mdp.master_name, '-') dept, nvl(mdg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as Month_name, es.month_id, es.mdays," +
                    //   " to_number(es.paiddays) paiddays from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' " +
                    //   "and em.client_unit_id in ('" + ut + "') LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, '" + cl + "') = 1 " +
                    //   "and find_in_set(mdp.client_unit_id, em.client_unit_id) = 1 LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id, '" + cl + "') = 1" +
                    //   " and find_in_set(mdg.client_unit_id, em.client_unit_id) = 1 where  es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')) d on m.master_id = d.month_id " +
                    //   " where m.type = 'MNT' union all select d.contr, d.old_empcode ,m.femaleratio, m.master_id as month_id ,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno," +
                    //   "d.emp_name, '-' dept,'-' desig,D.f_name,0 month_days,0 paid_days from  master_setting m inner join(select DISTINCT em.contr, substr(es.CURRYYYYMMM,0,4) as salary_yr, em.pf_no," +
                    //   "em.pf_uan,em.esi_no, em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', '')))" +
                    //   " as Emp_Name,EM.f_name from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
                    //   "where es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')) d on 1 = 1 where m.type = 'MNT' ) t " +
                    //   "left join clients_mst vd on vd.vch_num=t.contr and vd.type='BCD' and vd.client_id = '" + cl + "' and vd.client_unit_id in ('" + ut + "') " +
                    //   "WHERE EMP_CODE IS NOT NULL group by t.femaleratio,t.month_id ,t.month_name," +
                    //   "t.pf_no,t.pf_uan,t.esi_no,t.emp_code,t.external_empno,t.emp_name,t.contr,vd.c_name ) t1 where to_date(myr,'MM-yyyy') between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "')" +
                    //   " and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "') order by EMP_CODE, MONTHNO";

                    mq = @"select * from (select substr(MONTH_id,2,2)||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) myr,
TO_NUMBER(TRIM(t.femaleratio)) AS MONTHNO, t.MONTH_ID ,t.MONTH_NAME||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) AS MONTH_NAME,t.PF_No,
t.PF_UAN,t.ESI_NO,t.EMP_CODE,t.EXTERNAL_EMPNO,t.EMP_NAME,max(t.dept) DEPT,max(t.desig) DESIG,max(t.f_name) F_NAME,sum(t.paid_days) PAID_DAYS,sum(t.month_days) MONTH_DAYS,MAX(old_empcode) old_empcode,
NVL(t.contr,'0') CONTR,nvl(vd.c_name,'-') Contr_Name from (select d.contr, D.old_empcode, m.femaleratio, m.master_id as month_id,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,
d.emp_code,d.external_empno,d.emp_name, d.dept,d.desig,d.f_name,to_number(d.mdays) month_days,to_number(d.paiddays) paid_days from  master_setting m left outer join(select em.contr, 
EM.old_empcode,(case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) as salary_yr,em.pf_no,em.pf_uan,
em.esi_no, em.emp_code, em.external_empno, trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,
nvl(mdp.master_name, '-') dept, nvl(mdg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as Month_name, es.month_id, es.mdays, to_number(es.paiddays) paiddays from paymain es 
inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
"LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, em.client_unit_id) = 1 " +
"LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id, em.client_unit_id) = 1 " +
"where es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and m_lastdt between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "'," +
"'" + sgen.Getsqldatetimeformat() + "')) d on m.master_id = d.month_id where m.type = 'MNT' union all select d.contr, d.old_empcode,m.femaleratio, m.master_id month_id ,m.classid month_name," +
"d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, '-' dept,'-' desig,D.f_name,0 month_days,0 paid_days from  master_setting m " +
"inner join(select DISTINCT em.contr, (case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) salary_yr," +
" em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, " +
"'0', ''))) as Emp_Name,EM.f_name from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') " +
"where es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')  and m_lastdt between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "'," +
"'" + sgen.Getsqldatetimeformat() + "') ) d on 1 = 1 where m.type = 'MNT' ) t left join clients_mst vd on vd.vch_num=t.contr and vd.type='BCD' and vd.client_id = '" + cl + "' and vd.client_unit_id in " +
"('" + ut + "') WHERE EMP_CODE IS NOT NULL group by t.femaleratio,t.month_id ,t.month_name,t.pf_no,t.pf_uan,t.esi_no,t.emp_code,t.external_empno,t.emp_name,t.contr,vd.c_name ,salary_yr) t1 order by EMP_CODE, MONTHNO";
                    DataTable dtot = sgen.getdata(userCode, mq);
                    Pivot pivot = new Pivot(dtot, MyGuid);
                    dtot = pivot.PivotData("paid_days", AggregateFunction.Sum, new string[] { "PF_No"
                        ,"PF_UAN","ESI_NO","EMP_CODE","OLD_EMPCODE","EXTERNAL_EMPNO","EMP_NAME","F_NAME","CONTR","CONTR_NAME"}, new string[] { "MONTH_NAME" });
                    dtot.TableName = "prepcur";
                    //dst.Tables.Add(dtot);
                    //mq = "select '-' as year, femaleratio as mn,Classid as mth from master_setting where type='MNT'";
                    //DataTable dth = sgen.getdata(userCode, mq);
                    //Pivot pivoth = new Pivot(dth);
                    //dth = pivoth.PivotData("mth", AggregateFunction.Max, new string[] { "year" }, new string[] { "mn" });
                    //dth.TableName = "heads";
                    //dst.Tables.Add(dth);
                    //sgen.open_report_byDs_xml(userCode, dst, "emp_salary_days", "Monthly Paiddays Salary Report");
                    mq1 = sgen.open_grid_dt("Monthly Paiddays Salary Report", dtot, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Monthly Paiddays Salary Report');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                } //done
                if (command == "leave_reg")
                {
                    string toDt = sgen.GetCookie(MyGuid, "year_to");
                    string fromDt = sgen.GetCookie(MyGuid, "year_from");
                    DateTime tFromDt = sgen.Make_datetime(fromDt);
                    string yr = tFromDt.Year.ToString();
                    //mq = "select * from (select t.EMP_CODE,t.PF_No,t.PF_UAN,t.ESI_NO,t.EXTERNAL_EMPNO,MAX(old_empcode) old_empcode,t.EMP_NAME,max(t.f_name) F_NAME,max(t.dept) DEPT," +
                    //    "max(t.desig) DESIG,substr(MONTH_id,2,2)||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) myr,sum(t.month_days) " +
                    //    "MONTH_DAYS,t.MONTH_NAME||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) AS MONTH_name,sum(t.lv1) as lv1,sum(t.lv2)" +
                    //    " as lv2,sum(t.lv3) as lv3,sum(t.lv4) as lv4,sum(t.lv5) as lv5 from (select d.contr, D.old_empcode,to_number(m.sectionid) as totdays, m.femaleratio, m.master_id as " +
                    //    "month_id,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, d.dept,d.desig,d.f_name,to_number(d.mdays) month_days" +
                    //    ",d.lv1,d.lv2,d.lv3,d.lv4,d.lv5  from master_setting m left outer join(select em.contr, EM.old_empcode,(case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then " +
                    //    "to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) as salary_yr,em.pf_no,em.pf_uan,em.esi_no, em.emp_code, em.external_empno" +
                    //    ",trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,nvl(mdp.master_name, '-') " +
                    //    "dept, nvl(mdg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as Month_name, es.month_id, es.mdays,to_number(nvl(es.lv1,'0')) lv1," +
                    //    "to_number(nvl(es.lv2,'0')) lv2,to_number(nvl(es.lv3,'0')) lv3,to_number(nvl(es.lv4,'0')) lv4,to_number(nvl(es.lv5,'0')) lv5 from paymain es inner join emp_master em " +
                    //    "on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') LEFT join master_setting mdp on em.emp_dept = " +
                    //    "mdp.master_id and mdp.type = 'MDP' and find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, em.client_unit_id) = 1 LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and " +
                    //    "find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id, em.client_unit_id) = 1 where es.type = 'PAY' and es.client_id = '" + cl + "' and " +
                    //    "es.client_unit_id in ('" + ut + "') and m_lastdt between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "')) d on m.master_id = d.month_id where m.type = 'MNT'" +
                    //    " union all  select d.contr, d.old_empcode,to_number(m.sectionid) as totdays,m.femaleratio, m.master_id month_id ,m.classid month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, '-' dept," +
                    //    "'-' desig,D.f_name,0 month_days,0 l1,0 l2,0 l3,0 l4,0 l5 from  master_setting m inner join(select DISTINCT em.contr, (case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else" +
                    //    " to_number(substr(es.CURRYYYYMMM,0,4)) end) salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as " +
                    //    "Emp_Name,EM.f_name from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and em.client_id = '" + cl + "' and " +
                    //    "em.client_unit_id in ('" + ut + "') where es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')  and m_lastdt between " +
                    //    "to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "') ) d on 1 = 1 where m.type = 'MNT' ) t left join clients_mst vd on vd.vch_num=t.contr and vd.type='BCD' and" +
                    //    " vd.client_id = '" + cl + "' and vd.client_unit_id in ('" + ut + "') WHERE EMP_CODE IS NOT NULL group by t.femaleratio,t.month_id ,t.month_name,t.pf_no,t.pf_uan,t.esi_no,t.emp_code,t.pf_no,t.pf_uan,t.esi_no" +
                    //    ",t.external_empno,t.emp_name,t.contr,vd.c_name ,salary_yr) t1 order by EMP_CODE";

                    //mq = "select EMP_CODE,EMP_NAME,MONTH_name,lv1,lv2,lv3,lv4,lv5 from (select t.EMP_CODE,MAX(old_empcode) old_empcode,t.EMP_NAME,max(t.f_name) F_NAME,max(t.dept) DEPT,max(t.desig) DESIG,substr(MONTH_id,2,2)||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) myr,sum(t.month_days) MONTH_DYS,t.MONTH_NAME||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) AS MONTH_name,sum(t.lv1) as lv1,sum(t.lv2) as lv2,sum(t.lv3) as lv3,sum(t.lv4) as lv4,sum(t.lv5) as lv5 from (select d.contr, D.old_empcode,to_number(m.sectionid) as totdays, m.femaleratio, m.master_id as month_id,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, d.dept,d.desig,d.f_name,to_number(d.mdays) month_days,d.lv1,d.lv2,d.lv3,d.lv4,d.lv5  from master_setting m left outer join(select em.contr, EM.old_empcode,(case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) as salary_yr,em.pf_no,em.pf_uan,em.esi_no, em.emp_code, em.external_empno,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,nvl(mdp.master_name, '-') dept, nvl(mdg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as Month_name, es.month_id, es.mdays,to_number(nvl(es.lv1,'0')) lv1,to_number(nvl(es.lv2,'0')) lv2,to_number(nvl(es.lv3,'0')) lv3,to_number(nvl(es.lv4,'0')) lv4,to_number(nvl(es.lv5,'0')) lv5 from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' " +
                    //    "and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and " +
                    //    "find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, em.client_unit_id) = 1 LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and " +
                    //    "find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id, em.client_unit_id) = 1 where es.type = 'PAY' " +
                    //    "and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and m_lastdt between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and " +
                    //    "to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "')) d on m.master_id = d.month_id where m.type = 'MNT' union all  select d.contr," +
                    //    " d.old_empcode,to_number(m.sectionid) as totdays,m.femaleratio, m.master_id month_id ,m.classid month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, '-' dept,'-' desig,D.f_name,0 month_days,0 l1,0 l2,0 l3,0 l4,0 l5 from  master_setting m inner join(select DISTINCT em.contr,(case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,EM.f_name from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and " +
                    //    "em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')  " +
                    //    "and m_lastdt between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "') )" +
                    //    " d on 1 = 1 where m.type = 'MNT' ) t left join clients_mst vd on vd.vch_num=t.contr and vd.type='BCD' and vd.client_id = '" + cl + "' and " +
                    //    "vd.client_unit_id in ('" + ut + "') WHERE EMP_CODE IS NOT NULL group by t.femaleratio,t.month_id ,t.month_name,t.pf_no,t.pf_uan,t.esi_no," +
                    //    "t.emp_code,t.emp_name,t.contr,vd.c_name ,salary_yr) t1 order by EMP_CODE";

                    mq = "select EMP_CODE,EMP_NAME,MONTH_name,lv_type,amt from (select * from (select t.EMP_CODE,MAX(old_empcode) old_empcode,t.EMP_NAME,max(t.f_name) F_NAME,max(t.dept) DEPT,max(t.desig) DESIG,substr(MONTH_id,2,2)||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) myr,sum(t.month_days) MONTH_DYS,t.MONTH_NAME||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) AS MONTH_name,sum(t.lv1) as lv1,sum(t.lv2) as lv2,sum(t.lv3) as lv3,sum(t.lv4) as lv4,sum(t.lv5) as lv5 from (select d.contr, D.old_empcode,to_number(m.sectionid) as totdays, m.femaleratio, m.master_id as month_id,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, d.dept,d.desig,d.f_name,to_number(d.mdays) month_days,d.lv1,d.lv2,d.lv3,d.lv4,d.lv5  from master_setting m left outer join(select em.contr, EM.old_empcode,(case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) as salary_yr,em.pf_no,em.pf_uan,em.esi_no, em.emp_code, em.external_empno,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,nvl(mdp.master_name, '-') dept, nvl(mdg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as Month_name, es.month_id, es.mdays,to_number(nvl(es.lv1,'0')) lv1,to_number(nvl(es.lv2,'0')) lv2,to_number(nvl(es.lv3,'0')) lv3,to_number(nvl(es.lv4,'0')) lv4,to_number(nvl(es.lv5,'0')) lv5 from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and " +
                        "em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and " +
                        "find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, em.client_unit_id) = 1 LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and " +
                        "find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id, em.client_unit_id) = 1 where es.type = 'PAY' and " +
                        "es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and m_lastdt between " +
                        "to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "')) d on m.master_id = d.month_id where m.type = 'MNT' union all  select d.contr, d.old_empcode,to_number(m.sectionid) as totdays,m.femaleratio, m.master_id month_id ,m.classid month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, '-' dept,'-' desig,D.f_name,0 month_days,0 l1,0 l2,0 l3,0 l4,0 l5 from  master_setting m inner join(select DISTINCT em.contr,(case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,EM.f_name from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and " +
                        "em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')  " +
                        "and m_lastdt between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "') ) d on 1 = 1 where " +
                        "m.type = 'MNT' ) t left join clients_mst vd on vd.vch_num=t.contr and vd.type='BCD' and vd.client_id = '" + cl + "' and vd.client_unit_id in ('" + ut + "') " +
                        "WHERE EMP_CODE IS NOT NULL group by t.femaleratio,t.month_id ,t.month_name,t.pf_no,t.pf_uan,t.esi_no,t.emp_code,t.emp_name,t.contr,vd.c_name ,salary_yr) t1 " +
                        "unpivot(amt for lv_type in (lv1, lv2, lv3, lv4, lv5)) t) y order by EMP_CODE";
                    DataTable dtot = sgen.getdata(userCode, mq);
                    Pivot pivot = new Pivot(dtot, MyGuid);
                    //dtot = pivot.PivotData("total_leaves", AggregateFunction.Sum, new string[] { "PF_No"
                    //    ,"PF_UAN","ESI_NO","EMP_CODE","OLD_EMPCODE","EXTERNAL_EMPNO","EMP_NAME","F_NAME"}, new string[] { "MONTH_NAME" });

                    dtot = pivot.PivotData("amt", AggregateFunction.Sum, new string[]
                   { "EMP_CODE","EMP_NAME","lv_type"}, new string[] { "MONTH_NAME" });
                    //dtot = pivot.PivotData_Tot_multi(new string[] { "lv1", "lv2", "lv3", "lv4", "lv5" }, AggregateFunction.Sum, new string[]
                    //{ "EMP_CODE","EMP_NAME"}, new string[] { "MONTH_NAME" });
                    dtot.TableName = "prepcur";
                    //dst.Tables.Add(dtot);
                    //mq = "select '-' as year, femaleratio as mn,Classid as mth from master_setting where type='MNT'";
                    //DataTable dth = sgen.getdata(userCode, mq);
                    //Pivot pivoth = new Pivot(dth);
                    //dth = pivoth.PivotData("mth", AggregateFunction.Max, new string[] { "year" }, new string[] { "mn" });
                    //dth.TableName = "heads";
                    //dst.Tables.Add(dth);
                    //sgen.open_report_byDs_xml(userCode, dst, "emp_salary_days", "Monthly Paiddays Salary Report");
                    mq1 = sgen.open_grid_dt("Leave Register", dtot, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Leave Register');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                } //done
                if (command == "leave_det")
                {
                    string toDt = sgen.GetCookie(MyGuid, "year_to");
                    string fromDt = sgen.GetCookie(MyGuid, "year_from");
                    DateTime tFromDt = sgen.Make_datetime(fromDt);
                    string yr = tFromDt.Year.ToString();

                    //mq = "select EMP_CODE,EMP_NAME,MONTH_name,lv_type,amt from (select * from (select t.EMP_CODE,MAX(old_empcode) old_empcode,t.EMP_NAME,max(t.f_name) F_NAME,max(t.dept) DEPT,max(t.desig) DESIG,substr(MONTH_id,2,2)||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) myr,sum(t.month_days) MONTH_DYS,t.MONTH_NAME||'-'||(case when to_number(month_id)<4 then to_number(salary_yr)+1 else to_number(salary_yr) end) AS MONTH_name,sum(t.lv1) as lv1,sum(t.lv2) as lv2,sum(t.lv3) as lv3,sum(t.lv4) as lv4,sum(t.lv5) as lv5 from (select d.contr, D.old_empcode,to_number(m.sectionid) as totdays, m.femaleratio, m.master_id as month_id,m.classid as month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, d.dept,d.desig,d.f_name,to_number(d.mdays) month_days,d.lv1,d.lv2,d.lv3,d.lv4,d.lv5  from master_setting m left outer join(select em.contr, EM.old_empcode,(case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) as salary_yr,em.pf_no,em.pf_uan,em.esi_no, em.emp_code, em.external_empno,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,nvl(mdp.master_name, '-') dept, nvl(mdg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as Month_name, es.month_id, es.mdays,to_number(nvl(es.lv1,'0')) lv1,to_number(nvl(es.lv2,'0')) lv2,to_number(nvl(es.lv3,'0')) lv3,to_number(nvl(es.lv4,'0')) lv4,to_number(nvl(es.lv5,'0')) lv5 from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and " +
                    //    "em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') LEFT join master_setting mdp on em.emp_dept = mdp.master_id and mdp.type = 'MDP' and " +
                    //    "find_in_set(mdp.client_id, '" + cl + "') = 1 and find_in_set(mdp.client_unit_id, em.client_unit_id) = 1 LEFT join master_setting mdg on em.emp_desig = mdg.master_id and mdg.type = 'MDG' and " +
                    //    "find_in_set(mdg.client_id, '" + cl + "') = 1 and find_in_set(mdg.client_unit_id, em.client_unit_id) = 1 where es.type = 'PAY' and " +
                    //    "es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "') and m_lastdt between " +
                    //    "to_date(" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "')) d on m.master_id = d.month_id where m.type = 'MNT' union all  select d.contr, d.old_empcode,to_number(m.sectionid) as totdays,m.femaleratio, m.master_id month_id ,m.classid month_name,d.salary_yr,d.pf_no,d.pf_uan,d.esi_no,d.emp_code,d.external_empno,d.emp_name, '-' dept,'-' desig,D.f_name,0 month_days,0 l1,0 l2,0 l3,0 l4,0 l5 from  master_setting m inner join(select DISTINCT em.contr,(case when to_number(SUBSTR(ES.CURRYYYYMMM,4,7))<4 then to_number(substr(es.CURRYYYYMMM,0,4))-1 else to_number(substr(es.CURRYYYYMMM,0,4)) end) salary_yr, em.pf_no,em.pf_uan,em.esi_no, em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) as Emp_Name,EM.f_name from paymain es inner join emp_master em on em.vch_num = es.emp_code and em.type = 'EMP' and " +
                    //    "em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') where es.type = 'PAY' and es.client_id = '" + cl + "' and es.client_unit_id in ('" + ut + "')  " +
                    //    "and m_lastdt between to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') and to_date('" + toDt + "','" + sgen.Getsqldatetimeformat() + "') ) d on 1 = 1 where " +
                    //    "m.type = 'MNT' ) t left join clients_mst vd on vd.vch_num=t.contr and vd.type='BCD' and vd.client_id = '" + cl + "' and vd.client_unit_id in ('" + ut + "') " +
                    //    "WHERE EMP_CODE IS NOT NULL group by t.femaleratio,t.month_id ,t.month_name,t.pf_no,t.pf_uan,t.esi_no,t.emp_code,t.emp_name,t.contr,vd.c_name ,salary_yr) t1 " +
                    //    "unpivot(amt for lv_type in (lv1, lv2, lv3, lv4, lv5)) t) y order by EMP_CODE";

                    mq = "select a.emp_code,a.EMPNAME as employee_name,a.DATE_OF_JOINING,a.col1 as Leave_name,max(tot_leaves) as total_leaves,sum(a.leave_count) as approved_leaves" +
                " from (select A.emp_code, (a.first_name || '' || replace(a.middle_name, '0', '') || '' || a.last_name) AS EMPNAME, TO_CHAR(A.ST_DT, 'DD/MM/YYYY') AS DATE_OF_JOINING, lb.leave_count," +
                "(CASE WHEN B.col13 = 'Y' THEN(CASE WHEN B.COL4 = '003' THEN NVL(trunc(months_between(SYSDATE, a.st_dt - 1))  * to_number(B.col8), '0') when B.COL4 = '005' " +
                "then NVL(trunc(trunc(months_between(SYSDATE, a.st_dt - 1)) / 3 * to_number(B.col8)), '0') when B.COL4 = '007' then " +
                "NVL(trunc(trunc(months_between(SYSDATE, a.st_dt - 1)) / 2 * to_number(B.col8)), '0') when B.COL4 = '009' then " +
                "NVL(trunc(trunc(months_between(SYSDATE, a.st_dt - 1)) / 12 * to_number(B.col8)), '0') end) ELSE ((CASE WHEN B.COL4 = '003' THEN " +
                "NVL(trunc(months_between(sysdate, to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') - 1)) * to_number(B.col8), '0') when B.COL4 = '005' then " +
                "NVL(trunc(trunc(months_between(sysdate, to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') - 1)) / 3 * to_number(B.col8)), '0') when B.COL4 = '007' then " +
                "NVL(trunc(trunc(months_between(sysdate, to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') - 1)) / 2 * to_number(B.col8)), '0') when B.COL4 = '009' then " +
                "NVL(trunc(trunc(months_between(sysdate, to_date('" + fromDt + "','" + sgen.Getsqldatetimeformat() + "') - 1)) / 12 * to_number(B.col8)), '0') end)) END) AS tot_leaves,B.col1 FROM " +
                "EMP_MASTER A INNER JOIN kc_tab B ON 1 = 1 AND B.client_unit_id = '" + unitid_mst + "' AND B.type = 'KLV' inner join leave_ob lb on lb.leave_type_id = b.vch_num and " +
                "lb.type = 'KLB' AND lb.CLIENT_UNIT_ID = '" + ut + "' AND lb.CLIENT_ID = '" + cl + "' where A.type = 'EMP' AND A.CLIENT_UNIT_ID = '" + ut + "' AND A.CLIENT_ID = '" + cl + "') a group by a.emp_code,a.EMPNAME,a.DATE_OF_JOINING" +
                ",a.col1";

                    DataTable dtot = sgen.getdata(userCode, mq);
                    Pivot pivot = new Pivot(dtot, MyGuid);
                    dtot = pivot.PivotData("total_leaves", AggregateFunction.Sum, new string[] { "emp_code"
                        ,"employee_name","DATE_OF_JOINING","approved_leaves"}, new string[] { "Leave_name" });

                    // dtot = pivot.PivotData("amt", AggregateFunction.Sum, new string[]
                    //{ "EMP_CODE","EMP_NAME","lv_type"}, new string[] { "MONTH_NAME" });
                    // //dtot = pivot.PivotData_Tot_multi(new string[] { "lv1", "lv2", "lv3", "lv4", "lv5" }, AggregateFunction.Sum, new string[]
                    // //{ "EMP_CODE","EMP_NAME"}, new string[] { "MONTH_NAME" });
                    // dtot.TableName = "prepcur";
                    //dst.Tables.Add(dtot);
                    //mq = "select '-' as year, femaleratio as mn,Classid as mth from master_setting where type='MNT'";
                    //DataTable dth = sgen.getdata(userCode, mq);
                    //Pivot pivoth = new Pivot(dth);
                    //dth = pivoth.PivotData("mth", AggregateFunction.Max, new string[] { "year" }, new string[] { "mn" });
                    //dth.TableName = "heads";
                    //dst.Tables.Add(dth);
                    //sgen.open_report_byDs_xml(userCode, dst, "emp_salary_days", "Monthly Paiddays Salary Report");
                    mq1 = sgen.open_grid_dt("Leave Details", dtot, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Leave Details');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                } //done
                if (command == "Yearly Actual Salary")
                {
                    string allmnt = "";
                    //mq = "select group_concat(distinct p.curryyyymmm) curryyyymmm,group_concat(distinct m.master_name) mnt from paymain p inner join master_setting m on m.master_id = substr(p.curryyyymmm, 5, 3) " +
                    //    "and m.type = 'MNT' where p.type = 'PAY' and p.client_unit_id = '" + unitid_mst + "' and to_number(p.curryyyymmm) between " + sgen.Make_int(Ac_Year.Split(' ')[0].Trim()) + "003 " +
                    //    "and " + sgen.Make_int(Ac_Year.Split(' ')[1].Trim()) + "003";
                    //DataTable dtu = sgen.getdata(userCode, mq);
                    //if (dtu.Rows.Count > 0)
                    //{
                    //    allmnt = dtu.Rows[0]["curryyyymmm"].ToString().Trim();
                    //    mntname = dtu.Rows[0]["mnt"].ToString().Trim();
                    //}
                    mq = "select group_concat(distinct p.curryyyymmm) curryyyymmm from paymain p where p.type = 'PAY' and p.client_unit_id = '" + unitid_mst + "' and to_number(p.curryyyymmm) " +
                        "between " + sgen.Make_int(Ac_Year.Split(' ')[0].Trim()) + "003 and " + sgen.Make_int(Ac_Year.Split(' ')[1].Trim()) + "003";
                    allmnt = sgen.seekval(userCode, mq, "curryyyymmm");

                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    //string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    //string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));

                    //mq1 = "select (case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' THEN '4' ELSE '2' END) END) hord," +
                    //    "(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype," +
                    //    "S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr,'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                    //    "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                    //    "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                    //    "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                    //    "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                    //    "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                    //    "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                    //    "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' order by em.emp_code)) a " +
                    //    "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                    //    " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                    //    "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                    //    "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                    //    "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                    //    "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 3,t.MONTH_NAME asc";

                    mq1 = "select '" + zerodiff + "' zerodiff,emp_code,Emp_Name,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' THEN '4' ELSE '2' END) END) hord," +
                        "(case when substr(S_heads, 0, 2) = 'ER' then 'EARNING' when substr(S_heads, 0, 2) = 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads, 0, 3) = 'ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype," +
                        "S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,'" + Ac_Year.Trim() + "' salary_yr,m.master_name Month_name,sum(amount) AMT,CURRYYYYMMM from " +
                        "(SELECT* FROM ((select To_Char(em.st_dt, 'dd/MM/YYYY') DOJ,em.ifsc_code,em.account_no,to_number(es.ot_hrs) othrs,es.CURRYYYYMMM,substr(es.CURRYYYYMMM, 0, 4) salary_yr,em.pf_no,em.pf_uan," +
                        "em.esi_no,em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Emp_Name," +
                        "nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig,em.f_name,to_char(es.m_lastdt, 'month') M_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," +
                        "" + mq + "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                        "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + allmnt.Replace(",", "','").Trim() + "') " +
                        "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                        "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' order by em.emp_code)) a UNPIVOT(Amount FOR S_heads IN (ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11," +
                        "ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9, AR10, AR11, AR12,AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, " +
                       "ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                       "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' THEN " +
                       "REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                       "inner join master_setting m on m.master_id = substr(t.CURRYYYYMMM, 5, 3) and m.type = 'MNT' " +
                       "group by emp_code,Emp_Name,(case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' " +
                       "END) END),salary_yr,m.master_name,S_heads,H.COL3,CURRYYYYMMM ORDER BY 4,curryyyymmm,m.master_name asc";
                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "zerodiff", "emp_code", "Emp_Name", "hord", "htype", "s_heads", "s_name", "salary_yr" }, new string[] { "Month_name" });

                    mq = "select distinct nvl(p.curryyyymmm,'N') curryyyymmm, m.master_name mnt,m.femaleratio ord from master_setting m " +
                        "left join paymain p on m.master_id = substr(p.curryyyymmm, 5, 3) and p.type = 'PAY' and p.client_unit_id = '" + ut + "' and to_number(p.curryyyymmm) between to_number(" + Ac_Year.Split(' ')[0].Trim() + "003) " +
                        "and to_number(" + Ac_Year.Split(' ')[1].Trim() + "003) where m.type = 'MNT' order by m.femaleratio asc";
                    DataTable dm = sgen.getdata(userCode, mq);

                    for (int a = 0; a < dm.Rows.Count; a++)
                    {
                        string mname = dm.Rows[a]["mnt"].ToString().Trim();
                        DataColumn dnew = new DataColumn(mname, typeof(Decimal));
                        dnew.DefaultValue = 0;
                        try
                        {
                            if (dtc1.Columns[a + 8].ColumnName.ToString().Trim().ToUpper().Substring(0, 3) != mname.ToUpper().Substring(0, 3))
                            {
                                dtc1.Columns.Add(dnew);
                                dnew.SetOrdinal(a + 8);
                            }
                        }
                        catch (Exception err)
                        {
                            dtc1.Columns.Add(dnew);
                            dnew.SetOrdinal(a + 8);
                        }
                    }

                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "yractsal", "Yearly Actual Salary");
                }
                if (command == "Yearly Projected Salary")
                {
                    string allmnt = "";
                    mq = "select group_concat(distinct p.curryyyymmm) curryyyymmm from paymain p where p.type = 'PAY' and p.client_unit_id = '" + unitid_mst + "' and to_number(p.curryyyymmm) " +
                        "between " + sgen.Make_int(Ac_Year.Split(' ')[0].Trim()) + "003 and " + sgen.Make_int(Ac_Year.Split(' ')[1].Trim()) + "003";
                    allmnt = sgen.seekval(userCode, mq, "curryyyymmm");
                    if (allmnt.Trim().Equals("")) allmnt = "0000000";

                    mq = "select min(curryyyymmm) curryyyymmm from paymain p where p.type = 'PAY' and p.client_unit_id = '" + unitid_mst + "'";
                    var firstcur = sgen.seekval(userCode, mq, "curryyyymmm");
                    if (firstcur.Trim().Equals("")) firstcur = "0000000";

                    mq = "";
                    //DataTable dth = new DataTable();
                    //DataRow drh = dth.NewRow();
                    //dth.Rows.Add(drh);
                    //var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                    //    "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    //for (int e = 1; e <= 16; e++)
                    //{
                    //    mq += "ER" + e + ",ERRATE" + e + ",";
                    //    dth.Columns.Add("ER" + e, typeof(string));
                    //    drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    //}
                    //for (int e = 1; e <= 16; e++)
                    //{
                    //    mq += "AR" + e + ",";
                    //    dth.Columns.Add("AR" + e, typeof(string));
                    //    var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    //    if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                    //    drh["AR" + e] = hname;
                    //}
                    //for (int e = 1; e <= 10; e++)
                    //{
                    //    mq += "DED" + e + ",";
                    //    dth.Columns.Add("DED" + e, typeof(string));
                    //    drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    //}
                    //for (int e = 1; e <= 10; e++)
                    //{
                    //    mq += "ARD" + e + ",";
                    //    dth.Columns.Add("ARD" + e, typeof(string));
                    //    var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    //    if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                    //    drh["ARD" + e] = hname;
                    //}
                    //dth.AcceptChanges();

                    //mq1 = "select emp_code,Emp_Name,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' THEN '4' ELSE '2' END) END) hord," +
                    //    "(case when substr(S_heads, 0, 2) = 'ER' then 'EARNING' when substr(S_heads, 0, 2) = 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads, 0, 3) = 'ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype," +
                    //    "S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr,m.master_name Month_name,sum(amount) AMT,CURRYYYYMMM from " +
                    //    "(SELECT* FROM ((select To_Char(em.st_dt, 'dd/MM/YYYY') DOJ,em.ifsc_code,em.account_no,to_number(es.ot_hrs) othrs,es.CURRYYYYMMM,substr(es.CURRYYYYMMM, 0, 4) salary_yr,em.pf_no,em.pf_uan," +
                    //    "em.esi_no,em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Emp_Name," +
                    //    "nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig,em.f_name,to_char(es.m_lastdt, 'month') M_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," +
                    //    "" + mq + "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                    //    "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + allmnt.Replace(",", "','").Trim() + "') " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                    //    "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' order by em.emp_code)) a UNPIVOT(Amount FOR S_heads IN (ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11," +
                    //    "ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9, AR10, AR11, AR12,AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, " +
                    //   "ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                    //   "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' THEN " +
                    //   "REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                    //   "inner join master_setting m on m.master_id = substr(t.CURRYYYYMMM, 5, 3) and m.type = 'MNT' " +
                    //   "group by emp_code,Emp_Name,(case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' " +
                    //   "END) END),salary_yr,m.master_name,S_heads,H.COL3,CURRYYYYMMM ORDER BY 3,curryyyymmm,m.master_name asc";

                    //mq1 = "select emp_code,emp_name,hord,htype,s_name,salary_yr,sum(decode(month_name,'April',amt)) April,sum(decode(month_name,'May',amt)) May,sum(decode(month_name, 'June', amt)) June," +
                    //    "sum(decode(month_name, 'July', amt)) July,sum(decode(month_name, 'August', amt)) August,sum(decode(month_name, 'September', amt)) September,sum(decode(month_name, 'October', amt)) October," +
                    //    "sum(decode(month_name, 'November', amt)) November,sum(decode(month_name, 'December', amt)) December,sum(decode(month_name, 'January', amt)) January,sum(decode(month_name, 'February', amt)) February," +
                    //    "sum(decode(month_name, 'March', amt)) March " +
                    //    "from (select emp_code,Emp_Name,(case when substr(S_heads, 0, 2) = 'ER' then '1' when substr(S_heads, 0, 2) = 'DE' then '3' else (CASE WHEN substr(S_heads, 0, 3) = 'ARD' THEN '4' ELSE '2' END) END) hord," +
                    //    "(case when substr(S_heads, 0, 2) = 'ER' then 'EARNING' when substr(S_heads, 0, 2) = 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads, 0, 3) = 'ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype," +
                    //    "S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr,m.master_name Month_name, sum(amount) AMT,CURRYYYYMMM from " +
                    //    "(SELECT* FROM (select es.CURRYYYYMMM,'" + Ac_Year.Split(' ')[0].Trim() + "' salary_yr,to_char(es.m_lastdt, 'Month') M_name,To_Char(em.st_dt, 'dd/MM/YYYY') DOJ,em.ifsc_code,em.account_no," +
                    //    "to_number(es.ot_hrs) othrs,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                    //    "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig,em.f_name,es.mdays month_days,to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," +
                    //    "ER1,ER2,ER3,ER4,ER5,ER6,ER7,ER8,ER9,ER10,ER11,ER12,ER13,ER14,ER15,ER16,AR1,AR2,AR3,AR4,AR5,AR6,AR7,AR8,AR9,AR10,AR11,AR12,AR13,AR14,AR15,AR16,DED1,DED2,DED3,DED4,DED5,DED6,DED7,DED8,DED9," +
                    //    "DED10,ARD1,ARD2,ARD3,ARD4,ARD5,ARD6,ARD7,ARD8,ARD9,ARD10,TOTEARN,TOTDED,NETSALARY from emp_master em " +
                    //    "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + allmnt.Replace(",", "','").Trim() + "') " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                    //    "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' " +
                    //    "union all select * from (select (case when to_number(m.master_id)> 3 then('" + Ac_Year.Split(' ')[0].Trim() + "' || m.master_id) else ('" + Ac_Year.Split(' ')[1].Trim() + "' || m.master_id) end) curryyyymmm," +
                    //    "'" + Ac_Year.Split(' ')[0].Trim() + "' salary_yr,m.master_name m_name, t.*from(select To_Char(em.st_dt, 'dd/MM/YYYY') DOJ, em.ifsc_code, em.account_no, 0 othrs, em.pf_no, em.pf_uan, em.esi_no, em.emp_code," +
                    //    "em.external_empno, em.old_empcode, trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Emp_Name, nvl(dp.master_name, '-') dept, " +
                    //    "nvl(dg.master_name, '-') desig, em.f_name,0 month_days, 0 paid_days, 0 OT, 0 ESI_OT, ERRATE1 ER1, ERRATE2 ER2, ERRATE3 ER3, ERRATE4 ER4, ERRATE5 ER5, ERRATE6 ER6, ERRATE7 ER7, ERRATE8 ER8, " +
                    //    "ERRATE9 ER9, ERRATE10 ER10, ERRATE11 ER11, ERRATE12 ER12, ERRATE13 ER13,ERRATE14 ER14, ERRATE15 ER15, ERRATE16 ER16, 0 AR1, 0 AR2, 0 AR3, 0 AR4, 0 AR5, 0 AR6, 0 AR7, 0 AR8, 0 AR9, 0 AR10," +
                    //    "0 AR11, 0 AR12, 0 AR13, 0 AR14, 0 AR15, 0 AR16, DEDRATE1 DED1, DEDRATE2 DED2, DEDRATE3 DED3, DEDRATE4 DED4, DEDRATE5 DED5, DEDRATE6 DED6, DEDRATE7 DED7, DEDRATE8 DED8, DEDRATE9 DED9, " +
                    //    "DEDRATE10 DED10, 0 ARD1, 0 ARD2, 0 ARD3, 0 ARD4, 0 ARD5, 0 ARD6, 0 ARD7, 0 ARD8, 0 ARD9, 0 ARD10, TOTEARN, TOTDED, NETSALARY from emp_master em " +
                    //    "inner join salmain es on em.vch_num = es.emp_code and es.type = 'SAL' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id) = 1 and find_in_set(dp.client_unit_id, em.client_unit_id) = 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id) = 1 and find_in_set(dg.client_unit_id, em.client_unit_id) = 1 " +
                    //    "where em.type = 'EMP' and em.client_id = '" + cl + "'  and em.client_unit_id = '" + ut + "' order by em.emp_code) t " +
                    //    "inner join (select * from master_setting where type = 'MNT') m on 1 = 1) tab where curryyyymmm not in ('" + allmnt.Replace(",", "','") + "')) a " +
                    //    "UNPIVOT(Amount FOR S_heads IN (ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9, AR10, AR11, AR12, AR13, AR14," +
                    //    "AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                    //    "INNER JOIN vehicle_master h on (case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' THEN " +
                    //    "REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                    //    "inner join master_setting m on m.master_id = substr(t.CURRYYYYMMM, 5, 3) and m.type = 'MNT' " +
                    //    "group by emp_code,Emp_Name,(case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN 'ARREAR_DEDUCTION' " +
                    //    "ELSE 'ARREAR_EARNING' END) END),salary_yr,m.master_name,S_heads,H.COL3,CURRYYYYMMM ORDER BY 3,curryyyymmm,m.master_name asc) kab group by emp_code, emp_name, hord, htype, s_name, salary_yr order by emp_code, hord";

                    mq1 = "select '" + zerodiff + "' zerodiff,emp_code,emp_name,hord,htype,s_name,'" + Ac_Year.Trim() + "' salary_yr,nvl(sum(decode(month_name,'April',amt)),0) April,nvl(sum(decode(month_name, 'May', amt)), 0) May,nvl(sum(decode(month_name, 'June', amt)), 0) June," +
                        "nvl(sum(decode(month_name, 'July', amt)), 0) July,nvl(sum(decode(month_name, 'August', amt)), 0) August,nvl(sum(decode(month_name, 'September', amt)), 0) September,nvl(sum(decode(month_name, 'October', amt)), 0) October," +
                        "nvl(sum(decode(month_name, 'November', amt)), 0) November,nvl(sum(decode(month_name, 'December', amt)), 0) December,nvl(sum(decode(month_name, 'January', amt)), 0) January,nvl(sum(decode(month_name, 'February', amt)), 0) February," +
                        "nvl(sum(decode(month_name, 'March', amt)), 0) March,nvl(max(decode(month_name, 'April', flg)), 'P') PApril,nvl(max(decode(month_name, 'May', flg)), 'P') PMay,nvl(max(decode(month_name, 'June', flg)), 'P') PJune," +
                        "nvl(max(decode(month_name, 'July', flg)), 'P') PJuly,nvl(max(decode(month_name, 'August', flg)), 'P') PAugust,nvl(max(decode(month_name, 'September', flg)), 'P') PSeptember,nvl(max(decode(month_name, 'October', flg)), 'P') POctober," +
                        "nvl(max(decode(month_name, 'November', flg)), 'P') PNovember,nvl(max(decode(month_name, 'December', flg)), 'P') PDecember,nvl(max(decode(month_name, 'January', flg)), 'P') PJanuary,nvl(max(decode(month_name, 'February', flg)), 'P') PFebruary," +
                        "nvl(max(decode(month_name, 'March', flg)), 'P') PMarch from (select Max(flg) flg, emp_code, Emp_Name, (case when substr(S_heads, 0, 2) = 'ER' then '1' when substr(S_heads, 0, 2) = 'DE' then '3' else " +
                        "(CASE WHEN substr(S_heads, 0, 3) = 'ARD' THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads, 0, 2) = 'ER' then 'EARNING' when substr(S_heads, 0, 2) = 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads, 0, 3) = 'ARD' " +
                        "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END)END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr,m.master_name Month_name," +
                        "sum(amount) AMT,CURRYYYYMMM from(SELECT * FROM (select 'A' flg,es.CURRYYYYMMM,'" + Ac_Year.Trim() + "' salary_yr,to_char(es.m_lastdt, 'Month') M_name,To_Char(em.st_dt, 'dd/MM/YYYY') DOJ,em.ifsc_code,em.account_no," +
                        "to_number(es.ot_hrs) othrs,em.pf_no,em.pf_uan,em.esi_no,em.emp_code,em.external_empno,em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Emp_Name," +
                        "nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig,em.f_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT,ER1,ER2,ER3,ER4,ER5,ER6,ER7,ER8,ER9,ER10,ER11,ER12,ER13,ER14,ER15,ER16," +
                        "AR1,AR2,AR3,AR4,AR5,AR6,AR7,AR8,AR9,AR10,AR11,AR12,AR13,AR14,AR15,AR16,DED1,DED2,DED3,DED4,DED5,DED6,DED7,DED8,DED9,DED10,ARD1,ARD2,ARD3,ARD4,ARD5,ARD6,ARD7,ARD8,ARD9,ARD10,TOTEARN,TOTDED,NETSALARY from emp_master em " +
                        "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + allmnt.Replace(",", "','").Trim() + "') " +
                        "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                        "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' " +
                        "union all " +
                        "select * from (select 'P' flg,(case when to_number(m.master_id)> 3 then ('" + Ac_Year.Split(' ')[0].Trim() + "' || m.master_id) else ('" + Ac_Year.Split(' ')[1].Trim() + "' || m.master_id) end) curryyyymmm," +
                        "'" + Ac_Year.Trim() + "' salary_yr,m.master_name m_name, t.* from(select To_Char(em.st_dt, 'dd/MM/YYYY') DOJ, em.ifsc_code, em.account_no, 0 othrs, em.pf_no, em.pf_uan, em.esi_no, em.emp_code, " +
                        "em.external_empno, em.old_empcode, trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Emp_Name, nvl(dp.master_name, '-') dept, " +
                        "nvl(dg.master_name, '-') desig, em.f_name, 0 month_days, 0 paid_days, 0 OT, 0 ESI_OT, ERRATE1 ER1, ERRATE2 ER2, ERRATE3 ER3, ERRATE4 ER4, ERRATE5 ER5, ERRATE6 ER6, ERRATE7 ER7, ERRATE8 ER8, ERRATE9 ER9," +
                        "ERRATE10 ER10, ERRATE11 ER11, ERRATE12 ER12, ERRATE13 ER13, ERRATE14 ER14, ERRATE15 ER15, ERRATE16 ER16, 0 AR1, 0 AR2, 0 AR3, 0 AR4, 0 AR5, 0 AR6, 0 AR7, 0 AR8, 0 AR9, 0 AR10, 0 AR11, 0 AR12, 0 AR13, " +
                        "0 AR14, 0 AR15, 0 AR16, DEDRATE1 DED1, DEDRATE2 DED2, DEDRATE3 DED3, DEDRATE4 DED4, DEDRATE5 DED5, DEDRATE6 DED6, DEDRATE7 DED7, DEDRATE8 DED8, DEDRATE9 DED9, DEDRATE10 DED10, 0 ARD1, 0 ARD2, 0 ARD3, " +
                        "0 ARD4, 0 ARD5, 0 ARD6, 0 ARD7, 0 ARD8, 0 ARD9, 0 ARD10, TOTEARN, TOTDED, NETSALARY from emp_master em " +
                        "inner join salmain es on em.vch_num = es.emp_code and es.type = 'SAL' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id " +
                        "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id) = 1 and find_in_set(dp.client_unit_id, em.client_unit_id) = 1 " +
                        "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id) = 1 and find_in_set(dg.client_unit_id, em.client_unit_id) = 1 " +
                        "where em.type = 'EMP' and em.client_id = '" + cl + "'  and em.client_unit_id = '" + ut + "' order by em.emp_code) t " +
                        "inner join (select * from master_setting where type = 'MNT') m on 1 = 1) tab where curryyyymmm not in ('" + allmnt.Replace(",", "','").Trim() + "') and " +
                        "to_number(to_char(to_date(doj,'dd/MM/yyyy'),'yyyyMM'))<= to_number((substr(curryyyymmm, 0, 4) || substr(curryyyymmm, 6, 2))) and to_number(curryyyymmm)> to_number('" + firstcur + "') ) a " +
                        "UNPIVOT(Amount FOR S_heads IN (ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9, AR10, AR11, AR12, AR13, AR14, " +
                        "AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                        "INNER JOIN vehicle_master h on (case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                        "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                        "inner join master_setting m on m.master_id = substr(t.CURRYYYYMMM, 5, 3) and m.type = 'MNT' group by emp_code,Emp_Name,(case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' " +
                        "then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,m.master_name,S_heads,H.COL3,CURRYYYYMMM " +
                        "ORDER BY 4,curryyyymmm,m.master_name asc) kab group by emp_code, emp_name, hord, htype, s_name, salary_yr order by emp_code, hord";
                    var dtc = sgen.getdata(userCode, mq1);
                    dst = new DataSet();
                    dtc.TableName = "prepcur";
                    dst.Tables.Add(dtc);
                    sgen.open_report_byDs_xml(userCode, dst, "yrprojsal", "Yearly Projected Salary");
                }
            }
            if (model[0].Col10.Trim().Equals("9011.9"))
            {
                if (command == "PF Check")
                {
                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.pf_no PF_No,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
                        "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
                        "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
                        "to_char(convert_tz(b.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOL," +
                        "(ut.unit_name || ' (' || b.client_unit_id || ')') Unit from (select count(vch_num) cnt, pf_no from emp_master " +
                        "where type= 'EMP' group by pf_no having count(vch_num)> 1) a inner join emp_master b on a.pf_no = b.pf_no " +
                        "inner join company_unit_profile ut on ut.cup_id = b.client_unit_id where (trim(b.pf_no) <> '0' or " +
                        "trim(b.pf_no)<>'') order by b.pf_no";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("PF Check Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('PF Check Report');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
                if (command == "UAN Check")
                {
                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.pf_uan PF_UAN,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
                       "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
                       "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
                       "to_char(convert_tz(b.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOL," +
                       "(ut.unit_name || ' (' || b.client_unit_id || ')') Unit from (select count(vch_num) cnt,pf_uan from emp_master " +
                       "where type= 'EMP' group by pf_uan having count(vch_num)> 1) a inner join emp_master b on a.pf_uan = b.pf_uan " +
                       "inner join company_unit_profile ut on ut.cup_id = b.client_unit_id where (trim(b.pf_uan) <> '0' or " +
                       "trim(b.pf_uan)<>'') order by b.pf_uan";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("UAN Check Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('UAN Check Report');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
                if (command == "ESI Check")
                {
                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.esi_no ESI_No,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
                       "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
                       "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
                       "to_char(convert_tz(b.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOL," +
                       "(ut.unit_name || ' (' || b.client_unit_id || ')') Unit from (select count(vch_num) cnt,esi_no from emp_master " +
                       "where type= 'EMP' group by esi_no having count(vch_num)> 1) a inner join emp_master b on a.esi_no = b.esi_no " +
                       "inner join company_unit_profile ut on ut.cup_id = b.client_unit_id where (trim(b.esi_no) <> '0' or " +
                       "trim(b.esi_no)<>'') order by b.esi_no";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("ESI Check Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('ESI Check Report');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
                if (command == "Adhaar Check")
                {
                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.adhaar_no Adhaar_No,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
                       "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
                       "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ," +
                       "to_char(convert_tz(b.ex_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOL," +
                       "(ut.unit_name || ' (' || b.client_unit_id || ')') Unit from (select count(vch_num) cnt, adhaar_no from emp_master " +
                       "where type= 'EMP' group by adhaar_no having count(vch_num)> 1) a inner join emp_master b on a.adhaar_no = b.adhaar_no " +
                       "inner join company_unit_profile ut on ut.cup_id = b.client_unit_id where (trim(b.adhaar_no) <> '0' or " +
                       "trim(b.adhaar_no)<>'') order by b.adhaar_no";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Adhaar Check Report", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Adhaar Check Report');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
            }
            if (model[0].Col10.Trim().Equals("9011.11"))//variance
            {
                lastyyyymmm = sgen.Make_date(prd1).ToString("yyyy0MM");
                curryyyymmm = sgen.Make_date(prd2).ToString("yyyy0MM");

                if (command == "Variance Summary")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string m1cnt = "", m2cnt = "";
                    mq2 = "select * from (SELECT 'm1' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE='PAY' AND CLIENT_ID='" + clientid_mst + "' AND CLIENT_UNIT_ID='" + unitid_mst + "' AND CURRYYYYMMM='" + lastyyyymmm + "' " +
                        "UNION ALL SELECT 'm2' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE = 'PAY' AND CLIENT_ID = '" + clientid_mst + "' AND CLIENT_UNIT_ID = '" + unitid_mst + "' AND CURRYYYYMMM = '" + curryyyymmm + "') a";
                    var dte = sgen.getdata(userCode, mq2);
                    if (dte.Rows.Count > 0)
                    {
                        m1cnt = dte.Rows[0]["cnt"].ToString();
                        m2cnt = dte.Rows[1]["cnt"].ToString();
                    }
                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));

                    mq1 = "select '" + zerodiff + "' zerodiff," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                        "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                        "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                        "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                        "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                        "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                        "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                        "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                        "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                        "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                        "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                        "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' order by em.emp_code)) a " +
                        "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                        " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                        "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                        "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                        "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                        "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 3,t.MONTH_NAME asc";
                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "zerodiff", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "var_sum", "Variance Summary");
                }
                if (command == "Variance Employee")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));

                    //mq1 = "select (case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' THEN '4' ELSE '2' END) END) hord," +
                    //    "(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype," +
                    //    "S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr,'" + lmname + "' as mm1,'" + cmname + "' as mm2," +
                    //    "Month_name,sum(amount) AMT,Emp_Name,emp_code,doj,paid_days,TOTEARN,TOTDED,NETSALARY from (SELECT * FROM " +
                    //    "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ,to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                    //    "em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                    //    "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                    //    "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                    //    "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                    //    "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                    //    "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' order by em.emp_code)) a " +
                    //    "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                    //    "AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                    //    "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                    //    "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                    //    "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                    //    "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3,Emp_Name,emp_code,doj,paid_days,TOTEARN,TOTDED,NETSALARY ORDER BY t.emp_code,t.MONTH_NAME,1 asc";

                    mq1 = "select salary_yr,'March' as mm1,'April' as mm2,Month_name,Emp_Name,emp_code,doj,paid_days,TOTEARN,TOTDED,NETSALARY from " +
                        "(select To_Char(em.st_dt, 'dd/MM/YYYY') DOJ, to_number(es.ot_hrs) othrs, substr(es.CURRYYYYMMM, 0, 4) salary_yr, es.curryyyymmm, em.emp_code," +
                        "em.external_empno, em.old_empcode, trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' || replace(em.LAST_NAME, '0', ''))) Emp_Name," +
                        "nvl(dp.master_name, '-') dept, nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') M_name, (case when es.CURRYYYYMMM = '2020004' then 'm2' else 'm1' end) Month_name," +
                        "es.mdays month_days, to_number(es.paiddays) paid_days,TOTEARN,TOTDED,NETSALARY from emp_master em " +
                        "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('2020003', '2020004') " +
                        "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                        "where em.type = 'EMP' and em.client_id = '001' and em.client_unit_id = '001001' order by em.emp_code) t " +
                        "group by salary_yr, curryyyymmm, Month_name, Emp_Name, emp_code, doj, paid_days, TOTEARN, TOTDED, NETSALARY ORDER BY t.emp_code,t.MONTH_NAME,1 asc";
                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData_Tot_multi(new string[] { "paid_days", "TOTEARN", "TOTDED", "NETSALARY" }, AggregateFunction.Sum, new string[] { "salary_yr", "mm1", "mm2", "Emp_Name", "emp_code", "doj" }, new string[] { "Month_name" });
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "var_emp", "Variance Employee");
                }
                if (command == "Variance Employee C")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));

                    mq1 = "select (case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' THEN '4' ELSE '2' END) END) hord," +
                        "(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype," +
                        "S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr,'" + lmname + "' as mm1,'" + cmname + "' as mm2," +
                        "Month_name,sum(amount) AMT,Emp_Name,emp_code,doj,paid_days,TOTEARN,TOTDED,NETSALARY from (SELECT * FROM " +
                        "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ,to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                        "em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                        "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                        "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                        "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                        "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                        "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                        "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' order by em.emp_code)) a " +
                        "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                        "AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                        "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                        "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                        "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                        "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3,Emp_Name,emp_code,doj,paid_days,TOTEARN,TOTDED,NETSALARY ORDER BY t.emp_code,t.MONTH_NAME,1 asc";
                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2", "Emp_Name", "emp_code", "doj", "paid_days", "TOTEARN", "TOTDED", "NETSALARY" }, new string[] { "Month_name" });
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "var_emp", "Variance Employee");
                }
                if (command == "Variance Desig Wise")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + cl + "' and client_unit_id='" + cl + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string m1cnt = "", m2cnt = "";
                    mq2 = "select * from (SELECT 'm1' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE='PAY' AND CLIENT_ID='" + cl + "' AND CLIENT_UNIT_ID='" + ut + "' AND CURRYYYYMMM='" + lastyyyymmm + "' " +
                        "UNION ALL SELECT 'm2' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE = 'PAY' AND CLIENT_ID = '" + cl + "' AND CLIENT_UNIT_ID = '" + ut + "' AND CURRYYYYMMM = '" + curryyyymmm + "') a";
                    var dte = sgen.getdata(userCode, mq2);
                    if (dte.Rows.Count > 0)
                    {
                        m1cnt = dte.Rows[0]["cnt"].ToString();
                        m2cnt = dte.Rows[1]["cnt"].ToString();
                    }
                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));
                    //string designame = sgen.seekval(userCode, "select master_name designame from master_setting where master_id='" + desig + "' and find_in_set(client_id,'" + cl + "')=1 and find_in_set(client_unit_id,'" + ut + "')=1 and type='MDG'", "designame");

                    //mq1 = "select '" + designame + "' designame," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                    //    "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                    //    "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                    //    "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                    //    "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                    //    "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                    //    "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                    //    "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                    //    "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                    //    "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                    //    "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' and em.emp_desig='" + desig + "' order by em.emp_code)) a " +
                    //    "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                    //    " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                    //    "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                    //    "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                    //    "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                    //    "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";

                    mq1 = "select '" + zerodiff + "' zerodiff,desig designame," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                       "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                       "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                       "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                       "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                       "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                       "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                       "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                       "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                       "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                       "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                       "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                       "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                       "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' and em.emp_desig in ('" + desig.Replace(",", "','") + "') order by em.emp_code)) a " +
                       "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                       " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                       "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                       "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                       "group by desig,(case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                       "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";

                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "zerodiff", "designame", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "var_desig", "Variance Desig Wise");
                }
                if (command == "Variance Dept Wise")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + cl + "' and client_unit_id='" + cl + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string m1cnt = "", m2cnt = "";
                    mq2 = "select * from (SELECT 'm1' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE='PAY' AND CLIENT_ID='" + cl + "' AND CLIENT_UNIT_ID='" + ut + "' AND CURRYYYYMMM='" + lastyyyymmm + "' " +
                        "UNION ALL SELECT 'm2' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE = 'PAY' AND CLIENT_ID = '" + cl + "' AND CLIENT_UNIT_ID = '" + ut + "' AND CURRYYYYMMM = '" + curryyyymmm + "') a";
                    var dte = sgen.getdata(userCode, mq2);
                    if (dte.Rows.Count > 0)
                    {
                        m1cnt = dte.Rows[0]["cnt"].ToString();
                        m2cnt = dte.Rows[1]["cnt"].ToString();
                    }
                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));
                    //string deptname = sgen.seekval(userCode, "select master_name deptname from master_setting where master_id='" + dept + "' and find_in_set(client_id,'" + cl + "')=1 and find_in_set(client_unit_id,'" + ut + "')=1 and type='MDP'", "deptname");

                    //mq1 = "select '" + deptname + "' deptname," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                    //    "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                    //    "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                    //    "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                    //    "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                    //    "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                    //    "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                    //    "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                    //    "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                    //    "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                    //    "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' and em.emp_dept='" + dept + "' order by em.emp_code)) a " +
                    //    "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                    //    " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                    //    "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                    //    "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                    //    "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                    //    "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";

                    mq1 = "select '" + zerodiff + "' zerodiff,dept deptname," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                      "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                      "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                      "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                      "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                      "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                      "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                      "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                      "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                      "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                      "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                      "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                      "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                      "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id = '" + ut + "' and em.emp_dept in ('" + dept.Replace(",", "','") + "') order by em.emp_code)) a " +
                      "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                      " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                      "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                      "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                      "group by dept,(case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                      "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";

                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "zerodiff", "deptname", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "var_dept", "Variance Dept Wise");
                }
                if (command == "Variance Summary Company")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + cl + "' and client_unit_id='" + cl + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string m1cnt = "", m2cnt = "";
                    mq2 = "select * from (SELECT 'm1' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE='PAY' AND CLIENT_ID='" + cl + "' AND CLIENT_UNIT_ID in ('" + ut + "') AND CURRYYYYMMM='" + lastyyyymmm + "' " +
                        "UNION ALL SELECT 'm2' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE = 'PAY' AND CLIENT_ID = '" + clientid_mst + "' AND CLIENT_UNIT_ID in ('" + unitid_mst + "') AND CURRYYYYMMM = '" + curryyyymmm + "') a";
                    var dte = sgen.getdata(userCode, mq2);
                    if (dte.Rows.Count > 0)
                    {
                        m1cnt = dte.Rows[0]["cnt"].ToString();
                        m2cnt = dte.Rows[1]["cnt"].ToString();
                    }
                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));

                    mq1 = "select '" + zerodiff + "' zerodiff," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                        "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                        "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                        "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                        "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                        "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                        "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                        "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                        "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                        "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                        "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                        "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') order by em.emp_code)) a " +
                        "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                        " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                        "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                        "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                        "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                        "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 3,t.MONTH_NAME asc";
                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "zerodiff", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "var_sumcom", "Variance Summary Company");
                }
                if (command == "Variance Desig Wise Company")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + cl + "' and client_unit_id='" + cl + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string m1cnt = "", m2cnt = "";
                    mq2 = "select * from (SELECT 'm1' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE='PAY' AND CLIENT_ID='" + cl + "' AND CLIENT_UNIT_ID in ('" + ut + "') AND CURRYYYYMMM='" + lastyyyymmm + "' " +
                        "UNION ALL SELECT 'm2' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE = 'PAY' AND CLIENT_ID = '" + cl + "' AND CLIENT_UNIT_ID in ('" + ut + "') AND CURRYYYYMMM = '" + curryyyymmm + "') a";
                    var dte = sgen.getdata(userCode, mq2);
                    if (dte.Rows.Count > 0)
                    {
                        m1cnt = dte.Rows[0]["cnt"].ToString();
                        m2cnt = dte.Rows[1]["cnt"].ToString();
                    }
                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));
                    //string designame = sgen.seekval(userCode, "select master_name designame from master_setting where master_id='" + desig + "' and find_in_set(client_id,'" + cl + "')=1 and find_in_set(client_unit_id,'" + ut + "')=1 and type='MDG'", "designame");

                    //mq1 = "select '" + designame + "' designame," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                    //    "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                    //    "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                    //    "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                    //    "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                    //    "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                    //    "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                    //    "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                    //    "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                    //    "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                    //    "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_desig='" + desig + "' order by em.emp_code)) a " +
                    //    "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                    //    " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                    //    "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                    //    "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                    //    "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                    //    "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";

                    mq1 = "select '" + zerodiff + "' zerodiff,desig designame," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                 "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                 "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                 "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                 "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                 "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                 "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                 "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                 "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                 "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                 "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                 "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                 "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                 "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_desig in ('" + desig.Replace(",", "','").Trim() + "') order by em.emp_code)) a " +
                 "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                 " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                 "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                 "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                 "group by desig,(case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                 "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";
                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "zerodiff", "designame", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "var_desigcom", "Variance Desig Wise Company");
                }
                if (command == "Variance Dept Wise Company")
                {
                    mq = "";
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + cl + "' and client_unit_id='" + cl + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string m1cnt = "", m2cnt = "";
                    mq2 = "select * from (SELECT 'm1' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE='PAY' AND CLIENT_ID='" + cl + "' AND CLIENT_UNIT_ID in ('" + ut + "') AND CURRYYYYMMM='" + lastyyyymmm + "' " +
                        "UNION ALL SELECT 'm2' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE = 'PAY' AND CLIENT_ID = '" + cl + "' AND CLIENT_UNIT_ID in ('" + ut + "') AND CURRYYYYMMM = '" + curryyyymmm + "') a";
                    var dte = sgen.getdata(userCode, mq2);
                    if (dte.Rows.Count > 0)
                    {
                        m1cnt = dte.Rows[0]["cnt"].ToString();
                        m2cnt = dte.Rows[1]["cnt"].ToString();
                    }
                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));
                    //string deptname = sgen.seekval(userCode, "select master_name deptname from master_setting where master_id='" + dept + "' and find_in_set(client_id,'" + cl + "')=1 and find_in_set(client_unit_id,'" + ut + "')=1 and type='MDP'", "deptname");

                    //mq1 = "select '" + deptname + "' deptname," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                    //    "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                    //    "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                    //    "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                    //    "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                    //    "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                    //    "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                    //    "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                    //    "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                    //    "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                    //    "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                    //    "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                    //    "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_dept='" + dept + "' order by em.emp_code)) a " +
                    //    "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                    //    " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                    //    "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                    //    "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                    //    "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                    //    "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";

                    mq1 = "select '" + zerodiff + "' zerodiff,dept deptname," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                        "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                        "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                        "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                        "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                        "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                        "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                        "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                        "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                        "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                        "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                        "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                        "where em.type = 'EMP' and em.client_id = '" + cl + "' and em.client_unit_id in ('" + ut + "') and em.emp_dept in ('" + dept.Replace(",", "','").Trim() + "') order by em.emp_code)) a " +
                        "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                        " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                        "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                        "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + cl + "' " +
                        "group by dept,(case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                        "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";
                    var dtc = sgen.getdata(userCode, mq1);
                    Pivot pv = new Pivot(dtc, MyGuid);
                    var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "zerodiff", "deptname", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                    dst = new DataSet();
                    dtm.TableName = "prepcur";
                    dst.Tables.Add(dtc1);
                    sgen.open_report_byDs_xml(userCode, dst, "var_deptcom", "Variance Dept Wise Company");
                }
            }
            if (model[0].Col10.Trim().Equals("9011.12"))//employee
            {
                if (command == "Employee Under Probation")
                {
                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.emp_code,b.old_empcode,b.external_empno,(b.first_name||replace(b.middle_name,'0','')" +
                        "||replace(b.last_name,'0','')) Name,b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
                        "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ,b.prob Probation_Days from emp_master b " +
                        "where type= 'EMP' and client_unit_id='" + unitid_mst + "' and to_date(b.st_dt +to_number(b.prob))<=sysdate order by b.emp_code asc";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Employee Under Probation", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Employee Under Probation');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
            }
            if (model[0].Col10.Trim().Equals("9011.13"))//employee
            {
                if (command == "Callback")
                {
                    model = StartCallback(model);
                    return View(model);
                }
            }
            if (model[0].Col10.Trim().Equals("9012.1"))//employee
            {
                if (command == "Gratuity")
                {
                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.emp_code,(b.first_name||replace(b.middle_name,'0','')||replace(b.last_name,'0','')) Name," +
                        "b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
                        "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ,d.master_name Department,g.master_name Designation," +
                        "p.totearn Gross_Salary from emp_master b " +
                        "inner join master_setting d on d.master_id=b.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')=1 " +
                        "inner join master_setting g on g.master_id=b.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,'" + unitid_mst + "')=1 " +
                        "inner join paymain p on b.vch_num = p.emp_code and p.type = 'PAY' and b.client_id = p.client_id and b.client_unit_id = p.client_unit_id and p.CURRYYYYMMM= '" + curryyyymmm + "' " +
                        "where b.type= 'EMP' and b.client_unit_id='" + unitid_mst + "' order by b.emp_code asc";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Gratuity", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Gratuity');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
            }
            if (model[0].Col10.Trim().Equals("9012.2"))//employee
            {
                if (command == "Leave Encashment")
                {
                    mq = "select (b.vch_num||b.emp_code||b.client_unit_id) fstr,b.emp_code,(b.first_name||replace(b.middle_name,'0','')||replace(b.last_name,'0','')) Name," +
                        "b.f_name Father_Name, to_char(convert_tz(b.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOB," +
                        "to_char(convert_tz(b.st_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') DOJ,d.master_name Department,g.master_name Designation," +
                        "p.lv1 Earn_Leaves from emp_master b " +
                        "inner join master_setting d on d.master_id=b.emp_dept and d.type='MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')=1 " +
                        "inner join master_setting g on g.master_id=b.emp_desig and g.type='MDG' and find_in_set(g.client_unit_id,'" + unitid_mst + "')=1 " +
                        "inner join paymain p on b.vch_num = p.emp_code and p.type = 'PAY' and b.client_id = p.client_id and b.client_unit_id = p.client_unit_id and p.CURRYYYYMMM= '" + curryyyymmm + "' " +
                        "where b.type= 'EMP' and b.client_unit_id='" + unitid_mst + "' order by b.emp_code asc";
                    dt = sgen.getdata(userCode, mq);
                    mq1 = sgen.open_grid_dt("Leave Encashment", dt, 0);
                    if (mq1 == "ok") { ViewBag.scripCall = "callFoo('Leave Encashment');"; }
                    else { ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);"; }
                    return View(model);
                }
            }
            //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
            if (!command.Trim().Equals("PT Tax Challan"))
            {
                ViewBag.scripCall += "showRptnew('Reports');";
            }
            return View(model);
        }
        #endregion
        #region travel request
        public ActionResult tr_req()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "SALARY GRADE";
            tm1.Col10 = "enx_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KSG";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            TempData[MyGuid + "_Tlist1"] = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult tr_req(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            TempData[MyGuid + "_TList1"] = mod1;
            model[0].TList1 = mod1;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                    model[0].Col17 = currdate;
                    model[0].Col19 = currdate;
                    model[0].Col20 = currdate;
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);


                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = sgen.Savedate(model[0].Col17, true);
                        dr["col1"] = model[0].dt1.Rows[i][2].ToString();
                        dr["col2"] = model[0].dt1.Rows[i][5].ToString();
                        dr["col3"] = model[0].dt1.Rows[i][6].ToString();
                        dr["col4"] = model[0].dt1.Rows[i][7].ToString();
                        dr["col5"] = model[0].dt1.Rows[i][7].ToString();
                        dr["col10"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["col11"] = model[0].Col21;
                        dr["col12"] = model[0].Col31;
                        dr["col13"] = model[0].Col32;
                        dr["col14"] = model[0].Col33;
                        dr["col15"] = model[0].Col34;
                        dr["col16"] = model[0].Col35;
                        dr["col17"] = model[0].Col36;
                        dr["col18"] = model[0].Col21;
                        dr["col21"] = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                        if (isedit)
                        {
                            dr["client_id"] = model[0].Col1.Trim();
                            dr["client_unit_id"] = model[0].Col2.Trim();
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT");
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region travel approval
        public ActionResult tr_app()
        {
            FillMst("");
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "SALARY GRADE";
            tm1.Col10 = "enx_tab";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "KSG";
            tm1.Col13 = "Save";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.TList1 = mod1;
            TempData[MyGuid + "_Tlist1"] = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult tr_app(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            TempData[MyGuid + "_TList1"] = mod1;
            model[0].TList1 = mod1;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                    model[0].Col17 = currdate;
                    model[0].Col19 = currdate;
                    model[0].Col20 = currdate;
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.month(userCode, unitid_mst);


                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = sgen.Savedate(model[0].Col17, true);
                        dr["col1"] = model[0].dt1.Rows[i][2].ToString();
                        dr["col2"] = model[0].dt1.Rows[i][5].ToString();
                        dr["col3"] = model[0].dt1.Rows[i][6].ToString();
                        dr["col4"] = model[0].dt1.Rows[i][7].ToString();
                        dr["col5"] = model[0].dt1.Rows[i][7].ToString();
                        dr["col10"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["col11"] = model[0].Col21;
                        dr["col12"] = model[0].Col31;
                        dr["col13"] = model[0].Col32;
                        dr["col14"] = model[0].Col33;
                        dr["col15"] = model[0].Col34;
                        dr["col16"] = model[0].Col35;
                        dr["col17"] = model[0].Col36;
                        dr["col18"] = model[0].Col21;
                        dr["col21"] = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                        if (isedit)
                        {
                            dr["client_id"] = model[0].Col1.Trim();
                            dr["client_unit_id"] = model[0].Col2.Trim();
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT");
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region mediclaim ins
        public ActionResult med_ins()
        {
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            FillMst(m_id_mst);
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "";
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            tm1.Col9 = "MEDICLAIM DETAILS";
            tm1.Col10 = "enx_tab2";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "MED";
            tm1.TList1 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.TList2 = mod1;
            tm1.SelectedItems2 = new string[] { "" };
            tm1.TList3 = mod1;
            tm1.SelectedItems3 = new string[] { "" };
            tm1.TList4 = mod1;
            tm1.SelectedItems4 = new string[] { "" };
            tm1.TList5 = mod1;
            tm1.SelectedItems5 = new string[] { "" };
            model.Add(tm1);
            sgen.SetSession(MyGuid, "SSEEKVAL", cond);
            model = CallbackFun("DETAIL", "Y", "med_ins", "Hr", model);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult med_ins(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region ddl          
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            model[0].TList2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            model[0].TList3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            model[0].TList4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];
            model[0].TList5 = (List<SelectListItem>)TempData[MyGuid + "_TList5"];
            TempData[MyGuid + "_TList1"] = model[0].TList1;
            TempData[MyGuid + "_TList2"] = model[0].TList2;
            TempData[MyGuid + "_TList3"] = model[0].TList3;
            TempData[MyGuid + "_TList4"] = model[0].TList4;
            TempData[MyGuid + "_TList5"] = model[0].TList5;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            #endregion
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                    }
                    else
                    {
                        isedit = false;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["rec_id"] = "0";
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["COL1"] = model[0].Col24; //= bdt.Rows[0]["mothername"].ToString(); 
                    dr["R_NO"] = model[0].Col17; //= bdt.Rows[0]["EMP"].ToString(); 
                    dr["COL16"] = model[0].Col18; //= bdt.Rows[0]["EMP"].ToString(); 
                    dr["COL2"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["COL6"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["COL10"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["COL18"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["COL19"] = model[0].SelectedItems5.FirstOrDefault();
                    dr["DATE1"] = sgen.Make_date_S(model[0].Col26); // = bdt.Rows[0]["mthrdob"].ToString();
                    //dr["COL4"] = model[0].Col27; //= bdt.Rows[0]["mthrage"].ToString(); 
                    dr["COL3"] = model[0].Col28;// = bdt.Rows[0]["fathername"].ToString();  
                    dr["DATE2"] = sgen.Make_date_S(model[0].Col30);// = bdt.Rows[0]["fthrdob"].ToString(); 
                    //dr["COL17"] = model[0].Col31;// = bdt.Rows[0]["fthrage"].ToString(); 
                    dr["COL5"] = model[0].Col32;// = bdt.Rows[0]["sousename"].ToString();  
                    dr["date3"] = sgen.Make_date_S(model[0].Col34); //= bdt.Rows[0]["spousedob"].ToString();
                    dr["COL4"] = model[0].Col36;// = bdt.Rows[0]["fchlname"].ToString();
                    dr["COL9"] = model[0].Col37; //= bdt.Rows[0]["fchlgender"].ToString();
                    dr["DATE4"] = sgen.Make_date_S(model[0].Col38); //= bdt.Rows[0]["fchldob"].ToString();
                    //dr["COL10"] = model[0].Col39; //= bdt.Rows[0]["fchlage"].ToString();
                    dr["COL11"] = model[0].Col40; //= bdt.Rows[0]["schlname"].ToString();
                    dr["COL12"] = model[0].Col41; //= bdt.Rows[0]["schlgender"].ToString();
                    dr["COL7"] = model[0].Col44; //= bdt.Rows[0]["schlgender"].ToString();
                    //dr["REF_CODE"] = model[0].Col43;// = bdt.Rows[0]["schlage"].ToString();
                    dr["DATE5"] = sgen.Make_date_S(model[0].Col42); //= bdt.Rows[0]["schldob"].ToString();currdate, dr, model);
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    dr["edit_by"] = userid_mst;
                    dr["edit_date"] = currdate;
                    dataTable.Rows.Add(dr);
                    res = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        // ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                    }
                    else { ViewBag.scripCall = "showmsgJS(1, 'Something Went Wrong, Data Not Saved', 0);"; }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region my profile
        public ActionResult my_prf()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            //ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsave = "";
            //ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "MY PROFILE";
            tm1.Col10 = "emp_master";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "EMP";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = MyGuid.Trim();
            model.Add(tm1);
            //ViewBag.scripCall = "enableForm();";
            sgen.SetSession(MyGuid, "SSEEKVAL", cond);
            model = CallbackFun("DETAIL", "Y", "my_prf", "Hr", model);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult my_prf(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            //DataTable dtm = sgen.settable(hftable);
            //model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    //string currdate = sgen.server_datetime(userCode);
                    //if (Session["EDMODE"].ToString().Equals("Y"))
                    //{
                    //    isedit = true;
                    //}
                    //DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    //DataRow drn = dataTable.NewRow();
                    if (model[0].Col37 != "" && model[0].Col37 != null)
                    {
                        var res = sgen.execute_cmd(userCode, "UPDATE emp_master SET emp_Address = '" + model[0].Col37 + "' WHERE " +
                            " emp_code='" + model[0].Col17 + "' and contact_no = '" + model[0].Col27 + "' and email_id = '" + model[0].Col26 + "' and " + model[0].Col8 + "");
                        if (res) { ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Updated Successfully');"; }
                        else { ViewBag.scripCall = "showmsgJS(1, 'Something Went Wrong, Data Not Saved', 0);"; }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region empdoc             
        public ActionResult empdoc()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            if (model[0].Col14 == "9008.7")
            {
                model[0].Col9 = "EMPLOYEE QUALIFICATIONS";
                model[0].Col12 = "KQU";
            }
            else if (model[0].Col14 == "9008.8")
            {
                model[0].Col9 = "EMPLOYEE WORK EXPERIENCE";
                model[0].Col12 = "KWE";
            }
            else if (model[0].Col14 == "9008.9")
            {
                model[0].Col9 = "EMPLOYEE HOBBY";
                model[0].Col12 = "KHB";
            }
            else if (model[0].Col14 == "9008.10")
            {
                model[0].Col9 = "EMPLOYEE BOND";
                model[0].Col12 = "KBO";
            }
            sgen.SetSession(MyGuid, "EDOCTYPE", model[0].Col12);
            model[0].Col10 = "enx_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            return View(model);
        }
        [HttpPost]
        public ActionResult empdoc(List<Tmodelmain> model, string command, string hfrow)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            if (model[0].LTM1 != null)
            {
                for (int f = 0; f < model[0].LTM1.Count; f++)
                {
                    try
                    {
                        if (model[0].LTM1[f].File1[0] != null)
                        {
                            sgen.SetSession(MyGuid, "empdoc" + f, model[0].LTM1[f].File1);
                            model[0].LTM1[f].Col17 = model[0].LTM1[f].File1[0].FileName;
                        }
                    }
                    catch (Exception ex)
                    {
                        sgen.SetSession(MyGuid, "empdoc" + f, null);
                    }
                }
            }
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    model[0].LTM1 = new List<Tmodelmain>();
                    Tmodelmain ltm = new Tmodelmain();
                    if (model[0].Col14 == "9008.7")
                    {
                        model[0].Col21 = "Qualification";
                        ltm.Col1 = "Qualification";
                        ltm.Col2 = "Medium";
                        ltm.Col3 = "Institute/College";
                        ltm.Col4 = "Course Duration";
                        ltm.Col5 = "Passout Date";
                        ltm.Col6 = "Y";
                        ltm.Col7 = "Y";
                        ltm.Col8 = "Y";
                        ltm.Col9 = "Y";
                        ltm.Col10 = "Y";
                        ltm.Col21 = "ND";
                        ltm.Col22 = "ND";
                        ltm.Col23 = "ND";
                        ltm.Col24 = "ND";
                        ltm.Col25 = "YD";
                    }
                    else if (model[0].Col14 == "9008.8")
                    {
                        model[0].Col21 = "Experience";
                        ltm.Col1 = "Company";
                        ltm.Col2 = "Experience (in yrs)";
                        ltm.Col3 = "From Date";
                        ltm.Col4 = "To Date";
                        ltm.Col6 = "Y";
                        ltm.Col7 = "Y";
                        ltm.Col8 = "Y";
                        ltm.Col9 = "Y";
                        ltm.Col10 = "N";
                        ltm.Col21 = "ND";
                        ltm.Col22 = "ND";
                        ltm.Col23 = "YD";
                        ltm.Col24 = "YD";
                        ltm.Col25 = "ND";
                    }
                    else if (model[0].Col14 == "9008.9")
                    {
                        model[0].Col21 = "Hobby";
                        ltm.Col1 = "Hobby";
                        ltm.Col2 = "Description";
                        ltm.Col6 = "Y";
                        ltm.Col7 = "Y";
                        ltm.Col8 = "N";
                        ltm.Col9 = "N";
                        ltm.Col10 = "N";
                        ltm.Col21 = "ND";
                        ltm.Col22 = "ND";
                        ltm.Col23 = "ND";
                        ltm.Col24 = "ND";
                        ltm.Col25 = "ND";
                    }
                    else if (model[0].Col14 == "9008.10")
                    {
                        model[0].Col21 = "Bond";
                        ltm.Col1 = "Name";
                        ltm.Col2 = "Detail";
                        ltm.Col3 = "Start Date";
                        ltm.Col4 = "End Date";
                        ltm.Col5 = "Amount";
                        ltm.Col6 = "Y";
                        ltm.Col7 = "Y";
                        ltm.Col8 = "Y";
                        ltm.Col9 = "Y";
                        ltm.Col10 = "Y";
                        ltm.Col21 = "ND";
                        ltm.Col22 = "ND";
                        ltm.Col23 = "YD";
                        ltm.Col24 = "YD";
                        ltm.Col25 = "ND";
                    }
                    ltm.Col17 = "Choose File";
                    ltm.Col20 = "1";
                    model[0].LTM1.Add(ltm);
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; }
                else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                model = CallbackFun(btnval, "N", actionName, controllerName, model);
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    if (model[0].LTM1.Count <= 0)
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.scripCall += "showmsgJS(1, 'Please fill atleast 1 row', 0);";
                    }
                    Satransaction sat1 = new Satransaction(userCode, MyGuid);
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col16.Trim() + "'";
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        mq1 = "";
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model[0].LTM1.Count; i++)
                    {
                        #region dr
                        DataRow dr = dataTable.NewRow();
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = currdate;
                        dr["col2"] = model[0].Col18;//empvchnum
                        if (model[0].Col14 == "9008.7")
                        {
                            dr["col1"] = model[0].LTM1[i].Col11;//qualification
                            dr["col3"] = model[0].LTM1[i].Col12;//medium
                            dr["col5"] = model[0].LTM1[i].Col13;//college
                            dr["col6"] = model[0].LTM1[i].Col14;//course duration                   
                            dr["date1"] = sgen.Make_date_S(model[0].LTM1[i].Col15);//passout date
                        }
                        else if (model[0].Col14 == "9008.8")
                        {
                            dr["col1"] = model[0].LTM1[i].Col11;//company
                            dr["col3"] = model[0].LTM1[i].Col12;//experience                  
                            dr["date1"] = sgen.Make_date_S(model[0].LTM1[i].Col13);//from date
                            dr["date2"] = sgen.Make_date_S(model[0].LTM1[i].Col14);//to date
                        }
                        else if (model[0].Col14 == "9008.9")
                        {
                            dr["col1"] = model[0].LTM1[i].Col11;//hobby
                            dr["col3"] = model[0].LTM1[i].Col12;//decription
                        }
                        else if (model[0].Col14 == "9008.10")
                        {
                            dr["col1"] = model[0].LTM1[i].Col11;//name
                            dr["col3"] = model[0].LTM1[i].Col12;//detail                  
                            dr["date1"] = sgen.Make_date_S(model[0].LTM1[i].Col13);//start date
                            dr["date2"] = sgen.Make_date_S(model[0].LTM1[i].Col14);//end date
                            dr["col5"] = model[0].LTM1[i].Col15;//amount
                        }
                        dr["r_no"] = model[0].LTM1[i].Col20;//rowno                                                                                              
                        dr["rec_id"] = "0";
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                        }
                        dataTable.Rows.Add(dr);
                        #endregion
                    }
                    res = sgen.Update_data_uncommit2(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit, sat1);
                    if (res)
                    {
                        DataTable dtfile = cmd_Fun.GetStructure(userCode, "file_tab");
                        string serverpath1 = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                        for (int k = 0; k < model[0].LTM1.Count; k++)
                        {
                            try
                            {
                                List<HttpPostedFileBase> ff = (List<HttpPostedFileBase>)sgen.GetSession(MyGuid, "empdoc" + k);
                                foreach (HttpPostedFileBase file1 in ff)
                                {
                                    ctype1 = file1.ContentType;
                                    fileName1 = file1.FileName;
                                    path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
                                    encpath1 = sgen.Convert_Stringto64(path1).ToString();
                                    finalpath1 = serverpath1 + encpath1;
                                    file1.SaveAs(finalpath1);
                                    docfile(model, currdate, dtfile, fileName1, encpath1, model[0].Col21, ctype1, k + 1);
                                }
                            }
                            catch (Exception ex) { }
                        }
                        ok = sgen.Update_data_uncommit2(userCode, dtfile, "file_tab", "", false, sat1);
                        if (!ok)
                        {
                            sat1.Rollback();
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.scripCall += "showmsgJS(1, 'Something went wrong in file', 0);";
                            ModelState.Clear();
                            return View(model);
                        }
                        sat1.Commit();
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                        });
                    }
                    else
                    {
                        sat1.Rollback();
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "showmsgJS(1, 'Data Not Saved', 0);";
                        ModelState.Clear();
                        return View(model);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString().Replace("'", "") + "', 0);"; }
            }
            else if (command == "+")
            {
                try
                {
                    Tmodelmain ntm = new Tmodelmain();
                    ntm.Col20 = (Convert.ToInt32(model[0].LTM1.Max(x => sgen.Make_int(x.Col20))) + 1).ToString();
                    ntm.Col1 = model[0].LTM1[0].Col1;
                    ntm.Col2 = model[0].LTM1[0].Col2;
                    ntm.Col3 = model[0].LTM1[0].Col3;
                    ntm.Col4 = model[0].LTM1[0].Col4;
                    ntm.Col5 = model[0].LTM1[0].Col5;
                    ntm.Col6 = model[0].LTM1[0].Col6;
                    ntm.Col7 = model[0].LTM1[0].Col7;
                    ntm.Col8 = model[0].LTM1[0].Col8;
                    ntm.Col9 = model[0].LTM1[0].Col9;
                    ntm.Col10 = model[0].LTM1[0].Col10;
                    ntm.Col21 = model[0].LTM1[0].Col21;
                    ntm.Col22 = model[0].LTM1[0].Col22;
                    ntm.Col23 = model[0].LTM1[0].Col23;
                    ntm.Col24 = model[0].LTM1[0].Col24;
                    ntm.Col25 = model[0].LTM1[0].Col25;
                    ntm.Col17 = "Choose File";
                    model[0].LTM1.Add(ntm);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);"; }
            }
            else if (command == "x")
            {
                if (model[0].LTM1.Count > 1) model[0].LTM1.RemoveAt(sgen.Make_int(hfrow));
                else
                {
                    ViewBag.scripCall += "showmsgJS(1,'You cannot remove last entry',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
            }
            ModelState.Clear();
            return View(model);
        }
        private void docfile(List<Tmodelmain> model, string currdate, DataTable dtfile, string filename, string filepath, string filetitle, string content_type, int rno)
        {
            DataRow drf = dtfile.NewRow();
            drf["vch_num"] = model[0].Col16.Trim();
            drf["rec_id"] = 0;
            drf["vch_date"] = currdate;
            drf["type"] = model[0].Col12;
            drf["type_desc"] = model[0].Col21;
            drf["ref_code"] = model[0].Col16.Trim();
            drf["ref_code1"] = Convert.ToInt32(model[0].Col16.Trim());
            drf["file_name"] = filename;
            drf["file_path"] = filepath;
            drf["r_no"] = rno;
            drf["col1"] = filetitle;
            drf["col2"] = content_type;
            drf["rec_id"] = "0";
            drf["ent_by"] = userid_mst;
            drf["ent_date"] = currdate;
            drf["client_id"] = clientid_mst;
            drf["client_unit_id"] = unitid_mst;
            drf["edit_by"] = "-";
            drf["edit_date"] = currdate;
            dtfile.Rows.Add(drf);
        }
        #endregion
        #region Open Position Approval
        public ActionResult pos_app()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            model[0].Col9 = "OPEN POSITION APPROVE";
            model[0].Col10 = "kc_tab";
            model[0].Col12 = "OPN"; //
            return View(model);
        }
        [HttpPost]
        public ActionResult pos_app(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            if (command == "Submit")
            {
                try
                {
                    string status = "";
                    Boolean isok = true;
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Col23 == "P")
                        {
                            status = "Pending";
                        }
                        else if (model[i].Col23 == "A")
                        {
                            status = "Approved";
                        }
                        else if (model[i].Col23 == "R")
                        {
                            status = "Rejected";
                        }
                        mq = "update kc_tab set col17='" + userid_mst + "',col18='" + status + "' where type='OPN' and vch_num='" + model[i].Col16 + "'and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' ";
                        isok = sgen.execute_cmd(userCode, mq);
                    }
                    if (isok == true)
                    {
                        try
                        {
                            DataTable dt = new DataTable();
                            mq = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type fstr," +
                               " a.vch_num , a.col1 as position_code ,a.col21 as position_title,b.master_name as designation," +
                               "c.master_name as Department,a.col15 no_of_postion,(case when to_char(a.date1, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date1, '" + sgen.Getsqldateformat() + "') end ) opening_date" +
                               " ,(case when to_char(a.date2, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date2, '" + sgen.Getsqldateformat() + "') end ) Expt_Closing_Date from kc_tab a " +
                               "left join master_setting b on a.col2 = b.master_id and b.type = 'MDG' and find_in_set(b.client_unit_id," + unitid_mst + ")= 1 " +
                               "left join master_setting c on a.col2 = c.master_id and c.type = 'MDP' and find_in_set(c.client_unit_id," + unitid_mst + ")= 1 " +
                               "where a.type = 'OPN' and a.client_unit_id = '" + unitid_mst + "' and (a.col18='0' or a.col18='Pending')";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model = new List<Tmodelmain>();
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                                foreach (DataRow dr in dt.Rows)
                                {
                                    model.Add(new Tmodelmain
                                    {
                                        Col9 = tm.Col9,
                                        Col11 = tm.Col11,
                                        Col12 = tm.Col12,
                                        Col10 = tm.Col10,
                                        Col13 = tm.Col13,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col16 = dr["vch_num"].ToString(),
                                        Col17 = dr["position_code"].ToString(),
                                        Col18 = dr["position_title"].ToString(),
                                        Col19 = dr["designation"].ToString(),
                                        Col20 = dr["Department"].ToString(),
                                        Col21 = dr["opening_date"].ToString(),
                                        Col22 = dr["Expt_Closing_Date"].ToString(),
                                        Col23 = "P",
                                    });
                                }
                            }
                        }
                        catch (Exception ex) { }
                        {
                            ViewBag.scripCall = "showmsgJS(1,'Leave  Status updated',1)"; return View(model);
                        }
                    }
                }
                catch (Exception ex) { }
            }
            else if (command == "Pending")
            {
                try
                {
                    DataTable dt = new DataTable();
                    mq = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type fstr," +
                               " a.vch_num , a.col1 as position_code ,a.col21 as position_title,b.master_name as designation," +
                               "c.master_name as Department,a.col15 no_of_postion,(case when to_char(a.date1, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date1, '" + sgen.Getsqldateformat() + "') end ) opening_date" +
                               " ,(case when to_char(a.date2, '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '' else to_char(a.date2, '" + sgen.Getsqldateformat() + "') end ) Expt_Closing_Date from kc_tab a " +
                               "left join master_setting b on a.col2 = b.master_id and b.type = 'MDG' and find_in_set(b.client_unit_id," + unitid_mst + ")= 1 " +
                               "left join master_setting c on a.col2 = c.master_id and c.type = 'MDP' and find_in_set(c.client_unit_id," + unitid_mst + ")= 1 " +
                               "where a.type = 'OPN' and a.client_unit_id = '" + unitid_mst + "' and (a.col18='0' or a.col18='Pending')";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in dt.Rows)
                        {
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col24 = tm.Col24,
                                Col16 = dr["vch_num"].ToString(),
                                Col17 = dr["position_code"].ToString(),
                                Col18 = dr["position_title"].ToString(),
                                Col19 = dr["designation"].ToString(),
                                Col20 = dr["Department"].ToString(),
                                Col21 = dr["opening_date"].ToString(),
                                Col22 = dr["Expt_Closing_Date"].ToString(),
                                Col23 = "P",
                            });
                        }
                    }
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region list of Approved Open Position 
        public ActionResult apprd_pos()
        {
            FillMst("");
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "MY PROFILE";
            //tm1.Col10 = "enx_tab";
            //tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            //tm1.Col12 = "KSG";
            tm1.Col13 = "Update";
            tm1.Col121 = "U";
            tm1.Col122 = "<u>U</u>pdate";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult apprd_pos(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Interview Schedule
        public ActionResult intrw_sch()
        {
            FillMst("");
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "MY PROFILE";
            //tm1.Col10 = "enx_tab";
            //tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            //tm1.Col12 = "KSG";
            tm1.Col13 = "Update";
            tm1.Col121 = "U";
            tm1.Col122 = "<u>U</u>pdate";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult intrw_sch(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Final Selection
        public ActionResult final_selc()
        {
            FillMst("");
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "MY PROFILE";
            //tm1.Col10 = "enx_tab";
            //tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            //tm1.Col12 = "KSG";
            tm1.Col13 = "Update";
            tm1.Col121 = "U";
            tm1.Col122 = "<u>U</u>pdate";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult final_selc(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Mediclaim Policy Detail
        public ActionResult pol_dtl()
        {
            FillMst("");
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "MY PROFILE";
            //tm1.Col10 = "enx_tab";
            //tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            //tm1.Col12 = "KSG";
            tm1.Col13 = "Update";
            tm1.Col121 = "U";
            tm1.Col122 = "<u>U</u>pdate";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult pol_dtl(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region List Of Covered Emp
        public ActionResult memp_cov()
        {
            FillMst("");
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "MY PROFILE";
            //tm1.Col10 = "enx_tab";
            //tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            //tm1.Col12 = "KSG";
            tm1.Col13 = "Update";
            tm1.Col121 = "U";
            tm1.Col122 = "<u>U</u>pdate";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult memp_cov(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Template Master
        public ActionResult tmpl_master()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "TEMPLATE MASTER";
            //model[0].Col10 = "enx_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "";
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult tmpl_master(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Task Assign
        public ActionResult task_assign()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.mailcc(userCode);
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.mailcc(userCode);
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.tasktype(userCode, unitid_mst);
            mod4.Add(new SelectListItem { Text = "High", Value = "High" });
            mod4.Add(new SelectListItem { Text = "Medium", Value = "Medium" });
            mod4.Add(new SelectListItem { Text = "Low", Value = "Low" });
            TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            //#region Mail 
            //mod1 = cmd_Fun.mailcc(userCode);
            //#endregion
            model[0].Col9 = "TASK ASSIGN";
            // model[0].Col10 = "emp_master";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col19 = sgen.getstring(userCode, "select master_id,master_name,sectionid from master_setting where type='CLS'" +
                " and sectionid='Y' and client_id='" + clientid_mst + "'");
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult task_assign(List<Tmodelmain> model, HttpPostedFileBase upd1, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            IList<HttpPostedFileBase> fileCollection1 = new List<HttpPostedFileBase>();
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Send")
            {
                try
                {
                    string ncc = "", tto = "", tcc = "";
                    string cdt = "";
                    tto = model[0].SelectedItems1.FirstOrDefault();
                    tcc = string.Join(",", model[0].SelectedItems2);
                    if ((model[0].Col18 != "") && (model[0].Col18 != "0") && (model[0].Col18 != null))
                    {
                        //DateTime dt = DateTime.Parse(model[0].Col18);
                        DateTime dt = sgen.Make_datetime(model[0].Col18);
                        cdt = dt.ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    string[] tomail = string.Join(",", model[0].SelectedItems1).Split(',');
                    string[] ccmail = string.Join(",", model[0].SelectedItems2).Split(',');
                    if (ccmail.Length > 0)
                    {
                        for (int i = 0; i < ccmail.Length; i++)
                        {
                            if (ncc.Equals("")) ncc = sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + ccmail[i].Split(' ')[0] + "'", "id");
                            else ncc = ncc + "," + sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + ccmail[i].Split(' ')[0] + "'", "id");
                        }
                        IList<HttpPostedFileBase> fileCollection = new List<HttpPostedFileBase>();
                        fileCollection.Add(upd1);
                        mq = sgen.Send_taskmail(userCode, clientid_mst, unitid_mst, tto, tcc, "", model[0].Col20, model[0].Col17, userid_mst, fileCollection,
                            model[0].SelectedItems3.FirstOrDefault(), ((List<SelectListItem>)TempData[MyGuid + "_Tlist3"]).SingleOrDefault(item => item.Value == model[0].SelectedItems3.FirstOrDefault().ToString()).Text.ToString(),
                            Convert.ToInt16(model[0].Col19), "-", "-", "-", "-", "New", ncc, cdt, model[0].SelectedItems4.FirstOrDefault());
                        if (mq.Trim().Contains("successfully"))
                        {
                            model = new List<Tmodelmain>();
                            model.Add(new Tmodelmain()
                            {
                                Col9 = tm.Col9,
                                Col10 = tm.Col10,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col13 = "Save",
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                TList1 = mod1,
                                TList2 = mod2,
                                TList3 = mod3,
                                TList4 = mod4,
                                SelectedItems1 = new string[] { "" },
                                SelectedItems2 = new string[] { "" },
                                SelectedItems3 = new string[] { "" },
                                SelectedItems4 = new string[] { "" }
                            });
                            // ViewBag.scripCall = "showmsgJS(1,'Task Send SuccessFully',1)";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Task Send Successfully')";
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region pt_setting
        public ActionResult pt_setting()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            type_desc = "Configure rules";
            model = getload(model);
            model[0].Col9 = " PROFESSIONAL TAX SETTINGS";
            model[0].Col10 = "vehicle_master";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "KPT";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod1;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod1;
            model[0].SelectedItems3 = new string[] { "" };
            model[0].TList4 = mod1;
            model[0].SelectedItems4 = new string[] { "" };
            cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr from "
    + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
            if (!cond.Equals("0"))
            {
                sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                model = CallbackFun("DETAIL", "N", "pt_setting", "Hr", model);
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult pt_setting(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region ddls 4
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;




            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod1.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod1.Add(new SelectListItem { Text = " No", Value = "No" });
                    mod2.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod2.Add(new SelectListItem { Text = " No", Value = "No" });
                    mod3.Add(new SelectListItem { Text = "Yes", Value = "Yes" });
                    mod3.Add(new SelectListItem { Text = "No", Value = "No" });
                    mod4.Add(new SelectListItem { Text = "State", Value = "State" });
                    mod4.Add(new SelectListItem { Text = "City", Value = "City" });
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;




                }
                catch (Exception ex) { }
            }
            else if (command == "Edit")
            {
                cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr from "
 + tm.Col10 + " where type='" + tm.Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
                if (!cond.Equals("0"))
                {
                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    model[0].Col13 = "Update";
                    model[0].Col121 = "U";
                    model[0].Col122 = "<u>U</u>pdate";
                    ViewBag.scripCall = "enableForm();";
                }
                else
                {
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                    {
                        sgen.showmsg(1, "Please Select Applicable", 2); ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].Col18.Trim().Equals(""))
                    {
                        sgen.showmsg(1, "Please Fill PT Number", 2); ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    type = model[0].Col12;
                    DataRow dr = dataTable.NewRow();
                    dr["type"] = model[0].Col12;
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = currdate;
                    dr["col1"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["col2"] = model[0].Col18;
                    dr["col3"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["col4"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["col7"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["col8"] = model[0].Col30;
                    dr["col16"] = sgen.Make_date_S(model[0].Col19);
                    dr["rec_id"] = "0";
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dataTable.Rows.Add(dr);
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10, model[0].Col8, isedit);
                    if (res == true)
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        cond = clientid_mst + unitid_mst + vch_num + DateTime.ParseExact(currdate, sgen.GetSaveDateFormat(), CultureInfo.InvariantCulture).ToString("yyyyMMdd") + model[0].Col12;
                        sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                        if (!cond.Equals("0"))
                        {
                            sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                            model = CallbackFun("DETAIL", "N", "pt_setting", "Hr", model);
                        }
                        if (isedit) ViewBag.scripCall = "showmsgJS(1, 'Detail Updated', 1);disableForm();";
                        else ViewBag.scripCall = "showmsgJS(1, 'Detail Added', 1);disableForm();";
                        model[0].Col13 = "Save";
                        model[0].Col121 = "S";
                        model[0].Col122 = "<u>S</u>ave";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Salary Advance Application
        public ActionResult adv_apl()
        {
            FillMst("");
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "MY PROFILE";
            //tm1.Col10 = "enx_tab";
            //tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            //tm1.Col12 = "KSG";
            tm1.Col13 = "Update";
            tm1.Col121 = "U";
            tm1.Col122 = "<u>U</u>pdate";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult adv_apl(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    string currdate = sgen.server_datetime_local(userCode);
                    model[0].Col16 = vch_num;
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "RVA_DT"); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region leave_ob_import
        public ActionResult leave_ob_imp()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col14 = mid_mst;
            model[0].Col15 = m_id_mst;
            model[0].Col9 = "LEAVE OPENING BALANCE IMPORT";
            model[0].Col10 = "leave_ob";
            model[0].Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "KLB";//Leave opening balance
            model[0].Col13 = "Save";
            model[0].TList1 = mod1;
            model[0].Col22 = "Choose File";
            ViewBag.vimport = "disabled='disabled'";
            model[0].SelectedItems1 = new string[] { "" };
            model[0].LTM1 = new List<Tmodelmain>();
            return View(model);
        }
        [HttpPost]
        public ActionResult leave_ob_imp(List<Tmodelmain> model, string command, string hfrow, string hftable, HttpPostedFileBase upd1)
        {
            string stng = "";
            bool error = false;
            FillMst(model[0].Col15);
            var tmodel = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            sgen.SetSession(MyGuid, "HTMLTABLE", dtm);
            model[0].dt1 = dtm;
            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;

            if (tmodel.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    ViewBag.vsave = "disabled='disabled'";
                    mod1 = new List<SelectListItem>();
                    #region Dropdwon hard code
                    mod1.Add(new SelectListItem { Text = "All Employee", Value = "000" });
                    mod1.Add(new SelectListItem { Text = "Selected Employee", Value = "001" });
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    #endregion

                    model[0].SelectedItems1 = new string[] { "" };
                }
                catch (Exception ex)
                {
                    ViewBag.vnew = "";
                    ViewBag.vnext = "disabled='disabled'";
                    ViewBag.vcalc = "disabled='disabled'";
                    ViewBag.vgetdata = "disabled='disabled'";
                    ViewBag.scripCall = "disableForm();";
                    ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",0);disableForm();";
                }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                try
                {
                    model = StartCallback(model);
                    ViewBag.vimport = "";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Save")
            {
                //;
                //dtm = RemoveHeadName_LV(dtm);
                dtm = new DataTable();
                if (sgen.GetSession(MyGuid, "HTMLTABLE") != null)
                {
                    dtm = (DataTable)sgen.GetSession(MyGuid, "HTMLTABLE");
                }
                string emp_name = "", exter_empno = "", emp_vchnum = "", emp_code = "", old_empcode = "";
                try
                {
                    if (model[0].dt1.Rows.Count <= 0)
                    {
                        sgen.showmsg(1, "No Data Found", 2);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        return View(model);
                    }
                    DataTable dtstr = new DataTable();
                    dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col16.Trim() + "'";
                        isedit = true;
                        vch_num = model[0].Col16.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='"
                     + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        isedit = false;
                        cond = sgen.seekval(userCode, "select curryyyymmm from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and " +
                           "client_unit_id='" + unitid_mst + "' and curryyyymmm='" + sgen.GetSession(MyGuid, "LOBcurryyyymmm").ToString().Trim() + "'" + mq1 + "", "curryyyymmm");
                        if (!cond.Equals("0"))
                        {
                            //Means Already Exits....               
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.scripCall = "showmsgJS(1,'Leave Opening Balance already exist in this month, please update record',2)";
                            return View(model);
                        }
                    }
                    string currdate = sgen.server_datetime(userCode);
                    string ent_dt = currdate;
                    foreach (DataRow gr in dtm.Rows)
                    {
                        #region dtstr
                        emp_code = gr[0].ToString().Trim();
                        old_empcode = gr[1].ToString().Trim();
                        exter_empno = gr[2].ToString().Trim();
                        mq1 = sgen.seekval(userCode, "select vch_num from emp_master where type='EMP' and client_id='" + clientid_mst
                            + "' and client_unit_id='" + unitid_mst + "' and emp_code=substr('" + emp_code + "',5,13)", "vch_num");
                        if (mq1.Trim() != "0") { emp_vchnum = mq1.Trim(); }
                        emp_name = gr[3].ToString().Trim();
                        for (int k = 4; k < dtm.Columns.Count; k++)
                        {
                            DataRow dr = dtstr.NewRow();
                            dr["vch_num"] = vch_num.Trim();
                            dr["vch_date"] = ent_dt;
                            dr["type"] = model[0].Col12;
                            dr["old_empcode"] = old_empcode.Trim();
                            dr["emp_code"] = emp_vchnum;
                            dr["emp_name"] = emp_name;
                            dr["leave_type"] = dtm.Columns[k].ToString().Trim().Split('(')[0].Trim();
                            dr["leave_type_id"] = dtm.Columns[k].ToString().Trim().Split('(')[1].Trim().Split(')')[0].Trim();
                            dr["leave_count"] = gr[k].ToString().Trim();
                            dr["curryyyymmm"] = sgen.GetSession(MyGuid, "LOBcurryyyymmm").ToString().Trim();
                            dr["month_id"] = sgen.GetSession(MyGuid, "LOBcurryyyymmm").ToString().Trim().Substring(4, 3).ToString().Trim();
                            dr["month_name"] = sgen.seekval(userCode, "select master_name from master_setting where type='MNT' and master_id='" + sgen.GetSession(MyGuid, "LOBcurryyyymmm").ToString().Trim().Substring(4, 3).ToString().Trim() + "'", "master_name");
                            if (isedit)
                            {
                                dr["ent_by"] = model[0].Col3;
                                dr["ent_date"] = model[0].Col4;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr["edit_by"] = userid_mst;
                                dr["edit_date"] = currdate;
                            }
                            else
                            {
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = ent_dt;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr["edit_by"] = "-";
                                dr["edit_date"] = ent_dt;
                            }
                            dr["rec_id"] = "0";
                            dtstr.Rows.Add(dr);
                        }
                        #endregion
                    }
                    bool ok = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, model[0].Col8, isedit);
                    if (ok)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vimport = "disabled='disabled'";
                        if (isedit) ViewBag.scripCall = "showmsgJS(1, 'Detail Updated Successfully', 1);disableForm();";
                        else ViewBag.scripCall = "showmsgJS(1, 'Detail Added Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain()
                        {
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = tmodel.Col13,
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            LTM1 = new List<Tmodelmain>()
                        });
                    }
                    else
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Record Not Saved', 2);disableForm();";
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "Import")
            {
                string currdate = sgen.server_datetime_dt(userCode).Month.ToString();
                ViewBag.vsave = "";
                int currmonth = sgen.Make_int(currdate);
                int curryear = sgen.Make_int(Ac_Year.Split(' ')[0].Trim());
                string lastyyyymmm = "";
                string curryyyymmm = "";
                if (currmonth <= 12 && currmonth > 4)
                {
                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                }
                else if (currmonth == 1)
                {
                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                }
                else if (currmonth > 1 && currmonth < 4)
                {
                    lastyyyymmm = (curryear + 1) + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = (curryear + 1) + sgen.padlc((currmonth), 3);
                }
                else if (currmonth == 4)
                {
                    lastyyyymmm = curryear + sgen.padlc((currmonth - 1), 3);
                    curryyyymmm = curryear + sgen.padlc((currmonth), 3);
                }
                sgen.SetSession(MyGuid, "LOBcurryyyymmm", curryyyymmm);
                mq0 = "select master_name from master_setting where type='MNT' and master_id='" + sgen.padlc(sgen.Make_int(currdate), 3) + "'";
                mq1 = sgen.seekval(userCode, mq0, "master_name");
                model[0].Col19 = " " + mq1.Trim().ToUpper() + " - " + curryyyymmm.Trim().Substring(0, 4).ToString().Trim();
                HttpPostedFileBase file1 = upd1;
                DataTable dt = new DataTable();
                if (file1.ContentLength > 1)
                {
                    string ext = Path.GetExtension(file1.FileName).ToLower();
                    if (ext == ".csv")
                    {
                        string filesavepath = AppDomain.CurrentDomain.BaseDirectory + "\\Uploads\\" + cg_com_name.Replace(" ", "")
                            + "\\file" + DateTime.Now.ToString("ddMMyyyyhhmmfff") + ext;
                        file1.SaveAs(filesavepath);
                        // Read sample data from CSV file
                        int i = 0;
                        using (CsvFileReader reader = new CsvFileReader(filesavepath))
                        {
                            CsvRow row = new CsvRow();
                            while (reader.ReadRow(row, i))
                            {
                                DataRow dr = dt.NewRow();
                                for (int c = 0; c < row.Count; c++)
                                {
                                    if (i == 0) { dt.Columns.Add(row[c].ToString()); }
                                    else { dr[c] = row[c].ToString(); }
                                    //if (c > dt.Columns.Count) break;                                                                 
                                }
                                i++;
                                dt.Rows.Add(dr);
                            }
                        }
                    }
                    try
                    {
                        dt.Rows[0].Delete();
                        //grdviewnew.DataSource = dt;
                        //grdviewnew.DataBind();
                        model[0].dt1 = dt;
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vimport = "";
                    }
                    catch (Exception ex) { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 0);"; }
                }
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpGet]
        public FileResult lobtemp(List<Tmodelmain> model, string Myguid = "")
        {
            string monthname = "", ddl_month = "", ddl_emp = "";
            FillMst(Myguid);
            model = (List<Tmodelmain>)sgen.GetSession(MyGuid, "model");
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];

            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            DataTable dtl = new DataTable();
            if (model[0].SelectedItems1 == null) { /*sgen.showmsg(1, "Please select type from drop down", 2); return;*/ }
            ddl_emp = model[0].SelectedItems1.FirstOrDefault().Trim();
            if (ddl_emp.Trim().Equals("000"))
            {
                mq = "select emp_code EmpCode,external_empno External_EmpCode,old_empcode Old_EmpCode," +
                    "(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Employee_Name from emp_master " +
                    "where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and emp_status='Y' and to_char(ex_dt,'yyyy')='1900' order by emp_code asc";
            }
            else if (ddl_emp.Trim().Equals("001"))
            {
                mq = "select emp_code EmpCode,external_empno External_EmpCode,old_empcode Old_EmpCode," +
                    "(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Employee_Name from emp_master " +
                    "where type='EMP' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and " +
                    "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type) in ('" + sgen.GetSession(MyGuid, "KEMPLOB").ToString() + "') order by emp_code asc";
            }
            dtl = sgen.getdata(userCode, mq);
            DataTable dtlt = new DataTable();
            mq1 = "select vch_num,col1,col3 from kc_tab where type='KLV' and vch_num<>'000005' AND CLIENT_ID='" + clientid_mst + "'";
            //mq1 = "select vch_num,col1,col3 from kc_tab where type='KLV' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and vch_num<>'000005'";
            dtlt = sgen.getdata(userCode, mq1);
            for (int k = 0; k < dtlt.Rows.Count; k++)
            {
                dtl.Columns.Add(dtlt.Rows[k]["col1"].ToString() + " (" + dtlt.Rows[k]["vch_num"].ToString() + ")");
            }
            dtl.AcceptChanges();
            Byte[] fileBytes = sgen.Exp_to_csv_new(dtl, "Leave Opening Balance", cg_com_name);
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Zip, "Leave Opening Balance");
        }
        #endregion
        #region attendance type
        public ActionResult imp_master()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            Tmodelmain tm1 = new Tmodelmain();
            model[0].Col9 = "IMPORT MASTER";
            model[0].Col10 = "file_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "KAT";
            model[0].Col20 = "Attendance Template";
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult imp_master(List<Tmodelmain> model, string command, HttpPostedFileBase upd1)
        {
            FillMst("");
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (model[0].Col17.Equals("")) { sgen.showmsg(1, "Please fill Import Type Name", 2); return View(model); }
                    if (model[0].Col18.Equals("")) { sgen.showmsg(1, "Please fill Import IInstruction", 2); return View(model); }
                    if (upd1.ContentLength > 0)
                    {
                        DataTable dtfile = new DataTable();
                        dtfile = cmd_Fun.GetStructure(userCode, "file_tab");
                        #region dtimg
                        type_desc = model[0].Col20;
                        string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                        try
                        {
                            HttpPostedFileBase file1 = upd1;
                            ctype1 = file1.ContentType;
                            fileName1 = file1.FileName;
                            path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
                            encpath1 = sgen.Convert_Stringto64(path1).ToString();
                            finalpath1 = serverpath + encpath1;
                            file1.SaveAs(finalpath1);
                            filesave(model, currdate, dtfile, fileName1, encpath1, "Primary Image", ctype1);
                        }
                        catch (Exception ex) { }
                        #endregion
                        res = sgen.Update_data(userCode, dtfile, "file_tab", "", false);
                        if (!res)
                        {
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall += "showmsgJS(1, 'Image data have error', 0);";
                            ModelState.Clear();
                            return View(model);
                        }
                        else
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vimport = "disabled='disabled'";
                            if (isedit) ViewBag.scripCall = "showmsgJS(1, 'Detail Updated Successfully', 1);disableForm();";
                            else ViewBag.scripCall = "showmsgJS(1, 'Detail Added Successfully', 1);disableForm();";
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region attendence Rules
        public ActionResult attn_rules()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "ATTENDANCE RULES";
            type_desc = "Attendance Rule";
            model[0].Col10 = "vehicle_master";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "KAR"; //attendence rules
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].TList4 = mod1;
            model[0].TList5 = mod1;
            model[0].TList6 = mod1;
            model[0].TList7 = mod1;
            model[0].TList8 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            model[0].SelectedItems6 = new string[] { "" };
            model[0].SelectedItems7 = new string[] { "" };
            model[0].SelectedItems8 = new string[] { "" };
            cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr from "
+ model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
            if (!cond.Equals("0"))
            {
                sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                model = CallbackFun("DETAIL", "N", "attn_rules", "Hr", model);
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult attn_rules(List<Tmodelmain> model, string command, string mid)
        {
            FillMst("");
            var tm = model.FirstOrDefault();
            #region ddls 4
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_Tlist7"];
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_Tlist8"];

            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
            TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
            TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (tm.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (tm.SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            if (tm.SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    #region Dropdowns
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod6 = new List<SelectListItem>();
                    mod7 = new List<SelectListItem>();
                    mod8 = new List<SelectListItem>();
                    mod1.Add(new SelectListItem { Text = "First In Last Out Punch", Value = "1" });
                    mod1.Add(new SelectListItem { Text = "Dedicated Direction", Value = "2" });
                    mod2.Add(new SelectListItem { Text = "OT Not Applicable", Value = "1" });
                    mod2.Add(new SelectListItem { Text = "Out Punch-Shift End Time", Value = "2" });
                    mod2.Add(new SelectListItem { Text = "Total Duration-Shift Duration", Value = "3" });
                    mod3.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                    mod3.Add(new SelectListItem { Text = "SL", Value = "SL" });
                    mod3.Add(new SelectListItem { Text = "EL", Value = "EL" });
                    mod4.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                    mod4.Add(new SelectListItem { Text = "SL", Value = "SL" });
                    mod4.Add(new SelectListItem { Text = "EL", Value = "EL" });
                    mod5.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                    mod5.Add(new SelectListItem { Text = "SL", Value = "SL" });
                    mod5.Add(new SelectListItem { Text = "EL", Value = "EL" });
                    mod6.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                    mod6.Add(new SelectListItem { Text = "SL", Value = "SL" });
                    mod6.Add(new SelectListItem { Text = "EL", Value = "EL" });
                    mod7.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                    mod7.Add(new SelectListItem { Text = "SL", Value = "SL" });
                    mod7.Add(new SelectListItem { Text = "EL", Value = "EL" });
                    mod8.Add(new SelectListItem { Text = "LOP", Value = "LOP" });
                    mod8.Add(new SelectListItem { Text = "SL", Value = "SL" });
                    mod8.Add(new SelectListItem { Text = "EL", Value = "EL" });

                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                    TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                    TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                    TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                    #endregion
                }
                catch (Exception ex) { }
            }
            if (command == "Edit")
            {
                sgen.SetSession(MyGuid, "EDMODE", "Y");
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.scripCall = "enableForm();";
            }
            else if (command == "Save" || command == "Update")
            {
                string neglastpunch = "N", multispndys = "N", considererpunch = "N", considerltpunch = "N", processltby = "N", multi = "N", overrule = "N",
           processeg = "N", multieg = "N", overruleeg = "N", multieg1 = "N", overruleeg1 = "N", deductloneg = "", lt = "", lteg = ""; ;
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    if (model[0].Chk1.Equals(true)) neglastpunch = "Y";
                    if (model[0].Chk2.Equals(true)) multispndys = "Y";
                    if (model[0].Chk3.Equals(true)) considererpunch = "Y";
                    if (model[0].Chk4.Equals(true)) considerltpunch = "Y";
                    if (model[0].Chk5.Equals(true)) processltby = "Y";
                    if (!model[0].SelectedItems3.FirstOrDefault().Trim().Equals("")) lt = lt + model[0].SelectedItems3.FirstOrDefault().Trim() + ",";
                    else lt = lt + "0" + ",";
                    if (!model[0].SelectedItems4.FirstOrDefault().Trim().Equals("")) lt = lt + model[0].SelectedItems4.FirstOrDefault().Trim() + ",";
                    else lt = lt + "0" + ",";
                    if (!model[0].SelectedItems5.FirstOrDefault().Trim().Equals("")) lt = lt + model[0].SelectedItems5.FirstOrDefault().Trim() + ",";
                    else lt = lt + "0" + ",";
                    if (model[0].Chk6.Equals(true)) multieg1 = "Y";
                    if (model[0].Chk7.Equals(true)) overruleeg1 = "Y";
                    if (model[0].Chk11.Equals(true)) processeg = "Y";
                    if (model[0].Chk12.Equals(true)) multieg = "Y";
                    if (model[0].Chk13.Equals(true)) overruleeg = "Y";
                    if (model[0].Chk14.Equals(true)) deductloneg = "Y";
                    if (!model[0].SelectedItems6.FirstOrDefault().Trim().Equals("")) lteg = lteg + model[0].SelectedItems6.FirstOrDefault().Trim() + ",";
                    else lteg = lteg + "0" + ",";
                    if (!model[0].SelectedItems7.FirstOrDefault().Trim().Equals("")) lteg = lteg + model[0].SelectedItems7.FirstOrDefault().Trim() + ",";
                    else lteg = lteg + "0" + ",";
                    if (!model[0].SelectedItems8.FirstOrDefault().Trim().Equals("")) lteg = lteg + model[0].SelectedItems8.FirstOrDefault().Trim() + ",";
                    else lteg = lteg + "0" + ",";
                    DataTable dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    type = model[0].Col12;
                    DataRow dr = dtstr.NewRow();
                    string ddl_hrprocess = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                    string ddl_otformula = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Text.ToString();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = currdate;
                    dr["type"] = type.Trim();
                    dr["col1"] = DateTime.ParseExact(model[0].Col18.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col2"] = DateTime.ParseExact(model[0].Col19.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col3"] = model[0].SelectedItems1.FirstOrDefault().Trim();
                    dr["col4"] = ddl_hrprocess;
                    dr["col7"] = neglastpunch.Trim();
                    dr["col8"] = multispndys.Trim();
                    dr["col9"] = DateTime.ParseExact(model[0].Col20.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col10"] = DateTime.ParseExact(model[0].Col21.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col11"] = DateTime.ParseExact(model[0].Col22.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col12"] = DateTime.ParseExact(model[0].Col23.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col13"] = DateTime.ParseExact(model[0].Col24.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col14"] = model[0].SelectedItems2.FirstOrDefault().Trim();
                    dr["col15"] = ddl_otformula;
                    dr["col41"] = DateTime.ParseExact(model[0].Col25.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col18"] = DateTime.ParseExact(model[0].Col26.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col19"] = considererpunch.Trim();
                    dr["col20"] = considerltpunch.Trim();
                    dr["col21"] = processltby.Trim();
                    dr["col25"] = DateTime.ParseExact(model[0].Col27.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col28"] = DateTime.ParseExact(model[0].Col28.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col29"] = DateTime.ParseExact(model[0].Col29.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col30"] = DateTime.ParseExact(model[0].Col30.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col31"] = model[0].Col38.Trim();
                    dr["col32"] = model[0].Col31.Trim();
                    dr["col33"] = multi.Trim();
                    dr["col34"] = overrule.Trim();
                    dr["col36"] = lt.Trim().TrimEnd(',');
                    dr["col37"] = processeg.Trim();
                    dr["col38"] = DateTime.ParseExact(model[0].Col32.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["col39"] = DateTime.ParseExact(model[0].Col33.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["cur_country"] = DateTime.ParseExact(model[0].Col34.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["cur_state"] = DateTime.ParseExact(model[0].Col35.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                    dr["cur_city"] = model[0].Col36.Trim();
                    dr["cur_district"] = model[0].Col37.Trim();
                    dr["cur_tehsil"] = multieg.Trim();
                    dr["cur_village"] = overruleeg.Trim();
                    dr["col42"] = overruleeg1.Trim();
                    dr["col43"] = multieg1.Trim();
                    dr["col44"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["col45"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["col46"] = model[0].SelectedItems5.FirstOrDefault();
                    dr["col47"] = model[0].SelectedItems6.FirstOrDefault();
                    dr["col48"] = model[0].SelectedItems7.FirstOrDefault();
                    dr["col49"] = model[0].SelectedItems8.FirstOrDefault();
                    dr["col50"] = deductloneg;
                    dr["col40"] = lteg.Trim().TrimEnd(',');
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dr["rec_id"] = "0";
                    dr["edit_by"] = userid_mst;
                    dr["edit_date"] = currdate;
                    dtstr.Rows.Add(dr);
                    res = sgen.Update_data(userCode, dtstr, model[0].Col10, model[0].Col8, isedit);
                    if (res)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vimport = "disabled='disabled'";
                        if (isedit) ViewBag.scripCall = "showmsgJS(1, 'Detail Updated Successfully', 1);disableForm();";
                        else ViewBag.scripCall = "showmsgJS(1, 'Detail Added Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain()
                        {
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                            TList4 = mod4,
                            SelectedItems4 = new string[] { "" },
                            TList5 = mod5,
                            SelectedItems5 = new string[] { "" },
                            TList6 = mod6,
                            SelectedItems6 = new string[] { "" },
                            TList7 = mod7,
                            SelectedItems7 = new string[] { "" },
                            TList8 = mod8,
                            SelectedItems8 = new string[] { "" },
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = tm.Col13,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                        });
                    }
                    else
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Record Not Saved', 2);disableForm();";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region salary componants
        public ActionResult sal_comp()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "SALARY COMPONENT";
            model[0].Col10 = "vehicle_master";
            model[0].Col11 = " and client_id = '" + clientid_mst + "'";
            model[0].Col12 = "KSP";
            type_desc = "Salary Component";
            #region ddls
            /* model[0].Col12 = "VFA"; *///
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].TList4 = mod1;
            model[0].TList5 = mod1;
            model[0].TList6 = mod1;
            model[0].TList7 = mod1;
            model[0].TList8 = mod1;
            model[0].TList9 = mod1;
            model[0].TList10 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            model[0].SelectedItems6 = new string[] { "" };
            model[0].SelectedItems7 = new string[] { "" };
            model[0].SelectedItems8 = new string[] { "" };
            model[0].SelectedItems9 = new string[] { "" };
            model[0].SelectedItems10 = new string[] { "" };
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult sal_comp(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region ddls
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;

            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;

            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;

            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;

            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];
            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;

            if (tm.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_Tlist7"];
            TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;

            if (tm.SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_Tlist8"];
            TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;

            if (tm.SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_Tlist9"];
            TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;

            if (tm.SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
            List<SelectListItem> mod10 = (List<SelectListItem>)TempData[MyGuid + "_Tlist10"];
            TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod10;

            if (tm.SelectedItems10 == null) model[0].SelectedItems10 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    try
                    {
                        model = getnew(model);
                        #region DDLS
                        mod1 = new List<SelectListItem>();
                        mod2 = new List<SelectListItem>();
                        mod3 = new List<SelectListItem>();
                        mod4 = new List<SelectListItem>();
                        mod5 = new List<SelectListItem>();
                        mod6 = new List<SelectListItem>();
                        mod7 = new List<SelectListItem>();
                        mod8 = new List<SelectListItem>();
                        mod9 = new List<SelectListItem>();
                        mod10 = new List<SelectListItem>();
                        DataTable dtu = new DataTable();
                        mq1 = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
                        if (role_mst.ToUpper().Equals("OWNER")) cond = "where company_status='1'";
                        else cond = "where company_profile_id in ('" + mq1.Replace(",", "','") + "') and company_status='1'";

                        mq = "SELECT company_profile_id,(company_name||' ('||company_profile_id||')') as name FROM company_profile " + cond + "";
                        dtu = sgen.getdata(userCode, mq);
                        foreach (DataRow dr in dtu.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["company_profile_id"].ToString() });
                        }
                        mod2.Add(new SelectListItem { Text = "Standard", Value = "Standard" });
                        mod3.Add(new SelectListItem { Text = "Round Off", Value = "001" });
                        mod3.Add(new SelectListItem { Text = "Round Up", Value = "002" });
                        mod3.Add(new SelectListItem { Text = "Round Down", Value = "003" });
                        mod10.Add(new SelectListItem { Text = "Earning", Value = "Earning" });
                        mod10.Add(new SelectListItem { Text = "Deduction", Value = "Deduction" });
                        mod10.Add(new SelectListItem { Text = "Over Time", Value = "Over Time" });
                        mod10.Add(new SelectListItem { Text = "Reimbursement", Value = "Reimbursement" });
                        mod10.Add(new SelectListItem { Text = "Statutory Component", Value = "Statutory Component" });
                        mod4.Add(new SelectListItem { Text = "Flat", Value = "Flat" });
                        for (int i = 1; i <= 31; i++)
                        {
                            mod5.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
                        }
                        mod6.Add(new SelectListItem { Text = "Monthly", Value = "001" });
                        mod6.Add(new SelectListItem { Text = "Bi-Monthly", Value = "002" });
                        mod6.Add(new SelectListItem { Text = "Quarterly", Value = "003" });
                        mod6.Add(new SelectListItem { Text = "Half Yearly", Value = "004" });
                        mod6.Add(new SelectListItem { Text = "Yearly", Value = "005" });
                        mod7.Add(new SelectListItem { Text = "Immediately 1st Month", Value = "001" });
                        mod7.Add(new SelectListItem { Text = "Immediately 2nd Month", Value = "002" });
                        mod7.Add(new SelectListItem { Text = "Immediately 3rd Month", Value = "003" });
                        for (int i = 1; i <= 40; i++)
                        {
                            if (i.ToString().Length.Equals(1))
                            {
                                mod8.Add(new SelectListItem { Text = i.ToString(), Value = "00" + i.ToString() });
                            }
                            else if (i.ToString().Length.Equals(2))
                            {
                                mod8.Add(new SelectListItem { Text = i.ToString(), Value = "0" + i.ToString() });
                            }
                        }
                        mod9.Add(new SelectListItem { Text = "Days", Value = "Days" });
                        mod9.Add(new SelectListItem { Text = "Hours", Value = "Hours" });
                        //TempData[MyGuid + "_Tlist1"] = mod1;
                        //TempData[MyGuid + "_Tlist2"] = mod2;
                        //TempData[MyGuid + "_Tlist3"] = mod3;
                        //TempData[MyGuid + "_Tlist4"] = mod4;
                        //TempData[MyGuid + "_Tlist5"] = mod5;
                        //TempData[MyGuid + "_Tlist6"] = mod6;
                        //TempData[MyGuid + "_Tlist7"] = mod7;
                        //TempData[MyGuid + "_Tlist8"] = mod8;
                        //TempData[MyGuid + "_Tlist9"] = mod9;
                        //TempData[MyGuid + "_Tlist10"] = mod10;
                        TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                        TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                        TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                        TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                        TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                        TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                        TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                        TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                        TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                        TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod10;
                        #endregion
                    }
                    catch (Exception ex) { }
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel") { return CancelFun(model); }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "COPYUNIT")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Unit', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    mq = "select * from vehicle_master where type='KSP' and client_id='" + clientid_mst + "'";
                    DataTable dtsh = sgen.getdata(userCode, mq);
                    if (dtsh.Rows.Count > 0)
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Salary Heads Already there in this Company', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    mq = "insert into vehicle_master (vch_num,vch_date,type,client_id,client_unit_id,ent_by,ent_date,edit_by,edit_date,col1," +
    "col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,col16,date1,col17,col18,col19,col20,col21,date2,col22,date3," +
    "col23,col24,col25,col26,col27,date4,date5,date6,col28,COL29,col30,COL31,COL32,COL33,COL34,COL35,col36,chkvalue,chkvalue1,chkvalue2," +
    "col37,col38,col39,col40,col41,col42,cur_country,cur_state,cur_city,cur_district,cur_tehsil,cur_village,created_date)" +
    "(SELECT vch_num, UTC_TIMESTAMP(), type, '" + clientid_mst + "', '" + unitid_mst + "', '" + userid_mst + "', UTC_TIMESTAMP(), '-', UTC_TIMESTAMP(), col1, col2, col3," +
    " col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15,col16, date1, col17, col18, col19, col20, col21, date2," +
    " col22, date3, col23, col24, col25, col26, col27, date4, date5, date6, col28, COL29, col30, COL31, COL32, COL33, COL34, COL35," +
    " col36, chkvalue, chkvalue1, chkvalue2, col37, col38, col39, col40,col41,col42,col43, cur_country, cur_state, cur_city, cur_district, cur_tehsil," +
    " cur_village,UTC_TIMESTAMP() FROM vehicle_master WHERE type = 'KSP' and client_id='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "' )";
                    res = sgen.execute_cmd(userCode, mq);
                    if (res)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Salary Heads Copied from selected Unit');disableForm();";
                    }
                }
                catch (Exception err)
                {
                    ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Could Not Copied');";
                }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                string paidcomp = "N", component = "", taxable = "", taxdistributed = "N", isFBP = "N", Attdep = "N", poCTC = "N", createdepcom = "N", active = "N",
      isFSS = "N", payableLOP = "N", pogross = "N", poPFgross = "N", poESIgros = "N", poPTgross = "N", poarrear = "N", carryforward = "N", isprofessionaltax = "N", iseditable = "N", poLWFgross = "N";
                if (model[0].Col17 == "" || model[0].Col17 == null)
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Fill Head Name', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col18 == "" || model[0].Col18 == null)
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Fill JV Code', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col19 == "" || model[0].Col19 == null)
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Fill Abbreviation', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].SelectedItems2.FirstOrDefault().Trim().Equals(""))
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Select Map To', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].SelectedItems10.FirstOrDefault().Trim().Equals(""))
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Select Pay Type', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals(""))
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Select Order', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }

                if (model[0].Col20 == "" || model[0].Col20 == null)
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Fill Effective Date', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col21 == "" || model[0].Col21 == null)
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Fill end Date', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].SelectedItems3.FirstOrDefault().Trim().Equals(""))
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Select Round Off Value', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col22 == "" || model[0].Col22 == null)
                {
                    ViewBag.scripCall += "showmsgJS(1,'Please Fill Round Amount', 2);";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Chk1.Equals(true)) paidcomp = "Y";
                if (model[0].Col23 == "Fixed") component = "Fixed";
                if (model[0].Col23 == "Variable") component = "Variable";
                if (model[0].Col24.Equals("tax")) taxable = "tax";
                if (model[0].Col24.Equals("non")) taxable = "non";
                if (model[0].Chk2.Equals(true)) taxdistributed = "Y";
                if (model[0].Chk4.Equals(true)) isFBP = "Y";
                if (model[0].Chk5.Equals(true)) Attdep = "Y";
                if (model[0].Chk6.Equals(true)) poCTC = "Y";
                if (model[0].Chk7.Equals(true)) createdepcom = "Y";
                if (model[0].Chk8.Equals(true)) active = "Y";
                if (model[0].Chk9.Equals(true)) isFSS = "Y";
                if (model[0].Chk10.Equals(true)) payableLOP = "Y";
                if (model[0].Chk11.Equals(true)) pogross = "Y";
                if (model[0].Chk12.Equals(true)) poPFgross = "Y";
                if (model[0].Chk13.Equals(true)) poESIgros = "Y";
                if (model[0].Chk14.Equals(true)) poPTgross = "Y";
                if (model[0].Chk15.Equals(true)) poarrear = "Y";
                if (model[0].Chk3.Equals(true)) iseditable = "Y";
                if (model[0].Chk16.Equals(true)) poLWFgross = "Y";
                if (model[0].Chk17.Equals(true)) carryforward = "Y";
                if (model[0].Chk18.Equals(true)) isprofessionaltax = "Y";
                DataTable dataTable = new DataTable();
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    string ent_dt = currdate;
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    cond = sgen.seekval(userCode, "select col1 from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and col1='" + model[0].Col17.Trim() + "'" + mq1 + "", "col1");
                    if (!cond.Equals("0"))
                    {
                        //Means Already Exits....               
                        ViewBag.scripCall += "showmsgJS(1,'Name Already Exists', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    DataTable dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = ent_dt;
                    dr["type"] = model[0].Col12;
                    dr["col1"] = model[0].Col17;
                    dr["col2"] = model[0].Col18;
                    dr["col3"] = model[0].Col19;
                    dr["col4"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["date1"] = sgen.Make_date_S(model[0].Col20);
                    dr["date2"] = sgen.Make_date_S(model[0].Col21);
                    dr["col7"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["col8"] = paidcomp.Trim();
                    dr["col9"] = component.Trim();
                    dr["col10"] = model[0].SelectedItems10.FirstOrDefault();
                    dr["col11"] = taxable.Trim();
                    dr["col12"] = taxdistributed.Trim();
                    dr["col13"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["col14"] = model[0].SelectedItems5.FirstOrDefault();
                    dr["col15"] = isFBP.Trim();
                    dr["col18"] = Attdep.Trim();
                    dr["col19"] = poCTC.Trim();
                    dr["col20"] = createdepcom.Trim();
                    dr["col21"] = active.Trim();
                    dr["col25"] = isFSS.Trim();
                    dr["col28"] = payableLOP.Trim();
                    dr["col29"] = pogross.Trim();
                    dr["col30"] = poPFgross.Trim();
                    dr["col31"] = poESIgros.Trim();
                    dr["col32"] = poPTgross.Trim();
                    dr["col33"] = poarrear.Trim();
                    dr["col34"] = model[0].Col25;
                    dr["col36"] = model[0].Col26;
                    dr["col37"] = model[0].Col27;
                    dr["col38"] = carryforward.Trim();
                    dr["col39"] = model[0].Col28;
                    dr["col44"] = model[0].Col33;
                    dr["col43"] = model[0].Col32;
                    dr["col40"] = model[0].SelectedItems9.FirstOrDefault();
                    dr["col41"] = model[0].SelectedItems8.FirstOrDefault();
                    dr["col42"] = poLWFgross.Trim();
                    dr["cur_country"] = model[0].Col29;
                    dr["cur_state"] = "1";
                    dr["cur_city"] = model[0].SelectedItems6.FirstOrDefault();
                    dr["cur_district"] = model[0].SelectedItems7.FirstOrDefault();
                    dr["cur_tehsil"] = iseditable.Trim();
                    dr["cur_village"] = model[0].Col22;
                    dr["col45"] = isprofessionaltax;
                    dr["rec_id"] = "0";
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dtstr.Rows.Add(dr);
                    #endregion
                    res = sgen.Update_data(userCode, dtstr, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            TList4 = mod4,
                            TList5 = mod5,
                            TList6 = mod6,
                            TList7 = mod7,
                            TList8 = mod8,
                            TList9 = mod9,
                            TList10 = mod10,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },
                            SelectedItems6 = new string[] { "" },
                            SelectedItems7 = new string[] { "" },
                            SelectedItems8 = new string[] { "" },
                            SelectedItems9 = new string[] { "" },
                            SelectedItems10 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                //  model = v_form(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex)
                            {
                                ViewBag.scripCall += "mytoast('error', 'toast-top-right', '" + ex.Message.ToString().Trim() + "');";
                            }
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region salary structure
        public ActionResult sal_str()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col14 = mid_mst.Trim();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "SALARY STRUCTURE";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "KSS"; //
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            return View(model);
        }
        public List<Tmodelmain> BMakedata(List<Tmodelmain> model)
        {
            try
            {
                DataTable dtf = new DataTable();
                dtf = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                {
                    isedit = true;
                    vch_num = model[0].Col16.Trim();
                }
                else
                {
                    string vch = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " +
                        "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    vch_num = sgen.genNo(userCode, vch, 6, "auto_genid");
                    isedit = false;
                }
                string currdate = sgen.server_datetime_local(userCode);
                ent_date = sgen.Savedate(currdate, true);

                //int lenn = Convert.ToInt16(model[0].Col28);
                for (int k = 0; k < model.Count; k++)
                {
                    if (model[k].Chk2.Equals(true))
                    {
                        DataRow dr = dtf.NewRow();
                        dr["rec_id"] = "0";
                        dr["vch_num"] = model[0].Col16;
                        dr["vch_date"] = ent_date;
                        dr["type"] = model[0].Col12;
                        dr["type_desc"] = type_desc;
                        dr["col1"] = model[0].SelectedItems1.FirstOrDefault().Trim();
                        dr["date1"] = sgen.Savedate(model[0].Col17.Trim(), false);
                        dr["date2"] = sgen.Savedate(model[0].Col18.Trim(), false);
                        if (model[k].Chk2.ToString().Trim().Equals("True")) dr["col2"] = "1";
                        else dr["col2"] = "0";
                        dr["col3"] = model[k].Col23.ToString();
                        dr["col4"] = model[k].Col32.ToString();
                        dr["col5"] = model[k].Col25.ToString();
                        dr["col6"] = model[k].Col26.ToString();
                        dr["col7"] = model[k].Col27.ToString();
                        dr["col8"] = model[k].Col24.ToString();
                        dr["col9"] = model[k].Col29.ToString();
                        dr["col10"] = model[k].Col30.ToString();
                        dr["r_no"] = model[k].Col28.ToString();
                        dr["ref_code"] = model[0].Col16;
                        dr["rec_id"] = "0";
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = ent_date;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = ent_date;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = ent_date;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                        }
                        dtf.Rows.Add(dr);
                    }
                }
                if (dtf.Rows.Count > 0) sgen.SetSession(MyGuid, "SALSTRDT", dtf.Copy());
                else
                {
                    ViewBag.scripCall = "showmsgJS(1,'No Data Found',2);";
                    return model;
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
            }
            catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            return model;
        }
        [HttpPost]
        public ActionResult sal_str(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    #region DDLS
                    mod1 = new List<SelectListItem>();
                    DataTable dtu = new DataTable();
                    mq = "select master_id,master_name from master_setting where type='KGM' and" +
                        " find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                    dtu = sgen.getdata(userCode, mq);
                    foreach (DataRow dr in dtu.Rows)
                    {
                        mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

                    #endregion
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel") { return CancelFun(model); }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Formula")
            {
                model = BMakedata(model);
                sgen.SetSession(MyGuid, "Khf_rno", model[0].Col28);

                sgen.SetSession(MyGuid, "btnval", "FORMULA");
                sgen.Open_page("Formula", "formula.aspx");
            }
            else if (command == "GRADE")
            {
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                try
                {
                    mq = "select * from (select '0' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,'-' col5,'-' col6,'-' col7,sh.cur_state as col9,'No' col10 " +
                        "from vehicle_master sh where sh.type='KSP' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' " +
                        "and sh.cur_state<>'0' and sh.date2>utc_timestamp()) a where a.col4 not in ('000011','000012','000013','000014','000015','000017','000018','000019','000020','000021','000022') " +
                        "UNION " +
                        "select * from (select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,pf.col5 col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 " +
                        "from vehicle_master sh left JOIN vehicle_master pf on 1=1 and pf.type='KPF' and pf.client_id='" + clientid_mst + "' and pf.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000011' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' " +
                        "and sh.cur_state<>'0' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,pf.col15 col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 from " +
                        "vehicle_master sh left JOIN vehicle_master pf on 1=1 and pf.type='KPF' and pf.client_id='" + clientid_mst + "' and pf.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000012' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,pf.col14 col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 " +
                        "from vehicle_master sh left JOIN vehicle_master pf on 1=1 and pf.type='KPF' and pf.client_id='" + clientid_mst + "' and pf.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000013' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,esi.col5 col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 " +
                        "from vehicle_master sh left JOIN vehicle_master esi on 1=1 and esi.type='KES' and esi.client_id='" + clientid_mst + "' and esi.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000014' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,esi.col6 col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 from " +
                        "vehicle_master sh left JOIN vehicle_master esi on 1=1 and esi.type='KES' and esi.client_id='" + clientid_mst + "' and esi.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000015' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,lwf.col17 col5,lwf.col11 col6,'-' col7,sh.cur_state as col9,'Yes' col10 from " +
                        "vehicle_master sh left JOIN vehicle_master lwf on 1=1 and lwf.type='KLW' and lwf.client_id='" + clientid_mst + "' and lwf.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000017' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,lwf.col18 col5,lwf.col15 col6,'-' col7,sh.cur_state as col9,'Yes' col11 " +
                        "from vehicle_master sh left JOIN vehicle_master lwf on 1=1 and lwf.type='KLW' and lwf.client_id='" + clientid_mst + "' and lwf.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000018' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,'-' col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 from " +
                        "vehicle_master sh where sh.type='KSP' and trim(sh.vch_num)='000019' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' " +
                        "and sh.cur_state<>'3' and sh.cur_state<>'0' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,'-' col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 from " +
                        "vehicle_master sh where sh.type='KSP' and trim(sh.vch_num)='000020' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' " +
                        "and sh.cur_state<>'3' and sh.cur_state<>'0' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,'-' col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 from " +
                        "vehicle_master sh where sh.type='KSP' and trim(sh.vch_num)='000021' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' " +
                        "and sh.cur_state<>'3' and sh.cur_state<>'0' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,esi.col5 col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 " +
                        "from vehicle_master sh left JOIN vehicle_master esi on 1=1 and esi.type='KES' and esi.client_id='" + clientid_mst + "' and esi.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000022' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' and sh.date2>utc_timestamp() " +
                        "UNION " +
                        "select '1' col2,sh.col1 as col3,sh.vch_num as col4,sh.col10 as col8,esi.col6 col5,'-' col6,'-' col7,sh.cur_state as col9,'Yes' col10 from " +
                        "vehicle_master sh left JOIN vehicle_master esi on 1=1 and esi.type='KES' and esi.client_id='" + clientid_mst + "' and esi.client_unit_id='" + unitid_mst + "' " +
                        "where sh.type='KSP' and trim(sh.vch_num)='000023' and sh.client_id='" + clientid_mst + "' and sh.client_unit_id='" + unitid_mst + "' and sh.date2>utc_timestamp() " +
                        ") b";
                    DataTable dthd = sgen.getdata(userCode, mq);
                    sgen.SetSession(MyGuid, "KDTH", dthd);
                    if (dthd.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        for (int i = 0; i < dthd.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            if (dthd.Rows[i]["col2"].ToString() == "1") { tmm.Chk2 = true; }
                            tmm.Col23 = dthd.Rows[i]["col3"].ToString();
                            tmm.Col32 = dthd.Rows[i]["col4"].ToString();
                            tmm.Col24 = dthd.Rows[i]["col8"].ToString();
                            tmm.Col25 = dthd.Rows[i]["col5"].ToString();
                            tmm.Col26 = dthd.Rows[i]["col6"].ToString();
                            tmm.Col27 = dthd.Rows[i]["col7"].ToString();
                            tmm.Col29 = dthd.Rows[i]["col9"].ToString();
                            tmm.Col30 = dthd.Rows[i]["col10"].ToString();
                            tmm.Col28 = i.ToString();
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col13 = tm.Col13;
                            tmm.Col12 = tm.Col12;
                            tmm.Col11 = tm.Col11;
                            tmm.Col16 = tm.Col16;
                            tmm.Col17 = tm.Col17;
                            tmm.Col18 = tm.Col18;
                            tmm.Col19 = tm.Col19;
                            tmm.Col20 = tm.Col20;
                            tmm.Col21 = tm.Col21;
                            tmm.Col22 = tm.Col22;
                            tmm.Chk1 = tm.Chk1;
                            tmm.Chk2 = tm.Chk2;
                            tmm.TList1 = tm.TList1;
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            model.Add(tmm);
                        }
                    }
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                DataTable dataTable = new DataTable();
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());

                    if (model[0].SelectedItems1.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please select grade', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y")) isedit = true;
                    if (isedit) mq = " and vch_num<>'" + model[0].Col16 + "'";

                    mq1 = "select col1 from " + model[0].Col10 + " where col1='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "' and " +
                        "type = '" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'" + mq + "";
                    cond = sgen.seekval(userCode, mq1, "col1");
                    if (!cond.Equals("0"))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Name Already Exists', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }

                    model = BMakedata(model);
                    dataTable = ((DataTable)sgen.GetSession(MyGuid, "SALSTRDT")).Copy();
                    res = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col12 = tm.Col12,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" }
                        });
                        sgen.SetSession(MyGuid, "SALSTRDT", null);
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex)
                            {
                                ViewBag.scripCall += "mytoast('error', 'toast-top-right', '" + ex.Message.ToString().Trim() + "');";
                            }
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Joining Age
        public ActionResult exp_master()
        {
            string classid = "", mastername = "";
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod1;
            model[0].SelectedItems2 = new string[] { "" };
            //mid_mst = "9003.3.9";
            model[0].Col14 = mid_mst.Trim();
            switch (mid_mst)
            {
                case "8001.1":
                    model[0].Col9 = "ADD NATURE OF EXPENSE";
                    model[0].Col10 = "master_setting";
                    tab_name = model[0].Col10;
                    model[0].Col12 = "KEX";
                    type = model[0].Col12; // EXPENSE master
                    type_desc = "nature of expense";
                    //vw_list_heading = "joining EXPENSE master";
                    model[0].Col21 = "Nature Of Expense";
                    model[0].Col22 = "Code";
                    classid = "Expense_Code";
                    Master_Type = "Nature_Of_Expense";
                    model[0].Col23 = Master_Type;
                    model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                    break;
                case "8001.2":
                    model[0].Col9 = "APPROVAL FOR ADMIN";
                    model[0].Col10 = "";
                    tab_name = model[0].Col10;
                    model[0].Col12 = "";
                    type = model[0].Col12; // EXPENSE master
                    type_desc = "";
                    //vw_list_heading = "joining EXPENSE master";
                    model[0].Col19 = "Approval User";
                    model[0].Col22 = "Code";
                    classid = "Approval_Admin";
                    Master_Type = "Approval_Admin";
                    model[0].Col23 = Master_Type;
                    model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                    break;
                #region joinee age master
                case "9003.3.9":
                    model[0].Col9 = "JOINING AGE MASTER";
                    //div_txt1.Visible = true;
                    //div_ddl1.Visible = true;
                    model[0].Col10 = "master_setting";
                    tab_name = model[0].Col10;
                    model[0].Col12 = "JAM";
                    type = model[0].Col12; // joining age master
                    type_desc = "joining age master";
                    //vw_list_heading = "joining age master";
                    model[0].Col21 = "Age";
                    model[0].Col19 = "Select Genders";
                    Master_Type = "joining age master";
                    model[0].Col23 = Master_Type;
                    model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                    break;
                #endregion
                case "8001.4":// select nature of expense
                    model[0].Col9 = "SELECT NATURE OF EXPENSE";
                    model[0].Col10 = "master_setting";
                    tab_name = model[0].Col10;
                    model[0].Col12 = "EXP";
                    type = model[0].Col12; // joining age master
                    type_desc = "nature of expense";
                    //vw_list_heading = "joining age master";
                    model[0].Col21 = "Display Name";
                    model[0].Col19 = "Select Nature Of Expense";
                    Master_Type = "joining age master";
                    model[0].Col23 = Master_Type;
                    mastername = "Nature_of_Expense";
                    model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                    classid = "Display_Name";
                    break;
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult exp_master(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            string master_id = ""; isedit = false;
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            model[0].TList2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            TempData[MyGuid + "_TList1"] = model[0].TList1;
            TempData[MyGuid + "_TList2"] = model[0].TList2;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (command == "New")
            {
                try
                {
                    #region ddls
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    if (mid_mst == "8001.4")
                    {
                        mq = "select master_id,master_name from master_setting where type='KEX'";
                    }
                    else
                    {
                        mq = "select '001' as master_id,'Male' as master_name from dual UNION select '002' as master_id,'Female' as master_name from dual";
                    }
                    DataTable dt = sgen.getdata(userCode, mq);
                    foreach (DataRow dr in dt.Rows)
                    {
                        mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    if (mid_mst == "8001.4")
                    {
                        dt = sgen.getdata(userCode, "SELECT user_id,vch_num FROM user_details where status='" + "active" + "' " +
                     "and type='CPR' and find_in_set('8000', mod_id)");
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod2.Add(new SelectListItem { Text = dr["user_id"].ToString(), Value = dr["vch_num"].ToString() });
                        }

                    }
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    #endregion


                    model = getnew(model);
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].Col17 == "" || model[0].Col17 == null)
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please enter " + model[0].Col21 + "', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col16 + "'";
                        isedit = true;
                        vch_num = model[0].Col16.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        mq1 = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        master_id = sgen.genNo(userCode, mq, 3, "auto_genid");
                        if (model[0].Col14 == "9003.3.9")
                        {
                            string found = sgen.getstring(userCode, "select master_name from " + model[0].Col10 + " where master_name='" + model[0].SelectedItems1.FirstOrDefault() + "' and type='" + model[0].Col12 + "' " + model[0].Col11 + "");
                            if (found != "")
                            {
                                ViewBag.scripCall += "showmsgJS(1,'Data Already Exists', 2);";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                return View(model);
                            }
                        }
                    }
                    if (mid_mst == "8001.2")
                    {
                        string recid = model[0].SelectedItems1.FirstOrDefault().Trim();
                        string admin = model[0].SelectedItems2.FirstOrDefault().Trim();
                        bool data = sgen.execute_cmd(userCode, "Update USER_DETAILS set approval_admin='" + admin + "' where vch_num='" + recid + "' and type='CPR'");
                        if (data == true)
                        {
                            sgen.showmsg(1, "Approval for Expense Updated", 1);
                        }
                        else
                        {
                            sgen.showmsg(1, "Try Again", 2);
                        }
                    }
                    string currdate = sgen.server_datetime(userCode);
                    #region dtstr
                    DataTable dataTable = sgen.getdata(userCode, "select  * from " + tab_name + " where 1=2");
                    DataRow dr = dataTable.NewRow();
                    dr["rec_id"] = "0";
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["Master_type"] = model[0].Col23;
                    dr["master_id"] = master_id;
                    //dr["master_name"] = model[0].Col17;
                    //dr["classid"] = model[0].Col18;
                    dr["master_name"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["classid"] = model[0].Col17;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    // dr = getsave(currdate, dr, model);
                    dr["rec_id"] = "0";
                    if (isedit)
                    {
                        dr["master_entby"] = model[0].Col3;
                        dr["master_entdate"] = model[0].Col4;
                        dr["master_editby"] = userid_mst;
                        dr["master_editdate"] = sgen.Savedate(currdate, false);
                    }
                    else
                    {
                        dr["master_editby"] = "-";
                        dr["master_editdate"] = sgen.Savedate(currdate, false);
                        dr["master_entby"] = userid_mst;
                        dr["master_entdate"] = sgen.Savedate(currdate, false);
                    }
                    dataTable.Rows.Add(dr);
                    #endregion
                    bool ok = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, model[0].Col8, isedit);
                    if (ok)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        if (isedit) ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Updated');disableForm();";
                        else ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Added');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col19 = tm.Col19,
                            Col20 = tm.Col20,
                            Col21 = tm.Col21,
                            Col22 = tm.Col22,
                            TList2 = mod2,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                        });
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region st_authority
        public ActionResult st_authority()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            type_desc = "Configure rules";
            model = getload(model);
            model[0].Col9 = " STATUTORY AUTHORITY";
            model[0].Col10 = "company_unit_profile";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod1;
            model[0].SelectedItems2 = new string[] { "" };
            return View(model);
        }
        [HttpPost]
        public ActionResult st_authority(List<Tmodelmain> model, string command, string mid)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region ddls 4
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;


            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    // model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    try
                    {
                        mq = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
                        if (!role_mst.ToUpper().Equals("OWNER")) where = " and company_profile_id in ('" + mq.Replace(",", "','") + "')";
                        DataTable dtcomp = new DataTable();
                        mq = "SELECT Company_Profile_Id, company_name||company_profile_id as nameid FROM company_profile where type='CP' " + where + "";
                        dtcomp = sgen.getdata(userCode, mq);
                        foreach (DataRow dr in dtcomp.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["company_profile_id"].ToString() });
                        }
                        TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    }
                    catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }

                    model[0].TList2 = mod2;
                }
                catch (Exception ex) { }
            }
            else if (command == "UNIT")
            {
                DataTable dt = new DataTable();
                try
                {
                    mq = "select com_pan_no,company_cin_no from company_profile where type='CP' and company_profile_id='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "'";
                    DataTable dtcom = sgen.getdata(userCode, mq);
                    if (dtcom.Rows.Count > 0)
                    {
                        model[0].Col19 = dtcom.Rows[0]["com_pan_no"].ToString();
                        model[0].Col18 = dtcom.Rows[0]["company_cin_no"].ToString();
                    }
                    mod2 = new List<SelectListItem>();
                    DataTable dtunit = new DataTable();
                    string mq0 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                    if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq0.Replace(",", "','") + "')";
                    mq1 = "SELECT cup_id,unit_name||cup_Id as nameid FROM company_unit_profile where company_profile_id='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "'" + where + "";
                    dtunit = sgen.getdata(userCode, mq1);
                    if (dtunit.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtunit.Rows)
                        {
                            mod2.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;

                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception)
                {
                }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                    {
                        sgen.showmsg(1, "Please select Company", 2); ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    if (model[0].SelectedItems2.FirstOrDefault().Trim().Equals(""))
                    {
                        sgen.showmsg(1, "Please select Unit", 2); ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    string xDate = sgen.server_datetime(userCode);
                    string dt_ft = "YYYY-MM-dd HH24:MI:SS";
                    mq2 = "update " + model[0].Col10 + " set incorporation_dt=to_date('" + sgen.Make_date_S(model[0].Col17) + "','" + dt_ft + "'),it_tanno='" + model[0].Col20.Trim()
                             + "',it_tancircle='" + model[0].Col21.Trim() + "',it_cit='" + model[0].Col22.Trim() + "',it_signame='" + model[0].Col48.Trim()
                             + "',ll_act='" + model[0].Col30.Trim() + "',ll_signame='" + model[0].Col47.Trim() + "',ll_act1='" + model[0].Col35.Trim()
                             + "',ll_signame1='" + model[0].Col46.Trim() + "',ll_act2='" + model[0].Col40.Trim() + "',ll_signame2='" + model[0].Col45.Trim()
                             + "' where company_profile_id='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "' and cup_id='" + model[0].SelectedItems2.FirstOrDefault().Trim() + "'";
                    bool ok = sgen.execute_cmd(userCode, mq2);
                    if (ok)
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        if (isedit) ViewBag.scripCall = "showmsgJS(1, 'Detail Updated', 1);disableForm();";
                        else ViewBag.scripCall = "showmsgJS(1, 'Detail Added', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "U",
                            Col14 = tm.Col14,
                            Col122 = "<u>U</u>pdate",
                            Col15 = tm.Col15,
                            Col12 = tm.Col12,
                            TList2 = mod2,
                            TList1 = mod1,
                            SelectedItems2 = new string[] { "" },
                            SelectedItems1 = new string[] { "" },
                        });
                    }
                    else
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Data Not Saved', 0);";
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region v_form
        public ActionResult v_form()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            if (mid_mst == "")
            {
                mid_mst = "checkinentry";
            }
            model[0].Col14 = mid_mst.Trim();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "VISITOR FORM";
            model[0].Col10 = "vehicle_master";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "VFA"; //
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            //try
            //{
            //    if (Request.InputStream.Length > 0)
            //    {
            //        using (StreamReader reader = new StreamReader(Request.InputStream))
            //        {
            //            IList<HttpPostedFile> fileCollection1 = new List<HttpPostedFile>();
            //            //fileCollection1.Add(Request.Files[0]);
            //            string hexString = Server.UrlEncode(reader.ReadToEnd());
            //            Session["sch_upd1"] = fileCollection1;
            //            string serverpath = "~/Uploads/" + cg_com_name.Replace(" ", "") + "/";
            //            string currdate = sgen.server_datetime(userCode);
            //            currdate = sgen.Savedate(currdate, false);
            //            string path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + "capturedimage";
            //            string encpath1 = sgen.Convert_Stringto64(path1).ToString();
            //            string finalpath1 = serverpath + encpath1;
            //            //string imagePathsave = string.Format("~/Uploads/" + cg_com_name.Replace(" ", "") + "/{0}.png", clientid_mst + unitid_mst + userid_mst + currdate + "_"+ txt_visit_name.Text);
            //            //File.WriteAllBytes(Server.MapPath(imagePathsave), ConvertHexToBytes(hexString));
            //            //File.WriteAllBytes(Server.MapPath(finalpath1), ConvertHexToBytes(hexString));
            //            FileInfo info = new FileInfo(Server.MapPath(finalpath1));
            //            byte[] bytes = System.IO.File.ReadAllBytes(Server.MapPath(finalpath1));
            //            HttpPostedFile obj = sgen.ConstructHttpPostedFile(bytes, info.Name, sgen.GetContentType(info.Extension));
            //            Session["CapturedImageFile"] = obj;
            //            Session["CapturedImage"] = encpath1;
            //            Session["CheckImage"] = null;
            //        }
            //    }
            //}
            //catch (Exception err)
            //{
            //}
            return View(model);
        }
        public List<Tmodelmain> newv_form(List<Tmodelmain> model)
        {
            try
            {
                sgen.SetSession(MyGuid, "CheckImage", null);
                sgen.SetSession(MyGuid, "CapturedImage", null);
                sgen.SetSession(MyGuid, "CapturedImage1", null);
                model = getnew(model);
                model[0].Col13 = "Save";
                model[0].Col100 = "Save & New";
                List<SelectListItem> mod1 = new List<SelectListItem>();
                #region 1.Bind Doc
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.bind_doc(userCode, clientid_mst, unitid_mst);
                #endregion

            }
            catch (Exception ex) { }
            return model;
        }
        [HttpPost]
        public ActionResult v_form(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (command == "New")
            {
                try
                {
                    model = newv_form(model);
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel") { return CancelFun(model); }
            else if (command == "btnrbt")
            {
                if (model[0].Col17 == "0")
                {
                    model[0].Col40 = "Class";
                    model[0].Col41 = "Section";
                    model[0].Col19 = "";
                    model[0].Col20 = "";
                    model[0].Col21 = "";
                }
                else if (model[0].Col17 == "1")
                {
                    model[0].Col40 = "Department";
                    model[0].Col41 = "Designation";
                    model[0].Col19 = "";
                    model[0].Col20 = "";
                    model[0].Col21 = "";
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
            }
            else if (command == "btnrbt2")
            {
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                if (model[0].Col18 == "0")
                {
                    model[0].Col22 = "";
                    model[0].Col23 = "";
                    model[0].Col26 = "";
                    model[0].Col25 = "";
                }
                else
                {
                    Make_query("v_form", "List Of Users", "STATUS", "1", "", "", model[0].Col15);
                    ViewBag.scripCall = "callFoo('List Of Users');";
                }
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                if (model[0].Col22.Trim().Equals(""))
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please Fill Assignment Name',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col23.Trim().Equals(""))
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please Fill Organisation Name',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col24.Trim().Equals(""))
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please Fill Purpose Name',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col25.Trim().Equals(""))
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please Fill Contact Number',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col26.Trim().Equals(""))
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please Fill Id Number',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].Col30.Trim().Equals(""))
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please Fill Remark',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                DataTable dataTable = new DataTable();
                bool Result = false;
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        if (mid_mst == "checkinentry")
                        {
                            dr["date1"] = sgen.Savedate(model[0].Col28, true);
                            dr["date2"] = sgen.Savedate(model[0].Col28, true);
                            dr["col39"] = sgen.GetSession(MyGuid, "CapturedImage").ToString();
                            status1 = sgen.GetSession(MyGuid, "status1").ToString();
                            status2 = sgen.GetSession(MyGuid, "status2").ToString();
                        }
                        else if (mid_mst == "25001" || mid_mst == "8008.1")
                        {
                            dr["date1"] = sgen.Savedate(model[0].Col27, true);
                            status1 = "PRE";
                            status2 = "NOB";
                        }
                        else if (mid_mst == "checkoutentry")
                        {
                            dr["date1"] = sgen.Savedate(model[0].Col27, true);
                            dr["date2"] = sgen.Savedate(model[0].Col28, true);
                            dr["date3"] = sgen.Savedate(model[0].Col29, true);
                            dr["col39"] = sgen.GetSession(MyGuid, "CapturedImage1").ToString();
                            status1 = sgen.GetSession(MyGuid, "status1").ToString();
                            status2 = "COUT";
                        }
                        else if (mid_mst == "precheckinentry")
                        {
                            dr["date1"] = sgen.Savedate(model[0].Col27, true);
                            dr["date2"] = sgen.Savedate(model[0].Col28, true);
                            status1 = sgen.GetSession(MyGuid, "status1").ToString();
                            status2 = "CIN";
                        }
                        else
                        { }
                        dr["type"] = model[0].Col12;
                        dr["col1"] = model[0].Col22;
                        dr["col2"] = model[0].Col23;
                        dr["col3"] = model[0].Col25;
                        dr["col7"] = model[0].Col26;
                        dr["col12"] = model[0].Col30;
                        dr["col25"] = model[0].Col24;
                        dr["col8"] = model[0].Col42;
                        dr["col28"] = model[0].Col43;
                        dr["col29"] = model[0].Col44;
                        dr["col30"] = status1;
                        dr["col31"] = status2;
                        if (model[0].Col17 == "0") dr["chkvalue"] = true;
                        else dr["chkvalue"] = false;
                        if (model[0].Col17 == "1") dr["chkvalue1"] = true;
                        else dr["chkvalue1"] = false;
                        dr["vch_num"] = vch_num;
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    Result = sgen.Update_data(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col12 = tm.Col12,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" }
                        });
                        sgen.SetSession(MyGuid, "status1", null);
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                //  model = v_form(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex)
                            {
                                ViewBag.scripCall += "mytoast('error', 'toast-top-right', '" + ex.Message.ToString().Trim() + "');";
                            }
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region assignment to client
        public ActionResult asn_to_client()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col14 = mid_mst.Trim();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "ALLOCATE ASSIGNMENT TO CLIENT";
            model[0].Col10 = "vehicle_master";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "ACA"; //
            Master_Type = "Allocate Client Assignment";
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            cond = sgen.seekval(userCode, "select (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr from "
+ model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
            if (!cond.Equals("0"))
            {
                sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                model = CallbackFun("EDIT", "N", "asn_to_client", "Hr", model);
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult asn_to_client(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            TempData[MyGuid + "_Tlist2"] = mod2;
            model[0].TList2 = mod2;
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    model[0].Col13 = "Save";
                    model[0].Col100 = "Save & New";
                    #region 1.Bind assignment
                    mod1 = new List<SelectListItem>();
                    mod1 = cmd_Fun.assignment(userCode, unitid_mst);

                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    #endregion    
                    #region 2.Bind clients
                    mod2 = new List<SelectListItem>();
                    DataTable dt = new DataTable();
                    string mquery1 = "select vch_num,cg_id from clients_mst where type='CUU' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    dt = sgen.getdata(userCode, mquery1);
                    foreach (DataRow dr in dt.Rows)
                    {
                        mod2.Add(new SelectListItem { Text = dr["cg_id"].ToString(), Value = dr["vch_num"].ToString() });
                    }

                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    #endregion
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel") { return CancelFun(model); }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please select Assignment Name',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                if (model[0].SelectedItems2.FirstOrDefault().Trim().Equals(""))
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please select Customer Name',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                DataTable dtnew = new DataTable();
                dtnew = sgen.getdata(userCode, "select * from " + model[0].Col10 + " where type='" + model[0].Col10 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and col1='" + model[0].SelectedItems1.FirstOrDefault() + "' and col3='" + model[0].SelectedItems2.FirstOrDefault() + "'");
                if (dtnew.Rows.Count > 0)
                {
                    ViewBag.scripCall = "showmsgJS(1,'Assignment already assigned to Client',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    return View(model);
                }
                DataTable dataTable = new DataTable();
                bool Result = false;
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        mq1 = " and vch_num <> '" + model[0].Col16.Trim() + "'";
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["vch_num"] = model[0].Col16;
                    dr["rec_id"] = "0";
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["col1"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["col2"] = model[0].Col17;
                    dr["col3"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["col25"] = model[0].Col18;
                    string status = "";
                    if (model[0].Col19 == "Year")
                    {
                        dr["date1"] = sgen.Savedate(model[0].Col20, true);
                    }
                    if (model[0].Col19 == "Period")
                    {
                        dr["date2"] = sgen.Savedate(model[0].Col23, true);
                        dr["date3"] = sgen.Savedate(model[0].Col22, true);
                    }
                    if (model[0].Col19 == "rbt_quarter")
                    {
                        dr["date4"] = sgen.Savedate(model[0].Col21, true);
                    }
                    status = model[0].Col19;
                    dr["col4"] = status;
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dataTable.Rows.Add(dr);
                    Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col12 = tm.Col12,
                            Col18 = "",
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" }
                        });
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        if (isedit)
                        {
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Updated Successfully');disableForm();";
                        }
                        else
                        {
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Added Successfully');disableForm();";
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        private static byte[] ConvertHexToBytes(string hex)
        {
            byte[] bytes = new byte[hex.Length / 2];
            for (int i = 0; i < hex.Length; i += 2)
            {
                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            }
            return bytes;
        }
        #endregion
        #region visitor checkin form
        public ActionResult v_check()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult v_check(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            string master_id = "";
            var tm = model.FirstOrDefault();
            if (command == "New")
            {
                try
                {
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Visitor Checkin Entry")
            {
                return RedirectToAction("v_form", "Hr");
            }
            else if (command == "Check Visitor Preregistration")
            {
                DataTable dt = new DataTable();
                string mq3 = "select vm.client_id||vm.client_unit_id||vm.vch_num||to_char(vm.vch_date,'yyyymmdd')||vm.type as fstr,vm.vch_num as vm_doc,vm.col8,vm.chkvalue,vm.col1,vm.col25,vm.date1,vm.date2 from vehicle_master vm where vm.type='VFA' and vm.col30='PRE' and vm.col31='NOB'";
                dt = sgen.getdata(userCode, mq3);
                if (dt.Rows.Count > 0)
                {
                    model = new List<Tmodelmain>();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Tmodelmain tmm = new Tmodelmain();
                        tmm.Col17 = dt.Rows[i]["col1"].ToString();
                        tmm.Col26 = dt.Rows[i]["vm_doc"].ToString();
                        tmm.Col25 = dt.Rows[i]["fstr"].ToString();
                        tmm.Col19 = dt.Rows[i]["col25"].ToString();
                        tmm.Col20 = dt.Rows[i]["date1"].ToString();
                        tmm.Col21 = dt.Rows[i]["date2"].ToString();
                        if (Convert.ToBoolean(dt.Rows[0]["chkvalue"]) == true)
                        {
                            DataTable dt2 = new DataTable();
                            string query3 = "select first_name||' '||replace(middle_name,'0','')||' '||replace(last_name,'0','') as name,vch_num from user_details where type='STD' and vch_num='" + dt.Rows[0]["col8"].ToString() + "'";
                            dt2 = sgen.getdata(userCode, query3);
                            if (dt2.Rows.Count > 0)
                            {
                                tmm.Col18 = dt2.Rows[i]["name"].ToString();
                                tmm.Col27 = dt2.Rows[i]["vch_num"].ToString();
                            }
                        }
                        else
                        {
                            DataTable dt2 = new DataTable();
                            dt2 = sgen.getdata(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||replace(last_name,'0','') as name,vch_num from user_details where type='CPR' and vch_num='" + dt.Rows[0]["col8"].ToString() + "'");
                            if (dt2.Rows.Count > 0)
                            {
                                tmm.Col18 = dt2.Rows[i]["name"].ToString();
                                tmm.Col27 = dt2.Rows[i]["vch_num"].ToString();
                            }
                        }
                        model.Add(tmm);
                    }
                }
            }
            else if (command == "Visitor Checkout Entry")
            {
                DataTable dt = new DataTable();
                string mq3 = "select vm.client_id||vm.client_unit_id||vm.vch_num||to_char(vm.vch_date,'yyyymmdd')||vm.type as fstr,vm.vch_num as vm_doc,vm.col8,vm.chkvalue,vm.col1,vm.col25,vm.date1,vm.date2 from vehicle_master vm where vm.type='VFA' and vm.col30='PRE' and vm.col31='CIN' or vm.type='VFA' and vm.col30='NEW' and vm.col31='CIN'";
                dt = sgen.getdata(userCode, mq3);
                if (dt.Rows.Count > 0)
                {
                    model = new List<Tmodelmain>();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Tmodelmain tmm = new Tmodelmain();
                        tmm.Col17 = dt.Rows[i]["col1"].ToString();
                        tmm.Col26 = dt.Rows[i]["vm_doc"].ToString();
                        tmm.Col25 = dt.Rows[i]["fstr"].ToString();
                        tmm.Col19 = dt.Rows[i]["col25"].ToString();
                        tmm.Col20 = dt.Rows[i]["date1"].ToString();
                        tmm.Col21 = dt.Rows[i]["date2"].ToString();
                        if (Convert.ToBoolean(dt.Rows[0]["chkvalue"]) == true)
                        {
                            DataTable dt2 = new DataTable();
                            string query3 = "select first_name||' '||replace(middle_name,'0','')||' '||replace(last_name,'0','') as name,vch_num from user_details where type='STD' and vch_num='" + dt.Rows[0]["col8"].ToString() + "'";
                            dt2 = sgen.getdata(userCode, query3);
                            if (dt2.Rows.Count > 0)
                            {
                                tmm.Col18 = dt2.Rows[i]["name"].ToString();
                                tmm.Col27 = dt2.Rows[i]["vch_num"].ToString();
                            }
                        }
                        else
                        {
                            DataTable dt2 = new DataTable();
                            dt2 = sgen.getdata(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||replace(last_name,'0','') as name,vch_num from user_details where type='CPR' and vch_num='" + dt.Rows[0]["col8"].ToString() + "'");
                            if (dt2.Rows.Count > 0)
                            {
                                tmm.Col18 = dt2.Rows[i]["name"].ToString();
                                tmm.Col27 = dt2.Rows[i]["vch_num"].ToString();
                            }
                        }
                        model.Add(tmm);
                    }
                }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].Col17.Equals(""))
                    {
                        sgen.showmsg(1, "Please enter " + model[0].Col21 + "", 2);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col16 + "'";
                        isedit = true;
                        vch_num = model[0].Col16.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        mq1 = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        master_id = sgen.genNo(userCode, mq, 3, "auto_genid");
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Report Assign
        public ActionResult asg_rpt()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "ASSIGN REPORTS";
            model[0].Col10 = "reports";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "ASR";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            DataTable dt = sgen.getdata(userCode, "select '' Report,'1' as  SNo ,'-' as RPT_CODE,'-' as RPT_NAME,'-' as RPT_NEW_NAME,'-' CAT_ID,'-' as CATAGORY,'-' MENU_ID,'-'  MODULE_ID,'-' as MODULE from dual");
            model[0].dt1 = dt;
            sgen.SetSession(MyGuid, "BARP_DT", dt.Copy());
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult asg_rpt(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
            TempData[MyGuid + "_TList1"] = model[0].TList1;
            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (command == "New")
            {
                try
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "enableForm();";
                    #region ddls
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.username(userCode);


                    #endregion
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "USERS")
            {
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                mq = "select client_unit_id||vch_num||cat_id as fstr," +
                         "vch_num as rpt_code,(case when rpt_newname <> '' then rpt_newname when rpt_newname <> null then rpt_newname else rpt_name end)" +
                         " as new_name,rpt_name,cat_id,cat_name as catagory,menu_id,module_id,module from reports where type='ASR' " +
                         "and client_unit_id='" + unitid_mst + "' and username='" + model[0].SelectedItems1.FirstOrDefault() + "'";
                DataTable dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {
                    if (model[0].dt1.Rows[0]["RPT_CODE"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow dr = model[0].dt1.NewRow();
                        dr["Report"] = dt.Rows[i]["fstr"].ToString();
                        dr["SNo"] = i + 1;
                        dr["RPT_CODE"] = dt.Rows[i]["rpt_code"].ToString();
                        dr["RPT_NAME"] = dt.Rows[i]["rpt_name"].ToString();
                        dr["RPT_NEW_NAME"] = dt.Rows[i]["new_name"].ToString();
                        dr["CAT_ID"] = dt.Rows[i]["cat_id"].ToString();
                        dr["CATAGORY"] = dt.Rows[i]["catagory"].ToString();
                        dr["MENU_ID"] = dt.Rows[i]["menu_id"].ToString();
                        dr["MODULE_ID"] = dt.Rows[i]["module_id"].ToString();
                        dr["MODULE"] = dt.Rows[i]["module"].ToString();
                        model[0].dt1.Rows.Add(dr);
                    }
                    model[0].dt1.AcceptChanges();
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = ((DataTable)sgen.GetSession(MyGuid, "BARP_DT")).Copy(); }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Equals(""))
                    {
                        sgen.showmsg(1, "Please Select User From Dropdown", 2);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        return View(model);
                    }
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        //mq1 = " and vch_num<>'" + model[0].Col16 + "'";
                        isedit = true;
                        //vch_num = model[0].Col16.Trim();
                    }
                    else
                    {
                        //mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        //vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        //mq1 = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                        //master_id = sgen.genNo(userCode, mq, 3, "auto_genid");
                    }
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    string username = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                    for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["vch_num"] = model[0].dt1.Rows[i]["RPT_CODE"].ToString();
                        dr["rpt_name"] = model[0].dt1.Rows[i]["RPT_NAME"].ToString();
                        dr["cat_id"] = model[0].dt1.Rows[i]["CAT_ID"].ToString();
                        dr["cat_name"] = model[0].dt1.Rows[i]["CATAGORY"].ToString();
                        dr["menu_id"] = model[0].dt1.Rows[i]["MENU_ID"].ToString();
                        dr["module_id"] = model[0].dt1.Rows[i]["MODULE_ID"].ToString();
                        dr["module"] = model[0].dt1.Rows[i]["MODULE"].ToString();
                        dr["rpt_newname"] = model[0].dt1.Rows[i]["RPT_NEW_NAME"].ToString();
                        dr["username"] = model[0].SelectedItems1.FirstOrDefault();
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    res = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        if (isedit) ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Updated');disableForm();";
                        else ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Added');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            dt1 = ((DataTable)sgen.GetSession(MyGuid, "BARP_DT")).Copy()
                        });
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region reminder config
        public ActionResult remind_config()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "REMINDER CONFIG";
            model[0].Col10 = "master_setting";
            model[0].Col12 = "IIT"; //reminder config
            model[0].Col13 = "Save";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            DataTable dt = sgen.getdata(userCode, "select '1' as  SNo ,'-' as Frequency_ID,'-' as Frequency,'-' as Reminder_Time_In_Days,'-' Interval_In_Days from dual");
            model[0].dt1 = dt;
            sgen.SetSession(MyGuid, "BREMIND_DT", dt.Copy());

            return View(model);
        }
        [HttpPost]
        public ActionResult remind_config(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            if (command == "New")
            {
                try
                {
                    cond = sgen.seekval(userCode, "select (client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')||type) as fstr from "
                   + model[0].Col10 + " where type='" + model[0].Col12 + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'", "fstr");
                    if (!cond.Equals("0"))
                    {
                        sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                        model = CallbackFun("EDIT", "N", "remind_config", "Hr", model);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                    }
                    else
                    {
                        model = getnew(model);
                        mq = "SELECT master_id,master_name,'-' as rdays,'-' as intdays FROM master_setting where type = 'FRE' and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and master_id <> '-'";
                        DataTable dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            if (model[0].dt1.Rows[0]["Frequency_ID"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                DataRow dr = model[0].dt1.NewRow();
                                dr["SNo"] = i + 1;
                                dr["Frequency_ID"] = dt.Rows[i]["master_id"].ToString();
                                dr["Frequency"] = dt.Rows[i]["master_name"].ToString();
                                dr["Reminder_Time_In_Days"] = dt.Rows[i]["rdays"].ToString();
                                dr["Interval_In_Days"] = dt.Rows[i]["intdays"].ToString();
                                model[0].dt1.Rows.Add(dr);
                            }
                            model[0].dt1.AcceptChanges();
                        }
                    }
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                string id = "";
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    DataTable dtstr = new DataTable();
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        isedit = true;
                        vch_num = tmodel.Col16.Trim();
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "  ";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    #region dtstr
                    for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    {
                        DataRow dr = dtstr.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["vch_num"] = model[0].Col16;
                        dr["master_id"] = model[0].dt1.Rows[i]["Frequency_ID"].ToString();
                        dr["master_name"] = model[0].dt1.Rows[i]["Frequency"].ToString();
                        dr["classid"] = model[0].dt1.Rows[i]["Reminder_Time_In_Days"].ToString();
                        dr["SECTIONID"] = model[0].dt1.Rows[i]["Interval_In_Days"].ToString();
                        dr["rec_id"] = "0";
                        if (isedit)
                        {
                            dr["master_entby"] = model[0].Col3;
                            dr["master_entdate"] = model[0].Col4;
                            dr["client_id"] = model[0].Col1;
                            dr["client_unit_id"] = model[0].Col2;
                            dr["master_editby"] = userid_mst;
                            dr["master_editdate"] = currdate;
                        }
                        else
                        {
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["master_entby"] = userid_mst;
                            dr["master_entdate"] = currdate;
                            dr["master_editby"] = "-";
                            dr["master_editdate"] = currdate;
                        }
                        dtstr.Rows.Add(dr);
                    }
                    #endregion
                    bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = "Save",
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            dt1 = ((DataTable)sgen.GetSession(MyGuid, "BREMIND_DT")).Copy()
                        });
                    }
                    else { ViewBag.scripCall = "showmsgJS(3, 'Record Not Saved', 1);"; }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(3, '" + ex.Message.ToString().Replace("'", "") + ", 1);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region salary_advance EMPLOYEE
        public ActionResult empsal_adv()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "ADVANCE SALARY";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "HAS";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            return View(model);
        }
        [HttpPost]
        public ActionResult empsal_adv(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            type_desc = "HR Advance Salary";
            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    #region select policy
                    DataTable dtu = new DataTable();
                    mq1 = "select DISTINCT vch_num, col2 as adv_typ from enx_tab where type='KAS' and client_unit_id='" + unitid_mst + "'";
                    dtu = sgen.getdata(userCode, mq1);
                    if (dtu.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtu.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["adv_typ"].ToString(), Value = dr["vch_num"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    #endregion
                }
                catch (Exception ex) { }
            }
            //else if (command == "Fill Data")
            //{
            //    try
            //    {
            //        if (model[0].Col17 == "")
            //        {
            //            ViewBag.scripCall += "showmsgJS(1,'Please Select Employee', 2);";
            //            ViewBag.vnew = "disabled='disabled'";
            //            ViewBag.vedit = "disabled='disabled'";
            //            ViewBag.vsave = "";
            //            ViewBag.vsavenew = "";
            //            return View(model);
            //        }
            //        if ((model[0].Col19 == "") || (model[0].Col19 == "0"))
            //        {
            //            ViewBag.scripCall += "showmsgJS(1,'Please Enter Salary Of Selected Employee', 2);";
            //            ViewBag.vnew = "disabled='disabled'";
            //            ViewBag.vedit = "disabled='disabled'";
            //            ViewBag.vsave = "";
            //            ViewBag.vsavenew = "";
            //            return View(model);
            //        }
            //        if (model[0].Col21 == "")
            //        {
            //            ViewBag.scripCall += "showmsgJS(1,'Please Select Effective Date', 2);";
            //            ViewBag.vnew = "disabled='disabled'";
            //            ViewBag.vedit = "disabled='disabled'";
            //            ViewBag.vsave = "";
            //            ViewBag.vsavenew = "";
            //            return View(model);
            //        }
            //        if ((model[0].Col23 == "") || (model[0].Col23 == "0"))
            //        {
            //            ViewBag.scripCall += "showmsgJS(1,'Please Enter Month Count', 2);";
            //            ViewBag.vnew = "disabled='disabled'";
            //            ViewBag.vedit = "disabled='disabled'";
            //            ViewBag.vsave = "";
            //            ViewBag.vsavenew = "";
            //            return View(model);
            //        }
            //        if ((model[0].SelectedItems1.FirstOrDefault() == "") || (model[0].SelectedItems1.FirstOrDefault() == "0"))
            //        {
            //            ViewBag.scripCall += "showmsgJS(1,'Please Select Advance Type', 2);";
            //            ViewBag.vnew = "disabled='disabled'";
            //            ViewBag.vedit = "disabled='disabled'";
            //            ViewBag.vsave = "";
            //            ViewBag.vsavenew = "";
            //            return View(model);
            //        }
            //        DataTable dt2 = sgen.getdata(userCode, "SELECT '1' AS SNO,'-' AS Month_Year,'0' AS EMI_AMOUNT,'0' AS BALANCE_AMOUNT,'' ADD_MONTH FROM DUAL");
            //        model[0].dt1 = dt2.Copy();
            //        sgen.SetSession(MyGuid, "BADSL_DT", dt2.Copy());
            //        int monthcount = 0; string EMI = "";
            //        if (model[0].Col22 == "2")
            //        {
            //            monthcount = sgen.Make_int(model[0].Col23);
            //            EMI = Math.Ceiling(sgen.Make_decimal(model[0].Col20) / sgen.Make_decimal(model[0].Col23)).ToString();
            //        }
            //        else
            //        {
            //            EMI = sgen.Make_decimal(model[0].Col23).ToString();
            //            monthcount = sgen.Make_int(model[0].Col20) / sgen.Make_int(model[0].Col23);
            //            if ((sgen.Make_int(model[0].Col20) % sgen.Make_int(model[0].Col23)) > 0) monthcount = monthcount + 1;
            //        }

            //        string balance_amt = model[0].Col20;
            //        for (Int32 i = 0; i < monthcount; i++)
            //        {
            //            string effdate = sgen.Make_date(model[0].Col21).AddMonths(i).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            DateTime effdT = sgen.Make_date(model[0].Col21).AddMonths(i);
            //            Int32 monthid = sgen.Make_int(effdT.ToString("MM", CultureInfo.InvariantCulture));
            //            String MonthName = monthName.GetMonthName(monthid).ToString();
            //            Int32 year = sgen.Make_int(effdT.ToString("yyyy", CultureInfo.InvariantCulture));
            //            string monthyear = MonthName + " - " + year;
            //            balance_amt = (sgen.Make_decimal(balance_amt) - sgen.Make_decimal(EMI)).ToString();

            //            if (sgen.Make_decimal(balance_amt) < 0)
            //            {
            //                EMI = (sgen.Make_decimal(EMI) + sgen.Make_decimal(balance_amt)).ToString();
            //                balance_amt = "0";
            //            }
            //            if (i == 0)
            //            {
            //                mq = "select lpad ('" + monthid + "',3,0) as monthid, '" + MonthName + "' as MonthName, '" + effdate + "' as Duedate, '" + monthyear + "' as  monthyear," + balance_amt + " as Amount," + EMI + " AS Installment from dual";
            //            }
            //            else
            //            {
            //                mq = mq + " union " + "select lpad ('" + monthid + "',3,0) as monthid, '" + MonthName + "' as MonthName, '" + effdate + "' as Duedate , '" + monthyear + "' as  monthyear," + balance_amt + " as Amount," + EMI + " AS Installment from dual";
            //            }
            //        }

            //        mq = "select * from (" + mq + ") a order by to_char(to_date(duedate,'dd/mm/yyyy'),'yyyymm') asc";
            //        DataTable dt = sgen.getdata(userCode, mq);
            //        if (dt.Rows.Count > 0)
            //        {
            //            sgen.SetSession(MyGuid, "KADV_RPT", dt);
            //            if (model[0].dt1.Rows[0]["Month_Year"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
            //            for (int i = 0; i < dt.Rows.Count; i++)
            //            {
            //                DataRow dr = model[0].dt1.NewRow();
            //                dr["SNo"] = i + 1;
            //                dr["Month_Year"] = dt.Rows[i]["monthyear"].ToString();
            //                dr["EMI_AMOUNT"] = dt.Rows[i]["Installment"].ToString();
            //                dr["BALANCE_AMOUNT"] = dt.Rows[i]["Amount"].ToString();
            //                dr["SNO"] = dt.Rows[i]["Duedate"].ToString() + "_" + dt.Rows[i]["monthid"].ToString() + "_" + dt.Rows[i]["MonthName"].ToString();
            //                model[0].dt1.Rows.Add(dr);
            //            }
            //        }
            //        ViewBag.vnew = "disabled='disabled'";
            //        ViewBag.vedit = "disabled='disabled'";
            //        ViewBag.vsave = "";
            //        ViewBag.vsavenew = "";
            //    }
            //    catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            //}
            //else if (command == "+")
            //{
            //    try
            //    {
            //        DataTable dtadv = ((DataTable)sgen.GetSession(MyGuid, "BADSL_DT"));
            //        Int32 year = 0, monthid = 0;
            //        int lastmnt = sgen.Make_int(model[0].dt1.Rows[model[0].dt1.Rows.Count - 1]["SNO"].ToString().Split('_')[1].Trim()) + 1;
            //        int lastyr = sgen.Make_int(model[0].dt1.Rows[model[0].dt1.Rows.Count - 1]["Month_Year"].ToString().Split('-')[1].ToString().Trim());
            //        if (lastmnt <= 12)
            //        {
            //            year = lastyr;
            //            monthid = lastmnt;
            //        }
            //        else
            //        {
            //            year = lastyr + 1;
            //            monthid = lastmnt % 12;
            //        }

            //        string effdate = sgen.Make_date(model[0].Col21).AddMonths(model[0].dt1.Rows.Count).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
            //        DateTime effdT = sgen.Make_date(model[0].Col21).AddMonths(model[0].dt1.Rows.Count);
            //        String MonthName = monthName.GetMonthName(monthid).ToString();
            //        string monthyear = MonthName + " - " + year;

            //        DataRow drn = model[0].dt1.NewRow();
            //        drn["SNO"] = model[0].dt1.Rows.Count + 1;
            //        drn["Month_Year"] = monthyear.Trim();
            //        drn["EMI_AMOUNT"] = "0";
            //        drn["BALANCE_AMOUNT"] = "0";
            //        drn["SNO"] = effdate + "_" + sgen.padlc(monthid, 3).Trim() + "_" + MonthName.Trim();
            //        model[0].dt1.Rows.Add(drn);
            //        model[0].dt1.AcceptChanges();

            //        if (model[0].Col22 == "2") model[0].Col23 = model[0].dt1.Rows.Count.ToString();
            //    }
            //    catch (Exception ex) { }
            //}
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    //for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    //{
                        DataRow dr = dataTable.NewRow();
                        dr["vch_num"] = vch_num;
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["type_desc"] = type_desc;
                        dr["col1"] = model[0].Col25;
                        //dr["col2"] = model[0].dt1.Rows[i][0].ToString().Split('_')[1].ToString();
                        //dr["col3"] = model[0].dt1.Rows[i][0].ToString().Split('_')[2].ToString();
                        //dr["col4"] = model[0].dt1.Rows[i]["month_year"].ToString();
                        //dr["col5"] = model[0].dt1.Rows[i]["EMI_AMOUNT"].ToString();
                        dr["col6"] = model[0].Col19;
                        dr["col7"] = model[0].Col20;
                        dr["col8"] = model[0].Col23;
                        dr["col9"] = model[0].SelectedItems1.FirstOrDefault();
                        //dr["col10"] = model[0].dt1.Rows[i]["BALANCE_AMOUNT"].ToString();
                        dr["col13"] = model[0].Col24;
                        dr["col12"] = model[0].Col22;
                    //dr["date1"] = sgen.Savedate(model[0].dt1.Rows[i][0].ToString().Split('_')[0].ToString(), true);
                    dr["date2"] = sgen.Make_date_S(model[0].Col21);
                    dr["date3"] = sgen.Make_date_S(model[0].Col51);
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    //}
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_od_slip(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion

        #region emp_rpt
        public ActionResult emp_rpt()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "EMPLOYEE CARD REPORT";
            model[0].Col10 = "emp_master";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "EMP";
            return View(model);
        }
        [HttpPost]
        public ActionResult emp_rpt(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dt = new DataTable();
            if (command == "Dept")
            {
                try
                {
                    model[0].dt1 = null;
                    mq = "select count(e.emp_code) empcnt,upper(d.master_name) name,'Department' cap from emp_master e " +
                        "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                        "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' group by d.master_name";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].dt1 = dt;
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "Desig")
            {
                try
                {
                    model[0].dt1 = null;
                    mq = "select count(e.emp_code) empcnt,upper(d.master_name) name,'Designation' cap from emp_master e " +
                        "inner join master_setting d on d.master_id = e.emp_desig and d.type = 'MDG' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                        "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' group by d.master_name";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].dt1 = dt;
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }

        #endregion

        #region salary_advance adjustment
        public ActionResult adv_adjust()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "ADVANCE SALARY ADJUSTMENT";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "ADJ";
            return View(model);
        }
        [HttpPost]
        public ActionResult adv_adjust(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            type_desc = "HR Advance Adjust";
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    if (model[0].Col21 == "")
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Fill Adjustment Amount', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["vch_num"] = vch_num;
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["type_desc"] = type_desc;
                        dr["col1"] = model[0].Col25;
                        dr["col6"] = model[0].Col19;
                        dr["col10"] = model[0].Col21;
                        dr["col13"] = model[0].Col24;
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                        });
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region loan apply
        public ActionResult loan_appl()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            model[0].Col9 = "ADVANCE APPLICATION";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "LON";
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].TList3 = mod3;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };


            if (model[0].Col14 == "8006.2")
            { model[0].Col34 = "Pending"; }
            else { model[0].Col34 = "Approved"; }

            return View(model);
        }
        [HttpPost]
        public ActionResult loan_appl(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            type_desc = "LOAN";
            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList1 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList1 = mod3;

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    #region  ddl
                    DataTable dtu = new DataTable();
                    mq1 = "select DISTINCT vch_num, col2 as adv_typ from enx_tab where type='KAS' and client_unit_id='" + unitid_mst + "'";
                    dtu = sgen.getdata(userCode, mq1);
                    if (dtu.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtu.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["adv_typ"].ToString(), Value = dr["vch_num"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = cmd_Fun.loantype(userCode, unitid_mst);


                    mod3.Add(new SelectListItem { Text = "Interest Free", Value = "001" });
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;


                    #endregion

                    if (model[0].Col14 == "8006.2")
                    {
                        string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                      "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                        mq = "select emp.rptto, (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) emprpto," +
                            " (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.vch_num,emp.emp_code as Emp_Code," +
                              "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                              "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                              "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.dob, 'yyyy'))) as years," +
                               "trunc(months_between(utc_timestamp(),emp.dob)) as months,floor(utc_timestamp() - add_months(emp.dob,trunc(months_between(utc_timestamp(),emp.dob)))) days ,d.master_name dept,g.master_name desig " +
                              " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                              "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                              " left join master_setting dp on dp.master_id=emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                              " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                              "left join emp_master e  on emp.rptto = e.vch_num and e.client_unit_id = '" + unitid_mst + "' and e.type = 'EMP'" +
                              " left join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id) = 1" +
                              " left join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG'  WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "'";

                        DataTable dt = sgen.getdata(userCode, mq);

                        if (dt.Rows.Count > 0)
                        {


                            model[0].Col17 = dt.Rows[0]["vch_num"].ToString();
                            model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                            model[0].Col19 = dt.Rows[0]["Father_Name"].ToString();
                            model[0].Col20 = dt.Rows[0]["Date_Of_Joining"].ToString();
                            model[0].Col21 = dt.Rows[0]["Date_Of_birth"].ToString();
                            model[0].Col23 = dt.Rows[0]["Gender"].ToString();
                            model[0].Col24 = dt.Rows[0]["department"].ToString();
                            model[0].Col25 = dt.Rows[0]["designation"].ToString();

                            model[0].Col29 = dt.Rows[0]["emprpto"].ToString();
                            model[0].Col32 = dt.Rows[0]["rptto"].ToString();
                            model[0].Col30 = dt.Rows[0]["dept"].ToString();
                            model[0].Col31 = dt.Rows[0]["desig"].ToString();



                        }
                    }

                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["vch_num"] = vch_num;
                    dr["type"] = model[0].Col12;
                    dr["vch_date"] = currdate;
                    dr["type_desc"] = type_desc;
                    dr["col5"] = model[0].Col17;
                    dr["col6"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["COL7"] = model[0].Col27; //Re-Payment Schedule (in months)
                    dr["COL8"] = model[0].Col26;//loan amt
                    dr["COL13"] = model[0].Col28;//Remark
                    dr["COL10"] = model[0].Col32;
                    // dr["COL20"] = "Pending";
                    dr["COL20"] = model[0].Col34;
                    dr["col9"] = model[0].SelectedItems2.FirstOrDefault();//loan type
                    dr["col10"] = model[0].SelectedItems3.FirstOrDefault();// interest type

                    dr = getsave(currdate, dr, model);
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";

                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col34 = tm.Col34,

                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                        });
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region loan approval
        public ActionResult loan_apr()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "LOAN APPROVAL";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            ViewBag.scripCall = "enableForm();";
            model[0].Col17 = "P";


            if (!role_mst.ToUpper().Equals("OWNER"))
            {
                mq = "select col8 tat, col9 other_user, Col7,Col12,(case when col7>900000 then 'RF' else 'RM' end) w_type from enx_tab2" +
                    " where type='WFL' and client_unit_id='" + unitid_mst + "' and col5='loan Approval' " +
                    " order by rec_id ";
                DataTable dtw = sgen.getdata(userCode, mq);
                string repto = "", func = "", oth = "";
                if (dtw.Rows.Count > 0)
                {
                    string emp_id = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                    for (int i = 0; i < dtw.Rows.Count; i++)
                    {
                        if (dtw.Rows[i]["Col7"].ToString() == "999997")
                        {
                            cond = "and ( a.rptto='" + emp_id + "')";
                            repto = dtw.Rows[i]["Col12"].ToString();
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                            string tatdays = dtw.Rows[i]["tat"].ToString();
                            if (dtw.Rows.Count - 1 > i)
                            {
                                tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                            }

                            else { tatdays = ">=" + tatdays; }
                            model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                " en.vch_date))))  " + tatdays + "";

                            mq = "select distinct rptto from emp_master where rptto in( select emp_id" +
                                        " from user_details where vch_num='" + userid_mst + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                            string found = sgen.getstring(userCode, mq);
                            if (found != "")
                            {
                                model[0].Col34 = repto;
                                break;
                            }

                        }
                        else if (dtw.Rows[i]["Col7"].ToString() == "999998")
                        {
                            if (repto == "")
                            {
                                cond = "and ( a.rptto='" + emp_id + "' or a.rptto2='" + emp_id + "')";
                            }
                            else
                            {
                                cond = cond.TrimEnd(')');
                                cond = cond + "or a.rptto2='" + emp_id + "')";
                            }
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                            string tatdays = dtw.Rows[i]["tat"].ToString();
                            if (dtw.Rows.Count - 1 > i)
                            {
                                tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                            }

                            else { tatdays = ">=" + tatdays; }
                            model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                " en.vch_date))))  " + tatdays + "";

                            mq = "select distinct rptto2 from emp_master where rptto2 in( select emp_id" +
                                        " from user_details where vch_num='" + userid_mst + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                            string found = sgen.getstring(userCode, mq);
                            if (found != "")
                            {
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                break;
                            }

                        }
                        else if (dtw.Rows[i]["Col7"].ToString() == "999999")//others
                        {
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                            if (userid_mst == dtw.Rows[i]["other_user"].ToString())
                            {
                                cond = "";
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                                string tatdays = dtw.Rows[i]["tat"].ToString();
                                if (dtw.Rows.Count - 1 > i)
                                {
                                    tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                }

                                else { tatdays = ">=" + tatdays; }
                                model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                    " en.vch_date))))  " + tatdays + "";

                                if (repto != "")
                                {
                                    mq = "select distinct rptto from emp_master where rptto in( select emp_id" +
                                        " from user_details where vch_num='" + dtw.Rows[i]["other_user"].ToString() + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                                    string found = sgen.getstring(userCode, mq);
                                    if (found != "")
                                    {
                                        model[0].Col34 = repto;
                                    }
                                }
                                break;
                            }
                        }
                        else
                        {
                            string found = sgen.getstring(userCode, "select col7  user_id from enx_tab2  where type='ROL'" +
                                " and client_unit_id='" + unitid_mst + "' and vch_num='" + dtw.Rows[i]["Col7"].ToString() + "' and col7='" + userid_mst + "'");
                            if (found != "")
                            {
                                cond = "";
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                string tatdays = dtw.Rows[i]["tat"].ToString();
                                if (dtw.Rows.Count - 1 > i)
                                {
                                    tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                }

                                else { tatdays = ">=" + tatdays; }
                                model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                    " en.vch_date))))  " + tatdays + "";
                                break;
                            }
                        }
                    }
                }
                model[0].Col35 = cond;


            }

            #region pending

            cond = model[0].Col35;
            DataTable dt = new DataTable();

            mq = "select a.*,rs.col2 as reason from (SELECT  nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                 ",a.COL8 loan_amount, a.vch_num doc, emp.gender as Gende,emp.f_name as Father_Name,emp.gender as Gender,emp.emp_code as Employee_Code," +
                 "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,a.col7 paymonth, a.col6," +
                 "to_char(emp.st_dt, 'dd/MM/YYYY') as Date_Of_Joining,a.type,to_char(emp.dob, 'dd/MM/YYYY') as Date_Of_birth,a.col20 as status " +
                 "FROM enx_tab2 a ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                 " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE " +
                 "a.TYPE = 'LON' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " +
                 " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Pending' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + " order by emp.emp_code asc) a " +
                 "left join enx_tab rs on rs.vch_num = a.col6 and rs.type = 'KAS' and rs.client_unit_id = '" + unitid_mst + "' where 1=1 " + cond + " ";


            dt = sgen.getdata(userCode, mq);
            if (dt.Rows.Count > 0)
            {
                var tm = model.FirstOrDefault();
                model = new List<Tmodelmain>();
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
                ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                foreach (DataRow dr in dt.Rows)
                {
                    model.Add(new Tmodelmain
                    {
                        Col9 = tm.Col9,
                        Col11 = tm.Col11,
                        Col12 = tm.Col12,
                        Col10 = tm.Col10,
                        Col13 = tm.Col13,
                        Col14 = tm.Col14,
                        Col15 = tm.Col15,
                        Col28 = tm.Col28,
                        Col29 = tm.Col29,
                        Col30 = tm.Col30,
                        Col34 = tm.Col34,
                        Col35 = tm.Col35,
                        Col36 = tm.Col36,
                        Col16 = dr["doc"].ToString(),
                        Col17 = tm.Col17,
                        Col18 = dr["Employee_Name"].ToString(),
                        Col19 = dr["department"].ToString() + ' ' + dr["designation"].ToString(),
                        Col20 = dr["emp_doc"].ToString(),
                        Col21 = dr["paymonth"].ToString(),
                        Col22 = dr["loan_amount"].ToString(),
                        Col23 = dr["reason"].ToString(),
                        Col27 = "P",
                    });
                }
            }
            #endregion

            return View(model);
        }
        [HttpPost]
        public ActionResult loan_apr(List<Tmodelmain> model, string command, string mid)
        {
            try
            {
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();

                string cond = "";
                int cnt = 0;
                //if (!role_mst.ToUpper().Equals("OWNER"))
                //{
                //    string rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                //    cond = "and ( a.rptto='" + rptto + "' or a.rptto2='" + rptto + "')";
                //}
                if (command == "Submit")
                {
                    string status = "";
                    Boolean isok = true;
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Col27 == "P")
                        {
                            status = "Pending";
                        }
                        else if (model[i].Col27 == "A")
                        {
                            status = "Approved";
                            cnt++;
                        }
                        else if (model[i].Col27 == "R")
                        {
                            status = "Rejected";
                            cnt++;
                        }
                        string xDate = sgen.server_datetime(userCode);
                        string dt_ft = "YYYY-MM-dd HH24:MI:SS";
                        mq = "update enx_tab2 set col22='" + userid_mst + "', date5= to_date('" + xDate + "','" + dt_ft + "'), col20='" + status + "' where type='LON' and vch_num='" + model[i].Col16 + "' and client_unit_id='" + unitid_mst + "'";
                        isok = sgen.execute_cmd(userCode, mq);
                    }
                    if (isok == true)
                    {
                        if (cnt > 0) { ViewBag.scripCall = "mytoast('success', 'toast-top-right', 'Loan Status Updated Successfully');"; };
                        DataTable dt = new DataTable();
                        cond = model[0].Col35;
                        mq = "select a.*,rs.col2 as reason from (SELECT  nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                        ",a.COL8 loan_amount, a.vch_num doc, emp.gender as Gende,emp.f_name as Father_Name,emp.gender as Gender,emp.emp_code as Employee_Code," +
                        "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,a.col7 paymonth, a.col6," +
                        "to_char(emp.st_dt, 'dd/MM/YYYY') as Date_Of_Joining,a.type,to_char(emp.dob, 'dd/MM/YYYY') as Date_Of_birth,a.col20 as status " +
                        "FROM enx_tab2 a ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                        " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE " +
                        "a.TYPE = 'LON' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " +
                        " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Pending' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + " order by emp.emp_code asc) a " +
                        "left join enx_tab rs on rs.vch_num = a.col6 and rs.type = 'KAS' and rs.client_unit_id = '" + unitid_mst + "' where 1=1 " + cond + " ";

                        dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            model = new List<Tmodelmain>();
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                            foreach (DataRow dr in dt.Rows)
                            {
                                model.Add(new Tmodelmain
                                {
                                    Col9 = tm.Col9,
                                    Col11 = tm.Col11,
                                    Col12 = tm.Col12,
                                    Col10 = tm.Col10,
                                    Col13 = tm.Col13,
                                    Col14 = tm.Col14,
                                    Col15 = tm.Col15,
                                    Col34 = tm.Col34,
                                    Col35 = tm.Col35,
                                    Col36 = tm.Col36,
                                    Col16 = dr["doc"].ToString(),
                                    Col17 = tm.Col17,
                                    Col18 = dr["employee_name"].ToString(),
                                    Col19 = dr["department"].ToString() + ' ' + dr["designation"].ToString(),
                                    Col20 = dr["employee_code"].ToString(),
                                    Col21 = dr["paymonth"].ToString(),
                                    Col22 = dr["loan_amount"].ToString(),
                                    Col23 = dr["reason"].ToString(),

                                });
                            }
                        }
                    }

                }
                else if (command == "Pending")
                {
                    cond = model[0].Col35;
                    DataTable dt = new DataTable();

                    mq = "select a.*,rs.col2 as reason from (SELECT  nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                         ",a.COL8 loan_amount, a.vch_num doc, emp.gender as Gende,emp.f_name as Father_Name,emp.gender as Gender,emp.emp_code as Employee_Code," +
                         "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department,a.col7 paymonth, a.col6," +
                         "to_char(emp.st_dt, 'dd/MM/YYYY') as Date_Of_Joining,a.type,to_char(emp.dob, 'dd/MM/YYYY') as Date_Of_birth,a.col20 as status " +
                         "FROM enx_tab2 a ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                         " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE " +
                         "a.TYPE = 'LON' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " +
                         " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Pending' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + " order by emp.emp_code asc) a " +
                         "left join enx_tab rs on rs.vch_num = a.col6 and rs.type = 'KAS' and rs.client_unit_id = '" + unitid_mst + "' where 1=1 " + cond + " ";


                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in dt.Rows)
                        {
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col28 = tm.Col28,
                                Col29 = tm.Col29,
                                Col30 = tm.Col30,
                                Col34 = tm.Col34,
                                Col35 = tm.Col35,
                                Col36 = tm.Col36,
                                Col16 = dr["doc"].ToString(),
                                Col17 = tm.Col17,
                                Col18 = dr["Employee_Name"].ToString(),
                                Col19 = dr["department"].ToString() + ' ' + dr["designation"].ToString(),
                                Col20 = dr["emp_doc"].ToString(),
                                Col21 = dr["paymonth"].ToString(),
                                Col22 = dr["loan_amount"].ToString(),
                                Col23 = dr["reason"].ToString(),
                                Col27 = "P",
                            });
                        }
                    }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region LEAVE CONFIG
        public ActionResult leave_config()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "LEAVE CONFIG";
            model[0].Col10 = "kc_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' ";
            model[0].Col12 = "KLV";
            ViewBag.vcopy = "disabled='disabled'";
            #region ddls
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].TList4 = mod1;
            model[0].TList5 = mod1;
            model[0].TList6 = mod1;
            model[0].TList7 = mod1;
            model[0].TList8 = mod1;
            model[0].TList9 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            model[0].SelectedItems6 = new string[] { "" };
            model[0].SelectedItems7 = new string[] { "" };
            model[0].SelectedItems8 = new string[] { "" };
            model[0].SelectedItems9 = new string[] { "" };
            #endregion
            model[0].LTM1 = new List<Tmodelmain>();
            Tmodelmain tmltm2 = new Tmodelmain();
            tmltm2.Col1 = "1";
            model[0].LTM1.Add(tmltm2);
            return View(model);
        }
        [HttpPost]
        public ActionResult leave_config(List<Tmodelmain> model, string command, string hfrow)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            #region ddls
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;

            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;

            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;

            if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;

            if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];
            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;

            if (tm.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            List<SelectListItem> mod7 = (List<SelectListItem>)TempData[MyGuid + "_Tlist7"];
            TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;

            if (tm.SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
            List<SelectListItem> mod8 = (List<SelectListItem>)TempData[MyGuid + "_Tlist8"];
            TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;

            if (tm.SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
            List<SelectListItem> mod9 = (List<SelectListItem>)TempData[MyGuid + "_Tlist9"];
            TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;

            if (tm.SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod6 = new List<SelectListItem>();
                    mod7 = new List<SelectListItem>();
                    mod8 = new List<SelectListItem>();
                    mod9 = new List<SelectListItem>();
                    DataTable dtu = new DataTable();
                    mq1 = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
                    if (role_mst.ToUpper().Equals("OWNER")) cond = "where company_status='1'";
                    else cond = "where company_profile_id in ('" + mq1.Replace(",", "','") + "') and company_status='1'";

                    mq = "SELECT company_profile_id,(company_name||' ('||company_profile_id||')') as name FROM company_profile " + cond + "";
                    dtu = sgen.getdata(userCode, mq);
                    foreach (DataRow dr in dtu.Rows)
                    {
                        mod1.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["company_profile_id"].ToString() });
                    }
                    mod2.Add(new SelectListItem { Text = "Days", Value = "001" });
                    mod2.Add(new SelectListItem { Text = "Days From Join Date", Value = "002" });
                    mod2.Add(new SelectListItem { Text = "Monthly", Value = "003" });
                    mod2.Add(new SelectListItem { Text = "Month From Join Date", Value = "004" });
                    mod2.Add(new SelectListItem { Text = "Quarterly", Value = "005" });
                    mod2.Add(new SelectListItem { Text = "Quarter From Join Date", Value = "006" });
                    mod2.Add(new SelectListItem { Text = "Half Yearly", Value = "007" });
                    mod2.Add(new SelectListItem { Text = "Half Year From Join Date", Value = "008" });
                    mod2.Add(new SelectListItem { Text = "Yearly", Value = "009" });
                    mod2.Add(new SelectListItem { Text = "Year From Join Date", Value = "010" });
                    mod3.Add(new SelectListItem { Text = "First Day", Value = "001" });
                    mod3.Add(new SelectListItem { Text = "Last Day", Value = "002" });
                    mod4.Add(new SelectListItem { Text = "Flat", Value = "001" });
                    mod4.Add(new SelectListItem { Text = "Slab", Value = "002" });
                    mod5.Add(new SelectListItem { Text = "Days", Value = "001" });
                    mod5.Add(new SelectListItem { Text = "Month", Value = "002" });
                    mod5.Add(new SelectListItem { Text = "Quarter", Value = "003" });
                    mod5.Add(new SelectListItem { Text = "Half Year", Value = "004" });
                    mod5.Add(new SelectListItem { Text = "Year", Value = "005" });
                    mod6.Add(new SelectListItem { Text = "Days", Value = "001" });
                    mod6.Add(new SelectListItem { Text = "Month", Value = "002" });
                    mod6.Add(new SelectListItem { Text = "Quarter", Value = "003" });
                    mod6.Add(new SelectListItem { Text = "Half Year", Value = "004" });
                    mod6.Add(new SelectListItem { Text = "Year", Value = "005" });
                    mq = "select vch_num,col1 from kc_tab where type='KLV' and vch_num<>'" + model[0].Col16.Trim() + "' AND CLIENT_ID='" + clientid_mst + "'";
                    DataTable ddl7 = sgen.getdata(userCode, mq);
                    foreach (DataRow dr in ddl7.Rows)
                    {
                        mod7.Add(new SelectListItem { Text = dr["col1"].ToString(), Value = dr["vch_num"].ToString() });
                    }
                    mod8.Add(new SelectListItem { Text = "Applicable To", Value = "001" });
                    mod8.Add(new SelectListItem { Text = "Type Of Employee", Value = "002" });
                    mod8.Add(new SelectListItem { Text = "Department", Value = "003" });
                    mod8.Add(new SelectListItem { Text = "Location", Value = "004" });
                    mod8.Add(new SelectListItem { Text = "Cost Center", Value = "005" });
                    mod8.Add(new SelectListItem { Text = "Level", Value = "006" });
                    mod8.Add(new SelectListItem { Text = "Designation", Value = "007" });
                    mod8.Add(new SelectListItem { Text = "ESI Employee", Value = "008" });
                    //TempData[MyGuid + "_Tlist1"] = mod1;
                    //TempData[MyGuid + "_Tlist2"] = mod2;
                    //TempData[MyGuid + "_Tlist3"] = mod3;
                    //TempData[MyGuid + "_Tlist4"] = mod4;
                    //TempData[MyGuid + "_Tlist5"] = mod5;
                    //TempData[MyGuid + "_Tlist6"] = mod6;
                    //TempData[MyGuid + "_Tlist7"] = mod7;
                    //TempData[MyGuid + "_Tlist8"] = mod8;
                    //TempData[MyGuid + "_Tlist9"] = mod9;
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                    TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                    TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7;
                    TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8;
                    TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                    ViewBag.vcopy = "";
                }
                catch (Exception ex) { }
            }
            else if (command == "Add")
            {
                try
                {
                    Tmodelmain ntm1 = new Tmodelmain();
                    ntm1.Col1 = (Convert.ToInt32(model[0].LTM1.Max(x => sgen.Make_int(x.Col1))) + 1).ToString();
                    if (ntm1.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (ntm1.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (ntm1.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (ntm1.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    if (ntm1.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                    if (ntm1.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                    if (ntm1.SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
                    if (ntm1.SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
                    if (ntm1.SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
                    model[0].LTM1.Add(ntm1);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);"; }
            }
            else if (command == "Remove")
            {
                if (model[0].LTM1.Count > 1) model[0].LTM1.RemoveAt(sgen.Make_int(hfrow));
                else
                {
                    ViewBag.scripCall = "showmsgJS(1,'You cannot remove last entry',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    return View(model);
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Formula")
            {
                sgen.SetSession(MyGuid, "btnval", "FORMULA");
                sgen.Open_page("Formula", "formula.aspx");
            }
            else if (command == "Criteria_type")
            {
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
                if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
                if (model[0].SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
                if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                {
                    sgen.showmsg(1, "Please Select Criteria ", 2);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    return View(model);
                }
                DataTable dtl = new DataTable();
                if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals("001"))
                {
                    mq = "select '001' as master_id,'Male' as master_name from dual UNION ALL select '002' as master_id,'Female' as master_name  from dual UNION ALL " +
                        "SELECT '003' as master_id,'General' as master_name from dual";
                }
                else if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals("002"))
                {
                    mq = "select master_id,master_name from master_setting where type='KET'" + model[0].Col11 + "";
                }
                else if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals("003"))
                {
                    mq = "select master_id,master_name from master_setting where type='MDP'";
                }
                else if (model[0].SelectedItems8.FirstOrDefault().Trim().Equals("007"))
                {
                    mq = "select master_id,master_name from master_setting where type='MDG'";
                }
                dtl = sgen.getdata(userCode, mq);
                foreach (DataRow dr in dtl.Rows)
                {
                    mod9.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
                TempData[MyGuid + "_Tlist9"] = mod9;
                model[0].TList9 = mod9;
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
            }
            else if (command == "Copy")
            {
                try
                {
                    if (model[0].SelectedItems1.FirstOrDefault().Trim().Equals(""))
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Please Select Unit', 2);";
                        //sgen.showmsg(1, "Please Select Unit", 2);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    mq = "select * from kc_tab where type='KLV' and client_id='" + clientid_mst + "' ";
                    DataTable dtsh = sgen.getdata(userCode, mq);
                    if (dtsh.Rows.Count > 0)
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Leave Heads Already there in this Unit', 2);";

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);

                    }
                    else
                    {
                        mq = "insert into kc_tab (created_date,vch_num,vch_date,type,client_id,client_unit_id,ent_by,ent_date,edit_by,edit_date,col1," +
                            "col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,col14,col15,date1,col16,col17,col18,col19,col20,col21,date2,col22,date3," +
                            "col23,col24,col25,col26,col27,date4,date5,date6,col28,col29,col30,col31,col32,col33,col34,col35,col36,col37,col38,col39,col40,col41,col42,col43," +
                            "col44,col45,col46,col47)" +
                            "(SELECT UTC_TIMESTAMP(),vch_num, UTC_TIMESTAMP(), type, '" + clientid_mst + "', '" + unitid_mst + "', '" + userid_mst + "', UTC_TIMESTAMP(), '-', UTC_TIMESTAMP(), col1, col2, col3," +
                            "col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, date1,col16,col17, col18, col19, col20, col21, date2," +
                            "col22, date3, col23, col24, col25, col26, col27, date4, date5, date6, col28, col29, col30, col31, col32, col33, col34, col35," +
                            "col36,col37, col38, col39, col40, col41,col42,col43,col44,col45,col46,col47" +
                            " FROM kc_tab WHERE type = 'KLV' and client_id='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "' )";
                        res = sgen.execute_cmd(userCode, mq);
                        if (res)
                        {
                            mq = "insert into enx_tab (vch_num,vch_date,type,type_desc,client_id,client_unit_id,ent_by,ent_date,edit_by,edit_date,col1," +
                "col2,col3,col4,col5,col6,col7,col8,col9,col10,col11,col12,col13,date1,date2,r_no,ref_code,ref_dt,chkvalue)" +
                "(SELECT vch_num, UTC_TIMESTAMP(), type,type_desc,'" + clientid_mst + "', '" + unitid_mst + "', '" + userid_mst + "', UTC_TIMESTAMP(), '-', UTC_TIMESTAMP(), col1, col2, col3," +
                "col4, col5, col6, col7, col8, col9, col10, col11, col12, col13,date1,date2,r_no,ref_code,ref_dt,chkvalue" +
                " FROM enx_tab WHERE type = 'KLV' and client_id='" + model[0].SelectedItems1.FirstOrDefault().Trim() + "' )";
                            sgen.execute_cmd(userCode, mq);
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Leave Heads Copied from selected Unit');disableForm();";
                            //sgen.showmsg(1, "Leave Heads Copied from selected Unit", 1);
                        }
                    }
                }
                catch (Exception err) { sgen.showmsg(1, err.Message.ToString(), 0); }
            }
            else if (command == "Save" || command == "Update")
            {
                string v_credit = "N", v_proration = "N", v_cutoff = "N", v_carry_frwrd = "N", v_encashable = "N", v_unavaleave = "N", v_attachment = "N",
                   v_lwoff = "N", v_lph = "N", v_lppwoff = "N", v_lpph = "N", v_lpswoff = "N", v_lpsh = "N", cantclubbed = "", criteriatype = "";
                try
                {
                    string currdate = sgen.server_datetime(userCode);
                    if (model[0].Chk1.Equals(true)) v_credit = "Y";
                    if (model[0].Chk3.Equals(true)) v_proration = "Y";
                    if (model[0].Chk4.Equals(true)) v_cutoff = "Y";
                    if (model[0].Chk14.Equals(true)) v_carry_frwrd = "Y";
                    if (model[0].Chk15.Equals(true)) v_encashable = "Y";
                    if (model[0].Chk5.Equals(true)) v_unavaleave = "Y";
                    if (model[0].Chk6.Equals(true)) v_attachment = "Y";
                    if (model[0].Chk7.Equals(true)) v_lwoff = "Y";
                    if (model[0].Chk8.Equals(true)) v_lph = "Y";
                    if (model[0].Chk9.Equals(true)) v_lppwoff = "Y";
                    if (model[0].Chk10.Equals(true)) v_lpph = "Y";
                    if (model[0].Chk11.Equals(true)) v_lpswoff = "Y";
                    if (model[0].Chk12.Equals(true)) v_lpsh = "Y";
                    DataTable dtstr = new DataTable();
                    dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    if (sgen.GetSession(MyGuid, "EDMODE").Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col16.Trim() + "'";
                        isedit = true;
                        vch_num = model[0].Col16.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "";
                        model[0].Col16 = vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        isedit = false;
                        cond = sgen.seekval(userCode, "select col1 from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + " and col1='" + model[0].Col17.Trim() + "'" + mq1 + "", "col1");
                        if (!cond.Equals("0"))
                        {
                            //Means Already Exits....               
                            ViewBag.scripCall += "showmsgJS(1,'Name Already Exists', 2);";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }
                    }
                    currdate = sgen.server_datetime(userCode);
                    string ent_dt = currdate;
                    string ddl_creditfreq = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Text.ToString();
                    string ddl_crediton = ((List<SelectListItem>)TempData[MyGuid + "_Tlist3"]).SingleOrDefault(item => item.Value == model[0].SelectedItems3.FirstOrDefault().ToString()).Text.ToString();
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = ent_dt;
                    dr["type"] = model[0].Col12;
                    dr["col1"] = model[0].Col17.Trim();
                    dr["col2"] = model[0].Col18.Trim();
                    dr["col3"] = model[0].Col19.Trim();
                    dr["col4"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["col5"] = ddl_creditfreq.Trim();
                    dr["col6"] = model[0].SelectedItems3.FirstOrDefault().Trim();
                    dr["col7"] = ddl_crediton.Trim();
                    dr["col8"] = model[0].Col20.Trim();
                    dr["col9"] = v_credit.Trim();
                    dr["col10"] = v_proration.Trim();
                    dr["col11"] = model[0].SelectedItems4.FirstOrDefault().Trim();
                    dr["col12"] = v_cutoff.Trim();
                    dr["col13"] = v_carry_frwrd.Trim();
                    dr["col14"] = v_encashable.Trim();
                    dr["col15"] = model[0].Col21;
                    dr["col16"] = model[0].Col22;
                    dr["col17"] = model[0].Col23;
                    dr["col18"] = model[0].Col24;
                    dr["col19"] = model[0].Col25;
                    dr["col20"] = model[0].Col26;
                    dr["col21"] = model[0].Col27;
                    dr["col22"] = model[0].Col28;
                    dr["col23"] = v_unavaleave;
                    dr["col24"] = model[0].Col29;
                    dr["col25"] = model[0].Col30;
                    dr["col26"] = v_attachment;
                    dr["col27"] = model[0].Col31;
                    dr["col28"] = model[0].SelectedItems5.FirstOrDefault().Trim();
                    dr["col29"] = model[0].Col32;
                    dr["col30"] = model[0].Col33;
                    dr["col31"] = model[0].SelectedItems6.FirstOrDefault().Trim();
                    dr["col32"] = v_lwoff;
                    dr["col33"] = v_lph;
                    dr["col34"] = v_lppwoff;
                    dr["col35"] = v_lpph;
                    dr["col36"] = v_lpswoff;
                    dr["col37"] = v_lpsh;
                    dr["col38"] = model[0].SelectedItems8.FirstOrDefault().Trim();
                    cantclubbed = string.Join(",", model[0].SelectedItems7);
                    cantclubbed = cantclubbed.Replace("'", "");
                    dr["col39"] = cantclubbed;
                    criteriatype = string.Join(",", model[0].SelectedItems9);
                    criteriatype = criteriatype.Replace("'", "");
                    dr["col40"] = criteriatype.Trim();
                    dr["rec_id"] = "0";
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dtstr.Rows.Add(dr);
                    #endregion
                    res = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (res)
                    {
                        if (sgen.GetSession(MyGuid, "edmode").Equals("Y"))
                        {
                            isedit = true;
                            vch_num = model[0].Col16.Trim();
                        }
                        else
                        {
                            vch_num = model[0].Col16.Trim();
                            isedit = false;
                        }
                        //List<string> froms = sgen.Getformvalue(this, "txt_from", "*", "");
                        //List<string> vals1 = sgen.Getformvalue(this, "lbl_value1", "*", "");
                        //List<string> tos = sgen.Getformvalue(this, "txt_to", "*", "");
                        //List<string> vals2 = sgen.Getformvalue(this, "lbl_value2", "*", "");
                        //List<string> dys = sgen.Getformvalue(this, "txt_days", "*", "");
                        //currdate = sgen.server_datetime(userCode);
                        //ent_date = currdate;
                        //int lenn = froms.Count;
                        //for (int k = 0; k < lenn; k++)
                        //{
                        //    DataRow dr = dtf.NewRow();
                        //    dr["rec_id"] = "0";
                        //    dr["vch_num"] = vch_num;
                        //    dr["vch_date"] = ent_date;
                        //    dr["type"] = type;
                        //    dr["type_desc"] = type_desc;
                        //    dr["col1"] = froms[k].ToString();
                        //    dr["col2"] = ddl_creditfreq.Items[ddl_creditfreq.SelectedIndex].Text.Trim().Split('l')[0].Trim().ToString();
                        //    dr["col3"] = tos[k].ToString();
                        //    dr["col4"] = ddl_creditfreq.Items[ddl_creditfreq.SelectedIndex].Text.Trim().Split('l')[0].Trim().ToString();
                        //    dr["col5"] = dys[k].ToString();
                        //    dr["ref_code"] = vch_num;
                        //    if (isedit)
                        //    {
                        //        dr["ent_by"] = ViewState["ent_by"].ToString().Trim();
                        //        dr["ent_date"] = ViewState["ent_date"].ToString().Trim();
                        //        dr["client_id"] = ViewState["client_id"].ToString().Trim();
                        //        dr["client_unit_id"] = ViewState["client_unit_id"].ToString().Trim();
                        //    }
                        //    else
                        //    {
                        //        dr["ent_by"] = userid_mst;
                        //        dr["ent_date"] = ent_date;
                        //        dr["client_id"] = clientid_mst;
                        //        dr["client_unit_id"] = unitid_mst;
                        //    }
                        //    dr["edit_by"] = userid_mst;
                        //    dr["edit_date"] = ent_date;
                        //    dtf.Rows.Add(dr);
                        //}
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        if (isedit) ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Updated');disableForm();";
                        else ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Detail Added');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            TList4 = mod4,
                            TList5 = mod5,
                            TList6 = mod6,
                            TList7 = mod7,
                            TList8 = mod8,
                            TList9 = mod9,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },
                            SelectedItems6 = new string[] { "" },
                            SelectedItems7 = new string[] { "" },
                            SelectedItems8 = new string[] { "" },
                            SelectedItems9 = new string[] { "" },
                            LTM1 = new List<Tmodelmain>()
                        });
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region View Task
        public ActionResult taskinbox()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            Tmodelmain tm1 = new Tmodelmain();
            //mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            //mid_mst = "11001.2";
            //mid_mst = "11001.3";
            DataTable dt0 = new DataTable();
            dt0 = sgen.getdata(userCode, "select user_id, nvl(email,'-') email,(user_id||' <'||nvl(email,'-')||'>') as u_id from user_details where vch_num='" + userid_mst + "'");
            if (dt0.Rows.Count > 0)
            {
                if (sgen.ValidateEmail(dt0.Rows[0]["email"].ToString().Trim()))
                {
                    mq0 = dt0.Rows[0]["user_id"].ToString().Trim();
                }
                else
                {
                    cond = " and b.user_id='" + dt0.Rows[0]["u_id"].ToString().Trim() + "'";
                    mq0 = dt0.Rows[0]["user_id"].ToString().Trim();
                }
            }
            switch (mid_mst)
            {
                case "11001.2":
                    model[0].Col29 = "1";
                    model[0].Col9 = "INBOX";
                    //mq = "select * from (select  b.rec_id, 'inbox' as type,'1' as kitne ,b.rec_id as messageid, b.box_status as to_status,b.vch_num, b.User_id as recipients_userid,b.from_user,b.body,b.subject,b.read_unread,b.vch_date,(CASE WHEN b.completion_dt=b.vch_date THEN '-' ELSE b.completion_dt end) as completion_dt,b.tsktype_name,b.task_type,b.ref_code,from_user as user_id  from taskassign b where b.box_status='1' and substring_index(substring_index(b.user_id, ',', 1), '<',  1)='" + mq0 + "' union select b.rec_id, 'inbox' as type,'1' as kitne ,b.rec_id as messageid, b.box_status as to_status,b.vch_num, b.User_id as recipients_userid,b.from_user,b.body,b.subject,b.read_unread,b.vch_date,(CASE WHEN b.completion_dt = b.vch_date THEN '-' ELSE b.completion_dt end) as completion_dt,b.tsktype_name,b.task_type,b.ref_code,from_user as user_id  from taskassign b where b.box_status = '1' and b.cc_ids like '%" + userid_mst + "%') tab order by rec_id desc";
                    //mq = "select * from (select b.rec_id, 'inbox' as type,'1' as kitne ,b.rec_id as messageid, b.box_status " +
                    //    "as to_status,b.vch_num,b.User_id as recipients_userid,b.from_user,cast(b.body as varchar(1000)) body," +
                    //    " b.subject,b.read_unread,b.vch_date,(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "')" +
                    //    " = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' else to_char" +
                    //    "(b.completion_dt, '" + sgen.Getsqldateformat() + "') end )completion_dt,b.tsktype_name," +
                    //    "b.task_type,b.ref_code,from_user as user_id ,b.priority from taskassign b where b.box_status = '1' " +
                    //    "and(regexp_substr(regexp_substr(b.user_id, ',', 1), '<', 1)) = 'nameadmin' union" +
                    //    " select b.rec_id, 'inbox' as type,'1' as kitne ,b.rec_id as messageid, b.box_status as to_status,b.vch_num, " +
                    //    "b.User_id as recipients_userid,b.from_user,cast(b.body as varchar(1000))  body,b.subject,b.read_unread," +
                    //    "b.vch_date,(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "')" +
                    //    " then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end )completion_dt,b.tsktype_name,b.task_type," +
                    //    "b.ref_code, from_user as user_id ,b.priority from taskassign b where b.box_status = '1' and b.cc_ids like '%000001%' )" +
                    //    " tab order by rec_id desc";

                    mq = "select * from (select 'inbox' type,'1' kitne,b.vch_num messageid,b.box_status to_status,b.vch_num,b.User_id recipients_userid," +
                        " b.from_user,cast(b.body as varchar(1000)) body, b.subject,b.read_unread,b.vch_date," +
                        "(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end) completion_dt," +
                        "b.tsktype_name,b.task_type,b.ref_code,b.from_user user_id,b.priority from taskassign b where b.box_status = '1' and " +
                        "(regexp_substr(regexp_substr(b.user_id, ',', 1), '<', 1)) = '" + mq0 + "' " +
                        "union " +
                        "select 'inbox' type,'1' kitne,b.vch_num messageid,b.box_status to_status,b.vch_num,b.User_id recipients_userid,b.from_user," +
                        "cast(b.body as varchar(1000))  body,b.subject,b.read_unread,b.vch_date," +
                        "(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end) completion_dt," +
                        "b.tsktype_name,b.task_type,b.ref_code, from_user as user_id ,b.priority from taskassign b " +
                        "where b.box_status = '1' and b.cc_ids like '%" + userid_mst + "%' ) tab order by vch_num desc";

                    mq = "select * from (select 'inbox' type,'1' kitne,b.vch_num messageid,b.box_status to_status,b.vch_num,b.User_id recipients_userid," +
    " b.from_user,cast(b.body as varchar(1000)) body, b.subject,b.read_unread,b.vch_date," +
    "(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end) completion_dt," +
    "b.tsktype_name,b.task_type,b.ref_code,b.from_user user_id,b.priority from taskassign b where b.box_status = '1' and " +
    "trim(regexp_substr(B.USER_ID, '[^(]+', 1, 1)) = '" + mq0 + "' " +
    "union " +
    "select 'inbox' type,'1' kitne,b.vch_num messageid,b.box_status to_status,b.vch_num,b.User_id recipients_userid,b.from_user," +
    "cast(b.body as varchar(1000))  body,b.subject,b.read_unread,b.vch_date," +
    "(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end) completion_dt," +
    "b.tsktype_name,b.task_type,b.ref_code, from_user as user_id ,b.priority from taskassign b " +
    "where b.box_status = '1' and b.cc_ids like '%" + userid_mst + "%' ) tab order by vch_num desc";

                    break;
                case "11001.3":
                    model[0].Col29 = "4";
                    model[0].Col9 = "OUTBOX";
                    mq = "select 'sent' as type,'1' as kitne,b.vch_num messageid,b.box_status to_status,b.vch_num,b.User_id recipients_userid," +
                        "b.from_user,b.body,b.subject,b.read_unread,b.vch_date," +
                        "(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end ) completion_dt," +
                        "b.tsktype_name,b.task_type,b.ref_code,b.user_id,b.priority from taskassign b " +
                        "where b.box_status='1'  order by vch_num desc";
                    break;
            }
            DataTable dt = sgen.getdata(userCode, mq);
            if (dt.Rows.Count > 0)
            {
                var tm = model.FirstOrDefault();
                model = new List<Tmodelmain>();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    Tmodelmain tmm = new Tmodelmain();
                    tmm.Col9 = tm.Col9;
                    tmm.Col11 = "and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                    tmm.Col15 = MyGuid;
                    tmm.Col17 = dt.Rows[i]["messageid"].ToString();
                    tmm.Col18 = dt.Rows[i]["vch_num"].ToString();
                    tmm.Col19 = dt.Rows[i]["type"].ToString();
                    tmm.Col20 = dt.Rows[i]["kitne"].ToString();
                    tmm.Col21 = dt.Rows[i]["user_id"].ToString();
                    tmm.Col22 = dt.Rows[i]["subject"].ToString();
                    tmm.Col23 = sgen.ExtractHtmlInnerText(dt.Rows[i]["body"].ToString());
                    tmm.Col24 = dt.Rows[i]["tsktype_name"].ToString();
                    tmm.Col25 = dt.Rows[i]["task_type"].ToString();
                    tmm.Col26 = dt.Rows[i]["vch_date"].ToString();
                    tmm.Col27 = dt.Rows[i]["completion_dt"].ToString();
                    tmm.Col28 = dt.Rows[i]["messageid"].ToString() + "-" + dt.Rows[i]["ref_code"].ToString();
                    tmm.Col29 = tm.Col29;
                    tmm.Col30 = dt.Rows[i]["priority"].ToString();
                    model.Add(tmm);
                }
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult taskinbox(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Read")
            {
                int ctr = 0;
                for (int i = 0; i < model.Count; i++)
                {
                    if (model[i].Chk1 == true)
                    {
                        ctr++;
                        sgen.execute_cmd(userCode, "UPDATE taskassign SET read_unread='1' where rec_id='" + model[i].Col17 + "' and user_id='" + userid_mst + "'");
                    }
                    if (ctr > 0)
                    {
                        ViewBag.scripCall = "ShowmsgJS(1,'Message Has Been Read',1)";
                    }
                }
            }
            else if (command == "Unread")
            {
                int ctr = 0;
                for (int i = 0; i < model.Count; i++)
                {
                    if (model[i].Chk1 == true)
                    {
                        ctr++;
                        sgen.execute_cmd(userCode, "UPDATE taskassign SET read_unread='0' where rec_id='" + model[i].Col17 + "' and user_id='" + userid_mst + "'");
                    }
                }
                //if (ctr > 0)
                //{
                //        ViewBag.scripCall = "ShowmsgJS(1,'Message Has Been Unread',1)";
                //}
            }
            ModelState.Clear();
            return View(model);
        }

        public ActionResult view_task()
        {
            string reval = "";
            //FillMst(m_id_mst);
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "VIEW TASK";
            model[0].Col10 = "taskassign";
            model[0].Col11 = " and client_unit_id='" + unitid_mst + "'";
            //model[0].Col15 = MyGuid;
            ViewBag.scripCall = "enableForm();";
            try { reval = Request.QueryString["reval"].Trim(); }
            catch (Exception er) { }
            Tmodelmain tm1 = new Tmodelmain();
            //mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            string ref_code = "", compose_id = "";
            int clsrtype = 0;
            if (Request.QueryString["fstr"] != null)
            {
                sgen.SetSession(MyGuid, "VIEWFSTR", Request.QueryString["fstr"].ToString());
                string[] ref_com = Request.QueryString["fstr"].ToString().Split('-');
                compose_id = ref_com[0].ToString();

                sgen.execute_cmd(userCode, "update taskassign set read_unread='0' where vch_num='" + compose_id + "'");

                ref_code = ref_com[1].ToString();
                string whoim = "From";
                //DataTable dtnew = sgen.getdata(userCode, "Select * from taskassign where ref_code='" + ref_code + "' and task_type='New'");
                DataTable dtnew = sgen.getdata(userCode, "Select * from taskassign where ref_code='" + ref_code + "'");
                clsrtype = Convert.ToInt32(dtnew.Rows[0]["clsrtype"]);
                //sgen.SetSession(MyGuid, "clsrtype", clsrtype);
                //model[0].Col91 = "display:none";
                //model[0].Col92 = "display:none";
                //model[0].Col93 = "display:none";
                //model[0].Col94 = "display:none";
                foreach (DataRow drm in dtnew.Rows)
                {
                    if (drm["user_id"].ToString().Trim().Split(' ')[0].Replace(" ", "").ToString().Equals(username_mst))
                    {
                        whoim = "To";
                        //btn_clstsk.Visible = true;
                        //model[0].Col91 = "display:block";
                        //reply.Visible = true;
                        //model[0].Col92 = "display:block";
                    }
                    else if (drm["from_user"].ToString().Trim().Split(' ')[0].Replace(" ", "").ToString().Equals(username_mst))
                    {
                        if (clsrtype == 0)
                        {
                            //btn_apprvd.Visible = true;
                            //btn_rjct.Visible = true;
                            //model[0].Col93 = "display:block";
                            //model[0].Col94 = "display:block";
                        }
                        //btn_clstsk.Visible = true;
                        //reply.Visible = true;
                        //model[0].Col91 = "display:block";
                        //model[0].Col92 = "display:block";
                    }
                }
                model[0].Col50 = ref_code;
                model[0].Col51 = clsrtype.ToString();
                DataTable dt1 = new DataTable();
                DataTable dt11 = new DataTable();
                string msql = "select a.*,to_char(convert_tz((a.completion_dt), 'UTC', '" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') cdt from taskassign a where a.vch_num='" + compose_id + "'";
                dt11 = sgen.getdata(userCode, msql);
                //string vchnum = "";
                if (dt11.Rows.Count > 0)
                {
                    model[0].Col16 = dt11.Rows[0]["vch_num"].ToString();
                    model[0].Col17 = dt11.Rows[0]["from_user"].ToString();
                    //model[0].Col17 = MyGuid;
                    model[0].Col18 = dt11.Rows[0]["to_names"].ToString();
                    model[0].Col19 = dt11.Rows[0]["cc_names"].ToString();
                    model[0].Col20 = dt11.Rows[0]["tsktype_name"].ToString();
                    model[0].Col21 = dt11.Rows[0]["subject"].ToString();
                    model[0].Col22 = WebUtility.HtmlDecode(dt11.Rows[0]["body"].ToString()).ToString();
                    //model[0].Col21 = dt11.Rows[0]["task_type"].ToString();
                    //model[0].Col21 = dt11.Rows[0]["subject"].ToString();
                    model[0].Col23 = dt11.Rows[0]["tsktype_id"].ToString();
                    model[0].Col24 = dt11.Rows[0]["priority"].ToString();
                    model[0].Col25 = sgen.padlc(sgen.Make_int(dt11.Rows[0]["clsrtype"].ToString()), 2);
                    model[0].Col27 = dt11.Rows[0]["cdt"].ToString();
                    //lbl_cdt.Text= dt11.Rows[0]["completion_dt"].ToString();                    
                    //Panel1.Visible = false;
                    //lblmsg.Visible = false;
                    //hfto.Value = dt11.Rows[0]["from_user"].ToString();
                    //hfcc.Value = WebUtility.HtmlDecode(lblcc.Text);
                    //string ss = dt11.Rows[0]["subject"].ToString().Trim();
                    //txtsub.Text = dt11.Rows[0]["subject"].ToString();
                    //txtsub.ReadOnly = true;
                    //txt_tsktype.Text = dt11.Rows[0]["tsktype_name"].ToString();
                    //hf_ttid.Value = dt11.Rows[0]["tsktype_id"].ToString();
                    //txt_tsktype.ReadOnly = true;
                    //message.Text = WebUtility.HtmlDecode(dt11.Rows[0]["body"].ToString());
                }
                dt1 = sgen.getdata(userCode, "select attachment,attachment_path,rec_id from mailbox_file where vch_num='" + model[0].Col16 + "' and type='taskfile'");
                if (dt1.Rows.Count > 0)
                {
                    List<Tmodelmain> ltmf = new List<Tmodelmain>();
                    foreach (DataRow drf in dt1.Rows)
                    {
                        Tmodelmain tmf = new Tmodelmain();
                        tmf.Col1 = drf["attachment"].ToString();
                        tmf.Col2 = drf["attachment_path"].ToString();
                        tmf.Col3 = drf["rec_id"].ToString();
                        tmf.Col4 = model[0].Col16;
                        ltmf.Add(tmf);
                    }
                    model[0].LTM1 = ltmf;
                }
            }
            model[0].TList1 = new List<SelectListItem>();
            model[0].TList2 = new List<SelectListItem>();
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            TempData[MyGuid + "_Tlist1"] = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist2"] = new List<SelectListItem>();
            model[0].Col81 = "style=display:none;";

            if (reval.Trim().Equals("1")) ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Reply sent successfully');";

            ModelState.Clear();
            TempData["model"] = model;
            return View(model);
        }
        [ValidateInput(false)]
        [HttpPost]
        public ActionResult view_task(List<Tmodelmain> model, string command)
        {
            //FillMst();
            FillMst(model[0].Col15);
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            string ref_code = model[0].Col50;
            string clsrtype = model[0].Col51;
            var tm = model.FirstOrDefault();
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Reply")
            {
                model[0].Col81 = "style=display:block;";
                //Panel1.Visible = true;
                //message.Focus();
                //DataTable dtusers = sgen.getdata(userCode, mq);
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = cmd_Fun.mailcc(userCode);
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = cmd_Fun.mailcc(userCode);

                string frmname = string.Join(",", model[0].Col18);
                string ccname = string.Join(",", model[0].Col19);

                model[0].SelectedItems1 = new string[] { frmname };
                model[0].SelectedItems2 = new string[] { ccname };
            }
            else if (command == "Approved")
            {
                //model = StartCallback(model);
                string close_by = "-", app_by = userid_mst;
                string tto = model[0].Col18, tcc = model[0].Col19, ncc = "";
                string[] ccarr = tcc.Split(',');
                foreach (string cc in ccarr)
                {
                    if (ncc.Equals("")) ncc = sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + cc.Replace("<", "").Replace(">", "").Trim().Split(' ')[0].ToString() + "'", "id");
                    else ncc = ncc + "," + sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + cc.Replace("<", "").Replace(">", "").Trim().Split(' ')[0].ToString() + "'", "id");
                }
                //mq = sgen.Send_taskmail(userCode, clientid_mst, unitid_mst, tto, tcc, "", "Your work has been approved, <br/> Thanks", model[0].Chk31, userid_mst,
                //    fileCollection, model[0].Col21, model[0].Chk32, 
                //    Convert.ToInt32(clsrtype), close_by, app_by, ref_code, "-", "Approved", ncc, "");
                //if (mq.Trim().Contains("successfully"))
                {
                    sgen.execute_cmd(userCode, "update taskassign set app_by='" + app_by + "' where ref_code='" + ref_code + "'");
                    //hfto.Value = ""; hfcc.Value = "";
                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                }
            }
            else if (command == "Reject")
            {
                string close_by = "-", app_by = userid_mst;
                string tto = model[0].Col18, tcc = model[0].Col19, ncc = "";
                string[] ccarr = tcc.Split(',');
                foreach (string cc in ccarr)
                {
                    if (ncc.Equals("")) ncc = sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + cc.Replace("<", "").Replace(">", "").Trim().Split(' ')[0].ToString() + "'", "id");
                    else ncc = ncc + "," + sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + cc.Replace("<", "").Replace(">", "").Trim().Split(' ')[0].ToString() + "'", "id");
                }
                //mq = sgen.Send_taskmail(userCode, clientid_mst, unitid_mst, tto, tcc, "", "Your work has been rejected, please do correction asap, <br/>Thanks", model[0].Chk31, userid_mst,
                //    fileCollection, model[0].Col21, model[0].Chk32, 
                //    Convert.ToInt32(clsrtype), close_by, app_by, ref_code, "-", "Approved", ncc, "");
                if (mq.Trim().Contains("successfully"))
                {
                    sgen.execute_cmd(userCode, "update taskassign set remark='" + "" + "',close_by='" + close_by + "',app_by='" + app_by + "' where ref_code='" + ref_code + "'");
                    //sgen.fillblank(this);
                    //hfto.Value = ""; hfcc.Value = "";
                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                }
            }
            else if (command == "Close Task")
            {
                //td_remark.Visible = true;
                //btn_remark.Focus();
            }
            else if (command == "Send")
            {
                string clsby = "-", ncc = "", tto = "", tcc = "", cdt = "";
                try
                {
                    //if (!role_mst.Trim().ToUpper().Equals("OWNER")) { if (model[0].Col25 == "02") { clsby = userid_mst; } }
                    //else { clsby = userid_mst; }                    
                    tto = model[0].SelectedItems1.FirstOrDefault();
                    tcc = string.Join(",", model[0].SelectedItems2);
                    //if ((model[0].Col18 != "") && (model[0].Col18 != "0") && (model[0].Col18 != null))
                    //{
                    //    DateTime dt = DateTime.Parse(model[0].Col18);
                    //    cdt = dt.ToString("yyyy-MM-dd HH:mm:ss");
                    //}
                    cdt = sgen.Make_date_S(model[0].Col27, "yyyy-MM-dd HH:mm:ss");
                    string[] tomail = string.Join(",", model[0].SelectedItems1).Split(',');
                    string[] ccmail = string.Join(",", model[0].SelectedItems2).Split(',');
                    if (ccmail.Length > 0)
                    {
                        for (int i = 0; i < ccmail.Length; i++)
                        {
                            if (ncc.Equals("")) ncc = sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + ccmail[i].Split(' ')[0] + "'", "id");
                            else ncc = ncc + "," + sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + ccmail[i].Split(' ')[0] + "'", "id");
                        }
                        IList<HttpPostedFileBase> fileCollection = new List<HttpPostedFileBase>();
                        //fileCollection.Add(upd1);
                        if (model[0].Col26 == null) model[0].Col26 = "-";
                        mq = sgen.Send_taskmail(userCode, clientid_mst, unitid_mst, tto, tcc, "", model[0].Col33, model[0].Col21, userid_mst, fileCollection,
                            model[0].Col23, model[0].Col20, sgen.Make_int(model[0].Col25), clsby, "-", model[0].Col25, model[0].Col26, "Re", ncc, cdt, model[0].Col24);
                        if (mq.Trim().Contains("successfully"))
                        {
                            mq = sgen.GetSession(MyGuid, "VIEWFSTR").ToString();
                            model = new List<Tmodelmain>();
                            model.Add(new Tmodelmain()
                            {
                                Col9 = tm.Col9,
                                Col10 = tm.Col10,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col13 = "Save",
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                TList1 = mod1,
                                TList2 = mod2,
                                SelectedItems1 = new string[] { "" },
                                SelectedItems2 = new string[] { "" }
                            });
                            //ViewBag.scripCall = "showmsgJS(1,'Task Send SuccessFully',1)";                            
                            return RedirectToAction(actionName, new { @m_id = EncryptDecrypt.Encrypt(model[0].Col15), @fstr = mq, @reval = "1" });
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }

                //string close_by = "-", app_by = userid_mst;
                //string tto = model[0].Col18, tcc = model[0].Col19, ncc = "", Email_id = "", emailidcc = "", xtitle = "";
                //string[] ccarr = tcc.Split(',');
                //#region SEND MAIL
                //string mailfrom = "";
                //DataTable datatable = new DataTable();
                //datatable = sgen.getdata(userCode, "select com_email from company_profile where Company_Profile_Id='" + clientid_mst + "' and type='CP'");
                //if (datatable.Rows.Count > 0)
                //{
                //    mailfrom = Convert.ToString(datatable.Rows[0]["com_email"].ToString());
                //}
                //string mailcc = string.Join(",", model[0].SelectedItems2);
                //mailcc = mailcc.Replace("'", "");
                //string[] itar = mailcc.Trim().Split(',');
                //Mailer mailer = new Mailer(userCode, clientid_mst, unitid_mst);
                //var body = new StringBuilder();
                //if (itar.Length > 0)
                //{
                //    for (Int32 y = 0; y < itar.Length; y++)
                //    {
                //        string[] Emialar = itar[y].Replace("(", "").Replace(")", "").Trim().Split(' ');
                //        if (sgen.ValidateEmail(Emialar[1].ToString()))
                //        {
                //            if (emailidcc.Equals("")) emailidcc = Emialar[1].ToString();
                //            else
                //            {
                //                emailidcc = emailidcc + "," + Emialar[1].ToString();
                //            }
                //        }
                //    }
                //    Email_id = emailidcc;
                //    xtitle = "";
                //    xtitle = "Dear Sir/Madam,You Have Mail From Task Management";
                //    body.AppendLine(@"<b style='color:#3caee9; font-size: 20px'>" + model[0].Col21 + " </b><br /><hr style='border:1px solid black' />" +
                //    "<p>Hi <b>" + xtitle + " : </b>,</p><table style='font-weight:600'>");
                //    body.AppendLine(@"</table><br /><p>" + model[0].Col33 + "</p><br />" + model[0].Col20 + ",<br />ThankYou<br />");
                //    sgen.Send_mail_SA1(userCode, clientid_mst, unitid_mst, mailfrom, emailidcc, Email_id, body.ToString(), model[0].Col21, "");
                //    mailer.Add_Mail(Email_id, model[0].Col21, body.ToString());
                //    mailer.Send_Email_Bulk();
                //}
                //#endregion
                //if (mq.Trim().Contains("successfully"))
                //{
                //    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Mail Sent Successfully');disableForm();";
                //}
            }
            else if (command == "Close")
            {
                //model = StartCallback(model);
                string close_by = userid_mst, app_by = userid_mst;
                string tto = model[0].Col18, tcc = model[0].Col19, ncc = "";
                string[] ccarr = tcc.Split(',');
                foreach (string cc in ccarr)
                {
                    if (ncc.Equals("")) ncc = sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + cc.Replace("<", "").Replace(">", "").Trim().Split(' ')[0].ToString() + "'", "id");
                    else ncc = ncc + "," + sgen.seekval(userCode, "select vch_num as id FROM user_details WHERE USER_ID='" + cc.Replace("<", "").Replace(">", "").Trim().Split(' ')[0].ToString() + "'", "id");
                }
                if (Convert.ToInt32(clsrtype) == 0)
                {
                    close_by = userid_mst;
                    app_by = "-";
                }
                //mq = sgen.Send_taskmail(userCode, clientid_mst, unitid_mst, tto, tcc, "", "Your work has been rejected, please do correction asap, <br/>Thanks", model[0].Chk31, userid_mst,
                //    fileCollection, model[0].Col21, model[0].Chk32, 
                //    Convert.ToInt32(clsrtype), close_by, app_by, ref_code, "-", "Approved", ncc, "");
                //if (mq.Trim().Contains("successfully"))
                {
                    sgen.execute_cmd(userCode, "update taskassign set remark='" + model[0].Col26 + "',close_by='" + close_by + "',app_by='" + app_by + "' where ref_code='" + ref_code + "'");
                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                }
            }
            ModelState.Clear();
            return View(model);
        }

        [HttpGet]
        public FileResult fdowntsk(string value, string myguid)
        {
            FillMst(myguid);
            if (!value.Trim().Equals(""))
            {
                DataTable dt2 = new DataTable();
                mq = "select attachment,attachment_path from mailbox_file where (rec_id||vch_num||type)='" + value.Trim() + "' and client_unit_id='" + unitid_mst + "'";
                dt2 = sgen.getdata(userCode, mq);
                if (dt2.Rows.Count > 0)
                {
                    path1 = Convert.ToString(dt2.Rows[0]["attachment_path"]);
                    fileName1 = Convert.ToString(dt2.Rows[0]["attachment"]);
                }
            }
            byte[] fileBytes = System.IO.File.ReadAllBytes(Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/" + path1));
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fileName1);
        }

        #endregion
        #region taskinboxn
        public ActionResult taskinboxn()
        {
            FillMst();
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            DataTable dtn = new DataTable();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col11 = "and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col14 = mid_mst;
            tm1.Col15 = m_id_mst;

            DataTable dt0 = new DataTable();
            dt0 = sgen.getdata(userCode, "select user_id, nvl(email,'-') email,(user_id||' <'||nvl(email,'-')||'>') as u_id from user_details where vch_num='" + userid_mst + "'");
            if (dt0.Rows.Count > 0)
            {
                if (sgen.ValidateEmail(dt0.Rows[0]["email"].ToString().Trim()))
                {
                    mq0 = dt0.Rows[0]["user_id"].ToString().Trim();
                }
                else
                {
                    cond = " and b.user_id='" + dt0.Rows[0]["u_id"].ToString().Trim() + "'";
                    mq0 = dt0.Rows[0]["user_id"].ToString().Trim();
                }
            }
            switch (mid_mst)
            {
                case "11001.2":
                    tm1.Col29 = "1";
                    tm1.Col9 = "TASK INBOX";
                    //                mq = "select * from (select 'inbox' type,'1' kitne,b.vch_num messageid,b.box_status to_status,b.vch_num,b.User_id recipients_userid," +
                    //" b.from_user,cast(b.body as varchar(1000)) body, b.subject,b.read_unread,b.vch_date," +
                    //"(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end) completion_dt," +
                    //"b.tsktype_name,b.task_type,b.ref_code,b.from_user user_id,b.priority from taskassign b where b.box_status = '1' and " +
                    //"trim(regexp_substr(B.USER_ID, '[^(]+', 1, 1)) = '" + mq0 + "' " +
                    //"union " +
                    //"select 'inbox' type,'1' kitne,b.vch_num messageid,b.box_status to_status,b.vch_num,b.User_id recipients_userid,b.from_user," +
                    //"cast(b.body as varchar(1000))  body,b.subject,b.read_unread,b.vch_date," +
                    //"(case when to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end) completion_dt," +
                    //"b.tsktype_name,b.task_type,b.ref_code, from_user as user_id ,b.priority from taskassign b " +
                    //"where b.box_status = '1' and b.cc_ids like '%" + userid_mst + "%' ) tab order by vch_num desc";

                    mq = "select chk,sender_id,subject,message,task_name,vch_date,completion_dt,priority,task_type from " +
                        "(select * from (select (b.vch_num||'!~!~!~!~!'||'inbox'||'!~!~!~!~!'||'1'||'!~!~!~!~!'||b.ref_code||'!~!~!~!~!'||b.read_unread) chk,b.vch_num,b.from_user sender_id," +
                        "b.subject,cast(b.body as varchar(1000)) message,b.tsktype_name task_name,b.vch_date,(case when to_char(b.completion_dt," +
                        " '" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' when to_char(b.completion_dt," +
                        " '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end) completion_dt," +
                        "b.priority,b.task_type,to_char(b.indel) indel from taskassign b " +
                        "where b.box_status = '1' and trim(regexp_substr(B.USER_ID, '[^(]+', 1, 1)) = '" + mq0 + "' and find_in_set(to_char(b.indel),'" + userid_mst + "')=0 " +
                        "union " +
                        "select (b.vch_num||'!~!~!~!~!'||'inbox'||'!~!~!~!~!'||'1'||'!~!~!~!~!'||b.ref_code||'!~!~!~!~!'||b.read_unread) chk,b.vch_num,b.from_user sender_id," +
                        "b.subject,cast(b.body as varchar(1000)) message,b.tsktype_name task_name,b.vch_date,(case when to_char(b.completion_dt," +
                        "'" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' when to_char(b.completion_dt," +
                        " '" + sgen.Getsqldateformat() + "') = '01/01/1900' then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end) completion_dt," +
                        "b.priority,b.task_type,to_char(b.indel) indel from taskassign b " +
                        "where b.box_status = '1' and b.cc_ids like '%" + userid_mst + "%' and find_in_set(to_char(b.indel),'" + userid_mst + "')=0) tab order by vch_num desc) a";
                    break;

                case "11001.3":
                    tm1.Col29 = "4";
                    tm1.Col9 = "TASK OUTBOX";
                    mq = "select chk,sender_id,subject,message,task_name,vch_date,completion_dt,priority,task_type from " +
                        "(select (b.vch_num||'!~!~!~!~!'||'sent'||'!~!~!~!~!'||'1'||'!~!~!~!~!'||b.ref_code||'!~!~!~!~!'||b.read_unread) chk,b.vch_num,b.user_id sender_id," +
                        "b.subject,b.body message,b.tsktype_name task_name,b.vch_date,(case when to_char(b.completion_dt," +
                        "'" + sgen.Getsqldateformat() + "') = to_char(b.vch_date, '" + sgen.Getsqldateformat() + "') then '-' when to_char(b.completion_dt," +
                        "'" + sgen.Getsqldateformat() + "') = '01/01/1900' then '-' else to_char(b.completion_dt, '" + sgen.Getsqldateformat() + "') end ) completion_dt," +
                        "b.priority,b.task_type,to_char(b.outdel) outdel from taskassign b " +
                        "where b.box_status='1' and find_in_set(to_char(b.outdel),'" + userid_mst + "')=0 order by b.vch_num desc) a";
                    break;
            }
            sgen.SetSession(MyGuid, "gridq_demogrid", mq);
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult taskinboxn(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command == "Read")
            {
                int ctr = 0;
                for (int i = 0; i < model.Count; i++)
                {
                    if (model[i].Chk1 == true)
                    {
                        ctr++;
                        sgen.execute_cmd(userCode, "UPDATE taskassign SET read_unread='1' where rec_id='" + model[i].Col17 + "' and user_id='" + userid_mst + "'");
                    }
                    if (ctr > 0)
                    {
                        ViewBag.scripCall = "ShowmsgJS(1,'Message Has Been Read',1)";
                    }
                }
            }
            else if (command == "Unread")
            {
                int ctr = 0;
                for (int i = 0; i < model.Count; i++)
                {
                    if (model[i].Chk1 == true)
                    {
                        ctr++;
                        sgen.execute_cmd(userCode, "UPDATE taskassign SET read_unread='0' where rec_id='" + model[i].Col17 + "' and user_id='" + userid_mst + "'");
                    }
                }
            }
            ModelState.Clear();
            return View(model);
        }

        [HttpPost]
        public ContentResult updtask(string fstr, string val)
        {
            try
            {
                FillMst();
                if (fstr.Trim() != "")
                {
                    var len = fstr.TrimEnd(',').Trim().Split(',').Length;
                    for (int i = 0; i < len; i++)
                    {
                        res = sgen.execute_cmd(userCode, "UPDATE taskassign SET read_unread='" + val + "' where vch_num='" + fstr.TrimEnd(',').Trim().Split(',')[i].Trim() + "'");
                    }
                    if (!res) { return Content("N"); }
                    else return Content("Y");
                }
                else { return Content("N"); }
            }
            catch (Exception err) { return Content("N"); }
        }

        [HttpPost]
        public ContentResult deltask(string fstr, string val)
        {
            try
            {
                mq = "";
                mq1 = "";
                mq0 = "";
                if (val != "")
                {
                    mq0 = val.Split(new string[] { "!#!#!#!" }, StringSplitOptions.None)[1].Trim();
                    mq1 = val.Split(new string[] { "!#!#!#!" }, StringSplitOptions.None)[0].Trim();
                }
                FillMst(mq0);
                if (fstr.Trim() != "")
                {
                    var len = fstr.TrimEnd(',').Trim().Split(',').Length;
                    for (int i = 0; i < len; i++)
                    {
                        if (mq1 == "11001.2")
                        {
                            mq = sgen.seekval(userCode, "select indel from taskassign where vch_num='" + fstr.TrimEnd(',').Trim().Split(',')[i].Trim() + "'", "indel");
                            mq = "indel='" + mq + "," + userid_mst + "'";
                        }
                        else if (mq1 == "11001.3")
                        {
                            mq = sgen.seekval(userCode, "select outdel from taskassign where vch_num='" + fstr.TrimEnd(',').Trim().Split(',')[i].Trim() + "'", "outdel");
                            mq = "outdel='" + mq + "," + userid_mst + "'";
                        }
                        res = sgen.execute_cmd(userCode, "UPDATE taskassign SET " + mq + " where vch_num='" + fstr.TrimEnd(',').Trim().Split(',')[i].Trim() + "'");
                    }
                    if (!res) { return Content("N"); }
                    else return Content("Y");
                }
                else { return Content("N"); }
            }
            catch (Exception err) { return Content("N"); }
        }
        #endregion
        #region taskreport
        public ActionResult taskreport()
        {
            FillMst();
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            DataTable dtn = new DataTable();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col11 = "and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col14 = mid_mst;
            tm1.Col15 = m_id_mst;
            tm1.Col9 = "TASK REPORT";

            mq = "select seq_group sno,fromuser,touser,ccuser,message,subject,task_name,task_type,vch_date,status from (select t.*,row_number() " +
                "over (partition by t.fromuser order by t.vch_num) seq_group from (select vch_num,from_user fromuser,to_names touser," +
                "cc_names ccuser,body message,subject,tsktype_name task_name,task_type,vch_date,(CASE WHEN close_by <> '-' AND app_by <> '-' THEN 'Closed' " +
                "WHEN close_by <> '-' THEN 'Close Requested' else 'Open' end) status from taskassign where task_type = 'New' and close_by='-' and app_by='-') t) a";

            mq0 = "select seq_group sno,fromuser,touser,ccuser,message,subject,task_name,task_type,vch_date,status from (select t.*,row_number() " +
    "over (partition by t.fromuser order by t.vch_num) seq_group from (select vch_num,from_user fromuser,to_names touser," +
    "cc_names ccuser,body message,subject,tsktype_name task_name,task_type,vch_date,(CASE WHEN close_by <> '-' AND app_by <> '-' THEN 'Closed' " +
    "WHEN close_by <> '-' THEN 'Close Requested' else 'Open' end) status from taskassign where task_type = 'New' and close_by<>'-' and app_by<>'-') t) a";

            sgen.SetSession(MyGuid, "gridq_demogrid", mq);
            sgen.SetSession(MyGuid, "gridq_grd2", mq0);
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult taskreport(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region separation
        public ActionResult sprn()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "SEPARATION";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "SPR";
            model[0].TList1 = model[0].TList2 = model[0].TList3 = model[0].TList4 = model[0].TList5 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            DataTable dt = sgen.getdata(userCode, "select '' Select_,'1' as  SNo ,'-' as Name,'-' as No_Of_Months_Probation,'-' No_Of_Months_confirm from dual");
            model[0].dt1 = dt;
            sgen.SetSession(MyGuid, "BSPRNDT", dt.Copy());
            return View(model);
        }
        [HttpPost]
        public ActionResult sprn(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            type_desc = "Separation";
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod1.Add(new SelectListItem { Text = "YES", Value = "YES" });
                    mod1.Add(new SelectListItem { Text = "NO", Value = "NO" });
                    mod2.Add(new SelectListItem { Text = "YES", Value = "YES" });
                    mod2.Add(new SelectListItem { Text = "NO", Value = "NO" });
                    mod3.Add(new SelectListItem { Text = "Department", Value = "DPT" });
                    mod3.Add(new SelectListItem { Text = "Designation", Value = "DSG" });
                    mod4.Add(new SelectListItem { Text = "Years", Value = "Years" });
                    mod4.Add(new SelectListItem { Text = "Months", Value = "Months" });
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = cmd_Fun.leavereas(userCode, unitid_mst);
                    model[0].SelectedItems1 = new string[] { "" };
                    model[0].SelectedItems2 = new string[] { "" };
                    model[0].SelectedItems3 = new string[] { "" };
                    model[0].SelectedItems4 = new string[] { "" };
                    model[0].SelectedItems5 = new string[] { "" };
                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int k = 0; k < model[0].dt1.Rows.Count; k++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["vch_num"] = vch_num;
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["type_desc"] = type_desc;
                        dr["col2"] = string.Join(",", model[0].SelectedItems5);
                        dr["col17"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["col18"] = model[0].SelectedItems2.FirstOrDefault();
                        dr["col19"] = model[0].SelectedItems3.FirstOrDefault();
                        dr["col20"] = model[0].SelectedItems4.FirstOrDefault();
                        dr["COL5"] = model[0].dt1.Rows[k]["Select_"].ToString(); //code
                        dr["COL6"] = model[0].dt1.Rows[k]["Name"].ToString();
                        dr["COL7"] = model[0].dt1.Rows[k][3].ToString();
                        dr["COL8"] = model[0].dt1.Rows[k][4].ToString();
                        dr["COL9"] = model[0].Col17;
                        dr["COL10"] = model[0].Col18;
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            TList4 = mod4,
                            TList5 = mod5,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },
                            dt1 = ((DataTable)sgen.GetSession(MyGuid, "BSPRNDT")).Copy()
                        });
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "BSPRNDT"); }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region workflow
        public ActionResult w_flow()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model[0].Col9 = "WORK FLOW";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "WFL";
            model[0].LTM2 = new List<Tmodelmain>();
            Tmodelmain tmltm2 = new Tmodelmain();
            tmltm2.TList1 = mod1;
            tmltm2.TList2 = mod2;
            tmltm2.SelectedItems1 = new string[] { "" };
            tmltm2.SelectedItems2 = new string[] { "" };
            tmltm2.Col1 = "1";
            model[0].LTM2.Add(tmltm2);
            //if (model[0].Col14 == "400011.7")
            //{
            //    sgen.SetSession(MyGuid, "SSEEKVAL", "000005");
            //    CallbackFun("EDIT", "N", "w_flow", "Vastu", model);
            //    ViewBag.scripCall = "enableForm();";
            //    ViewBag.vsave = "";
            //}
            return View(model);
        }
        [HttpPost]
        public ActionResult w_flow(List<Tmodelmain> model, string command, string hfrow)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            foreach (var mod in model[0].LTM2)
            {
                TempData[MyGuid + "_Tlist1"] = mod.TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = mod.TList2 = mod2;
                if (mod.SelectedItems1 == null) mod.SelectedItems1 = new string[] { "" };
                if (mod.SelectedItems2 == null) mod.SelectedItems2 = new string[] { "" };
            }
            type_desc = "work flow";

            if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int k = 0; k < model[0].LTM2.Count; k++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["vch_num"] = vch_num;
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["type_desc"] = type_desc;
                        dr["col5"] = model[0].Col17;
                        dr["col6"] = model[0].Col18;

                        //if (k == 0)
                        //{
                        //    dr["COL7"] = "999997";
                        //}
                        //else if (k == 1)
                        //{
                        //    dr["COL7"] = "999998";
                        //}
                        //else
                        //{
                        dr["COL7"] = model[0].LTM2[k].SelectedItems1.FirstOrDefault(); //role
                        //}


                        dr["col12"] = (model[0].LTM2[k].Chk1 == true) ? "Y" : "N"; //imtiation
                        dr["COL8"] = model[0].LTM2[k].Col17;//tat

                        if (model[0].Col14 == " 33002.1")
                        {
                            dr["COL9"] = model[0].LTM2[k].SelectedItems2.FirstOrDefault();//others
                        }
                        else
                        {
                            dr["COL9"] = model[0].Col21;//ticket type
                        }
                        dr["COL10"] = model[0].Col19;// work flow for
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                        });
                        model[0].LTM2 = new List<Tmodelmain>();
                        Tmodelmain tmltm2 = new Tmodelmain();
                        tmltm2.TList1 = mod1;
                        tmltm2.TList2 = mod2;
                        tmltm2.SelectedItems1 = new string[] { "" };
                        tmltm2.SelectedItems2 = new string[] { "" };
                        tmltm2.Col1 = "1";
                        model[0].LTM2.Add(tmltm2);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Add")
            {
                try
                {
                    Tmodelmain ntm1 = new Tmodelmain();
                    ntm1.Col1 = (Convert.ToInt32(model[0].LTM2.Max(x => sgen.Make_int(x.Col1))) + 1).ToString();
                    foreach (var mod in model[0].LTM2)
                    {
                        ntm1.TList1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                        ntm1.TList2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                        TempData[MyGuid + "_Tlist1"] = ntm1.TList1;
                        TempData[MyGuid + "_Tlist2"] = ntm1.TList2;

                    }


                    ntm1.SelectedItems1 = new string[] { "" };
                    ntm1.SelectedItems2 = new string[] { "" };
                    model[0].LTM2.Add(ntm1);
                    model[0].Col13 = "Update";
                    model[0].Col100 = "Update & New";
                    model[0].Col121 = "U";
                    model[0].Col122 = "<u>U</u>pdate";
                    model[0].Col123 = "Update & Ne<u>w</u>";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";

                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);"; }
            }
            else if (command == "Remove")
            {
                //if (model[0].LTM2.Count > 1) model[0].LTM2.RemoveAt(sgen.Make_int(hfrow));
                if ((model[0].LTM2.Count > 1) && sgen.Make_int(hfrow) > 1) model[0].LTM2.RemoveAt(sgen.Make_int(hfrow));
                else
                {

                    ViewBag.scripCall = "showmsgJS(1,'You cannot remove last entry',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    return View(model);
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
                model[0].Col13 = "Update";
                model[0].Col100 = "Update & New";
                model[0].Col121 = "U";
                model[0].Col122 = "<u>U</u>pdate";
                model[0].Col123 = "Update & Ne<u>w</u>";
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region confirmation
        public ActionResult wf_confirm()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "CONFIRMATION";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "WCM";
            model[0].TList1 = model[0].TList2 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            DataTable dt = sgen.getdata(userCode, "select '' Select_,'1' as  SNo ,'-' as Name,'-' as Probation_Period_Months,'-' Probation_Ext_Upto_in_Months,'-'  No_of_Times_Ext_Allowed from dual");
            model[0].dt1 = dt;
            sgen.SetSession(MyGuid, "BWFDT", dt.Copy());
            return View(model);
        }
        [HttpPost]
        public ActionResult wf_confirm(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            type_desc = "confirmarion";
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod1.Add(new SelectListItem { Text = "Department", Value = "DPT" });
                    mod1.Add(new SelectListItem { Text = "Designation", Value = "DSG" });
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    mod2.Add(new SelectListItem { Text = "Years", Value = "Years" });
                    mod2.Add(new SelectListItem { Text = "Months", Value = "Months" });
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    model[0].SelectedItems1 = new string[] { "" };
                    model[0].SelectedItems2 = new string[] { "" };
                }
                catch (Exception ex) { }
            }
            else if (command == "PROBATION TYPE")
            {
                try
                {
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1;
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2;
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    DataTable dt = sgen.getdata(userCode, "select '' Select_,'1' as  SNo ,'-' as Name,'-' as Probation_Period_" + model[0].SelectedItems2.FirstOrDefault() + ",'-' Probation_Ext_Upto_in_" + model[0].SelectedItems2.FirstOrDefault() + ",'-'  No_of_Times_Ext_Allowed from dual");
                    model[0].dt1 = dt;
                    sgen.SetSession(MyGuid, "BWFDT", dt.Copy());
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int k = 0; k < model[0].dt1.Rows.Count; k++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["vch_num"] = vch_num;
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["type_desc"] = type_desc;
                        dr["col5"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["col6"] = model[0].SelectedItems2.FirstOrDefault();
                        dr["COL7"] = model[0].dt1.Rows[k]["Select_"].ToString(); // code
                        dr["COL8"] = model[0].dt1.Rows[k]["Name"].ToString();
                        dr["COL9"] = model[0].dt1.Rows[k][3].ToString();
                        dr["COL10"] = model[0].dt1.Rows[k][4].ToString();
                        dr["COL11"] = model[0].dt1.Rows[k][5].ToString();
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            TList2 = mod2,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            dt1 = ((DataTable)sgen.GetSession(MyGuid, "BWFDT")).Copy()
                        });
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "-")
            {
                if (model[0].dt1.Rows.Count > 1) model[0].dt1.Rows.RemoveAt(sgen.Make_int(hfrow));
                else { model[0].dt1 = (DataTable)sgen.GetSession(MyGuid, "BWFDT"); }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region od slip
        public ActionResult od_slip()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "OD SLIP";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "OSL";
            model[0].TList1 = model[0].TList2 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            if (model[0].Col14 == "8006.3")
            { model[0].Col34 = "Pending"; }
            else { model[0].Col34 = "Approved"; }
            return View(model);
        }
        public List<Tmodelmain> new_od_slip(List<Tmodelmain> model)
        {
            model = getnew(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.separation_reason(userCode, unitid_mst);
            model[0].SelectedItems1 = new string[] { "" };

            model[0].Col17 = sgen.server_datetime_local(userCode);
            if (model[0].Col14 == "8006.3")
            {
                string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                      "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                mq = "select  	emp.rptto,(e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) emprpto,d.master_name dept,g.master_name desig," +
                    "(emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.vch_num,emp.emp_code as Emp_Code," +
                    "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                    "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                    "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.dob, 'yyyy'))) as years," +
                                   "trunc(months_between(utc_timestamp(),emp.dob)) as months,floor(utc_timestamp() - add_months(emp.dob,trunc(months_between(utc_timestamp(),emp.dob)))) days " +
                    " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                    "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                    "left join emp_master e  on emp.rptto = e.vch_num and e.client_unit_id = '" + unitid_mst + "' and e.type = 'EMP'" +
                              " left join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id) = 1" +
                              " left join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG'" +
                              " WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "'";
                DataTable dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {

                    model[0].Col26 = dt.Rows[0]["vch_num"].ToString();
                    model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                    model[0].Col19 = dt.Rows[0]["department"].ToString();
                    model[0].Col20 = dt.Rows[0]["designation"].ToString();

                    model[0].Col29 = dt.Rows[0]["emprpto"].ToString();
                    model[0].Col32 = dt.Rows[0]["rptto"].ToString();
                    model[0].Col30 = dt.Rows[0]["dept"].ToString();
                    model[0].Col31 = dt.Rows[0]["desig"].ToString();
                }
            }
            return model;
        }
        [HttpPost]
        public ActionResult od_slip(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            type_desc = "od slip";
            if (command == "New")
            {
                try
                {
                    model = new_od_slip(model);
                }
                catch (Exception ex) { }
            }

            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            else if (command.Trim() == "Save" || command.Trim() == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["vch_num"] = vch_num;
                    dr["type"] = model[0].Col12;
                    dr["vch_date"] = sgen.Make_date_S(model[0].Col17);
                    dr["col5"] = model[0].Col21;//Shift Start Time
                    dr["col6"] = model[0].Col22;//Shift End Time
                    dr["col7"] = model[0].Col25;//app by
                    dr["col8"] = model[0].Col26;//empid
                    dr["col4"] = model[0].Col27;//remark
                    dr["date1"] = sgen.Savedate(model[0].Col23, true);//from
                    dr["date2"] = sgen.Savedate(model[0].Col24, true);//to                  
                    //dr["col10"] = "Pending";
                    dr["col10"] = model[0].Col34;
                    dr["col9"] = model[0].SelectedItems1.FirstOrDefault();//reason
                    dr = getsave(currdate, dr, model);
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col34 = tm.Col34,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_od_slip(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region separation
        public ActionResult separt()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "SEPARATION";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "SPT";
            model[0].TList1 = model[0].TList2 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            if (model[0].Col14 == "8006.4") { model[0].Col36 = "Pending"; }
            else { model[0].Col36 = "Approved"; }
            return View(model);
        }
        public List<Tmodelmain> new_separt(List<Tmodelmain> model)
        {
            var tm = model.FirstOrDefault();
            model = getnew(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.separation_reason(userCode, unitid_mst);
            model[0].SelectedItems1 = new string[] { "" };

            model[0].Col17 = sgen.server_datetime_local(userCode);

            if (model[0].Col14 == "8006.4")
            {
                string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                      "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                mq = "select emp.notemp, (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.vch_num,emp.emp_code as Emp_Code," +
                   "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                   "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                   "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,trunc(months_between(sysdate,emp.st_dt) / 12) as years," +
                   "  trunc(months_between(sysdate, emp.st_dt) -  (trunc(months_between(sysdate, emp.st_dt) / 12) * 12)) as months, trunc(sysdate) - add_months(emp.st_dt, trunc(months_between(sysdate, emp.st_dt))) as days " +
                   " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                   "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                   " WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "'";
                DataTable dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {




                    mq = "select ug.vch_num as doc_no,ug.col5 as asset_serial,ug.col6 as asset_name,ug.col8 as expected_value,to_char(ug.date1, '" + sgen.Getsqldateformat() + "') " +
                        "as expected_return_date  from enx_tab2 ug  where ug.client_unit_id = '" + unitid_mst + "' " +
                        "and ug.type = 'AAE' and  to_date(to_char(ug.vch_DATE, 'ddMMyyyy'), 'ddMMyyyy') " +
                        "between to_date('" + year_from + "','dd/MM/YYYY HH24:MI:SS')   and to_date('" + year_to + "','dd/MM/YYYY HH24:MI:SS')" +
                        "  and ug.col2 in (select emp_code from emp_master where vch_num = (select emp_id from " +
                        "user_details where type = 'CPR' and vch_num = '" + userid_mst + "') and type = 'EMP' and" +
                        " client_unit_id = '" + unitid_mst + "')";

                    DataTable dtt = new DataTable();
                    dtt = sgen.getdata(userCode, mq);
                    tm = model.FirstOrDefault();
                    if (dtt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        dtt = new DataTable();
                        dtt = sgen.getdata(userCode, mq);
                        tm = model.FirstOrDefault();
                        if (dtt.Rows.Count > 0)
                        {
                            model = new List<Tmodelmain>();

                            foreach (DataRow dr in dtt.Rows)
                            {

                                model.Add(new Tmodelmain
                                {
                                    Col9 = tm.Col9,
                                    Col11 = tm.Col11,
                                    Col12 = tm.Col12,
                                    Col10 = tm.Col10,
                                    Col13 = tm.Col13,
                                    Col14 = tm.Col14,
                                    Col15 = tm.Col15,
                                    Col16 = tm.Col16,
                                    Col17 = tm.Col17,
                                    Col100 = tm.Col100,
                                    Col121 = tm.Col121,
                                    Col122 = tm.Col122,
                                    Col123 = tm.Col123,
                                    Col31 = dr["doc_no"].ToString(),
                                    Col32 = dr["asset_serial"].ToString(),
                                    Col33 = dr["asset_name"].ToString(),
                                    Col34 = dr["expected_value"].ToString(),
                                    Col35 = dr["expected_return_date"].ToString(),
                                    TList1 = tm.TList1,
                                    SelectedItems1 = tm.SelectedItems1,


                                });
                            }




                        }


                    }

                    model[0].Col19 = dt.Rows[0]["vch_num"].ToString();
                    model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                    model[0].Col20 = dt.Rows[0]["department"].ToString();
                    model[0].Col21 = dt.Rows[0]["designation"].ToString();
                    model[0].Col30 = dt.Rows[0]["Date_Of_Joining"].ToString();
                    model[0].Col22 = dt.Rows[0]["notemp"].ToString();
                    model[0].Col27 = dt.Rows[0]["years"].ToString() + " Years" + dt.Rows[0]["months"].ToString() + " Months " + dt.Rows[0]["days"].ToString() + " Days";

                }


            }
            return model;
        }
        [HttpPost]
        public ActionResult separt(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dtm = sgen.settable(hftable);
            model[0].dt1 = dtm;
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };



            if (command == "New")
            {
                try
                {
                    model = new_separt(model);
                }
                catch (Exception ex) { }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }

            else if (command.Trim() == "Save" || command.Trim() == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());

                    DataRow dr = dataTable.NewRow();
                    dr["vch_num"] = vch_num;
                    dr["type"] = model[0].Col12;
                    dr["vch_date"] = sgen.Make_date_S(model[0].Col17);
                    dr["date1"] = sgen.Make_date_S(model[0].Col22);//notice date
                    dr["date2"] = sgen.Make_date_S(model[0].Col23);// Last Working Date date
                    dr["date3"] = sgen.Make_date_S(model[0].Col24);// Purposed Last Working Date                    
                    dr["col8"] = model[0].Col19;//empid
                    dr["col4"] = model[0].Col25;//remark                 
                    dr["col5"] = model[0].Col28;//Notice Period Served Days                 

                    //dr["col10"] = "Pending";
                    dr["col10"] = model[0].Col36;
                    dr["col9"] = model[0].SelectedItems1.FirstOrDefault();//reason

                    dr = getsave(currdate, dr, model);
                    dataTable.Rows.Add(dr);

                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        //ViewBag.vnew = "";
                        //ViewBag.vedit = "";
                        //ViewBag.vsave = "disabled='disabled'";
                        //ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col34 = tm.Col34,

                            TList1 = mod1,

                            SelectedItems1 = new string[] { "" },


                        });

                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall = "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_separt(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }


            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region od approval
        public ActionResult od_apr()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "OD SLIP APPROVAL";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "OSL";
            model[0].Col17 = "P";
            model[0].TList1 = model[0].TList2 = mod1;
            model[0].SelectedItems1 = new string[] { "" };

            if (!role_mst.ToUpper().Equals("OWNER"))
            {
                mq = "select col8 tat, col9 other_user, Col7,Col12,(case when col7>900000 then 'RF' else 'RM' end) w_type from enx_tab2" +
                    " where type='WFL' and client_unit_id='" + unitid_mst + "' and col5='od approval' " +
                    " order by rec_id ";
                DataTable dtw = sgen.getdata(userCode, mq);
                string repto = "", func = "", oth = "";
                if (dtw.Rows.Count > 0)
                {
                    string emp_id = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                    for (int i = 0; i < dtw.Rows.Count; i++)
                    {
                        if (dtw.Rows[i]["Col7"].ToString() == "999997")
                        {
                            cond = "and ( emp.rptto='" + emp_id + "')";
                            repto = dtw.Rows[i]["Col12"].ToString();
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                            string tatdays = dtw.Rows[i]["tat"].ToString();
                            if (dtw.Rows.Count - 1 > i)
                            {
                                tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                            }

                            else { tatdays = ">=" + tatdays; }
                            model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                " en.vch_date))))  " + tatdays + "";

                            mq = "select distinct rptto from emp_master where rptto in( select emp_id" +
                                        " from user_details where vch_num='" + userid_mst + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                            string found = sgen.getstring(userCode, mq);
                            if (found != "")
                            {
                                model[0].Col34 = repto;
                                break;
                            }

                        }
                        else if (dtw.Rows[i]["Col7"].ToString() == "999998")
                        {
                            if (repto == "")
                            {
                                cond = "and ( emp.rptto='" + emp_id + "' or emp.rptto2='" + emp_id + "')";
                            }
                            else
                            {
                                cond = cond.TrimEnd(')');
                                cond = cond + "or emp.rptto2='" + emp_id + "')";
                            }
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                            string tatdays = dtw.Rows[i]["tat"].ToString();
                            if (dtw.Rows.Count - 1 > i)
                            {
                                tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                            }

                            else { tatdays = ">=" + tatdays; }
                            model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                " en.vch_date))))  " + tatdays + "";

                            mq = "select distinct rptto2 from emp_master where rptto2 in( select emp_id" +
                                        " from user_details where vch_num='" + userid_mst + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                            string found = sgen.getstring(userCode, mq);
                            if (found != "")
                            {
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                break;
                            }

                        }
                        else if (dtw.Rows[i]["Col7"].ToString() == "999999")//others
                        {
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                            if (userid_mst == dtw.Rows[i]["other_user"].ToString())
                            {
                                cond = "";
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                                string tatdays = dtw.Rows[i]["tat"].ToString();
                                if (dtw.Rows.Count - 1 > i)
                                {
                                    tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                }

                                else { tatdays = ">=" + tatdays; }
                                model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                    " en.vch_date))))  " + tatdays + "";

                                if (repto != "")
                                {
                                    mq = "select distinct rptto from emp_master where rptto in( select emp_id" +
                                        " from user_details where vch_num='" + dtw.Rows[i]["other_user"].ToString() + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                                    string found = sgen.getstring(userCode, mq);
                                    if (found != "")
                                    {
                                        model[0].Col34 = repto;
                                    }
                                }
                                break;
                            }
                        }
                        else
                        {
                            string found = sgen.getstring(userCode, "select col7  user_id from enx_tab2  where type='ROL'" +
                                " and client_unit_id='" + unitid_mst + "' and vch_num='" + dtw.Rows[i]["Col7"].ToString() + "' and col7='" + userid_mst + "'");
                            if (found != "")
                            {
                                cond = "";
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                string tatdays = dtw.Rows[i]["tat"].ToString();
                                if (dtw.Rows.Count - 1 > i)
                                {
                                    tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                }

                                else { tatdays = ">=" + tatdays; }
                                model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                    " en.vch_date))))  " + tatdays + "";
                                break;
                            }
                        }
                    }
                }
                model[0].Col35 = cond;


            }

            #region Pending
            DataTable dt = new DataTable();
            cond = model[0].Col35;
            mq = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                  ",a.col7 as app_by,( case when to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end)  od_from," +
                               "( case when to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end) as od_to,a.col4 as remark,emp.emp_code as Emp_Code" +
                  ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                  ",nvl(dg.master_name, '-') as designation,rs.master_name as reason,nvl(dp.master_name, '-') as department , to_char(a.date1,'" + sgen.Getsqldatetimeformat() + "') od_from ," +
                   " to_char(a.date2,'" + sgen.Getsqldatetimeformat() + "') od_to  from enx_tab2 a inner join " +
                  "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                  " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                  "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                  "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 inner join master_setting rs on rs.master_id = a.col9 and " +
                  "rs.type = 'SRM' and find_in_set(rs.client_unit_id,'" + unitid_mst + "')= 1 where a.type = 'OSL' and a.col10='Pending'  and a.client_unit_id = '" + unitid_mst + "' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + "";

            dt = sgen.getdata(userCode, mq);
            if (dt.Rows.Count > 0)
            {
                var tm = model.FirstOrDefault();
                model = new List<Tmodelmain>();
                foreach (DataRow dr in dt.Rows)
                {
                    model.Add(new Tmodelmain
                    {
                        Col9 = tm.Col9,
                        Col11 = tm.Col11,
                        Col12 = tm.Col12,
                        Col10 = tm.Col10,
                        Col13 = tm.Col13,
                        Col14 = tm.Col14,
                        Col15 = tm.Col15,
                        Col28 = tm.Col28,
                        Col29 = tm.Col29,
                        Col30 = tm.Col30,
                        Col34 = tm.Col34,
                        Col35 = tm.Col35,
                        Col36 = tm.Col36,
                        Col16 = dr["doc_num"].ToString(),
                        Col17 = tm.Col17,
                        Col18 = dr["Emp_Name"].ToString(),
                        Col19 = dr["department"].ToString() + " / " + dr["designation"].ToString(),
                        Col20 = dr["Emp_Code"].ToString(),
                        Col21 = dr["reason"].ToString(),
                        Col22 = dr["remark"].ToString(),
                        Col23 = dr["doc_num"].ToString(),
                        Col24 = dr["fstr"].ToString(),
                        Col25 = dr["od_from"].ToString(),
                        Col26 = dr["od_to"].ToString(),
                        Col27 = "P",
                    });
                }
            }
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult od_apr(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            string cond = "";
            //if (!role_mst.ToUpper().Equals("OWNER"))
            //{
            //    string rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

            //    cond = "and ( emp.rptto='" + rptto + "' or emp.rptto2='" + rptto + "')";
            //}

            if (command == "Submit")
            {
                string status = "";
                Boolean isok = true;
                int cnt = 0;
                for (int i = 0; i < model.Count; i++)
                {
                    if (model[i].Col27 == "P")
                    {
                        status = "Pending";
                    }
                    else if (model[i].Col27 == "A")
                    {
                        status = "Approved";
                        cnt++;
                    }
                    else if (model[i].Col27 == "R")
                    {
                        status = "Rejected";
                        cnt++;
                    }
                    string xDate = sgen.server_datetime(userCode);
                    string dt_ft = "YYYY-MM-dd HH24:MI:SS";
                    mq = "update enx_tab2 set col22='" + userid_mst + "', date5= to_date('" + xDate + "','" + dt_ft + "'), col10='" + status + "' where type='OSL' and client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type='" + model[i].Col24 + "'";
                    isok = sgen.execute_cmd(userCode, mq);
                }
                if (isok == true)
                {
                    if (cnt > 0) { ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'OD Slip Status Updated Successfully');"; };
                    DataTable dt = new DataTable();
                    cond = model[0].Col35;
                    mq = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                       ",a.col7 as app_by,( case when to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end)  od_from," +
                               "( case when to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end) as od_to,a.col4 as remark,emp.emp_code as Emp_Code" +
                       ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                       ",nvl(dg.master_name, '-') as designation,rs.master_name as reason,nvl(dp.master_name, '-') as department , to_char(a.date1,'" + sgen.Getsqldatetimeformat() + "') od_from ," +
                       " to_char(a.date2,'" + sgen.Getsqldatetimeformat() + "') od_to from enx_tab2 a inner join " +
                       "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                       " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                       "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                       "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 inner join master_setting rs on rs.master_id = a.col9 and " +
                       "rs.type = 'SRM' and find_in_set(rs.client_unit_id,'" + unitid_mst + "')= 1 where a.type = 'OSL' and a.col10='Pending' and a.client_unit_id = '" + unitid_mst + "' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + "";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        foreach (DataRow dr in dt.Rows)
                        {
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col28 = tm.Col28,
                                Col29 = tm.Col29,
                                Col30 = tm.Col30,
                                Col34 = tm.Col34,
                                Col35 = tm.Col35,
                                Col36 = tm.Col36,
                                Col16 = dr["doc_num"].ToString(),
                                Col17 = tm.Col17,
                                Col18 = dr["Emp_Name"].ToString(),
                                Col19 = dr["department"].ToString() + " / " + dr["designation"].ToString(),
                                Col20 = dr["Emp_Code"].ToString(),
                                Col21 = dr["reason"].ToString(),
                                Col22 = dr["remark"].ToString(),
                                Col23 = dr["doc_num"].ToString(),
                                Col24 = dr["fstr"].ToString(),
                                Col25 = dr["od_from"].ToString(),
                                Col26 = dr["od_to"].ToString(),
                                Col27 = "P",
                            });
                        }
                    }
                }

            }
            else if (command == "Pending")
            {
                DataTable dt = new DataTable();
                cond = model[0].Col35;
                mq = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                      ",a.col7 as app_by,( case when to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end)  od_from," +
                               "( case when to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "')= '01/01/1900' then '' else to_char(convert_tz(a.date2,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') end) as od_to,a.col4 as remark,emp.emp_code as Emp_Code" +
                      ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                      ",nvl(dg.master_name, '-') as designation,rs.master_name as reason,nvl(dp.master_name, '-') as department , to_char(a.date1,'" + sgen.Getsqldatetimeformat() + "') od_from ," +
                       " to_char(a.date2,'" + sgen.Getsqldatetimeformat() + "') od_to  from enx_tab2 a inner join " +
                      "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                      " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                      "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                      "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 inner join master_setting rs on rs.master_id = a.col9 and " +
                      "rs.type = 'SRM' and find_in_set(rs.client_unit_id,'" + unitid_mst + "')= 1 where a.type = 'OSL' and a.col10='Pending'  and a.client_unit_id = '" + unitid_mst + "' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + "";

                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {
                    model = new List<Tmodelmain>();
                    foreach (DataRow dr in dt.Rows)
                    {
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col10 = tm.Col10,
                            Col13 = tm.Col13,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col28 = tm.Col28,
                            Col29 = tm.Col29,
                            Col30 = tm.Col30,
                            Col34 = tm.Col34,
                            Col35 = tm.Col35,
                            Col36 = tm.Col36,
                            Col16 = dr["doc_num"].ToString(),
                            Col17 = tm.Col17,
                            Col18 = dr["Emp_Name"].ToString(),
                            Col19 = dr["department"].ToString() + " / " + dr["designation"].ToString(),
                            Col20 = dr["Emp_Code"].ToString(),
                            Col21 = dr["reason"].ToString(),
                            Col22 = dr["remark"].ToString(),
                            Col23 = dr["doc_num"].ToString(),
                            Col24 = dr["fstr"].ToString(),
                            Col25 = dr["od_from"].ToString(),
                            Col26 = dr["od_to"].ToString(),
                            Col27 = "P",
                        });
                    }
                }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region sep approval
        public ActionResult sep_apr()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "SEPARATION APPROVAL";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "SPT";
            model[0].TList1 = model[0].TList2 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].Col17 = "P";

            if (!role_mst.ToUpper().Equals("OWNER"))
            {
                mq = "select col8 tat, col9 other_user, Col7,Col12,(case when col7>900000 then 'RF' else 'RM' end) w_type from enx_tab2" +
                    " where type='WFL' and client_unit_id='" + unitid_mst + "' and col5='sep' " +
                    " order by rec_id ";
                DataTable dtw = sgen.getdata(userCode, mq);
                string repto = "", func = "", oth = "";
                if (dtw.Rows.Count > 0)
                {
                    string emp_id = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                    for (int i = 0; i < dtw.Rows.Count; i++)
                    {
                        if (dtw.Rows[i]["Col7"].ToString() == "999997")
                        {
                            cond = "and ( emp.rptto='" + emp_id + "')";
                            repto = dtw.Rows[i]["Col12"].ToString();
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                            string tatdays = dtw.Rows[i]["tat"].ToString();
                            if (dtw.Rows.Count - 1 > i)
                            {
                                tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                            }

                            else { tatdays = ">=" + tatdays; }
                            model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                " en.vch_date))))  " + tatdays + "";

                            mq = "select distinct rptto from emp_master where rptto in( select emp_id" +
                                        " from user_details where vch_num='" + userid_mst + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                            string found = sgen.getstring(userCode, mq);
                            if (found != "")
                            {
                                model[0].Col34 = repto;
                                break;
                            }

                        }
                        else if (dtw.Rows[i]["Col7"].ToString() == "999998")
                        {
                            if (repto == "")
                            {
                                cond = "and ( emp.rptto='" + emp_id + "' or emp.rptto2='" + emp_id + "')";
                            }
                            else
                            {
                                cond = cond.TrimEnd(')');
                                cond = cond + "or emp.rptto2='" + emp_id + "')";
                            }
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                            string tatdays = dtw.Rows[i]["tat"].ToString();
                            if (dtw.Rows.Count - 1 > i)
                            {
                                tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                            }

                            else { tatdays = ">=" + tatdays; }
                            model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                " en.vch_date))))  " + tatdays + "";

                            mq = "select distinct rptto2 from emp_master where rptto2 in( select emp_id" +
                                        " from user_details where vch_num='" + userid_mst + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                            string found = sgen.getstring(userCode, mq);
                            if (found != "")
                            {
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                break;
                            }

                        }
                        else if (dtw.Rows[i]["Col7"].ToString() == "999999")//others
                        {
                            model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                            if (userid_mst == dtw.Rows[i]["other_user"].ToString())
                            {
                                cond = "";
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                                string tatdays = dtw.Rows[i]["tat"].ToString();
                                if (dtw.Rows.Count - 1 > i)
                                {
                                    tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                }

                                else { tatdays = ">=" + tatdays; }
                                model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                    " en.vch_date))))  " + tatdays + "";

                                if (repto != "")
                                {
                                    mq = "select distinct rptto from emp_master where rptto in( select emp_id" +
                                        " from user_details where vch_num='" + dtw.Rows[i]["other_user"].ToString() + "') " +
                                        "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                                    string found = sgen.getstring(userCode, mq);
                                    if (found != "")
                                    {
                                        model[0].Col34 = repto;
                                    }
                                }
                                break;
                            }
                        }
                        else
                        {
                            string found = sgen.getstring(userCode, "select col7  user_id from enx_tab2  where type='ROL'" +
                                " and client_unit_id='" + unitid_mst + "' and vch_num='" + dtw.Rows[i]["Col7"].ToString() + "' and col7='" + userid_mst + "'");
                            if (found != "")
                            {
                                cond = "";
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                string tatdays = dtw.Rows[i]["tat"].ToString();
                                if (dtw.Rows.Count - 1 > i)
                                {
                                    tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                }

                                else { tatdays = ">=" + tatdays; }
                                model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                    " en.vch_date))))  " + tatdays + "";
                                break;
                            }
                        }
                    }
                }
                model[0].Col35 = cond;


            }

            #region Pending
            DataTable dt = new DataTable();
            cond = model[0].Col35;
            mq = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                  ",a.col7 as app_by,a.col4 as remark,emp.emp_code as Emp_Code" +
                  ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                  ",nvl(dg.master_name, '-') as designation,rs.master_name as reason,nvl(dp.master_name, '-') as department from enx_tab2 a inner join " +
                  "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                  " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                  "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                  "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 inner join master_setting rs on rs.master_id = a.col9 and " +
                  "rs.type = 'SRM' and find_in_set(rs.client_unit_id,'" + unitid_mst + "')= 1 where a.type = 'SPT' and a.col10='Pending' and a.client_unit_id = '" + unitid_mst + "' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + "";

            dt = sgen.getdata(userCode, mq);
            if (dt.Rows.Count > 0)
            {
                var tm = model.FirstOrDefault();
                model = new List<Tmodelmain>();
                foreach (DataRow dr in dt.Rows)
                {
                    model.Add(new Tmodelmain
                    {
                        Col9 = tm.Col9,
                        Col11 = tm.Col11,
                        Col12 = tm.Col12,
                        Col10 = tm.Col10,
                        Col13 = tm.Col13,
                        Col14 = tm.Col14,
                        Col15 = tm.Col15,
                        Col28 = tm.Col28,
                        Col29 = tm.Col29,
                        Col30 = tm.Col30,
                        Col34 = tm.Col34,
                        Col35 = tm.Col35,
                        Col36 = tm.Col36,
                        Col16 = dr["doc_num"].ToString(),
                        Col17 = tm.Col17,
                        Col18 = dr["Emp_Name"].ToString(),
                        Col19 = dr["department"].ToString() + " / " + dr["designation"].ToString(),
                        Col20 = dr["Emp_Code"].ToString(),
                        Col21 = dr["reason"].ToString(),
                        Col22 = dr["remark"].ToString(),
                        Col23 = dr["doc_num"].ToString(),
                        Col24 = dr["fstr"].ToString(),
                        Col27 = "P",
                    });
                }
            }
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult sep_apr(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            string cond = "";
            //if (!role_mst.ToUpper().Equals("OWNER"))
            //{
            //    string rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

            //    cond = "and ( emp.rptto='" + rptto + "' or emp.rptto2='" + rptto + "')";
            //}

            if (command == "Submit")
            {
                string status = "";
                Boolean isok = true;
                int cnt = 0;
                for (int i = 0; i < model.Count; i++)
                {
                    if (model[i].Col27 == "P")
                    {
                        status = "Pending";
                    }
                    else if (model[i].Col27 == "A")
                    {
                        status = "Approved";
                        cnt++;
                    }
                    else if (model[i].Col27 == "R")
                    {
                        status = "Rejected";
                        cnt++;
                    }

                    string xDate = sgen.server_datetime(userCode);
                    string dt_ft = "YYYY-MM-dd HH24:MI:SS";
                    mq = "update enx_tab2 set col22='" + userid_mst + "', date5= to_date('" + xDate + "','" + dt_ft + "'),  col10='" + status + "' where type='SPT' and client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type='" + model[i].Col24 + "'";
                    isok = sgen.execute_cmd(userCode, mq);
                }
                if (isok == true)
                {
                    if (cnt > 0) { ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Separation Status Updated Successfully');"; };
                    DataTable dt = new DataTable();
                    cond = model[0].Col35;
                    mq = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                       ",a.col7 as app_by,a.col4 as remark,emp.emp_code as Emp_Code" +
                       ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                       ",nvl(dg.master_name, '-') as designation,rs.master_name as reason,nvl(dp.master_name, '-') as department from enx_tab2 a inner join " +
                       "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                       " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                       "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                       "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 inner join master_setting rs on rs.master_id = a.col9 and " +
                       "rs.type = 'SRM' and find_in_set(rs.client_unit_id,'" + unitid_mst + "')= 1 where a.type = 'SPT' and a.col10='Pending'  and a.client_unit_id = '" + unitid_mst + "' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + "";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        foreach (DataRow dr in dt.Rows)
                        {
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col28 = tm.Col28,
                                Col29 = tm.Col29,
                                Col30 = tm.Col30,
                                Col34 = tm.Col34,
                                Col35 = tm.Col35,
                                Col36 = tm.Col36,
                                Col16 = dr["doc_num"].ToString(),
                                Col17 = tm.Col17,
                                Col18 = dr["Emp_Name"].ToString(),
                                Col19 = dr["department"].ToString() + " / " + dr["designation"].ToString(),
                                Col20 = dr["Emp_Code"].ToString(),
                                Col21 = dr["reason"].ToString(),
                                Col22 = dr["remark"].ToString(),
                                Col23 = dr["doc_num"].ToString(),
                                Col24 = dr["fstr"].ToString(),
                                Col27 = "P",
                            });
                        }
                    }
                }

            }
            else if (command == "Pending")
            {
                DataTable dt = new DataTable();
                cond = model[0].Col35;
                mq = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,a.vch_num as doc_num,a.col5 as shift_start,a.col6 as shift_end" +
                      ",a.col7 as app_by,a.col4 as remark,emp.emp_code as Emp_Code" +
                      ",(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name" +
                      ",nvl(dg.master_name, '-') as designation,rs.master_name as reason,nvl(dp.master_name, '-') as department from enx_tab2 a inner join " +
                      "emp_master emp on emp.vch_num = a.col8 and emp.type = 'EMP' and emp.client_unit_id = '" + unitid_mst + "'and emp.emp_status = 'Y' " + cond + "" +
                      " left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                      "find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join master_setting dg on dg.master_id = emp.emp_desig and " +
                      "dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 inner join master_setting rs on rs.master_id = a.col9 and " +
                      "rs.type = 'SRM' and find_in_set(rs.client_unit_id,'" + unitid_mst + "')= 1 where a.type = 'SPT' and a.col10='Pending' and a.client_unit_id = '" + unitid_mst + "' " + xprdrange.Replace("vch_DATE", "a.vch_DATE") + " " + model[0].Col36.Replace("en.vch_date", "a.vch_date") + "";

                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {
                    model = new List<Tmodelmain>();
                    foreach (DataRow dr in dt.Rows)
                    {
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col10 = tm.Col10,
                            Col13 = tm.Col13,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col28 = tm.Col28,
                            Col29 = tm.Col29,
                            Col30 = tm.Col30,
                            Col34 = tm.Col34,
                            Col35 = tm.Col35,
                            Col36 = tm.Col36,
                            Col16 = dr["doc_num"].ToString(),
                            Col17 = tm.Col17,
                            Col18 = dr["Emp_Name"].ToString(),
                            Col19 = dr["department"].ToString() + " / " + dr["designation"].ToString(),
                            Col20 = dr["Emp_Code"].ToString(),
                            Col21 = dr["reason"].ToString(),
                            Col22 = dr["remark"].ToString(),
                            Col23 = dr["doc_num"].ToString(),
                            Col24 = dr["fstr"].ToString(),
                            Col27 = "P",
                        });
                    }
                }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region team
        public ActionResult team()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "REPORTING STRUCTURE";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";

            DataTable dt = sgen.getdata(userCode, "select vch_num,(FIRST_NAME|| ' '|| REPLACE(MIDDLE_NAME,'0','')|| ' '||REPLACE(LAST_NAME,'0','')) as Emp_Name from emp_master  where type='EMP' " +
                "and client_unit_id='" + unitid_mst + "'");
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.dt_to_selectlist(dt);
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };

            if (model[0].Col14 == "8009")
            {
                string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                     "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                mq = "select emp.rptto2, 	emp.rptto,(e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) emprpto,d.master_name dept,g.master_name desig," +
                    "(ef.FIRST_NAME|| ' '|| REPLACE(ef.MIDDLE_NAME,'0','')|| ' '||REPLACE(ef.LAST_NAME,'0','')) FEmp_Name,df.master_name fdept,gf.master_name fdesig," +
                   "emp.vch_num,emp.emp_code as Emp_Code,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name" +
                   " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                   " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                   " left join emp_master e  on emp.rptto = e.vch_num and e.client_unit_id = '" + unitid_mst + "' and e.type = 'EMP'" +
                             " left join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id) = 1" +
                             " left join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' " +
                             " left join emp_master ef  on emp.rptto2 = ef.vch_num and ef.client_unit_id = '" + unitid_mst + "' and ef.type = 'EMP'" +
                             " left join master_setting df on df.master_id = ef.emp_dept and df.type = 'MDP' and find_in_set(df.client_unit_id, ef.client_unit_id) = 1" +
                             " left join master_setting gf on gf.master_id = ef.emp_desig and gf.type = 'MDG'" +
                             " WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "'";
                dt = new DataTable();
                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {

                    mq = "select (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name,nvl(dg.master_name, '-') as designation," +
                    "nvl(dp.master_name, '-') as department from emp_master emp left join master_setting dp on " +
                    "dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join " +
                    "master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1  where emp.type = 'EMP'" +
                    " and emp.client_unit_id = '" + unitid_mst + "' and emp.rptto = '" + dt.Rows[0]["vch_num"].ToString() + "'";


                    DataTable dtt = sgen.getdata(userCode, mq);
                    if (dtt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        for (int i = 0; i < dtt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            if (i == 0)
                            {
                                tmm.Col9 = "REPORTING STRUCTURE";
                                tmm.Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
                                tmm.Col14 = mid_mst;
                                tmm.Col15 = m_id_mst;
                                tmm.Col17 = dt.Rows[0]["Emp_Name"].ToString();
                                //repto
                                tmm.Col18 = dt.Rows[0]["emprpto"].ToString();
                                tmm.Col19 = dt.Rows[0]["dept"].ToString();
                                tmm.Col20 = dt.Rows[0]["desig"].ToString();
                                tmm.Col27 = dt.Rows[0]["rptto"].ToString();

                                // functional manager
                                tmm.Col28 = dt.Rows[0]["rptto2"].ToString();
                                tmm.Col24 = dt.Rows[0]["FEmp_Name"].ToString();
                                tmm.Col25 = dt.Rows[0]["Fdept"].ToString();
                                tmm.Col26 = dt.Rows[0]["Fdesig"].ToString();


                            }
                            tmm.Col21 = dtt.Rows[i]["Emp_Name"].ToString();
                            tmm.Col22 = dtt.Rows[i]["department"].ToString();
                            tmm.Col23 = dtt.Rows[i]["designation"].ToString();

                            model.Add(tmm);
                        }
                    }

                    else
                    {
                        model[0].Col17 = dt.Rows[0]["Emp_Name"].ToString();
                        //repto
                        model[0].Col18 = dt.Rows[0]["emprpto"].ToString();
                        model[0].Col19 = dt.Rows[0]["dept"].ToString();
                        model[0].Col20 = dt.Rows[0]["desig"].ToString();
                        model[0].Col27 = dt.Rows[0]["rptto"].ToString();

                        // functional manager
                        model[0].Col28 = dt.Rows[0]["rptto2"].ToString();
                        model[0].Col24 = dt.Rows[0]["FEmp_Name"].ToString();
                        model[0].Col25 = dt.Rows[0]["Fdept"].ToString();
                        model[0].Col26 = dt.Rows[0]["Fdesig"].ToString();
                    }
                }
            }


            return View(model);
        }
        [HttpPost]
        public ActionResult team(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();

            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };

            if (command == "Emp")
            {
                string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num ='" + model[0].SelectedItems1.FirstOrDefault() + "'");

                mq = "select emp.rptto2, 	emp.rptto,(e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) emprpto,d.master_name dept,g.master_name desig," +
                    "(ef.FIRST_NAME|| ' '|| REPLACE(ef.MIDDLE_NAME,'0','')|| ' '||REPLACE(ef.LAST_NAME,'0','')) FEmp_Name,df.master_name fdept,gf.master_name fdesig," +
                   "emp.vch_num,emp.emp_code as Emp_Code,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name" +
                   " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                   " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                   " left join emp_master e  on emp.rptto = e.vch_num and e.client_unit_id = '" + unitid_mst + "' and e.type = 'EMP'" +
                             " left join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id) = 1" +
                             " left join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' " +
                             " left join emp_master ef  on emp.rptto2 = ef.vch_num and ef.client_unit_id = '" + unitid_mst + "' and ef.type = 'EMP'" +
                             " left join master_setting df on df.master_id = ef.emp_dept and df.type = 'MDP' and find_in_set(df.client_unit_id, ef.client_unit_id) = 1" +
                             " left join master_setting gf on gf.master_id = ef.emp_desig and gf.type = 'MDG'" +
                             " WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "'";

                DataTable dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {

                    mq = "select (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME, '0', '')) as Emp_Name,nvl(dg.master_name, '-') as designation," +
                    "nvl(dp.master_name, '-') as department from emp_master emp left join master_setting dp on " +
                    "dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1 left join " +
                    "master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1  where emp.type = 'EMP'" +
                    " and emp.client_unit_id = '" + unitid_mst + "' and emp.rptto = '" + dt.Rows[0]["vch_num"].ToString() + "'";

                    model = new List<Tmodelmain>();
                    DataTable dtt = sgen.getdata(userCode, mq);
                    if (dtt.Rows.Count > 0)
                    {

                        for (int i = 0; i < dtt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            if (i == 0)
                            {
                                tmm.Col9 = "REPORTING STRUCTURE";
                                tmm.Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
                                tmm.Col14 = mid_mst;
                                tmm.Col15 = m_id_mst;
                                tmm.Col17 = dt.Rows[0]["Emp_Name"].ToString();
                                //repto
                                tmm.Col18 = dt.Rows[0]["emprpto"].ToString();
                                tmm.Col19 = dt.Rows[0]["dept"].ToString();
                                tmm.Col20 = dt.Rows[0]["desig"].ToString();
                                tmm.Col27 = dt.Rows[0]["rptto"].ToString();

                                // functional manager
                                tmm.Col28 = dt.Rows[0]["rptto2"].ToString();
                                tmm.Col24 = dt.Rows[0]["FEmp_Name"].ToString();
                                tmm.Col25 = dt.Rows[0]["Fdept"].ToString();
                                tmm.Col26 = dt.Rows[0]["Fdesig"].ToString();

                            }
                            tmm.Col21 = dtt.Rows[i]["Emp_Name"].ToString();
                            tmm.Col22 = dtt.Rows[i]["department"].ToString();
                            tmm.Col23 = dtt.Rows[i]["designation"].ToString();
                            tmm.TList1 = tm.TList1;
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            model.Add(tmm);
                        }
                    }

                    else
                    {
                        Tmodelmain tmm = new Tmodelmain();

                        tmm.Col17 = dt.Rows[0]["Emp_Name"].ToString();
                        //repto
                        tmm.Col18 = dt.Rows[0]["emprpto"].ToString();
                        tmm.Col19 = dt.Rows[0]["dept"].ToString();
                        tmm.Col20 = dt.Rows[0]["desig"].ToString();
                        tmm.Col27 = dt.Rows[0]["rptto"].ToString();

                        // functional manager
                        tmm.Col28 = dt.Rows[0]["rptto2"].ToString();
                        tmm.Col24 = dt.Rows[0]["FEmp_Name"].ToString();
                        tmm.Col25 = dt.Rows[0]["Fdept"].ToString();
                        tmm.Col26 = dt.Rows[0]["Fdesig"].ToString();
                        tmm.TList1 = tm.TList1;
                        tmm.SelectedItems1 = tm.SelectedItems1;
                        model.Add(tmm);
                    }
                }

                else
                {

                    model = new List<Tmodelmain>();
                    Tmodelmain tmm = new Tmodelmain();
                    tmm.Col9 = "REPORTING STRUCTURE";
                    tmm.Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
                    tmm.Col14 = mid_mst;
                    tmm.Col15 = m_id_mst;
                    tmm.TList1 = tm.TList1;
                    tmm.SelectedItems1 = tm.SelectedItems1;
                    model.Add(tmm);
                }
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Role Master
        public ActionResult role_mt()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();

            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            if (model[0].Col14 == "33002.7")
            {
                model[0].Col12 = "ROL";
                model[0].Col9 = "ROLE MASTER";
                sgen.SetSession(MyGuid, "role_grp", "ROL");
            }
            else if (model[0].Col14 == "42003.8")
            {
                model[0].Col12 = "SER";
                model[0].Col9 = "ROLE MASTER";
                sgen.SetSession(MyGuid, "role_grp", "SER");
            }

            else
            {
                model[0].Col12 = "GRP";
                model[0].Col9 = "GROUP MASTER";
                sgen.SetSession(MyGuid, "role_grp", "GRP");
            }
            model[0].LTM2 = new List<Tmodelmain>();
            Tmodelmain tmltm2 = new Tmodelmain();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            tmltm2.SelectedItems1 = new string[] { "" };
            tmltm2.Col1 = "1";
            model[0].LTM2.Add(tmltm2);
            return View(model);
        }
        [HttpPost]
        public ActionResult role_mt(List<Tmodelmain> model, string command, string hfrow)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            foreach (var mod in model[0].LTM2)
            {
                TempData[MyGuid + "_Tlist1"] = mod.TList1 = mod1;
                if (mod.SelectedItems1 == null) mod.SelectedItems1 = new string[] { "" };
            }

            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    foreach (var mod in model[0].LTM2)
                    {
                        if (mod.SelectedItems1 == null) mod.SelectedItems1 = new string[] { "" };
                        if (model[0].Col14 == "33002.7")
                        {
                            var mymod = cmd_Fun.username_emp(userCode);
                            TempData[MyGuid + "_Tlist1"] = mod.TList1 = mymod;
                        }
                        else
                        {
                            var mymod = cmd_Fun.username(userCode);
                            TempData[MyGuid + "_Tlist1"] = mod.TList1 = mymod;
                        }
                    }
                }
                catch (Exception ex) { }
            }

            else if (command == "user")
            {
                try
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";


                    mq = "select nvl(b.master_name,'-') designation,nvl(c.master_name,'-') department  from user_details a " +
                        "left join  master_setting b on a. designation = b.master_id and b.type = 'MDG' " +
                        "left join  master_setting c  on a. department = c.master_id and c.type = 'MDP' where a.type = 'CPR' " +
                        "and a.vch_num='" + model[0].LTM2[sgen.Make_int(hfrow)].SelectedItems1.FirstOrDefault() + "'";
                    DataTable dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].LTM2[sgen.Make_int(hfrow)].Col17 = dt.Rows[0]["department"].ToString();
                        model[0].LTM2[sgen.Make_int(hfrow)].Col18 = dt.Rows[0]["designation"].ToString();
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);"; }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int k = 0; k < model[0].LTM2.Count; k++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["vch_num"] = vch_num;
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = currdate;
                        dr["type_desc"] = type_desc;
                        dr["col5"] = model[0].Col17;//role name
                        dr["col6"] = model[0].Col18;// desp
                        dr["COL7"] = model[0].LTM2[k].SelectedItems1.FirstOrDefault(); //user

                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        List<string> apps = new List<string>();
                        foreach (var key in HttpContext.Application.Keys)
                        {
                            if (key.ToString().ToUpper().Contains("_U_" + userCode + ""))
                            {
                                apps.Add(key.ToString());
                            }
                        }
                        foreach (var ap in apps)
                        {
                            HttpContext.Application[ap.ToString()] = null;
                        }
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                        });
                        model[0].LTM2 = new List<Tmodelmain>();
                        Tmodelmain tmltm2 = new Tmodelmain();
                        tmltm2.TList1 = mod1;
                        tmltm2.SelectedItems1 = new string[] { "" };
                        tmltm2.Col1 = "1";
                        model[0].LTM2.Add(tmltm2);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Add")
            {
                try
                {
                    Tmodelmain ntm1 = new Tmodelmain();
                    ntm1.Col1 = (Convert.ToInt32(model[0].LTM2.Max(x => sgen.Make_int(x.Col1))) + 1).ToString();
                    foreach (var mod in model[0].LTM2)
                    {
                        ntm1.TList1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                        TempData[MyGuid + "_Tlist1"] = ntm1.TList1;
                    }
                    ntm1.SelectedItems1 = new string[] { "" };
                    model[0].LTM2.Add(ntm1);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";

                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);"; }
            }
            else if (command == "Remove")
            {
                if (model[0].LTM2.Count > 1) model[0].LTM2.RemoveAt(sgen.Make_int(hfrow));
                else
                {
                    ViewBag.scripCall = "showmsgJS(1,'You cannot remove last entry',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    return View(model);
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Kaizen Submit
        public ActionResult kz_submit()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            model[0].Col9 = "KAIZEN SUBMIT";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "KZS";


            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;

            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };





            return View(model);
        }
        [HttpPost]
        public ActionResult kz_submit(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();

            #region Dropdwon
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;

            if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            #endregion
            if (command == "New")
            {
                try
                {
                    model = getnew(model);
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();

                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.areaimp(userCode, unitid_mst);
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.expcomp(userCode, unitid_mst);
                    mod3.Add(new SelectListItem { Text = "Yearly", Value = "001" });
                    mod3.Add(new SelectListItem { Text = "Monthly", Value = "002" });
                    mod3.Add(new SelectListItem { Text = "One Time", Value = "003" });
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;


                    string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                  "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                    mq = "select emp.rptto, (e.FIRST_NAME|| ' '|| REPLACE(e.MIDDLE_NAME,'0','')|| ' '||REPLACE(e.LAST_NAME,'0','')) emprpto," +
                        " (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.vch_num,emp.emp_code as Emp_Code," +
                          "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                          "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                          "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as Date_Of_birth,(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.dob, 'yyyy'))) as years," +
                           "trunc(months_between(utc_timestamp(),emp.dob)) as months,floor(utc_timestamp() - add_months(emp.dob,trunc(months_between(utc_timestamp(),emp.dob)))) days ,d.master_name dept,g.master_name desig " +
                          " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                          "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1" +
                          " left join master_setting dp on dp.master_id=emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                          " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 " +
                          "left join emp_master e  on emp.rptto = e.vch_num and e.client_unit_id = '" + unitid_mst + "' and e.type = 'EMP'" +
                          " left join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id) = 1" +
                          " left join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG'  WHERE (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "'";

                    DataTable dt = sgen.getdata(userCode, mq);

                    if (dt.Rows.Count > 0)
                    {


                        model[0].Col17 = dt.Rows[0]["vch_num"].ToString();
                        model[0].Col18 = dt.Rows[0]["Emp_Name"].ToString();
                        model[0].Col19 = dt.Rows[0]["Father_Name"].ToString();
                        model[0].Col20 = dt.Rows[0]["Date_Of_Joining"].ToString();

                        model[0].Col24 = dt.Rows[0]["department"].ToString();
                        model[0].Col25 = dt.Rows[0]["designation"].ToString();

                        model[0].Col29 = dt.Rows[0]["emprpto"].ToString();
                        model[0].Col32 = dt.Rows[0]["rptto"].ToString();




                    }

                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["vch_num"] = vch_num;
                    dr["type"] = model[0].Col12;
                    dr["vch_date"] = currdate;
                    dr["type_desc"] = type_desc;
                    dr["col5"] = model[0].Col17;//emp_code
                    dr["col6"] = model[0].SelectedItems1.FirstOrDefault();//area
                    dr["col7"] = model[0].SelectedItems2.FirstOrDefault();//comp time
                    dr["col9"] = model[0].SelectedItems3.FirstOrDefault(); //freq

                    dr["COL8"] = model[0].Col26;//saving amt
                    dr["COL23"] = model[0].Col28;//Remark
                    dr["COL10"] = model[0].Col32;//reporting to
                    dr["COL20"] = "Pending";
                    dr = getsave(currdate, dr, model);
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";

                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                        });
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Kaizen Approval
        public ActionResult kz_apr()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "KAIZEN SUBMIT APPROVAL";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            ViewBag.scripCall = "enableForm();";

            return View(model);
        }
        [HttpPost]
        public ActionResult kz_apr(List<Tmodelmain> model, string command, string mid)
        {
            try
            {
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();

                string cond = "";
                int cnt = 0;
                if (!role_mst.ToUpper().Equals("OWNER"))
                {
                    string rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                    cond = "and ( a.rptto='" + rptto + "' or a.rptto2='" + rptto + "')";
                }
                if (command == "Submit")
                {
                    string status = "";
                    Boolean isok = true;
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Col27 == "P")
                        {
                            status = "Pending";
                        }
                        else if (model[i].Col27 == "A")
                        {
                            status = "Approved";
                            cnt++;
                        }
                        else if (model[i].Col27 == "R")
                        {
                            status = "Rejected";
                            cnt++;
                        }
                        string xDate = sgen.server_datetime(userCode);
                        string dt_ft = "YYYY-MM-dd HH24:MI:SS";
                        mq = "update enx_tab2 set col22='" + userid_mst + "', date5= to_date('" + xDate + "','" + dt_ft + "'), col20='" + status + "' where type='KZS' and vch_num='" + model[i].Col16 + "' and client_unit_id='" + unitid_mst + "'";
                        isok = sgen.execute_cmd(userCode, mq);
                    }
                    if (isok == true)
                    {
                        if (cnt > 0) { ViewBag.scripCall = "mytoast('success', 'toast-top-right', 'Kaizen Submit Status Updated Successfully');"; };
                        DataTable dt = new DataTable();


                        mq = "select a.* from (SELECT cast (a.COL23 as varchar(1000)) remark,  nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                        ",a.COL8 saving_amount, a.vch_num doc, emp.gender as Gende,emp.f_name as Father_Name,emp.emp_code as Employee_Code," +
                        "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department, a.col6," +
                        "to_char(emp.st_dt, 'dd/MM/YYYY') as Date_Of_Joining,a.col20 as status " +
                        "FROM enx_tab2 a ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                        " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE " +
                        "a.TYPE = 'KZS' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " +
                        " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Pending' order by emp.emp_code asc) a " +
                        " where 1=1 " + cond + " ";

                        dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            model = new List<Tmodelmain>();
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                            foreach (DataRow dr in dt.Rows)
                            {
                                model.Add(new Tmodelmain
                                {
                                    Col9 = tm.Col9,
                                    Col11 = tm.Col11,
                                    Col12 = tm.Col12,
                                    Col10 = tm.Col10,
                                    Col13 = tm.Col13,
                                    Col14 = tm.Col14,
                                    Col15 = tm.Col15,
                                    Col16 = dr["doc"].ToString(),
                                    Col17 = tm.Col17,
                                    Col18 = dr["employee_name"].ToString(),
                                    Col19 = dr["department"].ToString() + ' ' + dr["designation"].ToString(),
                                    Col20 = dr["employee_code"].ToString(),
                                    Col22 = dr["saving_amount"].ToString(),
                                    Col23 = dr["remark"].ToString(),

                                });
                            }
                        }

                        else
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            model.Add(tmm);
                        }
                    }

                }
                else if (command == "Pending")
                {
                    DataTable dt = new DataTable();

                    mq = "select a.* from (SELECT cast (a.COL23 as varchar(1000)) remark,  nvl(emp.rptto,0) rptto,nvl(rptto2,0) rptto2, (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name" +
                        ",a.COL8 saving_amount, a.vch_num doc, emp.gender as Gende,emp.f_name as Father_Name,emp.emp_code as Employee_Code," +
                        "emp.vch_num as emp_doc,nvl(dg.master_name, '-') as designation,nvl(dp.master_name, '-') as department, a.col6," +
                        "to_char(emp.st_dt, 'dd/MM/YYYY') as Date_Of_Joining,a.col20 as status " +
                        "FROM enx_tab2 a ,emp_master emp left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')= 1" +
                        " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE " +
                        "a.TYPE = 'KZS' and a.client_unit_id = '" + unitid_mst + "' and emp.type = 'EMP' and emp.emp_status = 'Y' " +
                        " and a.COL5 = emp.vch_num and emp.client_unit_id = '" + unitid_mst + "' and a.col20 = 'Pending' order by emp.emp_code asc) a " +
                        " where 1=1 " + cond + " ";


                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in dt.Rows)
                        {
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = dr["doc"].ToString(),
                                Col17 = tm.Col17,
                                Col18 = dr["employee_name"].ToString(),
                                Col19 = dr["department"].ToString() + ' ' + dr["designation"].ToString(),
                                Col20 = dr["employee_code"].ToString(),
                                Col22 = dr["saving_amount"].ToString(),
                                Col23 = dr["remark"].ToString(),
                                Col27 = "P",
                            });
                        }
                    }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Kaizen report
        public ActionResult kz_rpt()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            string tdt = sgen.server_datetime_local(userCode);

            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "Kaizen Report ";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";

            string emp_code = sgen.getstring(userCode, "select emp_id from user_details where vch_num='" + userid_mst + "' and type='CPR'");



            string to_dt = sgen.server_datetime_local(userCode);
            mq = " select sum(a.total_month) total_month,sum(a.total_yr) total_yr, sum(a.total_till) total_till," +
                " sum(a.app_month) app_month,sum(a.app_yr) app_yr, sum(a.app_till) app_till from ( " +
                " select 0 total_month, 0 total_yr,0 total_till, count(*) app_month,0 as app_yr,0 as app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' and col20 = 'Approved' " +
                " union all " +
                " select count(*) total_month,0 as total_yr,0 as total_till,0 app_month,0 app_yr,0 app_till from enx_tab2 where type = 'KZS' " +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' " +
                " union all " +
                " select 0 total_month, 0 total_yr,0 total_till, 0 app_month,count(*) as app_yr,0 as app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' and col20 = 'Approved' " +
                " union all " +
                " select 0 total_month,count(*) as total_yr,0 as total_till,0 app_month,0 app_yr,0 app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' " +
                "union all " +
                " select 0 total_month, 0 total_yr,0 total_till, 0 app_month,0 as app_yr,count(*) as app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' and col20 = 'Approved' " +
                " union all " +
                " select 0 total_month,0 as total_yr,count(*) as total_till,0 app_month,0 app_yr,0 app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' ) a";
            DataTable dt = sgen.getdata(userCode, mq);
            if (dt.Rows.Count > 0)
            {
                model[0].Col17 = dt.Rows[0]["total_month"].ToString();
                model[0].Col18 = dt.Rows[0]["total_yr"].ToString();
                model[0].Col19 = dt.Rows[0]["total_till"].ToString();

                model[0].Col20 = dt.Rows[0]["app_month"].ToString();
                model[0].Col21 = dt.Rows[0]["app_yr"].ToString();
                model[0].Col22 = dt.Rows[0]["app_till"].ToString();
            }

            var tm = model.FirstOrDefault();
            DataTable dtt = sgen.getdata(userCode, "select vch_num from emp_master where type='EMP' and client_unit_id='" + unitid_mst + "' and rptto='" + emp_code + "'");

            if (dtt.Rows.Count > 0)
            {
                model = new List<Tmodelmain>();
                for (int i = 0; i < dtt.Rows.Count; i++)
                {

                    emp_code = dtt.Rows[i]["vch_num"].ToString();
                    mq = " select (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name, sum(a.total_month) total_month,sum(a.total_yr) total_yr, sum(a.total_till) total_till," +
                " sum(a.app_month) app_month,sum(a.app_yr) app_yr, sum(a.app_till) app_till from ( " +
                " select 0 total_month, 0 total_yr,0 total_till, count(*) app_month,0 as app_yr,0 as app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' and col20 = 'Approved' " +
                " union all " +
                " select count(*) total_month,0 as total_yr,0 as total_till,0 app_month,0 app_yr,0 app_till from enx_tab2 where type = 'KZS' " +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' " +
                " union all " +
                " select 0 total_month, 0 total_yr,0 total_till, 0 app_month,count(*) as app_yr,0 as app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' and col20 = 'Approved' " +
                " union all " +
                " select 0 total_month,count(*) as total_yr,0 as total_till,0 app_month,0 app_yr,0 app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' " +
                "union all " +
                " select 0 total_month, 0 total_yr,0 total_till, 0 app_month,0 as app_yr,count(*) as app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' and col20 = 'Approved' " +
                " union all " +
                " select 0 total_month,0 as total_yr,count(*) as total_till,0 app_month,0 app_yr,0 app_till from enx_tab2 where type = 'KZS'" +
                " and client_unit_id = '" + unitid_mst + "' and col5 = '" + emp_code + "' ) a " +
              "inner join emp_master emp  on emp.vch_num='" + emp_code + "' and emp.type='EMP'" +
              " and emp.client_unit_id='" + unitid_mst + "'  group by(emp.FIRST_NAME|| ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', ''))";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {

                        for (int j = 0; j < dt.Rows.Count; j++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.Col17 = tm.Col17;
                            tmm.Col18 = tm.Col18;
                            tmm.Col19 = tm.Col19;
                            tmm.Col20 = tm.Col20;
                            tmm.Col21 = tm.Col21;
                            tmm.Col22 = tm.Col22;
                            tmm.Col23 = dt.Rows[j]["emp_name"].ToString();
                            tmm.Col24 = dt.Rows[j]["total_month"].ToString();
                            tmm.Col25 = dt.Rows[j]["total_yr"].ToString();
                            tmm.Col26 = dt.Rows[j]["total_till"].ToString();
                            tmm.Col27 = dt.Rows[j]["app_month"].ToString();
                            tmm.Col28 = dt.Rows[j]["app_yr"].ToString();
                            tmm.Col29 = dt.Rows[j]["app_till"].ToString();


                            model.Add(tmm);
                        }
                    }

                }
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult kz_rpt(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);

        }
        #endregion
        #region Loan_type
        public ActionResult Loan_type()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);

            model[0].Col9 = "LOAN TYPE";
            model[0].Col10 = "Master_Setting";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "LON";


            DataTable dtb = (DataTable)sgen.GetSession(MyGuid, "URIGHTS");
            try
            {
                dtb = dtb.Select("m_id='" + model[0].Col14 + "'").CopyToDataTable();
                if (dtb.Rows.Count > 0)
                {
                    model[0].Col55 = dtb.Rows[0]["btnnew"].ToString();
                    model[0].Col56 = dtb.Rows[0]["btnedit"].ToString();
                    model[0].Col57 = dtb.Rows[0]["btnview"].ToString();

                }
            }
            catch (Exception ex) { }




            return View(model);
        }

        public List<Tmodelmain> new_Loan_type(List<Tmodelmain> model)
        {
            model = getnew(model);

            return model;
        }
        [HttpPost]
        public ActionResult Loan_type(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();


            if (command == "New")
            {
                try
                {

                    model = new_Loan_type(model);


                }
                catch (Exception ex) { }
            }
            else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                        mq1 = " and master_id<>'" + model[0].Col16.Trim() + "'";
                    }
                    else
                    {
                        mq1 = "";
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }

                    DataTable dtch = sgen.getdata(userCode, "select master_name from " + model[0].Col10.Trim() + " a where master_name='" + model[0].Col17.Trim().ToString() + "' " +
                        "and type in ('" + model[0].Col12 + "') and client_unit_id='" + unitid_mst + "'" + mq1 + "");
                    if (dtch.Rows.Count > 0)
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Loan Type Already Exists ', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["master_id"] = vch_num.Trim();
                    dr["vch_num"] = vch_num;
                    dr["type"] = model[0].Col12;
                    dr["vch_date"] = currdate;
                    dr["master_name"] = model[0].Col17;
                    if (!model[0].Col18.Contains('%'))
                    {
                        dr["classid"] = model[0].Col18 + "%";
                    }
                    else
                    {
                        dr["classid"] = model[0].Col18;
                    }

                    if (isedit)
                    {
                        dr["master_entby"] = model[0].Col3;
                        dr["master_entdate"] = model[0].Col4;
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                        dr["rec_id"] = model[0].Col7;
                        dr["master_editby"] = userid_mst;
                        dr["master_editdate"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["master_entby"] = userid_mst;
                        dr["master_entdate"] = currdate;
                        dr["master_editby"] = "-";
                        dr["master_editdate"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        List<string> apps = new List<string>();
                        foreach (var key in HttpContext.Application.Keys)
                        {
                            if (key.ToString().ToUpper().Contains("_U_" + userCode + ""))
                            {
                                apps.Add(key.ToString());
                            }
                        }
                        foreach (var ap in apps)
                        {
                            HttpContext.Application[ap.ToString()] = null;
                        }


                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,

                        });

                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall = "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_Loan_type(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region  Good Wishes
        public ActionResult good_wishes()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            ViewBag.vsend = "disabled='disabled'";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            model[0].Col9 = "GOOD WISHES";
            model[0].Col10 = "KC_TAB";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "HRW"; //TYPE
            model[0].Col31 = "1"; //Lang TYPE
            model[0].Col17 = sgen.server_datetime_local(userCode);
            model[0].Col18 = sgen.server_datetime_local(userCode);
            model[0].Chk4 = true;
            model[0].Chk5 = true;
            model[0].Chk6 = true;
            string defval = "";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            #region MOC 1
            mod1 = new List<SelectListItem>();
            DataTable dt = sgen.getdata(userCode, "select 'SMS' as communication from dual Union all select 'Email' as communication from dual ");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["communication"].ToString(), Value = dr["communication"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

            model[0].SelectedItems1 = new string[] { "" };
            #endregion
            #region Mail cc 2
            mq2 = "select user_id||' ('||nvl(email,'-')||')' name  FROM user_details WHERE type<>'STD' and type<>'STP' ";
            dt = sgen.getdata(userCode, mq2);
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod2.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["name"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;

            model[0].SelectedItems2 = new string[] { "" };
            #endregion
            #region  dept
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.dept(userCode, unitid_mst, out defval);
            model[0].SelectedItems3 = new string[] { "" };
            #endregion
            #region  desg
            TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4 = cmd_Fun.desig(userCode, unitid_mst, out defval);
            model[0].SelectedItems4 = new string[] { "" };
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult good_wishes(List<Tmodelmain> model, string command)
        {
            try
            {
                string fdt = "", tdt = "";
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                DataTable dt = new DataTable();
                if (sgen.GetSession(MyGuid, "KPDCMD") != null)
                {
                    if (sgen.GetSession(MyGuid, "KPDFDT") != null) fdt = sgen.GetSession(MyGuid, "KPDFDT").ToString();
                    if (sgen.GetSession(MyGuid, "KPDTDT") != null) tdt = sgen.GetSession(MyGuid, "KPDTDT").ToString();
                    if (sgen.GetSession(MyGuid, "KPDCMD") != null) command = sgen.GetSession(MyGuid, "KPDCMD").ToString();
                    string tcp = "", tut = "", tfromdt = "", ttodate = "";
                    try
                    {
                        tcp = sgen.GetSession(MyGuid, "KDDL_CL").ToString();
                        tut = sgen.GetSession(MyGuid, "KDDL_UT").ToString();
                        tfromdt = sgen.GetSession(MyGuid, "TXTFROMDATE").ToString();
                        ttodate = sgen.GetSession(MyGuid, "TXTTODATE").ToString();
                    }
                    catch (Exception err)
                    {
                    }
                }
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];



                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (command == "New")
                {
                    model = getnew(model);
                }
                else if (command == "Previous Message")
                {
                    sgen.SetSession(MyGuid, "KPDCMD", null);
                    sgen.SetSession(MyGuid, "btnval", "PRV");
                    mq = " Select a.vch_num as fstr, a.vch_num doc_no,to_char(convert_tz(a.vch_date, 'UTC', '" + sgen.Gettimezone() + "')," +
                                    " '" + sgen.Getsqldateformat() + "') as doc_date,to_char(convert_tz(a.date1, 'UTC', '" + sgen.Gettimezone() + "')," +
                                    " '" + sgen.Getsqldateformat() + "') as From_Date,to_char(convert_tz(a.date2, 'UTC', '" + sgen.Gettimezone() + "')," +
                                    " '" + sgen.Getsqldateformat() + "') To_Date,Col31 as DOB_Message,Col32 as DOA_Message from kc_tab a where type='HRW' and " +
                                    " client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and to_date(to_char(a.vch_date,'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') between " +
                    "to_date('" + fdt + "','" + sgen.Getsqldateformat() + "') and to_date('" + tdt + "','" + sgen.Getsqldateformat() + "') ORDER BY VCH_NUM ASC ";

                    sgen.open_grid("Previous Messages List", mq, 1);
                    ViewBag.scripCall = "callFoo('Previous Messages List');";
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    string cond = "";
                    string comm = string.Join(",", model[0].SelectedItems1);
                    comm = comm.Replace("'", "");
                    if (comm.Contains(',')) { cond = "and ((a.cplandno!='0000000000' and a.cplandno!='0') or( a.cpemail!='ab@ab.ab' and a.cpemail!='0'))"; }
                    else
                    {
                        if (comm == "SMS")
                        { cond = "and a.cplandno!='0000000000' and a.cplandno!='0'"; }
                        else { cond = "and  a.cpemail!='ab@ab.ab' and  a.cpemail!='0'"; }
                    }

                    string FromDt = sgen.SaveDate_dt(model[0].Col17.Trim(), true).ToString("MMdd", CultureInfo.InvariantCulture);
                    string todt = sgen.SaveDate_dt(model[0].Col18.Trim(), true).ToString("MMdd", CultureInfo.InvariantCulture);
                    string dept_desig = "";
                    if ((model[0].SelectedItems3.FirstOrDefault() != null) && (model[0].SelectedItems3.FirstOrDefault() != ""))
                    {


                        dept_desig = "and emp.emp_dept in ('" + string.Join("','", model[0].SelectedItems3) + "')";
                    }

                    if ((model[0].SelectedItems4.FirstOrDefault() != null) && (model[0].SelectedItems4.FirstOrDefault() != ""))
                    {

                        dept_desig = "and emp.emp_desig in ('" + string.Join("','", model[0].SelectedItems4) + "')";
                    }




                    mq = "select emp.vch_num, emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','') as Employee_Name," +
                            "emp.emp_code as Employee_Code,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as DOB,to_char(emp.dom,'" + sgen.Getsqldateformat() + "') as DOA," +
                            "(case when emp.contact_no='0' then '-' else  emp.contact_no end ) as ContactNo,( case when emp.email_id='0' then '-' else emp.email_id  end) as Per_Email,nvl(dp.master_name,'-') Dept,nvl(dg.master_name,'-') Desig" +
                            " from emp_master emp  left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                                "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                            "WHERE emp.client_unit_id= '" + unitid_mst + "' and emp.type= 'EMP' and(to_number(to_char(emp.DOB, 'MMdd')) between " + FromDt + " and " + todt + "" +
                            " or to_number(to_char(emp.DOm, 'MMdd')) between " + FromDt + " and " + todt + ") " + dept_desig + " order by emp.emp_code asc";



                    dt = sgen.getdata(userCode, mq);
                    model = new List<Tmodelmain>();
                    if (dt.Rows.Count > 0)
                    {
                        string dobtext = "", doatext = "";
                        DataTable pdt = sgen.getdata(userCode, "select  col31,col32 from kc_tab where type='HRW' and client_unit_id='" + unitid_mst + "' " +
                            "and vch_num in (select max(vch_num) from kc_tab where type='HRW' and client_unit_id='" + unitid_mst + "')");
                        if (pdt.Rows.Count > 0)
                        {
                            dobtext = pdt.Rows[0]["Col31"].ToString();
                            doatext = pdt.Rows[0]["Col32"].ToString();
                        }
                        else
                        {
                            dobtext = "Wish You A Very Happy BirthDay";
                            doatext = "Wish You A Very Happy Anniversary";
                        }
                        ViewBag.vfill = "disabled='disabled'";
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            Boolean chk1 = true;
                            if ((dt.Rows[i]["ContactNo"].ToString()) == "-" && (dt.Rows[i]["Per_Email"].ToString() == "-"))
                            {
                                chk1 = false;
                            }
                            tmm.Col19 = dt.Rows[i]["vch_num"].ToString();
                            tmm.Col20 = dt.Rows[i]["Employee_Name"].ToString();
                            tmm.Col21 = dt.Rows[i]["Dept"].ToString();
                            tmm.Col22 = dt.Rows[i]["Desig"].ToString();
                            tmm.Col23 = dt.Rows[i]["ContactNo"].ToString();
                            tmm.Col24 = dt.Rows[i]["Per_Email"].ToString();
                            tmm.Col25 = dt.Rows[i]["DOB"].ToString();
                            tmm.Col26 = dt.Rows[i]["DOA"].ToString();

                            tmm.Col27 = dobtext;
                            tmm.Col28 = doatext;
                            tmm.Chk1 = chk1;
                            tmm.Chk2 = chk1;
                            tmm.Chk3 = chk1;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col17 = tm.Col17;
                            tmm.Col18 = tm.Col18;
                            tmm.Col30 = tm.Col30;
                            tmm.Col31 = tm.Col31;
                            tmm.Col32 = tm.Col32;
                            tmm.Col27 = dobtext;
                            tmm.Col28 = doatext;
                            tmm.Chk4 = tm.Chk4;
                            tmm.Chk5 = tm.Chk5;
                            tmm.Chk6 = tm.Chk6;
                            tmm.Col31 = tm.Col31;
                            tmm.TList1 = tm.TList1;
                            tmm.TList2 = tm.TList2;
                            tmm.TList3 = tm.TList3;
                            tmm.TList4 = tm.TList4;
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            tmm.SelectedItems2 = tm.SelectedItems2;
                            tmm.SelectedItems3 = tm.SelectedItems3;
                            tmm.SelectedItems4 = tm.SelectedItems4;
                            model.Add(tmm);
                        }
                    }
                    else
                    {
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'No Data Exist');";
                        ViewBag.vsend = "disabled='disabled'";
                        model = new List<Tmodelmain>();
                        tm.Col16 = "";
                        tm.Col17 = tm.Col17;
                        tm.Col18 = tm.Col18;
                        tm.Col19 = "";
                        model.Add(tm);
                    }
                }
                else if (command == "Send")
                {
                    string emailidcc = "";
                    string msg_txt = "";
                    BulkSMS bulk = new BulkSMS(userCode, clientid_mst, unitid_mst, MyGuid);
                    string emp = "";
                    string dept = "";
                    string desg = "";
                    string mobile = "";
                    string email = "";
                    int cnt = 0;
                    string[] ddlsend = string.Join(",", model[0].SelectedItems1).Split(',');
                    string comm = string.Join(",", model[0].SelectedItems1);
                    comm = comm.Replace("'", "");
                    string Email_id = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string cond = "", found = "";
                    DataTable dtstr = new DataTable();
                    string dobacc = "", refbacc = "", refaacc = "", doaacc = "";
                    for (int i = 0; i < model.Count; i++)
                    {
                        //foreach (string comm_type in ddlsend)
                        {
                            //if (comm_type == "SMS")
                            {
                                if (cnt == 0)
                                {
                                    if ((model[0].Col30 != ""))
                                    {
                                        if (model[0].Col30 != null)
                                        {
                                            string[] ph_cc = (model[0].Col30.Split(','));
                                            string phone_cc = "";
                                            for (Int32 y = 0; y < ph_cc.Length; y++)
                                            {
                                                phone_cc = ph_cc[y];
                                                if ((phone_cc != "0"))
                                                {
                                                    msg_txt = sgen.ExtractHtmlInnerText(model[0].Col26.Replace("\r\n", " %0a "));
                                                    string smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, phone_cc, msg_txt, model[0].Col31 == "2");
                                                    msg_txt = sgen.ExtractHtmlInnerText(model[0].Col29.Replace("\r\n", " %0a "));
                                                    bulk.Add_sms(phone_cc, msg_txt, model[0].Col31 == "2");
                                                    smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, phone_cc, msg_txt, model[0].Col31 == "2");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (model[i].Chk1 == true)
                        {
                            foreach (string comm_type in ddlsend)
                            {
                                if (comm_type == "SMS")
                                {

                                    if (model[i].Chk2 == true)
                                    {
                                        if ((model[i].Col23 != "-") && (model[i].Col23 != "0"))
                                        {
                                            cnt = cnt + 1;
                                            msg_txt = sgen.ExtractHtmlInnerText(model[0].Col27.Replace("\r\n", " %0a ")) + "";
                                            emp = model[i].Col20;
                                            dept = model[i].Col21;
                                            desg = model[i].Col22;
                                            mobile = model[i].Col23;
                                            email = model[i].Col24;
                                            msg_txt = msg_txt.Replace("[employee name]", emp);
                                            msg_txt = msg_txt.Replace("[department]", dept);
                                            msg_txt = msg_txt.Replace("[designation]", desg);
                                            msg_txt = msg_txt.Replace("[mobile]", mobile);
                                            msg_txt = msg_txt.Replace("[email]", email);


                                            if (dobacc.Equals(""))
                                            {
                                                dobacc = model[i].Col19;

                                            }
                                            else
                                            {
                                                dobacc = dobacc + "," + model[i].Col19;

                                            }

                                            string smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, model[i].Col23, msg_txt, model[0].Col31 == "2");
                                        }
                                    }
                                    if (model[i].Chk3 == true)
                                    {
                                        if ((model[i].Col23 != "-") && (model[i].Col23 != "0"))
                                        {
                                            cnt = cnt + 1;
                                            msg_txt = sgen.ExtractHtmlInnerText(model[0].Col28.Replace("\r\n", " %0a ")) + "";
                                            emp = model[i].Col20;
                                            dept = model[i].Col21;
                                            desg = model[i].Col22;
                                            mobile = model[i].Col23;
                                            email = model[i].Col24;
                                            msg_txt = msg_txt.Replace("[employee name]", emp);
                                            msg_txt = msg_txt.Replace("[department]", dept);
                                            msg_txt = msg_txt.Replace("[designation]", desg);
                                            msg_txt = msg_txt.Replace("[mobile]", mobile);
                                            msg_txt = msg_txt.Replace("[email]", email);
                                            if (doaacc.Equals(""))
                                            {
                                                doaacc = model[i].Col19;

                                            }
                                            else
                                            {
                                                doaacc = doaacc + "," + model[i].Col19;

                                            }
                                            //bulk.Add_sms(model[i].Col22, msg_txt, false);
                                            //bulk.Add_sms(model[i].Col22, msg_txt, model[0].Col31 == "2");
                                            string smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, model[i].Col23, msg_txt, model[0].Col31 == "2");
                                        }
                                    }
                                }
                                try
                                {
                                    if (comm_type == "Email") // 
                                    {
                                        #region SEND MAIL
                                        string mailfrom = "";
                                        DataTable datatable = new DataTable();
                                        datatable = sgen.getdata(userCode, "select com_email from company_profile where Company_Profile_Id='" + clientid_mst + "' and type='CP'");
                                        if (datatable.Rows.Count > 0)
                                        {
                                            mailfrom = Convert.ToString(datatable.Rows[0]["com_email"]);
                                        }
                                        string mailcc = string.Join(",", model[0].SelectedItems2);
                                        mailcc = mailcc.Replace("'", "");
                                        string[] itar = mailcc.Trim().Split(',');
                                        if ((model[0].SelectedItems2.FirstOrDefault() != null) && (model[0].SelectedItems2.FirstOrDefault() != ""))
                                        {
                                            if (itar.Length > 0)
                                            {
                                                for (Int32 y = 0; y < itar.Length; y++)
                                                {
                                                    string[] Emialar = itar[y].Replace("(", "").Replace(")", "").Trim().Split(' ');
                                                    if (sgen.ValidateEmail(Emialar[1].ToString()))
                                                    {
                                                        if (emailidcc.Equals("")) emailidcc = Emialar[1].ToString();
                                                        else
                                                        {
                                                            emailidcc = emailidcc + "," + Emialar[1].ToString();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (model[i].Chk2 == true)
                                        {
                                            string xtitle = "";
                                            cnt = cnt + 1;
                                            msg_txt = sgen.ExtractHtmlInnerText(model[0].Col27.Replace("\r\n", " %0a ")) + "";
                                            emp = model[i].Col20;
                                            dept = model[i].Col21;
                                            desg = model[i].Col22;
                                            mobile = model[i].Col23;
                                            email = model[i].Col24;
                                            msg_txt = msg_txt.Replace("[employee name]", emp);
                                            msg_txt = msg_txt.Replace("[department]", dept);
                                            msg_txt = msg_txt.Replace("[designation]", desg);
                                            msg_txt = msg_txt.Replace("[mobile]", mobile);
                                            msg_txt = msg_txt.Replace("[email]", email);
                                            var body = new StringBuilder();
                                            body.AppendLine(@"<b style='color:#3caee9; font-size: 20px'> " + model[0].Col32 + " </b><br /><hr style='border:1px solid black' />" +
                                                 "<p>Hi <b>Dear: </b>,</p><table style='font-weight:600'>");
                                            body.AppendLine(@"</table><br /><p>" + msg_txt + "</p><p>ThankYou,<br />" + clientname_mst + "<br /></p><br />");
                                            sgen.Send_mail_SA1(userCode, clientid_mst, unitid_mst, email, emailidcc, model[i].Col24, body.ToString(), "Good Wishes", "");
                                        }
                                        #endregion
                                    }
                                }
                                catch (Exception err) { }
                            }
                        }
                    }
                    bulk.Send_SMS_Bulk();
                    if (cnt > 0)
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                        dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                        DataRow dr = dtstr.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = currdate;
                        dr["COl31"] = model[0].Col27;//DOB MSG
                        dr["COl32"] = model[0].Col28; //DOA MSG
                        dr["COl41"] = dobacc;
                        dr["COl48"] = doaacc;

                        dr["COl1"] = comm;
                        dr["date1"] = sgen.Make_date_S(model[0].Col17);
                        dr["date2"] = sgen.Make_date_S(model[0].Col18);
                        dr["COl33"] = model[0].Col32; //Mail Heading
                        dr["COl2"] = model[0].Col30; //phone cc
                        dr["COl35"] = emailidcc;  //Mail cc
                        dr["COl5"] = model[0].Col31; //language type
                        dr = getsave(currdate, dr, model);
                        dtstr.Rows.Add(dr);
                        bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10.Trim(), tmodel.Col8, isedit);
                        ViewBag.fill = "";
                        ViewBag.vsend = "disabled='disabled'";
                        ViewBag.scripCall = "enableForm();";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Wish Send Successfully');disableForm();";
                    }
                    model = new List<Tmodelmain>();
                    model.Add(new Tmodelmain
                    {
                        Col9 = tm.Col9,
                        Col10 = tm.Col10,
                        Col11 = tm.Col11,
                        Col12 = tm.Col12,
                        Col13 = "Save",
                        Col14 = tm.Col14,
                        Col15 = tm.Col15,
                        TList1 = tm.TList1,
                        SelectedItems1 = tm.SelectedItems1,
                        TList2 = tm.TList2,
                        SelectedItems2 = tm.SelectedItems2,
                        TList3 = tm.TList3,
                        SelectedItems3 = tm.SelectedItems3,
                        TList4 = tm.TList4,
                        SelectedItems4 = tm.SelectedItems4,
                    });
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region gen_msg
        public ActionResult gen_msg()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            //ViewBag.vsave = "";
            ViewBag.scripCall = "enableForm();";
            ViewBag.vsend = "disabled='disabled'";
            model[0].Col9 = "GENERAL MESSAGE";
            model[0].Col10 = "kc_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "HRG";
            model[0].Col19 = "1";
            model[0].Col28 = "3";
            string defval = "";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            #region MOC 1
            mod1 = new List<SelectListItem>();
            DataTable dt = sgen.getdata(userCode, "select 'SMS' as communication from dual Union all select 'Email' as communication from dual ");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["communication"].ToString(), Value = dr["communication"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            #endregion
            #region Mail cc 2
            mq2 = "select user_id||' ('||nvl(email,'-')||')' name  FROM user_details WHERE type<>'STD' and type<>'STP' ";
            dt = sgen.getdata(userCode, mq2);
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod2.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["name"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            #endregion
            #region  dept
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.dept(userCode, unitid_mst, out defval);
            model[0].SelectedItems3 = new string[] { "" };
            #endregion
            #region  desg
            TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4 = cmd_Fun.desig(userCode, unitid_mst, out defval);
            model[0].SelectedItems4 = new string[] { "" };
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult gen_msg(List<Tmodelmain> model, string command, string mid)
        {
            try
            {
                string fdt = "", tdt = "";
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                DataTable dt = new DataTable();
                if (sgen.GetSession(MyGuid, "KPDCMD") != null)
                {
                    if (sgen.GetSession(MyGuid, "KPDFDT") != null) fdt = sgen.GetSession(MyGuid, "KPDFDT").ToString();
                    if (sgen.GetSession(MyGuid, "KPDTDT") != null) tdt = sgen.GetSession(MyGuid, "KPDTDT").ToString();
                    if (sgen.GetSession(MyGuid, "KPDCMD") != null) command = sgen.GetSession(MyGuid, "KPDCMD").ToString();
                    string tcp = "", tut = "", tfromdt = "", ttodate = "";
                    try
                    {
                        tcp = sgen.GetSession(MyGuid, "KDDL_CL").ToString();
                        tut = sgen.GetSession(MyGuid, "KDDL_UT").ToString();
                        tfromdt = sgen.GetSession(MyGuid, "TXTFROMDATE").ToString();
                        ttodate = sgen.GetSession(MyGuid, "TXTTODATE").ToString();
                    }
                    catch (Exception err) { }
                }
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };

                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Previous Message")
                {
                    sgen.SetSession(MyGuid, "KPDCMD", null);
                    mq = "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr, a.vch_num doc_no," +
                        "to_char(convert_tz(a.vch_date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as doc_date," +
                        "  emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','') as Employee_Name" +
                        ",a.col31 as Message_Text from kc_tab a inner join emp_master emp on " +
                        "find_in_set(a.col41,emp.vch_num) = 1 and a.client_unit_id = emp.client_unit_id and emp.type='EMP' " +
                        "where a.type = 'HRG' and a.client_unit_id = '" + unitid_mst + "'  and" +
                        " to_date(to_char(a.vch_date,'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') between " +
                    "to_date('" + fdt + "','" + sgen.Getsqldateformat() + "') and to_date('" + tdt + "','" + sgen.Getsqldateformat() + "')" +
                    " ORDER BY a.VCH_NUM ASC ";

                    sgen.open_grid("Previous Messages List", mq, 0);
                    ViewBag.scripCall = "callFoo('Previous Messages List');";
                }
                else if (command == "Fill Data")
                {
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    string cond = "";
                    string comm = string.Join(",", model[0].SelectedItems1);
                    comm = comm.Replace("'", "");
                    if (comm.Contains(',')) { cond = "and ((a.cplandno!='0000000000' and a.cplandno!='0') or( a.cpemail!='ab@ab.ab' and a.cpemail!='0'))"; }
                    else
                    {
                        if (comm == "SMS")
                        { cond = "and a.cplandno!='0000000000' and a.cplandno!='0'"; }
                        else { cond = "and  a.cpemail!='ab@ab.ab' and  a.cpemail!='0'"; }
                    }
                    string cont_type = "", client_type = "";
                    mq1 = ""; mq2 = ""; mq3 = "";
                    string date_filter = "";
                    ViewBag.vfill = "disabled='disabled'";

                    if ((model[0].Col30 != null) && (model[0].Col31 != null))
                    {
                        string Fromdt = sgen.SaveDate_dt(model[0].Col30, true).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                        string todt = sgen.SaveDate_dt(model[0].Col31, true).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                        date_filter = "and to_date(to_char(emp.created_date, 'ddmmyyyy'), 'ddmmyyyy') BETWEEN TO_DATE('" + Fromdt + "','yyyy-MM-dd')  AND " +
                                             "TO_DATE('" + todt + "','yyyy-MM-dd')";
                    }
                    string dept_desig = "";
                    if ((model[0].SelectedItems3.FirstOrDefault() != null) && (model[0].SelectedItems3.FirstOrDefault() != ""))
                    {

                        dept_desig = "and emp.emp_dept in ('" + string.Join("','", model[0].SelectedItems3) + "')";
                    }

                    if ((model[0].SelectedItems4.FirstOrDefault() != null) && (model[0].SelectedItems4.FirstOrDefault() != ""))
                    {

                        dept_desig = "and emp.emp_desig in ('" + string.Join("','", model[0].SelectedItems4) + "')";
                    }



                    mq = "select emp.vch_num, emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','') as Employee_Name," +
                            "emp.emp_code as Employee_Code,to_char(emp.dob,'" + sgen.Getsqldateformat() + "') as DOB,to_char(emp.dom,'" + sgen.Getsqldateformat() + "') as DOA," +
                            "(case when emp.contact_no='0' then '-' else  emp.contact_no end ) as ContactNo" +
                            ",( case when emp.email_id='0' then '-' else emp.email_id  end) as Per_Email,nvl(dp.master_name,'-') Dept,nvl(dg.master_name,'-') Desig" +
                            " from emp_master emp  left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_unit_id, emp.client_unit_id)= 1 " +
                                "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id, emp.client_unit_id)= 1 " +
                            "WHERE emp.client_unit_id= '" + unitid_mst + "'  and emp.type= 'EMP' " + date_filter + " " + dept_desig + " order by emp.emp_code asc";



                    if (mq != "")
                    {

                        dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            model = new List<Tmodelmain>();
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                Tmodelmain tmm = new Tmodelmain();
                                tmm.Col23 = dt.Rows[i]["Employee_Name"].ToString();
                                tmm.Col24 = dt.Rows[i]["Dept"].ToString();
                                tmm.Col25 = dt.Rows[i]["Desig"].ToString();
                                tmm.Col26 = dt.Rows[i]["ContactNo"].ToString();
                                tmm.Col27 = dt.Rows[i]["Per_Email"].ToString();
                                tmm.Col29 = dt.Rows[i]["vch_num"].ToString();
                                tmm.Chk1 = tm.Chk1;
                                tmm.Chk2 = tm.Chk2;
                                tmm.Chk3 = tm.Chk3;
                                tmm.Chk4 = tm.Chk4;
                                tmm.Chk5 = tm.Chk5;
                                tmm.Chk6 = tm.Chk6;
                                tmm.Col17 = tm.Col17;
                                tmm.Col18 = tm.Col18;
                                tmm.Col28 = tm.Col28;
                                tmm.Col19 = tm.Col19;
                                tmm.Col20 = tm.Col20;
                                tmm.Col9 = tm.Col9;
                                tmm.Col10 = tm.Col10;
                                tmm.Col11 = tm.Col11;
                                tmm.Col12 = tm.Col12;
                                tmm.Col14 = tm.Col14;
                                tmm.Col15 = tm.Col15;
                                tmm.Col30 = tm.Col30;
                                tmm.Col31 = tm.Col31;
                                tmm.TList1 = tm.TList1;
                                tmm.TList2 = tm.TList2;
                                tmm.TList3 = tm.TList3;
                                tmm.TList4 = tm.TList4;
                                tmm.SelectedItems1 = tm.SelectedItems1;
                                tmm.SelectedItems2 = tm.SelectedItems2;
                                tmm.SelectedItems3 = tm.SelectedItems3;
                                tmm.SelectedItems4 = tm.SelectedItems4;
                                model.Add(tmm);
                            }
                        }
                        else
                        {


                            ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'No Data Exist');";
                            return View(model);
                        }
                    }
                }
                else if (command == "Send")
                {
                    string xtitle = "", msg_txt = "", emailidcc = "";
                    BulkSMS bulk = new BulkSMS(userCode, clientid_mst, unitid_mst, MyGuid);
                    string[] ddlsend = string.Join(",", model[0].SelectedItems1).Split(',');
                    string comm = string.Join(",", model[0].SelectedItems1);
                    comm = comm.Replace("'", "");
                    string Email_id = "";
                    try
                    {
                        for (int i = 0; i < model.Count; i++)
                        {
                            if (model[i].Col27 == null) { model[i].Col27 = "-"; }
                            if (sgen.ValidateEmail(model[i].Col27.ToString()))
                            {
                                if ((model[i].Col27 != "") && (model[i].Col27 != "-") && (model[i].Col27 != "0"))
                                {
                                    if (Email_id.Equals("")) Email_id = model[i].Col27;
                                    else
                                    {
                                        Email_id = Email_id + "," + model[i].Col27;
                                    }
                                }
                            }
                        }
                    }
                    catch { }
                    string acc_id = "";
                    foreach (string comm_type in ddlsend)
                    {
                        {
                            if ((model[0].Col18 != ""))
                            {
                                if (model[0].Col18 != null)
                                {
                                    string[] ph_cc = (model[0].Col18.Split(','));
                                    string phone_cc = "";
                                    for (Int32 y = 0; y < ph_cc.Length; y++)
                                    {
                                        phone_cc = ph_cc[y];
                                        if ((phone_cc != "0"))
                                        {
                                            msg_txt = sgen.ExtractHtmlInnerText(model[0].Col20.Replace("\r\n", " %0a "));
                                            string smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, phone_cc, msg_txt, model[0].Col19 == "2");

                                        }
                                    }
                                }
                            }
                        }
                        if (((comm_type == "SMS") && model[0].Col28 == "3"))
                        {
                            try
                            {
                                for (int i = 0; i < model.Count; i++)
                                {
                                    if (model[i].Chk6 == true)
                                    {
                                        if ((model[i].Col26 != "") && (model[i].Col26 != "-") && (model[i].Col26 != "0"))
                                        {
                                            msg_txt = sgen.ExtractHtmlInnerText(model[0].Col20.Replace("\r\n", " %0a ")) + "";
                                            string emp = model[i].Col23;
                                            string dept = model[i].Col24;
                                            string desig = model[i].Col25;
                                            string mobile = model[i].Col26;
                                            string email = model[i].Col27;
                                            msg_txt = msg_txt.Replace("[employee name]", emp);
                                            msg_txt = msg_txt.Replace("[department]", dept);
                                            msg_txt = msg_txt.Replace("[designation]", desig);
                                            msg_txt = msg_txt.Replace("[mobile]", mobile);
                                            msg_txt = msg_txt.Replace("[email]", email);
                                            if (acc_id.Equals("")) acc_id = model[i].Col29;
                                            else
                                            {
                                                acc_id = acc_id + "," + model[i].Col29;
                                            }
                                            // [acount] , [person] , [mobile] , [email]
                                            bulk.Add_sms(model[i].Col26, msg_txt, model[0].Col19 == "2");
                                            string smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, model[i].Col26, msg_txt, model[0].Col19 == "2");
                                        }
                                    }
                                }
                            }
                            catch (Exception err) { bulk.Send_SMS_Bulk(); }
                        }
                        if (((comm_type == "SMS") && model[0].Col28 == "1"))
                        {
                            try
                            {
                                for (int i = 0; i < model.Count; i++)
                                {
                                    if (model[i].Chk6 == true)
                                    {
                                        if (acc_id.Equals("")) acc_id = model[i].Col29;
                                        else
                                        {
                                            acc_id = acc_id + "," + model[i].Col29;
                                        }
                                        msg_txt = sgen.ExtractHtmlInnerText(model[0].Col20.Replace("\r\n", " %0a ")) + "";
                                        string emp = model[i].Col23;
                                        string dept = model[i].Col24;
                                        string desig = model[i].Col25;
                                        string mobile = model[i].Col26;
                                        string email = model[i].Col27;
                                        msg_txt = msg_txt.Replace("[employee name]", emp);
                                        msg_txt = msg_txt.Replace("[department]", dept);
                                        msg_txt = msg_txt.Replace("[designation]", desig);
                                        msg_txt = msg_txt.Replace("[mobile]", mobile);
                                        msg_txt = msg_txt.Replace("[email]", email);
                                        if ((model[i].Col26 != "") && (model[i].Col26 != "-") && (model[i].Col26 != "0"))
                                        {
                                            bulk.Add_sms(model[i].Col26, msg_txt, model[0].Col19 == "2");
                                        }
                                    }
                                }
                            }
                            catch (Exception err) { bulk.Send_SMS_Bulk(); }
                            bulk.Send_SMS_Bulk();
                        }
                        try
                        {
                            if (comm_type == "Email") // 
                            {
                                if ((model[0].SelectedItems2.FirstOrDefault() != "") || (model[0].SelectedItems2.FirstOrDefault() != "0"))
                                {
                                    string mailcc = string.Join(",", model[0].SelectedItems2);
                                    if (mailcc != "")
                                    {
                                        mailcc = mailcc.Replace("'", "");
                                        string[] itar = mailcc.Trim().Split(',');
                                        if (itar.Length > 0)
                                        {
                                            for (Int32 a = 0; a < itar.Length; a++)
                                            {
                                                string[] Emialar = itar[a].Replace("(", "").Replace(")", "").Trim().Split(' ');
                                                if (sgen.ValidateEmail(Emialar[1].ToString()))
                                                {
                                                    if (emailidcc.Equals("")) emailidcc = Emialar[1].ToString();
                                                    else
                                                    {
                                                        emailidcc = emailidcc + "," + Emialar[1].ToString();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                for (int i = 0; i < model.Count; i++)
                                {
                                    #region SEND MAIL
                                    string mailfrom = "";
                                    DataTable datatable = new DataTable();
                                    datatable = sgen.getdata(userCode, "select com_email from company_profile where Company_Profile_Id='" + clientid_mst + "' and type='CP'");
                                    if (datatable.Rows.Count > 0)
                                    {
                                        mailfrom = Convert.ToString(datatable.Rows[0]["com_email"]);
                                    }
                                    if (model[0].Col28 == "3") //indiv
                                    {
                                        xtitle = "";
                                        if (model[i].Chk6 == true)
                                        {
                                            if (sgen.ValidateEmail(model[0].Col27.ToString()))
                                            {
                                                if ((model[i].Col27 != "") && (model[i].Col27 != "-") && (model[i].Col27 != "0"))
                                                {
                                                    msg_txt = sgen.ExtractHtmlInnerText(model[0].Col20.Replace("\r\n", " %0a ")) + "";
                                                    string emp = model[i].Col23;
                                                    string dept = model[i].Col24;
                                                    string desig = model[i].Col25;
                                                    string mobile = model[i].Col26;
                                                    string email = model[i].Col27;
                                                    msg_txt = msg_txt.Replace("[employee name]", emp);
                                                    msg_txt = msg_txt.Replace("[department]", dept);
                                                    msg_txt = msg_txt.Replace("[designation]", desig);
                                                    msg_txt = msg_txt.Replace("[mobile]", mobile);
                                                    msg_txt = msg_txt.Replace("[email]", email);
                                                    Email_id = model[i].Col27;
                                                    emailidcc = model[i].Col27;
                                                    if (acc_id.Equals("")) acc_id = model[i].Col29;
                                                    else
                                                    {
                                                        acc_id = acc_id + "," + model[i].Col29;
                                                    }
                                                    var body = new StringBuilder();
                                                    body.AppendLine(@"<b style='color:#3caee9; font-size: 20px'>" + model[0].Col17 + " </b><br /><hr style='border:1px solid black' />" +
                                                         "<p>Hi <b>Dear: </b>,</p><table style='font-weight:600'>");
                                                    if (model[0].Chk4 == true)
                                                    {
                                                        body.AppendLine(@"</table><br /><p>" + msg_txt + "</p><p>ThankYou,<br />" + model[0].Col21 + "<br /></p><br />");
                                                    }
                                                    else
                                                    {
                                                        body.AppendLine(@"</table><br /><p>" + msg_txt + "</p><p>ThankYou,<br />" + clientname_mst + "<br /></p><br />");
                                                    }
                                                    sgen.Send_mail_SA1(userCode, clientid_mst, unitid_mst, Email_id, emailidcc, "", body.ToString(), model[0].Col17, "");
                                                }
                                            }
                                        }
                                    }
                                    if (model[0].Col28 == "1")//  all comman
                                    {
                                        Mailer mailer = new Mailer(userCode, clientid_mst, unitid_mst, MyGuid);
                                        var body = new StringBuilder();
                                        if (model[i].Chk6 == true)
                                        {
                                            if (sgen.ValidateEmail(model[0].Col29.ToString()))
                                            {
                                                if ((model[i].Col27 != "") && (model[i].Col27 != "-") && (model[i].Col27 != "0"))
                                                {
                                                    msg_txt = sgen.ExtractHtmlInnerText(model[0].Col20.Replace("\r\n", " %0a ")) + "";
                                                    string emp = model[i].Col23;
                                                    string dept = model[i].Col24;
                                                    string desig = model[i].Col25;
                                                    string mobile = model[i].Col26;
                                                    string email = model[i].Col27;
                                                    msg_txt = msg_txt.Replace("[employee name]", emp);
                                                    msg_txt = msg_txt.Replace("[department]", dept);
                                                    msg_txt = msg_txt.Replace("[designation]", desig);
                                                    msg_txt = msg_txt.Replace("[mobile]", mobile);
                                                    msg_txt = msg_txt.Replace("[email]", email);
                                                    Email_id = model[i].Col27;
                                                    emailidcc = model[i].Col27;
                                                    xtitle = "";
                                                    if (acc_id.Equals("")) acc_id = model[i].Col29;
                                                    else
                                                    {
                                                        acc_id = acc_id + "," + model[i].Col29;
                                                    }
                                                    body.AppendLine(@"<b style='color:#3caee9; font-size: 20px'>" + model[i].Col17 + " </b><br /><hr style='border:1px solid black' />" +
                                                 "<table style='font-weight:600'>");
                                                    if (model[i].Chk3 == true)
                                                    {
                                                        body.AppendLine(@"</table><br /><p>" + model[i].Col22 + "</p><p>ThankYou,<br />" + model[i].Col23 + "<br /></p><br />");
                                                    }
                                                    else
                                                    {
                                                        body.AppendLine(@"</table><br /><p>" + model[i].Col22 + "</p><p>ThankYou,<br />" + clientname_mst + "<br /></p><br />");
                                                    }
                                                    sgen.Send_mail_SA1(userCode, clientid_mst, unitid_mst, Email_id, emailidcc, "", body.ToString(), model[i].Col17, "");
                                                }
                                                {
                                                    mailer.Add_Mail(model[0].Col29.ToString(), model[0].Col17.ToString(), body.ToString());
                                                }
                                            }
                                        }
                                        //}
                                        mailer.Send_Email_Bulk();
                                    }
                                    #endregion
                                }
                            }
                        }
                        catch (Exception err) { }
                    }
                    if (acc_id != "")
                    {
                        string currdate = sgen.server_datetime(userCode);
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                        DataTable dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                        DataRow dr = dtstr.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = sgen.Savedate(model[0].Col17, false);
                        dr["COl31"] = model[0].Col20;// MSG
                        dr["COl41"] = acc_id;
                        //dr["date1"] = sgen.Make_date_S(model[0].Col17);
                        //dr["date2"] = sgen.Make_date_S(model[0].Col18);
                        dr["COl33"] = model[0].Col17; //Mail Heading
                        dr["COl2"] = model[0].Col18; //phone cc
                        dr["COl35"] = emailidcc;  //Mail cc
                        dr["COl2"] = model[0].Col19; //language type
                        dr["COl3"] = model[0].Col28; //Message  type
                        dr = getsave(currdate, dr, model);
                        dtstr.Rows.Add(dr);
                        bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10.Trim(), "", false);
                        ViewBag.fill = "";
                        ViewBag.vsend = "disabled='disabled'";
                        ViewBag.scripCall = "enableForm();";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Wish Send Successfully');";
                    }
                    model = new List<Tmodelmain>();
                    model.Add(new Tmodelmain
                    {
                        Col9 = tm.Col9,
                        Col10 = tm.Col10,
                        Col11 = tm.Col11,
                        Col12 = tm.Col12,
                        Col13 = "Save",
                        Col14 = tm.Col14,
                        Col15 = tm.Col15,
                        TList1 = tm.TList1,
                        SelectedItems1 = tm.SelectedItems1,
                        TList2 = tm.TList2,
                        SelectedItems2 = tm.SelectedItems2,
                        TList3 = tm.TList3,
                        SelectedItems3 = tm.SelectedItems3,
                        TList4 = tm.TList4,
                        SelectedItems4 = tm.SelectedItems4,
                    });
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region overview
        public ActionResult overview()
        {
            FillMst();
            DataTable dt = new DataTable();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "OVERVIEW";
            model[0].Col10 = "emp_master";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "EMP";

            try
            {
                model[0].dt1 = null;
                mq = "select upper(e.emp_code) empcode,upper(e.first_name||replace(e.middle_name,'0','')||replace(e.last_name,'0','')) empname," +
                    "(upper(d.master_name)||' ('|| upper(g.master_name)||')') deptdesig,to_char(e.dob, '" + sgen.Getsqldateformat() + "') dob,to_char(e.dob, 'DD') dy," +
                    "to_char(e.dob, 'Month') mm,to_char(e.dob, 'Mon') sm from emp_master e " +
                    "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                    "inner join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' and find_in_set(g.client_unit_id,'" + unitid_mst + "')= 1 " +
                    "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' and e.emp_status='Y' and to_date(to_char(e.dob, 'ddMM'),'ddMM') between " +
                    "to_date(to_char(sysdate, 'ddMM'),'ddMM') and to_date(to_char(sysdate,'ddMM'),'ddMM')+30 ORDER BY e.vch_num asc";
                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0) { model[0].dt1 = dt; }

                dt = new DataTable();
                model[0].dt2 = null;
                mq = "select upper(e.emp_code) empcode,upper(e.first_name||replace(e.middle_name,'0','')||replace(e.last_name,'0','')) empname," +
                    "(upper(d.master_name)||' ('|| upper(g.master_name)||')') deptdesig,to_char(e.dom, '" + sgen.Getsqldateformat() + "') dom,to_char(e.dom, 'DD') dy," +
                    "to_char(e.dom, 'Month') mm,to_char(e.dom, 'Mon') sm from emp_master e " +
                    "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                    "inner join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' and find_in_set(g.client_unit_id,'" + unitid_mst + "')= 1 " +
                    "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' and e.ismarried='Y' and e.emp_status='Y' and to_date(to_char(e.dom, 'ddMM'),'ddMM') between " +
                    "to_date(to_char(sysdate, 'ddMM'),'ddMM') and to_date(to_char(sysdate,'ddMM'),'ddMM')+30 ORDER BY e.vch_num asc";
                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0) { model[0].dt2 = dt; }

                dt = new DataTable();
                model[0].dt3 = null;
                mq = "select upper(e.emp_code) empcode,upper(e.first_name||replace(e.middle_name,'0','')||replace(e.last_name,'0','')) empname," +
                    "(upper(d.master_name)||' ('|| upper(g.master_name)||')') deptdesig,to_char(e.st_dt, 'DD') dy,to_char(e.st_dt, 'Mon') sm," +
                    "(to_char(e.st_dt, 'DD')||' '||to_char(e.st_dt, 'Month')||to_char(e.st_dt, 'YYYY')) doj," +
                    "((case when to_date(to_char(e.st_dt, 'ddMM'),'ddMM') = to_date(to_char(SYSDATE, 'ddMM'),'ddMM') then floor(months_between(SYSDATE, e.st_dt) / 12) else " +
                    "floor(months_between(SYSDATE, e.st_dt) / 12) + 1  end)||' Yr') cmgyr " +
                    "from emp_master e " +
                    "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                    "inner join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' and find_in_set(g.client_unit_id,'" + unitid_mst + "')= 1 " +
                    "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' and e.emp_status='Y' and to_date(to_char(e.st_dt, 'ddMM'),'ddMM') between " +
                    "to_date(to_char(sysdate, 'ddMM'),'ddMM') and to_date(to_char(sysdate,'ddMM'),'ddMM')+30 ORDER BY e.vch_num asc";
                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0) { model[0].dt3 = dt; }

                dt = new DataTable();
                model[0].dt4 = null;
                mq = "select upper(e.emp_code) empcode,upper(e.first_name||replace(e.middle_name,'0','')||replace(e.last_name,'0','')) empname," +
                  "(upper(d.master_name)||' ('|| upper(g.master_name)||')') deptdesig,to_char(to_date(to_char(e.st_dt, 'ddMM'),'ddMM')+to_number(e.prob),'DD') dy," +
                  "to_char(to_date(to_char(e.st_dt, 'ddMM'),'ddMM')+to_number(e.prob),'Mon') sm,(to_char(to_date(to_char(e.st_dt, 'ddMM'),'ddMM')+to_number(e.prob),'DD')||" +
                  "to_char(to_date(to_char(e.st_dt, 'ddMM'),'ddMM')+to_number(e.prob),'Month')||to_char(to_date(to_char(e.st_dt, 'ddMMYYYY'),'ddMMYYYY')+to_number(e.prob),'YYYY')) dop " +
                  "from emp_master e " +
                  "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                  "inner join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' and find_in_set(g.client_unit_id,'" + unitid_mst + "')= 1 " +
                  "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' and e.emp_status='Y' and e.statustype='P' and to_date(to_char(e.st_dt, 'ddMM'),'ddMM')+to_number(e.prob) between " +
                   "to_date(to_char(sysdate, 'ddMM'),'ddMM') and to_date(to_char(sysdate,'ddMM'),'ddMM')+30";
                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0) { model[0].dt4 = dt; }

                dt = new DataTable();
                model[0].dt5 = null;
                mq = "select upper(e.emp_code) empcode,upper(e.first_name||replace(e.middle_name,'0','')||replace(e.last_name,'0','')) empname," +
                  "(upper(d.master_name)||' ('|| upper(g.master_name)||')') deptdesig,to_char(t.vch_date, 'DD') dy,to_char(t.vch_date, 'Mon') sm," +
                  "(to_char(t.vch_date, 'DD')||to_char(t.vch_date, 'Month')||to_char(t.vch_date, 'YYYY')) dos " +
                  "from emp_master e " +
                  "inner join enx_tab2 t on t.col8=e.vch_num and t.type='SPT' and t.client_unit_id=e.client_unit_id " +
                  "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                  "inner join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' and find_in_set(g.client_unit_id,'" + unitid_mst + "')= 1 " +
                  "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' and e.emp_status='Y'";
                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0) { model[0].dt5 = dt; }
            }
            catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            return View(model);
        }
        [HttpPost]
        public ActionResult overview(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            DataTable dt = new DataTable();
            if (command == "Dept")
            {
                try
                {
                    model[0].dt1 = null;
                    mq = "select count(e.emp_code) empcnt,upper(d.master_name) name,'Department' cap from emp_master e " +
                        "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                        "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' group by d.master_name";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].dt1 = dt;
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "Desig")
            {
                try
                {
                    model[0].dt1 = null;
                    mq = "select count(e.emp_code) empcnt,upper(d.master_name) name,'Designation' cap from emp_master e " +
                        "inner join master_setting d on d.master_id = e.emp_desig and d.type = 'MDG' and find_in_set(d.client_unit_id,'" + unitid_mst + "')= 1 " +
                        "where e.type = 'EMP' and e.client_unit_id = '" + unitid_mst + "' group by d.master_name";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].dt1 = dt;
                    }
                }
                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }

        #endregion
        #region empdir
        public ActionResult empdir()
        {
            FillMst();
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "EMPLOYEE DIRECTORY";
            tm1.Col10 = "emp_master";
            tm1.Col12 = "EMP";
            tm1.Col14 = mid_mst;
            tm1.Col15 = m_id_mst;
            mq = "select (e.client_id||e.client_unit_id||e.vch_num||to_char(e.vch_date,'yyyymmdd')||e.type||'!~!~!~!'||ROW_NUMBER () OVER (ORDER BY e.emp_code)) Sno,upper(e.emp_code) empcode," +
                "upper(e.first_name || replace(e.middle_name, '0', '') || replace(e.last_name, '0', '')) empname,d.master_name Department,g.master_name Designation,e.off_email Off_Email," +
                "e.off_phone Off_Phone, e.off_contact Off_Contact, e.extno Extension_no from " + tm1.Col10 + " e " +
                "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id)= 1 " +
                "inner join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' and find_in_set(g.client_unit_id, e.client_unit_id)= 1 " +
                "where e.type = '" + tm1.Col12 + "' and e.client_id = '" + clientid_mst + "' and e.client_unit_id = '" + unitid_mst + "' and e.emp_status = 'Y' order by e.vch_num asc";
            sgen.SetSession(MyGuid, "gridq_demogrid", mq);
            model.Add(tm1);
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region commst
        public ActionResult commst()
        {
            FillMst();
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            ViewBag.scripCall = "disableForm();";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.vnew = "";
            tm1.Col9 = "COMMUNICATION MASTER";
            tm1.Col10 = "emp_master";
            tm1.Col12 = "EMP";
            tm1.Col14 = mid_mst;
            tm1.Col15 = m_id_mst;
            tm1.TList1 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult commst(List<Tmodelmain> model, string command, string hfrow, string hftable)
        {
            try
            {
                FillMst(model[0].Col15);
                DataTable dtm = sgen.settable(hftable);
                model[0].dt1 = dtm;
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                var tm = model.FirstOrDefault();
                if (command == "New")
                {
                    var tmodel = model.FirstOrDefault();
                    try
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vget = "";
                        ViewBag.scripCall = "enableForm();";
                        mod1 = new List<SelectListItem>();
                        TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                    }
                    catch (Exception ex) { }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Get Data")
                {
                    string dept = string.Join(",", model[0].SelectedItems1);
                    mq = "select (e.client_id||e.client_unit_id||e.vch_num||to_char(e.vch_date,'yyyymmdd')||e.type) Sno,upper(e.emp_code) empcode," +
                   "upper(e.first_name || replace(e.middle_name, '0', '') || replace(e.last_name, '0', '')) empname,d.master_name Department,g.master_name Designation," +
                   "e.off_email Off_Email,e.off_phone Off_Phone, e.off_contact Off_Contact, e.extno Extension_no from emp_master e " +
                   "inner join master_setting d on d.master_id = e.emp_dept and d.type = 'MDP' and find_in_set(d.client_unit_id, e.client_unit_id)= 1 " +
                   "inner join master_setting g on g.master_id = e.emp_desig and g.type = 'MDG' and find_in_set(g.client_unit_id, e.client_unit_id)= 1 " +
                   "where e.type = 'EMP' and e.client_id = '" + clientid_mst + "' and e.client_unit_id = '" + unitid_mst + "' and e.emp_status = 'Y' and e.emp_dept in ('" + dept.Replace(",", "','") + "') order by e.vch_num asc";
                    DataTable dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].dt1 = null;
                        model[0].dt1 = dt;
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vget = "";
                    }
                }
                else if (command == "Save")
                {
                    bool iserr = false;
                    string off_email = "", off_phone = "", off_contact = "", extno = "", fstr = "", empcode = "";
                    for (int i = 0; i < model[0].dt1.Rows.Count; i++)
                    {
                        iserr = false;
                        off_email = model[0].dt1.Rows[i]["Off_Email"].ToString().Trim();
                        off_phone = model[0].dt1.Rows[i]["Off_Phone"].ToString().Trim();
                        off_contact = model[0].dt1.Rows[i]["Off_Contact"].ToString().Trim();
                        extno = model[0].dt1.Rows[i]["Extension_no"].ToString().Trim();
                        empcode = model[0].dt1.Rows[i]["empcode"].ToString().Trim();
                        fstr = clientid_mst + unitid_mst + empcode.Substring(3, 6).Trim() + model[0].Col12;

                        mq = "update emp_master set off_email='" + off_email + "',off_phone='" + off_phone + "',off_contact='" + off_contact + "',extno='" + extno + "' " +
                            "where (client_id||client_unit_id||vch_num||type)='" + fstr + "'";
                        res = sgen.execute_cmd(userCode, mq);
                        if (!res)
                        {
                            iserr = true;
                            break;
                        }
                    }
                    if (iserr)
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vget = "";
                        ViewBag.scripCall += "showmsgJS(1, 'Some data not updated, empcode - " + empcode + " have error', 1);";
                        return View(model);
                    }

                    model = new List<Tmodelmain>();
                    model.Add(new Tmodelmain
                    {
                        Col9 = tm.Col9,
                        Col10 = tm.Col10,
                        Col12 = tm.Col12,
                        Col14 = tm.Col14,
                        Col15 = tm.Col15,
                        TList1 = mod1,
                        SelectedItems1 = tm.SelectedItems1,
                        dt1 = null
                    });

                    ViewBag.vnew = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vget = "disabled='disabled'";
                    ViewBag.scripCall += "disableForm();";
                    ViewBag.scripCall += "showmsgJS(1, 'Data updated successfully', 1);";
                }
            }
            catch (Exception err)
            {
                var LineNumber = sgen.GetError(err);
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region var_rpt
        public ActionResult var_rpt()
        {
            FillMst();
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            ViewBag.scripCall = "disableForm();";
            ViewBag.vget = "disabled='disabled'";
            ViewBag.vnew = "";
            tm1.Col9 = "SALARY ANALYSIS";
            tm1.Col10 = "emp_master";
            tm1.Col12 = "EMP";
            tm1.Col14 = mid_mst;
            tm1.Col15 = m_id_mst;
            tm1.TList1 = mod1;
            tm1.TList2 = mod1;
            tm1.SelectedItems1 = new string[] { "" };
            tm1.SelectedItems2 = new string[] { "" };
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult var_rpt(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                var tm = model.FirstOrDefault();
                if (command == "New")
                {
                    var tmodel = model.FirstOrDefault();
                    try
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vget = "";
                        ViewBag.scripCall = "enableForm();";
                        mod1 = new List<SelectListItem>();
                        mod2 = new List<SelectListItem>();

                        mod1.Add(new SelectListItem { Text = "Department Wise", Value = "001" });
                        mod1.Add(new SelectListItem { Text = "Designation Wise", Value = "002" });
                        mod1.Add(new SelectListItem { Text = "Grade Wise", Value = "003" });
                        mod1.Add(new SelectListItem { Text = "Total", Value = "004" });
                        TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;

                        mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as nameid FROM company_unit_profile where company_profile_id= '" + clientid_mst + "' and unit_status='1' order by unit_name";
                        DataTable dtu = sgen.getdata(userCode, mq);
                        if (dtu.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtu.Rows)
                            {
                                mod2.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                            }
                        }
                        TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                    }
                    catch (Exception ex) { }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Get Data")
                {
                    string dept = "", desig = "", grade = "", curryyyymmm = "", lastyyyymmm = "", ut = "", cmd = "", rpt = "";
                    mq = model[0].SelectedItems1.FirstOrDefault().Trim();
                    ut = string.Join(",", model[0].SelectedItems2);

                    if (mq.Equals("001"))
                    {
                        mq = "select group_concat(master_id) dept from master_setting where type='MDP' and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                        dept = sgen.seekval(userCode, mq, "dept");
                        cmd = "Variance Dept Wise";
                        rpt = "var_dept";
                        if (ut.Length > 1)
                        {
                            cmd = "Variance Dept Wise Company";
                            rpt = "var_deptcom";
                        }
                    }
                    else if (mq.Equals("002"))
                    {
                        mq = "select group_concat(master_id) desig from master_setting where type='MDG' and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                        desig = sgen.seekval(userCode, mq, "desig");
                        cmd = "Variance Desig Wise";
                        rpt = "var_desig";
                        if (ut.Length > 1)
                        {
                            cmd = "Variance Desig Wise Company";
                            rpt = "var_desigcom";
                        }
                    }
                    else if (mq.Equals("003"))
                    {
                        mq = "select group_concat(master_id) grade from master_setting where type='GRD' and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                        grade = sgen.seekval(userCode, mq, "grade");
                        cmd = "";
                        rpt = "";
                        if (ut.Length > 1)
                        {
                            cmd = "";
                            rpt = "";
                        }
                    }
                    else if (mq.Equals("004"))
                    {
                        cmd = "Variance Summary";
                        rpt = "var_sum";
                        if (ut.Length > 1)
                        {
                            cmd = "Variance Summary Company";
                            rpt = "var_sumcom";
                        }
                    }

                    #region common
                    lastyyyymmm = sgen.Make_date(model[0].Col16).ToString("yyyy0MM");
                    curryyyymmm = sgen.Make_date(model[0].Col17).ToString("yyyy0MM");
                    mq = "";
                    DataSet dst = new DataSet();
                    DataTable dth = new DataTable();
                    DataRow drh = dth.NewRow();
                    dth.Rows.Add(drh);
                    var Dtheadmain = sgen.getdata(userCode, "SELECT COL3 NAME,COL2 ID,VCH_NUM,COL30 PFABLE,col31 ESIABLE,COL42 LWFABLE,COL5 PFRATE,COL5 ESIRATE,COL17 LWFRATE," +
                        "cur_tehsil,col18 FROM VEHICLE_MASTER WHERE CUR_STATE IN ('1','2','4') AND CLIENT_ID='" + clientid_mst + "' and client_unit_id='" + clientid_mst + "001' order by col2 asc");
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "ER" + e + ",ERRATE" + e + ",";
                        dth.Columns.Add("ER" + e, typeof(string));
                        drh["ER" + e] = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 16; e++)
                    {
                        mq += "AR" + e + ",";
                        dth.Columns.Add("AR" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='ER" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "AR_" + hname; }
                        drh["AR" + e] = hname;
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "DED" + e + ",";
                        dth.Columns.Add("DED" + e, typeof(string));
                        drh["DED" + e] = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                    }
                    for (int e = 1; e <= 10; e++)
                    {
                        mq += "ARD" + e + ",";
                        dth.Columns.Add("ARD" + e, typeof(string));
                        var hname = sgen.seekval_dt(Dtheadmain, "id='DED" + e + "'", "name").Replace(".", "").Replace(" ", "_").Replace("0", "-");
                        if (!hname.Trim().Equals("-")) { hname = "ARD_" + hname; }
                        drh["ARD" + e] = hname;
                    }
                    dth.AcceptChanges();

                    string m1cnt = "", m2cnt = "";
                    mq2 = "select * from (SELECT 'm1' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE='PAY' AND CLIENT_ID='" + clientid_mst + "' AND CLIENT_UNIT_ID='" + ut + "' AND CURRYYYYMMM='" + lastyyyymmm + "' " +
                        "UNION ALL SELECT 'm2' mm,COUNT(EMP_CODE) cnt FROM PAYMAIN WHERE TYPE = 'PAY' AND CLIENT_ID = '" + clientid_mst + "' AND CLIENT_UNIT_ID = '" + ut + "' AND CURRYYYYMMM = '" + curryyyymmm + "') a";
                    var dte = sgen.getdata(userCode, mq2);
                    if (dte.Rows.Count > 0)
                    {
                        m1cnt = dte.Rows[0]["cnt"].ToString();
                        m2cnt = dte.Rows[1]["cnt"].ToString();
                    }
                    string lmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(lastyyyymmm.Substring(4, 3)));
                    string cmname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(sgen.Make_int(curryyyymmm.Substring(4, 3)));
                    #endregion

                    if (cmd.Trim().Equals("Variance Summary"))
                    {
                        mq1 = "select " + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                            "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                            "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                            "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                            "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                            "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                            "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                            "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                            "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                            "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + unitid_mst + "' order by em.emp_code)) a " +
                            "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                            " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                            "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                            "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                            "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                            "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 3,t.MONTH_NAME asc";
                        var dtc = sgen.getdata(userCode, mq1);
                        Pivot pv = new Pivot(dtc, MyGuid);
                        var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                        dst = new DataSet();
                        dtc1.TableName = "prepcur";
                        dst.Tables.Add(dtc1);
                        sgen.open_report_byDs_xml(userCode, dst, rpt, cmd);
                    }
                    else if (cmd.Trim().Equals("Variance Summary Company"))
                    {
                        mq1 = "select " + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                           "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                           "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                           "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                           "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                           "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                           "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                           "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                           "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                           "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                           "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                           "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                           "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                           "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id in ('" + ut + "') order by em.emp_code)) a " +
                           "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                           " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                           "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                           "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                           "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                           "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 3,t.MONTH_NAME asc";
                        var dtc = sgen.getdata(userCode, mq1);
                        Pivot pv = new Pivot(dtc, MyGuid);
                        var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                        dst = new DataSet();
                        dtc1.TableName = "prepcur";
                        dst.Tables.Add(dtc1);
                        sgen.open_report_byDs_xml(userCode, dst, rpt, cmd);
                    }
                    else if (cmd.Trim().Equals("Variance Desig Wise Company"))
                    {
                        string designame = sgen.seekval(userCode, "select master_name designame from master_setting where master_id='" + desig + "' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + ut + "')=1 and type='MDG'", "designame");

                        mq1 = "select '" + designame + "' designame," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                            "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                            "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                            "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                            "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                            "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                            "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                            "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                            "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                            "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id in ('" + ut + "') and em.emp_desig='" + desig + "' order by em.emp_code)) a " +
                            "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                            " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                            "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                            "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                            "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                            "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";
                        var dtc = sgen.getdata(userCode, mq1);
                        Pivot pv = new Pivot(dtc, MyGuid);
                        var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "designame", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                        dst = new DataSet();
                        dtc1.TableName = "prepcur";
                        dst.Tables.Add(dtc1);
                        sgen.open_report_byDs_xml(userCode, dst, rpt, cmd);
                    }
                    else if (cmd.Trim().Equals("Variance Desig Wise"))
                    {
                        string designame = sgen.seekval(userCode, "select master_name designame from master_setting where master_id='" + desig + "' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + ut + "')=1 and type='MDG'", "designame");

                        mq1 = "select '" + designame + "' designame," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                            "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                            "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                            "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                            "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                            "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                            "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                            "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                            "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                            "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + ut + "' and em.emp_desig='" + desig + "' order by em.emp_code)) a " +
                            "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                            " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                            "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                            "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                            "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                            "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";
                        var dtc = sgen.getdata(userCode, mq1);
                        Pivot pv = new Pivot(dtc, MyGuid);
                        var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "designame", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                        dst = new DataSet();
                        dtc1.TableName = "prepcur";
                        dst.Tables.Add(dtc1);
                        sgen.open_report_byDs_xml(userCode, dst, rpt, cmd);
                    }
                    else if (cmd.Trim().Equals("Variance Dept Wise"))
                    {
                        string deptname = sgen.seekval(userCode, "select master_name deptname from master_setting where master_id='" + dept + "' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + ut + "')=1 and type='MDP'", "deptname");

                        mq1 = "select '" + deptname + "' deptname," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                            "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                            "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                            "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                            "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                            "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                            "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                            "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                            "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                            "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id = '" + ut + "' and em.emp_dept='" + dept + "' order by em.emp_code)) a " +
                            "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                            " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                            "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                            "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                            "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                            "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";
                        var dtc = sgen.getdata(userCode, mq1);
                        Pivot pv = new Pivot(dtc, MyGuid);
                        var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "deptname", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                        dst = new DataSet();
                        dtc1.TableName = "prepcur";
                        dst.Tables.Add(dtc1);
                        sgen.open_report_byDs_xml(userCode, dst, rpt, cmd);
                    }
                    else if (cmd.Trim().Equals("Variance Dept Wise Company"))
                    {
                        string deptname = sgen.seekval(userCode, "select master_name deptname from master_setting where master_id='" + dept + "' and find_in_set(client_id,'" + clientid_mst + "')=1 and find_in_set(client_unit_id,'" + ut + "')=1 and type='MDP'", "deptname");

                        mq1 = "select '" + deptname + "' deptname," + m1cnt + " m1cnt," + m2cnt + " m2cnt,(case when substr(S_heads,0,2)='ER' then '1' when substr(S_heads,0,2)='DE' then '3' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN '4' ELSE '2' END) END) hord,(case when substr(S_heads,0,2)='ER' then 'EARNING' when substr(S_heads,0,2)='DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)='ARD' " +
                            "THEN 'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END) htype,S_heads,(CASE WHEN substr(S_heads,0,2)= 'AR' THEN('AR_' || H.COL3) ELSE H.COL3 END) s_NAME,salary_yr," +
                            "'" + lmname + "' as mm1,'" + cmname + "' as mm2,Month_name,sum(amount) AMT from (SELECT* FROM " +
                            "((select To_Char(em.st_dt, '" + sgen.Getsqldateformat() + "') DOJ, em.ifsc_code, em.account_no, to_number(es.ot_hrs) othrs,substr(es.CURRYYYYMMM, 0, 4) salary_yr," +
                            "em.pf_no, em.pf_uan, em.esi_no, em.emp_code, em.external_empno, em.old_empcode,trim((replace(em.FIRST_NAME, '0', '') || ' ' || replace(em.MIDDLE_NAME, '0', '') || ' ' " +
                            "|| replace(em.LAST_NAME, '0', ''))) Emp_Name,nvl(dp.master_name, '-') dept,nvl(dg.master_name, '-') desig, em.f_name, to_char(es.m_lastdt, 'month') as M_name," +
                            "(case when es.CURRYYYYMMM = '" + curryyyymmm + "' then 'm2' else 'm1' end) Month_name,es.mdays month_days, to_number(es.paiddays) paid_days,ES.OT,ES.ESI_OT," + mq + "" +
                            "TOTEARN,TOTDED,NETSALARY from emp_master em " +
                            "inner join paymain es on em.vch_num = es.emp_code and es.type = 'PAY' and em.client_id = es.client_id and em.client_unit_id = es.client_unit_id and es.CURRYYYYMMM in ('" + lastyyyymmm + "', '" + curryyyymmm + "') " +
                            "inner join master_setting dp on dp.master_id = em.emp_dept and dp.type = 'MDP' and find_in_set(dp.client_id, em.client_id)= 1 and find_in_set(dp.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting dg on dg.master_id = em.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_id, em.client_id)= 1 and find_in_set(dg.client_unit_id, em.client_unit_id)= 1 " +
                            "inner join master_setting m on m.master_id = es.month_id and m.type = 'MNT' " +
                            "where em.type = 'EMP' and em.client_id = '" + clientid_mst + "' and em.client_unit_id in ('" + ut + "') and em.emp_dept='" + dept + "' order by em.emp_code)) a " +
                            "UNPIVOT(Amount FOR S_heads IN(ER1, ER2, ER3, ER4, ER5, ER6, ER7, ER8, ER9, ER10, ER11, ER12, ER13, ER14, ER15, ER16, AR1, AR2, AR3, AR4, AR5, AR6, AR7, AR8, AR9," +
                            " AR10,AR11, AR12, AR13, AR14, AR15, AR16, DED1, DED2, DED3, DED4, DED5, DED6, DED7, DED8, DED9, DED10, ARD1, ARD2, ARD3, ARD4, ARD5, ARD6, ARD7, ARD8, ARD9, ARD10)) ) t " +
                            "INNER JOIN vehicle_master h on(case when substr(T.S_heads,0,2)= 'ER' then T.S_HEADS when substr(S_heads, 0, 2) = 'DE' then T.S_HEADS else (CASE WHEN substr(T.S_heads,0,3)= 'ARD' " +
                            "THEN REPLACE(T.S_HEADS,'ARD','DED') ELSE REPLACE(T.S_HEADS,'AR','ER') END) END)= h.col2 and h.type = 'KSP' and h.client_id = '" + clientid_mst + "' " +
                            "group by (case when substr(S_heads,0,2)= 'ER' then 'EARNING' when substr(S_heads,0,2)= 'DE' then 'DEDUCTION' else (CASE WHEN substr(S_heads,0,3)= 'ARD' THEN " +
                            "'ARREAR_DEDUCTION' ELSE 'ARREAR_EARNING' END) END),salary_yr,Month_name,S_heads,H.COL3 ORDER BY 4,t.MONTH_NAME asc";
                        var dtc = sgen.getdata(userCode, mq1);
                        Pivot pv = new Pivot(dtc, MyGuid);
                        var dtc1 = pv.PivotData("AMT", AggregateFunction.Sum, new string[] { "deptname", "m1cnt", "m2cnt", "hord", "htype", "s_heads", "s_name", "salary_yr", "mm1", "mm2" }, new string[] { "Month_name" });
                        dst = new DataSet();
                        dtc1.TableName = "prepcur";
                        dst.Tables.Add(dtc1);
                        sgen.open_report_byDs_xml(userCode, dst, rpt, cmd);
                    }
                }
            }
            catch (Exception err)
            {
                var LineNumber = sgen.GetError(err);
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        //============varfilter_form===========
        #region varfilter_form form
        public ActionResult varfilter_form(string headid, string mid, string m_id, string btnid, string Myguid)
        {
            FillMst(Myguid);
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> ct_list = new List<SelectListItem>();
            List<SelectListItem> ut_list = new List<SelectListItem>();
            //List<SelectListItem> m_list = new List<SelectListItem>();
            List<SelectListItem> kdp_list = new List<SelectListItem>();
            List<SelectListItem> kdg_list = new List<SelectListItem>();
            List<SelectListItem> kcat_list = new List<SelectListItem>();
            #region client id's
            mq = sgen.seekval(userCode, "select client_id from user_details where vch_num='" + userid_mst + "'", "client_id");
            if (!role_mst.ToUpper().Equals("OWNER")) where = " and company_profile_id in ('" + mq.Replace(",", "','") + "')";
            DataTable dtcomp = new DataTable();
            mq = "SELECT Company_Profile_Id, company_name ||'('|| company_profile_id ||')'  as nameid FROM company_profile " +
                "where type='CP' " + where + " order by company_name";
            dtcomp = sgen.getdata(userCode, mq);
            if (dtcomp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtcomp.Rows)
                {
                    ct_list.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["Company_Profile_Id"].ToString() });
                }
            }
            TempData[MyGuid + "_ct_list"] = ct_list;
            #endregion
            #region months
            //m_list = cmd_Fun.month(userCode, unitid_mst);
            //TempData[MyGuid + "_m_list"] = m_list;
            #endregion
            #region dept
            kdp_list = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
            TempData[MyGuid + "_kdp_list"] = kdp_list;
            #endregion
            #region desig
            kdg_list = cmd_Fun.desig(userCode, unitid_mst);
            TempData[MyGuid + "_kdg_list"] = kdg_list;
            #endregion
            #region  empcat
            kcat_list = cmd_Fun.empcat(userCode, unitid_mst);
            TempData[MyGuid + "_kcat_list"] = kcat_list;
            #endregion
            tm1.TList1 = ct_list;
            #region unit id's                   
            mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
            if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq1.Replace(",", "','") + "')";
            mq = clientid_mst;
            tm1.Col31 = clientid_mst;
            mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as nameid FROM company_unit_profile where company_profile_id in (" + mq + ")" + where + " and unit_status='1' order by unit_name";
            DataTable dtunit = new DataTable();
            dtunit = sgen.getdata(userCode, mq);
            if (dtunit.Rows.Count > 0)
            {
                foreach (DataRow dr in dtunit.Rows)
                {
                    ut_list.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                }
            }
            TempData[MyGuid + "_ut_list"] = ut_list;
            #endregion
            tm1.TList2 = ut_list;
            //tm1.TList3 = m_list;
            tm1.TList4 = kdp_list;
            tm1.TList5 = kdg_list;
            tm1.TList6 = kcat_list;
            tm1.Col9 = headid;
            tm1.Col10 = mid;
            tm1.Col11 = Myguid;
            tm1.Col12 = btnid;
            tm1.SelectedItems1 = new string[] { clientid_mst };
            tm1.SelectedItems2 = new string[] { unitid_mst };
            //tm1.SelectedItems3 = new string[] { "" };
            tm1.SelectedItems4 = new string[] { "" };
            tm1.SelectedItems5 = new string[] { "" };
            tm1.SelectedItems6 = new string[] { "" };
            model.Add(tm1);
            return PartialView(model);
        }
        [HttpPost]
        public ActionResult varfilter_form(List<Tmodelmain> model, string command)
        {
            string zerodiff = "N";
            FillMst(model[0].Col11);
            List<SelectListItem> ct_list = new List<SelectListItem>();
            List<SelectListItem> ut_list = new List<SelectListItem>();
            //List<SelectListItem> m_list = new List<SelectListItem>();
            List<SelectListItem> kdp_list = new List<SelectListItem>();
            List<SelectListItem> kdg_list = new List<SelectListItem>();
            List<SelectListItem> kcat_list = new List<SelectListItem>();
            ct_list = (List<SelectListItem>)TempData[MyGuid + "_ct_list"];
            //m_list = (List<SelectListItem>)TempData[MyGuid + "_m_list"];
            kdp_list = (List<SelectListItem>)TempData[MyGuid + "_kdp_list"];
            kdg_list = (List<SelectListItem>)TempData[MyGuid + "_kdg_list"];
            kcat_list = (List<SelectListItem>)TempData[MyGuid + "_kcat_list"];
            TempData[MyGuid + "_ct_list"] = ct_list;
            //TempData[MyGuid + "_m_list"] = m_list;
            TempData[MyGuid + "_kdp_list"] = kdp_list;
            TempData[MyGuid + "_kdg_list"] = kdg_list;
            TempData[MyGuid + "_kcat_list"] = kcat_list;
            model[0].TList1 = ct_list;
            model[0].TList2 = ut_list;
            //model[0].TList3 = m_list;
            model[0].TList4 = kdp_list;
            model[0].TList5 = kdg_list;
            model[0].TList6 = kcat_list;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            //if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (command == "DDL_CHANGE")
            {
                try
                {
                    #region unit id's                   
                    mq1 = sgen.seekval(userCode, "select client_unit_id from user_details where vch_num='" + userid_mst + "'", "client_unit_id");
                    if (!role_mst.ToUpper().Equals("OWNER")) where = " and cup_id in ('" + mq1.Replace(",", "','") + "')";
                    mq = string.Join(",", model[0].SelectedItems1);
                    model[0].Col31 = mq;
                    mq = "SELECT cup_id,(unit_name||' ('||cup_Id||')') as nameid FROM company_unit_profile where company_profile_id in (" + mq + ")" + where + " and unit_status='1' order by unit_name";
                    DataTable dtunit = new DataTable();
                    dtunit = sgen.getdata(userCode, mq);
                    if (dtunit.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtunit.Rows)
                        {
                            ut_list.Add(new SelectListItem { Text = dr["nameid"].ToString(), Value = dr["cup_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_ut_list"] = ut_list;
                    #endregion
                    model[0].TList1 = ct_list;
                    model[0].TList2 = ut_list;
                    //model[0].TList3 = m_list;
                    model[0].TList4 = kdp_list;
                    model[0].TList5 = kdg_list;
                    model[0].TList6 = kcat_list;
                    model[0].SelectedItems2 = new string[] { "" };
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Search")
            {
                if (model[0].Chk1 == true) zerodiff = "Y";
                sgen.SetSession(MyGuid, "KCOMMAND", model[0].Col12.Trim());
                sgen.SetSession(MyGuid, "KDDL_CL", model[0].Col31);
                sgen.SetSession(MyGuid, "KDDL_UT", String.Join(",", model[0].SelectedItems2));
                //sgen.SetSession(MyGuid, "KDDL_MONTH", String.Join(",", model[0].SelectedItems3));
                sgen.SetSession(MyGuid, "KTXT_PD1", model[0].Col16);
                sgen.SetSession(MyGuid, "KTXT_PD2", model[0].Col17);
                sgen.SetSession(MyGuid, "KDDL_DEPT", String.Join(",", model[0].SelectedItems4));
                sgen.SetSession(MyGuid, "KDDL_DESIG", String.Join(",", model[0].SelectedItems5));
                sgen.SetSession(MyGuid, "KDDL_ECAT", String.Join(",", model[0].SelectedItems6));
                sgen.SetSession(MyGuid, "KCHK_ZERO", zerodiff);
                sgen.SetSession(MyGuid, "KFRM_TYPE", "2");
                //return stat_report(model, model[0].Col12.Trim());
            }
            ModelState.Clear();
            return PartialView(model);
        }
        #endregion
        #region Goal Settings
        public ActionResult g_setting(string mid)
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);

            model[0].Col9 = "GOAL SETTING";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "GLS";

            List<SelectListItem> md1 = new List<SelectListItem>();
            List<SelectListItem> md2 = new List<SelectListItem>();
            List<SelectListItem> md3 = new List<SelectListItem>();
            List<SelectListItem> md4 = new List<SelectListItem>();
            List<SelectListItem> md5 = new List<SelectListItem>();
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            TempData[MyGuid + "_TList1"] = model[0].TList1 = md1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = md2;
            TempData[MyGuid + "_TList3"] = model[0].TList2 = md3;
            TempData[MyGuid + "_TList4"] = model[0].TList2 = md4;
            TempData[MyGuid + "_TList5"] = model[0].TList2 = md5;
            DataTable dtb = (DataTable)sgen.GetSession(MyGuid, "URIGHTS");
            try
            {
                dtb = dtb.Select("m_id='" + model[0].Col14 + "'").CopyToDataTable();
                if (dtb.Rows.Count > 0)
                {
                    model[0].Col55 = dtb.Rows[0]["btnnew"].ToString();
                    model[0].Col56 = dtb.Rows[0]["btnedit"].ToString();
                    model[0].Col57 = dtb.Rows[0]["btnview"].ToString();

                }
            }
            catch (Exception ex) { }

            return View(model);
        }
        public List<Tmodelmain> new_g_setting(List<Tmodelmain> model)
        {
            try
            {
                model = getnew(model);
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                List<SelectListItem> mod3 = new List<SelectListItem>();
                List<SelectListItem> mod4 = new List<SelectListItem>();
                List<SelectListItem> mod5 = new List<SelectListItem>();
                #region ddl
                DataTable dt1 = sgen.getdata(userCode, "SELECT rownum FROM XMLTABLE('1 to 100')");
                mod1 = sgen.dt_to_selectlist(dt1);

                mod2.Add(new SelectListItem { Text = "Do Not Reduce Weightage If Actual Exceeds ", Value = "001" });
                mod2.Add(new SelectListItem { Text = "Deduct Weightage If Actual Exceeds Target ", Value = "002" });

                mod3.Add(new SelectListItem { Text = "Rating", Value = "001" });
                mod3.Add(new SelectListItem { Text = "Attendance", Value = "002" });
                mod3.Add(new SelectListItem { Text = "Performance", Value = "003" });
                mod3.Add(new SelectListItem { Text = "Number", Value = "004" });
                mod3.Add(new SelectListItem { Text = "M", Value = "005" });

                mod4 = sgen.dt_to_selectlist(dt1);

                mod5.Add(new SelectListItem { Text = "Quater1", Value = "001" });
                mod5.Add(new SelectListItem { Text = "Quater2", Value = "002" });
                mod5.Add(new SelectListItem { Text = "Quater3", Value = "003" });
                mod5.Add(new SelectListItem { Text = "Quater4", Value = "004" });
                mod5.Add(new SelectListItem { Text = "Unknown", Value = "005" });

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                #endregion
                model[0].Col17 = sgen.server_datetime_local(userCode);
                string defval = "";
                var tm = model.FirstOrDefault();




            }
            catch (Exception ex)
            { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 1);"; }
            return model;
        }
        [HttpPost]
        public ActionResult g_setting(List<Tmodelmain> model, string command, string mid)
        {
            try
            {
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };

                if (command == "New")
                {
                    if (model[0].Col55 == "N")
                    {
                        ViewBag.scripCall += "showmsgJS(1, 'You dont have permission for new entry, please contact your admin', 2);";
                        return View(model);
                    }
                    model = new_g_setting(model);
                }

                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    if ((model[0].Col56 == "N") && (btnval == "EDIT"))
                    {
                        ViewBag.scripCall += "showmsgJS(1, 'You dont have permission for edit , please contact your admin', 2);disableForm();";
                        return View(model);
                    }
                    if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; sgen.SetSession(MyGuid, "btnval", btnval); }
                    else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = StartCallback(model);

                }
                else if (command.Trim() == "Save" || command.Trim() == "Update" || command == "Save & New" || command == "Update & New")
                {
                    if (model[0].Col55 == "N")
                    {
                        ViewBag.scripCall += "showmsgJS(1, 'You dont have permission for save  , please contact your admin', 2);";
                        return View(model);
                    }

                    if ((model[0].Col20 == "") || (model[0].Col20 == null))
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";

                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Enter Message');";

                        return View(model);
                    }
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string cond = "", found = "", emailto = "";
                    DataTable dtstr = new DataTable();

                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dtstr.NewRow();
                    emailto = model[0].SelectedItems2.FirstOrDefault();
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;

                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;



                    }



                    dr = dtstr.NewRow();
                    dr["rec_id"] = "0";
                    dr["type"] = model[0].Col12;
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = sgen.Make_date_S(model[0].Col17);
                    dr["Col5"] = model[0].Col18;//  goal id
                    dr["Col6"] = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();//  wightage
                    dr["Col7"] = model[0].SelectedItems2.FirstOrDefault();//  Effective Gain Method
                    dr["Col8"] = model[0].SelectedItems3.FirstOrDefault();//  Measurement Type
                    dr["Col9"] = model[0].SelectedItems4.FirstOrDefault(); //  Target
                    dr["Col10"] = model[0].SelectedItems5.FirstOrDefault();//  Target Units
                    dr["Col24"] = model[0].Col21;//   Target Measurement Description
                    dr["date1"] = sgen.Make_date_S(model[0].Col22);//   Target Start Date
                    dr["date2"] = sgen.Make_date_S(model[0].Col23);//   Due Date
                    dr["Col2"] = model[0].Col24;//units
                    dr["date3"] = sgen.Make_date_S(model[0].Col25);//   Acheive Date
                    dr = getsave(currdate, dr, model);
                    dtstr.Rows.Add(dr);

                    bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10.Trim(), tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col9 = tm.Col9,
                            TList1 = tm.TList1,
                            TList2 = tm.TList2,
                            TList3 = tm.TList3,
                            TList4 = tm.TList4,
                            TList5 = tm.TList5,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },


                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall = "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_g_setting(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Record Not Saved',0);";
                    }
                }

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Goal Assign
        public ActionResult g_assign()
        {
            FillMst("");
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model[0].Col9 = "GOAL ASSIGN";
            model[0].Col10 = "enx_tab2";
            model[0].Col11 = " and a.client_id = '" + clientid_mst + "' and a.client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "GLA";
            model[0].LTM2 = new List<Tmodelmain>();
            Tmodelmain tmltm2 = new Tmodelmain();
            tmltm2.TList1 = mod1;
            TempData[MyGuid + "_Tlist1"] = tmltm2.TList1 = mod1;
            tmltm2.SelectedItems1 = new string[] { "" };
            tmltm2.Col1 = "1";
            model[0].LTM2.Add(tmltm2);
            return View(model);
        }
        public List<Tmodelmain> new_g_assign(List<Tmodelmain> model)
        {
            try
            {
                model = getnew(model);
                model[0].Col13 = "Save";
                model[0].Col100 = "Save & New";
                model[0].Col121 = "S";
                model[0].Col122 = "<u>S</u>ave";
                model[0].Col123 = "Save & Ne<u>w</u>";
                List<SelectListItem> mod1 = new List<SelectListItem>();
                foreach (var mod in model[0].LTM2)
                {
                    if (mod.SelectedItems1 == null) mod.SelectedItems1 = new string[] { "" };

                    var mymod = cmd_Fun.goalmaster(userCode, unitid_mst);
                    TempData[MyGuid + "_Tlist1"] = mod.TList1 = mymod;

                }
                model[0].Col19 = sgen.server_datetime_local(userCode);
                model[0].Col20 = sgen.server_datetime_local(userCode);





            }
            catch (Exception ex)
            { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString().Replace("'", "") + "', 1);"; }
            return model;
        }
        [HttpPost]
        public ActionResult g_assign(List<Tmodelmain> model, string command, string hfrow)
        {
            FillMst(model[0].Col15);
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
            foreach (var mod in model[0].LTM2)
            {
                TempData[MyGuid + "_Tlist1"] = mod.TList1 = mod1;
                if (mod.SelectedItems1 == null) mod.SelectedItems1 = new string[] { "" };

            }

            if (command == "New")
            {
                if (model[0].Col55 == "N")
                {
                    ViewBag.scripCall += "showmsgJS(1, 'You dont have permission for new entry, please contact your admin', 2);";
                    return View(model);
                }
                model = new_g_assign(model);
            }

            else if (command == "Goal")
            {
                try
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    model[0].Col13 = "Save";
                    model[0].Col100 = "Save & New";
                    model[0].Col121 = "S";
                    model[0].Col122 = "<u>S</u>ave";
                    model[0].Col123 = "Save & Ne<u>w</u>";
                    ViewBag.scripCall = "enableForm();";

                    mq = "select b.client_name desp, a.col6 weightage, a.col9 target from enx_tab2 a  inner join " +
                        "master_setting b on a.col5= b.master_id and find_in_set(b.client_unit_id,'" + unitid_mst + "' )=1  " +
                        "and b.type = 'GLM' where a.type='GLC'  and a.client_unit_id='" + unitid_mst + "' and" +
                        " a.Col5='" + model[0].LTM2[sgen.Make_int(hfrow)].SelectedItems1.FirstOrDefault() + "' ";


                    DataTable dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].LTM2[sgen.Make_int(hfrow)].Col2 = dt.Rows[0]["desp"].ToString();
                        model[0].LTM2[sgen.Make_int(hfrow)].Col3 = dt.Rows[0]["weightage"].ToString();
                        model[0].LTM2[sgen.Make_int(hfrow)].Col4 = dt.Rows[0]["target"].ToString();
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);"; }
            }
            else if (command == "Save" || command == "Update")
            {
                try
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int k = 0; k < model[0].LTM2.Count; k++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["vch_num"] = vch_num;
                        dr["type"] = model[0].Col12;
                        dr["vch_date"] = sgen.Make_date_S(model[0].Col19);
                        dr["date1"] = sgen.Make_date_S(model[0].Col20);

                        dr["col5"] = model[0].Col21;// emp_code
                        dr["COL6"] = model[0].LTM2[k].SelectedItems1.FirstOrDefault(); //gole
                        dr["COL7"] = model[0].LTM2[k].Col3; //weightage
                        dr["COL8"] = model[0].LTM2[k].Col4; //target

                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Record Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col9 = tm.Col9,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                        });
                        model[0].LTM2 = new List<Tmodelmain>();
                        Tmodelmain tmltm2 = new Tmodelmain();
                        tmltm2.TList1 = mod1;
                        tmltm2.SelectedItems1 = new string[] { "" };
                        tmltm2.Col1 = "1";
                        model[0].LTM2.Add(tmltm2);
                    }
                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
            }
            else if (command == "Add")
            {
                try
                {
                    Tmodelmain ntm1 = new Tmodelmain();
                    ntm1.Col1 = (Convert.ToInt32(model[0].LTM2.Max(x => sgen.Make_int(x.Col1))) + 1).ToString();
                    foreach (var mod in model[0].LTM2)
                    {
                        ntm1.TList1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                        TempData[MyGuid + "_Tlist1"] = ntm1.TList1;

                    }


                    ntm1.SelectedItems1 = new string[] { "" };
                    model[0].LTM2.Add(ntm1);
                    model[0].Col13 = "Update";
                    model[0].Col100 = "Update & New";
                    model[0].Col121 = "U";
                    model[0].Col122 = "<u>U</u>pdate";
                    model[0].Col123 = "Update & Ne<u>w</u>";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";

                }
                catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);"; }
            }
            else if (command == "Remove")
            {

                if ((model[0].LTM2.Count > 1) && sgen.Make_int(hfrow) > 1) model[0].LTM2.RemoveAt(sgen.Make_int(hfrow));
                else
                {

                    ViewBag.scripCall = "showmsgJS(1,'You cannot remove last entry',2)";
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    return View(model);
                }
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
                model[0].Col13 = "Update";
                model[0].Col100 = "Update & New";
                model[0].Col121 = "U";
                model[0].Col122 = "<u>U</u>pdate";
                model[0].Col123 = "Update & Ne<u>w</u>";
            }
            else if (command == "Cancel")
            {
                return CancelFun(model);
            }
            else if (command == "Callback")
            {
                model = StartCallback(model);
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region LEAVE LIST
        public ActionResult list_leave()
        {
            MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            FillMst(MyGuid);
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].SelectedItems1 = new string[] { "" };
            mq0 = "select a.client_unit_id || a.emp_code||to_char(a.vch_date, 'yyyymmdd')|| a.type as emp_id,(a.first_name || '' || replace(a.middle_name, '0', '') || '' || a.last_name) as Employee_Name from emp_master a " +
                 " where a.type= 'EMP' and a.emp_status='Y' and a.client_unit_id= '" + unitid_mst + "'";
            DataTable dtemp = new DataTable();
            dtemp = sgen.getdata(userCode, mq0);
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow item in dtemp.Rows)
                {
                    mod1.Add(new SelectListItem { Text = item["Employee_Name"].ToString(), Value = item["emp_id"].ToString() });
                }
            }
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            mq = "";
            model[0].Col9 = "LEAVE RECORD";
            sgen.SetSession(MyGuid, "gridq_demogrid", "");
            return View(model);
        }
        [HttpPost]
        public ActionResult list_leave(List<Tmodelmain> model, string command, string mid)
        {
            try
            {
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Search")
                {
                    if (model[0].SelectedItems1.FirstOrDefault().ToString().Equals(""))
                    {
                        ViewBag.Scripcall = "sgen.showmsg(1, 'Please Select Employee', 0);"; return View(model);
                    }
                    mq = "select a.emp_code,a.EMPNAME as employee_name,a.DATE_OF_JOINING,a.col1 as Leave_name,max(tot_leaves) as total_leaves,sum(a.leave_count) as approved_leaves" +
                " from (select A.emp_code, (a.first_name || '' || replace(a.middle_name, '0', '') || '' || a.last_name) AS EMPNAME, TO_CHAR(A.ST_DT, 'DD/MM/YYYY') AS DATE_OF_JOINING, lb.leave_count," +
                "(CASE WHEN B.col13 = 'Y' THEN(CASE WHEN B.COL4 = '003' THEN NVL(trunc(months_between(SYSDATE, a.st_dt - 1)  * to_number(B.col8), '0') when B.COL4 = '005' " +
                "then NVL(trunc(trunc(months_between(SYSDATE, a.st_dt - 1)) / 3 * to_number(B.col8)), '0') when B.COL4 = '007' then " +
                "NVL(trunc(trunc(months_between(SYSDATE, a.st_dt - 1)) / 2 * to_number(B.col8)), '0') when B.COL4 = '009' then " +
                "NVL(trunc(trunc(months_between(SYSDATE, a.st_dt - 1)) / 12 * to_number(B.col8)), '0') end) ELSE ((CASE WHEN B.COL4 = '003' THEN " +
                "NVL(trunc(months_between(sysdate, TO_DATE('01-01-2020', 'MM-DD-YYYY') - 1)) * to_number(B.col8), '0') when B.COL4 = '005' then " +
                "NVL(trunc(trunc(months_between(sysdate, TO_DATE('01-01-2020', 'MM-DD-YYYY') - 1)) / 3 * to_number(B.col8)), '0') when B.COL4 = '007' then " +
                "NVL(trunc(trunc(months_between(sysdate, TO_DATE('01-01-2020', 'MM-DD-YYYY') - 1)) / 2 * to_number(B.col8)), '0') when B.COL4 = '009' then " +
                "NVL(trunc(trunc(months_between(sysdate, TO_DATE('01-01-2020', 'MM-DD-YYYY') - 1)) / 12 * to_number(B.col8)), '0') end)) END) AS tot_leaves,B.col1 FROM " +
                "EMP_MASTER A INNER JOIN kc_tab B ON 1 = 1 AND B.client_unit_id = '" + unitid_mst + "' AND B.type = 'KLV' inner join leave_ob lb on lb.leave_type_id = b.vch_num and " +
                "lb.type = 'KLB' AND lb.CLIENT_UNIT_ID = '" + unitid_mst + "' where A.type = 'EMP' AND A.CLIENT_UNIT_ID = '" + unitid_mst + "' and A.client_unit_id || A.emp_code||to_char(A.vch_date, 'yyyymmdd')|| A.type='" + model[0].SelectedItems1.FirstOrDefault() + "') a group by a.emp_code,a.EMPNAME,a.DATE_OF_JOINING" +
                ",a.col1";
                    sgen.SetSession(MyGuid, "gridq_demogrid", mq);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
    }
    class salary
    {

        public string hid { get; set; }
        public decimal dramt { get; set; }
        public decimal cramt { get; set; }
    }
}