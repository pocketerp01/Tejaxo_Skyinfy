using QRCoder;
using skyinfyMVC.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Text;
using System.Web;
using System.Web.Mvc;
using DevTrends.MvcDonutCaching;
namespace skyinfyMVC.Controllers
{
    [HandleError(View = "Error")]
    public class EducationController : Controller
    {
        System.Globalization.DateTimeFormatInfo monthName = new System.Globalization.DateTimeFormatInfo();
        static string MyGuid = "", mq0 = "", mq = "", mq1 = "", vch_num = "", btnval = "", tab_name = "", type = "", cond = "", type_desc = "", tab_name1 = "", ent_date = "", status = "";
        string Master_Type = "", id = "", Condition = "", isprmoted = "", mid_mst = "", m_id_mst = "", master_id, Ac_Year = "", iscfrm = "Y", regnum = "", std_type = "";
        string pswd = "", fpswd = "", password = "", fpassword = "", rec_id = "", f_rec_id;
        // GET: Education
        #region 18 jan
        Random random = new Random();
        public string name = "", ctype1 = "", ctype2 = "", ctype3 = "", ctype4 = "", ctype5 = "", ctype6 = "", ctype7 = "",
            ctype8 = "", ctype9 = "", ctype10 = "", ctype11 = "", ctype12 = "", ctype13 = "",
        finalpath1 = "", finalpath2 = "", finalpath3 = "", finalpath4 = "", finalpath5 = "", finalpath6 = "", finalpath7 = "", finalpath8 = "",
            finalpath9 = "", finalpath10 = "", finalpath11 = "", finalpath12 = "", finalpath13 = "",
            path1 = "", path2 = "", path3 = "", path4 = "", path5 = "", path6 = "", path7 = "",
            path8 = "", path9 = "", path10 = "", path11 = "", path12 = "", path13 = "",
            fileName1 = "", fileName2 = "", fileName3 = "", fileName4 = "", fileName5 = "", fileName6 = "", fileName7 = "",
            fileName8 = "", fileName9 = "", fileName10 = "", fileName11 = "", fileName12 = "", fileName13 = "",
            encpath1 = "", encpath2 = "", encpath3 = "", encpath4 = "", encpath5 = "", encpath6 = "", encpath7 = "", encpath8 = "",
            encpath9 = "", encpath10 = "", encpath11 = "", encpath12 = "", encpath13 = "",
            reslt = "";
        public string isscholarship = "N", istransfer = "N", issibling = "N", issameschool = "N", isfamily = "N", ishobby = "N", havetransport = "",
            isperadd = "N", isdisable = "N", sameas = "", gender = "", isemailauth = "", isphoneauth = "", sa_id = "", mq2 = "", mq3 = "";
        #endregion
        string userCode = "", userid_mst = "", FN_From_Date = "", FN_To_Date = "", Ac_Year_id = "", cg_com_name = "", clientid_mst = "",
            unitid_mst = "", Ac_To_Date = "", Ac_From_Date = "", role_mst = "", clientname_mst = "", m_module3 = "", actionName = "", controllerName = "", xacdrange = "", xac_from = "", xac_to = "";
        // GET: Education
        bool isedit = false, res = false, Isvalid = false;
        int cli = 0;
        //sgenFun sgen = new sgenFun();
        sgenFun sgen;
        Cmd_Fun cmd_Fun;
        public List<Tmodelmain> receipt_pattern(List<Tmodelmain> model)
        {
            string Receipt_Number = "";
            #region Receipt No pattern
            //Tmodelmain tm1 = new Tmodelmain();
            DataTable dtcountry = sgen.getdata(userCode, "select ut.unit_country,cs.country_name,ut.unit_state,cs.state_name,ut.unit_city" +
                               " from company_unit_profile  ut LEFT JOIN country_state cs on ut.unit_city=cs.city_name and ut.unit_state=cs.state_gst_code" +
                               " and ut.unit_country=cs.alpha_2 where ut.company_profile_id='" + clientid_mst + "' and ut.CUP_id='" + unitid_mst + "'");
            string IsReceiptNoChange = "0";
            DataTable dtsetting = sgen.getdata(userCode, "select IsReceiptNoChange from Master_setting where type='REC' and client_unit_id='" + unitid_mst + "'");
            if (dtsetting.Rows.Count > 0)
            {
                IsReceiptNoChange = (dtsetting.Rows[0]["IsReceiptNoChange"].ToString());
            }
            else
            {
                ViewBag.scripCall = "showmsgJS(1, 'Please Set Receipt Number Setting In School Master', 2);";
                goto END;
            }
            DataTable dtsample = sgen.getdata(userCode, "Select content, print_field,seprator from pattern_gen where type='REC'" +
                " and  client_unit_id='" + unitid_mst + "' and required='Y' ORDER by cast( position as int)");
            if (dtsample.Rows.Count == 0)
            {
                ViewBag.scripCall = "showmsgJS(1, 'Please Set Receipt No. Pattern in School Master', 2);";
                goto END;
            }
            else
            {
                DateTime new_dt = sgen.server_datetime_dt_local(userCode);
                string xsample = "";
                String xsep = "";
                string min = sgen.seekval_dt(userCode, dtsample, "Content", "Minimum Digit Required", "print_field");
                foreach (DataRow dr in dtsample.Rows)
                {
                    xsep = dr["Seprator"].ToString();
                    if ((xsep == "None") || (xsep == "0"))
                    {
                        xsep = "";
                    }
                    string displayyr = "";
                    if (dr["Content"].ToString() == "Year")
                    {
                        if (dr["Content"].ToString() == "yyyy yyyy") displayyr = Ac_Year;
                        else if (dr["Content"].ToString() == "yyyy") displayyr = Ac_Year.Substring(0, 4);
                        else if (dr["Content"].ToString() == "yy yy") displayyr = Ac_Year.Substring(2, 2) + ' ' + Ac_Year.Substring(7, 2);
                        else if (dr["Content"].ToString() == "yy") displayyr = Ac_Year.Substring(2, 2);
                        // xsample = xsample + displayyr + dr["Seprator"].ToString();
                        xsample = xsample + displayyr + xsep;
                    }
                    else if (dr["Content"].ToString() == "Start Number")
                    {
                        try
                        {
                            string sno = dr["print_field"].ToString();
                            string ycond = "";
                            if (IsReceiptNoChange == "1")
                            { ycond = "and Academic_year_Id='" + Ac_Year_id + "'"; }
                            string rec_no = sgen.seekval(userCode, @"Select nvl(max(Receipt_Number),0)+1  as rec_no from student_receipt_detail where type='" + model[0].Col12 + "'" +
                                " and find_in_set(client_unit_id,'" + unitid_mst + "')=1" + ycond, "rec_no");

                            rec_no = sgen.padlc(sgen.Make_int(rec_no), sgen.Make_int(min));

                            if (sgen.Make_int(sno) > sgen.Make_int(rec_no))
                            {
                                rec_no = sgen.padlc(sgen.Make_int(rec_no), sgen.Make_int(min));
                                // xsample = xsample + sno + dr["Seprator"].ToString();
                                xsample = xsample + sno + xsep;
                                Receipt_Number = sno;
                            }
                            else
                            {
                                // xsample = xsample + rec_no + dr["Seprator"].ToString();
                                xsample = xsample + rec_no + xsep;
                                Receipt_Number = rec_no;
                            }
                        }
                        catch { }
                    }
                    else if (dr["Content"].ToString() == "Country")
                    {
                        //xsample = xsample + dtcountry.Rows[0]["country_name"].ToString() + dr["Seprator"].ToString();
                        xsample = xsample + dtcountry.Rows[0]["country_name"].ToString() + xsep;
                    }
                    else if (dr["Content"].ToString() == "State")
                    {
                        //xsample = xsample + dtcountry.Rows[0]["state_name"].ToString() + dr["Seprator"].ToString();
                        xsample = xsample + dtcountry.Rows[0]["state_name"].ToString() + xsep;
                    }
                    else if (dr["Content"].ToString() == "City")
                    {
                        //xsample = xsample + dtcountry.Rows[0]["unit_city"].ToString() + dr["Seprator"].ToString();
                        xsample = xsample + dtcountry.Rows[0]["unit_city"].ToString() + xsep;
                    }
                    else if (dr["Content"].ToString() == "Month")
                    {
                        // xsample = xsample + new_dt.ToString("MM") + dr["Seprator"].ToString();
                        xsample = xsample + new_dt.ToString("MM") + xsep;
                    }
                    else if (dr["Content"].ToString() == "Date")
                    {
                        //xsample = xsample + new_dt.ToString("dd") + dr["Seprator"].ToString();
                        xsample = xsample + new_dt.ToString("dd") + xsep;
                    }
                    else
                    {
                        if (dr["Content"].ToString() != "Minimum Digit Required")
                        {
                            //xsample = xsample + dr["Print_Field"] + dr["Seprator"].ToString();
                            xsample = xsample + dr["Print_Field"] + xsep;
                        }
                    }
                }


                if ((xsample.Substring(xsample.Length - 1) == "/") || (xsample.Substring(xsample.Length - 1) == ".") || (xsample.Substring(xsample.Length - 1) == "-") || (xsample.Substring(xsample.Length - 1) == "_") || (xsample.Substring(xsample.Length - 1) == ":"))
                {

                    xsample = xsample.Substring(0, xsample.Length - 1);

                }
                model[0].Col17 = xsample;
                model[0].Col51 = Receipt_Number;

                var YR = sgen.seekval(userCode, "select IsReceiptNoChange AS VAL from  master_setting  where client_unit_id='" + unitid_mst + "' and type='REC'", "VAL");

                if (!sgen.seekval_dt(dtsample, "content='Year'", "content").ToString().Trim().ToUpper().Equals("YEAR") && YR.Trim().Equals("1"))
                {
                    string displayyr = "";
                    displayyr = Ac_Year.Trim().Substring(2, 2);
                    model[0].Col17 = displayyr + "/" + model[0].Col17;

                }
            }
        #endregion
        END:;
            return model;
        }
        public List<Tmodelmain> reg_pattern(List<Tmodelmain> model, int rowid)
        {
            #region reg Number Generation
            string xregpattern = "";

            sgen.SetSession(MyGuid, "IsYearChange", false);
            sgen.SetSession(MyGuid, "IsRegNoChange", "0");
            //if (Ac_Year_id.Trim() != null)
            //{
            //    DataTable dtac = sgen.getdata(userCode, "select * from add_academic_year where academic_year_id='" + Ac_Year_id.Trim() + "'");
            //    if (dtac.Rows.Count > 0)
            //    {

            //        if (Convert.ToBoolean(sgen.GetSession(MyGuid, "Active").ToString()) == true)
            //        {
            //            sgen.SetSession(MyGuid, "IsYearChange", true);
            //        }
            //    }
            //    if (Convert.ToBoolean(sgen.GetSession(MyGuid, "IsYearChange").ToString()) == true)
            //    {
            DataTable dtsetting = sgen.getdata(userCode, "select IsRegNoChange from Master_setting where type='REG' and client_unit_id='" + unitid_mst + "'");
            if (dtsetting.Rows.Count > 0)
            {
                sgen.SetSession(MyGuid, "IsRegNoChange", dtsetting.Rows[0]["IsRegNoChange"].ToString());
            }
            //    }
            //}

            DataTable dtcountry = sgen.getdata(userCode, "SELECT company_profile.company_country,country_state.country_name,company_profile.company_state,country_state.state_name," +
                                  "company_profile.company_city FROM company_profile,country_state where company_profile.Company_Profile_Id='" + clientid_mst + "' " +
                                  "and company_profile.Company_Country=country_state.alpha_2 and company_profile.Company_State=country_state.state_gst_code");
            DataTable DtReceipt = sgen.getdata(userCode, "Select content, print_field,seprator from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and required='Y' order by position");
            if (DtReceipt.Rows.Count == 0)
            {


                //ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Set Registration No. Pattern In School Master');";
                goto END;
            }
            string min = "1";
            if (DtReceipt.Rows.Count > 0)
            {
                string xnumber = "";
                string xsep = "";
                string xlastnumber = "";
                sgen.SetSession(MyGuid, "NewNumber", false);
                min = sgen.seekval_dt(userCode, DtReceipt, "Content", "Minimum Digit Required", "print_field");
                for (int i = 0; i < DtReceipt.Rows.Count; i++)
                {
                    xnumber = xlastnumber;
                    if (DtReceipt.Rows[i]["print_field"].ToString() != "")
                    {
                        xnumber = DtReceipt.Rows[i]["print_field"].ToString();
                    }
                    xsep = DtReceipt.Rows[i]["Seprator"].ToString();
                    if ((xsep == "None") || (xsep == "0"))
                    {
                        xsep = "";
                    }
                    if (DtReceipt.Rows[i]["Content"].ToString() == "Start Number")
                    {
                        {
                            string id = "";

                            string sno = DtReceipt.Rows[i]["print_field"].ToString();
                            string ycond = "";
                            if (sgen.GetSession(MyGuid, "IsRegNoChange").ToString() == "1")
                            { ycond = " and Academic_year_Id='" + Ac_Year_id + "'"; }
                            id = sgen.seekval(userCode, @"Select nvl(max(regno),0)+1  as rec_no from user_details where type='STD' and " +
                                "find_in_set(client_unit_id,'" + unitid_mst + "')=1" + ycond, "rec_no");

                            id = sgen.padlc(sgen.Make_int(id), sgen.Make_int(min));

                            if (sgen.Make_int(sno) > sgen.Make_int(id))
                            {
                                id = sgen.padlc(sgen.Make_int(sno), sgen.Make_int(min));
                                xnumber = xlastnumber + sno + xsep;
                                model[0].Col32 = sno;
                            }
                            else { xnumber = xlastnumber + id + xsep; model[0].Col32 = id; }

                        }
                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "Month")
                    {

                        //xnumber = xlastnumber + System.DateTime.Now.ToString("MM") + xsep;
                        xnumber = xlastnumber + sgen.server_datetime_dt(userCode).ToString("MM") + xsep;

                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "Date")
                    {

                        xnumber = xlastnumber + sgen.server_datetime_dt(userCode).ToString("dd") + xsep;

                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "Year")
                    {
                        string xyear = DtReceipt.Rows[i]["print_field"].ToString();
                        string displayyr = "";
                        if (xyear == "yyyy yyyy")
                        {
                            displayyr = Ac_Year.Trim();
                        }
                        else if (xyear == "yyyy")
                        {
                            displayyr = Ac_Year.Trim().Substring(0, 4);
                        }
                        else if (xyear == "yy yy")
                        {
                            displayyr = Ac_Year.Trim().Substring(2, 2) + ' ' + Ac_Year.Trim().Substring(7, 2);
                        }
                        else if (xyear == "yy")
                        {
                            displayyr = Ac_Year.Trim().Substring(2, 2);
                        }
                        xnumber = xlastnumber + displayyr + xsep;
                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "Country")
                    {

                        xnumber = xlastnumber + dtcountry.Rows[0]["country_name"].ToString() + xsep;

                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "State")
                    {

                        xnumber = xlastnumber + dtcountry.Rows[0]["state_name"].ToString() + xsep;

                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "City")
                    {

                        xnumber = xlastnumber + dtcountry.Rows[0]["company_city"].ToString() + xsep;

                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "Class")
                    {
                        xnumber = xlastnumber + model[rowid].Col22 + xsep;
                    }
                    else
                    {
                        if ((DtReceipt.Rows[i]["Content"].ToString() != "Minimum Digit Required"))
                        {
                            xnumber = xlastnumber + xnumber + xsep;
                        }
                    }
                    if ((DtReceipt.Rows[i]["Content"].ToString() != "Minimum Digit Required"))
                    {
                        xregpattern = xregpattern + DtReceipt.Rows[i]["Content"].ToString() + xsep;
                        xlastnumber = xnumber;
                    }
                }
                if ((xnumber.Substring(xnumber.Length - 1) == "/") || (xnumber.Substring(xnumber.Length - 1) == ".") || (xnumber.Substring(xnumber.Length - 1) == "-") || (xnumber.Substring(xnumber.Length - 1) == "_") || (xnumber.Substring(xnumber.Length - 1) == ":"))
                {
                    xnumber = xnumber.Substring(0, xnumber.Length - 1);
                    xregpattern = xregpattern.Substring(0, xregpattern.Length - 1);
                }
                if (xnumber == " ")
                {
                    xnumber = model[0].Col32;
                }
                model[0].Col33 = xnumber;
                //   Txt_ReceiptNo.Text = xnumber;
                if (xnumber == "")
                {
                    sgen.showmsg(1, "Please Set Registration No. Pattern In School Master", 2);
                    goto END;
                }
            }
        #endregion
        END:;

            //var YR = sgen.seekval(userCode, "select IsReceiptNoChange AS VAL from  master_setting  where client_unit_id='" + unitid_mst + "' and type='REC'", "VAL");
            var YR = sgen.seekval(userCode, "select IsRegNoChange AS VAL from  master_setting  where client_unit_id='" + unitid_mst + "' and type='REG'", "VAL");
            if (!sgen.seekval_dt(DtReceipt, "content='Year'", "content").ToString().Trim().ToUpper().Equals("YEAR") && YR.Trim().Equals("1"))
            {
                string displayyr = "";
                displayyr = Ac_Year.Trim().Substring(2, 2);
                model[0].Col33 = displayyr + "/" + model[0].Col33;

            }
            return model;
        }
        public void chkRef()
        {
            if (userCode.Equals("")) Response.Redirect(sgenFun.callbackurl);
            if (Request.UrlReferrer == null) { Response.Redirect(sgenFun.callbackurl); }
        }
        public List<Tmodelmain> rollno_pattern(List<Tmodelmain> model, int rowid)
        {
            string class_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
            string section_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Text.ToString();
            DataTable dtcountry = sgen.getdata(userCode, "SELECT company_profile.company_country,country_state.country_name,company_profile.company_state,country_state.state_name," +
                                             "company_profile.company_city FROM company_profile,country_state where company_profile.Company_Profile_Id='" + clientid_mst + "' " +
                                             "and company_profile.Company_Country=country_state.alpha_2 and company_profile.Company_State=country_state.state_gst_code");
            string IsRegNoChange = "0";
            try
            {
                IsRegNoChange = sgen.getstring(userCode, "SELECT IsRegNoChange FROM master_setting WHERE type='ROL' and client_unit_id='" + unitid_mst + "'");
            }
            catch (Exception ex)
            {
                ViewBag.scripCall = "showmsgJS(1,'Please Update Your Roll No. Pattern Setting',2)";
                goto END;
            }
            DataTable dtsetting = sgen.getdata(userCode, "select IsRollNoRegWise,IsRollNoChange,IsSchoolBased,IsClassBased,IsSectionBased,IsAdmission_Wise,IsAlphabetic_Wise from Master_setting where type='ROL' and client_unit_id='" + unitid_mst + "'");
            if (dtsetting.Rows.Count == 0)
            {
                ViewBag.scripCall = "showmsgJS(1,'Please Set Roll No. Settings In School Master',2)";
                goto END;
            }
            if (dtsetting.Rows.Count > 0)
            {
                DataTable DtReceipt = sgen.getdata(userCode, "Select content, print_field,seprator from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and required='Y' ORDER by cast( position as int)");
                if (DtReceipt.Rows.Count == 0)
                {
                    ViewBag.scripCall = "showmsgJS(1,'Please Set Roll No. Pattern In School Master',2)";
                    goto END;
                }
                if (DtReceipt.Rows.Count > 0)
                {
                    string xnumber = "";
                    string xsep = "";
                    string xlastnumber = "";
                    Int32 min = sgen.Make_int(sgen.seekval_dt(userCode, DtReceipt, "Content", "Minimum Digit Required", "print_field"));
                    for (int i = 0; i < DtReceipt.Rows.Count; i++)
                    {
                        xnumber = xlastnumber;
                        xnumber = DtReceipt.Rows[i]["print_field"].ToString();
                        xsep = DtReceipt.Rows[i]["seprator"].ToString();
                        //if (xsep == "None")
                        //{
                        //    xsep = "";
                        //}
                        if (xsep == "None" || xsep == "0") xsep = "";
                        if (DtReceipt.Rows[i]["Content"].ToString() == "Start Number")
                        {
                            string id = "";
                            //if (dt.Rows.Count > 0)
                            {
                                DataTable dtrc = new DataTable();
                                Boolean NewNumber = false;
                                //if (Convert.ToBoolean(ViewState["Active"].ToString()) == true)
                                {
                                    #region RegChange
                                    if ((IsRegNoChange == "1") && (((dtsetting.Rows[0]["IsRollNoChange"].ToString()) == "1") || ((dtsetting.Rows[0]["IsRollNoChange"].ToString()) == "0")) && ((dtsetting.Rows[0]["IsRollNoRegWise"].ToString()) == "1"))
                                    {
                                        DataTable dtcheck = sgen.getdata(userCode, "select DISTINCT sd.roll_number from student_detail sd WHERE sd.academic_year_id='" + Ac_Year_id + "' and sd.Role='Student' and sd.roll_number Is NOT null  and find_in_set(sd.client_unit_id,'" + unitid_mst + "')=1");
                                        if (dtcheck.Rows.Count > 0)
                                        {
                                            NewNumber = false;
                                        }
                                        else
                                        {
                                            NewNumber = true;
                                        }
                                        if (NewNumber == false)
                                        {
                                            if ((dtsetting.Rows[0]["IsSchoolBased"].ToString()) == "1")
                                            {
                                                id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and academic_year_id='" + Ac_Year_id + "'", min, "No");
                                                dtrc = sgen.getdata(userCode, "Select max(RollNo)+1 from Student_Detail  WHERE academic_year_id='" + Ac_Year_id + "'  and client_unit_id='" + unitid_mst + "' and Role='Student'");
                                            }
                                            else if ((dtsetting.Rows[0]["IsClassBased"].ToString()) == "1")
                                            {
                                                id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD' and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and academic_year_id='" + Ac_Year_id + "' and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'", min, "No");
                                                dtrc = sgen.getdata(userCode, "Select max(RollNo)+1 from Student_Detail  WHERE academic_year_id='" + Ac_Year_id + "'  and client_unit_id='" + unitid_mst + "' and Role='Student' and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'");
                                            }
                                            else if ((dtsetting.Rows[0]["IsSectionBased"].ToString()) == "1")
                                            {
                                                id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and academic_year_id='" + Ac_Year_id.Trim() + "' and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "' and section='" + model[0].SelectedItems2.FirstOrDefault() + "'", min, "No");
                                                dtrc = sgen.getdata(userCode, "Select max(RollNo)+1 from Student_Detail  WHERE academic_year_id='" + Ac_Year_id + "'  and client_unit_id='" + unitid_mst + "' and Role='Student' and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'and section='" + model[0].SelectedItems2.FirstOrDefault() + "'");
                                            }
                                            if (dtrc.Rows.Count > 0)
                                            {
                                                // model[rowid].Col19 = dtrc.Rows[0][0].ToString();//rollno
                                                model[rowid].Col19 = id;//rollno
                                                xnumber = xlastnumber + model[rowid].Col19 + xsep;
                                            }
                                        }
                                        else
                                        {
                                            id = (sgen.Make_decimal(DtReceipt.Rows[i]["print_field"].ToString()) - 1).ToString();
                                            model[rowid].Col19 = DtReceipt.Rows[i]["print_field"].ToString();

                                            xnumber = xlastnumber + id + xsep; ;

                                        }
                                    }
                                    ////////////////////////////
                                    #endregion
                                }
                                #region RegNot Change
                                if (IsRegNoChange == "0")
                                {
                                    //if ((Convert.ToBoolean(dtsetting.Rows[0]["IsRollNoRegWise"].ToString()) == true) && (Convert.ToBoolean(dtsetting.Rows[0]["IsRollNoChange"].ToString()) == false))
                                    if (((dtsetting.Rows[0]["IsRollNoRegWise"].ToString()) == "1"))
                                    {
                                        dtrc = sgen.getdata(userCode, "Select (RegNo) from user_details where vch_num='" + userid_mst + "' and type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                    }
                                    else if (((dtsetting.Rows[0]["IsRollNoRegWise"].ToString()) == "0") && ((dtsetting.Rows[0]["IsRollNoChange"].ToString()) == "1"))
                                    {
                                        if ((dtsetting.Rows[0]["IsSchoolBased"].ToString()) == "1")
                                        {
                                            id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and academic_year_id='" + Ac_Year_id + "'", min, "No");
                                            dtrc = sgen.getdata(userCode, "Select nvl( max(RollNo),0)+1 from Student_Detail  WHERE academic_year_id='" + Ac_Year_id + "'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and type='STD'");
                                        }
                                        else if ((dtsetting.Rows[0]["IsClassBased"].ToString()) == "1")
                                        {
                                            id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD' and academic_year_id='" + Ac_Year_id + "' and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1", min, "No");
                                            dtrc = sgen.getdata(userCode, "Select nvl( max(RollNo),0)+1 from Student_Detail  WHERE academic_year_id='" + Ac_Year_id + "' and type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'");
                                        }
                                        else if ((dtsetting.Rows[0]["IsSectionBased"].ToString()) == "1")
                                        {
                                            id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and academic_year_id='" + Ac_Year_id.Trim() + "' and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "' and section='" + model[0].SelectedItems2.FirstOrDefault() + "'", min, "No");
                                            dtrc = sgen.getdata(userCode, "Select nvl( max(RollNo),0)+1 from Student_Detail  WHERE academic_year_id='" + Ac_Year_id + "' and  type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'and section='" + model[0].SelectedItems2.FirstOrDefault() + "'");
                                        }
                                    }
                                    else if (((dtsetting.Rows[0]["IsRollNoRegWise"].ToString()) == "0") && ((dtsetting.Rows[0]["IsRollNoChange"].ToString()) == "0"))
                                    {
                                        if ((dtsetting.Rows[0]["IsSchoolBased"].ToString()) == "1")
                                        {
                                            id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1", min, "No");
                                            dtrc = sgen.getdata(userCode, "Select nvl( max(RollNo),0)+1 from Student_Detail  WHERE type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                        }
                                        else if ((dtsetting.Rows[0]["IsClassBased"].ToString()) == "1")
                                        {
                                            id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD'   and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'", min, "No");
                                            dtrc = sgen.getdata(userCode, "Select nvl( max(RollNo),0)+1 from Student_Detail  WHERE  type='STD' and  find_in_set(client_unit_id,'" + unitid_mst + "')=1 and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'");
                                        }
                                        else if ((dtsetting.Rows[0]["IsSectionBased"].ToString()) == "1")
                                        {
                                            id = sgen.genNo(userCode, "Select max(RollNo) as No from Student_Detail WHERE type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "' and section='" + model[0].SelectedItems2.FirstOrDefault() + "'", min, "No");
                                            dtrc = sgen.getdata(userCode, "Select nvl( max(RollNo),0)+1 from Student_Detail  WHERE  type='STD'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'and section='" + model[0].SelectedItems2.FirstOrDefault() + "'");
                                        }
                                    }
                                    if (dtrc.Rows.Count > 0)
                                    {
                                        //model[rowid].Col19 = dtrc.Rows[0][0].ToString();
                                        model[rowid].Col19 = id;
                                        xnumber = xlastnumber + model[rowid].Col19 + xsep;
                                    }
                                }
                                #endregion
                            }
                        }
                        else if (DtReceipt.Rows[i]["Content"].ToString() == "Year")
                        {
                            string xyear = DtReceipt.Rows[i]["print_field"].ToString();
                            string displayyr = "";
                            if (xyear == "yyyy yyyy")
                            {
                                displayyr = Ac_Year.Trim();
                            }
                            else if (xyear == "yyyy")
                            {
                                displayyr = Ac_Year.Trim().Substring(0, 4);
                            }
                            else if (xyear == "yy yy")
                            {
                                displayyr = Ac_Year.Trim().Substring(2, 2) + ' ' + Ac_Year.Trim().Substring(7, 2);
                            }
                            else if (xyear == "yy")
                            {
                                displayyr = Ac_Year.Trim().ToString().Substring(2, 2);
                            }
                            xnumber = xlastnumber + displayyr + xsep;
                        }
                        else if (DtReceipt.Rows[i]["Content"].ToString() == "Month")
                        {

                            xnumber = xlastnumber + System.DateTime.Now.ToString("MM") + xsep;

                        }
                        else if (DtReceipt.Rows[i]["Content"].ToString() == "Date")
                        {

                            // xnumber = xlastnumber + System.DateTime.Now.ToString("dd") + xsep;
                            xnumber = xlastnumber + sgen.server_datetime_dt(userCode).ToString("dd") + xsep;

                        }
                        else if (DtReceipt.Rows[i]["Content"].ToString() == "Country")
                        {

                            xnumber = xlastnumber + dtcountry.Rows[0]["country_name"].ToString() + xsep;

                        }
                        else if (DtReceipt.Rows[i]["Content"].ToString() == "State")
                        {

                            xnumber = xlastnumber + dtcountry.Rows[0]["state_name"].ToString() + xsep;

                        }
                        else if (DtReceipt.Rows[i]["Content"].ToString() == "City")
                        {
                            xnumber = xlastnumber + dtcountry.Rows[0]["company_city"].ToString() + xsep;

                        }
                        else if (DtReceipt.Rows[i]["Content"].ToString() == "Class")
                        {

                            xnumber = xlastnumber + class_name + xsep;

                        }
                        else if (DtReceipt.Rows[i]["Content"].ToString() == "Section")
                        {

                            xnumber = xlastnumber + section_name + xsep;

                        }
                        else
                        {
                            if ((DtReceipt.Rows[i]["Content"].ToString() != "Minimum Digit Required"))
                            {
                                xnumber = xlastnumber + xnumber + xsep;
                            }
                        }
                        if ((DtReceipt.Rows[i]["Content"].ToString() != "Minimum Digit Required"))
                        {
                            xlastnumber = xnumber;
                        }
                    }
                    if ((xnumber.Substring(xnumber.Length - 1) == "/") || (xnumber.Substring(xnumber.Length - 1) == ".") || (xnumber.Substring(xnumber.Length - 1) == "-") || (xnumber.Substring(xnumber.Length - 1) == "_") || (xnumber.Substring(xnumber.Length - 1) == ":"))
                    {
                        xnumber = xnumber.Substring(0, xnumber.Length - 1);
                    }
                    model[rowid].Col20 = xnumber;
                }
            }
        END:;
            return model;
        }
        public List<Tmodelmain> createuserid(List<Tmodelmain> model, int rowid)
        {
            DataTable DtReceipt = sgen.getdata(userCode, "Select content, print_field,seprator from pattern_gen where type='USE' and client_unit_id='" + unitid_mst + "' and required='Y'" +
                                  " ORDER by position");
            string xnumber = "", fxnumber = "";
            string xsep = "";
            string xrec = "";
            if (DtReceipt.Rows.Count > 0)
            {
                for (int i = 0; i < DtReceipt.Rows.Count; i++)
                {
                    xsep = DtReceipt.Rows[i]["seprator"].ToString();
                    if (xsep == "None")
                    {
                        xsep = "";
                    }
                    if (DtReceipt.Rows[i]["Content"].ToString() == "FirstName")
                    {
                        xnumber = xnumber + model[rowid].Col19 + xsep;
                        fxnumber = fxnumber + model[rowid].Col20 + xsep;
                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "Record Id")
                    {
                        xnumber = xnumber + rec_id + xsep;
                        fxnumber = fxnumber + f_rec_id + xsep;
                        xrec = "Yes";
                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "Year")
                    {
                        string xyear = DtReceipt.Rows[i]["print_field"].ToString();
                        string displayyr = "";
                        if (xyear == "yyyy yyyy")
                        {
                            displayyr = Ac_Year;
                        }
                        else if (xyear == "yyyy")
                        {
                            displayyr = Ac_Year.Trim().Substring(0, 4);
                        }
                        else if (xyear == "yy yy")
                        {
                            displayyr = Ac_Year.Substring(2, 2) + ' ' + Ac_Year.Substring(7, 2);
                        }
                        else if (xyear == "yy")
                        {
                            displayyr = Ac_Year.Substring(2, 2);
                        }
                        xnumber = xnumber + displayyr + xsep;
                        fxnumber = fxnumber + displayyr + xsep;
                    }
                    else if (DtReceipt.Rows[i]["Content"].ToString() == "DOB")
                    {
                        xnumber = xnumber + model[rowid].Col25 + xsep;
                        fxnumber = fxnumber + model[rowid].Col26 + xsep;
                    }
                }

                if ((xnumber.Substring(xnumber.Length - 1) == "/") || (xnumber.Substring(xnumber.Length - 1) == ".") || (xnumber.Substring(xnumber.Length - 1) == "-") || (xnumber.Substring(xnumber.Length - 1) == "_") || (xnumber.Substring(xnumber.Length - 1) == ":"))
                {
                    xnumber = xnumber.Substring(0, xnumber.Length - 1);
                    fxnumber = fxnumber.Substring(0, fxnumber.Length - 1);
                }

            }
            else
            {
                xnumber = model[rowid].Col19 + rec_id;
                fxnumber = model[rowid].Col20 + f_rec_id;
                xrec = "Yes";
            }
            pswd = model[rowid].Col19.Trim().Substring(0) + "@1234";
            fpswd = model[rowid].Col20.Trim().Substring(0) + "@1234";
            password = EncryptDecrypt.Encrypt(pswd);
            fpassword = EncryptDecrypt.Encrypt(fpswd);
            string found = sgen.getstring(userCode, "select user_id from user_details where user_id='" + xnumber + "' ");
            string ffound = sgen.getstring(userCode, "select user_id from user_details where user_id='" + fxnumber + "' ");
            if (found != "")
            {
                if (xrec == "") xnumber = xnumber + rec_id + xsep;
                else
                {
                    int num = random.Next(10000, 90000);
                    xnumber = xnumber + num.ToString();
                }
            }
            if (ffound != "")
            {
                if (xrec == "") fxnumber = fxnumber + f_rec_id + xsep;
                else
                {
                    int num = random.Next(10000, 90000);
                    fxnumber = fxnumber + num.ToString();
                }
            }
            model[0].Col27 = xnumber;
            model[0].Col28 = fxnumber;
            return model;
        }
        public void FillMst(String Myguid = "")
        {
            MyGuid = Myguid;
            //sgen = new sgenFun(MyGuid);
            if (MyGuid == "") { MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]); }
            //if (MyGuid == "") MyGuid = sgen.GetCookie("", "MyGuid");
            sgen = new sgenFun(MyGuid);
            cmd_Fun = new Cmd_Fun(MyGuid);

            userCode = sgen.GetCookie(MyGuid, "userCode");
            userid_mst = sgen.GetCookie(MyGuid, "userid_mst");
            Ac_Year_id = sgen.GetCookie(MyGuid, "Ac_Year_id");
            cg_com_name = sgen.GetCookie(MyGuid, "cg_com_name");
            clientid_mst = sgen.GetCookie(MyGuid, "clientid_mst");
            unitid_mst = sgen.GetCookie(MyGuid, "unitid_mst");
            Ac_To_Date = sgen.GetCookie(MyGuid, "Ac_To_Date");
            Ac_From_Date = sgen.GetCookie(MyGuid, "Ac_From_Date");
            FN_From_Date = sgen.GetCookie(MyGuid, "year_from");
            FN_To_Date = sgen.GetCookie(MyGuid, "year_to");
            Ac_Year = sgen.GetCookie(MyGuid, "Ac_Year");
            role_mst = sgen.GetCookie(MyGuid, "role_mst");
            clientname_mst = sgen.GetCookie(MyGuid, "clientname_mst");
            m_module3 = sgen.GetCookie(MyGuid, "m_module3");
            actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
            sgen.SetSession(MyGuid, "viewName", actionName);
            sgen.SetSession(MyGuid, "controllerName", controllerName);

            xacdrange = "and to_date(to_char(vch_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
              "and to_date('" + Ac_To_Date + "','" + sgen.Getsqldatetimeformat() + "')";
        }
        //===============getload==========
        #region get
        public List<Tmodelmain> getload(List<Tmodelmain> model)
        {
            chkRef();
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            tm1.Col13 = "Save";
            tm1.Col100 = "Save & New";
            tm1.Col121 = "S";
            tm1.Col122 = "<u>S</u>ave";
            tm1.Col123 = "Save & Ne<u>w</u>";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            model.Add(tm1);
            return model;
        }
        public List<Tmodelmain> getnew(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            return model;
        }
        public List<Tmodelmain> getedit(List<Tmodelmain> model, DataTable dtt, string param)
        {
            sgen.SetSession(MyGuid, "EDMODE", "Y");
            model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
            model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
            model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
            model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
            model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
            model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + param + "'";
            model[0].Col13 = "Update";
            model[0].Col100 = "Update & New";
            model[0].Col121 = "U";
            model[0].Col122 = "<u>U</u>pdate";
            model[0].Col123 = "Update & Ne<u>w</u>";
            return model;
        }
        private List<Tmodelmain> StartCallback(List<Tmodelmain> model)
        {
            if (sgen.GetSession(MyGuid, "btnval") != null)
            {
                btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                model = CallbackFun(btnval, "N", actionName, controllerName, model);
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
            }
            return model;
        }
        private ActionResult CancelFun(List<Tmodelmain> model)
        {
            return RedirectToAction(actionName, new { @m_id = EncryptDecrypt.Encrypt(model[0].Col15), @mid = EncryptDecrypt.Encrypt(model[0].Col14) });
        }
        public DataRow getsave(string curdt, DataRow drn, List<Tmodelmain> model)
        {
            bool edit = false;
            if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
            {
                edit = true;
                vch_num = model[0].Col16.Trim();
            }
            else
            {
                edit = false;
                mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            }
            drn["vch_num"] = vch_num;
            drn["rec_id"] = "0";
            if (edit)
            {
                //drn["rec_id"] = model[0].Col7;
                drn["ent_by"] = model[0].Col3;
                drn["ent_date"] = model[0].Col4;
                drn["client_id"] = clientid_mst;
                drn["client_unit_id"] = unitid_mst;
                drn["edit_by"] = userid_mst;
                drn["edit_date"] = curdt;
            }
            else
            {
                drn["ent_by"] = userid_mst;
                drn["ent_date"] = curdt;
                drn["edit_by"] = "-";
                drn["edit_date"] = curdt;
                drn["client_id"] = clientid_mst;
                drn["client_unit_id"] = unitid_mst;
            }
            return drn;
        }
        public ActionResult Index()
        {
            return View();
        }
        #endregion
        //=============callback==============
        #region call back
        public List<Tmodelmain> CallbackFun(string btnval, string edmode, string viewName, string controllerName, List<Tmodelmain> model)
        {
            FillMst();
            string mq = "";
            string defcall = "";
            DataTable dt = new DataTable();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            List<SelectListItem> mod6 = new List<SelectListItem>();
            List<SelectListItem> mod7 = new List<SelectListItem>();
            List<SelectListItem> mod8 = new List<SelectListItem>();
            List<SelectListItem> mod9 = new List<SelectListItem>();
            List<SelectListItem> mod10 = new List<SelectListItem>();
            List<SelectListItem> mod11 = new List<SelectListItem>();
            List<SelectListItem> mod12 = new List<SelectListItem>();
            List<SelectListItem> mod13 = new List<SelectListItem>();
            List<SelectListItem> mod14 = new List<SelectListItem>();
            List<SelectListItem> mod15 = new List<SelectListItem>();
            List<SelectListItem> mod16 = new List<SelectListItem>();
            List<SelectListItem> mod17 = new List<SelectListItem>();
            List<SelectListItem> mod18 = new List<SelectListItem>();
            List<SelectListItem> mod19 = new List<SelectListItem>();
            List<SelectListItem> mod20 = new List<SelectListItem>();
            List<SelectListItem> mod21 = new List<SelectListItem>();
            List<SelectListItem> mod22 = new List<SelectListItem>();
            List<SelectListItem> mod23 = new List<SelectListItem>();
            List<SelectListItem> mod24 = new List<SelectListItem>();
            List<SelectListItem> mod25 = new List<SelectListItem>();
            List<SelectListItem> mod26 = new List<SelectListItem>();
            List<SelectListItem> mod27 = new List<SelectListItem>();
            List<SelectListItem> mod28 = new List<SelectListItem>();
            List<SelectListItem> mod29 = new List<SelectListItem>();
            var tm = model.FirstOrDefault();
            //controllerName = Session["controllerName"].ToString();
            //viewName = Session["viewName"].ToString();
            String URL = (string)sgen.GetSession(MyGuid, "SSEEKVAL");
            btnval = btnval.ToUpper();
            switch (viewName.ToLower())
            {
                #region ExamName
                case "examname":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select master_id,master_name,client_id,status,client_unit_id,vch_num,vch_date,rec_id,master_entby" +
                                ",to_char(master_entdate,'" + sgen.GetSaveSqlDateFormat() + "') as master_entdate," +
                                "master_editby,to_char(master_editdate,'" + sgen.GetSaveSqlDateFormat() + "') as master_editdate,classid from master_setting where  " +
                                " client_id|| client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type='" + URL + "'";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            //var tm = model.FirstOrDefault();
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                dt = new DataTable();
                                DataRow dr = dtt.Rows[0];
                                model[0].Col8 = "client_id||client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col3 = dr["master_entby"].ToString();
                                model[0].Col4 = dr["master_entdate"].ToString();
                                model[0].Col16 = dr["vch_num"].ToString();
                                model[0].Col1 = dr["client_id"].ToString();
                                model[0].Col2 = dr["client_unit_id"].ToString();
                                model[0].Col7 = dr["rec_id"].ToString();
                                model[0].Col18 = dr["master_name"].ToString();
                                model[0].Col17 = dr["master_id"].ToString();
                                model[0].Col19 = dr["status"].ToString();
                                model[0].Chk1 = dr["classid"].ToString() == "Y" ? true : false;
                                model[0].Col9 = tm.Col9;
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                            }
                            //else
                            //{
                            //    model = new List<Tmodelmain>();
                            //    tm.Col17 = "";
                            //    tm.Col18 = "";
                            //    tm.Col19 = "";
                            //    tm.Col20 = "";
                            //    model.Add(tm);
                            //}
                            break;
                    }
                    break;
                #endregion
                #region leaveapplication
                case "leaveapplication":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            #region ddls
                            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.leavereas(userCode, unitid_mst);
                            mod1.Add(new SelectListItem { Text = "First Half", Value = "First Half" });
                            mod1.Add(new SelectListItem { Text = "Second Half", Value = "Second Half" });
                            mod1.Add(new SelectListItem { Text = "Full Day", Value = "Full Day" });
                            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod1;
                            #endregion
                            mq = "SELECT en.col14,en.col15,en.col16, en.vch_num as doc_no,REPLACE(en.col4, '0', '-') as To_Leave_Type," +
             "to_char(en.date1, '" + sgen.Getsqldateformat() + "') as From_Date,to_char(en.date2, '" + sgen.Getsqldateformat() + "') as To_Date,en.* " +
             "from enx_tab en where en.client_unit_id|| en.vch_num|| to_char(en.vch_date,'yyyymmdd')||en.type = '" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");

                                #region main fields
                                model[0].Col6 = "client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Col3 = dt.Rows[0]["doc_no"].ToString();
                                model[0].Col18 = dt.Rows[0]["col6"].ToString();
                                model[0].Col16 = dt.Rows[0]["From_Date"].ToString();
                                model[0].Col17 = dt.Rows[0]["TO_Date"].ToString();
                                model[0].Col23 = dt.Rows[0]["col2"].ToString();
                                model[0].Col31 = dt.Rows[0]["col14"].ToString();
                                model[0].Col32 = dt.Rows[0]["col15"].ToString();
                                String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col3"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;

                                if (model[0].Col23 != "Single")
                                {
                                    String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["To_Leave_Type"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems2 = L2;
                                }

                                String[] L3 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems3 = L3;

                                DataTable dtl = sgen.getdata(userCode, " select vch_num,col3 leave_type from kc_tab where type='KLV'" +
               " and client_unit_id='" + unitid_mst + "' union all select '999999' vch_num, 'Short Leave' leave_type from dual ");
                                mod4 = sgen.dt_to_selectlist(dtl);

                                TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
                                String[] L4 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col16"].ToString()).Distinct()).Split(',');

                                model[0].SelectedItems4 = L4;
                                #endregion
                                if (model[0].Col12 == "ELA")
                                {
                                    string cond = "";
                                    if (mid_mst.Trim() == "13000.11")
                                    {
                                        mq = "select sibling2_rollno from user_details where vch_num='" + Convert.ToInt32(userid_mst) + "' and client_unit_id='" + unitid_mst + "'";
                                        string familyid = sgen.getstring(userCode, mq);
                                        cond = "and a.sibling2_rollno='" + familyid.Trim() + "'";
                                    }
                                    mq1 = "select b.client_id|| b.client_unit_id|| b.vch_num|| to_char(b.vch_date,'yyyymmdd')||b.type as fstr, c.Class as Class,d.master_id AS secid,d.master_name as Section, " +
                                        "(a.FIRST_NAME)||' '||replace(a.MIDDLE_NAME,'0','')||' '||replace(a.LAST_NAME,'0','') as Student_Name," +
                                        "(a.f_firstname)||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name" +
                                        "  ,a.Gender ,a.RegNumber as Reg_Number,a.vch_num rec_id,b.class_applied,b.Roll_number as Roll_Number ,a.Status" +
                          " from student_detail b INNER JOIN user_details a on a.regnumber=b.reg_no  and a.vch_num=b.vch_num and a.type= b.type and a.vch_num=b.vch_num and  a.status='active' inner join add_class c" +
                          " on c.add_class_id=b.class_applied  and c.type='EAC'  and b.client_unit_id=c.client_unit_id inner join master_setting d on b.section =d.master_id and d.type='ECS'" +
                          " and find_in_set(b.client_unit_id,d.client_unit_id)=1  WHERE b.type='STD'  and b.client_unit_id='" + unitid_mst + "' and b.academic_year_id='" + Ac_Year_id + "' " +
                          "  and b.section IS NOT Null and b.Roll_Number Is NOT Null " + cond + " and a.RegNumber = '" + dt.Rows[0]["col1"].ToString() + "'" +
                          " and b.reg_no = '" + dt.Rows[0]["col1"].ToString() + "'";
                                    DataTable stdt = new DataTable();
                                    stdt = sgen.getdata(userCode, mq1);
                                    if (stdt.Rows.Count > 0)
                                    {
                                        model[0].Col19 = stdt.Rows[0]["Reg_Number"].ToString();
                                        model[0].Col20 = stdt.Rows[0]["student_Name"].ToString();
                                        model[0].Col24 = stdt.Rows[0]["class_applied"].ToString();
                                        model[0].Col21 = stdt.Rows[0]["Roll_number"].ToString();
                                        model[0].Col25 = stdt.Rows[0]["secid"].ToString();
                                        model[0].Col22 = stdt.Rows[0]["Class"].ToString() + " " + stdt.Rows[0]["Section"].ToString();
                                        model[0].Col30 = stdt.Rows[0]["rec_id"].ToString();
                                    }

                                }
                                else if (model[0].Col12 == "TLA")
                                {
                                    mq1 = "SELECT a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                      "a.first_name||' '||Replace(a.MIDDLE_NAME,'0','')||' '||Replace(a.last_name,'0','') AS Teacher_Name," +
                                      "b.master_name as Designation,c.master_name as Department,a.vch_num rec_id, a.user_id FROM user_details a inner join master_setting b" +
                                      " on a.designation=b.master_id and b.type='MDG' inner join master_setting c on a.DEPARTMENT=c.master_id and" +
                                      " c.type='MDP'  where a.Type='CPR'  and a.client_unit_id='" + unitid_mst + "'" +
                                      " and a.status='active' and a.vch_num = '" + dt.Rows[0]["col1"].ToString() + "'";

                                    DataTable tchrdt = new DataTable();
                                    tchrdt = sgen.getdata(userCode, mq1);
                                    if (tchrdt.Rows.Count > 0)
                                    {
                                        model[0].Col19 = tchrdt.Rows[0]["rec_id"].ToString();
                                        model[0].Col20 = tchrdt.Rows[0]["Teacher_Name"].ToString();
                                        model[0].Col24 = "";
                                        model[0].Col21 = tchrdt.Rows[0]["Department"].ToString();
                                        model[0].Col25 = "";
                                        model[0].Col22 = tchrdt.Rows[0]["Designation"].ToString();
                                        model[0].Col30 = tchrdt.Rows[0]["user_id"].ToString();
                                    }
                                }
                                else
                                {
                                    mq1 = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr" +
                                   ",emp.emp_code as Employee_Code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as " +
                                   "Employee_Name,to_char(emp.dob, '" + sgen.Getsqldateformat() + "') as DOB,emp.gender as Gender,to_char(emp.st_dt, '" + sgen.Getsqldateformat() + "') as date_of_join," +
                                   "emp.contact_no as ContactNo,dp.master_name Department, nvl(dg.master_name, '-') Designation" +
                                   " from emp_master emp inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                   " find_in_set(emp.client_unit_id, dp.client_unit_id)= 1 left" +
                                   " join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' " +
                                   " and find_in_set(emp.client_unit_id,dg.client_unit_id)= 1  where  emp.client_unit_id " +
                                   "in ('" + unitid_mst + "') and emp.type = 'EMP' and emp.emp_code= '" + dt.Rows[0]["col1"].ToString() + "' and emp.emp_status != 'R' and(case when to_char(emp.ex_dt, 'yyyy') = '1900' then " +
                                   "1 when emp.ex_dt > to_date(to_char(utc_timestamp()), '" + sgen.Getsqldateformat() + "') then 1 else 0 end)= 1";
                                    DataTable dtemp = new DataTable();
                                    dtemp = sgen.getdata(userCode, mq1);
                                    if (dtemp.Rows.Count > 0)
                                    {
                                        model[0].Col19 = dtemp.Rows[0]["Employee_Code"].ToString();
                                        model[0].Col20 = dtemp.Rows[0]["Employee_Name"].ToString();
                                        model[0].Col21 = dtemp.Rows[0]["Department"].ToString();
                                        model[0].Col22 = dtemp.Rows[0]["Designation"].ToString();
                                        model[0].Col30 = dtemp.Rows[0]["Employee_Code"].ToString();
                                    }
                                }

                            }
                            break;
                        case "REG":
                            if (sgen.GetSession(MyGuid, "RTYPE_MST") != null)
                            {
                                type = sgen.GetSession(MyGuid, "RTYPE_MST").ToString().Trim();
                            }
                            if (type == "TLA")
                            {
                                mq = "SELECT a. vch_num rec_id, a.user_id, a.first_name||' '||Replace(a.MIDDLE_NAME,'0','')||' '||Replace(a.last_name,'0','') AS " +
                                    "Teacher_Name,b.master_name as Designation,c.master_name as Department FROM user_details a inner join master_setting b " +
                                    "on a.designation=b.master_id and b.type='MDG' inner join master_setting c on a.DEPARTMENT=c.master_id and c.type='MDP' " +
                                    " where a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type = '" + URL + "'" +
                                    " and a.status='active'";
                            }
                            else if (type == "BLA")
                            {

                                mq = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr" +
                                    ",emp.emp_code as Employee_Code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as" +
                                    " Employee_Name,to_char(emp.dob, '" + sgen.Getsqldateformat() + "') as DOB,emp.gender as Gender,to_char(emp.st_dt, '" + sgen.Getsqldateformat() + "') as date_of_join" +
                                    ",emp.contact_no as ContactNo,dp.master_name Department, nvl(dg.master_name, '-') Designation from emp_master emp " +
                                    "left join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and find_in_set(emp.client_unit_id, dp.client_unit_id)= 1" +
                                    " left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(emp.client_unit_id,dg.client_unit_id)= 1" +
                                    "  where (emp.client_id || emp.client_unit_id || emp.vch_num || to_char(emp.vch_date, 'yyyymmdd') || emp.type) = '" + URL + "'";
                            }
                            else
                            {
                                // from table
                                mq = @"select a. vch_num rec_id,a.sibling1_rollno, b.vch_num, b.class_applied, c.Class, b.section as secid,  d.master_name as Section,
                               a.FIRST_NAME||' '||Replace(a.MIDDLE_NAME,'0','')||' '||Replace(a.LAST_NAME,'0','') as student_Name,
                           a.f_firstname||' '||Replace(a.f_middlename,'0','')||' '||Replace(a.f_lastname,'0','')  as Father_Name 
                             ,a.GENDER ,a.RegNo,a.RegNumber,b.RollNo,b.Roll_number,a.a_i_date,a.status from user_details a ,student_detail b,add_class c,
                             master_setting d WHERE a.vch_num =b.vch_num and b.Academic_year_Id='" + Ac_Year_id + "' and b.section IS NOT Null and" +
                             " b.Roll_Number Is NOT Null and c.add_class_id=b.class_applied and c.type='EAC' and b.section =d.master_id and d.type='ECS'" +
                             "  and find_in_set(b.client_unit_id,'" + unitid_mst + "')=1 and find_in_set(b.client_unit_id,c.client_unit_id)=1  and" +
                             " find_in_set(b.client_unit_id,d.client_unit_id)=1 and b.client_id|| b.client_unit_id|| b.vch_num||" +
                             " to_char(b.vch_date, 'yyyymmdd')|| b.type='" + URL + "'  ";
                            }
                            //var tm = model.FirstOrDefault();
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                DataRow dr = dt.Rows[0];
                                model[0].Col9 = tm.Col9;
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Save";
                                model[0].Col100 = "Save & New";
                                model[0].Col121 = "S";
                                model[0].Col122 = "<u>S</u>ave";
                                model[0].Col123 = "Save & Ne<u>w</u>";
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                if (type == "TLA")
                                {
                                    model[0].Col6 = "a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type = '" + URL + "'";
                                    model[0].Col19 = dr["rec_id"].ToString();
                                    model[0].Col20 = dr["Teacher_Name"].ToString();
                                    model[0].Col21 = dr["Department"].ToString();
                                    model[0].Col22 = dr["Designation"].ToString();
                                    model[0].Col24 = "";
                                    model[0].Col25 = "";
                                    model[0].Col26 = "User Id";
                                    model[0].Col27 = "Teacher Name";
                                    model[0].Col28 = "Department";
                                    model[0].Col29 = "Designation";
                                    model[0].Col30 = dr["user_id"].ToString();
                                }
                                else if (type == "BLA")
                                {
                                    model[0].Col6 = "a.client_id|| a.client_unit_id|| a.rec_id|| to_char(a.vch_date, 'yyyymmdd')|| a.type = '" + URL + "'";
                                    model[0].Col19 = dr["Employee_Code"].ToString();
                                    model[0].Col20 = dr["Employee_Name"].ToString();
                                    model[0].Col21 = dr["Department"].ToString();
                                    model[0].Col22 = dr["Designation"].ToString();
                                    model[0].Col30 = dr["Employee_Code"].ToString();
                                }
                                else
                                {
                                    model[0].Col6 = "b.client_id|| b.client_unit_id|| b.vch_num|| to_char(b.vch_date, 'yyyymmdd'), b.type = '" + URL + "'";
                                    model[0].Col19 = dr["RegNumber"].ToString();
                                    model[0].Col20 = dr["student_Name"].ToString();
                                    model[0].Col24 = dr["class_applied"].ToString();
                                    model[0].Col21 = dr["Roll_number"].ToString();
                                    model[0].Col25 = dr["secid"].ToString();
                                    model[0].Col22 = dr["Class"].ToString() + " " + dr["Section"].ToString();
                                    model[0].Col26 = "Reg No.";
                                    model[0].Col27 = "Student Name";
                                    model[0].Col28 = "Roll No.";
                                    model[0].Col29 = "Class & Section";
                                    model[0].Col30 = dr["rec_id"].ToString();
                                }
                                //leavefrom
                                #region
                                mod1.Add(new SelectListItem { Text = "First Half", Value = "First Half" });
                                mod1.Add(new SelectListItem { Text = "Second Half", Value = "Second Half" });
                                mod1.Add(new SelectListItem { Text = "Full Day", Value = "Full Day" });
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                                #endregion
                                //leaveto
                                #region
                                //mod2.Add(new SelectListItem { Text = "First Half", Value = "First Half" });
                                //mod2.Add(new SelectListItem { Text = "Second Half", Value = "Second Half" });
                                //mod2.Add(new SelectListItem { Text = "Full Day", Value = "Full Day" });
                                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = mod1;
                                #endregion
                                //leavereason
                                #region
                                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.leavereas(userCode, unitid_mst);

                                #endregion

                            }
                            break;
                        case "EMPDETAIL":
                            if (model[0].Col14 == "8006.1") { cond = " and ud.vch_num='" + userid_mst + "'"; }
                            else { cond = "and emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type='" + URL + "'"; }

                            mq = "select (emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Employee_Name," +
                              "emp.emer_contact_no,emp.ent_by,emp.ent_date,emp.rec_id,emp.client_id,emp.client_unit_id,emp.emer_contact_name,emp.emer_contact_relation,emp.gender as Gender," +
                              "(to_number(to_char(utc_timestamp(), 'yyyy')) - to_number(to_char(emp.st_dt, 'yyyy'))) as years," +
                              "trunc(months_between(utc_timestamp(),emp.st_dt)) as months,floor(utc_timestamp() - add_months(emp.st_dt,trunc(months_between(utc_timestamp(),emp.st_dt)))) days," +
                              "emp.emp_code as Employee_Code,emp.emp_address,emp.old_empcode as OldEmpCode,emp.External_EmpNo,to_char(emp.dom, '" + sgen.Getsqldateformat() + "') as DOM" +
                              ",to_char(emp.dob, '" + sgen.Getsqldateformat() + "') as DOB,emp.addr Address,(replace(emp.per_address,'0','')||' '||replace(emp.per_pincode,'0','')||' '||replace(emp.per_city,'0','')||' '||replace(emp.per_country,'0','')) per_Address," +
                              "to_char(emp.st_dt, '" + sgen.Getsqldateformat() + "') as date_of_join,emp.contact_no as ContactNo,emp.alt_contact_no as Alt_ContactNo,emp.email_id as Per_Email,off_email " +
                              "Offi_Email,emp.pan_no as PANNo,nvl(bk.master_name, '-') as bank_name,emp.account_no as bank_acc,emp.ifsc_code as bank_ifsc," +
                              "dp.master_name Department, nvl(dg.master_name, '-') Designation from emp_master emp left join master_setting dp on " +
                              "dp.master_id = emp.emp_dept and dp.type = 'MDP'  and " +
                              "find_in_set(emp.client_unit_id, dp.client_unit_id)= 1 left join master_setting dg on dg.master_id = emp.emp_desig " +
                              "and dg.type = 'MDG' and  " +
                              "find_in_set(emp.client_unit_id, dg.client_unit_id)= 1 left join master_setting bk on bk.master_id = emp.bank_name and" +
                              " bk.type = 'ABD' and  find_in_set(emp.client_unit_id, bk.client_unit_id)= 1 " +

                              "where  find_in_set(emp.client_unit_id,'" + unitid_mst + "')=1 and emp.type = 'EMP' and emp.emp_status != 'R' " +
                              "and(case when to_char(emp.ex_dt, 'yyyy') = '1900' then 1 when " +
                              "emp.ex_dt > to_date(to_char(utc_timestamp()), '" + sgen.Getsqldateformat() + "') then 1 else 0 end)= 1" +
                              " " + cond + "";
                            DataTable bdt = new DataTable();
                            bdt = sgen.getdata(userCode, mq);
                            if (bdt.Rows.Count > 0)
                            {
                                model[0].Col19 = bdt.Rows[0]["Employee_Code"].ToString();
                                model[0].Col20 = bdt.Rows[0]["Employee_Name"].ToString();
                                model[0].Col21 = bdt.Rows[0]["Department"].ToString();
                                model[0].Col22 = bdt.Rows[0]["Designation"].ToString();
                            }
                            else
                            {
                                ViewBag.scripCall = "showmsgJS(1,'No Data Found', 2);";
                            }
                            break;
                    }
                    break;
                #endregion               
                #region class_master
                case "class_master":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":


                            #region 
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.lib_subject(userCode, unitid_mst);   // bindsubject

                            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClasscategory(userCode, unitid_mst);   // educategory

                            #endregion

                            mq = "SELECT a.optional_subject, a.Sequence, a.vch_num, a.FromTime, a.ToTime, a.CategoryType,  a.add_class_id, a.Class,a.IsMonday,a.IsTuesday," +
                                "a.IsWednesday, a.IsThursday, a.IsFriday, a.IsSaturday, a.IsSunday, a.Ent_By " +
                       " , a.Ent_Date,a.vch_date,a.Status,a.client_id,a.rec_id,a.client_unit_id,a.Inactive_date" +
                       " FROM add_class a where client_unit_id = '" + unitid_mst + "'  and a.client_id|| a.client_unit_id||a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'  order by a.vch_num";
                            //var tm = model.FirstOrDefault();
                            Boolean IsMonday = false, IsTuesday = false, IsWednesday = false, IsThursday = false, IsFriday = false, IsSaturday = false, IsSunday = false;
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col7 = dt.Rows[0]["rec_id"].ToString();
                                model[0].Col23 = dt.Rows[0]["Class"].ToString();
                                model[0].Col24 = dt.Rows[0]["Sequence"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col26 = dt.Rows[0]["add_class_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["CategoryType"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                if (dt.Rows[0]["IsMonday"].ToString() == "1") { IsMonday = true; }
                                if (dt.Rows[0]["IsTuesday"].ToString() == "1") { IsTuesday = true; }
                                if (dt.Rows[0]["IsWednesday"].ToString() == "1") { IsWednesday = true; }
                                if (dt.Rows[0]["IsThursday"].ToString() == "1") { IsThursday = true; }
                                if (dt.Rows[0]["IsFriday"].ToString() == "1") { IsFriday = true; }
                                if (dt.Rows[0]["IsSaturday"].ToString() == "1") { IsSaturday = true; }
                                if (dt.Rows[0]["IsSunday"].ToString() == "1") { IsSunday = true; }
                                model[0].Chk1 = IsMonday;
                                model[0].Chk2 = IsTuesday;
                                model[0].Chk3 = IsWednesday;
                                model[0].Chk4 = IsThursday;
                                model[0].Chk5 = IsFriday;
                                model[0].Chk6 = IsSaturday;
                                model[0].Chk7 = IsSunday;
                                model[0].Col25 = dt.Rows[0]["status"].ToString();
                                if ((dt.Rows[0]["status"].ToString() == "")) { model[0].Col25 = "Y"; }
                            }
                            string mqnew = "select a.client_id||a.client_unit_id||a.master_id||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                    "  GROUP_CONCAT(a.master_name) as master_name,a.rec_id,a.client_id,a.client_unit_id,a.master_entby,a.master_entdate,a.master_id  from master_setting a where a.classid='" + dt.Rows[0]["add_class_id"].ToString() + "'" +
                                    " and find_in_set(a.client_unit_id,'" + unitid_mst + "')=1 and a.type='EOS' " +
                                    "group by a.client_id||a.client_unit_id||a.master_id||to_char(a.vch_date,'yyyymmdd')||a.type, a.rec_id,a.client_id," +
                                    "a.client_unit_id,a.master_entby,a.master_entdate,a.master_id ";
                            DataTable dtnew = sgen.getdata(userCode, mqnew);
                            model[0].Col17 = "";
                            if (dtnew.Rows.Count > 0)
                            {
                                string abc = dtnew.Rows[0]["fstr"].ToString();
                                model[0].Col27 = dtnew.Rows[0]["master_id"].ToString();
                                model[0].Col18 = dtnew.Rows[0]["rec_id"].ToString();
                                model[0].Col17 = "client_id|| client_unit_id||master_id|| to_char(vch_date, 'yyyymmdd')|| type='" + abc + "'";
                                model[0].Col19 = dtnew.Rows[0]["client_id"].ToString();
                                model[0].Col20 = dtnew.Rows[0]["client_unit_id"].ToString();
                                model[0].Col21 = dtnew.Rows[0]["master_entby"].ToString();
                                model[0].Col22 = dtnew.Rows[0]["master_entdate"].ToString();
                                String[] L1 = System.String.Join(",", dtnew.Rows.OfType<DataRow>()
                                    .Select(r => r["master_name"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                            }
                            break;
                    }
                    break;
                #endregion                
                #region RoomName
                case "er_master":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select master_id,master_name,client_id,client_unit_id,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,classid,sectionid,status from master_setting where  " +
                                "client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            //var tm = model.FirstOrDefault();
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                dt = new DataTable();
                                DataRow dr = dtt.Rows[0];
                                model[0].Col6 = "client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col1 = dr["master_entby"].ToString();
                                model[0].Col2 = dr["master_entdate"].ToString();
                                model[0].Col3 = dr["vch_num"].ToString();
                                model[0].Col4 = dr["client_id"].ToString();
                                model[0].Col5 = dr["client_unit_id"].ToString();
                                model[0].Col7 = "0";
                                model[0].Col20 = dr["master_id"].ToString();
                                model[0].Col16 = dr["master_name"].ToString();
                                model[0].Col17 = dr["classid"].ToString();
                                model[0].Col18 = dr["sectionid"].ToString();
                                model[0].Col19 = dr["status"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Col9 = tm.Col9;
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col16 = "";
                                tm.Col17 = "";
                                tm.Col18 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region Room Allocation
                case "er_allocation":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                            mq = "select a.col12, (select nvl(file_path,'-') as file_path  from file_tab where type='STD'  " +
                                "and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and col1='Child Photo' and ref_code1=sd.reg_no and rownum<2) as File_path,nvl(a.col1,'-')" +
                                " as col1,nvl(a.col5,'-') as col5,nvl(a.col10,'-') as col10,nvl(b.FrequencyName,'-') as FrequencyName  ," +
                                "nvl(e.master_name,'-') as Exam_type, nvl(c.classid,'-') as floor,nvl(c.sectionid,'-') as seat, nvl(a.ent_by,'" + userid_mst + "')" +
                                " as ent_by ,a.ent_date,nvl(a.vch_num,'-') as vch_num,nvl(a.client_id,'" + clientid_mst + "') as client_id " +
                                ",nvl(a.client_unit_id,'" + unitid_mst + "') as client_unit_id ,nvl(a.type,'ERA') as type ," +
                                " a.vch_date ,nvl(col2,'-') as col2,sd.Reg_no as col4 ,nvl(a.col9,'-') as col9, nvl(col6,'-') as col6," +
                                "nvl(col7,'-') as col7,nvl(col5,'-') as col5,sd.roll_number,ud.first_name ||' '|| REPLACE(ud.middle_name, '0', '')||' '||REPLACE(ud.last_name, '0', '') as Student_Name " +
                                ", ud.f_firstname||' '|| REPLACE(ud.f_middlename, '0', '')||' '|| REPLACE(ud.f_lastname, '0', '') as Father_Name from student_detail sd  left join enx_tab2 a on a.client_id||a.client_unit_id||" +
                                "a.vch_num||to_char(a.vch_date, 'yyyymmdd')|| a.type = '" + URL + "' and a.col4=sd.reg_no  left join user_details " +
                                "ud on sd.Reg_no=ud.RegNumber and ud.type='STD'  left join master_setting c on a.col2=c.master_id and c.type='ERM' " +
                                "and find_in_set(a.client_unit_id,c.client_unit_id)=1 left join school_frequency b on a.col10=b.Frequency_Id" +
                                " and b.type='ESF' and find_in_set(a.client_unit_id,b.client_unit_id)=1 left join master_setting e on " +
                                "a.col5 = e.master_id and e.type='EEM' and find_in_set(a.client_unit_id,e.client_unit_id)=1 where sd.CLASS_APPLIED" +
                                " in  (select distinct col2 from enx_tab2 a  where a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date, 'yyyymmdd')|| " +
                                "a.type = '" + URL + "' ) and sd.academic_year_id='" + Ac_Year_id + "' and sd.type='STD'   ";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                ViewBag.vfill = "disabled='disabled'";
                                #region  Room
                                dt = new DataTable();
                                dt = sgen.getdata(userCode, "select  master_id,  master_name || '('||classid ||')' || 'Floor' as Roomname from master_setting where" +
                                    " type='ERM' and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow drr in dt.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = drr["Roomname"].ToString(), Value = drr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = rpt_model[0].TList1 = mod1;
                                #endregion
                                #region 
                                TempData[MyGuid + "_Tlist2"] = rpt_model[0].TList2 = mod2 = cmd_Fun.examtype(userCode, unitid_mst);   //BindExamType
                                TempData[MyGuid + "_Tlist3"] = rpt_model[0].TList3 = mod3 = sgen.BindClass(userCode, unitid_mst);   //Bind Class
                                TempData[MyGuid + "_Tlist4"] = rpt_model[0].TList4 = mod4 = sgen.BindSection(userCode, unitid_mst);  //BindSection

                                #endregion

                                foreach (DataRow dr in dtt.Rows)
                                {
                                    string filepath = "/Uploads/" + cg_com_name.Replace(" ", "") + "/" + dr["file_path"].ToString();
                                    if (filepath == "-")
                                    {
                                        filepath = "/Uploads/" + "person-icon.png";
                                    }
                                    Boolean seatalloted = false;
                                    if (dr["col12"].ToString() == "Y")
                                    {
                                        seatalloted = true;
                                    }
                                    else
                                    {
                                        seatalloted = false;
                                    }
                                    rpt_model.Add(new Tmodelmain
                                    {
                                        Col6 = "client_id|| client_unit_id|| vch_num|| to_char(vch_date|| 'yyyymmdd')|| type = '" + URL + "'",
                                        Col1 = dtt.Rows[0]["ent_by"].ToString(),
                                        Col2 = dtt.Rows[0]["ent_date"].ToString(),
                                        Col3 = dtt.Rows[0]["vch_num"].ToString(),
                                        Col4 = dtt.Rows[0]["client_id"].ToString(),
                                        Col5 = dtt.Rows[0]["client_unit_id"].ToString(),
                                        Col16 = dr["col4"].ToString(),
                                        Col17 = dr["roll_number"].ToString(),
                                        Col18 = dr["student_name"].ToString(),
                                        Col19 = dr["Father_name"].ToString(),
                                        Col20 = dtt.Rows[0]["floor"].ToString(),
                                        Col21 = dtt.Rows[0]["seat"].ToString(),
                                        Col22 = dtt.Rows[0]["col9"].ToString(),
                                        Chk1 = seatalloted,
                                        // Col23 = "/Uploads/messi.jpg",
                                        Col23 = filepath,
                                        Col13 = "Update",
                                        Col100 = "Update & New",
                                        Col121 = "U",
                                        Col122 = "<u>U</u>pdate",
                                        Col123 = "Update & Ne<u>w</u>",
                                        Col9 = tm.Col9,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col28 = dtt.Rows[0]["col1"].ToString(),
                                        Col27 = dtt.Rows[0]["Exam_type"].ToString(),
                                        Col26 = dtt.Rows[0]["col5"].ToString(),
                                        Col25 = dtt.Rows[0]["col10"].ToString(),
                                        Col24 = dtt.Rows[0]["FrequencyName"].ToString(),
                                    });
                                }
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col6"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');

                                rpt_model[0].SelectedItems1 = L1;
                                rpt_model[0].SelectedItems2 = L2;
                                rpt_model[0].SelectedItems3 = L3;
                                rpt_model[0].SelectedItems4 = L4;
                                model = rpt_model;
                            }
                            break;
                        case "ADD2":
                            mq = "select distinct a.col7,a.col8, b.master_name as FrequencyName ,c.master_name as Exam_type from enx_tab a inner join " +
                               "master_setting b on a.col7=b.master_id and b.type='EFQ' " +
                               "inner join master_setting c on a.col8 = c.master_id and c.type='EEM'  and find_in_set(a.client_unit_id,c.client_unit_id)=1" +
                               "  where a.type='EDS' and a.client_id|| a.client_unit_id|| a.vch_num||to_char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'";
                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            tm = model.FirstOrDefault();
                            if (dtt.Rows.Count > 0)
                            {
                                model[0].Col24 = dtt.Rows[0]["FrequencyName"].ToString();
                                model[0].Col25 = dtt.Rows[0]["col7"].ToString();
                                model[0].Col26 = dtt.Rows[0]["col8"].ToString();
                                model[0].Col27 = dtt.Rows[0]["Exam_type"].ToString();
                                model[0].Col28 = URL;
                            }
                            break;
                    }
                    break;
                #endregion
                #region Student Attendance
                case "student_attendence":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                            if (sgen.GetSession(MyGuid, "R_ATT").ToString() != "")
                            {
                                if (sgen.GetSession(MyGuid, "R_ATT").ToString() == "STD")
                                {
                                    //mq = " select nvl(CASE WHEN e.default_emailid='F' THEN e.f_email WHEN e.default_emailid='M' THEN e.m_email WHEN e.default_emailid='G' " +
                                    //           "THEN e.g_email END,'-') as Email_Id ,nvl(CASE WHEN e.default_Ph='F' THEN e.f_con_number WHEN e.default_Ph='M' THEN e.m_con_number " +
                                    //           "WHEN e.default_Ph='G' THEN e.g_con_number END,'-') as PhoneNo, e.First_name ||' ' ||Replace(e.middle_name,'0','') || ' '|| Replace(e.last_name,'0','') as " +
                                    //    "Student_Name, f.roll_number, a.month_id,a.month_name, a.client_id,a.client_unit_id,  To_Char( a.atten_date,'dd/mm/yyyy') " +
                                    //    "as atten_date,a.Vch_num, a.class_id,a.section_id,a.roll_no as rollno,a.student_id , a.reg_id as RegNo , " +
                                    //    "To_Char( a.atten_date,'" + sgen.Getsqldateformat() + "')  as " +
                                    //    "Attendance_Date,a.First_Half,a.Second_half, a. Ent_By,  a.Ent_Date , b.class, c.master_name as Section,d.From_Date," +
                                    //    "d.To_Date from student_attendance a inner join add_class b on a.class_id=b.add_class_id and b.type='EAC' and " +
                                    //    " find_in_set(a.client_unit_id,b.client_unit_id)=1 inner join master_setting c on a.section_id=c.master_id" +
                                    //    " and c.type='ECS'  and find_in_set(a.client_unit_id,c.client_unit_id)=1 inner join " +
                                    //    "(select To_Char(min(a.atten_date),'" + sgen.Getsqldateformat() + "') as From_Date," +
                                    //    "To_Char(max(a.atten_date),'" + sgen.Getsqldateformat() + "') as To_Date from " +
                                    //    "student_attendance a where  a.client_id|| a.client_unit_id||a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "' ) " +
                                    //    "d on 1=1 inner join user_details e on a.reg_id= e.RegNumber and e.type='STD'   inner join " +
                                    //    "student_detail f on f.type='STD'   and find_in_set(a.client_unit_id,f.client_unit_id)=1 and f.Academic_year_Id " +
                                    //    "='" + Ac_Year_id + "' and a.reg_id=f.reg_no and a.class_id=f.class_applied and a.section_id=f.section   where a.type='STD' and " +
                                    //    " a.Academic_year_Id='" + Ac_Year_id + "' and a.client_id|| a.client_unit_id|| a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'";

                                    mq = " select (CASE WHEN e.default_emailid='F' THEN e.f_email WHEN e.default_emailid='M' THEN e.m_email WHEN e.default_emailid='G' " +
                                         "THEN e.g_email else '-' END) as Email_Id ,(CASE WHEN e.default_Ph='F' THEN e.f_con_number WHEN e.default_Ph='M' THEN e.m_con_number " +
                                         "WHEN e.default_Ph='G' THEN e.g_con_number else '-' END) as PhoneNo, e.First_name ||' ' ||Replace(e.middle_name,'0','') || ' '|| Replace(e.last_name,'0','') as " +
                                  "Student_Name, f.roll_number, a.month_id,a.month_name, a.client_id,a.client_unit_id,  To_Char( a.atten_date,'" + sgen.Getsqldateformat() + "') " +
                                  "as atten_date,a.Vch_num, a.class_id,a.section_id,a.roll_no as rollno,a.student_id , a.reg_id as RegNo , " +
                                  "To_Char( a.atten_date,'" + sgen.Getsqldateformat() + "')  as Attendance_Date,a.First_Half,a.Second_half, a. Ent_By,  a.Ent_Date , b.class, c.master_name as Section,d.From_Date," +
                                  "d.To_Date from student_attendance a " +
                                  "inner join add_class b on a.class_id=b.add_class_id and b.type='EAC' and find_in_set(a.client_unit_id,b.client_unit_id)=1 " +
                                  "inner join master_setting c on a.section_id=c.master_id and c.type='ECS' and find_in_set(a.client_unit_id,c.client_unit_id)=1 " +
                                  "inner join (select To_Char(min(a.atten_date),'" + sgen.Getsqldateformat() + "') as From_Date," +
                                  "To_Char(max(a.atten_date),'" + sgen.Getsqldateformat() + "') as To_Date from " +
                                  "student_attendance a where  a.client_id|| a.client_unit_id||a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "' ) d on 1=1 " +
                                  "inner join user_details e on a.reg_id= e.RegNumber and e.type='STD' and  find_in_set_one(a.client_unit_id,e.client_unit_id)=1" +
                                  "inner join student_detail f on f.type='STD' and find_in_set(a.client_unit_id,f.client_unit_id)=1 and f.Academic_year_Id " +
                                  "='" + Ac_Year_id + "' and a.reg_id=f.reg_no and a.class_id=f.class_applied and a.section_id=f.section where a.type='STD' and " +
                                  " a.Academic_year_Id='" + Ac_Year_id + "' and a.client_id|| a.client_unit_id|| a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'";
                                }
                                if (sgen.GetSession(MyGuid, "R_ATT").ToString() == "TEA")
                                {
                                    mq = " select  To_Char( a.atten_date,'" + sgen.Getsqldateformat() + "') as atten_date, a.vch_num, a.month_id,a.month_name, a.client_id,a.client_unit_id, dp.master_id,dp.master_name as department," +
                                        " e.First_name ||' ' ||Replace(e.middle_name,'0','') || ' '|| Replace(e.last_name,'0','') as Teacher_Name" +
                                        ", a.reg_id as teacher_id , To_Char(a.atten_date,'" + sgen.Getsqldateformat() + "') " +
                                        " as Attendance_Date,a.First_Half,a.Second_half, a. Ent_By,  a.Ent_Date ,d.From_Date,d.To_Date   from  student_attendance a" +
                                        " inner join (select To_Char(min(a.atten_date),'" + sgen.Getsqldateformat() + "') as" +
                                        " From_Date,To_Char(max(a.atten_date),'" + sgen.Getsqldateformat() + "') as To_Date " +
                                        "from student_attendance a where  a.client_id|| a.client_unit_id|| a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "' )" +
                                        " d on 1=1 inner join user_details e on a.reg_id= e.vch_num and e.type='CPR' inner join master_setting dp on e.department=dp.master_id and dp.type='MDP'" +
                                        "  where  a.type='TEA' and  a.Academic_year_Id='" + Ac_Year_id + "' and a.client_id|| a.client_unit_id|| a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'";
                                }
                                DataTable dtt = new DataTable();
                                string att_status_F = "", att_status_S = "";
                                dtt = sgen.getdata(userCode, mq);
                                if (dtt.Rows.Count > 0)
                                {
                                    ViewBag.vfill = "disabled='disabled'";
                                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                                    #region 
                                    TempData[MyGuid + "_Tlist1"] = mod1 = sgen.BindClass(userCode, unitid_mst);   //Bind Class
                                    TempData[MyGuid + "_Tlist2"] = mod2 = sgen.BindSection(userCode, unitid_mst); // BindSection
                                    TempData[MyGuid + "_Tlist3"] = mod3 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);  //Department

                                    #endregion
                                    foreach (DataRow dr in dtt.Rows)
                                    {
                                        string Regno = "", roll_number = "", RollNo = "", Student_Name = "", student_id = "", Email = "", Phone = "";
                                        if (tm.Col14 == "7015.1")
                                        {
                                            Regno = dr["Regno"].ToString();
                                            roll_number = dr["roll_number"].ToString();
                                            RollNo = dr["RollNo"].ToString();
                                            Student_Name = dr["Student_Name"].ToString();
                                            student_id = dr["student_id"].ToString();
                                            Email = dr["Email_Id"].ToString();
                                            Phone = dr["PhoneNo"].ToString();
                                        }
                                        if (tm.Col14 == "7021.6")
                                        {
                                            Regno = dr["teacher_id"].ToString();
                                            roll_number = dr["Department"].ToString();
                                            RollNo = "0";
                                            Student_Name = dr["Teacher_Name"].ToString();
                                            student_id = "0";
                                        }
                                        rpt_model.Add(new Tmodelmain
                                        {
                                            Col6 = "client_id|| client_unit_id|| vch_num|| To_Char(vch_date, 'yyyymmdd')|| type = '" + URL + "'",
                                            Col1 = dr["ent_by"].ToString(),
                                            Col2 = dr["ent_date"].ToString(),
                                            Col3 = dr["vch_num"].ToString(),
                                            Col4 = dr["client_id"].ToString(),
                                            Col5 = dr["client_unit_id"].ToString(),
                                            Col16 = dr["From_Date"].ToString(),
                                            Col17 = dr["To_Date"].ToString(),
                                            Col18 = Regno,
                                            Col19 = roll_number,
                                            Col20 = Student_Name,
                                            Col21 = dr["Atten_Date"].ToString(),
                                            Col22 = dr["First_Half"].ToString(),
                                            Col23 = dr["Second_Half"].ToString(),
                                            Col24 = student_id,
                                            Col25 = dr["month_id"].ToString(),
                                            Col26 = dr["month_name"].ToString(),
                                            Col27 = RollNo,
                                            Col13 = "Update",
                                            Col100 = "Update & New",
                                            Col121 = "U",
                                            Col122 = "<u>U</u>pdate",
                                            Col123 = "Update & Ne<u>w</u>",
                                            Col9 = tm.Col9,
                                            Col14 = tm.Col14,
                                            Col15 = tm.Col15,
                                            Col28 = Email,
                                            Col29 = Phone,
                                            Col31 = Phone,
                                            Col30 = "disabled",
                                            //Col29 = dr["First_Half"].ToString(),
                                        });
                                    }
                                    if (sgen.GetSession(MyGuid, "R_ATT").ToString() == "TEA")
                                    {
                                        String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["master_id"].ToString()).Distinct()).Split(',');
                                        rpt_model[0].TList3 = mod3;
                                        rpt_model[0].SelectedItems3 = L3;
                                        rpt_model[0].SelectedItems1 = new string[] { "" };
                                        rpt_model[0].SelectedItems2 = new string[] { "" };
                                    }
                                    if (sgen.GetSession(MyGuid, "R_ATT").ToString() == "STD")
                                    {
                                        String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["class_id"].ToString()).Distinct()).Split(',');
                                        String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["section_id"].ToString()).Distinct()).Split(',');
                                        rpt_model[0].TList1 = mod1;
                                        rpt_model[0].TList2 = mod2;
                                        sgen.SetSession(MyGuid, "Class_Id", dtt.Rows[0]["class_id"].ToString());
                                        sgen.SetSession(MyGuid, "Section_Id", dtt.Rows[0]["section_id"].ToString());
                                        rpt_model[0].SelectedItems1 = L1;
                                        rpt_model[0].SelectedItems2 = L2;
                                        rpt_model[0].SelectedItems3 = new string[] { "" };
                                    }
                                    model = rpt_model;
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region AdmitCard
                case "std_cards":
                    switch (btnval.ToUpper())
                    {
                        case "ADD2":
                            //List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                            mq = "select distinct  a.r_no as class_id ,a.ref_code as section_id, b.master_name FrequencyName ,c.master_name as Exam_type from enx_tab a inner join " +
                               "master_setting b on a.col7=b.master_id and b.type='EFQ'  " +
                               "inner join master_setting c on a.col8 = c.master_id and c.type='EEM'  and find_in_set (a.client_unit_id,c.client_unit_id)=1" +
                               "  where a.type='EDS' and a.client_id|| a.client_unit_id|| a.vch_num||To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'";
                            DataTable dtt = new DataTable();
                            //var tm = model.FirstOrDefault();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                #region 
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);  //Class

                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);   //BindSection
                                #endregion

                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["class_id"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["section_id"].ToString()).Distinct()).Split(',');
                                sgen.SetSession(MyGuid, "SelectClass", model[0].TList1[0].Value);
                                sgen.SetSession(MyGuid, "SelectSection", model[0].TList1[0].Value);
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].Col17 = dtt.Rows[0]["FrequencyName"].ToString();
                                model[0].Col18 = dtt.Rows[0]["Exam_type"].ToString();
                                model[0].Col19 = URL;
                                model[0].Col13 = "Update";
                                model[0].Chk1 = true;
                                model[0].Col20 = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                                model[0].Col21 = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Text.ToString();
                                model[0].Col22 = dtt.Rows[0]["class_id"].ToString();
                                model[0].Col23 = dtt.Rows[0]["section_id"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region Teacher Holiday Master
                case "teac_hm":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":


                            mq = " select d.department, b.master_name as Designation, a.teacher_id, (to_char(max(a.Holiday_frm),'" + sgen.Getsqldateformat() + "')) as From_dt ," +
                                " (to_char(max(a.Holiday_to), '" + sgen.Getsqldateformat() + "')) as To_dt, " +
                                "To_Char(a.Holiday_frm,'" + sgen.Getsqldateformat() + "') " +
                                " as Holiday_From , To_Char(a.Holiday_to,'" + sgen.Getsqldateformat()
                                + "') as Holiday_To,a.Holiday_name,a.Holiday_Id,a.ent_by,a.ent_date,a.vch_num,a.client_id,a.client_unit_id,d.First_name ||" +
                                "' ' || Replace(d.middle_name,'0','') || ' '|| Replace(d.last_name,'0','') as Teacher_Name,d.designation from holiday_master a " +
                                "inner join user_details d on a.teacher_id =d.vch_num and d.type='CPR' inner join master_setting b on d.designation=b.master_id " +
                                "and b.type='MDG' where a.client_id|| a.client_unit_id|| a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'" +
                                " Group By a.teacher_id,  d.department,b.master_name,To_Char(a.Holiday_frm,'" + sgen.Getsqldateformat() + "')," +
                                " To_Char(a.Holiday_to, '" + sgen.Getsqldateformat() + "'),a.Holiday_name," +
                                " a.Holiday_Id,a.ent_by,a.ent_date,a.vch_num,a.client_id,a.client_unit_id,d.First_name || ' ' || " +
                                "Replace(d.middle_name, '0', '') || ' ' || Replace(d.last_name, '0', ''),d.designation ";
                            DataTable dtt = new DataTable();
                            string att_status_F = "", att_status_S = "";
                            dtt = sgen.getdata(userCode, mq);
                            //var tm = model.FirstOrDefault();
                            if (dtt.Rows.Count > 0)
                            {
                                ViewBag.vfill = "disabled='disabled'";
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region Department
                                TempData[MyGuid + "_TList1"] = mod1 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                                #endregion
                                foreach (DataRow dr in dtt.Rows)
                                {
                                    rpt_model.Add(new Tmodelmain
                                    {
                                        Col8 = "client_id|| client_unit_id|| vch_num|| To_Char(vch_date, 'yyyymmdd')|| type = '" + URL + "'",
                                        Col1 = dr["client_id"].ToString(),
                                        Col2 = dr["client_unit_id"].ToString(),
                                        Col3 = dr["ent_by"].ToString(),
                                        Col4 = dr["ent_date"].ToString(),
                                        Col5 = dr["vch_num"].ToString(),
                                        Col13 = "Update",
                                        Col100 = "Update & New",
                                        Col121 = "U",
                                        Col122 = "<u>U</u>pdate",
                                        Col123 = "Update & Ne<u>w</u>",
                                        Col9 = tm.Col9,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col16 = dr["From_dt"].ToString(),
                                        Col17 = dr["To_dt"].ToString(),
                                        Col18 = dr["teacher_id"].ToString(),
                                        Col19 = dr["teacher_name"].ToString(),
                                        Col20 = dr["Designation"].ToString(),
                                        Col21 = dr["Holiday_from"].ToString(),
                                        Col22 = dr["Holiday_to"].ToString(),
                                        Col23 = dr["Holiday_name"].ToString(),
                                        Col24 = dr["Holiday_id"].ToString(),
                                        //Col29 = dr["First_Half"].ToString(),
                                    });
                                }
                                rpt_model[0].TList1 = mod1;
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["department"].ToString()).Distinct()).Split(',');

                                rpt_model[0].SelectedItems1 = L1;
                                model = rpt_model;
                            }
                            break;
                    }
                    break;
                #endregion
                #region Teacher Weekly Off
                case "teac_wo":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = " select d.department, b.master_name as Designation, a.class" +
                                ",a.IsMonday,a.IsTuesday,a.IsWednesday,a.IsThursday,a.IsFriday,a.IsSaturday,a.IsSunday," +
                                "a.ent_by,a.ent_date,a.vch_num,a.client_id,a.client_unit_id,d.First_name ||" +
                                "' ' || Replace(d.middle_name,'0','') || ' '|| Replace(d.last_name,'0','') as Teacher_Name from add_class a " +
                                "inner join user_details d on a.class =d.vch_num and d.type='CPR' left join master_setting b on d.designation=b.master_id " +
                                "and b.type='MDG' where a.client_id|| a.client_unit_id|| a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'" +
                                " ";
                            DataTable dtt = new DataTable();
                            string att_status_F = "", att_status_S = "";
                            dtt = sgen.getdata(userCode, mq);
                            //var tm = model.FirstOrDefault();
                            Boolean chk1 = false, chk2 = false, chk3 = false, chk4 = false, chk5 = false, chk6 = false, chk7 = false;
                            if (dtt.Rows.Count > 0)
                            {
                                ViewBag.vfill = "disabled='disabled'";
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region Department
                                TempData[MyGuid + "_TList1"] = mod1 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);

                                #endregion
                                if (dtt.Rows[0]["IsMonday"].ToString() == "1") { chk1 = true; }
                                if (dtt.Rows[0]["IsTuesday"].ToString() == "1") { chk2 = true; }
                                if (dtt.Rows[0]["IsWednesday"].ToString() == "1") { chk3 = true; }
                                if (dtt.Rows[0]["IsThursday"].ToString() == "1") { chk4 = true; }
                                if (dtt.Rows[0]["IsFriday"].ToString() == "1") { chk5 = true; }
                                if (dtt.Rows[0]["IsSaturday"].ToString() == "1") { chk6 = true; }
                                if (dtt.Rows[0]["IsSunday"].ToString() == "1") { chk7 = true; }
                                List<Tmodelmain> rpt_model = new List<Tmodelmain>();

                                foreach (DataRow dr in dtt.Rows)
                                {
                                    Boolean chk8 = false, chk9 = false, chk10 = false, chk11 = false, chk12 = false, chk13 = false, chk14 = false;
                                    if (dr["IsMonday"].ToString() == "1") { chk8 = true; }
                                    if (dr["IsTuesday"].ToString() == "1") { chk9 = true; }
                                    if (dr["IsWednesday"].ToString() == "1") { chk10 = true; }
                                    if (dr["IsThursday"].ToString() == "1") { chk11 = true; }
                                    if (dr["IsFriday"].ToString() == "1") { chk12 = true; }
                                    if (dr["IsSaturday"].ToString() == "1") { chk13 = true; }
                                    if (dr["IsSunday"].ToString() == "1") { chk14 = true; }
                                    rpt_model.Add(new Tmodelmain
                                    {
                                        Col8 = "client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'",
                                        Col1 = dr["client_id"].ToString(),
                                        Col2 = dr["client_unit_id"].ToString(),
                                        Col3 = dr["ent_by"].ToString(),
                                        Col4 = dr["ent_date"].ToString(),
                                        Col5 = dr["vch_num"].ToString(),
                                        Col13 = "Update",
                                        Col100 = "Update & New",
                                        Col121 = "U",
                                        Col122 = "<u>U</u>pdate",
                                        Col123 = "Update & Ne<u>w</u>",
                                        Col9 = tm.Col9,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col18 = dr["class"].ToString(),
                                        Col19 = dr["teacher_name"].ToString(),
                                        Col20 = dr["Designation"].ToString(),
                                        Chk1 = chk1,
                                        Chk2 = chk2,
                                        Chk3 = chk3,
                                        Chk4 = chk4,
                                        Chk5 = chk5,
                                        Chk6 = chk6,
                                        Chk7 = chk7,
                                        Chk8 = chk8,
                                        Chk9 = chk9,
                                        Chk10 = chk10,
                                        Chk11 = chk11,
                                        Chk12 = chk12,
                                        Chk13 = chk13,
                                        Chk14 = chk14,
                                        //Col29 = dr["First_Half"].ToString(),
                                    });
                                }
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["department"].ToString()).Distinct()).Split(',');
                                rpt_model[0].TList1 = mod1;
                                rpt_model[0].SelectedItems1 = L1;
                                model = rpt_model;
                            }
                            break;
                    }
                    break;
                #endregion                
                #region holiday_master
                case "holiday_master":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            var tm1 = model.FirstOrDefault();

                            mq = "select a.Holiday_Id,a.Holiday_Name,To_Char(min(a.Holiday_frm),'" + sgen.Getsqldateformat() + "')  as Holiday_frm," +
                                            "To_Char(min(a.Holiday_to),'" + sgen.Getsqldateformat() + "') as Holiday_to ,a.ent_by,a.ent_date,a.IsStudent_Holiday,IsTeacher_Holiday,a.vch_num," +
                                            "a.vch_date,group_concat(class) as class_id,a.rec_id,a.vch_num from holiday_master a" +
                                            " where a.client_id|| a.client_unit_id|| a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'" +
                                            "group by a.Holiday_Id,a.Holiday_Name  ,a.ent_by,a.ent_date,a.IsStudent_Holiday,IsTeacher_Holiday,a.vch_num,a.vch_date,a.rec_id,a.vch_num ";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region bindclass

                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);

                                #endregion
                                model[0].Col8 = "client_id||client_unit_id||vch_num|| To_Char(vch_date, 'yyyymmdd')||type = '" + URL + "'";
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col20 = dt.Rows[0]["Holiday_Id"].ToString();
                                model[0].Col21 = dt.Rows[0]["vch_date"].ToString();
                                model[0].Col17 = dt.Rows[0]["Holiday_Name"].ToString();
                                model[0].Col18 = dt.Rows[0]["Holiday_frm"].ToString();
                                model[0].Col19 = dt.Rows[0]["Holiday_to"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dt.Rows[0]["rec_id"].ToString();
                                String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>()
                                       .Select(r => r["class_id"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                if (dt.Rows[0]["IsStudent_Holiday"].ToString() == "1")
                                {
                                    model[0].Chk2 = true;
                                }
                                if (dt.Rows[0]["IsTeacher_Holiday"].ToString() == "1")
                                {
                                    model[0].Chk1 = true;
                                }
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Col10 = tm1.Col10;
                                model[0].Col12 = tm1.Col12;
                            }

                            break;
                    }
                    break;
                #endregion
                #region section_strength
                case "section_strength":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            // reena callback done
                            mq = "SELECT a.master_id,a.vch_date,a.vch_num,a.classid,a.sectionid, a.master_name as Section_strength ," +
                         "a.subject_strength,a.status,a.rec_id,a.FemaleRatio,a.MaleRatio, a.SectionType, a.master_entby as ent_by" +
                         ",a.master_entdate as  Ent_Date,a.client_id,a.client_unit_id from  master_setting a" +
                         " where  a.client_id|| a.client_unit_id|| a.vch_num|| To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "'" +
                         " and a.master_type='Sec_str'   order by a.master_name";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            //var tm = model.FirstOrDefault();
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region 
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);    // bindclass

                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst); // bindsection

                                #endregion
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col24 = dtt.Rows[0]["vch_date"].ToString();
                                model[0].Col23 = dtt.Rows[0]["master_id"].ToString();

                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>()
                                    .Select(r => r["classid"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;

                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>()
                                 .Select(r => r["sectionid"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                model[0].Col18 = dtt.Rows[0]["FemaleRatio"].ToString();
                                model[0].Col22 = dtt.Rows[0]["MaleRatio"].ToString();
                                model[0].Col19 = dtt.Rows[0]["Section_strength"].ToString();
                                model[0].Col20 = dtt.Rows[0]["subject_strength"].ToString();
                                model[0].Col21 = dtt.Rows[0]["status"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||vch_num||To_Char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col9 = tm.Col9;
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Chk1 = false;
                                if (Convert.ToDecimal(model[0].Col18.ToString()) > 0)
                                {
                                    model[0].Chk1 = true;
                                }
                                if (dtt.Rows[0]["SectionType"].ToString().ToUpper().Contains("FEMALE"))
                                {
                                    model[0].Col17 = "0";
                                    ViewBag.scripcall = "$('[id *= femratio]').hide();";
                                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "SessionAlert", "$('[id *= femratio]').hide();", true);
                                }
                                else if (dtt.Rows[0]["SectionType"].ToString().ToUpper().Contains("MALE"))
                                {
                                    model[0].Col17 = "1";
                                    ViewBag.scripcall = "$('[id *= femratio]').hide();";
                                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "SessionAlert", "$('[id *= femratio]').hide();", true);
                                }
                                else if (dtt.Rows[0]["SectionType"].ToString().ToUpper().Contains("BOTH"))
                                {
                                    model[0].Col17 = "2";
                                    ViewBag.scripcall = "$('[id *= femratio]').show();";
                                    // ScriptManager.RegisterStartupScript(this, this.GetType(), "SessionAlert", "$('[id *= femratio]').show();", true);
                                }
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region educategory
                case "edu_category":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            // reena callback done
                            //mq = "select a.group_name, a.client_name,a.rec_id, master_id, a.vch_num, a.master_name,a.master_entby as ent_by," +
                            //    "a.master_entdate as ent_date,To_Char(a.vch_date, '" + sgen.Getsqldateformat() + "') as vch_date" +
                            //",a.section_Strength,a.classid,a.sectionid,a.Status,a.Inactive_date,a.client_id,a.client_unit_id,a.vch_num,a.type" +
                            //" from master_setting a where a.client_id|| a.client_unit_id|| a.master_id|| " +
                            //"To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "' ";

                            mq = "select  a.rec_id, master_id, a.vch_num, a.master_name,a.master_entby as ent_by," +
                            "a.master_entdate as ent_date,To_Char(a.vch_date, '" + sgen.Getsqldateformat() + "') as vch_date" +
                        ",a.section_Strength,a.classid,a.sectionid,a.Status,a.client_id,a.client_unit_id" +
                        " from master_setting a where a.client_id|| a.client_unit_id|| a.master_id|| " +
                        "To_Char(a.vch_date, 'yyyymmdd')|| a.type='" + URL + "' ";

                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col8 = "client_id|| client_unit_id||master_id|| To_Char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col23 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dt.Rows[0]["vch_date"].ToString();
                                model[0].Col18 = dt.Rows[0]["master_name"].ToString();
                                model[0].Col19 = dt.Rows[0]["classid"].ToString();
                                model[0].Col21 = dt.Rows[0]["sectionid"].ToString();
                                model[0].Col20 = dt.Rows[0]["section_Strength"].ToString();
                                model[0].Col16 = dt.Rows[0]["master_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dt.Rows[0]["rec_id"].ToString();
                                model[0].Col22 = dt.Rows[0]["status"].ToString();
                                if ((dt.Rows[0]["status"].ToString() == "")) { model[0].Col17 = "Y"; }
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                            }
                            //}
                            break;
                    }
                    break;
                #endregion                
                #region std_reg
                case "std_registration":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            DataTable dtreg = new DataTable();
                            mq = "select a.*,To_Char(dob,'" + sgen.Getsqldateformat() + "') as dob," +
                                "To_Char(f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                                "To_Char(m_dob,'" + sgen.Getsqldateformat() + "') as m_dob," +
                                "To_Char(g_dob,'" + sgen.Getsqldateformat() + "') as g_dob," +
                                "To_Char(transfer_dt,'" + sgen.Getsqldateformat() + "') as transfer_dt from student_applicant_details a " +
                                "where client_id|| client_unit_id|| vch_num || To_Char(vch_date, 'yyyymmdd')|| type='" + URL + "'";
                            dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region 1.bindnationality
                                mod1 = cmd_Fun.country(userCode, unitid_mst);
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1; //nationality
                                TempData[MyGuid + "_Tlist18"] = model[0].TList18 = mod1;//nationality
                                TempData[MyGuid + "_TList23"] = model[0].TList23 = mod1;//nationality
                                TempData[MyGuid + "_TList13"] = model[0].TList13 = mod1;//nationality
                                #endregion
                                #region 2.bindclass
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClass(userCode, unitid_mst);
                                TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod2;//class
                                TempData[MyGuid + "_TList27"] = model[0].TList27 = mod2;//class
                                #endregion
                                #region 3.bindacademicyr
                                dt = sgen.BindAcademicYear(userCode, clientid_mst);
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;//academicyr
                                #endregion
                                #region 4.caste category
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = cmd_Fun.caste_cate(userCode, unitid_mst);
                                #endregion
                                #region 5.Religion
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = cmd_Fun.religion(userCode, unitid_mst);
                                #endregion
                                #region 6.bloodgroup
                                mod6.Add(new SelectListItem { Text = "A+", Value = "A+" });
                                mod6.Add(new SelectListItem { Text = "B+", Value = "B+" });
                                mod6.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
                                mod6.Add(new SelectListItem { Text = "O+", Value = "O+" });
                                mod6.Add(new SelectListItem { Text = "A-", Value = "A-" });
                                mod6.Add(new SelectListItem { Text = "B-", Value = "B-" });
                                mod6.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
                                mod6.Add(new SelectListItem { Text = "O-", Value = "O-" });
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;//bloodgrp
                                #endregion
                                #region 7.pickuplocation
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7 = cmd_Fun.pickdrop(userCode, unitid_mst);
                                #endregion
                                #region 8.droplocation
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8 = mod7;
                                #endregion
                                #region 9.disablity
                                mod9.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                                mod9.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;//disability
                                #endregion
                                #region 11.hobby
                                TempData[MyGuid + "_Tlist11"] = model[0].TList11 = mod11 = cmd_Fun.hobby(userCode, unitid_mst);
                                #endregion
                                #region 12.father title
                                mod12.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod12.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod12.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod12.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;//ftitle
                                #endregion
                                #region 14.qualification
                                mod13 = cmd_Fun.qualification(userCode, unitid_mst, out defcall);
                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod13;//qualification
                                TempData[MyGuid + "_TList19"] = model[0].TList19 = mod13;//qualification
                                TempData[MyGuid + "_TList24"] = model[0].TList24 = mod13;//qualification
                                #endregion
                                #region 15.Annual income
                                mod14 = cmd_Fun.annincome(userCode, unitid_mst);
                                TempData[MyGuid + "_TList26"] = model[0].TList26 = mod14;//annual income
                                TempData[MyGuid + "_TList20"] = model[0].TList20 = mod14;//annual income
                                TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod14;//annual income
                                #endregion
                                #region 16.Alumini
                                mod15.Add(new SelectListItem { Text = "None", Value = "None" });
                                mod15.Add(new SelectListItem { Text = "Staff", Value = "Staff" });
                                mod15.Add(new SelectListItem { Text = "Student", Value = "Student" });
                                TempData[MyGuid + "_TList25"] = model[0].TList25 = mod15;//alumni
                                TempData[MyGuid + "_Tlist16"] = model[0].TList16 = mod15;//alumni
                                TempData[MyGuid + "_TList21"] = model[0].TList21 = mod15;//alumni
                                #endregion
                                #region 17.Mother title
                                mod16.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod16.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod16.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod16.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod16;//mtitle
                                #endregion
                                #region 18.Gurdian title
                                mod17.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod17.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod17.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod17.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                TempData[MyGuid + "_TList22"] = model[0].TList22 = mod17;//gtitle
                                #endregion
                                #region 28.relation
                                mod28.Add(new SelectListItem { Text = "Brother", Value = "B" });
                                mod28.Add(new SelectListItem { Text = "Sister", Value = "S" });
                                TempData[MyGuid + "_TList28"] = model[0].TList28 = mod28;//relation
                                #endregion
                                #region 29.caste
                                TempData[MyGuid + "_TList29"] = model[0].TList29 = mod29 = cmd_Fun.caste(userCode, unitid_mst);

                                #endregion

                                String[] L1 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["nationality"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["class_applied"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["usession"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["ucaste"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["religion"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["blood_grp"].ToString()).Distinct()).Split(',');
                                String[] L29 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["std_caste"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems29 = L29;
                                model[0].Col1 = dtreg.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtreg.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtreg.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtreg.Rows[0]["ent_date"].ToString();
                                model[0].Col5 = dtreg.Rows[0]["edit_by"].ToString();
                                model[0].Col6 = dtreg.Rows[0]["edit_date"].ToString();
                                model[0].Col7 = dtreg.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||vch_num|| To_Char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col9 = tm.Col9;
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col134 = "Update & New";
                                model[0].Col131 = "U";
                                model[0].Col132 = "<u>U</u>pdate";
                                model[0].Col133 = "Update & Ne<u>w</u>";
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                if (tm.Col116 == null) model[0].Col116 = "0";
                                else model[0].Col116 = tm.Col116;
                                if (tm.Col118 == null) model[0].Col118 = "0";
                                else model[0].Col118 = tm.Col118;
                                model[0].Col91 = "file_tab";
                                model[0].Col17 = dtreg.Rows[0]["vch_num"].ToString().Trim();
                                model[0].Col18 = dtreg.Rows[0]["first_name"].ToString().Trim();
                                model[0].Col19 = dtreg.Rows[0]["middle_name"].ToString().Trim();
                                model[0].Col20 = dtreg.Rows[0]["last_name"].ToString().Trim();
                                model[0].Col21 = dtreg.Rows[0]["gender"].ToString().Trim();
                                //model[0].Col22 = dtreg.Rows[0]["dob1"].ToString().Trim();
                                if (dtreg.Rows[0]["dob1"].ToString() != "01/01/1900")
                                {
                                    model[0].Col22 = dtreg.Rows[0]["dob1"].ToString().Trim();
                                }
                                model[0].Col23 = dtreg.Rows[0]["place_of_birth"].ToString().Trim();
                                model[0].Col24 = dtreg.Rows[0]["main_language"].ToString().Trim();
                                model[0].Col25 = dtreg.Rows[0]["adhaar_id"].ToString().Trim();
                                issibling = dtreg.Rows[0]["issibling"].ToString().Trim();
                                if (issibling.Equals("Y"))
                                {
                                    model[0].Chk1 = true;
                                    issameschool = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                    if (issameschool.Trim().Equals("Y"))
                                    {
                                        model[0].Col105 = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                        model[0].Col26 = dtreg.Rows[0]["sibling2_rollno"].ToString().Trim();
                                        string sibname = sgen.getstring(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||replace(last_name,'0','') as std_name from user_details " +
                                            "where regnumber='" + dtreg.Rows[0]["sibling2_rollno"].ToString().Trim() + "'");
                                        model[0].Col27 = sibname;
                                    }
                                    else if (issameschool.Trim().Equals("O"))
                                    {
                                        model[0].Col105 = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                        model[0].Col106 = dtreg.Rows[0]["sibling1_name"].ToString().Trim();
                                        model[0].Col107 = dtreg.Rows[0]["sibling1_class"].ToString().Trim();
                                        String[] L27 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["sibling2_name"].ToString()).Distinct()).Split(',');
                                        String[] L28 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["sibling2_class"].ToString()).Distinct()).Split(',');
                                        model[0].SelectedItems27 = L27;
                                        model[0].SelectedItems28 = L28;
                                    }
                                }
                                else
                                {
                                    model[0].Col119 = dtreg.Rows[0]["sibling2_rollno"].ToString().Trim();
                                }
                                isfamily = dtreg.Rows[0]["isfamily"].ToString().Trim();
                                if (isfamily.Equals("Y"))
                                {
                                    model[0].Chk2 = true;
                                    model[0].Col28 = dtreg.Rows[0]["sibling1_reg_no"].ToString().Trim();
                                    string fcname = sgen.getstring(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||replace(last_name,'0','') as std_name from user_details " +
                                        "where regnumber='" + dtreg.Rows[0]["sibling1_reg_no"].ToString().Trim() + "'");
                                    model[0].Col29 = fcname;
                                }
                                else
                                {
                                    model[0].Col120 = dtreg.Rows[0]["sibling1_reg_no"].ToString().Trim();
                                }
                                isscholarship = dtreg.Rows[0]["scholarship"].ToString().Trim();
                                if (isscholarship.Equals("Y")) model[0].Chk3 = true;
                                ishobby = dtreg.Rows[0]["ishobby"].ToString().Trim();
                                if (ishobby.Equals("Y"))
                                {
                                    model[0].Chk7 = true;
                                    String[] L11 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["std_hobby"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems11 = L11;
                                }
                                model[0].Col30 = dtreg.Rows[0]["havetransport"].ToString().Trim();
                                String[] L7 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["pick_point"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["drop_point"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                string vill1 = dtreg.Rows[0]["per_village"].ToString().Trim();
                                if (vill1.Trim().Length > 2)
                                {
                                    DataTable dtvill1 = new DataTable();
                                    dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name, city_name, district_name, teh_name, v_name from country_state where v_id = '"
                                        + dtreg.Rows[0]["per_village"].ToString().Trim() + "' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill1.Rows.Count > 0)
                                    {
                                        model[0].Col37 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col36 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col34 = dtvill1.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col35 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col33 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col32 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col16 = dtvill1.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col31 = dtreg.Rows[0]["per_address"].ToString().Trim();
                                isperadd = dtreg.Rows[0]["isperadd"].ToString().Trim();
                                if (isperadd.Equals("Y")) model[0].Chk4 = true;
                                string vill2 = dtreg.Rows[0]["cur_village"].ToString().Trim();
                                if (!vill2.Equals(""))
                                {
                                    DataTable dtvill2 = new DataTable();
                                    dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,city_name,district_name,teh_name,v_name from country_state where v_id='"
                                        + dtreg.Rows[0]["cur_village"].ToString().Trim() + "' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill2.Rows.Count > 0)
                                    {
                                        model[0].Col44 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col43 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col41 = dtvill2.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col42 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col40 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col39 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col96 = dtvill2.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col38 = dtreg.Rows[0]["cur_address"].ToString().Trim();
                                isdisable = dtreg.Rows[0]["isdisable"].ToString().Trim();
                                if (isdisable.Equals("Y"))
                                {
                                    model[0].Chk5 = true;
                                    String[] L9 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["dis_type"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems9 = L9;
                                    model[0].Col45 = dtreg.Rows[0]["dis_desc"].ToString().Trim();
                                }
                                istransfer = dtreg.Rows[0]["istransfer"].ToString().Trim();
                                if (istransfer.Equals("Y"))
                                {
                                    model[0].Chk6 = true;
                                    model[0].Col46 = dtreg.Rows[0]["prev_school_name"].ToString().Trim();
                                    model[0].Col47 = dtreg.Rows[0]["transfer_dt1"].ToString().Trim();
                                    String[] L10 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["transfer_class"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems10 = L10;
                                    model[0].Col121 = dtreg.Rows[0]["transfer_reason"].ToString();
                                }
                                String[] L12 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems12 = L12;
                                model[0].Col48 = dtreg.Rows[0]["f_firstname"].ToString().Trim();
                                model[0].Col49 = dtreg.Rows[0]["f_middlename"].ToString().Trim();
                                model[0].Col50 = dtreg.Rows[0]["f_lastname"].ToString().Trim();
                                //model[0].Col51 = dtreg.Rows[0]["f_dob1"].ToString().Trim();
                                if (dtreg.Rows[0]["f_dob1"].ToString() != "01/01/1900")
                                {
                                    model[0].Col51 = dtreg.Rows[0]["f_dob1"].ToString().Trim();
                                }
                                String[] L14 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_qualification"].ToString()).Distinct()).Split(',');
                                String[] L13 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_nationality"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems14 = L14;
                                model[0].SelectedItems13 = L13;
                                model[0].Col52 = dtreg.Rows[0]["f_occupation"].ToString().Trim();
                                model[0].Col53 = dtreg.Rows[0]["f_designation"].ToString().Trim();
                                String[] L15 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems15 = L15;
                                model[0].Col54 = dtreg.Rows[0]["f_org_name"].ToString().Trim();
                                model[0].Col55 = dtreg.Rows[0]["f_adhaar_Id"].ToString().Trim();
                                model[0].Col56 = dtreg.Rows[0]["f_con_number"].ToString().Trim();
                                model[0].Col57 = dtreg.Rows[0]["f_email"].ToString().Trim();
                                String[] L16 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_alumni_type"].ToString()).Distinct()).Split(',');
                                String[] L17 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems17 = L17;
                                model[0].SelectedItems16 = L16;
                                model[0].Col58 = dtreg.Rows[0]["m_firstname"].ToString().Trim();
                                model[0].Col59 = dtreg.Rows[0]["m_middlename"].ToString().Trim();
                                model[0].Col60 = dtreg.Rows[0]["m_lastname"].ToString().Trim();
                                //model[0].Col61 = dtreg.Rows[0]["m_dob1"].ToString().Trim();
                                if (dtreg.Rows[0]["m_dob1"].ToString() != "01/01/1900")
                                {
                                    model[0].Col61 = dtreg.Rows[0]["m_dob1"].ToString().Trim();
                                }
                                String[] L19 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems19 = L19;
                                String[] L18 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_nationality"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems18 = L18;
                                model[0].Col62 = dtreg.Rows[0]["m_occupation"].ToString().Trim();
                                model[0].Col63 = dtreg.Rows[0]["m_designation"].ToString().Trim();
                                String[] L20 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems20 = L20;
                                model[0].Col64 = dtreg.Rows[0]["m_org_name"].ToString().Trim();
                                model[0].Col65 = dtreg.Rows[0]["m_adhaar_id"].ToString().Trim();
                                model[0].Col66 = dtreg.Rows[0]["m_con_number"].ToString().Trim();
                                model[0].Col67 = dtreg.Rows[0]["m_email"].ToString().Trim();
                                String[] L21 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_alumni_type"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems21 = L21;
                                model[0].Col68 = dtreg.Rows[0]["sameas"].ToString().Trim();
                                String[] L22 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems22 = L22;
                                model[0].Col69 = dtreg.Rows[0]["g_firstname"].ToString().Trim();
                                model[0].Col70 = dtreg.Rows[0]["g_middlename"].ToString().Trim();
                                model[0].Col71 = dtreg.Rows[0]["g_lastname"].ToString().Trim();
                                //model[0].Col72 = dtreg.Rows[0]["g_dob1"].ToString().Trim();
                                if (dtreg.Rows[0]["g_dob1"].ToString() != "01/01/1900")
                                {
                                    model[0].Col72 = dtreg.Rows[0]["g_dob1"].ToString().Trim();
                                }
                                String[] L23 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_nationality"].ToString()).Distinct()).Split(',');
                                String[] L24 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems23 = L23;
                                model[0].SelectedItems24 = L24;
                                model[0].Col73 = dtreg.Rows[0]["g_occupation"].ToString().Trim();
                                model[0].Col74 = dtreg.Rows[0]["g_designation"].ToString().Trim();
                                model[0].Col75 = dtreg.Rows[0]["g_org_name"].ToString().Trim();
                                model[0].Col76 = dtreg.Rows[0]["g_adhaar_id"].ToString().Trim();
                                model[0].Col78 = dtreg.Rows[0]["g_email"].ToString().Trim();
                                model[0].Col77 = dtreg.Rows[0]["g_con_number"].ToString().Trim();
                                String[] L26 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems26 = L26;
                                String[] L25 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_alumni_type"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems25 = L25;
                                model[0].Col86 = dtreg.Rows[0]["withdrawl_no"].ToString().Trim();
                                model[0].Col88 = dtreg.Rows[0]["enrollment_no"].ToString().Trim();
                                model[0].Col87 = dtreg.Rows[0]["srn_no"].ToString().Trim();
                                model[0].Col89 = dtreg.Rows[0]["default_emailid"].ToString().Trim();
                                model[0].Col90 = dtreg.Rows[0]["default_ph"].ToString().Trim();
                                model[0].Col103 = dtreg.Rows[0]["sssm_id"].ToString().Trim();
                                model[0].Col110 = dtreg.Rows[0]["std_type"].ToString();
                                if (dtreg.Rows[0]["std_type"].ToString() == "" || dtreg.Rows[0]["std_type"].ToString() == "0") { model[0].Col110 = "Old"; }
                                model[0].Col125 = "N";
                                mq3 = sgen.seekval(userCode, "select student_id from student_receipt_detail where student_id = '" + dtreg.Rows[0]["sa_id"].ToString() + "'", "student_id");
                                if (mq3 != "0") { model[0].Col125 = "Y"; }
                                model[0].Col111 = dtreg.Rows[0]["old_regno"].ToString().Trim();
                                sgen.SetSession(MyGuid, "vch_num_std", dtreg.Rows[0]["vch_num"].ToString().Trim());
                                mq = "select edu_board from company_unit_profile where company_profile_id='" + clientid_mst + "' and cup_id='" + unitid_mst + "'";
                                mq = sgen.seekval(userCode, mq, "edu_board");
                                if (mq.Trim() != "0")
                                {
                                    if (mq.Trim().Equals("002")) model[0].Col104 = mq.Trim();
                                    else if (mq.Trim().Equals("001")) model[0].Col117 = mq.Trim();
                                }
                                if (!role_mst.ToUpper().Equals("OWNER"))
                                {
                                    mq = "select mod_id from user_details where type='CPR' and vch_num='" + Convert.ToInt32(userid_mst) + "' and find_in_set('25000',mod_id)=1";
                                    mq = sgen.seekval(userCode, mq, "mod_id");
                                    if (mq != "0")
                                    {
                                        if (mq.Trim().Split(',').Contains("25000")) model[0].Col109 = "1";
                                    }
                                }
                                else model[0].Col109 = "1";
                                DataTable dtf = new DataTable();
                                dtf = sgen.getdata(userCode, "select rec_id,file_name,file_path,col1,col2 from file_tab where" +
                                    " ref_code='" + dtreg.Rows[0]["vch_num"].ToString() + "' and type='STD' and client_unit_id='" + unitid_mst + "'");
                                List<Tmodelmain> ltmf = new List<Tmodelmain>();
                                foreach (DataRow drf in dtf.Rows)
                                {
                                    Tmodelmain tmf = new Tmodelmain();
                                    tmf.Col4 = drf["file_path"].ToString();
                                    tmf.Col1 = drf["file_name"].ToString();
                                    tmf.Col2 = drf["col1"].ToString();
                                    tmf.Col3 = drf["rec_id"].ToString();
                                    tmf.Col5 = drf["col2"].ToString();
                                    ltmf.Add(tmf);
                                }
                                model[0].LTM1 = ltmf;
                            }
                            break;
                        case "FDEL":
                            string fid = sgen.GetSession(MyGuid, "delid").ToString();
                            res = sgen.execute_cmd(userCode, "Delete from file_tab WHERE rec_id='" + fid + "' and type='STD' and client_unit_id='" + unitid_mst + "'");
                            sgen.SetSession(MyGuid, "delid", null);
                            if (res)
                            {
                                var LTM = model[0].LTM1;
                                for (int d = 0; d < LTM.Count; d++)
                                {
                                    var id = LTM[d].Col3;
                                    if (id == fid) { model[0].LTM1.RemoveAt(d); }
                                }
                            }
                            break;
                        case "CONFSTD":
                            //                            mq = "select ud.rec_id,ud.vch_num,ud.ent_by,ud.ent_date,nvl(ud.FIRST_NAME,'') first_name,nvl(REPLACE(ud.MIDDLE_NAME, '0', ''),'') middle_name,nvl(ud.LAST_NAME,'') last_name," +
                            //"ud.f_title,nvl(ud.f_FIRSTNAME,'') f_firstname,nvl(REPLACE(ud.f_MIDDLENAME, '0', ''),'') f_middlename,nvl(ud.f_LASTNAME,'') f_lastname," +
                            //"ud.m_title,nvl(ud.m_FIRSTNAME,'') m_firstname,nvl(REPLACE(ud.m_MIDDLENAME, '0', ''),'') m_middlename,nvl(ud.m_LASTNAME,'') m_lastname," +
                            //"ud.g_title,nvl(ud.g_FIRSTNAME,'') g_firstname,nvl(REPLACE(ud.g_MIDDLENAME, '0', ''),'') g_middlename,nvl(ud.g_LASTNAME,'') g_lastname," +
                            //"to_char(ud.dob,  '" + sgen.Getsqldateformat() + "') as DOB,ud.blood_grp,ud.gender as Gender," +
                            //"ud.place_of_birth,ud.main_language,nvl(sd.class_applied,'-') as Class_applied,nvl(sd.roll_number,'-') as roll_number,nvl(sd.section,'-') hfsec,nvl(sec.master_name,'-') section," +
                            //"nvl(sd.academic_year_id,'-') as academic_year_id,sd.studenttype,ud.adhaar_id,nvl(ud.religion,'-') as Religion,nvl(ud.ucaste,'-') as ucaste ,nvl(ud.std_caste,'-') as std_caste,ud.NATIONALITY," +
                            //"ud.issibling,ud.sibling1_rollno,ud.isfamily,ud.sibling2_rollno,ud.scholarship,ud.havetransport,ud.pick_point,ud.drop_point,ud.per_address,ud.per_village," +
                            //"ud.isperadd,ud.cur_address,cur_village,ud.isdisable,ud.dis_type,ud.dis_desc,ud.istransfer,ud.prev_school_name,ud.transfer_class,ud.transfer_reason," +
                            //"ud.ishobby,ud.std_hobby,to_char(ud.transfer_dt,'" + sgen.Getsqldateformat() + "') transfer_dt," +
                            //"to_char(ud.f_dob,'" + sgen.Getsqldateformat() + "') f_dob,ud.f_email,ud.f_adhaar_id," +
                            //"ud.f_qualification,ud.f_occupation,ud.f_designation,ud.f_org_name,ud.f_annual_income,ud.f_con_number,ud.f_alumni_type,ud.f_nationality," +
                            //"to_char(ud.m_dob,'" + sgen.Getsqldateformat() + "') m_dob,ud.m_email,ud.m_adhaar_id," +
                            //"ud.m_qualification,ud.m_occupation,ud.m_designation,ud.m_org_name,ud.m_annual_income,ud.m_con_number,ud.m_alumni_type,ud.m_nationality," +
                            //"to_char(ud.g_dob,'" + sgen.Getsqldateformat() + "') g_dob,ud.g_email,ud.g_adhaar_id," +
                            //"ud.g_qualification,ud.g_occupation,ud.g_designation,ud.g_org_name,ud.g_annual_income,ud.g_con_number,ud.g_nationality,ud.g_alumni_type,ud.sameas," +
                            //"ud.regnumber,ud.srn_no,ud.withdrawl_no,ud.enrollment_no,ud.default_emailid,ud.default_ph,ud.sssm_id,ud.std_type,ud.old_regno,ud.issameschool,ud.sibling1_name,ud.sibling1_class,ud.sibling2_name,ud.sibling2_class " +
                            //"from user_details ud left outer join student_detail sd on sd.reg_no=ud.RegNumber and sd.type= ud.type and sd.academic_year_id='" + Ac_Year_id + "'" +
                            //"left outer join master_setting sec on sd.section= sec.master_id  and find_in_set(sd.client_unit_id, sec.client_unit_id)=1  and sec.type= 'ECS' " +
                            //"WHERE ud.rec_id|| to_char(ud.vch_date, 'yyyymmdd')|| ud.type='" + URL + "'";


                            // reena when this query run nvl ok"     
                            mq = "select ud.rec_id,ud.vch_num,ud.per_id,ud.ent_by,ud.ent_date,ud.FIRST_NAME first_name,nvl(REPLACE(ud.MIDDLE_NAME, '0', ''),'') middle_name,nvl(ud.LAST_NAME,'') last_name," +
"ud.f_title,ud.f_FIRSTNAME f_firstname,nvl(REPLACE(ud.f_MIDDLENAME, '0', ''),'') f_middlename,nvl(ud.f_LASTNAME,'') f_lastname," +
"ud.m_title,ud.m_FIRSTNAME m_firstname,nvl(REPLACE(ud.m_MIDDLENAME, '0', ''),'') m_middlename,nvl(ud.m_LASTNAME,'') m_lastname," +
"ud.g_title,ud.g_FIRSTNAME g_firstname,nvl(REPLACE(ud.g_MIDDLENAME, '0', ''),'') g_middlename,nvl(ud.g_LASTNAME,'') g_lastname," +
"to_char(ud.dob,  '" + sgen.Getsqldateformat() + "') as DOB,ud.blood_grp,ud.gender as Gender," +
"ud.place_of_birth,ud.main_language,sd.class_applied as Class_applied,nvl(sd.roll_number,'-') as roll_number,nvl(sd.section,'-') hfsec,nvl(sec.master_name,'-') section," +
"sd.academic_year_id as academic_year_id,sd.studenttype,ud.adhaar_id,nvl(ud.religion,'-') as Religion,nvl(ud.ucaste,'-') as ucaste ,nvl(ud.std_caste,'-') as std_caste,ud.NATIONALITY," +
"ud.issibling,ud.sibling1_rollno,ud.isfamily,ud.sibling2_rollno,ud.scholarship,ud.havetransport,ud.pick_point,ud.drop_point,ud.per_address,ud.per_village," +
"ud.isperadd,ud.cur_address,cur_village,ud.isdisable,ud.dis_type,ud.dis_desc,ud.istransfer,ud.prev_school_name,ud.transfer_class,ud.transfer_reason," +
"ud.ishobby,ud.std_hobby,to_char(ud.transfer_dt,'" + sgen.Getsqldateformat() + "') transfer_dt," +
"to_char(ud.f_dob,'" + sgen.Getsqldateformat() + "') f_dob,ud.f_email,ud.f_adhaar_id," +
"ud.f_qualification,ud.f_occupation,ud.f_designation,ud.f_org_name,ud.f_annual_income,ud.f_con_number,ud.f_alumni_type,ud.f_nationality," +
"to_char(ud.m_dob,'" + sgen.Getsqldateformat() + "') m_dob,ud.m_email,ud.m_adhaar_id," +
"ud.m_qualification,ud.m_occupation,ud.m_designation,ud.m_org_name,ud.m_annual_income,ud.m_con_number,ud.m_alumni_type,ud.m_nationality," +
"to_char(ud.g_dob,'" + sgen.Getsqldateformat() + "') g_dob,ud.g_email,ud.g_adhaar_id," +
"ud.g_qualification,ud.g_occupation,ud.g_designation,ud.g_org_name,ud.g_annual_income,ud.g_con_number,ud.g_nationality,ud.g_alumni_type,ud.sameas," +
"ud.regnumber,ud.srn_no,ud.withdrawl_no,ud.enrollment_no,ud.default_emailid,ud.default_ph,ud.sssm_id,ud.std_type,ud.old_regno,ud.issameschool,ud.sibling1_name,ud.sibling1_class,ud.sibling2_name,ud.sibling2_class " +
"from user_details ud left outer join student_detail sd on sd.reg_no=ud.RegNumber and sd.type= ud.type and sd.academic_year_id='" + Ac_Year_id + "'" +
"left outer join master_setting sec on sd.section= sec.master_id  and find_in_set(sd.client_unit_id, sec.client_unit_id)=1  and sec.type= 'ECS' " +
"WHERE ud.vch_num|| to_char(ud.vch_date, 'yyyymmdd')|| ud.type='" + URL + "'";


                            dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                string defval = "";
                                #region 1.bindnationality
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.country(userCode, unitid_mst);
                                TempData[MyGuid + "_TList23"] = model[0].TList23 = mod1;//nationality
                                TempData[MyGuid + "_TList13"] = model[0].TList13 = mod1;//nationality
                                TempData[MyGuid + "_Tlist18"] = model[0].TList18 = mod1;//nationality
                                #endregion
                                #region 2.bindclass
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClass(userCode, unitid_mst);
                                TempData[MyGuid + "_TList27"] = model[0].TList27 = mod2;
                                TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod2;//class
                                #endregion
                                #region 3.bindacademicyr
                                dt = sgen.BindAcademicYear(userCode, clientid_mst);
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                #endregion
                                #region 4.caste category
                                //mod4 = cmd_Fun.caste(userCode, clientid_mst, unitid_mst);
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = cmd_Fun.caste_cate(userCode, unitid_mst);
                                #endregion
                                #region 5.Religion
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = cmd_Fun.religion(userCode, unitid_mst);
                                #endregion
                                #region 6.bloodgroup
                                mod6.Add(new SelectListItem { Text = "A+", Value = "A+" });
                                mod6.Add(new SelectListItem { Text = "B+", Value = "B+" });
                                mod6.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
                                mod6.Add(new SelectListItem { Text = "O+", Value = "O+" });
                                mod6.Add(new SelectListItem { Text = "A-", Value = "A-" });
                                mod6.Add(new SelectListItem { Text = "B-", Value = "B-" });
                                mod6.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
                                mod6.Add(new SelectListItem { Text = "O-", Value = "O-" });
                                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;//bloodgrp
                                #endregion
                                #region 7.pickuplocation
                                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7 = cmd_Fun.pickdrop(userCode, unitid_mst);
                                #endregion
                                #region 8.droplocation
                                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8 = mod7;
                                #endregion
                                #region 9.disablity
                                mod9.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                                mod9.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;//disability
                                #endregion
                                #region 11.hobby
                                TempData[MyGuid + "_Tlist11"] = model[0].TList11 = mod11 = cmd_Fun.hobby(userCode, unitid_mst);
                                #endregion
                                #region 12.father title
                                mod12.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod12.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod12.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod12.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;//ftitle
                                #endregion
                                #region 14.qualification
                                mod13 = cmd_Fun.qualification(userCode, unitid_mst, out defval);
                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod13;//qualification
                                TempData[MyGuid + "_TList19"] = model[0].TList19 = mod13;//qualification
                                TempData[MyGuid + "_TList24"] = model[0].TList24 = mod13;//qualification
                                #endregion
                                #region 15.Annual income
                                mod14 = cmd_Fun.annincome(userCode, unitid_mst);
                                TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod14;//annual income
                                TempData[MyGuid + "_TList20"] = model[0].TList20 = mod14;//annual income
                                TempData[MyGuid + "_TList26"] = model[0].TList26 = mod14;//annual income
                                #endregion
                                #region 16.Alumini
                                mod15.Add(new SelectListItem { Text = "None", Value = "None" });
                                mod15.Add(new SelectListItem { Text = "Staff", Value = "Staff" });
                                mod15.Add(new SelectListItem { Text = "Student", Value = "Student" });
                                TempData[MyGuid + "_Tlist16"] = model[0].TList16 = mod15;//alumni
                                TempData[MyGuid + "_TList21"] = model[0].TList21 = mod15;//alumni
                                TempData[MyGuid + "_TList25"] = model[0].TList25 = mod15;//alumni
                                #endregion
                                #region 17.Mother title
                                mod16.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod16.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod16.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod16.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod16;//mtitle
                                TempData[MyGuid + "_TList22"] = model[0].TList22 = mod17;//gtitle
                                #endregion
                                #region 18.Gurdian title
                                mod17.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod17.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod17.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod17.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                #endregion
                                #region 28.relation
                                mod28.Add(new SelectListItem { Text = "Brother", Value = "B" });
                                mod28.Add(new SelectListItem { Text = "Sister", Value = "S" });
                                TempData[MyGuid + "_TList28"] = model[0].TList28 = mod28;
                                #endregion
                                #region 29.caste
                                TempData[MyGuid + "_TList29"] = model[0].TList29 = mod29 = cmd_Fun.caste(userCode, unitid_mst);
                                #endregion
                                sgen.SetSession(MyGuid, "EDMODE", "Y");

                                //model[0].Col1 = dtreg.Rows[0]["client_id"].ToString();
                                //model[0].Col2 = dtreg.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtreg.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtreg.Rows[0]["ent_date"].ToString();
                                //model[0].Col5 = dtreg.Rows[0]["edit_by"].ToString();
                                //model[0].Col6 = dtreg.Rows[0]["edit_date"].ToString();
                                model[0].Col7 = dtreg.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col9 = tm.Col9;
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col13 = "Update";
                                model[0].Col134 = "Update & New";
                                model[0].Col131 = "U";
                                model[0].Col132 = "<u>U</u>pdate";
                                model[0].Col133 = "Update & Ne<u>w</u>";
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                model[0].Col116 = tm.Col116;
                                model[0].Col118 = tm.Col118;
                                model[0].Col91 = "file_tab";
                                string urlfile = clientid_mst + unitid_mst + sgen.padlc(Convert.ToInt32(dtreg.Rows[0]["vch_num"].ToString()), 6) + "STD";
                                model[0].Col94 = "client_id||client_unit_id||ref_code||type='" + urlfile + "'";
                                model[0].Col17 = dtreg.Rows[0]["vch_num"].ToString().Trim();
                                model[0].Col18 = dtreg.Rows[0]["first_name"].ToString().Trim();
                                model[0].Col19 = dtreg.Rows[0]["middle_name"].ToString().Trim();
                                model[0].Col20 = dtreg.Rows[0]["last_name"].ToString().Trim();
                                model[0].Col21 = dtreg.Rows[0]["gender"].ToString().Trim();
                                model[0].Col22 = dtreg.Rows[0]["DOB"].ToString().Trim();
                                model[0].Col23 = dtreg.Rows[0]["place_of_birth"].ToString().Trim();
                                model[0].Col24 = dtreg.Rows[0]["main_language"].ToString().Trim();
                                model[0].Col25 = dtreg.Rows[0]["adhaar_id"].ToString().Trim();
                                String[] L1 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["nationality"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["class_applied"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["academic_year_id"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["ucaste"].ToString()).Distinct()).Split(',');
                                String[] L5 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["religion"].ToString()).Distinct()).Split(',');
                                String[] L6 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["blood_grp"].ToString()).Distinct()).Split(',');
                                String[] L29 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["std_caste"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                model[0].SelectedItems6 = L6;
                                model[0].SelectedItems29 = L29;
                                model[0].Col112 = dtreg.Rows[0]["section"].ToString().Trim();
                                model[0].Col113 = dtreg.Rows[0]["hfsec"].ToString().Trim();
                                model[0].Col114 = dtreg.Rows[0]["roll_number"].ToString().Trim();
                                model[0].Col115 = dtreg.Rows[0]["regnumber"].ToString().Trim();
                                issibling = dtreg.Rows[0]["issibling"].ToString();
                                if (issibling.Equals("Y"))
                                {
                                    model[0].Chk1 = true;
                                    issameschool = dtreg.Rows[0]["issameschool"].ToString();
                                    if (issameschool.Trim().Equals("Y"))
                                    {
                                        model[0].Col105 = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                        model[0].Col26 = dtreg.Rows[0]["sibling2_rollno"].ToString().Trim();

                                        string sibname = sgen.getstring(userCode, "select first_name||' '||replace(middle_name,'0','')||' '|| replace(last_name, '0', '') as std_name from user_details " +
                                            "where regnumber='" + dtreg.Rows[0]["sibling2_rollno"].ToString().Trim() + "'");
                                        model[0].Col27 = sibname;
                                    }
                                    else if (issameschool.Trim().Equals("O"))
                                    {
                                        model[0].Col105 = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                        model[0].Col106 = dtreg.Rows[0]["sibling1_name"].ToString().Trim();
                                        model[0].Col107 = dtreg.Rows[0]["sibling1_class"].ToString().Trim();
                                        String[] L27 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["sibling2_name"].ToString()).Distinct()).Split(',');
                                        String[] L28 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["sibling2_class"].ToString()).Distinct()).Split(',');
                                        model[0].SelectedItems27 = L27;
                                        model[0].SelectedItems28 = L28;
                                    }
                                }
                                else
                                {
                                    model[0].Col119 = dtreg.Rows[0]["sibling2_rollno"].ToString().Trim();
                                }
                                isfamily = dtreg.Rows[0]["isfamily"].ToString().Trim();
                                if (isfamily.Equals("Y"))
                                {
                                    model[0].Chk2 = true;
                                    model[0].Col28 = dtreg.Rows[0]["sibling1_rollno"].ToString().Trim();
                                    // reena below last_name is not clear ok
                                    string fcname = sgen.getstring(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||replace(last_name, '0', '')||' ' as std_name from user_details " +
                                        "where regnumber='" + dtreg.Rows[0]["sibling1_rollno"].ToString().Trim() + "'");
                                    model[0].Col29 = fcname;
                                }
                                else
                                {
                                    model[0].Col120 = dtreg.Rows[0]["sibling1_rollno"].ToString().Trim();
                                }
                                isscholarship = dtreg.Rows[0]["scholarship"].ToString().Trim();
                                if (isscholarship.Equals("Y")) model[0].Chk3 = true;
                                ishobby = dtreg.Rows[0]["ishobby"].ToString().Trim();
                                if (ishobby.Equals("Y"))
                                {
                                    model[0].Chk7 = true;
                                    String[] L11 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["std_hobby"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems11 = L11;
                                }
                                model[0].Col30 = dtreg.Rows[0]["havetransport"].ToString().Trim();
                                String[] L7 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["pick_point"].ToString()).Distinct()).Split(',');
                                String[] L8 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["drop_point"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems7 = L7;
                                model[0].SelectedItems8 = L8;
                                string vill1 = dtreg.Rows[0]["per_village"].ToString().Trim();
                                if (vill1.Trim().Length > 2)
                                {
                                    DataTable dtvill1 = new DataTable();
                                    dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name, city_name, district_name, teh_name, v_name from country_state where v_id = '"
                                        + dtreg.Rows[0]["per_village"].ToString().Trim() + "' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill1.Rows.Count > 0)
                                    {
                                        model[0].Col37 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col36 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col34 = dtvill1.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col35 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col33 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col32 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col16 = dtvill1.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col31 = dtreg.Rows[0]["per_address"].ToString().Trim();
                                isperadd = dtreg.Rows[0]["isperadd"].ToString().Trim();
                                if (isperadd.Equals("Y")) model[0].Chk4 = true;
                                string vill2 = dtreg.Rows[0]["cur_village"].ToString().Trim();
                                if (!vill2.Equals(""))
                                {
                                    DataTable dtvill2 = new DataTable();
                                    dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,city_name,district_name,teh_name,v_name from country_state where v_id='"
                                        + dtreg.Rows[0]["cur_village"].ToString().Trim() + "' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill2.Rows.Count > 0)
                                    {
                                        model[0].Col44 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col43 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col41 = dtvill2.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col42 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col40 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col39 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col96 = dtvill2.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col38 = dtreg.Rows[0]["cur_address"].ToString().Trim();
                                isdisable = dtreg.Rows[0]["isdisable"].ToString().Trim();
                                if (isdisable.Equals("Y"))
                                {
                                    model[0].Chk5 = true;
                                    String[] L9 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["dis_type"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems9 = L9;
                                    model[0].Col45 = dtreg.Rows[0]["dis_desc"].ToString().Trim();
                                }
                                istransfer = dtreg.Rows[0]["istransfer"].ToString().Trim();
                                if (istransfer.Equals("Y"))
                                {
                                    model[0].Chk6 = true;
                                    model[0].Col46 = dtreg.Rows[0]["prev_school_name"].ToString().Trim();
                                    model[0].Col47 = dtreg.Rows[0]["transfer_dt"].ToString().Trim();
                                    String[] L10 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["transfer_class"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems10 = L10;
                                    model[0].Col121 = dtreg.Rows[0]["transfer_reason"].ToString();
                                }
                                String[] L12 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems12 = L12;
                                model[0].Col48 = dtreg.Rows[0]["f_firstname"].ToString().Trim();
                                model[0].Col49 = dtreg.Rows[0]["f_middlename"].ToString().Trim();
                                model[0].Col50 = dtreg.Rows[0]["f_lastname"].ToString().Trim();
                                model[0].Col51 = dtreg.Rows[0]["f_dob"].ToString().Trim();
                                String[] L14 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_qualification"].ToString()).Distinct()).Split(',');
                                String[] L13 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_nationality"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems14 = L14;
                                model[0].SelectedItems13 = L13;
                                model[0].Col52 = dtreg.Rows[0]["f_occupation"].ToString().Trim();
                                model[0].Col53 = dtreg.Rows[0]["f_designation"].ToString().Trim();
                                String[] L15 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems15 = L15;
                                model[0].Col54 = dtreg.Rows[0]["f_org_name"].ToString().Trim();
                                model[0].Col55 = dtreg.Rows[0]["f_adhaar_Id"].ToString().Trim();
                                model[0].Col56 = dtreg.Rows[0]["f_con_number"].ToString().Trim();
                                model[0].Col57 = dtreg.Rows[0]["f_email"].ToString().Trim();
                                String[] L16 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_alumni_type"].ToString()).Distinct()).Split(',');
                                String[] L17 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems17 = L17;
                                model[0].SelectedItems16 = L16;
                                model[0].Col58 = dtreg.Rows[0]["m_firstname"].ToString().Trim();
                                model[0].Col59 = dtreg.Rows[0]["m_middlename"].ToString().Trim();
                                model[0].Col60 = dtreg.Rows[0]["m_lastname"].ToString().Trim();
                                model[0].Col61 = dtreg.Rows[0]["m_dob"].ToString().Trim();
                                String[] L19 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems19 = L19;
                                String[] L18 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_nationality"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems18 = L18;
                                model[0].Col62 = dtreg.Rows[0]["m_occupation"].ToString().Trim();
                                model[0].Col63 = dtreg.Rows[0]["m_designation"].ToString().Trim();
                                String[] L20 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems20 = L20;
                                model[0].Col64 = dtreg.Rows[0]["m_org_name"].ToString().Trim();
                                model[0].Col65 = dtreg.Rows[0]["m_adhaar_id"].ToString().Trim();
                                model[0].Col66 = dtreg.Rows[0]["m_con_number"].ToString().Trim();
                                model[0].Col67 = dtreg.Rows[0]["m_email"].ToString().Trim();
                                String[] L21 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_alumni_type"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems21 = L21;
                                model[0].Col68 = dtreg.Rows[0]["sameas"].ToString().Trim();
                                String[] L22 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems22 = L22;
                                model[0].Col69 = dtreg.Rows[0]["g_firstname"].ToString().Trim();
                                model[0].Col70 = dtreg.Rows[0]["g_middlename"].ToString().Trim();
                                model[0].Col71 = dtreg.Rows[0]["g_lastname"].ToString().Trim();
                                model[0].Col72 = dtreg.Rows[0]["g_dob"].ToString().Trim();
                                String[] L23 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_nationality"].ToString()).Distinct()).Split(',');
                                String[] L24 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems23 = L23;
                                model[0].SelectedItems24 = L24;
                                model[0].Col73 = dtreg.Rows[0]["g_occupation"].ToString().Trim();
                                model[0].Col74 = dtreg.Rows[0]["g_designation"].ToString().Trim();
                                model[0].Col75 = dtreg.Rows[0]["g_org_name"].ToString().Trim();
                                model[0].Col76 = dtreg.Rows[0]["g_adhaar_id"].ToString().Trim();
                                model[0].Col78 = dtreg.Rows[0]["g_email"].ToString().Trim();
                                model[0].Col77 = dtreg.Rows[0]["g_con_number"].ToString().Trim();
                                String[] L26 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems26 = L26;
                                String[] L25 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_alumni_type"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems25 = L25;
                                model[0].Col86 = dtreg.Rows[0]["withdrawl_no"].ToString().Trim();
                                model[0].Col88 = dtreg.Rows[0]["enrollment_no"].ToString().Trim();
                                model[0].Col87 = dtreg.Rows[0]["srn_no"].ToString().Trim();
                                model[0].Col89 = dtreg.Rows[0]["default_emailid"].ToString().Trim();
                                model[0].Col90 = dtreg.Rows[0]["default_ph"].ToString().Trim();
                                model[0].Col103 = dtreg.Rows[0]["sssm_id"].ToString().Trim();
                                model[0].Col125 = "N";
                                model[0].Col110 = dtreg.Rows[0]["studenttype"].ToString().Trim();
                                if (dtreg.Rows[0]["studenttype"].ToString() == "Promoted") model[0].Col110 = "Old";
                                model[0].Col124 = dtreg.Rows[0]["studenttype"].ToString().Trim();
                                mq3 = sgen.seekval(userCode, "select regno from student_receipt_detail where regno = '" + dtreg.Rows[0]["regnumber"].ToString() + "'", "regno");
                                mq2 = sgen.seekval(userCode, "select regno from fees_detail where regno='" + dtreg.Rows[0]["regnumber"].ToString() + "' and type='STD'", "regno");
                                if (mq3 != "0") { model[0].Col125 = "Y"; }
                                else if (mq2 != "0") { model[0].Col125 = "Y"; }
                                model[0].Col111 = dtreg.Rows[0]["old_regno"].ToString().Trim();
                                //Session["vch_num_std"] = dtreg.Rows[0]["vch_num"].ToString().Trim();
                                mq = "select edu_board from company_unit_profile where company_profile_id='" + clientid_mst + "' and cup_id='" + unitid_mst + "'";
                                mq = sgen.seekval(userCode, mq, "edu_board");
                                if (mq.Trim() != "0")
                                {
                                    if (mq.Trim().Equals("002")) model[0].Col104 = mq.Trim();
                                    else if (mq.Trim().Equals("001")) model[0].Col117 = mq.Trim();
                                }
                                if (!role_mst.ToUpper().Equals("OWNER"))
                                {
                                    mq = "select mod_id from user_details where type='CPR' and vch_num='" + Convert.ToInt32(userid_mst) + "' and find_in_set('25000',mod_id)=1";
                                    mq = sgen.seekval(userCode, mq, "mod_id");
                                    if (mq != "0") { if (mq.Trim().Split(',').Contains("25000")) model[0].Col109 = "1"; }
                                }
                                else model[0].Col109 = "1";
                                DataTable dtf = new DataTable();
                                try
                                {
                                    dtf = sgen.getdata(userCode, "select rec_id,file_name,file_path,col1,col2 from file_tab where" +
                                   //" ref_code='" + sgen.padlc(Convert.ToInt32(dtreg.Rows[0]["vch_num"].ToString()), 6) + "' and type='STD' and " +
                                   " ref_code='" + dtreg.Rows[0]["per_id"].ToString().Substring(8, 6) + "' and type='STD' and " +
                                   " find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                }
                                catch (Exception ex)
                                {
                                    dtf = sgen.getdata(userCode, "select rec_id,file_name,file_path,col1,col2 from file_tab where" +
                                   " ref_code='" + sgen.padlc(Convert.ToInt32(dtreg.Rows[0]["vch_num"].ToString()), 6) + "' and type='STD' and " +
                                   //" ref_code='" + dtreg.Rows[0]["per_id"].ToString() + "' and type='STD' and " +
                                   " find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                                }

                                List<Tmodelmain> ltmf = new List<Tmodelmain>();
                                foreach (DataRow drf in dtf.Rows)
                                {
                                    Tmodelmain tmf = new Tmodelmain();
                                    tmf.Col5 = drf["col2"].ToString();
                                    tmf.Col4 = drf["file_path"].ToString();
                                    tmf.Col1 = drf["file_name"].ToString();
                                    tmf.Col2 = drf["col1"].ToString();
                                    tmf.Col3 = drf["rec_id"].ToString();
                                    ltmf.Add(tmf);
                                }
                                model[0].LTM1 = ltmf;
                            }
                            break;
                        case "SIBREG":
                            mq = "select a.*,to_char(dob,'" + sgen.Getsqldateformat() + "') as dob," +
                                "to_char(f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                                "to_char(m_dob,'" + sgen.Getsqldateformat() + "') as m_dob," +
                                "to_char(g_dob,'" + sgen.Getsqldateformat() + "') as g_dob," +
                                "to_char(transfer_dt,'" + sgen.Getsqldateformat() + "') as " +
                                "transfer_dt from user_details a where a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type='" + URL + "'";
                            DataTable dtsib = sgen.getdata(userCode, mq);
                            if (dtsib.Rows.Count > 0)
                            {
                                model[0].Col26 = dtsib.Rows[0]["regnumber"].ToString();
                                model[0].Col27 = dtsib.Rows[0]["first_name"].ToString() + " " + dtsib.Rows[0]["middle_name"].ToString().Replace("0", "") + " " + dtsib.Rows[0]["last_name"].ToString().Replace("0", "");
                                model[0].Chk2 = true;
                                model[0].Chk1 = true;
                                //chk_familyid.Disabled = true;
                                model[0].Col28 = dtsib.Rows[0]["regnumber"].ToString();
                                model[0].Col29 = dtsib.Rows[0]["first_name"].ToString() + " " + dtsib.Rows[0]["middle_name"].ToString().Replace("0", "") + " " + dtsib.Rows[0]["last_name"].ToString().Replace("0", "");
                                #region 12.father title
                                mod12.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod12.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod12.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod12.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;//ftitle
                                #endregion

                                #region 1.bindnationality
                                TempData[MyGuid + "_Tlist13"] = model[0].TList13 = mod1 = cmd_Fun.country(userCode, unitid_mst);
                                #endregion
                                #region 14.qualification
                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod13 = cmd_Fun.qualification(userCode, unitid_mst, out defcall);
                                #endregion
                                #region 15.Annual income
                                mod14 = cmd_Fun.annincome(userCode, unitid_mst);
                                //  reena not clear mod15 and mo16
                                #endregion
                                #region 16.Alumini
                                mod15.Add(new SelectListItem { Text = "None", Value = "None" });
                                mod15.Add(new SelectListItem { Text = "Staff", Value = "Staff" });
                                mod15.Add(new SelectListItem { Text = "Student", Value = "Student" });
                                #endregion
                                #region father details

                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod13;//fqualification
                                TempData[MyGuid + "_Tlist16"] = model[0].TList16 = mod15;//falumni
                                String[] L12 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["f_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems12 = L12;
                                model[0].Col48 = dtsib.Rows[0]["f_firstname"].ToString().Trim();
                                model[0].Col49 = dtsib.Rows[0]["f_middlename"].ToString().Trim();
                                model[0].Col50 = dtsib.Rows[0]["f_lastname"].ToString().Trim();
                                model[0].Col51 = dtsib.Rows[0]["f_dob1"].ToString().Trim();
                                String[] L13 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["f_nationality"].ToString()).Distinct()).Split(',');
                                String[] L14 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["f_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems14 = L14;
                                model[0].SelectedItems13 = L13;
                                model[0].Col52 = dtsib.Rows[0]["f_occupation"].ToString().Trim();
                                model[0].Col53 = dtsib.Rows[0]["f_designation"].ToString().Trim();
                                String[] L15 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["f_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems15 = L15;
                                model[0].Col54 = dtsib.Rows[0]["f_org_name"].ToString().Trim();
                                model[0].Col55 = dtsib.Rows[0]["f_adhaar_Id"].ToString().Trim();
                                model[0].Col56 = dtsib.Rows[0]["f_con_number"].ToString().Trim();
                                model[0].Col57 = dtsib.Rows[0]["f_email"].ToString().Trim();
                                String[] L16 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["f_alumni_type"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems16 = L16;
                                #endregion
                                #region mother details
                                //DropDownList2.Disabled = true; 
                                //m_first_name.ReadOnly = true;
                                //m_middle_name.ReadOnly = true;
                                //m_last_name.ReadOnly = true;
                                //mdob.ReadOnly = true;
                                //macn.ReadOnly = true;
                                #region 17.Mother title
                                mod16.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod16.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod16.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod16.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                #endregion
                                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod16;//mtitle
                                TempData[MyGuid + "_Tlist18"] = model[0].TList18 = mod1;//mnation
                                TempData[MyGuid + "_Tlist19"] = model[0].TList19 = mod13;//mqualification
                                TempData[MyGuid + "_Tlist20"] = model[0].TList20 = mod14;//mqualification
                                TempData[MyGuid + "_Tlist21"] = model[0].TList21 = mod15;//malumni
                                String[] L17 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["m_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems17 = L17;
                                model[0].Col58 = dtsib.Rows[0]["m_firstname"].ToString().Trim();
                                model[0].Col59 = dtsib.Rows[0]["m_middlename"].ToString().Trim();
                                model[0].Col60 = dtsib.Rows[0]["m_lastname"].ToString().Trim();
                                model[0].Col61 = dtsib.Rows[0]["m_dob1"].ToString().Trim();
                                String[] L19 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["m_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems19 = L19;
                                String[] L18 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["m_nationality"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems18 = L18;
                                model[0].Col62 = dtsib.Rows[0]["m_occupation"].ToString().Trim();
                                model[0].Col63 = dtsib.Rows[0]["m_designation"].ToString().Trim();
                                String[] L20 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["m_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems20 = L20;
                                model[0].Col64 = dtsib.Rows[0]["m_org_name"].ToString().Trim();
                                model[0].Col65 = dtsib.Rows[0]["m_adhaar_id"].ToString().Trim();
                                model[0].Col66 = dtsib.Rows[0]["m_con_number"].ToString().Trim();
                                model[0].Col67 = dtsib.Rows[0]["m_email"].ToString().Trim();
                                String[] L21 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["m_alumni_type"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems21 = L21;
                                #endregion
                                #region per & cur Address
                                string vill1 = dtsib.Rows[0]["per_village"].ToString().Trim();
                                if (vill1.Trim().Length > 2)
                                {
                                    DataTable dtvill1 = new DataTable();
                                    dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name, city_name, district_name, teh_name, v_name from country_state where v_id = '"
                                        + dtsib.Rows[0]["per_village"].ToString().Trim() + "'and type='CSV' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill1.Rows.Count > 0)
                                    {
                                        model[0].Col37 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col36 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col34 = dtvill1.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col35 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col33 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col32 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col16 = dtvill1.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col31 = dtsib.Rows[0]["per_address"].ToString().Trim();
                                isperadd = dtsib.Rows[0]["isperadd"].ToString().Trim();
                                if (isperadd.Equals("Y")) model[0].Chk4 = true;
                                string vill2 = dtsib.Rows[0]["cur_village"].ToString().Trim();
                                if (!vill2.Equals(""))
                                {
                                    DataTable dtvill2 = new DataTable();
                                    dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,city_name,district_name,teh_name,v_name from country_state where v_id='"
                                        + dtsib.Rows[0]["cur_village"].ToString().Trim() + "' and type='CSV' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill2.Rows.Count > 0)
                                    {
                                        model[0].Col44 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col43 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col41 = dtvill2.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col42 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col40 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col39 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col96 = dtvill2.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col38 = dtsib.Rows[0]["cur_address"].ToString().Trim();
                                #endregion
                            }
                            break;
                        case "FREG":
                            mq = "select regnumber,first_name,middle_name,last_name,per_village,cur_village,per_address,cur_address,isperadd from user_details a" +
                                " where a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            //var tmod = model.FirstOrDefault();
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col28 = dt.Rows[0]["regnumber"].ToString();
                                model[0].Col29 = dt.Rows[0]["first_name"].ToString() + " " + dt.Rows[0]["middle_name"].ToString().Replace("0", "") + " " + dt.Rows[0]["last_name"].ToString().Replace("0", "");
                                #region per & cur Address
                                string vill1 = dt.Rows[0]["per_village"].ToString().Trim();
                                if (vill1.Trim().Length > 2)
                                {
                                    DataTable dtvill1 = new DataTable();
                                    dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name, city_name, district_name, teh_name, v_name from country_state where v_id = '"
                                        + dt.Rows[0]["per_village"].ToString().Trim() + "'and type='CSV' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill1.Rows.Count > 0)
                                    {
                                        model[0].Col37 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col36 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col34 = dtvill1.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col35 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col33 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col32 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col16 = dtvill1.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col31 = dt.Rows[0]["per_address"].ToString().Trim();
                                isperadd = dt.Rows[0]["isperadd"].ToString().Trim();
                                if (isperadd.Equals("Y")) model[0].Chk4 = true;
                                string vill2 = dt.Rows[0]["cur_village"].ToString().Trim();
                                if (!vill2.Equals(""))
                                {
                                    DataTable dtvill2 = new DataTable();
                                    dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,city_name,district_name,teh_name,v_name from country_state where v_id='"
                                        + dt.Rows[0]["cur_village"].ToString().Trim() + "' and type='CSV' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill2.Rows.Count > 0)
                                    {
                                        model[0].Col44 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col43 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col41 = dtvill2.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col42 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col40 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col39 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col96 = dtvill2.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col38 = dt.Rows[0]["cur_address"].ToString().Trim();
                                #endregion
                            }
                            break;
                        case "ADD1":

                            //mq = "select * from country_state where client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type='" + URL + "'";
                            mq = "select country_name, state_name, district_name, city_name, teh_name, v_name, rec_id  from country_state where client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col37 = dt.Rows[0]["country_name"].ToString();
                                model[0].Col36 = dt.Rows[0]["state_name"].ToString();
                                model[0].Col35 = dt.Rows[0]["district_name"].ToString();
                                model[0].Col34 = dt.Rows[0]["city_name"].ToString();
                                model[0].Col33 = dt.Rows[0]["teh_name"].ToString();
                                model[0].Col32 = dt.Rows[0]["v_name"].ToString();
                                model[0].Col16 = dt.Rows[0]["rec_id"].ToString();
                            }
                            break;
                        case "ADD2":

                            //mq = "select * from country_state where client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type='" + URL + "'";
                            mq = "select country_name, state_name, district_name, city_name, teh_name, v_name, rec_id from country_state where client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type='" + URL + "'";
                            DataTable dtval = sgen.getdata(userCode, mq);
                            if (dtval.Rows.Count > 0)
                            {
                                model[0].Col44 = dtval.Rows[0]["country_name"].ToString().Trim();
                                model[0].Col43 = dtval.Rows[0]["state_name"].ToString().Trim();
                                model[0].Col41 = dtval.Rows[0]["city_name"].ToString().Trim();
                                model[0].Col42 = dtval.Rows[0]["district_name"].ToString().Trim();
                                model[0].Col40 = dtval.Rows[0]["teh_name"].ToString().Trim();
                                model[0].Col39 = dtval.Rows[0]["v_name"].ToString().Trim();
                                model[0].Col96 = dtval.Rows[0]["rec_id"].ToString();
                            }
                            break;
                        case "ENQ":

                            mq = "select *,to_char(dob,'" + sgen.Getsqldateformat() + "') as dob," +
                                "to_char(f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                                "to_char(m_dob,'" + sgen.Getsqldateformat() + "') as m_dob," +
                                "to_char(g_dob,'" + sgen.Getsqldateformat() + "') as g_dob," +
                                "to_char(remark_date,'" + sgen.Getsqldateformat() + "') as remark_date," +
                                "to_char(transfer_dt,'" + sgen.Getsqldateformat() + "') as transfer_dt " +
                                "from student_applicant_details where client_id|| client_unit_id|| enq_no|| to_char(enq_date, 'yyyymmdd')|| type1='" + URL + "'";
                            dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region
                                #region 2.bindclass
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClass(userCode, unitid_mst);
                                TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod2;//class
                                TempData[MyGuid + "_Tlist27"] = model[0].TList27 = mod2;//class
                                #endregion
                                #region 3.bindacademicyr
                                dt = sgen.BindAcademicYear(userCode, clientid_mst);
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;//academicyr
                                #endregion
                                #region 12.father title
                                mod12.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod12.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod12.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod12.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;//ftitle
                                #endregion
                                #region 14.qualification
                                string defval = "";
                                mod13 = cmd_Fun.qualification(userCode, unitid_mst, out defval);
                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod13;//qualification
                                TempData[MyGuid + "_Tlist19"] = model[0].TList19 = mod13;//qualification
                                TempData[MyGuid + "_Tlist24"] = model[0].TList24 = mod13;//qualification
                                #endregion
                                #region 15.Annual income
                                mod14 = cmd_Fun.annincome(userCode, unitid_mst);
                                TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod14;//annual income
                                TempData[MyGuid + "_Tlist20"] = model[0].TList20 = mod14;//annual income
                                TempData[MyGuid + "_Tlist26"] = model[0].TList26 = mod14;//annual income
                                #endregion
                                #region 17.Mother title
                                mod16.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod16.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod16.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod16.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod16;//mtitle
                                #endregion
                                #region 18.Gurdian title
                                mod17.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod17.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod17.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod17.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                TempData[MyGuid + "_Tlist22"] = model[0].TList22 = mod17;//gtitle
                                #endregion
                                #region 28.relation
                                mod28.Add(new SelectListItem { Text = "Brother", Value = "B" });
                                mod28.Add(new SelectListItem { Text = "Sister", Value = "S" });
                                TempData[MyGuid + "_Tlist28"] = model[0].TList28 = mod28;//relation
                                #endregion
                                #endregion


                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["class_applied"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["usession"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].Col1 = dtreg.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtreg.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtreg.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtreg.Rows[0]["ent_date"].ToString();
                                model[0].Col5 = dtreg.Rows[0]["edit_by"].ToString();
                                model[0].Col6 = dtreg.Rows[0]["edit_date"].ToString();
                                model[0].Col7 = dtreg.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||enq_no, to_char(enq_date, 'yyyymmdd'), type1 = '" + URL + "'";
                                model[0].Col108 = dtreg.Rows[0]["enq_no"].ToString().Trim();
                                model[0].Col110 = "N";
                                model[0].Col18 = dtreg.Rows[0]["first_name"].ToString().Trim();
                                model[0].Col19 = dtreg.Rows[0]["middle_name"].ToString().Trim();
                                model[0].Col20 = dtreg.Rows[0]["last_name"].ToString().Trim();
                                model[0].Col21 = dtreg.Rows[0]["gender"].ToString().Trim();
                                model[0].Col22 = dtreg.Rows[0]["dob1"].ToString().Trim();
                                issibling = dtreg.Rows[0]["issibling"].ToString().Trim();
                                if (issibling.Equals("Y"))
                                {
                                    model[0].Chk1 = true;
                                    issameschool = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                    if (issameschool.Trim().Equals("Y"))
                                    {
                                        model[0].Col105 = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                        model[0].Col26 = dtreg.Rows[0]["sibling2_rollno"].ToString().Trim();
                                        string sibname = sgen.getstring(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||last_name||' ' as std_name from user_details where regnumber='" + dtreg.Rows[0]["sibling2_rollno"].ToString().Trim() + "'");
                                        model[0].Col27 = sibname;
                                    }
                                    else if (issameschool.Trim().Equals("O"))
                                    {
                                        model[0].Col105 = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                        model[0].Col106 = dtreg.Rows[0]["sibling1_name"].ToString().Trim();
                                        model[0].Col107 = dtreg.Rows[0]["sibling1_class"].ToString().Trim();
                                        String[] L27 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["sibling2_name"].ToString()).Distinct()).Split(',');
                                        String[] L28 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["sibling2_class"].ToString()).Distinct()).Split(',');
                                        model[0].SelectedItems27 = L27;
                                        model[0].SelectedItems28 = L28;
                                    }
                                }
                                isfamily = dtreg.Rows[0]["isfamily"].ToString().Trim();
                                if (isfamily.Equals("Y"))
                                {
                                    model[0].Chk2 = true;
                                    model[0].Col28 = dtreg.Rows[0]["sibling1_reg_no"].ToString().Trim();
                                    string fcname = sgen.getstring(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||last_name||' ') as std_name from user_details where regnumber='" + dtreg.Rows[0]["sibling1_reg_no"].ToString().Trim() + "'");
                                    model[0].Col29 = fcname;
                                }
                                string vill1 = dtreg.Rows[0]["per_village"].ToString().Trim();
                                if (vill1.Trim().Length > 2)
                                {
                                    DataTable dtvill1 = new DataTable();
                                    dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name, city_name, district_name, teh_name, v_name from country_state where v_id = '"
                                        + dtreg.Rows[0]["per_village"].ToString().Trim() + "' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill1.Rows.Count > 0)
                                    {
                                        model[0].Col37 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col36 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col34 = dtvill1.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col35 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col33 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col32 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col16 = dtvill1.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col31 = dtreg.Rows[0]["per_address"].ToString().Trim();
                                isperadd = dtreg.Rows[0]["isperadd"].ToString().Trim();
                                if (isperadd.Equals("Y")) model[0].Chk4 = true;
                                string vill2 = dtreg.Rows[0]["cur_village"].ToString().Trim();
                                if (!vill2.Equals(""))
                                {
                                    DataTable dtvill2 = new DataTable();
                                    dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,city_name,district_name,teh_name,v_name from country_state where v_id='"
                                        + dtreg.Rows[0]["cur_village"].ToString().Trim() + "' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill2.Rows.Count > 0)
                                    {
                                        model[0].Col44 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col43 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col41 = dtvill2.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col42 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col40 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col39 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col96 = dtvill2.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col38 = dtreg.Rows[0]["cur_address"].ToString().Trim();
                                istransfer = dtreg.Rows[0]["istransfer"].ToString().Trim();
                                if (istransfer.Equals("Y"))
                                {
                                    model[0].Chk6 = true;
                                    model[0].Col46 = dtreg.Rows[0]["prev_school_name"].ToString().Trim();
                                    model[0].Col47 = dtreg.Rows[0]["transfer_dt1"].ToString().Trim();
                                    String[] L10 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["transfer_class"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems10 = L10;
                                }
                                String[] L12 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems12 = L12;
                                model[0].Col48 = dtreg.Rows[0]["f_firstname"].ToString().Trim();
                                model[0].Col49 = dtreg.Rows[0]["f_middlename"].ToString().Trim();
                                model[0].Col50 = dtreg.Rows[0]["f_lastname"].ToString().Trim();
                                model[0].Col51 = dtreg.Rows[0]["f_dob1"].ToString().Trim();
                                String[] L14 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems14 = L14;
                                model[0].Col52 = dtreg.Rows[0]["f_occupation"].ToString().Trim();
                                String[] L15 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems15 = L15;
                                model[0].Col56 = dtreg.Rows[0]["f_con_number"].ToString().Trim();
                                model[0].Col57 = dtreg.Rows[0]["f_email"].ToString().Trim();
                                String[] L17 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems17 = L17;
                                model[0].Col58 = dtreg.Rows[0]["m_firstname"].ToString().Trim();
                                model[0].Col59 = dtreg.Rows[0]["m_middlename"].ToString().Trim();
                                model[0].Col60 = dtreg.Rows[0]["m_lastname"].ToString().Trim();
                                model[0].Col61 = dtreg.Rows[0]["m_dob1"].ToString().Trim();
                                String[] L19 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems19 = L19;
                                model[0].Col62 = dtreg.Rows[0]["m_occupation"].ToString().Trim();
                                String[] L20 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems20 = L20;
                                model[0].Col66 = dtreg.Rows[0]["m_con_number"].ToString().Trim();
                                model[0].Col67 = dtreg.Rows[0]["m_email"].ToString().Trim();
                                model[0].Col68 = dtreg.Rows[0]["sameas"].ToString().Trim();
                                String[] L22 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems22 = L22;
                                model[0].Col69 = dtreg.Rows[0]["g_firstname"].ToString().Trim();
                                model[0].Col70 = dtreg.Rows[0]["g_middlename"].ToString().Trim();
                                model[0].Col71 = dtreg.Rows[0]["g_lastname"].ToString().Trim();
                                model[0].Col72 = dtreg.Rows[0]["g_dob1"].ToString().Trim();
                                String[] L24 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems24 = L24;
                                model[0].Col73 = dtreg.Rows[0]["g_occupation"].ToString().Trim();
                                model[0].Col78 = dtreg.Rows[0]["g_email"].ToString().Trim();
                                model[0].Col77 = dtreg.Rows[0]["g_con_number"].ToString().Trim();
                                String[] L26 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems26 = L26;
                            }
                            break;
                    }
                    break;
                #endregion
                #region enquiry
                case "enquiry":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            DataTable dtreg = new DataTable();
                            mq = "select *,to_char(dob, '" + sgen.Getsqldateformat() + "') as dob," +
                                        "to_char(  f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                                        "to_char(  m_dob,'" + sgen.Getsqldateformat() + "') as m_dob," +
                                        "to_char(  g_dob,'" + sgen.Getsqldateformat() + "') as g_dob," +
                                        "to_char(  remark_date,,'" + sgen.Getsqldateformat() + "') as remark_date," +
                                        "to_char(  transfer_dt,,'" + sgen.Getsqldateformat() + "') as transfer_dt " +
                                        "from student_applicant_details where client_id|| client_unit_id|| enq_no|| to_char(enq_date, 'yyyymmdd')|| type1='" + URL + "'";
                            dtreg = sgen.getdata(userCode, mq);
                            if (dtreg.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region 1.binduser
                                mq = "select vch_num rec_id,first_name||' '||replace(middle_name,'0','')||' '||replace(last_name,'0','') name from user_details where type='CPR'";
                                dt = sgen.getdata(userCode, mq);
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["rec_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1; //techer
                                #endregion
                                #region 2.bindclass
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClass(userCode, unitid_mst);
                                TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod2;//class
                                TempData[MyGuid + "_Tlist27"] = model[0].TList27 = mod2;//class
                                #endregion
                                #region 3.bindacademicyr
                                dt = sgen.BindAcademicYear(userCode, clientid_mst);
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;//academicyr
                                #endregion
                                #region 9.disablity
                                mod9.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                                mod9.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;//disability
                                #endregion
                                #region 12.father title
                                mod12.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod12.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod12.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod12.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;//ftitle
                                #endregion
                                #region 14.qualification
                                string defval = "";
                                mod13 = cmd_Fun.qualification(userCode, unitid_mst, out defval);
                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod13;//qualification
                                TempData[MyGuid + "_Tlist24"] = model[0].TList24 = mod13;//qualification
                                TempData[MyGuid + "_Tlist19"] = model[0].TList19 = mod13;//qualification
                                //mq = @"SELECT master_id,master_name FROM master_setting where type ='EQU' " + model[0].Col11 + "";
                                //dt = sgen.getdata(userCode, mq);
                                //if (dt.Rows.Count > 0)
                                //{
                                //    foreach (DataRow dr in dt.Rows)
                                //    {
                                //        mod13.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                //    }
                                //}
                                #endregion
                                #region 15.Annual income
                                mod14 = cmd_Fun.annincome(userCode, unitid_mst);
                                TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod14;//annual income
                                TempData[MyGuid + "_Tlist26"] = model[0].TList26 = mod14;//annual income
                                TempData[MyGuid + "_Tlist20"] = model[0].TList20 = mod14;//annual income
                                //mq = @"SELECT master_id,master_name FROM master_setting where type ='KAI' " + model[0].Col11 + "";
                                //dt = sgen.getdata(userCode, mq);
                                //if (dt.Rows.Count > 0)
                                //{
                                //    foreach (DataRow dr in dt.Rows)
                                //    {
                                //        mod14.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                //    }
                                //}
                                #endregion
                                #region 17.Mother title
                                mod16.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod16.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod16.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod16.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod16;//mtitle
                                #endregion
                                #region 18.Gurdian title
                                mod17.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod17.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod17.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod17.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                TempData[MyGuid + "_Tlist22"] = model[0].TList22 = mod17;//gtitle
                                #endregion
                                #region 28.relation
                                mod28.Add(new SelectListItem { Text = "Brother", Value = "B" });
                                mod28.Add(new SelectListItem { Text = "Sister", Value = "S" });
                                TempData[MyGuid + "_Tlist28"] = model[0].TList28 = mod28;//relation
                                #endregion


                                String[] L1 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["teacher_name"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["class_applied"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["usession"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].Col1 = dtreg.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtreg.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dtreg.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtreg.Rows[0]["ent_date"].ToString();
                                model[0].Col5 = dtreg.Rows[0]["edit_by"].ToString();
                                model[0].Col6 = dtreg.Rows[0]["edit_date"].ToString();
                                model[0].Col7 = dtreg.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||enq_no|| to_char(enq_date, 'yyyymmdd')|| type1 = '" + URL + "'";
                                model[0].Col9 = model[0].Col9;
                                model[0].Col10 = model[0].Col10;
                                model[0].Col11 = model[0].Col11;
                                model[0].Col12 = model[0].Col12;
                                model[0].Col13 = "Update";
                                model[0].Col14 = model[0].Col14;
                                model[0].Col15 = model[0].Col15;
                                model[0].Col17 = dtreg.Rows[0]["enq_no"].ToString().Trim();
                                model[0].Col18 = dtreg.Rows[0]["first_name"].ToString().Trim();
                                model[0].Col19 = dtreg.Rows[0]["middle_name"].ToString().Trim();
                                model[0].Col20 = dtreg.Rows[0]["last_name"].ToString().Trim();
                                model[0].Col21 = dtreg.Rows[0]["gender"].ToString().Trim();
                                model[0].Col22 = dtreg.Rows[0]["dob1"].ToString().Trim();
                                issibling = dtreg.Rows[0]["issibling"].ToString().Trim();
                                if (issibling.Equals("Y"))
                                {
                                    model[0].Chk1 = true;
                                    issameschool = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                    if (issameschool.Trim().Equals("Y"))
                                    {
                                        model[0].Col105 = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                        model[0].Col26 = dtreg.Rows[0]["sibling2_rollno"].ToString().Trim();
                                        string sibname = sgen.getstring(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||last_name||' ' as std_name from user_details where regnumber='" + dtreg.Rows[0]["sibling2_rollno"].ToString().Trim() + "'");
                                        model[0].Col27 = sibname;
                                    }
                                    else if (issameschool.Trim().Equals("O"))
                                    {
                                        model[0].Col105 = dtreg.Rows[0]["issameschool"].ToString().Trim();
                                        model[0].Col106 = dtreg.Rows[0]["sibling1_name"].ToString().Trim();
                                        model[0].Col107 = dtreg.Rows[0]["sibling1_class"].ToString().Trim();
                                        String[] L27 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["sibling2_name"].ToString()).Distinct()).Split(',');
                                        String[] L28 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["sibling2_class"].ToString()).Distinct()).Split(',');
                                        model[0].SelectedItems27 = L27;
                                        model[0].SelectedItems28 = L28;
                                    }
                                }
                                isfamily = dtreg.Rows[0]["isfamily"].ToString().Trim();
                                if (isfamily.Equals("Y"))
                                {
                                    model[0].Chk2 = true;
                                    model[0].Col28 = dtreg.Rows[0]["sibling1_reg_no"].ToString().Trim();
                                    string fcname = sgen.getstring(userCode, "select first_name||' '||replace(middle_name,'0','')||' '||last_name||' ' as std_name from user_details where regnumber='" + dtreg.Rows[0]["sibling1_reg_no"].ToString().Trim() + "'");
                                    model[0].Col29 = fcname;
                                }
                                string vill1 = dtreg.Rows[0]["per_village"].ToString().Trim();
                                if (vill1.Trim().Length > 2)
                                {
                                    DataTable dtvill1 = new DataTable();
                                    dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name, city_name, district_name, teh_name, v_name from country_state where v_id = '"
                                        + dtreg.Rows[0]["per_village"].ToString().Trim() + "' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill1.Rows.Count > 0)
                                    {
                                        model[0].Col37 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col36 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col34 = dtvill1.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col35 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col33 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col32 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col16 = dtvill1.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col31 = dtreg.Rows[0]["per_address"].ToString().Trim();
                                isperadd = dtreg.Rows[0]["isperadd"].ToString().Trim();
                                if (isperadd.Equals("Y")) model[0].Chk4 = true;
                                string vill2 = dtreg.Rows[0]["cur_village"].ToString().Trim();
                                if (!vill2.Equals(""))
                                {
                                    DataTable dtvill2 = new DataTable();
                                    dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,city_name,district_name,teh_name,v_name from country_state where v_id='"
                                        + dtreg.Rows[0]["cur_village"].ToString().Trim() + "' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill2.Rows.Count > 0)
                                    {
                                        model[0].Col44 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col43 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col41 = dtvill2.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col42 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col40 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col39 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col96 = dtvill2.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col38 = dtreg.Rows[0]["cur_address"].ToString().Trim();
                                istransfer = dtreg.Rows[0]["istransfer"].ToString().Trim();
                                if (istransfer.Equals("Y"))
                                {
                                    model[0].Chk6 = true;
                                    model[0].Col46 = dtreg.Rows[0]["prev_school_name"].ToString().Trim();
                                    model[0].Col47 = dtreg.Rows[0]["transfer_dt1"].ToString().Trim();
                                    String[] L10 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["transfer_class"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems10 = L10;
                                    model[0].Col121 = dtreg.Rows[0]["transfer_reason"].ToString().Trim();
                                }
                                isdisable = dtreg.Rows[0]["isdisable"].ToString().Trim();
                                if (isdisable.Equals("Y"))
                                {
                                    model[0].Chk5 = true;
                                    String[] L9 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["dis_type"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems9 = L9;
                                    model[0].Col45 = dtreg.Rows[0]["dis_desc"].ToString().Trim();
                                }
                                String[] L12 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems12 = L12;
                                model[0].Col48 = dtreg.Rows[0]["f_firstname"].ToString().Trim();
                                model[0].Col49 = dtreg.Rows[0]["f_middlename"].ToString().Trim();
                                model[0].Col50 = dtreg.Rows[0]["f_lastname"].ToString().Trim();
                                model[0].Col51 = dtreg.Rows[0]["f_dob1"].ToString().Trim();
                                String[] L14 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems14 = L14;
                                model[0].Col52 = dtreg.Rows[0]["f_occupation"].ToString().Trim();
                                String[] L15 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["f_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems15 = L15;
                                model[0].Col56 = dtreg.Rows[0]["f_con_number"].ToString().Trim();
                                model[0].Col57 = dtreg.Rows[0]["f_email"].ToString().Trim();
                                String[] L17 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems17 = L17;
                                model[0].Col58 = dtreg.Rows[0]["m_firstname"].ToString().Trim();
                                model[0].Col59 = dtreg.Rows[0]["m_middlename"].ToString().Trim();
                                model[0].Col60 = dtreg.Rows[0]["m_lastname"].ToString().Trim();
                                model[0].Col61 = dtreg.Rows[0]["m_dob1"].ToString().Trim();
                                String[] L19 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems19 = L19;
                                model[0].Col62 = dtreg.Rows[0]["m_occupation"].ToString().Trim();
                                String[] L20 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["m_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems20 = L20;
                                model[0].Col66 = dtreg.Rows[0]["m_con_number"].ToString().Trim();
                                model[0].Col67 = dtreg.Rows[0]["m_email"].ToString().Trim();
                                model[0].Col68 = dtreg.Rows[0]["sameas"].ToString().Trim();
                                String[] L22 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems22 = L22;
                                model[0].Col69 = dtreg.Rows[0]["g_firstname"].ToString().Trim();
                                model[0].Col70 = dtreg.Rows[0]["g_middlename"].ToString().Trim();
                                model[0].Col71 = dtreg.Rows[0]["g_lastname"].ToString().Trim();
                                model[0].Col72 = dtreg.Rows[0]["g_dob1"].ToString().Trim();
                                String[] L24 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems24 = L24;
                                model[0].Col73 = dtreg.Rows[0]["g_occupation"].ToString().Trim();
                                model[0].Col78 = dtreg.Rows[0]["g_email"].ToString().Trim();
                                model[0].Col77 = dtreg.Rows[0]["g_con_number"].ToString().Trim();
                                String[] L26 = System.String.Join(",", dtreg.Rows.OfType<DataRow>().Select(r => r["g_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems26 = L26;
                                model[0].Col21 = dtreg.Rows[0]["about"].ToString().Trim();
                                model[0].Col63 = dtreg.Rows[0]["reffered_by"].ToString().Trim();
                                model[0].Col64 = dtreg.Rows[0]["remark_date1"].ToString().Trim();
                                model[0].Col65 = dtreg.Rows[0]["remark"].ToString().Trim();
                                sgen.SetSession(MyGuid, "vch_num_std", dtreg.Rows[0]["vch_num"].ToString().Trim());
                            }
                            break;
                        case "SIBREG":

                            mq = "select *,to_char(dob,'" + sgen.Getsqldateformat() + "') as dob," +
                                "to_char(f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                                "to_char(m_dob,'" + sgen.Getsqldateformat() + "') as m_dob," +
                                "to_char(g_dob,'" + sgen.Getsqldateformat() + "') as g_dob," +
                                "to_char(transfer_dt,'" + sgen.Getsqldateformat() + "') as " +
                                "transfer_dt from user_details a where a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type='" + URL + "'";
                            DataTable dtsib = sgen.getdata(userCode, mq);
                            if (dtsib.Rows.Count > 0)
                            {
                                model[0].Col26 = dtsib.Rows[0]["regnumber"].ToString();
                                model[0].Col27 = dtsib.Rows[0]["first_name"].ToString() + " " + dtsib.Rows[0]["middle_name"].ToString().Replace("0", "") + " " + dtsib.Rows[0]["last_name"].ToString(); ;
                                model[0].Chk1 = true;
                                model[0].Chk2 = true;
                                //chk_familyid.Disabled = true;
                                model[0].Col28 = dtsib.Rows[0]["regnumber"].ToString();
                                model[0].Col29 = dtsib.Rows[0]["first_name"].ToString() + " " + dtsib.Rows[0]["middle_name"].ToString().Replace("0", "") + " " + dtsib.Rows[0]["last_name"].ToString();


                                #region 14.qualification
                                string defval = "";
                                mod13 = cmd_Fun.qualification(userCode, unitid_mst, out defval);

                                #endregion
                                #region 15.Annual income
                                mod14 = cmd_Fun.annincome(userCode, unitid_mst);

                                #endregion
                                #region father details
                                //DropDownList1.Disabled = true;                              
                                //f_first_name.ReadOnly = true;                              
                                //f_middle_name.ReadOnly = true;                              
                                //f_last_name.ReadOnly = true;                              
                                //fdob.ReadOnly = true;                                                                                                                   
                                //facn.ReadOnly = true;
                                #region 12.father title
                                mod12.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                                mod12.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod12.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod12.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                #endregion
                                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;//ftitle
                                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod13;//fqualification
                                TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod14;//fannual income

                                String[] L12 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["f_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems12 = L12;
                                model[0].Col48 = dtsib.Rows[0]["f_firstname"].ToString().Trim();
                                model[0].Col49 = dtsib.Rows[0]["f_middlename"].ToString().Trim();
                                model[0].Col50 = dtsib.Rows[0]["f_lastname"].ToString().Trim();
                                model[0].Col51 = dtsib.Rows[0]["f_dob1"].ToString().Trim();
                                String[] L14 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["f_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems14 = L14;
                                model[0].Col52 = dtsib.Rows[0]["f_occupation"].ToString().Trim();
                                String[] L15 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["f_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems15 = L15;
                                model[0].Col56 = dtsib.Rows[0]["f_con_number"].ToString().Trim();
                                model[0].Col57 = dtsib.Rows[0]["f_email"].ToString().Trim();
                                #endregion
                                #region mother details
                                //DropDownList2.Disabled = true; 
                                //m_first_name.ReadOnly = true;
                                //m_middle_name.ReadOnly = true;
                                //m_last_name.ReadOnly = true;
                                //mdob.ReadOnly = true;
                                //macn.ReadOnly = true;
                                #region 17.Mother title
                                mod16.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                                mod16.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                                mod16.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                                mod16.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                                #endregion
                                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod16;//mtitle
                                TempData[MyGuid + "_TList19"] = model[0].TList19 = mod13;//mqualification
                                TempData[MyGuid + "_TList20"] = model[0].TList20 = mod14;//mannualincome

                                String[] L17 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["m_title"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems17 = L17;
                                model[0].Col58 = dtsib.Rows[0]["m_firstname"].ToString().Trim();
                                model[0].Col59 = dtsib.Rows[0]["m_middlename"].ToString().Trim();
                                model[0].Col60 = dtsib.Rows[0]["m_lastname"].ToString().Trim();
                                model[0].Col61 = dtsib.Rows[0]["m_dob1"].ToString().Trim();
                                String[] L19 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["m_qualification"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems19 = L19;
                                model[0].Col62 = dtsib.Rows[0]["m_occupation"].ToString().Trim();
                                String[] L20 = System.String.Join(",", dtsib.Rows.OfType<DataRow>().Select(r => r["m_annual_income"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems20 = L20;
                                model[0].Col66 = dtsib.Rows[0]["m_con_number"].ToString().Trim();
                                model[0].Col67 = dtsib.Rows[0]["m_email"].ToString().Trim();
                                #endregion
                                #region per & cur Address
                                string vill1 = dtsib.Rows[0]["per_village"].ToString().Trim();
                                if (vill1.Trim().Length > 2)
                                {
                                    DataTable dtvill1 = new DataTable();
                                    dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name, city_name, district_name, teh_name, v_name from country_state where v_id = '"
                                        + dtsib.Rows[0]["per_village"].ToString().Trim() + "'and type='CSV' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill1.Rows.Count > 0)
                                    {
                                        model[0].Col37 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col36 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col34 = dtvill1.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col35 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col33 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col32 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col16 = dtvill1.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col31 = dtsib.Rows[0]["per_address"].ToString().Trim();
                                isperadd = dtsib.Rows[0]["isperadd"].ToString().Trim();
                                if (isperadd.Equals("Y")) model[0].Chk4 = true;
                                string vill2 = dtsib.Rows[0]["cur_village"].ToString().Trim();
                                if (!vill2.Equals(""))
                                {
                                    DataTable dtvill2 = new DataTable();
                                    dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,city_name,district_name,teh_name,v_name from country_state where v_id='"
                                        + dtsib.Rows[0]["cur_village"].ToString().Trim() + "' and type='CSV' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill2.Rows.Count > 0)
                                    {
                                        model[0].Col44 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col43 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col41 = dtvill2.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col42 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col40 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col39 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col96 = dtvill2.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col38 = dtsib.Rows[0]["cur_address"].ToString().Trim();
                                #endregion
                            }
                            break;
                        case "FREG":
                            mq = "select regnumber,first_name,middle_name,last_name,per_village,cur_village,per_address,cur_address,isperadd from user_details a " +
                                "where a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            //var tmod = model.FirstOrDefault();
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col28 = dt.Rows[0]["regnumber"].ToString();
                                model[0].Col29 = dt.Rows[0]["first_name"].ToString() + " " + dt.Rows[0]["middle_name"].ToString().Replace("0", "") + " " + dt.Rows[0]["last_name"].ToString();
                                #region per & cur Address
                                string vill1 = dt.Rows[0]["per_village"].ToString().Trim();
                                if (vill1.Trim().Length > 2)
                                {
                                    DataTable dtvill1 = new DataTable();
                                    dtvill1 = sgen.getdata(userCode, "select REC_ID, country_name, state_name, city_name, district_name, teh_name, v_name from country_state where v_id = '"
                                        + dt.Rows[0]["per_village"].ToString().Trim() + "'and type='CSV' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill1.Rows.Count > 0)
                                    {
                                        model[0].Col37 = dtvill1.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col36 = dtvill1.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col34 = dtvill1.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col35 = dtvill1.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col33 = dtvill1.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col32 = dtvill1.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col16 = dtvill1.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col31 = dt.Rows[0]["per_address"].ToString().Trim();
                                isperadd = dt.Rows[0]["isperadd"].ToString().Trim();
                                if (isperadd.Equals("Y")) model[0].Chk4 = true;
                                string vill2 = dt.Rows[0]["cur_village"].ToString().Trim();
                                if (!vill2.Equals(""))
                                {
                                    DataTable dtvill2 = new DataTable();
                                    dtvill2 = sgen.getdata(userCode, "select REC_ID, country_name,state_name,city_name,district_name,teh_name,v_name from country_state where v_id='"
                                        + dt.Rows[0]["cur_village"].ToString().Trim() + "' and type='CSV' and client_unit_id = '" + unitid_mst + "'");
                                    if (dtvill2.Rows.Count > 0)
                                    {
                                        model[0].Col44 = dtvill2.Rows[0]["country_name"].ToString().Trim();
                                        model[0].Col43 = dtvill2.Rows[0]["state_name"].ToString().Trim();
                                        model[0].Col41 = dtvill2.Rows[0]["city_name"].ToString().Trim();
                                        model[0].Col42 = dtvill2.Rows[0]["district_name"].ToString().Trim();
                                        model[0].Col40 = dtvill2.Rows[0]["teh_name"].ToString().Trim();
                                        model[0].Col39 = dtvill2.Rows[0]["v_name"].ToString().Trim();
                                        model[0].Col96 = dtvill2.Rows[0]["rec_id"].ToString();
                                    }
                                }
                                model[0].Col38 = dt.Rows[0]["cur_address"].ToString().Trim();
                                #endregion
                            }
                            break;
                        case "ADD1":

                            //mq = "select * from country_state where client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type='" + URL + "'";
                            mq = "select country_name, state_name, district_name, city_name, teh_name, v_name, rec_id from country_state where client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col37 = dt.Rows[0]["country_name"].ToString();
                                model[0].Col36 = dt.Rows[0]["state_name"].ToString();
                                model[0].Col35 = dt.Rows[0]["district_name"].ToString();
                                model[0].Col34 = dt.Rows[0]["city_name"].ToString();
                                model[0].Col33 = dt.Rows[0]["teh_name"].ToString();
                                model[0].Col32 = dt.Rows[0]["v_name"].ToString();
                                model[0].Col16 = dt.Rows[0]["rec_id"].ToString();
                            }
                            break;
                        case "ADD2":

                            //mq = "select * from country_state where client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type='" + URL + "'";
                            mq = "select country_name, state_name, district_name, city_name, teh_name, v_name, rec_id from country_state where client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type='" + URL + "'";
                            DataTable dtval = sgen.getdata(userCode, mq);
                            if (dtval.Rows.Count > 0)
                            {
                                model[0].Col44 = dtval.Rows[0]["country_name"].ToString().Trim();
                                model[0].Col43 = dtval.Rows[0]["state_name"].ToString().Trim();
                                model[0].Col41 = dtval.Rows[0]["city_name"].ToString().Trim();
                                model[0].Col42 = dtval.Rows[0]["district_name"].ToString().Trim();
                                model[0].Col40 = dtval.Rows[0]["teh_name"].ToString().Trim();
                                model[0].Col39 = dtval.Rows[0]["v_name"].ToString().Trim();
                                model[0].Col96 = dtval.Rows[0]["rec_id"].ToString();
                            }
                            break;
                    }
                    break;
                #endregion
                #region Expense Details
                case "expense_details":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            mq = "select a.vch_num, to_char(convert_tz(a.vch_date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as vch_date" +
                                " ,a.client_id,a.client_unit_id,a.ent_by,a.ent_date, a.col2, a.col3 ,a.col4 ,a.col5,a.col6 from enx_tab2 a " +
                                " where a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type='" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col8 = "client_id|| client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                model[0].Col5 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col16 = dt.Rows[0]["vch_date"].ToString();
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col17 = dt.Rows[0]["col2"].ToString();
                                model[0].Col18 = dt.Rows[0]["col3"].ToString();
                                model[0].Col19 = dt.Rows[0]["col4"].ToString();
                                String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col5"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col6"].ToString()).Distinct()).Split(',');

                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                #region Type Of Expense
                                DataTable dt1 = new DataTable();
                                mq = "select '001' as Expense_id ,'Type1' as Expense from dual union all select '002' as Expense_id ,'Type2' as Expense from dual";
                                dt1 = sgen.getdata(userCode, mq);
                                if (dt1.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt1.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["Expense"].ToString(), Value = dr["Expense_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                #endregion
                                #region mode of  payment
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = cmd_Fun.Modeofpayment(userCode, unitid_mst);

                                #endregion

                                #region Upload
                                DataTable dtf = new DataTable();
                                dtf = sgen.getdata(userCode, "select rec_id,file_name,file_path,col1 from file_tab where" +
                                    " ref_code='" + dt.Rows[0]["vch_num"].ToString() + "' and type='EXP' and client_unit_id='" + unitid_mst + "'");
                                if (dtf.Rows.Count > 0)
                                {
                                    model[0].Col20 = dtf.Rows[0]["file_name"].ToString();
                                }
                                #endregion
                            }
                            break;
                    }
                    break;
                #endregion
                #region Student Fee Structure
                case "std_fee_structure":
                    switch (btnval.ToUpper())
                    {
                        case "REG":
                            string xfstr = "and b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type='" + URL + "'";
                            string clid = "", utid = "", acyid = "", regid = "", stype = "";
                            stype = Regex.Split(URL, "!~!~!")[1];
                            URL = Regex.Split(URL, "!~!~!")[0];
                            clid = URL.Substring(0, 3).ToString();
                            utid = URL.Substring(3, 6).ToString();
                            acyid = URL.Substring(9, 3).ToString();
                            acyid = URL.Substring(12, 3).ToString();
                            regid = URL.Substring(15, URL.Length - 15).ToString();
                            regid = URL.Substring(15, URL.Length - 15).ToString();
                            if (stype.Trim().ToUpper().Equals("NEW")) { stype = "N"; }
                            else { stype = "O"; }

                            mq = "select display_id, max(approved_by) approved_by,max(remark) remark, Student_type, studenttype, max(flg) as flg,(case when max(flg) > 0  then max(stddue) else " +
                                "max(due_date) end) due_date,max(due_date) as fdue_date,(case when max(flg) > 0  then max(stdoverdue) else max(overdue_date) end) overdue_date, Fee_apply, FeeTypeName,headname, " +
                                "feetype,feehead_id, month_id, month_name ,'-',section,vch_num,  class_section,  max(Student_Name) Student_Name ,Father_Name,Roll_number,havetransport,pick_point,drop_point," +
                                "RegNumber,class_applied ,(case when max(flg) > 0  then sum(stdact) else sum(act) end) as act,sum(fee) as fee from ( select ((CASE WHEN h.section_strength" +
                                " = 'O' then 'For Old Students' WHEN h.section_strength = 'N' THEN 'For New Students' WHEN h.section_strength = 'B' THEN 'For Both New and Old Students' else '-' END)) as" +
                                " Student_type, b.studenttype, 0 as flg , f.due_date,f.overdue_date,0 as stddue,0 as stdoverdue, h.Section_Strength as Fee_apply, ft.FeeTypeName, h.master_name " +
                                "as headname,f.Fee_Amount as act ,f.std_amount fee,0 as stdfee,0 as stdact, f.feetype_id as feetype,f.feehead_id,lpad(f.due_month, 2, '0') as month_id,m.master_name " +
                                " as month_name ,m.femaleratio as display_id ,b.class_applied,nvl(b.section, '-') as section,b.vch_num, c.Class|| '-'|| nvl(d.master_name, '-') as class_section, " +
                                "a.FIRST_NAME|| ' '|| replace(a.MIDDLE_NAME, '0', '')|| ' '|| replace(a.LAST_NAME, '0', '') as Student_Name,a.f_firstname|| " +
                                "' '|| replace(a.f_middlename, '0', '')|| ' '|| replace(a.f_lastname, '0', '') as Father_Name,b.Roll_number,b.havetransport,b.pick_point,b.drop_point,a.RegNumber ,'-' as " +
                                "approved_by,'-' as remark from student_detail b inner join user_details a on b.reg_no = a.regnumber and a.type = b.type  and a.vch_num = b.vch_num  inner join" +
                                " add_class c on b.class_applied = c.add_class_id and c.type = 'EAC'  and find_in_set(b.client_unit_id , c.client_unit_id)=1  left join master_setting d " +
                                "on b.section = d.master_id and d.type = 'ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1 inner join user_details e on a.sibling1_rollno" +
                                " = e.regnumber and e.type = b.type inner join  fees_detail f on f.class_id = b.class_applied and f.type = 'STR'  and find_in_set(b.client_unit_id," +
                                " f.client_unit_id)=1 and f.Academic_year_Id = b.Academic_year_Id  inner join school_fee_type ft on f.FeeType_Id = ft.FeeType_Id  and " +
                                "f.client_unit_id = ft.client_unit_id and(ft.master_type = '0' or ft.master_type = '') INNER join master_setting h on f.feetype_id|| f.FeeHead_Id=h.sectionid||h.master_id and h.type = 'EFH'" +
                                " and  f.client_unit_id = h.client_unit_id and h.master_type = 'Education Fees Head' and h.section_strength  in ('B', '" + stype + "') inner join " +
                                "master_setting m on lpad(f.due_month,2,'0') = m.Section_Strength and m.type = 'MNT'  WHERE b.client_id|| b.client_unit_id|| b.type|| b.academic_year_id|| b.reg_no=" +
                                " '" + URL + "' union select ((CASE WHEN h.section_strength = 'O' then 'For Old Students' WHEN h.section_strength " +
                                "= 'N' THEN 'For New Students' WHEN h.section_strength = 'B' THEN 'For Both New and Old Students' else '-' END)) as Student_type, b.studenttype, 1 as flg, " +
                                "0 as due,0 as overdue,f.due_date,f.overdue_date, h.Section_Strength as Fee_apply, ft.FeeTypeName, h.master_name as headname,0 as fee,0 as " +
                                "actfee,f.std_amount,f.Fee_Amount,f.feetype_id as feetype,f.feehead_id,lpad(f.due_month, 2, '0') as month_id,m.master_name as month_name ,m.femaleratio as display_id ,b.class_applied," +
                                "nvl(b.section, '-') as section,b.vch_num, c.Class|| '-'|| nvl(d.master_name, '-') as class_section, a.FIRST_NAME|| ' '|| " +
                                "replace(a.MIDDLE_NAME, '0', '')|| ' '|| replace(a.LAST_NAME, '0', '') as Student_Name,a.f_firstname|| ' '|| replace(a.f_middlename, '0', '')||" +
                                " ' '|| replace(a.f_lastname, '0', '') as Father_Name,b.Roll_number,b.havetransport,b.pick_point,b.drop_point,a.RegNumber,f.approved_by, f.remark from student_detail " +
                                "b inner join user_details a on b.reg_no = a.regnumber and a.type = b.type  and a.vch_num = b.vch_num  inner join add_class c on b.class_applied = c.add_class_id and " +
                                "c.type = 'EAC'  and b.client_unit_id = c.client_unit_id  left join master_setting d on b.section = d.master_id and d.type = 'ECS' and " +
                                " find_in_set(b.client_unit_id,d.client_unit_id)=1 inner join user_details e on a.sibling1_rollno = e.regnumber and e.type = b.type inner join " +
                                " fees_detail f on f.class_id = b.class_applied and f.type = 'STD'  and b.client_unit_id = f.client_unit_id and f.Academic_year_Id = " +
                                "b.Academic_year_Id and b.Reg_no = f.regno inner join school_fee_type ft on f.FeeType_Id = ft.FeeType_Id  and f.client_unit_id = " +
                                "ft.client_unit_id and(ft.master_type = '0' or ft.master_type = '') INNER join master_setting h on f.feetype_id|| f.FeeHead_Id=h.sectionid||h.master_id and h.type = 'EFH' " +
                                " and f.client_unit_id = h.client_unit_id and h.master_type = 'Education Fees Head' inner join master_setting m on lpad(f.due_month,2,'0') =" +
                                " m.Section_Strength and m.type = 'MNT'  WHERE b.client_id|| b.client_unit_id|| b.type|| b.academic_year_id|| b.reg_no= '" + URL + "') a" +
                                " group by Fee_apply, FeeTypeName, headname, feetype, feehead_id, month_id, month_name, class_applied,'-',section,vch_num,  class_section,RegNumber," +
                                "Father_Name,Roll_number,havetransport,pick_point,drop_point,class_applied ,Student_type, studenttype,display_id order by display_id";
                            DataTable dtmain = sgen.getdata(userCode, mq);
                            dt = dtmain.Copy();
                            if (dtmain.Rows.Count > 0)
                            {
                                #region Transport
                                DataTable dttrn, dtmonths, dtthismonth = new DataTable();
                                DataView dvv = dt.DefaultView;
                                dtmonths = dvv.ToTable(true, "Month_name", "Month_id");
                                string Class_id = sgen.seekval_dt(dt, "1=1", "class_applied");
                                string havetransport = sgen.seekval_dt(dt, "1=1", "havetransport");
                                string transamt = "0";
                                if (havetransport.Trim().ToLower().Equals("school"))
                                {
                                    try
                                    {
                                        string pickpoint = sgen.seekval_dt(userCode, dt, "FeeTypeName", "Transport", "pick_point");
                                        string Droppoint = sgen.seekval_dt(userCode, dt, "FeeTypeName", "Transport", "drop_point");
                                        string mqt = "select  nvl(round(sum(Transamt)/2),0)  Transamt from (select  group_name as Transamt from master_setting where type='LCL' " +
                                            "and client_unit_id='" + unitid_mst + "' and master_name='" + pickpoint + "'  and classid='" + Class_id + "' union all " +
                                            "select group_name as Transamt from master_setting where type = 'LCL' and client_unit_id" +
                                            " = '" + unitid_mst + "' and master_name = '" + Droppoint + "'  and classid = '" + Class_id + "') a";
                                        dttrn = sgen.getdata(userCode, mqt);
                                        transamt = dttrn.Rows[0]["Transamt"].ToString();
                                    }
                                    catch (Exception err)
                                    {
                                        dttrn = new DataTable();
                                    }
                                }
                                #endregion
                                model[0].Col51 = dtmain.AsEnumerable().Max(r => r.Field<decimal>("flg")).ToString();
                                model[0].Col8 = "client_id||client_unit_id|| type|| academic_year_id|| regno= '" + URL + "'";
                                var newDt = dtmain.AsEnumerable().GroupBy(r => new
                                {
                                    feetype = r.Field<string>("feetype"),
                                    feetypename = r.Field<string>("feetypename"),
                                }).Select(g =>
                                {
                                    var row = dt.NewRow();
                                    row["feetype"] = g.Key.feetype;
                                    row["feetypename"] = g.Key.feetypename;
                                    ;
                                    return row;
                                }).CopyToDataTable();
                                DataTable dtFeetype = newDt;
                                List<Tmodelmain> LTM1 = new List<Tmodelmain>();
                                foreach (DataRow drf in dtFeetype.Rows)
                                {
                                    Tmodelmain ltm1 = new Tmodelmain();
                                    ltm1.Col1 = drf["feetype"].ToString();
                                    ltm1.Col2 = drf["feetypename"].ToString();
                                    ltm1.Col3 = "0";
                                    ltm1.Col4 = "0";
                                    var vrhead = dtmain.AsEnumerable().Where(w => (string)w["feetype"] == drf["feetype"].ToString())
                                                                  .Select(s => s).CopyToDataTable();
                                    DataTable dthd = vrhead;
                                    var Dt = dthd.AsEnumerable().GroupBy(r => new
                                    {
                                        feetype = r.Field<string>("feetype"),
                                        feehead_id = r.Field<string>("feehead_id"),
                                        headname = r.Field<string>("headname"),
                                        Student_type = r.Field<string>("Student_type"),
                                        Fee_apply = r.Field<string>("Fee_apply")
                                    }).Select(g =>
                                    {
                                        var row = dt.NewRow();
                                        row["feetype"] = g.Key.feetype;
                                        row["feehead_id"] = g.Key.feehead_id;
                                        row["headname"] = g.Key.headname;
                                        row["Student_type"] = g.Key.Student_type;
                                        row["Fee_apply"] = g.Key.Fee_apply;
                                        ;
                                        return row;
                                    }).CopyToDataTable();
                                    DataTable dthead = Dt;
                                    List<Tmodelmain> LTM2 = new List<Tmodelmain>();
                                    foreach (DataRow drh in dthead.Rows)
                                    {
                                        Tmodelmain ltm2 = new Tmodelmain();
                                        ltm2.Col1 = drh["feetype"].ToString();
                                        ltm2.Col2 = drh["feehead_id"].ToString();
                                        ltm2.Col3 = drh["headname"].ToString();
                                        ltm2.Col4 = "0";
                                        ltm2.Col5 = drh["Student_type"].ToString();
                                        ltm2.Col6 = drh["Fee_apply"].ToString();
                                        var vrmonth = dtmain.AsEnumerable().Where(w => (string)w["feetype"] == drh["feetype"].ToString() && (string)w["feehead_id"] == drh["feehead_id"].ToString())
                                                                                                  .Select(s => s).CopyToDataTable();
                                        DataTable dtmonth = vrmonth;
                                        List<Tmodelmain> LTM3 = new List<Tmodelmain>();
                                        foreach (DataRow drm in dtmonth.Rows)
                                        {
                                            Tmodelmain ltm3 = new Tmodelmain();
                                            ltm3.Col1 = drm["feetype"].ToString();
                                            ltm3.Col2 = drm["feehead_id"].ToString();
                                            ltm3.Col3 = drm["Month_Id"].ToString();
                                            ltm3.Col4 = drm["Month_Name"].ToString();
                                            ltm3.Col5 = drm["fee"].ToString();
                                            ltm3.Col6 = drm["act"].ToString();
                                            ltm3.Col7 = drm["due_date"].ToString();
                                            ltm3.Col8 = drm["overdue_date"].ToString();
                                            if (sgen.Make_int(drm["fdue_date"].ToString()) > 0 && drm["FeeTypeName"].ToString().Trim().ToLower().Equals("transport")
                                                )
                                            {
                                                ltm3.Col5 = transamt;
                                                if (sgen.Make_int(drm["flg"].ToString()) == 0) { ltm3.Col6 = transamt; }
                                            }
                                            LTM3.Add(ltm3);
                                        }
                                        ltm2.LTM1 = LTM3;
                                        LTM2.Add(ltm2);
                                    }
                                    ltm1.LTM1 = LTM2;
                                    LTM1.Add(ltm1);
                                }
                                model[0].LTM1 = LTM1;
                                model[0].Col16 = dtmain.Rows[0]["Student_Name"].ToString();
                                model[0].Col17 = dtmain.Rows[0]["RegNumber"].ToString();
                                model[0].Col18 = dtmain.Rows[0]["class_section"].ToString();
                                model[0].Col19 = "0";
                                model[0].Col20 = dtmain.Rows[0]["class_applied"].ToString();
                                model[0].Col21 = dtmain.Rows[0]["father_name"].ToString();
                                model[0].Col22 = dtmain.Rows[0]["roll_number"].ToString();
                                model[0].Col24 = dtmain.Rows[0]["studenttype"].ToString();
                                //model[0].Col25 = newDt.Rows[0]["approved_by"].ToString();
                                //model[0].Col26 = newDt.Rows[0]["remark"].ToString();
                                model[0].Col25 = sgen.seekval_dt(dt, "flg=1", "approved_by");
                                model[0].Col26 = sgen.seekval_dt(dt, "flg=1", "remark");
                            }
                            break;
                    }
                    break;
                #endregion
                #region Fee Structure
                case "fee_structure":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            mq = "select ds.femaleratio,  (select GROUP_CONCAT( distinct fd.FeeType_Id) as Fee_type from fees_detail fd  where " +
                                  "fd.client_id||fd.client_unit_id||fd.vch_num||to_char(fd.vch_date,'yyyymmdd')||fd.type||fd.class_id||fd.academic_year_id='" + URL + "') as Fee_type" +
                                  " , h.section_strength as Fee_apply, ( (CASE WHEN h.section_strength='O' then 'For Old Students'" +
                                  " WHEN h.section_strength='N' THEN 'For New Students' WHEN h.section_strength='B' THEN 'For Both New and  Old Students'  else '-' END )" +
                                  ") as Studenttype, '0' as flag, c.Class,b.FeeTypeName,h.master_name as Headname, fd.due_month  as Month_Id,fd.monthname as Month_name, " +
                                  "fd.feetype_id as feetype,fd.FeeHead_Id ,fd.Fee_Amount,fd.std_amount,fd.ent_by,fd.ent_date,fd.vch_num,fd.vch_date,fd.client_id," +
                                  "fd.client_unit_id,GROUP_CONCAT(distinct fd.class_id) as class_id,due_date,overdue_date from fees_detail fd inner join add_class c " +
                                  "on fd.class_id=c.add_class_id and c.type='EAC'  and fd.client_unit_id=c.client_unit_id " +
                                  "inner join master_setting h on fd.feetype_id||fd.FeeHead_Id=h.sectionid||h.master_id and h.type='EFH'  and " +
                                  "fd.client_unit_id=h.client_unit_id and h.master_type='Education Fees Head' inner join school_fee_type b on fd.FeeType_Id " +
                                  "=  b.feetype_id  and b.master_type!='B'   and fd.client_unit_id=b.client_unit_id" +
                                  " inner join  master_setting  ds on ds.section_strength=fd.due_month and ds.type='MNT' where " +
                                  "fd.client_id||fd.client_unit_id||fd.vch_num||to_char(fd.vch_date,'yyyymmdd')||fd.type||fd.class_id||fd.academic_year_id" +
                                  "='" + URL + "' group by ds.femaleratio,h.section_strength , c.Class,b.FeeTypeName,h.master_name, fd.due_month,fd.monthname, fd.feetype_id" +
                                  ",fd.FeeHead_Id,fd.Fee_Amount,fd.std_amount,fd.ent_by,fd.ent_date,fd.vch_num,fd.vch_date,fd.client_id,fd.client_unit_id ," +
                                  "due_date,overdue_date order by ds.femaleratio, fd.FeeType_Id";
                            DataTable dtmain = sgen.getdata(userCode, mq);
                            dt = dtmain.Copy();
                            if (dtmain.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");

                                #region Class
                                DataTable dt1 = new DataTable();
                                mq1 = "select add_class_id as Class_id,class,cast(sequence as int) from add_class where client_unit_id='" + unitid_mst + "' " +
                            "  and type='EAC' and (status='Y' or status='') and add_class_id  not in (select distinct class_id from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and  client_unit_id='" + unitid_mst + "' and academic_year_id='" + Ac_Year_id + "') ";
                                mq2 = "select add_class_id as Class_id,class,cast(sequence as int) from add_class where " +
                                    "client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='') and add_class_id ='" + dtmain.Rows[0]["class_id"].ToString() + "' ";
                                mq = mq1 + " union " + mq2;
                                dt1 = sgen.getdata(userCode, mq);
                                if (dt1.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt1.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["class"].ToString(), Value = dr["Class_id"].ToString() });
                                    }
                                }

                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                #endregion
                                #region Feetype
                                bool libfees = false;
                                try
                                {
                                    libfees = Convert.ToBoolean(sgen.getstring(userCode, "select IsregFeesBeforeadm from master_setting where type='LIB'  and client_unit_id='" + unitid_mst + "'"));
                                }
                                catch { libfees = false; }
                                string cond = "";
                                if (libfees == false)
                                {
                                    cond = "";
                                }
                                else
                                {
                                    cond = "and b.FeeTypeName='Library'";
                                }
                                DataTable dt2 = new DataTable();
                                mod2 = new List<SelectListItem>();
                                mq = "select FeeType_Id,FeeTypeName  from school_Fee_Type where ( master_type='0' or master_type='') " +
                                    "and client_unit_id='" + unitid_mst + "'  and (FeeType_Id !='001'and FeeType_Id !='004')" +
                                    " and feetype_id in (select sectionid from master_setting where type = 'EFH' and client_unit_id = '" + unitid_mst + "' and master_type = 'Education Fees Head') ";
                                dt2 = sgen.getdata(userCode, mq);
                                if (dt2.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt2.Rows)
                                    {
                                        mod2.Add(new SelectListItem { Text = dr["FeeTypeName"].ToString(), Value = dr["FeeType_Id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;

                                #endregion
                                var newDt = dtmain.AsEnumerable().GroupBy(r => new
                                {
                                    feetype = r.Field<string>("feetype"),
                                    feetypename = r.Field<string>("feetypename"),
                                }).Select(g =>
                                {
                                    var row = dt.NewRow();
                                    row["feetype"] = g.Key.feetype;
                                    row["feetypename"] = g.Key.feetypename;
                                    ;
                                    return row;
                                }).CopyToDataTable();
                                DataTable dtFeetype = newDt;
                                List<Tmodelmain> LTM1 = new List<Tmodelmain>();
                                foreach (DataRow drf in dtFeetype.Rows)
                                {
                                    Tmodelmain ltm1 = new Tmodelmain();
                                    ltm1.Col1 = drf["feetype"].ToString();
                                    ltm1.Col2 = drf["feetypename"].ToString();
                                    ltm1.Col3 = "0";
                                    ltm1.Col4 = "0";
                                    //ltm1.Col15 = "RAM";
                                    var vrhead = dtmain.AsEnumerable().Where(w => (string)w["feetype"] == drf["feetype"].ToString())
                                                                  .Select(s => s).CopyToDataTable();
                                    DataTable dthd = vrhead;
                                    var Dt = dthd.AsEnumerable().GroupBy(r => new
                                    {
                                        feetype = r.Field<string>("feetype"),
                                        feehead_id = r.Field<string>("feehead_id"),
                                        headname = r.Field<string>("headname"),
                                        Studenttype = r.Field<string>("Studenttype"),
                                        Fee_apply = r.Field<string>("Fee_apply")
                                    }).Select(g =>
                                    {
                                        var row = dt.NewRow();
                                        row["feetype"] = g.Key.feetype;
                                        row["feehead_id"] = g.Key.feehead_id;
                                        row["headname"] = g.Key.headname;
                                        row["Studenttype"] = g.Key.Studenttype;
                                        row["Fee_apply"] = g.Key.Fee_apply;
                                        ;
                                        return row;
                                    }).CopyToDataTable();
                                    DataTable dthead = Dt;
                                    List<Tmodelmain> LTM2 = new List<Tmodelmain>();
                                    foreach (DataRow drh in dthead.Rows)
                                    {
                                        Tmodelmain ltm2 = new Tmodelmain();
                                        ltm2.Col1 = drh["feetype"].ToString();
                                        ltm2.Col2 = drh["feehead_id"].ToString();
                                        ltm2.Col3 = drh["headname"].ToString();
                                        ltm2.Col4 = "0";
                                        ltm2.Col5 = drh["Studenttype"].ToString();
                                        ltm2.Col6 = drh["Fee_apply"].ToString();
                                        var vrmonth = dtmain.AsEnumerable().Where(w => (string)w["feetype"] == drh["feetype"].ToString() && (string)w["feehead_id"] == drh["feehead_id"].ToString())
                                                                                                  .Select(s => s).CopyToDataTable();
                                        DataTable dtmonth = vrmonth;
                                        List<Tmodelmain> LTM3 = new List<Tmodelmain>();
                                        foreach (DataRow drm in dtmonth.Rows)
                                        {
                                            Tmodelmain ltm3 = new Tmodelmain();
                                            ltm3.Col1 = drm["feetype"].ToString();
                                            ltm3.Col2 = drm["feehead_id"].ToString();
                                            ltm3.Col3 = drm["Month_Id"].ToString();
                                            ltm3.Col4 = drm["Month_Name"].ToString();
                                            ltm3.Col5 = drm["Fee_Amount"].ToString();
                                            ltm3.Col6 = drm["due_date"].ToString();
                                            ltm3.Col7 = drm["overdue_date"].ToString();
                                            LTM3.Add(ltm3);
                                        }
                                        ltm2.LTM1 = LTM3;
                                        LTM2.Add(ltm2);
                                    }
                                    ltm1.LTM1 = LTM2;
                                    LTM1.Add(ltm1);
                                }
                                model[0].LTM1 = LTM1;
                                //model[0].Col18 = "disabled";
                                model[0].Col8 = "client_id|| client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type||class_id||academic_year_id = '" + URL + "'";
                                model[0].Col5 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                String[] L1 = System.String.Join(",", dtmain.Rows.OfType<DataRow>().Select(r => r["class_id"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtmain.Rows.OfType<DataRow>().Select(r => r["feetype"].ToString()).Distinct()).Split(',');

                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;


                            }
                            break;
                    }
                    break;
                #endregion
                #region Regular Fees
                case "fee_receipt":
                    switch (btnval.ToUpper())
                    {
                        case "REG":
                            string xnumber = "", xfstr = "", Receipt_Number = "", classsection = "";
                            DataTable grpdt = new DataTable();
                            DataTable grpdada = new DataTable();
                            DataTable grpdtstatus = new DataTable();
                            DataTable lbldt = new DataTable();

                            //  DateTime mydate = sgen.server_datetime_dt(userCode);
                            DateTime mydate = sgen.Make_date(model[0].Col18);//08042020
                            //string mydatee = model[0].Col18;
                            //DateTime mydate = Convert.ToDateTime(mydatee);

                            var takefine = model[0].Col62 == "Y" ? true : false;
                            List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                            tm = model.FirstOrDefault();
                            if (!sgen.GetSession(MyGuid, "RFeeType").Equals(null))
                            {
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "G")
                                {
                                    xfstr = "and (b.client_id||b.client_unit_id||b.type||a.sibling1_rollno)='" + URL + "'";
                                    tm.Col53 = "Family Group Registration No.";
                                    tm.Col54 = "Family Group Total Due Fees";
                                }
                                else if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "S")
                                {
                                    xfstr = "and (b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)='" + URL + "'";
                                    if (tm.Col14 != "7019.8" || tm.Col14 != "7019.11")
                                    {
                                        tm.Col53 = "Registration No.";
                                        tm.Col54 = "Total Due Fees";
                                    }
                                }
                                else if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "A")
                                {
                                    xfstr = "and (b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)='" + URL + "'";
                                    if (tm.Col14 == "7019.2")
                                    {
                                        tm.Col53 = "Temp Student No.";
                                        tm.Col54 = "Total Due Fees";
                                    }
                                }
                                tm.Col52 = sgen.GetSession(MyGuid, "RFeeType").ToString();
                            }
                            if (tm.Col14 == "7019.2") // admission fee receipt
                            {
                                // reena callback done
                                //                mq = " SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.sa_id,a.class_applied,c.Class as Class_Name, (first_name||' '||Replace(middle_name,'0','')||' '||" +
                                //"Replace(last_name,'0','')) AS Student_Name,(replace(a.f_firstname,'0','')||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') ) as Father_Name" +
                                //                mq = " SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.sa_id,a.class_applied,c.Class as Class_Name, first_name||' '||Replace(middle_name,'0','')||' '||" +
                                //"Replace(last_name,'0','') AS Student_Name,(a.f_firstname||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') ) as Father_Name" +
                                //",a.Gender,'-' as section, a.sa_id as RegNumber,a.Vch_num ,'-' as a_i_date,'active' as status, a.sa_id as RollNo,a.sa_id as sibling1_rollno FROM student_applicant_details a," +
                                //"add_class c WHERE uSESSION='" + Ac_Year_id + "' and c.add_class_id=a.class_applied  and c.client_unit_id='" + unitid_mst + "' " +
                                //"and a.student_status='temporary'  and a.client_unit_id='" + unitid_mst + "' and  " +
                                //"  (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type)='" + URL + "'";

                                mq = " SELECT a.sa_id,a.class_applied,c.Class as Class_Name,'-' as section, a.sa_id as RegNumber,a.Vch_num ,'-' as a_i_date,'active' as status, a.sa_id as RollNo,a.sa_id as sibling1_rollno FROM student_applicant_details a," +
             "add_class c WHERE uSESSION='" + Ac_Year_id + "' and c.add_class_id=a.class_applied  and c.client_unit_id='" + unitid_mst + "' " +
             "and a.student_status='temporary'  and a.client_unit_id='" + unitid_mst + "' and  " +
             "  (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type)='" + URL + "'";
                            }
                            else

                            {
                                //mq = "select b.class_applied,nvl(b.section,'-') as section,b.vch_num, a.sibling1_rollno,(e.FIRST_NAME||' '||replace(e.MIDDLE_NAME,'0','')||' '||replace(e.LAST_NAME,'0','')) as Family_Group_Name," +
                                //                               "c.Class as class_name,  nvl(d.master_name,'-') as Section_name, (a.FIRST_NAME||''||replace(a.MIDDLE_NAME,'0','')||' '||replace(a.LAST_NAME,'0','')) as Student_Name," +                                                              
                                //                               "(a.f_firstname||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') ) as Father_Name " +
                                //                               " ,a.GENDER as Gender,a.RegNo,a.RegNumber,nvl(b.RollNo,'0') as RollNo,nvl(b.Roll_number,'-') as Roll_Number ,a.a_i_date,a.Status from student_detail b " +
                                //                             "inner join user_details a on b.reg_no=a.regnumber and a.type=b.type  and a.vch_num=b.vch_num  " +
                                //                             "inner join add_class c on b.class_applied=c.add_class_id and c.type='EAC'  and b.client_unit_id=c.client_unit_id  " +
                                //                             "left join master_setting d on b.section =d.master_id and d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                                //                             " inner join user_details e on a.sibling1_rollno=e.regnumber   and e.type=b.type and e.client_unit_id='" + unitid_mst + "' WHERE b.type='STD'" +
                                //                             "  and b.client_unit_id='" + unitid_mst + "' and b.Academic_year_Id='" + Ac_Year_id + "' " + xfstr + " order by a.sibling1_rollno  ";

                                mq = "select DISTINCT b.class_applied,nvl(b.section,'-') as section,b.vch_num, a.sibling1_rollno," +
                                                               "c.Class as class_name,  nvl(d.master_name,'-') as Section_name ,a.RegNumber,nvl(b.RollNo,'0') as RollNo ,a.a_i_date,a.Status from student_detail b " +
                                                             "inner join user_details a on b.reg_no=a.regnumber and a.type=b.type  and a.vch_num=b.vch_num  " +
                                                             "inner join add_class c on b.class_applied=c.add_class_id and c.type='EAC'  and b.client_unit_id=c.client_unit_id  " +
                                                             "left join master_setting d on b.section =d.master_id and d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                                                             " inner join user_details e on a.sibling1_rollno=e.regnumber   and e.type=b.type and e.client_unit_id='" + unitid_mst + "' WHERE b.type='STD'" +
                                                             "  and b.client_unit_id='" + unitid_mst + "' and b.Academic_year_Id='" + Ac_Year_id + "' " + xfstr + " order by a.sibling1_rollno  ";
                            }
                            DataTable dtGrpdetail = new DataTable();
                            string att_status_F = "", att_status_S = "";
                            dtGrpdetail = sgen.getdata(userCode, mq);
                            Boolean IsRegNoChange = false;
                            for (Int32 y = 0; y < dtGrpdetail.Rows.Count; y++)
                            {
                                string regcond = "";
                                string Class_id = dtGrpdetail.Rows[y]["class_applied"].ToString();
                                string Section_id = dtGrpdetail.Rows[y]["section"].ToString();
                                string RollNo = dtGrpdetail.Rows[y]["RollNo"].ToString();
                                string RegNumber = dtGrpdetail.Rows[y]["RegNumber"].ToString();
                                string Student_id = dtGrpdetail.Rows[y]["Vch_num"].ToString();
                                string inactivedt = dtGrpdetail.Rows[y]["a_i_date"].ToString();
                                string stdstatus = dtGrpdetail.Rows[y]["status"].ToString();
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "A")
                                {
                                    classsection = dtGrpdetail.Rows[y]["class_name"].ToString();
                                }
                                else
                                {
                                    classsection = dtGrpdetail.Rows[y]["class_name"].ToString() + '-' + dtGrpdetail.Rows[y]["section_name"].ToString();
                                }
                                string ssval = sgen.seekval(userCode, "select regno from fees_detail where class_id='" + Class_id + "'  and  type='STD' and " +
                                    "Academic_year_Id='" + Ac_Year_id + "' and regno='" + RegNumber + "' and client_unit_id='" + unitid_mst + "'", "regno");
                                if (ssval.Trim().Equals("0"))
                                {
                                    regcond = " class_id = '" + Class_id + "'  and type = 'STR' and " +
        "Academic_year_Id='" + Ac_Year_id + "' and client_unit_id='" + unitid_mst + "' " +
        " and (case when (feetype_id||feehead_id)='001001' or  fee_amount>0 then 1 else to_number(due_date) end )>0";
                                }
                                else
                                {

                                    regcond = " class_id='" + Class_id + "'  and  type='STD' and " +
                                     "Academic_year_Id='" + Ac_Year_id + "' and regno='" + RegNumber + "' and client_unit_id='" + unitid_mst + "' " +
                                     " and (case when (feetype_id||feehead_id)='001001' or  fee_amount>0 then  1 else to_number(due_date) end )>0";
                                }
                                if (stdstatus != "active")
                                {
                                    mydate = sgen.Make_date(inactivedt); ;
                                }
                                string edicond = "type = 'EDI' and Academic_year_Id='" + Ac_Year_id + "' and regno='" + RegNumber + "'  and client_unit_id='" + unitid_mst + "'";
                                mq = sgen.vw_fees_new(regcond, edicond) + " where RegNumber = '" + RegNumber + "' order by due_dt";
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "A")
                                {
                                    edicond = "type = 'EDI' and Academic_year_Id='" + Ac_Year_id + "' and regno='" + RegNumber + "'  and client_unit_id='" + unitid_mst + "'";
                                    regcond = regcond + "  and   feetype_id=005";
                                    mq = sgen.vw_fees_Adm(regcond, edicond) + " where sa_id = " + RegNumber + " order by due_dt";
                                }
                                string mq2 = "";

                                string mq1 = "select trim(studenttype) studenttype, trim(FIRST_NAME) FIRST_NAME, trim(MIDDLE_NAME) MIDDLE_NAME, trim(LAST_NAME) LAST_NAME ," +
                                    " trim(RegNumber) RegNumber, '0' as paid, trim(Scholarship_id) Scholarship_id,  scholarship , trim(feestatus) feestatus, FeeDate,Fee_Month,null as Receipt_Date" +
                                    ",Due_Date1,to_char(overdue_dt,'" + sgen.Getsqldatetimeformat() + "') overdue_dt ,HideDate,trim(Month_id) Month_id,trim(Month_name) Month_name" +
                                    ",Fee_Amount,trim(FeeType_Id) FeeType_Id,trim(Frequency_Id) Frequency_Id,trim(FeeHead_Id) FeeHead_Id ,trim(FrequencyName) FrequencyName" +
                                    ",trim(FeeTypeName) FeeTypeName,trim(HeadName) HeadName,Receipt_Amount,PaidAmount,IntialStatus,trim(havetransport) havetransport," +
                                    "trim(pick_point) pick_point,trim(drop_point) drop_point,trim(Email_id) Email_id, trim(Phoneno) Phoneno,due_date as due_day," +
                                    "overdue_date as overdue_day from (" + mq + ") a";
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "A")
                                {
                                    // (for aadmission fees only)
                                    mq2 = "select trim(ud.std_type) as studenttype, trim(ud.FIRST_NAME) FIRST_NAME, trim(ud.MIDDLE_NAME)MIDDLE_NAME, " +
                                        "trim(ud.LAST_NAME)LAST_NAME, trim(a.RegNo) as  RegNumber, '2' as paid , null as Scholarship_id,  " +
                                   "(case when a.type in ('ERC','ERW') then Receipt_Amount else 0.00 end) as scholarship, '-' as feestatus,'' as FeeDate,'-' as Fee_Month," +
                                   "a.vch_date as Receipt_Date, a.DueDt as Due_Date1,'' as overdue_dt,'-' as HideDate ,trim(a.Month_id) Month_id,trim(a.Month_name)Month_name," +
                                   " 0 as Fee_Amount,trim(a.Fee_type_id) as FeeType_Id,trim(a.Frequency_Id)Frequency_Id,trim(a.Fee_Head_id) as FeeHead_Id" +
                                   ",'Monthly' as FrequencyName,trim(st.FeeTypeName) FeeTypeName, trim(ms.master_name) as HeadName, Receipt_Amount ," +
                                   "(case when a.type = ('ERD') then Receipt_Amount else 0.00 end) as PaidAmount,'Y' as IntialStatus,'0' as havetransport,'0' as pick_point," +
                                   "'0' as drop_point,(CASE WHEN ud.default_emailid='F' THEN ud.f_email WHEN ud.default_emailid='M' THEN ud.m_email else ud.g_email END)" +
                                   " as Email_Id ,(CASE WHEN ud.default_Ph='F' THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number else ud.g_con_number END) as " +
                                   "PhoneNo ,0 as due_day,0 as overdue_day " +
                                   " from student_receipt_detail a inner join student_applicant_details  ud on  ud.sa_id= a.Student_id and ud.type='STD'" +
                                   " and a.client_unit_id=ud.client_unit_id inner join school_fee_type st on st.FeeType_Id = a.Fee_Type_Id " +
                                   "  and st.client_unit_id = a.client_unit_id and(st.master_type = '' or st.master_type = '0') " +
                                   "  inner join master_setting ms  on (a.fee_type_id|| a.Fee_Head_Id)=(ms.sectionid||ms.master_id) and ms.type = 'EFH' " +
                                   "and find_in_set(a.client_unit_id,ms.client_unit_id )=1 and ms.master_type = 'Education Fees Head'" +
                                   " where  a.type in ('ERD','ERC','ERW')  and  a.client_unit_id = '" + unitid_mst + "' " +
                                   "and a.academic_year_id='" + Ac_Year_id + "' and a.student_id =" + RegNumber + " and a.regno='0'";
                                }
                                else
                                {

                                    mq2 = "select sd.studenttype, ud.FIRST_NAME, ud.MIDDLE_NAME, ud.LAST_NAME, a.RegNo as  RegNumber, '2' as paid , null as Scholarship_id,  " +
                                       "(case when a.type in ('ERC','ERW') then Receipt_Amount else 0.00 end) as scholarship, '-' as feestatus,(to_char(a.DueDt,'yyyymm')||'01') as FeeDate,('01/'|| to_char(a.DueDt, 'mm/yyyy')) as Fee_Month," +
                                       "a.vch_date as Receipt_Date, a.DueDt as Due_Date1, to_char(Last_Day(a.DueDt), '" + sgen.Getsqldatetimeformat() + "') as overdue_dt,to_char(Last_Day(a.DueDt), '" + sgen.Getsqldateformat() + "') as HideDate  ,a.Month_id,a.Month_name, 0 as Fee_Amount,a.Fee_type_id as FeeType_Id," +
                                       "a.Frequency_Id,a.Fee_Head_id as FeeHead_Id,'Monthly' as FrequencyName,st.FeeTypeName, ms.master_name as HeadName, Receipt_Amount ," +
                                       "(case when a.type  in ('ERD') then Receipt_Amount else 0.00 end) as   PaidAmount,'Y' as IntialStatus,'0' as havetransport,'0' as pick_point," +
                                       "'0' as drop_point,(CASE WHEN ud.default_emailid='F' THEN ud.f_email WHEN ud.default_emailid='M' THEN ud.m_email else ud.g_email END)" +
                                       " as Email_Id ,(CASE WHEN ud.default_Ph='F' THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number else ud.g_con_number END) as " +
                                       "PhoneNo ,0 as due_day,0 as overdue_day " +
                                       " from student_receipt_detail a inner join student_detail sd on sd.reg_no=a.regno and sd.client_unit_id='" + unitid_mst + "' and sd.academic_year_id='" + Ac_Year_id + "'  inner join user_details ud on ud.vch_num =sd.vch_num and   ud.RegNumber= a.RegNo and ud.type='STD' and ud.client_unit_id=a.client_unit_id inner join school_fee_type st" +
            " on st.FeeType_Id = a.Fee_Type_Id   and st.client_unit_id = a.client_unit_id and(st.master_type = ''" +
            " or st.master_type = '0')   inner join master_setting ms  on (a.fee_type_id|| a.Fee_Head_Id)=(ms.sectionid||ms.master_id) and ms.type = 'EFH' " +
            " and find_in_set(a.client_unit_id,ms.client_unit_id)=1 and ms.master_type = 'Education Fees Head' where  a.type in ('ERD','ERC','ERW')   and a.client_unit_id = '" + unitid_mst + "' " +
                                       "and a.academic_year_id='" + Ac_Year_id + "' and a.regNo ='" + RegNumber + "' and a.class_id='" + Class_id + "'";
                                }
                                mq = mq1 + " union all " + mq2;

                                mq = "select studenttype, Email_id, Phoneno , '" + classsection + "' as classsection, max(havetransport) havetransport,max(pick_point) pick_point,max(drop_point) drop_point, '" + dtGrpdetail.Rows[y]["Vch_num"].ToString() + "' as Student_id,'" + dtGrpdetail.Rows[y]["RegNumber"].ToString() + "' as RegNumber, " +
                                     "'" + dtGrpdetail.Rows[y]["class_applied"].ToString() + "' as Class_id,'" + dtGrpdetail.Rows[y]["section"].ToString() + "' as section_id,'" + dtGrpdetail.Rows[y]["RollNo"].ToString() +
                                     "' as rollno, (FIRST_NAME||' '||replace(MIDDLE_NAME,'0','')||' '||replace(LAST_NAME,'0','')) as stdname, " +
                                     "'" + dtGrpdetail.Rows[0]["sibling1_rollno"].ToString() + "' as grpid, max(paid) as paid, sum(Scholarship_id) as Scholarship_id,  sum(scholarship) scholarship " +
                                     ", (case when max(Fee_Amount)- (SUM(Receipt_Amount)+sum(scholarship))=0 THEN 'Paid' when (SUM(Receipt_Amount)+sum(scholarship))=0 THEN " +
                                     " 'Pending' ELSE 'Partial' END) as feestatus   , max(FeeDate) FeeDate ,max(Fee_Month) Fee_Month" +
                                     ",max(Due_Date1) as Due_Date," +
                                     "(to_char( convert_tz(to_date(max(overdue_dt),'" + sgen.Getsqldatetimeformat() + "'),'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')) as OverDue_Date ," +
                                     "(case when max(Receipt_Date) is null then to_char(utc_timestamp(),'dd-mm-yyyy') else to_char(max(Receipt_Date),'dd-mm-yyyy') end)" +
                                     " as Receipt_Date , max(HideDate) HideDate,Month_id,Month_name,max(Fee_Amount) Fee_Amount,FeeType_Id,Frequency_Id,FeeHead_Id" +
                                     ",max(FrequencyName) FrequencyName,max(FeeTypeName) FeeTypeName,max(HeadName) HeadName,cast( sum(Receipt_Amount)as decimal(18,2))" +
                                     " as Receipt_Amount,cast( sum(PaidAmount)as decimal(18,2)) as PaidAmount,max(IntialStatus) IntialStatus," +
                                     "round(DATEDIFF( (case when max(Receipt_Date) is null then utc_timestamp() else max(Receipt_Date) end), to_date(max(a.overdue_dt),'" + sgen.Getsqldatetimeformat() + "'))) as OverDays " +
                                     ",max(overdue_day) as overdue_day from (" + mq + ") a" +
                                     " GROUP by  Month_id,Month_name,FeeType_Id,Frequency_Id,FeeHead_Id,studenttype,Email_id,Phoneno," +
                                     "(FIRST_NAME || ' ' || replace(MIDDLE_NAME, '0', '') || ' ' || replace(LAST_NAME, '0', ''))";
                                //mq = "select a.*,nvl(b.femaleratio,'0) mordd from (" + mq + ") a left join master_setting b on lpad(b.section_strength,3,0)=a.month_id order by mordd";
                                string library = "0";
                                try
                                {
                                    string[] config = sgen.get_config(userCode, "000011", clientid_mst, unitid_mst, "CTL");
                                    library = config[0].ToString();
                                }
                                catch (Exception err) { }

                                if (sgen.GetSession(MyGuid, "Rpt_Menuid").ToString().Trim().Equals("16000.5.2"))
                                { mq = "select * from (" + mq + ") tab where HeadName='Library'"; }
                                else if (library == "N")
                                { mq = "select * from (" + mq + ") tab where HeadName!='Library'"; }
                                dt = new DataTable();
                                dt = sgen.getdata(userCode, mq);
                                DataTable dtmain = new DataTable();
                                dtmain = dt.Copy();
                                if (dt.Rows.Count > 0)
                                {
                                    string trnamt = "0";
                                    DataTable dttrn, dtmonths, dtthismonth = new DataTable();
                                    DataView dvv = dt.DefaultView;
                                    dtmonths = dvv.ToTable(true, "Month_name", "Month_id");
                                    try
                                    {
                                        string pickpoint = sgen.seekval_dt(userCode, dt.Select("paid<>'2'").CopyToDataTable(), "regnumber", RegNumber, "pick_point");
                                        string Droppoint = sgen.seekval_dt(userCode, dt.Select("paid<>'2'").CopyToDataTable(), "regnumber", RegNumber, "drop_point");
                                        //string Droppoint = sgen.seekval_dt(userCode, dt.Select("paid<>'2'").CopyToDataTable(), "FeeTypeName", "Transport", "drop_point");
                                        string mqt = "select  nvl(round(sum(Transamt)/2),0)  Transamt from (select  group_name as Transamt from master_setting where type='LCL' and" +
                                            "  client_unit_id='" + unitid_mst + "' and master_name='" + pickpoint + "'  and classid='" + Class_id + "' union all " +
                                            "select group_name as Transamt from master_setting where type = 'LCL' and client_unit_id" +
                                            " = '" + unitid_mst + "' and master_name = '" + Droppoint + "'  and classid = '" + Class_id + "') a";
                                        dttrn = sgen.getdata(userCode, mqt);
                                        trnamt = dttrn.Rows[0][0].ToString();
                                    }
                                    catch (Exception err)
                                    {
                                        dttrn = new DataTable();
                                    }
                                    DataTable dtfine = sgen.getdata(userCode, "select ref_code as class_id,col1 as finetype,col2 as finedays,col3 as fineamt,col4 as waveamt from enx_tab" +
                                                                       " where type='EFS' and client_unit_id='" + unitid_mst + "' and ref_code ='" + Class_id + "'");
                                    foreach (DataRow drm in dtmonths.Rows)
                                    {
                                        dvv = dt.DefaultView;
                                        dvv.RowFilter = "month_id='" + drm["Month_id"] + "'";
                                        dtthismonth = dvv.ToTable();
                                        String Fine_Amount = "0";
                                        string Wave_Amount = "0";
                                        string waveoffmonth = drm["Month_name"].ToString();
                                        #region Transport
                                        if (ssval.Trim().Equals("0"))
                                        {
                                            try
                                            {
                                                string havetrans = sgen.seekval_dt(userCode, dtthismonth, "FeeTypeName", "Transport", "havetransport");
                                                if (havetrans.ToLower().Trim() == "school")
                                                {
                                                    if ((dttrn.Rows.Count > 0) && (Convert.ToDecimal(dttrn.Rows[0]["Transamt"].ToString()) > 0))
                                                    {
                                                        int ind = sgen.seekval_dt_rowindex(dt, "month_id='" + drm["Month_id"] + "' and FeeTypeName ='Transport' and HeadName='Transport' ");
                                                        dt.Rows[ind - 1]["Fee_amount"] = dttrn.Rows[0]["Transamt"].ToString();
                                                        decimal pending = 0;
                                                        pending = Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"]) - (Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]) + Convert.ToDecimal(dt.Rows[ind - 1]["Paidamount"]));
                                                        if (pending == 0)
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Paid";
                                                        }
                                                        else
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Pending";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ViewBag.scripCall = "showmsgJS(1, 'Please Set Transport Fee In Master', 2);";
                                                        goto END;
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            { }
                                        }
                                        #endregion
                                        #region Fine
                                        //if (takefine)
                                        {
                                            int overdays = 0;
                                            try
                                            {
                                                overdays = Convert.ToInt32(dtthismonth.Compute("max([OverDays])", "HeadName<>'Fine'"));
                                            }
                                            catch { overdays = 0; }
                                            if (overdays > 0)
                                            {
                                                decimal totalfine = 0;
                                                decimal remdays = 0;
                                                decimal fineamt = 0;
                                                decimal waveamt = 0;
                                                decimal OverDays = overdays;
                                                decimal TotalfineDays = overdays;
                                                decimal totalwaveoff = 0;
                                                //Group
                                                remdays = OverDays;
                                                if (dtfine.Rows.Count > 0)
                                                {
                                                    if (dtfine.Rows[0]["finetype"].ToString() == "S")
                                                    {
                                                        for (int i = 0; i < dtfine.Rows.Count; i++)
                                                        {
                                                            fineamt = Convert.ToDecimal(dtfine.Rows[i]["fineamt"].ToString());
                                                            waveamt = Convert.ToDecimal(dtfine.Rows[i]["waveamt"].ToString());
                                                            if (Convert.ToDecimal(dtfine.Rows[i]["finedays"].ToString()) <= OverDays)
                                                            {
                                                                decimal finedayss = Convert.ToDecimal(dtfine.Rows[i]["finedays"].ToString());
                                                                OverDays = OverDays - finedayss;
                                                                totalfine = totalfine + (finedayss * fineamt);
                                                                totalwaveoff = totalwaveoff + (finedayss * waveamt);
                                                                if (OverDays <= 0) OverDays = 0;
                                                            }
                                                            else
                                                            {
                                                                totalfine = totalfine + (OverDays * fineamt);
                                                                totalwaveoff = totalwaveoff + (OverDays * waveamt);
                                                                break;
                                                            }
                                                        }
                                                        if (OverDays > 0) totalfine = totalfine + (OverDays * fineamt);
                                                        if (OverDays > 0) totalwaveoff = totalwaveoff + (OverDays * waveamt);
                                                        Fine_Amount = totalfine.ToString();
                                                        Wave_Amount = totalwaveoff.ToString();
                                                        // dtf.Rows[y]["fstr"]  = dtf.Rows[y]["fstr"]+"__"+ totalfine.ToString();
                                                    }
                                                    else
                                                    {
                                                        decimal cnum = 0, lnum = 0;
                                                        for (int i = 0; i < dtfine.Rows.Count; i++)
                                                        {
                                                            fineamt = sgen.Make_decimal(dtfine.Rows[i]["fineamt"].ToString());
                                                            waveamt = Convert.ToDecimal(dtfine.Rows[i]["waveamt"].ToString());
                                                            cnum = sgen.Make_decimal(dtfine.Rows[i]["finedays"].ToString());
                                                            if (overdays >= lnum && overdays <= cnum)
                                                            {
                                                                totalfine = totalfine + (OverDays * fineamt);
                                                                totalwaveoff = totalwaveoff + (OverDays * waveamt);
                                                                break;
                                                            }
                                                            else { lnum = cnum; }
                                                        }
                                                        if (OverDays > 0)
                                                        {
                                                            totalfine = totalfine + (TotalfineDays * fineamt);
                                                            totalwaveoff = totalwaveoff + (TotalfineDays * waveamt);
                                                        };
                                                        Fine_Amount = totalfine.ToString();
                                                        Wave_Amount = totalwaveoff.ToString();
                                                    }
                                                }
                                            }
                                            if (Convert.ToDecimal(Fine_Amount) > 0)
                                            {
                                                string waveoff = "0";
                                                waveoff = sgen.seekval(userCode, "select col6 as waveoffamt from enx_tab WHERE type='EFW' and col5='" + dtGrpdetail.Rows[y]["RegNumber"].ToString() + "' and col2='" + drm["Month_name"] + "' and client_unit_id='" + unitid_mst + "'", "waveoffamt");
                                                if (Convert.ToDecimal(waveoff) > 0)
                                                {
                                                    Wave_Amount = (Convert.ToDecimal(Wave_Amount) + Convert.ToDecimal(waveoff)).ToString();
                                                }
                                                int ind = sgen.seekval_dt_rowindex(dt, "month_id='" + drm["Month_id"] + "' and FeeTypeName ='Fine' and HeadName='Fine' ");
                                                try
                                                {
                                                    if (takefine)
                                                    {
                                                        dt.Rows[ind - 1]["Fee_Amount"] = Fine_Amount;
                                                    }
                                                    else
                                                    {
                                                        dt.Rows[ind - 1]["Fee_Amount"] = Convert.ToDecimal(dt.Rows[ind - 1]["paidamount"]) + Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]);
                                                        //dt.Rows[ind - 1]["Fee_Amount"] = Convert.ToDecimal(dt.Rows[ind - 1]["paidamount"]) + Convert.ToDecimal(dt.Rows[ind - 1]["scholarship"]);
                                                    }
                                                    if (dt.Rows[ind - 1]["Paid"].ToString() != "2")
                                                    {
                                                        if (takefine)
                                                        {
                                                            dt.Rows[ind - 1]["Scholarship"] = Wave_Amount;
                                                            dt.Rows[ind - 1]["Feestatus"] = "Pending";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        decimal pendingfine = 0;
                                                        // pendingfine = Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"]) - Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]);
                                                        pendingfine = (Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"])) - ((Convert.ToDecimal(dt.Rows[ind - 1]["paidamount"])) + Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]));
                                                        //if (takefine)
                                                        //{
                                                        //    pendingfine = Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"]) - Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]);
                                                        //}
                                                        //else
                                                        //{
                                                        //    pendingfine = (Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"])) - ((Convert.ToDecimal(dt.Rows[ind - 1]["paidamount"])) + Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]));
                                                        //}
                                                        if (pendingfine == 0)
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Paid";
                                                        }
                                                        else
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Pending";
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                { }
                                            }
                                        }
                                        #endregion
                                    }
                                    DataTable dtalllbl = dt;
                                    if (y == 0)
                                    {
                                        lbldt = dt.Clone();
                                    }
                                    lbldt.Merge(dtalllbl);
                                    DataTable dtstatuswise = new DataTable();
                                    sgen.SetSession(MyGuid, "DTALL", null);
                                    Int16 k = 0;
                                    Int32 Val = sgen.Make_int(tm.Col22);
                                    switch (Val)
                                    {
                                        case 1:
                                            try
                                            {
                                                if (stdstatus != "active")
                                                {
                                                    //dtstatuswise = dt.AsEnumerable().Where(w => ((decimal)w["Fee_Amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0) && (DateTime)w["due_date"] <= mydate)
                                                    //                                                                       .Select(s => s).CopyToDataTable();
                                                    //dtstatuswise = dt.AsEnumerable().Where(w => (decimal)w["Fee_Amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0 && (DateTime)w["due_date"] <= mydate)
                                                    //                       .Select(s => s).CopyToDataTable();
                                                    dtstatuswise = dt.AsEnumerable().Where(w => (DateTime)w["due_date"] <= mydate)
                                                                                 .Select(s => s).OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                }
                                                else
                                                {
                                                    dtstatuswise = dt.AsEnumerable().Where(w => (decimal)w["Fee_Amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0)
                                                        .OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                dtstatuswise = null;
                                            }
                                            break;
                                        case 2:
                                            try
                                            {
                                                dtstatuswise = dt.Copy();
                                                DataTable dtmonly = new DataTable();
                                                dtmonly.Columns.Add("month_id", typeof(string));
                                                dtmonly.Columns.Add("month_name", typeof(string));
                                                dtmonly.Columns.Add("fee_month", typeof(string));
                                                dtmonly.Columns.Add("feeDate", typeof(string));
                                                dtmonly.Columns.Add("HideDate", typeof(string));
                                                dtmonly.Columns.Add("fee_amount", typeof(decimal));
                                                dtmonly.Columns.Add("scholarship", typeof(decimal));
                                                dtmonly.Columns.Add("paidamount", typeof(decimal));
                                                dtmonly.Columns.Add("balamount", typeof(decimal));
                                                var newDt = dtstatuswise.AsEnumerable().GroupBy(r => new
                                                {
                                                    id = r.Field<string>("month_id"),
                                                    month_name = r.Field<string>("month_name"),
                                                    fee_month = r.Field<string>("fee_month"),
                                                    feedate = r.Field<string>("feeDate"),
                                                    hidename = r.Field<string>("HideDate")
                                                }).Select(g =>
                                                {
                                                    var row = dtmonly.NewRow();
                                                    // row["Id"] = g.Key;
                                                    row["fee_amount"] = g.Sum(r => r.Field<decimal>("fee_amount"));
                                                    row["scholarship"] = g.Sum(r => r.Field<decimal>("scholarship"));
                                                    row["paidamount"] = g.Sum(r => r.Field<decimal>("paidamount"));
                                                    row["balamount"] = g.Sum(r => r.Field<decimal>("fee_amount")) - (g.Sum(r => r.Field<decimal>("scholarship")) + g.Sum(r => r.Field<decimal>("paidamount")));
                                                    row["month_id"] = g.Key.id;
                                                    row["fee_month"] = g.Key.fee_month;
                                                    row["feeDate"] = g.Key.feedate;
                                                    row["month_name"] = g.Key.month_name;
                                                    row["HideDate"] = g.Key.hidename;
                                                    return row;
                                                });
                                                var fdt = newDt.Where(w => ((decimal)w["fee_amount"] != (decimal)w["balamount"])).Where(w => (decimal)w["fee_amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0)
                                                    .OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                String result = fdt.AsEnumerable()
                                         .Select(row => row["HideDate"].ToString())
                                         .Aggregate((s1, s2) => String.Concat(s1, "','" + s2));
                                                DataView dv = dtstatuswise.DefaultView;
                                                dv.RowFilter = "HideDate in ('" + result + "')";
                                                dtstatuswise = dv.ToTable();
                                            }
                                            catch (Exception ex)
                                            {
                                                dtstatuswise = null;
                                            }//1 result
                                            break;
                                        case 3:
                                            try
                                            {
                                                DateTime abcd = new DateTime(mydate.Year, mydate.Month, 1).AddMonths(1).AddDays(-1);
                                                //dtstatuswise = dt.AsEnumerable().Where(w => new DateTime(Convert.ToInt16((string)w["HideDate"].ToString().Split('/')[2]),
                                                //Convert.ToInt16((string)w["HideDate"].ToString().Split('/')[1]),
                                                //Convert.ToInt16((string)w["HideDate"].ToString().Split('/')[0])) > abcd)
                                                //                         .Select(s => s).CopyToDataTable();
                                                dtstatuswise = dt.AsEnumerable().Where(w => (DateTime)w["due_date"] > mydate)
                                                                         .Select(s => s).CopyToDataTable();
                                                DataTable dtmonly = new DataTable();
                                                dtmonly.Columns.Add("month_id", typeof(string));
                                                dtmonly.Columns.Add("month_name", typeof(string));
                                                dtmonly.Columns.Add("fee_month", typeof(string));
                                                dtmonly.Columns.Add("feeDate", typeof(string));
                                                dtmonly.Columns.Add("HideDate", typeof(string));
                                                dtmonly.Columns.Add("fee_amount", typeof(decimal));
                                                dtmonly.Columns.Add("scholarship", typeof(decimal));
                                                dtmonly.Columns.Add("paidamount", typeof(decimal));
                                                dtmonly.Columns.Add("balamount", typeof(decimal));
                                                var newDt = dtstatuswise.AsEnumerable().GroupBy(r => new
                                                {
                                                    id = r.Field<string>("month_id"),
                                                    month_name = r.Field<string>("month_name"),
                                                    fee_month = r.Field<string>("fee_month"),
                                                    feedate = r.Field<string>("feeDate"),
                                                    hidename = r.Field<string>("HideDate")
                                                }).Select(g =>
                                                {
                                                    var row = dtmonly.NewRow();
                                                    // row["Id"] = g.Key;
                                                    row["fee_amount"] = g.Sum(r => r.Field<decimal>("fee_amount"));
                                                    row["scholarship"] = g.Sum(r => r.Field<decimal>("scholarship"));
                                                    row["paidamount"] = g.Sum(r => r.Field<decimal>("paidamount"));
                                                    //row["receipt_amount"] = g.Sum(r => r.Field<decimal>("receipt_amount"));
                                                    row["balamount"] = g.Sum(r => r.Field<decimal>("fee_amount")) - (g.Sum(r => r.Field<decimal>("scholarship")) + g.Sum(r => r.Field<decimal>("paidamount")));
                                                    row["month_id"] = g.Key.id;
                                                    row["fee_month"] = g.Key.fee_month;
                                                    row["feeDate"] = g.Key.feedate;
                                                    row["month_name"] = g.Key.month_name;
                                                    row["HideDate"] = g.Key.hidename;
                                                    return row;
                                                }).Where(w => (decimal)w["balamount"] > 0).Where(w => (decimal)w["fee_amount"] > 0 || (decimal)w["Scholarship"] > 0 || (decimal)w["paidamount"] > 0)
                                                .OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                String result = newDt.AsEnumerable()
                                         .Select(row => row["HideDate"].ToString())
                                         .Aggregate((s1, s2) => String.Concat(s1, "','" + s2));
                                                DataView dv = dtstatuswise.DefaultView;
                                                dv.RowFilter = "HideDate in ('" + result + "')";
                                                dtstatuswise = dv.ToTable();
                                            }
                                            catch (Exception ex)
                                            {
                                                dtstatuswise = null;
                                            }
                                            break;
                                        default:
                                            try
                                            {
                                                DateTime abcd = new DateTime(mydate.Year, mydate.Month, 1).AddMonths(1).AddDays(-1);
                                                dtstatuswise = dt.AsEnumerable().Where(w => (DateTime)w["due_date"] <= mydate)
                                                                         .Select(s => s).CopyToDataTable();
                                                DataTable dtmonly = new DataTable();
                                                dtmonly.Columns.Add("month_id", typeof(string));
                                                dtmonly.Columns.Add("month_name", typeof(string));
                                                dtmonly.Columns.Add("fee_month", typeof(string));
                                                dtmonly.Columns.Add("feeDate", typeof(string));
                                                dtmonly.Columns.Add("HideDate", typeof(string));
                                                dtmonly.Columns.Add("fee_amount", typeof(decimal));
                                                dtmonly.Columns.Add("scholarship", typeof(decimal));
                                                dtmonly.Columns.Add("paidamount", typeof(decimal));
                                                dtmonly.Columns.Add("balamount", typeof(decimal));
                                                dtmonly.Columns.Add("due_date", typeof(DateTime));
                                                var newDt = dtstatuswise.AsEnumerable().GroupBy(r => new
                                                {
                                                    id = r.Field<string>("month_id"),
                                                    month_name = r.Field<string>("month_name"),
                                                    fee_month = r.Field<string>("fee_month"),
                                                    feedate = r.Field<string>("feeDate"),
                                                    hidename = r.Field<string>("HideDate"),
                                                    due_date = r.Field<DateTime>("due_date")
                                                }).Select(g =>
                                                {
                                                    var row = dtmonly.NewRow();
                                                    // row["Id"] = g.Key;
                                                    row["fee_amount"] = g.Sum(r => r.Field<decimal>("fee_amount"));
                                                    row["scholarship"] = g.Sum(r => r.Field<decimal>("scholarship"));
                                                    row["paidamount"] = g.Sum(r => r.Field<decimal>("paidamount"));
                                                    row["balamount"] = g.Sum(r => r.Field<decimal>("fee_amount")) - (g.Sum(r => r.Field<decimal>("scholarship")) + g.Sum(r => r.Field<decimal>("paidamount")));
                                                    row["month_id"] = g.Key.id;
                                                    row["fee_month"] = g.Key.fee_month;
                                                    row["feeDate"] = g.Key.feedate;
                                                    row["month_name"] = g.Key.month_name;
                                                    row["HideDate"] = g.Key.hidename;
                                                    row["due_date"] = g.Key.due_date;
                                                    return row;
                                                }).Where(w => (decimal)w["balamount"] != 0);
                                                //var datat = newDt.Where(w => (decimal)w["fee_amount"] > 0 && (DateTime)w["due_date"] <= mydate).CopyToDataTable();
                                                var datat = newDt.Where(w => (decimal)w["fee_amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0)
                                                    .OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                //dtstatuswise = datat;
                                                String result = newDt.AsEnumerable()
                                         .Select(row => row["HideDate"].ToString())
                                         .Aggregate((s1, s2) => String.Concat(s1, "','" + s2));
                                                DataView dv = dtstatuswise.DefaultView;
                                                dv.RowFilter = "HideDate in ('" + result + "')";
                                                dtstatuswise = dv.ToTable();
                                                dtstatuswise = dtstatuswise.AsEnumerable().Where(w => (DateTime)w["due_date"] <= mydate).CopyToDataTable();
                                            }
                                            catch (Exception ex)
                                            {
                                                dtstatuswise = null;
                                            }
                                            break;
                                    }
                                    tm.Col59 = "";
                                    if (dtstatuswise != null)
                                    {
                                        tm.Col59 = dtstatuswise.Rows[0]["studenttype"].ToString();
                                        tm.Col60 = dtstatuswise.Rows[0]["phoneno"].ToString();
                                        dtstatuswise = dtstatuswise.AsEnumerable().Where(w => (decimal)w["Fee_Amount"] > 0 || (decimal)w["receipt_Amount"] > 0)
                                                                       .Select(s => s).CopyToDataTable();
                                        if ((dt.Rows.Count > 0))
                                        {
                                            var newDt = dtstatuswise.AsEnumerable().GroupBy(r => new
                                            {
                                                id = r.Field<string>("month_id"),
                                                month_name = r.Field<string>("month_name"),
                                                fee_month = r.Field<string>("fee_month"),
                                                feedate = r.Field<string>("feeDate"),
                                                hidename = r.Field<string>("HideDate"),
                                                grpid = r.Field<string>("grpid"),
                                                student_id = r.Field<string>("student_id"),
                                                rollno = r.Field<string>("rollno"),
                                                section_id = r.Field<string>("section_id"),
                                                RegNumber = r.Field<string>("RegNumber"),
                                                Class_id = r.Field<string>("Class_id"),
                                            }).Select(g =>
                                            {
                                                var row = dt.NewRow();
                                                // row["Id"] = g.Key;
                                                row["fee_amount"] = g.Sum(r => r.Field<Decimal>("fee_amount"));
                                                row["scholarship"] = g.Sum(r => r.Field<Decimal>("scholarship"));
                                                row["paidAmount"] = g.Sum(r => r.Field<Decimal>("paidAmount"));
                                                row["month_id"] = g.Key.id;
                                                row["fee_month"] = g.Key.fee_month;
                                                row["feeDate"] = g.Key.feedate;
                                                row["month_name"] = g.Key.month_name;
                                                row["HideDate"] = g.Key.hidename;
                                                row["grpid"] = g.Key.grpid;
                                                row["student_id"] = g.Key.student_id;
                                                row["rollno"] = g.Key.rollno;
                                                row["section_id"] = g.Key.section_id;
                                                row["RegNumber"] = g.Key.RegNumber;
                                                row["Class_id"] = g.Key.Class_id;
                                                row["Email_Id"] = g.Key.Class_id;
                                                row["PhoneNo"] = g.Key.Class_id;
                                                return row;
                                            }).CopyToDataTable();
                                            var newdtgrp = dtstatuswise.AsEnumerable().GroupBy(r => new
                                            {
                                                id = r.Field<string>("stdname"),
                                                grpid = r.Field<string>("grpid"),
                                                student_id = r.Field<string>("student_id"),
                                                rollno = r.Field<string>("rollno"),
                                                section_id = r.Field<string>("section_id"),
                                                RegNumber = r.Field<string>("RegNumber"),
                                                Class_id = r.Field<string>("Class_id"),
                                                classsection = r.Field<string>("classsection"),
                                                Email_Id = r.Field<string>("Email_Id"),
                                                PhoneNo = r.Field<string>("PhoneNo")
                                            }).Select(g =>
                                            {
                                                var row = dt.NewRow();
                                                // row["Id"] = g.Key;
                                                row["fee_amount"] = g.Sum(r => r.Field<Decimal>("fee_amount"));
                                                row["scholarship"] = g.Sum(r => r.Field<Decimal>("scholarship"));
                                                row["paidAmount"] = g.Sum(r => r.Field<Decimal>("paidAmount"));
                                                row["month_id"] = g.Key.id;
                                                row["grpid"] = g.Key.grpid;
                                                row["student_id"] = g.Key.student_id;
                                                row["rollno"] = g.Key.rollno;
                                                row["section_id"] = g.Key.section_id;
                                                row["RegNumber"] = g.Key.RegNumber;
                                                row["Class_id"] = g.Key.Class_id;
                                                row["classsection"] = g.Key.classsection;
                                                row["Email_Id"] = g.Key.Email_Id;
                                                row["PhoneNo"] = g.Key.PhoneNo;
                                                return row;
                                            }).CopyToDataTable();
                                            DataTable dt2 = newDt;
                                            DataView dv = dt2.DefaultView;
                                            dv.Sort = "feeDate";
                                            DataTable sortedDT = dv.ToTable();
                                            if (y == 0)
                                            {
                                                grpdt = sortedDT.Clone();
                                                grpdada = newdtgrp.Clone();
                                                grpdtstatus = dtstatuswise.Clone();
                                            }
                                            grpdt.Merge(sortedDT);
                                            grpdada.Merge(newdtgrp);
                                            grpdtstatus.Merge(dtstatuswise);
                                        }
                                    }
                                    if (grpdt.Rows.Count > 0)
                                    {
                                        String[] L1 = new string[] { "" };
                                        tm.SelectedItems1 = L1;
                                    }
                                }
                            }
                            grpdada.Columns.Add("Txt_Receipt_amt", typeof(string));
                            grpdada.Columns.Add("lbl_Status_Pending", typeof(string));
                            grpdada.Columns.Add("lbl_scholarshiptype", typeof(string));
                            grpdada.Columns.Add("lbl_Bal_Due_Amount", typeof(string));
                            grpdada.Columns.Add("Txt_Refno", typeof(string));
                            grpdada.Columns.Add("lbl_hideamt", typeof(string));
                            List<Tmodelmain> LTM1 = new List<Tmodelmain>();
                            foreach (DataRow drg in grpdada.Rows)
                            {
                                Tmodelmain ltm1 = new Tmodelmain();
                                ltm1.Col1 = drg["Month_id"].ToString();
                                ltm1.Col2 = drg["grpid"].ToString();
                                ltm1.Col3 = drg["student_id"].ToString();
                                ltm1.Col4 = drg["rollno"].ToString();
                                ltm1.Col5 = drg["section_id"].ToString();
                                ltm1.Col6 = drg["Class_id"].ToString();
                                ltm1.Col7 = drg["RegNumber"].ToString();
                                ltm1.Col8 = drg["lbl_Status_Pending"].ToString();
                                ltm1.Col9 = drg["lbl_scholarshiptype"].ToString();
                                ltm1.Col10 = drg["Fee_Amount"].ToString();
                                ltm1.Col11 = drg["Scholarship"].ToString();
                                ltm1.Col12 = drg["PaidAmount"].ToString();
                                ltm1.Col13 = (sgen.Make_decimal(drg["Fee_Amount"].ToString()) - (sgen.Make_decimal(drg["PaidAmount"].ToString()) + sgen.Make_decimal(drg["Scholarship"].ToString()))).ToString();
                                if ((tm.Col14 != "7019.08"))
                                {
                                    if (sgen.Make_decimal(ltm1.Col13.ToString()) < 0)
                                    {
                                        ltm1.Col13 = "0";
                                    }
                                }
                                ltm1.Col14 = ltm1.Col13.ToString();
                                ltm1.Col15 = "0";
                                ltm1.Col16 = drg["Txt_Refno"].ToString();
                                ltm1.Col17 = drg["lbl_hideamt"].ToString();
                                ltm1.Col18 = drg["classsection"].ToString(); ;
                                ltm1.Col60 = drg["Email_Id"].ToString(); ;
                                ltm1.Col61 = drg["PhoneNo"].ToString(); ;
                                var dtmonth = grpdt.AsEnumerable().Where(w => (string)w["Regnumber"] == drg["RegNumber"].ToString())
                                                          .Select(s => s).CopyToDataTable();
                                dtmonth.Columns.Add("lbl_Status_Pending", typeof(string));
                                dtmonth.Columns.Add("lbl_scholarshiptype", typeof(string));
                                dtmonth.Columns.Add("Txt_Receipt_amt", typeof(string));
                                dtmonth.Columns.Add("lbl_Bal_Due_Amount", typeof(string));
                                dtmonth.Columns.Add("Txt_Refno", typeof(string));
                                dtmonth.Columns.Add("lbl_hideamt", typeof(string));
                                List<Tmodelmain> LTM2 = new List<Tmodelmain>();
                                foreach (DataRow drp in dtmonth.Rows)
                                {
                                    Tmodelmain ltm2 = new Tmodelmain();
                                    ltm2.Col1 = drp["Month_id"].ToString();
                                    ltm2.Col2 = drp["Month_name"].ToString();
                                    ltm2.Col3 = drp["Fee_Month"].ToString();
                                    ltm2.Col4 = drp["lbl_Status_Pending"].ToString();
                                    ltm2.Col5 = drp["lbl_scholarshiptype"].ToString();
                                    ltm2.Col6 = drp["grpid"].ToString();
                                    ltm2.Col7 = drp["student_id"].ToString();
                                    ltm2.Col8 = drp["rollno"].ToString();
                                    ltm2.Col9 = drp["section_id"].ToString();
                                    ltm2.Col10 = drp["Class_id"].ToString();
                                    ltm2.Col11 = drp["RegNumber"].ToString();
                                    ltm2.Col12 = drp["Fee_Amount"].ToString();
                                    ltm2.Col13 = drp["Scholarship"].ToString();
                                    ltm2.Col14 = drp["PaidAmount"].ToString();
                                    ltm2.Col15 = (sgen.Make_decimal(drp["Fee_Amount"].ToString()) - (sgen.Make_decimal(drp["PaidAmount"].ToString()) + sgen.Make_decimal(drp["Scholarship"].ToString()))).ToString();
                                    if ((tm.Col45 != "7019.08"))
                                    {
                                        if (sgen.Make_decimal(ltm2.Col15.ToString()) < 0)
                                        {
                                            ltm2.Col15 = "0";
                                        }
                                    }
                                    ltm2.Col16 = drp["Txt_Receipt_amt"].ToString();
                                    ltm2.Col17 = drp["lbl_Bal_Due_Amount"].ToString();
                                    ltm2.Col18 = drp["Txt_Refno"].ToString();
                                    ltm2.Col19 = drp["lbl_hideamt"].ToString();
                                    DataTable dthead = grpdtstatus.AsEnumerable().Where(w => (string)w["month_id"] == drp["Month_id"].ToString()
                                    && (string)w["regnumber"] == drp["RegNumber"].ToString() && (string)w["class_id"] == drp["Class_id"].ToString()
                                    && (string)w["section_id"] == drp["section_id"].ToString() && (string)w["HideDate"] == drp["HideDate"].ToString()).Select(s => s).CopyToDataTable();
                                    //1 result
                                    dthead.Columns.Add("lbl_Status_Detail", typeof(string));
                                    dthead.Columns.Add("Txt_Receipt", typeof(string));
                                    dthead.Columns.Add("lbl_Chequeno", typeof(string));
                                    dthead.Columns.Add("Txt_payment", typeof(string));
                                    dthead.Columns.Add("chk_payment", typeof(string));
                                    List<Tmodelmain> LTM3 = new List<Tmodelmain>();
                                    if (dthead.Rows.Count > 0)
                                    {
                                        DataView dv = dthead.DefaultView;
                                        dv.Sort = "HeadName desc ";
                                        dthead = dv.ToTable();
                                    }
                                    foreach (DataRow drc in dthead.Rows)
                                    {
                                        Tmodelmain ltm3 = new Tmodelmain();
                                        ltm3.Col1 = drc["Frequency_Id"].ToString();
                                        ltm3.Col2 = drc["lbl_Status_Detail"].ToString();
                                        ltm3.Col3 = drc["month_id"].ToString();
                                        ltm3.Col4 = drc["FrequencyName"].ToString();
                                        ltm3.Col5 = drc["IntialStatus"].ToString();
                                        ltm3.Col6 = drc["Scholarship_id"].ToString();
                                        ltm3.Col7 = drc["grpid"].ToString();
                                        ltm3.Col8 = drc["student_id"].ToString();
                                        ltm3.Col9 = drc["rollno"].ToString();
                                        ltm3.Col10 = drc["section_id"].ToString();
                                        ltm3.Col11 = drc["Class_id"].ToString();
                                        ltm3.Col12 = drc["RegNumber"].ToString();
                                        ltm3.Col13 = drc["FeeType_Id"].ToString();
                                        ltm3.Col14 = drc["FeeTypeName"].ToString();
                                        ltm3.Col15 = drc["FeeHead_Id"].ToString();
                                        ltm3.Col16 = drc["HeadName"].ToString();
                                        ltm3.Col17 = DateTime.Parse(drc["Due_Date"].ToString()).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                                        ltm3.Col18 = drc["Fee_Amount"].ToString();
                                        ltm3.Col19 = drc["Scholarship"].ToString();
                                        ltm3.Col20 = drc["PaidAmount"].ToString();
                                        ltm3.Col21 = (sgen.Make_decimal(drc["Fee_Amount"].ToString()) - (sgen.Make_decimal(drc["PaidAmount"].ToString()) + sgen.Make_decimal(drc["Scholarship"].ToString()))).ToString();
                                        if ((tm.Col15 != "7019.08"))
                                        {
                                            if (sgen.Make_decimal(ltm3.Col21.ToString()) < 0)
                                            {
                                                ltm3.Col21 = "0";
                                            }
                                        }
                                        ltm3.Col22 = drc["Txt_Receipt"].ToString();
                                        ltm3.Col23 = drc["lbl_Chequeno"].ToString();
                                        ltm3.Col24 = drc["Txt_payment"].ToString();
                                        ltm3.Col25 = drc["chk_payment"].ToString();
                                        ltm3.Col26 = drc["overdue_Date"].ToString();
                                        LTM3.Add(ltm3);
                                    }
                                    ltm2.LTM1 = LTM3;
                                    LTM2.Add(ltm2);
                                }
                                ltm1.LTM1 = LTM2;
                                LTM1.Add(ltm1);
                            }
                            tm.LTM1 = LTM1;
                            tm.dt3 = grpdtstatus;
                            tm.dt2 = grpdt;
                            tm.dt1 = grpdada;
                            try
                            {
                                model[0].Col25 = "0";
                                model[0].Col26 = "0";
                                var dtgrpto = grpdada.AsEnumerable().GroupBy(r => new
                                {
                                }).Select(g =>
                                {
                                    var row = grpdada.NewRow();
                                    // row["Id"] = g.Key;
                                    row["fee_amount"] = g.Sum(r => r.Field<Decimal>("fee_amount"));
                                    row["paidamount"] = g.Sum(r => r.Field<Decimal>("paidamount"));
                                    row["scholarship"] = g.Sum(r => r.Field<Decimal>("scholarship"));
                                    return row;
                                }).CopyToDataTable();
                                if (model[0].Col50 == "N" && model[0].Col14 == "7019.8")
                                {
                                    model[0].Col25 = (Convert.ToDecimal(dtgrpto.Rows[0]["PaidAmount"].ToString())).ToString();
                                }
                                else if (model[0].Col50 == "N" && model[0].Col14 == "7019.11")
                                {
                                    model[0].Col25 = (Convert.ToDecimal(dtgrpto.Rows[0]["scholarship"].ToString())).ToString();
                                }
                                else if (model[0].Col50 == "P")
                                {
                                    model[0].Col25 = (Convert.ToDecimal(dtgrpto.Rows[0]["fee_amount"].ToString()) - (Convert.ToDecimal(dtgrpto.Rows[0]["scholarship"].ToString()) + Convert.ToDecimal(dtgrpto.Rows[0]["paidamount"].ToString()))).ToString();
                                }
                                if (sgen.Make_decimal(model[0].Col25) < 0)
                                {
                                    model[0].Col25 = "0";
                                }
                                model[0].Col26 = model[0].Col25;
                                sgen.SetSession(MyGuid, "FeeGroup", dtgrpto);
                            }
                            catch (Exception ex)
                            {
                            }
                            #region FillLabels
                            try
                            {
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "G")
                                {
                                    tm.Col16 = dtGrpdetail.Rows[0]["sibling1_rollno"].ToString();
                                }
                                else
                                {
                                    tm.Col16 = dtGrpdetail.Rows[0]["regnumber"].ToString();
                                }
                                string finee = "0";
                                string paidfinee = "";
                                tm.Col16 = dtGrpdetail.Rows[0]["sibling1_rollno"].ToString();
                                tm.Col28 = Convert.ToDecimal((lbldt.Compute("Sum([PaidAmount])", "HeadName<>'Fine'"))).ToString();
                                tm.Col29 = Convert.ToDecimal((lbldt.Compute("Sum([scholarship])", "HeadName<>'Fine'"))).ToString();
                                tm.Col32 = sgen.Make_decimal(lbldt.Compute("Sum([scholarship])", "HeadName='Fine'").ToString()).ToString();
                                if (tm.Col29 == "")
                                {
                                    tm.Col29 = "0";
                                }
                                tm.Col56 = Convert.ToString(Convert.ToDecimal(tm.Col29) + Convert.ToDecimal(tm.Col32));
                                DateTime abcd = new DateTime(mydate.Year, mydate.Month, 1).AddMonths(1).AddDays(-1);
                                DataTable dtlable = new DataTable();
                                try
                                {
                                    //dtlable = lbldt.AsEnumerable().Where(w => (string)w["feestatus"] != "Paid" &&
                                    //       (DateTime)w["due_date"] <= mydate)
                                    //                                .Select(s => s).CopyToDataTable();
                                    dtlable = lbldt.AsEnumerable().Where(w => (string)w["feestatus"] != "Paid" &&
                                          (DateTime)w["due_date"] <= mydate)
                                                                   .Select(s => s).CopyToDataTable();
                                    //fees due// col30
                                    //Fine Concession// col32
                                    //Fine due// col33
                                    tm.Col30 = sgen.Make_decimal((dtlable.Compute("Sum([Fee_Amount])-sum(receipt_amount)", "HeadName<>'Fine'")).ToString()).ToString();
                                    //tm.Col30 = sgen.Make_decimal((dtlable.Compute("Sum([Fee_Amount])-sum(paidamount)", "HeadName<>'Fine'")).ToString()).ToString();
                                    finee = sgen.Make_decimal((dtlable.Compute("Sum([Fee_Amount])-sum(receipt_amount)", "HeadName='Fine'")).ToString()).ToString();
                                    // finee = sgen.Make_decimal((dtlable.Compute("Sum([Fee_Amount])-sum(paidamount)", "HeadName='Fine'")).ToString()).ToString();
                                    //finee = (sgen.Make_decimal(finee) - sgen.Make_decimal(tm.Col32)).ToString();
                                }
                                catch (Exception ex)
                                { }
                                tm.Col33 = finee;
                                tm.Col37 = "0";//Fees Not Due
                                tm.Col34 = "0";//Total Amount Inc. Fine
                                tm.Col57 = "0";
                                tm.Col35 = "0";
                                tm.Col36 = "0";
                                tm.Col31 = "0";
                                //tm.Col30 = "0";
                                try
                                {
                                    dtlable = lbldt.AsEnumerable().Where(w => (string)w["feestatus"] != "Paid" && (decimal)w["Fee_Amount"] > 0 &&
                                           (DateTime)w["due_date"] > mydate)
                                                                    .Select(s => s).CopyToDataTable(); //1 result
                                    tm.Col37 = sgen.Make_decimal(dtlable.Compute("Sum([Fee_Amount]) - sum(receipt_amount)", "HeadName<>'Fine'").ToString()).ToString();
                                }
                                catch (Exception ex)
                                { }
                                try
                                {
                                    //Fine Receipt
                                    tm.Col31 = sgen.Make_decimal(lbldt.Compute("Sum([PaidAmount])", "HeadName='Fine'").ToString()).ToString();
                                }
                                catch (Exception ex)
                                { }
                                ///==============================
                                tm.Col34 = ((Convert.ToDecimal(tm.Col28) + Convert.ToDecimal(tm.Col30) + Convert.ToDecimal(tm.Col33) + Convert.ToDecimal(tm.Col37) + Convert.ToDecimal(tm.Col31)) + Convert.ToDecimal(tm.Col29) + Convert.ToDecimal(tm.Col32)).ToString();
                                tm.Col57 = ((Convert.ToDecimal(tm.Col28) + Convert.ToDecimal(tm.Col30) + Convert.ToDecimal(tm.Col37)) + Convert.ToDecimal(tm.Col29)).ToString();
                                tm.Col35 = (sgen.Make_decimal(tm.Col28) + sgen.Make_decimal(tm.Col31)).ToString();
                                tm.Col36 = (sgen.Make_decimal(tm.Col30) + sgen.Make_decimal(tm.Col33)).ToString();
                                tm.Col23 = "";
                                tm.Col55 = "0";
                                tm.Col27 = "";
                                model = new List<Tmodelmain>();
                                model.Add(tm);
                            }
                            catch (Exception ex) { }
                        #endregion
                        END:;
                            break;
                            //case "FORMAT":
                            //    mq = "select  master_name,client_name  from master_setting " +
                            //        "where concat(client_id,client_unit_id,master_id, date_format(vch_date, '%Y%m%d'),type)='" + URL + "'";
                            //    DataTable dtf = sgen.getdata(userCode, mq);
                            //    if (dtf.Rows.Count > 0)
                            //    {
                            //        model[0].Col38 = dtf.Rows[0]["master_name"].ToString();
                            //        model[0].Col39 = dtf.Rows[0]["client_name"].ToString();
                            //        model[0].Col40 = "concat(client_id, client_unit_id, master_id, date_format(vch_date, '%Y%m%d'), type) = '" + URL + "'";
                            //    }
                            //    break;
                    }
                    break;

                case "fee_receipt_new":
                    switch (btnval.ToUpper())
                    {
                        case "REG":
                            string xnumber = "", xfstr = "", Receipt_Number = "", classsection = "";
                            DataTable grpdt = new DataTable();
                            DataTable grpdada = new DataTable();
                            DataTable grpdtstatus = new DataTable();
                            DataTable lbldt = new DataTable();

                            //DateTime mydate = sgen.server_datetime_dt(userCode);
                            //string mydatee = model[0].Col18;
                            //DateTime mydate = Convert.ToDateTime(mydatee);                          

                            DateTime mydate = sgen.Make_date(model[0].Col18);//08042020

                            var takefine = model[0].Col62 == "Y" ? true : false;
                            List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                            tm = model.FirstOrDefault();
                            if (!sgen.GetSession(MyGuid, "RFeeType").Equals(null))
                            {
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "G")
                                {
                                    xfstr = "and (b.client_id||b.client_unit_id||b.type||a.sibling1_rollno)='" + URL + "'";
                                    tm.Col53 = "Family Group Registration No.";
                                    tm.Col54 = "Family Group Total Due Fees";
                                }
                                else if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "S")
                                {
                                    xfstr = "and (b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)='" + URL + "'";
                                    if (tm.Col14 != "7019.8" || tm.Col14 != "7019.11")
                                    {
                                        tm.Col53 = "Registration No.";
                                        tm.Col54 = "Total Due Fees";
                                    }
                                }
                                else if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "A")
                                {
                                    xfstr = "and (b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)='" + URL + "'";
                                    if (tm.Col14 == "7019.2")
                                    {
                                        tm.Col53 = "Temp Student No.";
                                        tm.Col54 = "Total Due Fees";
                                    }
                                }
                                tm.Col52 = sgen.GetSession(MyGuid, "RFeeType").ToString();
                            }
                            if (tm.Col14 == "7019.2") // admission fee receipt
                            {
                                // reena callback done
                                //                mq = " SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.sa_id,a.class_applied,c.Class as Class_Name, (first_name||' '||Replace(middle_name,'0','')||' '||" +
                                //"Replace(last_name,'0','')) AS Student_Name,(replace(a.f_firstname,'0','')||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') ) as Father_Name" +
                                //                mq = " SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.sa_id,a.class_applied,c.Class as Class_Name, first_name||' '||Replace(middle_name,'0','')||' '||" +
                                //"Replace(last_name,'0','') AS Student_Name,(a.f_firstname||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') ) as Father_Name" +
                                //",a.Gender,'-' as section, a.sa_id as RegNumber,a.Vch_num ,'-' as a_i_date,'active' as status, a.sa_id as RollNo,a.sa_id as sibling1_rollno FROM student_applicant_details a," +
                                //"add_class c WHERE uSESSION='" + Ac_Year_id + "' and c.add_class_id=a.class_applied  and c.client_unit_id='" + unitid_mst + "' " +
                                //"and a.student_status='temporary'  and a.client_unit_id='" + unitid_mst + "' and  " +
                                //"  (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type)='" + URL + "'";

                                mq = " SELECT a.sa_id,a.class_applied,c.Class as Class_Name,'-' as section, a.sa_id as RegNumber,a.Vch_num ,'-' as a_i_date,'active' as status, a.sa_id as RollNo,a.sa_id as sibling1_rollno FROM student_applicant_details a," +
             "add_class c WHERE uSESSION='" + Ac_Year_id + "' and c.add_class_id=a.class_applied  and c.client_unit_id='" + unitid_mst + "' " +
             "and a.student_status='temporary'  and a.client_unit_id='" + unitid_mst + "' and  " +
             "  (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type)='" + URL + "'";
                            }
                            else

                            {
                                //mq = "select b.class_applied,nvl(b.section,'-') as section,b.vch_num, a.sibling1_rollno,(e.FIRST_NAME||' '||replace(e.MIDDLE_NAME,'0','')||' '||replace(e.LAST_NAME,'0','')) as Family_Group_Name," +
                                //                               "c.Class as class_name,  nvl(d.master_name,'-') as Section_name, (a.FIRST_NAME||''||replace(a.MIDDLE_NAME,'0','')||' '||replace(a.LAST_NAME,'0','')) as Student_Name," +                                                              
                                //                               "(a.f_firstname||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') ) as Father_Name " +
                                //                               " ,a.GENDER as Gender,a.RegNo,a.RegNumber,nvl(b.RollNo,'0') as RollNo,nvl(b.Roll_number,'-') as Roll_Number ,a.a_i_date,a.Status from student_detail b " +
                                //                             "inner join user_details a on b.reg_no=a.regnumber and a.type=b.type  and a.vch_num=b.vch_num  " +
                                //                             "inner join add_class c on b.class_applied=c.add_class_id and c.type='EAC'  and b.client_unit_id=c.client_unit_id  " +
                                //                             "left join master_setting d on b.section =d.master_id and d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                                //                             " inner join user_details e on a.sibling1_rollno=e.regnumber   and e.type=b.type and e.client_unit_id='" + unitid_mst + "' WHERE b.type='STD'" +
                                //                             "  and b.client_unit_id='" + unitid_mst + "' and b.Academic_year_Id='" + Ac_Year_id + "' " + xfstr + " order by a.sibling1_rollno  ";

                                mq = "select b.class_applied,nvl(b.section,'-') as section,b.vch_num, a.sibling1_rollno," +
                                                               "c.Class as class_name,  nvl(d.master_name,'-') as Section_name ,a.RegNumber,nvl(b.RollNo,'0') as RollNo ,a.a_i_date,a.Status from student_detail b " +
                                                             "inner join user_details a on b.reg_no=a.regnumber and a.type=b.type  and a.vch_num=b.vch_num  " +
                                                             "inner join add_class c on b.class_applied=c.add_class_id and c.type='EAC'  and b.client_unit_id=c.client_unit_id  " +
                                                             "left join master_setting d on b.section =d.master_id and d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                                                             " inner join user_details e on a.sibling1_rollno=e.regnumber   and e.type=b.type and e.client_unit_id='" + unitid_mst + "' WHERE b.type='STD'" +
                                                             "  and b.client_unit_id='" + unitid_mst + "' and b.Academic_year_Id='" + Ac_Year_id + "' " + xfstr + " order by a.sibling1_rollno  ";
                            }
                            DataTable dtGrpdetail = new DataTable();
                            string att_status_F = "", att_status_S = "";
                            dtGrpdetail = sgen.getdata(userCode, mq);
                            Boolean IsRegNoChange = false;
                            for (Int32 y = 0; y < dtGrpdetail.Rows.Count; y++)
                            {
                                string regcond = "";
                                string Class_id = dtGrpdetail.Rows[y]["class_applied"].ToString();
                                string Section_id = dtGrpdetail.Rows[y]["section"].ToString();
                                string RollNo = dtGrpdetail.Rows[y]["RollNo"].ToString();
                                string RegNumber = dtGrpdetail.Rows[y]["RegNumber"].ToString();
                                string Student_id = dtGrpdetail.Rows[y]["Vch_num"].ToString();
                                string inactivedt = dtGrpdetail.Rows[y]["a_i_date"].ToString();
                                string stdstatus = dtGrpdetail.Rows[y]["status"].ToString();
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "A")
                                {
                                    classsection = dtGrpdetail.Rows[y]["class_name"].ToString();
                                }
                                else
                                {
                                    classsection = dtGrpdetail.Rows[y]["class_name"].ToString() + '-' + dtGrpdetail.Rows[y]["section_name"].ToString();
                                }
                                string ssval = sgen.seekval(userCode, "select regno from fees_detail where class_id='" + Class_id + "'  and  type='STD' and " +
                                    "Academic_year_Id='" + Ac_Year_id + "' and regno='" + RegNumber + "' and client_unit_id='" + unitid_mst + "'", "regno");
                                if (ssval.Trim().Equals("0"))
                                {
                                    regcond = " class_id = '" + Class_id + "'  and type = 'STR' and " +
        "Academic_year_Id='" + Ac_Year_id + "' and client_unit_id='" + unitid_mst + "' " +
        " and (case when (feetype_id||feehead_id)='001001' or  fee_amount>0 then 1 else   to_number(due_date) end )>0";
                                }
                                else
                                {

                                    regcond = " class_id='" + Class_id + "'  and  type='STD' and " +
                                     "Academic_year_Id='" + Ac_Year_id + "' and regno='" + RegNumber + "' and client_unit_id='" + unitid_mst + "' " +
                                     " and (case when (feetype_id||feehead_id)='001001' or  fee_amount>0 then  1 else   to_number(due_date) end )>0";
                                }
                                if (stdstatus != "active")
                                {
                                    // mydate = Convert.ToDateTime(inactivedt);
                                    mydate = sgen.Make_date(inactivedt);//08042020
                                }
                                string edicond = "type = 'EDI' and Academic_year_Id='" + Ac_Year_id + "' and regno='" + RegNumber + "'  and client_unit_id='" + unitid_mst + "'";
                                mq = sgen.vw_fees_new(regcond, edicond) + " where RegNumber = '" + RegNumber + "' order by due_dt";
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "A")
                                {
                                    edicond = "type = 'EDI' and Academic_year_Id='" + Ac_Year_id + "' and regno='" + RegNumber + "'  and client_unit_id='" + unitid_mst + "'";
                                    regcond = regcond + "  and   feetype_id=005";
                                    mq = sgen.vw_fees_Adm(regcond, edicond) + " where sa_id = " + RegNumber + " order by due_dt";
                                }
                                string mq2 = "";

                                string mq1 = "select trim(studenttype) studenttype, trim(FIRST_NAME) FIRST_NAME, trim(MIDDLE_NAME) MIDDLE_NAME, trim(LAST_NAME) LAST_NAME ," +
                                    " trim(RegNumber) RegNumber, '0' as paid, trim(Scholarship_id) Scholarship_id,  scholarship , trim(feestatus) feestatus, FeeDate,Fee_Month,null as Receipt_Date" +
                                    ",Due_Date1,to_char(overdue_dt,'" + sgen.Getsqldatetimeformat() + "') overdue_dt ,HideDate,trim(Month_id) Month_id,trim(Month_name) Month_name" +
                                    ",Fee_Amount,trim(FeeType_Id) FeeType_Id,trim(Frequency_Id) Frequency_Id,trim(FeeHead_Id) FeeHead_Id ,trim(FrequencyName) FrequencyName" +
                                    ",trim(FeeTypeName) FeeTypeName,trim(HeadName) HeadName,Receipt_Amount,PaidAmount,IntialStatus,trim(havetransport) havetransport," +
                                    "trim(pick_point) pick_point,trim(drop_point) drop_point,trim(Email_id) Email_id, trim(Phoneno) Phoneno,due_date as due_day," +
                                    "overdue_date as overdue_day from (" + mq + ") a";
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "A")
                                {
                                    // reena when this query will run (for aadmission fees only)
                                    mq2 = "select trim(ud.std_type) as studenttype, trim(ud.FIRST_NAME) FIRST_NAME, trim(ud.MIDDLE_NAME)MIDDLE_NAME, " +
                                        "trim(ud.LAST_NAME)LAST_NAME, trim(a.RegNo) as  RegNumber, '2' as paid , null as Scholarship_id,  " +
                                   "(case when a.type in ('ERC','ERW') then Receipt_Amount else 0.00 end) as scholarship, '-' as feestatus,'' as FeeDate,'-' as Fee_Month," +
                                   "a.vch_date as Receipt_Date, a.DueDt as Due_Date1,'' as overdue_dt,'-' as HideDate ,trim(a.Month_id) Month_id,trim(a.Month_name)Month_name," +
                                   " 0 as Fee_Amount,trim(a.Fee_type_id) as FeeType_Id,trim(a.Frequency_Id)Frequency_Id,trim(a.Fee_Head_id) as FeeHead_Id" +
                                   ",'Monthly' as FrequencyName,trim(st.FeeTypeName) FeeTypeName, trim(ms.master_name) as HeadName, Receipt_Amount ," +
                                   "(case when a.type = ('ERD') then Receipt_Amount else 0.00 end) as PaidAmount,'Y' as IntialStatus,'0' as havetransport,'0' as pick_point," +
                                   "'0' as drop_point,(CASE WHEN ud.default_emailid='F' THEN ud.f_email WHEN ud.default_emailid='M' THEN ud.m_email else ud.g_email END)" +
                                   " as Email_Id ,(CASE WHEN ud.default_Ph='F' THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number else ud.g_con_number END) as " +
                                   "PhoneNo ,0 as due_day,0 as overdue_day " +
                                   " from student_receipt_detail a inner join student_applicant_details  ud on  ud.sa_id= a.Student_id and ud.type='STD'" +
                                   " and a.client_unit_id=ud.client_unit_id inner join school_fee_type st on st.FeeType_Id = a.Fee_Type_Id " +
                                   "  and st.client_unit_id = a.client_unit_id and(st.master_type = '' or st.master_type = '0') " +
                                   "  inner join master_setting ms  on (a.fee_type_id|| a.Fee_Head_Id)=(ms.sectionid||ms.master_id) and ms.type = 'EFH' " +
                                   "and find_in_set(a.client_unit_id,ms.client_unit_id )=1 and ms.master_type = 'Education Fees Head'" +
                                   " where  a.type in ('ERD','ERC','ERW')  and  a.client_unit_id = '" + unitid_mst + "' " +
                                   "and a.academic_year_id='" + Ac_Year_id + "' and a.student_id =" + RegNumber + " and a.regno='0'";
                                }
                                else
                                {

                                    mq2 = "select sd.studenttype, ud.FIRST_NAME, ud.MIDDLE_NAME, ud.LAST_NAME, a.RegNo as  RegNumber, '2' as paid , null as Scholarship_id,  " +
                                       "(case when a.type in ('ERC','ERW') then Receipt_Amount else 0.00 end) as scholarship, '-' as feestatus,(to_char(a.DueDt,'yyyymm')||'01') as FeeDate,('01/'|| to_char(a.DueDt, 'mm/yyyy')) as Fee_Month," +
                                       "a.vch_date as Receipt_Date, a.DueDt as Due_Date1, to_char(Last_Day(a.DueDt), '" + sgen.Getsqldatetimeformat() + "') as overdue_dt,to_char(Last_Day(a.DueDt), '" + sgen.Getsqldateformat() + "') as HideDate  ,a.Month_id,a.Month_name, 0 as Fee_Amount,a.Fee_type_id as FeeType_Id," +
                                       "a.Frequency_Id,a.Fee_Head_id as FeeHead_Id,'Monthly' as FrequencyName,st.FeeTypeName, ms.master_name as HeadName, Receipt_Amount ," +
                                       "(case when a.type  in ('ERD') then Receipt_Amount else 0.00 end) as   PaidAmount,'Y' as IntialStatus,'0' as havetransport,'0' as pick_point," +
                                       "'0' as drop_point,(CASE WHEN ud.default_emailid='F' THEN ud.f_email WHEN ud.default_emailid='M' THEN ud.m_email else ud.g_email END)" +
                                       " as Email_Id ,(CASE WHEN ud.default_Ph='F' THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number else ud.g_con_number END) as " +
                                       "PhoneNo ,0 as due_day,0 as overdue_day " +
                                       " from student_receipt_detail a inner join student_detail sd on sd.reg_no=a.regno and sd.client_unit_id='" + unitid_mst + "' and sd.academic_year_id='" + Ac_Year_id + "'  inner join user_details ud on ud.vch_num =sd.vch_num and   ud.RegNumber= a.RegNo and ud.type='STD' and ud.client_unit_id=a.client_unit_id inner join school_fee_type st" +
            " on st.FeeType_Id = a.Fee_Type_Id   and st.client_unit_id = a.client_unit_id and(st.master_type = ''" +
            " or st.master_type = '0')   inner join master_setting ms  on (a.fee_type_id|| a.Fee_Head_Id)=(ms.sectionid||ms.master_id) and ms.type = 'EFH' " +
            " and find_in_set(a.client_unit_id,ms.client_unit_id)=1 and ms.master_type = 'Education Fees Head' where  a.type in ('ERD','ERC','ERW')   and a.client_unit_id = '" + unitid_mst + "' " +
                                       "and a.academic_year_id='" + Ac_Year_id + "' and a.regNo ='" + RegNumber + "' and a.class_id='" + Class_id + "'";
                                }
                                mq = mq1 + " union all " + mq2;

                                mq = "select studenttype, Email_id, Phoneno , '" + classsection + "' as classsection, max(havetransport) havetransport,max(pick_point) pick_point,max(drop_point) drop_point, '" + dtGrpdetail.Rows[y]["Vch_num"].ToString() + "' as Student_id,'" + dtGrpdetail.Rows[y]["RegNumber"].ToString() + "' as RegNumber, " +
                                     "'" + dtGrpdetail.Rows[y]["class_applied"].ToString() + "' as Class_id,'" + dtGrpdetail.Rows[y]["section"].ToString() + "' as section_id,'" + dtGrpdetail.Rows[y]["RollNo"].ToString() +
                                     "' as rollno, (FIRST_NAME||' '||replace(MIDDLE_NAME,'0','')||' '||replace(LAST_NAME,'0','')) as stdname, " +
                                     "'" + dtGrpdetail.Rows[0]["sibling1_rollno"].ToString() + "' as grpid, max(paid) as paid, sum(Scholarship_id) as Scholarship_id,  sum(scholarship) scholarship " +
                                     ", (case when max(Fee_Amount)- (SUM(Receipt_Amount)+sum(scholarship))=0 THEN 'Paid' when (SUM(Receipt_Amount)+sum(scholarship))=0 THEN " +
                                     " 'Pending' ELSE 'Partial' END) as feestatus   , max(FeeDate) FeeDate ,max(Fee_Month) Fee_Month" +
                                     ",max(Due_Date1) as Due_Date," +
                                     "(to_char( convert_tz(to_date(max(overdue_dt),'" + sgen.Getsqldatetimeformat() + "'),'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')) as OverDue_Date ," +
                                     "(case when max(Receipt_Date) is null then to_char(utc_timestamp(),'dd-mm-yyyy') else to_char(max(Receipt_Date),'dd-mm-yyyy') end)" +
                                     " as Receipt_Date , max(HideDate) HideDate,Month_id,Month_name,max(Fee_Amount) Fee_Amount,FeeType_Id,Frequency_Id,FeeHead_Id" +
                                     ",max(FrequencyName) FrequencyName,max(FeeTypeName) FeeTypeName,max(HeadName) HeadName,cast( sum(Receipt_Amount)as decimal(18,2))" +
                                     " as Receipt_Amount,cast( sum(PaidAmount)as decimal(18,2)) as PaidAmount,max(IntialStatus) IntialStatus," +
                                     "round(DATEDIFF( (case when max(Receipt_Date) is null then utc_timestamp() else max(Receipt_Date) end), to_date(max(a.overdue_dt),'" + sgen.Getsqldatetimeformat() + "'))) as OverDays " +
                                     ",max(overdue_day) as overdue_day from (" + mq + ") a" +
                                     " GROUP by  Month_id,Month_name,FeeType_Id,Frequency_Id,FeeHead_Id,studenttype,Email_id,Phoneno," +
                                     "(FIRST_NAME || ' ' || replace(MIDDLE_NAME, '0', '') || ' ' || replace(LAST_NAME, '0', ''))";
                                //mq = "select a.*,nvl(b.femaleratio,'0) mordd from (" + mq + ") a left join master_setting b on lpad(b.section_strength,3,0)=a.month_id order by mordd";
                                string library = "0";
                                try
                                {
                                    string[] config = sgen.get_config(userCode, "000011", clientid_mst, unitid_mst, "CTL");
                                    library = config[0].ToString();
                                }
                                catch (Exception err) { }

                                if (sgen.GetSession(MyGuid, "Rpt_Menuid").ToString().Trim().Equals("16000.5.2"))
                                { mq = "select * from (" + mq + ") tab where HeadName='Library'"; }
                                else if (library == "N")
                                { mq = "select * from (" + mq + ") tab where HeadName!='Library'"; }
                                dt = new DataTable();
                                dt = sgen.getdata(userCode, mq);
                                DataTable dtmain = new DataTable();
                                dtmain = dt.Copy();
                                if (dt.Rows.Count > 0)
                                {
                                    string trnamt = "0";
                                    DataTable dttrn, dtmonths, dtthismonth = new DataTable();
                                    DataView dvv = dt.DefaultView;
                                    dtmonths = dvv.ToTable(true, "Month_name", "Month_id");
                                    try
                                    {
                                        string pickpoint = sgen.seekval_dt(userCode, dt.Select("paid<>'2'").CopyToDataTable(), "regnumber", RegNumber, "pick_point");
                                        string Droppoint = sgen.seekval_dt(userCode, dt.Select("paid<>'2'").CopyToDataTable(), "regnumber", RegNumber, "drop_point");
                                        //string Droppoint = sgen.seekval_dt(userCode, dt.Select("paid<>'2'").CopyToDataTable(), "FeeTypeName", "Transport", "drop_point");
                                        string mqt = "select  nvl(round(sum(Transamt)/2),0)  Transamt from (select  group_name as Transamt from master_setting where type='LCL' and" +
                                            "  client_unit_id='" + unitid_mst + "' and master_name='" + pickpoint + "'  and classid='" + Class_id + "' union all " +
                                            "select group_name as Transamt from master_setting where type = 'LCL' and client_unit_id" +
                                            " = '" + unitid_mst + "' and master_name = '" + Droppoint + "'  and classid = '" + Class_id + "') a";
                                        dttrn = sgen.getdata(userCode, mqt);
                                        trnamt = dttrn.Rows[0][0].ToString();
                                    }
                                    catch (Exception err)
                                    {
                                        dttrn = new DataTable();
                                    }
                                    DataTable dtfine = sgen.getdata(userCode, "select ref_code as class_id,col1 as finetype,col2 as finedays,col3 as fineamt,col4 as waveamt from enx_tab" +
                                                                       " where type='EFS' and client_unit_id='" + unitid_mst + "' and ref_code ='" + Class_id + "'");
                                    foreach (DataRow drm in dtmonths.Rows)
                                    {
                                        dvv = dt.DefaultView;
                                        dvv.RowFilter = "month_id='" + drm["Month_id"] + "'";
                                        dtthismonth = dvv.ToTable();
                                        String Fine_Amount = "0";
                                        string Wave_Amount = "0";
                                        string waveoffmonth = drm["Month_name"].ToString();
                                        #region Transport
                                        if (ssval.Trim().Equals("0"))
                                        {
                                            try
                                            {
                                                string havetrans = sgen.seekval_dt(userCode, dtthismonth, "FeeTypeName", "Transport", "havetransport");
                                                if (havetrans.ToLower().Trim() == "school")
                                                {
                                                    if ((dttrn.Rows.Count > 0) && (Convert.ToDecimal(dttrn.Rows[0]["Transamt"].ToString()) > 0))
                                                    {
                                                        int ind = sgen.seekval_dt_rowindex(dt, "month_id='" + drm["Month_id"] + "' and FeeTypeName ='Transport' and HeadName='Transport' ");
                                                        dt.Rows[ind - 1]["Fee_amount"] = dttrn.Rows[0]["Transamt"].ToString();
                                                        decimal pending = 0;
                                                        pending = Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"]) - (Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]) + Convert.ToDecimal(dt.Rows[ind - 1]["Paidamount"]));
                                                        if (pending == 0)
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Paid";
                                                        }
                                                        else
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Pending";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ViewBag.scripCall = "showmsgJS(1, 'Please Set Transport Fee In Master', 2);";
                                                        goto END;
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            { }
                                        }
                                        #endregion
                                        #region Fine
                                        //if (takefine)
                                        {
                                            int overdays = 0;
                                            try
                                            {
                                                overdays = Convert.ToInt32(dtthismonth.Compute("max([OverDays])", "HeadName<>'Fine'"));
                                            }
                                            catch { overdays = 0; }
                                            if (overdays > 0)
                                            {
                                                decimal totalfine = 0;
                                                decimal remdays = 0;
                                                decimal fineamt = 0;
                                                decimal waveamt = 0;
                                                decimal OverDays = overdays;
                                                decimal TotalfineDays = overdays;
                                                decimal totalwaveoff = 0;
                                                //Group
                                                remdays = OverDays;
                                                if (dtfine.Rows.Count > 0)
                                                {
                                                    if (dtfine.Rows[0]["finetype"].ToString() == "S")
                                                    {
                                                        for (int i = 0; i < dtfine.Rows.Count; i++)
                                                        {
                                                            fineamt = Convert.ToDecimal(dtfine.Rows[i]["fineamt"].ToString());
                                                            waveamt = Convert.ToDecimal(dtfine.Rows[i]["waveamt"].ToString());
                                                            if (Convert.ToDecimal(dtfine.Rows[i]["finedays"].ToString()) <= OverDays)
                                                            {
                                                                decimal finedayss = Convert.ToDecimal(dtfine.Rows[i]["finedays"].ToString());
                                                                OverDays = OverDays - finedayss;
                                                                totalfine = totalfine + (finedayss * fineamt);
                                                                totalwaveoff = totalwaveoff + (finedayss * waveamt);
                                                                if (OverDays <= 0) OverDays = 0;
                                                            }
                                                            else
                                                            {
                                                                totalfine = totalfine + (OverDays * fineamt);
                                                                totalwaveoff = totalwaveoff + (OverDays * waveamt);
                                                                break;
                                                            }
                                                        }
                                                        if (OverDays > 0) totalfine = totalfine + (OverDays * fineamt);
                                                        if (OverDays > 0) totalwaveoff = totalwaveoff + (OverDays * waveamt);
                                                        Fine_Amount = totalfine.ToString();
                                                        Wave_Amount = totalwaveoff.ToString();
                                                        // dtf.Rows[y]["fstr"]  = dtf.Rows[y]["fstr"]+"__"+ totalfine.ToString();
                                                    }
                                                    else
                                                    {
                                                        decimal cnum = 0, lnum = 0;
                                                        for (int i = 0; i < dtfine.Rows.Count; i++)
                                                        {
                                                            fineamt = sgen.Make_decimal(dtfine.Rows[i]["fineamt"].ToString());
                                                            waveamt = Convert.ToDecimal(dtfine.Rows[i]["waveamt"].ToString());
                                                            cnum = sgen.Make_decimal(dtfine.Rows[i]["finedays"].ToString());
                                                            if (overdays >= lnum && overdays <= cnum)
                                                            {
                                                                totalfine = totalfine + (OverDays * fineamt);
                                                                totalwaveoff = totalwaveoff + (OverDays * waveamt);
                                                                break;
                                                            }
                                                            else { lnum = cnum; }
                                                        }
                                                        if (OverDays > 0)
                                                        {
                                                            totalfine = totalfine + (TotalfineDays * fineamt);
                                                            totalwaveoff = totalwaveoff + (TotalfineDays * waveamt);
                                                        };
                                                        Fine_Amount = totalfine.ToString();
                                                        Wave_Amount = totalwaveoff.ToString();
                                                    }
                                                }
                                            }
                                            if (Convert.ToDecimal(Fine_Amount) > 0)
                                            {
                                                string waveoff = "0";
                                                waveoff = sgen.seekval(userCode, "select col6 as waveoffamt from enx_tab WHERE type='EFW' and col5='" + dtGrpdetail.Rows[y]["RegNumber"].ToString() + "' and col2='" + drm["Month_name"] + "' and client_unit_id='" + unitid_mst + "'", "waveoffamt");
                                                if (Convert.ToDecimal(waveoff) > 0)
                                                {
                                                    Wave_Amount = (Convert.ToDecimal(Wave_Amount) + Convert.ToDecimal(waveoff)).ToString();
                                                }
                                                int ind = sgen.seekval_dt_rowindex(dt, "month_id='" + drm["Month_id"] + "' and FeeTypeName ='Fine' and HeadName='Fine' ");
                                                try
                                                {
                                                    if (takefine)
                                                    {
                                                        dt.Rows[ind - 1]["Fee_Amount"] = Fine_Amount;
                                                    }
                                                    else
                                                    {
                                                        dt.Rows[ind - 1]["Fee_Amount"] = Convert.ToDecimal(dt.Rows[ind - 1]["paidamount"]) + Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]);
                                                        //dt.Rows[ind - 1]["Fee_Amount"] = Convert.ToDecimal(dt.Rows[ind - 1]["paidamount"]) + Convert.ToDecimal(dt.Rows[ind - 1]["scholarship"]);
                                                    }
                                                    if (dt.Rows[ind - 1]["Paid"].ToString() != "2")
                                                    {
                                                        if (takefine)
                                                        {
                                                            dt.Rows[ind - 1]["Scholarship"] = Wave_Amount;
                                                            dt.Rows[ind - 1]["Feestatus"] = "Pending";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        decimal pendingfine = 0;
                                                        // pendingfine = Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"]) - Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]);
                                                        pendingfine = (Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"])) - ((Convert.ToDecimal(dt.Rows[ind - 1]["paidamount"])) + Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]));
                                                        //if (takefine)
                                                        //{
                                                        //    pendingfine = Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"]) - Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]);
                                                        //}
                                                        //else
                                                        //{
                                                        //    pendingfine = (Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"])) - ((Convert.ToDecimal(dt.Rows[ind - 1]["paidamount"])) + Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]));
                                                        //}
                                                        if (pendingfine == 0)
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Paid";
                                                        }
                                                        else
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Pending";
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                { }
                                            }
                                        }
                                        #endregion
                                    }
                                    DataTable dtalllbl = dt;
                                    if (y == 0)
                                    {
                                        lbldt = dt.Clone();
                                    }
                                    lbldt.Merge(dtalllbl);
                                    DataTable dtstatuswise = new DataTable();
                                    sgen.SetSession(MyGuid, "DTALL", null);
                                    Int16 k = 0;
                                    Int32 Val = sgen.Make_int(tm.Col22);
                                    switch (Val)
                                    {
                                        case 1:
                                            try
                                            {
                                                if (stdstatus != "active")
                                                {
                                                    //dtstatuswise = dt.AsEnumerable().Where(w => ((decimal)w["Fee_Amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0) && (DateTime)w["due_date"] <= mydate)
                                                    //                                                                       .Select(s => s).CopyToDataTable();
                                                    //dtstatuswise = dt.AsEnumerable().Where(w => (decimal)w["Fee_Amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0 && (DateTime)w["due_date"] <= mydate)
                                                    //                       .Select(s => s).CopyToDataTable();
                                                    dtstatuswise = dt.AsEnumerable().Where(w => (DateTime)w["due_date"] <= mydate)
                                                                                 .Select(s => s).OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                }
                                                else
                                                {
                                                    dtstatuswise = dt.AsEnumerable().Where(w => (decimal)w["Fee_Amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0)
                                                        .OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                dtstatuswise = null;
                                            }
                                            break;
                                        case 2:
                                            try
                                            {
                                                dtstatuswise = dt.Copy();
                                                DataTable dtmonly = new DataTable();
                                                dtmonly.Columns.Add("month_id", typeof(string));
                                                dtmonly.Columns.Add("month_name", typeof(string));
                                                dtmonly.Columns.Add("fee_month", typeof(string));
                                                dtmonly.Columns.Add("feeDate", typeof(string));
                                                dtmonly.Columns.Add("HideDate", typeof(string));
                                                dtmonly.Columns.Add("fee_amount", typeof(decimal));
                                                dtmonly.Columns.Add("scholarship", typeof(decimal));
                                                dtmonly.Columns.Add("paidamount", typeof(decimal));
                                                dtmonly.Columns.Add("balamount", typeof(decimal));
                                                var newDt = dtstatuswise.AsEnumerable().GroupBy(r => new
                                                {
                                                    id = r.Field<string>("month_id"),
                                                    month_name = r.Field<string>("month_name"),
                                                    fee_month = r.Field<string>("fee_month"),
                                                    feedate = r.Field<string>("feeDate"),
                                                    hidename = r.Field<string>("HideDate")
                                                }).Select(g =>
                                                {
                                                    var row = dtmonly.NewRow();
                                                    // row["Id"] = g.Key;
                                                    row["fee_amount"] = g.Sum(r => r.Field<decimal>("fee_amount"));
                                                    row["scholarship"] = g.Sum(r => r.Field<decimal>("scholarship"));
                                                    row["paidamount"] = g.Sum(r => r.Field<decimal>("paidamount"));
                                                    row["balamount"] = g.Sum(r => r.Field<decimal>("fee_amount")) - (g.Sum(r => r.Field<decimal>("scholarship")) + g.Sum(r => r.Field<decimal>("paidamount")));
                                                    row["month_id"] = g.Key.id;
                                                    row["fee_month"] = g.Key.fee_month;
                                                    row["feeDate"] = g.Key.feedate;
                                                    row["month_name"] = g.Key.month_name;
                                                    row["HideDate"] = g.Key.hidename;
                                                    return row;
                                                });
                                                var fdt = newDt.Where(w => ((decimal)w["fee_amount"] != (decimal)w["balamount"])).Where(w => (decimal)w["fee_amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0)
                                                    .OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                String result = fdt.AsEnumerable()
                                         .Select(row => row["HideDate"].ToString())
                                         .Aggregate((s1, s2) => String.Concat(s1, "','" + s2));
                                                DataView dv = dtstatuswise.DefaultView;
                                                dv.RowFilter = "HideDate in ('" + result + "')";
                                                dtstatuswise = dv.ToTable();
                                            }
                                            catch (Exception ex)
                                            {
                                                dtstatuswise = null;
                                            }//1 result
                                            break;
                                        case 3:
                                            try
                                            {
                                                DateTime abcd = new DateTime(mydate.Year, mydate.Month, 1).AddMonths(1).AddDays(-1);
                                                //dtstatuswise = dt.AsEnumerable().Where(w => new DateTime(Convert.ToInt16((string)w["HideDate"].ToString().Split('/')[2]),
                                                //Convert.ToInt16((string)w["HideDate"].ToString().Split('/')[1]),
                                                //Convert.ToInt16((string)w["HideDate"].ToString().Split('/')[0])) > abcd)
                                                //                         .Select(s => s).CopyToDataTable();
                                                dtstatuswise = dt.AsEnumerable().Where(w => (DateTime)w["due_date"] > mydate)
                                                                         .Select(s => s).CopyToDataTable();
                                                DataTable dtmonly = new DataTable();
                                                dtmonly.Columns.Add("month_id", typeof(string));
                                                dtmonly.Columns.Add("month_name", typeof(string));
                                                dtmonly.Columns.Add("fee_month", typeof(string));
                                                dtmonly.Columns.Add("feeDate", typeof(string));
                                                dtmonly.Columns.Add("HideDate", typeof(string));
                                                dtmonly.Columns.Add("fee_amount", typeof(decimal));
                                                dtmonly.Columns.Add("scholarship", typeof(decimal));
                                                dtmonly.Columns.Add("paidamount", typeof(decimal));
                                                dtmonly.Columns.Add("balamount", typeof(decimal));
                                                var newDt = dtstatuswise.AsEnumerable().GroupBy(r => new
                                                {
                                                    id = r.Field<string>("month_id"),
                                                    month_name = r.Field<string>("month_name"),
                                                    fee_month = r.Field<string>("fee_month"),
                                                    feedate = r.Field<string>("feeDate"),
                                                    hidename = r.Field<string>("HideDate")
                                                }).Select(g =>
                                                {
                                                    var row = dtmonly.NewRow();
                                                    // row["Id"] = g.Key;
                                                    row["fee_amount"] = g.Sum(r => r.Field<decimal>("fee_amount"));
                                                    row["scholarship"] = g.Sum(r => r.Field<decimal>("scholarship"));
                                                    row["paidamount"] = g.Sum(r => r.Field<decimal>("paidamount"));
                                                    //row["receipt_amount"] = g.Sum(r => r.Field<decimal>("receipt_amount"));
                                                    row["balamount"] = g.Sum(r => r.Field<decimal>("fee_amount")) - (g.Sum(r => r.Field<decimal>("scholarship")) + g.Sum(r => r.Field<decimal>("paidamount")));
                                                    row["month_id"] = g.Key.id;
                                                    row["fee_month"] = g.Key.fee_month;
                                                    row["feeDate"] = g.Key.feedate;
                                                    row["month_name"] = g.Key.month_name;
                                                    row["HideDate"] = g.Key.hidename;
                                                    return row;
                                                }).Where(w => (decimal)w["balamount"] > 0).Where(w => (decimal)w["fee_amount"] > 0 || (decimal)w["Scholarship"] > 0 || (decimal)w["paidamount"] > 0)
                                                .OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                String result = newDt.AsEnumerable()
                                         .Select(row => row["HideDate"].ToString())
                                         .Aggregate((s1, s2) => String.Concat(s1, "','" + s2));
                                                DataView dv = dtstatuswise.DefaultView;
                                                dv.RowFilter = "HideDate in ('" + result + "')";
                                                dtstatuswise = dv.ToTable();
                                            }
                                            catch (Exception ex)
                                            {
                                                dtstatuswise = null;
                                            }
                                            break;
                                        default:
                                            try
                                            {
                                                DateTime abcd = new DateTime(mydate.Year, mydate.Month, 1).AddMonths(1).AddDays(-1);
                                                dtstatuswise = dt.AsEnumerable().Where(w => (DateTime)w["due_date"] <= mydate)
                                                                         .Select(s => s).CopyToDataTable();
                                                DataTable dtmonly = new DataTable();
                                                dtmonly.Columns.Add("month_id", typeof(string));
                                                dtmonly.Columns.Add("month_name", typeof(string));
                                                dtmonly.Columns.Add("fee_month", typeof(string));
                                                dtmonly.Columns.Add("feeDate", typeof(string));
                                                dtmonly.Columns.Add("HideDate", typeof(string));
                                                dtmonly.Columns.Add("fee_amount", typeof(decimal));
                                                dtmonly.Columns.Add("scholarship", typeof(decimal));
                                                dtmonly.Columns.Add("paidamount", typeof(decimal));
                                                dtmonly.Columns.Add("balamount", typeof(decimal));
                                                dtmonly.Columns.Add("due_date", typeof(DateTime));
                                                var newDt = dtstatuswise.AsEnumerable().GroupBy(r => new
                                                {
                                                    id = r.Field<string>("month_id"),
                                                    month_name = r.Field<string>("month_name"),
                                                    fee_month = r.Field<string>("fee_month"),
                                                    feedate = r.Field<string>("feeDate"),
                                                    hidename = r.Field<string>("HideDate"),
                                                    due_date = r.Field<DateTime>("due_date")
                                                }).Select(g =>
                                                {
                                                    var row = dtmonly.NewRow();
                                                    // row["Id"] = g.Key;
                                                    row["fee_amount"] = g.Sum(r => r.Field<decimal>("fee_amount"));
                                                    row["scholarship"] = g.Sum(r => r.Field<decimal>("scholarship"));
                                                    row["paidamount"] = g.Sum(r => r.Field<decimal>("paidamount"));
                                                    row["balamount"] = g.Sum(r => r.Field<decimal>("fee_amount")) - (g.Sum(r => r.Field<decimal>("scholarship")) + g.Sum(r => r.Field<decimal>("paidamount")));
                                                    row["month_id"] = g.Key.id;
                                                    row["fee_month"] = g.Key.fee_month;
                                                    row["feeDate"] = g.Key.feedate;
                                                    row["month_name"] = g.Key.month_name;
                                                    row["HideDate"] = g.Key.hidename;
                                                    row["due_date"] = g.Key.due_date;
                                                    return row;
                                                }).Where(w => (decimal)w["balamount"] != 0);
                                                //var datat = newDt.Where(w => (decimal)w["fee_amount"] > 0 && (DateTime)w["due_date"] <= mydate).CopyToDataTable();
                                                var datat = newDt.Where(w => (decimal)w["fee_amount"] > 0 || (decimal)w["paidamount"] > 0 || (decimal)w["Scholarship"] > 0)
                                                    .OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                                                //dtstatuswise = datat;
                                                String result = newDt.AsEnumerable()
                                         .Select(row => row["HideDate"].ToString())
                                         .Aggregate((s1, s2) => String.Concat(s1, "','" + s2));
                                                DataView dv = dtstatuswise.DefaultView;
                                                dv.RowFilter = "HideDate in ('" + result + "')";
                                                dtstatuswise = dv.ToTable();
                                                dtstatuswise = dtstatuswise.AsEnumerable().Where(w => (DateTime)w["due_date"] <= mydate).CopyToDataTable();
                                            }
                                            catch (Exception ex)
                                            {
                                                dtstatuswise = null;
                                            }
                                            break;
                                    }
                                    tm.Col59 = "";
                                    if (dtstatuswise != null)
                                    {
                                        tm.Col59 = dtstatuswise.Rows[0]["studenttype"].ToString();
                                        tm.Col60 = dtstatuswise.Rows[0]["phoneno"].ToString();
                                        dtstatuswise = dtstatuswise.AsEnumerable().Where(w => (decimal)w["Fee_Amount"] > 0 || (decimal)w["receipt_Amount"] > 0)
                                                                       .Select(s => s).CopyToDataTable();
                                        if ((dt.Rows.Count > 0))
                                        {
                                            var newDt = dtstatuswise.AsEnumerable().GroupBy(r => new
                                            {
                                                id = r.Field<string>("month_id"),
                                                month_name = r.Field<string>("month_name"),
                                                fee_month = r.Field<string>("fee_month"),
                                                feedate = r.Field<string>("feeDate"),
                                                hidename = r.Field<string>("HideDate"),
                                                grpid = r.Field<string>("grpid"),
                                                student_id = r.Field<string>("student_id"),
                                                rollno = r.Field<string>("rollno"),
                                                section_id = r.Field<string>("section_id"),
                                                RegNumber = r.Field<string>("RegNumber"),
                                                Class_id = r.Field<string>("Class_id"),
                                            }).Select(g =>
                                            {
                                                var row = dt.NewRow();
                                                // row["Id"] = g.Key;
                                                row["fee_amount"] = g.Sum(r => r.Field<Decimal>("fee_amount"));
                                                row["scholarship"] = g.Sum(r => r.Field<Decimal>("scholarship"));
                                                row["paidAmount"] = g.Sum(r => r.Field<Decimal>("paidAmount"));
                                                row["month_id"] = g.Key.id;
                                                row["fee_month"] = g.Key.fee_month;
                                                row["feeDate"] = g.Key.feedate;
                                                row["month_name"] = g.Key.month_name;
                                                row["HideDate"] = g.Key.hidename;
                                                row["grpid"] = g.Key.grpid;
                                                row["student_id"] = g.Key.student_id;
                                                row["rollno"] = g.Key.rollno;
                                                row["section_id"] = g.Key.section_id;
                                                row["RegNumber"] = g.Key.RegNumber;
                                                row["Class_id"] = g.Key.Class_id;
                                                row["Email_Id"] = g.Key.Class_id;
                                                row["PhoneNo"] = g.Key.Class_id;
                                                return row;
                                            }).CopyToDataTable();
                                            var newdtgrp = dtstatuswise.AsEnumerable().GroupBy(r => new
                                            {
                                                id = r.Field<string>("stdname"),
                                                grpid = r.Field<string>("grpid"),
                                                student_id = r.Field<string>("student_id"),
                                                rollno = r.Field<string>("rollno"),
                                                section_id = r.Field<string>("section_id"),
                                                RegNumber = r.Field<string>("RegNumber"),
                                                Class_id = r.Field<string>("Class_id"),
                                                classsection = r.Field<string>("classsection"),
                                                Email_Id = r.Field<string>("Email_Id"),
                                                PhoneNo = r.Field<string>("PhoneNo")
                                            }).Select(g =>
                                            {
                                                var row = dt.NewRow();
                                                // row["Id"] = g.Key;
                                                row["fee_amount"] = g.Sum(r => r.Field<Decimal>("fee_amount"));
                                                row["scholarship"] = g.Sum(r => r.Field<Decimal>("scholarship"));
                                                row["paidAmount"] = g.Sum(r => r.Field<Decimal>("paidAmount"));
                                                row["month_id"] = g.Key.id;
                                                row["grpid"] = g.Key.grpid;
                                                row["student_id"] = g.Key.student_id;
                                                row["rollno"] = g.Key.rollno;
                                                row["section_id"] = g.Key.section_id;
                                                row["RegNumber"] = g.Key.RegNumber;
                                                row["Class_id"] = g.Key.Class_id;
                                                row["classsection"] = g.Key.classsection;
                                                row["Email_Id"] = g.Key.Email_Id;
                                                row["PhoneNo"] = g.Key.PhoneNo;
                                                return row;
                                            }).CopyToDataTable();
                                            DataTable dt2 = newDt;
                                            DataView dv = dt2.DefaultView;
                                            dv.Sort = "feeDate";
                                            DataTable sortedDT = dv.ToTable();
                                            if (y == 0)
                                            {
                                                grpdt = sortedDT.Clone();
                                                grpdada = newdtgrp.Clone();
                                                grpdtstatus = dtstatuswise.Clone();
                                            }
                                            grpdt.Merge(sortedDT);
                                            grpdada.Merge(newdtgrp);
                                            grpdtstatus.Merge(dtstatuswise);
                                        }
                                    }
                                    if (grpdt.Rows.Count > 0)
                                    {
                                        String[] L1 = new string[] { "" };
                                        tm.SelectedItems1 = L1;
                                    }
                                }
                            }
                            grpdada.Columns.Add("Txt_Receipt_amt", typeof(string));
                            grpdada.Columns.Add("lbl_Status_Pending", typeof(string));
                            grpdada.Columns.Add("lbl_scholarshiptype", typeof(string));
                            grpdada.Columns.Add("lbl_Bal_Due_Amount", typeof(string));
                            grpdada.Columns.Add("Txt_Refno", typeof(string));
                            grpdada.Columns.Add("lbl_hideamt", typeof(string));
                            List<Tmodelmain> LTM1 = new List<Tmodelmain>();
                            foreach (DataRow drg in grpdada.Rows)
                            {
                                Tmodelmain ltm1 = new Tmodelmain();
                                ltm1.Col1 = drg["Month_id"].ToString();
                                ltm1.Col2 = drg["grpid"].ToString();
                                ltm1.Col3 = drg["student_id"].ToString();
                                ltm1.Col4 = drg["rollno"].ToString();
                                ltm1.Col5 = drg["section_id"].ToString();
                                ltm1.Col6 = drg["Class_id"].ToString();
                                ltm1.Col7 = drg["RegNumber"].ToString();
                                ltm1.Col8 = drg["lbl_Status_Pending"].ToString();
                                ltm1.Col9 = drg["lbl_scholarshiptype"].ToString();
                                ltm1.Col10 = drg["Fee_Amount"].ToString();
                                ltm1.Col11 = drg["Scholarship"].ToString();
                                ltm1.Col12 = drg["PaidAmount"].ToString();
                                ltm1.Col13 = (sgen.Make_decimal(drg["Fee_Amount"].ToString()) - (sgen.Make_decimal(drg["PaidAmount"].ToString()) + sgen.Make_decimal(drg["Scholarship"].ToString()))).ToString();
                                if ((tm.Col14 != "7019.08"))
                                {
                                    if (sgen.Make_decimal(ltm1.Col13.ToString()) < 0)
                                    {
                                        ltm1.Col13 = "0";
                                    }
                                }
                                ltm1.Col14 = ltm1.Col13.ToString();
                                ltm1.Col15 = "0";
                                ltm1.Col64 = "0";
                                ltm1.Col16 = drg["Txt_Refno"].ToString();
                                ltm1.Col17 = drg["lbl_hideamt"].ToString();
                                ltm1.Col18 = drg["classsection"].ToString(); ;
                                ltm1.Col60 = drg["Email_Id"].ToString(); ;
                                ltm1.Col61 = drg["PhoneNo"].ToString(); ;
                                var dtmonth = grpdt.AsEnumerable().Where(w => (string)w["Regnumber"] == drg["RegNumber"].ToString())
                                                          .Select(s => s).CopyToDataTable();
                                dtmonth.Columns.Add("lbl_Status_Pending", typeof(string));
                                dtmonth.Columns.Add("lbl_scholarshiptype", typeof(string));
                                dtmonth.Columns.Add("Txt_Receipt_amt", typeof(string));
                                dtmonth.Columns.Add("lbl_Bal_Due_Amount", typeof(string));
                                dtmonth.Columns.Add("Txt_Refno", typeof(string));
                                dtmonth.Columns.Add("lbl_hideamt", typeof(string));
                                List<Tmodelmain> LTM2 = new List<Tmodelmain>();
                                foreach (DataRow drp in dtmonth.Rows)
                                {
                                    Tmodelmain ltm2 = new Tmodelmain();
                                    ltm2.Col1 = drp["Month_id"].ToString();
                                    ltm2.Col2 = drp["Month_name"].ToString();
                                    ltm2.Col3 = drp["Fee_Month"].ToString();
                                    ltm2.Col4 = drp["lbl_Status_Pending"].ToString();
                                    ltm2.Col5 = drp["lbl_scholarshiptype"].ToString();
                                    ltm2.Col6 = drp["grpid"].ToString();
                                    ltm2.Col7 = drp["student_id"].ToString();
                                    ltm2.Col8 = drp["rollno"].ToString();
                                    ltm2.Col9 = drp["section_id"].ToString();
                                    ltm2.Col10 = drp["Class_id"].ToString();
                                    ltm2.Col11 = drp["RegNumber"].ToString();
                                    ltm2.Col12 = drp["Fee_Amount"].ToString();
                                    ltm2.Col13 = drp["Scholarship"].ToString();
                                    ltm2.Col14 = drp["PaidAmount"].ToString();
                                    ltm2.Col65 = "0";
                                    ltm2.Col15 = (sgen.Make_decimal(drp["Fee_Amount"].ToString()) - (sgen.Make_decimal(drp["PaidAmount"].ToString()) + sgen.Make_decimal(drp["Scholarship"].ToString()))).ToString();
                                    if ((tm.Col45 != "7019.08"))
                                    {
                                        if (sgen.Make_decimal(ltm2.Col15.ToString()) < 0)
                                        {
                                            ltm2.Col15 = "0";
                                        }
                                    }
                                    ltm2.Col16 = drp["Txt_Receipt_amt"].ToString();
                                    ltm2.Col17 = drp["lbl_Bal_Due_Amount"].ToString();
                                    ltm2.Col18 = drp["Txt_Refno"].ToString();
                                    ltm2.Col19 = drp["lbl_hideamt"].ToString();
                                    DataTable dthead = grpdtstatus.AsEnumerable().Where(w => (string)w["month_id"] == drp["Month_id"].ToString()
                                    && (string)w["regnumber"] == drp["RegNumber"].ToString() && (string)w["class_id"] == drp["Class_id"].ToString()
                                    && (string)w["section_id"] == drp["section_id"].ToString() && (string)w["HideDate"] == drp["HideDate"].ToString()).Select(s => s).CopyToDataTable();
                                    //1 result
                                    dthead.Columns.Add("lbl_Status_Detail", typeof(string));
                                    dthead.Columns.Add("Txt_Receipt", typeof(string));
                                    dthead.Columns.Add("lbl_Chequeno", typeof(string));
                                    dthead.Columns.Add("Txt_payment", typeof(string));
                                    dthead.Columns.Add("chk_payment", typeof(string));
                                    List<Tmodelmain> LTM3 = new List<Tmodelmain>();
                                    foreach (DataRow drc in dthead.Rows)
                                    {
                                        Tmodelmain ltm3 = new Tmodelmain();
                                        ltm3.Col1 = drc["Frequency_Id"].ToString();
                                        ltm3.Col2 = drc["lbl_Status_Detail"].ToString();
                                        ltm3.Col3 = drc["month_id"].ToString();
                                        ltm3.Col4 = drc["FrequencyName"].ToString();
                                        ltm3.Col5 = drc["IntialStatus"].ToString();
                                        ltm3.Col6 = drc["Scholarship_id"].ToString();
                                        ltm3.Col7 = drc["grpid"].ToString();
                                        ltm3.Col8 = drc["student_id"].ToString();
                                        ltm3.Col9 = drc["rollno"].ToString();
                                        ltm3.Col10 = drc["section_id"].ToString();
                                        ltm3.Col11 = drc["Class_id"].ToString();
                                        ltm3.Col12 = drc["RegNumber"].ToString();
                                        ltm3.Col13 = drc["FeeType_Id"].ToString();
                                        ltm3.Col14 = drc["FeeTypeName"].ToString();
                                        ltm3.Col15 = drc["FeeHead_Id"].ToString();
                                        ltm3.Col16 = drc["HeadName"].ToString();
                                        ltm3.Col17 = DateTime.Parse(drc["Due_Date"].ToString()).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                                        ltm3.Col18 = drc["Fee_Amount"].ToString();
                                        ltm3.Col19 = drc["Scholarship"].ToString();
                                        ltm3.Col20 = drc["PaidAmount"].ToString();
                                        ltm3.Col21 = (sgen.Make_decimal(drc["Fee_Amount"].ToString()) - (sgen.Make_decimal(drc["PaidAmount"].ToString()) + sgen.Make_decimal(drc["Scholarship"].ToString()))).ToString();
                                        if ((tm.Col15 != "7019.08"))
                                        {
                                            if (sgen.Make_decimal(ltm3.Col21.ToString()) < 0)
                                            {
                                                ltm3.Col21 = "0";
                                            }
                                        }
                                        ltm3.Col22 = drc["Txt_Receipt"].ToString();
                                        ltm3.Col23 = drc["lbl_Chequeno"].ToString();
                                        ltm3.Col24 = drc["Txt_payment"].ToString();
                                        ltm3.Col25 = drc["chk_payment"].ToString();
                                        ltm3.Col26 = drc["overdue_Date"].ToString();
                                        ltm3.Col63 = "0";
                                        LTM3.Add(ltm3);
                                    }
                                    ltm2.LTM1 = LTM3;
                                    LTM2.Add(ltm2);
                                }
                                ltm1.LTM1 = LTM2;
                                LTM1.Add(ltm1);
                            }
                            tm.LTM1 = LTM1;
                            tm.dt3 = grpdtstatus;
                            tm.dt2 = grpdt;
                            tm.dt1 = grpdada;
                            try
                            {
                                model[0].Col25 = "0";
                                model[0].Col26 = "0";
                                model[0].Col63 = "0";
                                var dtgrpto = grpdada.AsEnumerable().GroupBy(r => new
                                {
                                }).Select(g =>
                                {
                                    var row = grpdada.NewRow();
                                    // row["Id"] = g.Key;
                                    row["fee_amount"] = g.Sum(r => r.Field<Decimal>("fee_amount"));
                                    row["paidamount"] = g.Sum(r => r.Field<Decimal>("paidamount"));
                                    row["scholarship"] = g.Sum(r => r.Field<Decimal>("scholarship"));
                                    return row;
                                }).CopyToDataTable();
                                if (model[0].Col50 == "N" && model[0].Col14 == "7019.8")
                                {
                                    model[0].Col25 = (Convert.ToDecimal(dtgrpto.Rows[0]["PaidAmount"].ToString())).ToString();
                                }
                                else if (model[0].Col50 == "N" && model[0].Col14 == "7019.11")
                                {
                                    model[0].Col25 = (Convert.ToDecimal(dtgrpto.Rows[0]["scholarship"].ToString())).ToString();
                                }
                                else if (model[0].Col50 == "P")
                                {
                                    model[0].Col25 = (Convert.ToDecimal(dtgrpto.Rows[0]["fee_amount"].ToString()) - (Convert.ToDecimal(dtgrpto.Rows[0]["scholarship"].ToString()) + Convert.ToDecimal(dtgrpto.Rows[0]["paidamount"].ToString()))).ToString();
                                }
                                if (sgen.Make_decimal(model[0].Col25) < 0)
                                {
                                    model[0].Col25 = "0";
                                }
                                model[0].Col26 = model[0].Col25;
                                sgen.SetSession(MyGuid, "FeeGroup", dtgrpto);
                            }
                            catch (Exception ex)
                            {
                            }
                            #region FillLabels
                            try
                            {
                                if (sgen.GetSession(MyGuid, "RFeeType").ToString() == "G")
                                {
                                    tm.Col16 = dtGrpdetail.Rows[0]["sibling1_rollno"].ToString();
                                }
                                else
                                {
                                    tm.Col16 = dtGrpdetail.Rows[0]["regnumber"].ToString();
                                }
                                string finee = "0";
                                string paidfinee = "";
                                tm.Col16 = dtGrpdetail.Rows[0]["sibling1_rollno"].ToString();
                                tm.Col28 = Convert.ToDecimal((lbldt.Compute("Sum([PaidAmount])", "HeadName<>'Fine'"))).ToString();
                                tm.Col29 = Convert.ToDecimal((lbldt.Compute("Sum([scholarship])", "HeadName<>'Fine'"))).ToString();
                                tm.Col32 = sgen.Make_decimal(lbldt.Compute("Sum([scholarship])", "HeadName='Fine'").ToString()).ToString();
                                if (tm.Col29 == "")
                                {
                                    tm.Col29 = "0";
                                }
                                tm.Col56 = Convert.ToString(Convert.ToDecimal(tm.Col29) + Convert.ToDecimal(tm.Col32));
                                DateTime abcd = new DateTime(mydate.Year, mydate.Month, 1).AddMonths(1).AddDays(-1);
                                DataTable dtlable = new DataTable();
                                try
                                {
                                    //dtlable = lbldt.AsEnumerable().Where(w => (string)w["feestatus"] != "Paid" &&
                                    //       (DateTime)w["due_date"] <= mydate)
                                    //                                .Select(s => s).CopyToDataTable();
                                    dtlable = lbldt.AsEnumerable().Where(w => (string)w["feestatus"] != "Paid" &&
                                          (DateTime)w["due_date"] <= mydate)
                                                                   .Select(s => s).CopyToDataTable();
                                    //fees due// col30
                                    //Fine Concession// col32
                                    //Fine due// col33
                                    tm.Col30 = sgen.Make_decimal((dtlable.Compute("Sum([Fee_Amount])-sum(receipt_amount)", "HeadName<>'Fine'")).ToString()).ToString();
                                    //tm.Col30 = sgen.Make_decimal((dtlable.Compute("Sum([Fee_Amount])-sum(paidamount)", "HeadName<>'Fine'")).ToString()).ToString();
                                    finee = sgen.Make_decimal((dtlable.Compute("Sum([Fee_Amount])-sum(receipt_amount)", "HeadName='Fine'")).ToString()).ToString();
                                    // finee = sgen.Make_decimal((dtlable.Compute("Sum([Fee_Amount])-sum(paidamount)", "HeadName='Fine'")).ToString()).ToString();
                                    //finee = (sgen.Make_decimal(finee) - sgen.Make_decimal(tm.Col32)).ToString();
                                }
                                catch (Exception ex)
                                { }
                                tm.Col33 = finee;
                                tm.Col37 = "0";//Fees Not Due
                                tm.Col34 = "0";//Total Amount Inc. Fine
                                tm.Col57 = "0";
                                tm.Col35 = "0";
                                tm.Col36 = "0";
                                tm.Col31 = "0";
                                //tm.Col30 = "0";
                                try
                                {
                                    dtlable = lbldt.AsEnumerable().Where(w => (string)w["feestatus"] != "Paid" && (decimal)w["Fee_Amount"] > 0 &&
                                           (DateTime)w["due_date"] > mydate)
                                                                    .Select(s => s).CopyToDataTable(); //1 result
                                    tm.Col37 = sgen.Make_decimal(dtlable.Compute("Sum([Fee_Amount]) - sum(receipt_amount)", "HeadName<>'Fine'").ToString()).ToString();
                                }
                                catch (Exception ex)
                                { }
                                try
                                {
                                    //Fine Receipt
                                    tm.Col31 = sgen.Make_decimal(lbldt.Compute("Sum([PaidAmount])", "HeadName='Fine'").ToString()).ToString();
                                }
                                catch (Exception ex)
                                { }
                                ///==============================
                                tm.Col34 = ((Convert.ToDecimal(tm.Col28) + Convert.ToDecimal(tm.Col30) + Convert.ToDecimal(tm.Col33) + Convert.ToDecimal(tm.Col37) + Convert.ToDecimal(tm.Col31)) + Convert.ToDecimal(tm.Col29) + Convert.ToDecimal(tm.Col32)).ToString();
                                tm.Col57 = ((Convert.ToDecimal(tm.Col28) + Convert.ToDecimal(tm.Col30) + Convert.ToDecimal(tm.Col37)) + Convert.ToDecimal(tm.Col29)).ToString();
                                tm.Col35 = (sgen.Make_decimal(tm.Col28) + sgen.Make_decimal(tm.Col31)).ToString();
                                tm.Col36 = (sgen.Make_decimal(tm.Col30) + sgen.Make_decimal(tm.Col33)).ToString();
                                tm.Col23 = "";
                                tm.Col55 = "0";
                                tm.Col27 = "";
                                model = new List<Tmodelmain>();
                                model.Add(tm);
                            }
                            catch (Exception ex) { }
                        #endregion
                        END:;
                            break;
                            //case "FORMAT":
                            //    mq = "select  master_name,client_name  from master_setting " +
                            //        "where concat(client_id,client_unit_id,master_id, date_format(vch_date, '%Y%m%d'),type)='" + URL + "'";
                            //    DataTable dtf = sgen.getdata(userCode, mq);
                            //    if (dtf.Rows.Count > 0)
                            //    {
                            //        model[0].Col38 = dtf.Rows[0]["master_name"].ToString();
                            //        model[0].Col39 = dtf.Rows[0]["client_name"].ToString();
                            //        model[0].Col40 = "concat(client_id, client_unit_id, master_id, date_format(vch_date, '%Y%m%d'), type) = '" + URL + "'";
                            //    }
                            //    break;
                    }
                    break;
                #endregion
                #region opening_edi
                case "opening_edi":
                    switch (btnval.ToUpper())
                    {
                        case "REG":
                            // reena callback done
                            //mq = "select nvl(fd.ent_by,'0') as ent_by,fd.ent_date,  nvl(fd.vch_num,'-') as vch_num ,fd.vch_date ," +
                            //    " (case when fd.fee_amount >0 then 1 else 0 end) as flg , b.class_applied,  c.Class as Class_Name, " +
                            //     " d.master_name as Section, (a.FIRST_NAME)||' '||replace(a.MIDDLE_NAME,'0','')||' '||" +
                            //     "replace(a.LAST_NAME,'0','') as Student_Name,(a.f_firstname)||' '||replace" +
                            //     "(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name  ,a.Gender ,a.RegNumber as" +
                            //     " Reg_Number,b.Roll_number as Roll_Number ,nvl(fd.fee_amount,'0') as Previous_Year_Amount from  student_detail b  left join fees_detail fd   on fd.regno= b.reg_no and" +
                            //     "   fd.client_unit_id=b.client_unit_id and fd.type='EDI' and " +
                            //     "fd.academic_year_id='" + Ac_Year_id + "'	 inner join   user_details a on a.vch_num=b.vch_num and a.regnumber=b.reg_no" +
                            //     " and a.type='STD' inner join add_class c on c.add_class_id=b.class_applied and c.type='EAC' and " +
                            //     " b.client_unit_id=c.client_unit_id inner join master_setting d  " +
                            //     "on b.section =d.master_id and  d.type='ECS' and  find_in_set(d.client_unit_id,'" + unitid_mst + "')=1" +
                            //     " where b.type='STD' and b.academic_year_id='" + Ac_Year_id + "' and" +
                            //     " b.client_unit_id='" + unitid_mst + "' and  b.client_id||b.client_unit_id||b.reg_no ='" + URL + "'" +
                            //     "  order by  nvl(fd.client_id||fd.client_unit_id||fd.regno,'-') desc ";

                            mq = "select nvl(fd.ent_by,'0') as ent_by,fd.ent_date,  nvl(fd.vch_num,'-') as vch_num ,fd.vch_date ," +
                              " (case when fd.fee_amount >0 then 1 else 0 end) as flg , b.class_applied,  c.Class as Class_Name, " +
                               " d.master_name as Section, (a.FIRST_NAME)||' '||replace(a.MIDDLE_NAME,'0','')||' '||" +
                               "replace(a.LAST_NAME,'0','') as Student_Name,(a.f_firstname)||' '||replace" +
                               "(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name   ,a.RegNumber as" +
                               " Reg_Number,nvl(fd.fee_amount,'0') as Previous_Year_Amount from  student_detail b  left join fees_detail fd   on fd.regno= b.reg_no and" +
                               "   fd.client_unit_id=b.client_unit_id and fd.type='EDI' and " +
                               "fd.academic_year_id='" + Ac_Year_id + "'	 inner join   user_details a on a.vch_num=b.vch_num and a.regnumber=b.reg_no" +
                               " and a.type='STD' inner join add_class c on c.add_class_id=b.class_applied and c.type='EAC' and " +
                               " b.client_unit_id=c.client_unit_id inner join master_setting d  " +
                               "on b.section =d.master_id and  d.type='ECS' and  find_in_set(d.client_unit_id,'" + unitid_mst + "')=1" +
                               " where b.type='STD' and b.academic_year_id='" + Ac_Year_id + "' and" +
                               " b.client_unit_id='" + unitid_mst + "' and  b.client_id||b.client_unit_id||b.reg_no ='" + URL + "'" +
                               "  order by  nvl(fd.client_id||fd.client_unit_id||fd.regno,'-') desc ";

                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col8 = "client_id||client_unit_id||regno = '" + URL + "'";
                                model[0].Col16 = dt.Rows[0]["Student_Name"].ToString();
                                model[0].Col17 = dt.Rows[0]["Father_name"].ToString();
                                model[0].Col18 = dt.Rows[0]["Reg_number"].ToString();
                                model[0].Col19 = dt.Rows[0]["Class_Name"].ToString() + " - " + dt.Rows[0]["Section"].ToString();
                                model[0].Col20 = dt.Rows[0]["Previous_Year_Amount"].ToString();
                                model[0].Col31 = dt.Rows[0]["Previous_Year_Amount"].ToString();
                                model[0].Col21 = dt.Rows[0]["class_applied"].ToString();
                                if (dt.Rows[0]["flg"].ToString() == "1")
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "Y");
                                    model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                    model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                    model[0].Col5 = dt.Rows[0]["vch_num"].ToString();
                                    model[0].Col6 = dt.Rows[0]["vch_date"].ToString();
                                }
                                else { sgen.SetSession(MyGuid, "EDMODE", "N"); }
                            }
                            break;
                    }
                    break;
                #endregion
                #region Promoted_Students
                case "promoted_students":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            // reena query not clear seconf last line (due to group concat used in group by)
                            mq = "select a.Academic_Year_Id|| a.client_unit_id||a.grade|| 'STD' as std_fstr ," +
                                " nvl(b.rec_id,'0') as rec_id, a.client_id,a.client_unit_id , ud.first_name|| ' '|| " +
                                "replace(ud.middle_name, '0', '') || ' ' || replace(ud.last_name, '0', '') as Student_Name" +
                                ",ud.f_firstname || ' ' || replace(ud.f_middlename, '0', '') || ' ' ||   replace(ud.f_lastname, '0', '') " +
                                "as Father_Name,a.promoted,a.Sub_CatId,a.ent_by,a.ent_date,a.edit_by,a.edit_date, a.vch_num," +
                                "a.Academic_year_Id as To_ac_yr,a.position as from_ac_yr,a.Reg_no,a.class_id as From_Class," +
                                "a.grade as promoted_class,a.section_id ,Group_concat(a.section_id) section_from from student_result a" +
                                " inner join user_details ud on a.reg_no = ud.regnumber and ud.type = 'STD' left join student_detail b" +
                                " on a.reg_no = b.reg_no and b.type = 'STD' and a.client_unit_id = b.client_unit_id and " +
                                "b.from_academic_yr = '" + Ac_Year_id + "' where a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd')" +
                                " || a.type || a.Academic_Year_Id || a.grade = '" + URL + "' group by a.Academic_Year_Id || a.client_unit_id || " +
                                "a.grade || 'STD' , nvl(b.rec_id, '0') , a.client_id,a.client_unit_id , ud.first_name || ' ' || " +
                                " replace(ud.middle_name, '0', '') || ' ' || replace(ud.last_name, '0', '') ,ud.f_firstname || ' ' ||" +
                                " replace(ud.f_middlename, '0', '') || ' ' || replace(ud.f_lastname, '0', '') ,a.promoted,a.Sub_CatId," +
                                "a.ent_by,a.ent_date,a.edit_by,a.edit_date, a.vch_num, a.Academic_year_Id ,a.position ,a.Reg_no,a.class_id ,a.grade ,a.section_id";
                            DataTable dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                //Sub_CatId
                                ViewBag.vfill = "disabled='disabled'";
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                tm = model.FirstOrDefault();
                                #region  Academic Year
                                dt = new DataTable();
                                dt = sgen.getdata(userCode, "select academic_year_id,academic_year from add_academic_year where  client_id='" + clientid_mst + "' and type='ACY'");
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                                        mod2.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                                    }
                                }
                                #endregion
                                #region Bind Class

                                mod6 = mod4 = mod3 = sgen.BindClass(userCode, unitid_mst);
                                //mod4 = mod3;
                                //mod6 = mod3;

                                #endregion
                                #region BindSection

                                mod5 = sgen.BindSection(userCode, unitid_mst);

                                #endregion
                                string per = "", postion = "", section = "";
                                foreach (DataRow dr in dtt.Rows)
                                {
                                    if (dr["Sub_CatId"] == "Y")
                                    {
                                        per = dr["per"].ToString();
                                        postion = dr["position"].ToString();
                                    }
                                    else { section = dr["section_id"].ToString(); }
                                    // String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => dr["promoted_class"].ToString()).Distinct()).Split(',');// Promoted Class
                                    String[] L6 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["promoted_class"].ToString()).Distinct()).Split(',');

                                    model.Add(new Tmodelmain
                                    {
                                        Col8 = "Academic_Year_Id|| client_unit_id||class_applied||type = '" + dr["std_fstr"].ToString() + "'",
                                        Col23 = "client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type||Academic_Year_Id||grade = '" + URL + "'",
                                        Col3 = dr["ent_by"].ToString(),
                                        Col4 = dr["ent_date"].ToString(),
                                        Col5 = dr["vch_num"].ToString(),
                                        Col1 = dr["client_id"].ToString(),
                                        Col2 = dr["client_unit_id"].ToString(),
                                        Col13 = "Update",
                                        Col100 = "Update & New",
                                        Col121 = "U",
                                        Col122 = "<u>U</u>pdate",
                                        Col123 = "Update & Ne<u>w</u>",
                                        Col9 = tm.Col9,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col16 = dr["Student_Name"].ToString(),
                                        Col17 = dr["reg_no"].ToString(),
                                        Col19 = dr["Father_Name"].ToString(),
                                        Col20 = dr["Sub_CatId"].ToString(),
                                        Col21 = section,
                                        Col22 = dr["rec_id"].ToString(),
                                        Col25 = dr["from_ac_yr"].ToString(),
                                        Col26 = dr["To_ac_yr"].ToString(),
                                        Chk1 = dr["promoted"].ToString() == "1" ? true : false,
                                        Col24 = dr["promoted"].ToString(),
                                        TList6 = mod6,
                                        SelectedItems6 = L6
                                        //Col29 = dr["First_Half"].ToString(),
                                    });
                                }
                                model.RemoveAt(0);

                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["from_ac_yr"].ToString()).Distinct()).Split(',');//From Year
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["To_ac_yr"].ToString()).Distinct()).Split(',');// To Year
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["From_Class"].ToString()).Distinct()).Split(',');// From Class
                                String[] L4 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["promoted_class"].ToString()).Distinct()).Split(',');//To class
                                String[] L5 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["section_from"].ToString()).Distinct()).Split(',');// From Section
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                                model[0].SelectedItems5 = L5;
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
                                TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
                                TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5;
                                // reena why model is not here for mod6(it used in repeater line no 6140) ok
                                TempData[MyGuid + "_TList6"] = mod6;
                            }
                            break;
                    }
                    break;
                #endregion
                #region location_mst
                case "location_mst":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select * from " + model[0].Col10 + " where (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col8 = "(client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col20 = dtt.Rows[0]["group_name"].ToString();
                                model[0].Col26 = dtt.Rows[0]["master_id"].ToString();
                                model[0].Col17 = dtt.Rows[0]["master_name"].ToString();
                                model[0].Col19 = dtt.Rows[0]["client_name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["optional_subject"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["master_entby"].ToString();
                                model[0].Col4 = dtt.Rows[0]["master_entdate"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region transport_feemaster
                case "transport_feemaster":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select vch_num,vch_date,group_name,group_id,client_id,client_unit_id,master_entby,master_entdate,master_editby,master_editdate,rec_id,master_id,master_name,type,classid from master_setting " +
                                "where(client_id||client_unit_id|| master_id|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "' and type='" + model[0].Col12 + "'";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region Location
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.pickdrop(userCode, unitid_mst);

                                #endregion
                                #region Class
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClass(userCode, unitid_mst);

                                #endregion

                                model[0].Col8 = "(client_id||client_unit_id|| master_id||to_char(vch_date, 'yyyymmdd')|| type) = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["group_name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["master_id"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["master_entby"].ToString();
                                model[0].Col4 = dtt.Rows[0]["master_entdate"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["master_Name"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["classid"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region mis_feetype
                case "mis_feetype":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select feetype_id, a.vch_num, a.FeeTypeName,a.ent_by as ent_by,a.ent_date as ent_date,vch_date ,Status,Inactive_date from  " + model[0].Col10 + " a " +
                                "where(a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type||master_type)='" + URL + "' ";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            string staus = "";
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col8 = "(client_id||client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type||master_type) = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["FeeTypeName"].ToString();
                                model[0].Col18 = dtt.Rows[0]["status"].ToString();
                                model[0].Col20 = dtt.Rows[0]["FeeType_Id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region mis_fee_head
                case "mis_fee_head":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select a.vch_num,a.master_name,a.status,a.master_id,a.sectionid,a.master_entby,a.master_entdate," +
                                "a.client_id,a.client_unit_id,a.rec_id from " + model[0].Col10 + " a " +
                                "where (a.client_id||a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'ddmmyyyy')|| a.type||master_type)='" + URL + "' ";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region feetypename

                                DataTable dt1 = new DataTable();
                                string condition = "and master_type='B' and (status='Y' or status='')";
                                dt1 = sgen.BindData("EEF", "feetype_id", "feetypename", "school_fee_type ", condition, userCode, clientid_mst, unitid_mst);
                                if (dt1.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt1.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["feetypename"].ToString(), Value = dr["feetype_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                                #endregion
                                //model[0].TList1 = mod1;
                                model[0].Col8 = "(client_id||client_unit_id|| vch_num|| to_char(vch_date, 'ddmmyyyy')|| type||master_type) = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["master_name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["status"].ToString();
                                model[0].Col26 = dtt.Rows[0]["master_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["master_entby"].ToString();
                                model[0].Col4 = dtt.Rows[0]["master_entdate"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["sectionid"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;

                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region mis_fee_structure
                case "mis_fee_structure":
                    if (URL != "")
                    {
                        switch (btnval.ToUpper())
                        {
                            case "EDIT":

                                mq = "select a.rec_id,a.vch_num,to_char(a.vch_date, '" + sgen.Getsqldateformat() + "') as vch_date,a.type,a.client_id,a.client_unit_id,a.ent_by,a.ent_date,a.edit_by,a.edit_date," +
                                      " GROUP_CONCAT(a.class_id) as class_id,GROUP_CONCAT(a.feetype_id) as  feetype,a.FeeHead_Id,b.feetypename,c.master_name as HeadName," +
                                      "a.Academic_year_Id,a.fee_amount,to_char(min(a.valid_from),'" + sgen.Getsqldateformat() + "')  as Valid_From," +
                                      "to_char(min(a.valid_to),'" + sgen.Getsqldateformat() + "') as Valid_To  from school_fee_structure a" +
                                      ",school_fee_type b, master_setting c where a.type = 'EFS' " +
                                      " and a.feehead_id = c.master_id and c.type = 'EFH' and (a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type) = '" + URL + "'  and b.client_unit_id = '" + unitid_mst + "'  and c.client_unit_id = '" + unitid_mst + "' and " +
                                      "b.feetype_id = a.feetype_id and b.type = 'EEF' and a.master_type = 'B' and b.master_type = 'B' and c.master_type = 'B'" +
                                      "group by  a.feehead_id,b.feetypename,c.master_name,a.vch_num,a.vch_date,a.type,a.type,a.client_id,a.client_unit_id,a.ent_by,a.ent_date,a.edit_by,a.edit_date,a.feetype_id " +
                                      ",a.FeeHead_Id,b.feetypename,c.master_name,a.Academic_year_Id,a.fee_amount,a.rec_id";
                                dt = sgen.getdata(userCode, mq);
                                if (dt.Rows.Count > 0)
                                {
                                    sgen.SetSession(MyGuid, "EDMODE", "Y");


                                    if (dt.Rows.Count > 0)
                                    {
                                        model = new List<Tmodelmain>();
                                        for (int i = 0; i < dt.Rows.Count; i++)
                                        {


                                            model.Add(new Tmodelmain
                                            {
                                                Col19 = dt.Rows[i]["feetypename"].ToString(),
                                                Col20 = dt.Rows[i]["HeadName"].ToString(),
                                                Col21 = dt.Rows[i]["fee_amount"].ToString(),
                                                Col22 = dt.Rows[i]["feetype"].ToString(),
                                                Col23 = dt.Rows[i]["feehead_id"].ToString(),
                                            });
                                        }
                                    }

                                    model[0].Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                                    model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                    model[0].Col17 = dt.Rows[0]["Valid_From"].ToString();
                                    model[0].Col18 = dt.Rows[0]["Valid_to"].ToString();
                                    model[0].Col7 = dt.Rows[0]["rec_id"].ToString();
                                    model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                    model[0].Col4 = dt.Rows[0]["ent_Date"].ToString();
                                    model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                    model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();

                                    #region Class
                                    //  DataTable dt1 = new DataTable();
                                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);

                                    #endregion
                                    #region feetypename

                                    DataTable dt2 = new DataTable();
                                    string condition = "and master_type='" + Master_Type + "' and (status='Y' or status='') and  feetype_id in (select distinct sectionid from master_setting where type='EFH' and client_unit_id='" + unitid_mst + "' and master_type='B')";
                                    dt2 = sgen.BindData("EEF", "feetype_id", "feetypename", "school_fee_type ", condition, userCode, clientid_mst, unitid_mst);
                                    if (dt2.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in dt2.Rows)
                                        {
                                            mod2.Add(new SelectListItem { Text = dr["feetypename"].ToString(), Value = dr["feetype_id"].ToString() });
                                        }
                                    }
                                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                    #endregion
                                    String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["Class_id"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems1 = L1;

                                    String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["feetype"].ToString()).Distinct()).Split(',');
                                    model[0].SelectedItems2 = L2;

                                    //for (Int32 i = 0; i < model.Count; i++)
                                    //{
                                    //    model[i].Col19 = dt.Rows[i]["feetypename"].ToString();
                                    //    model[i].Col20 = dt.Rows[i]["HeadName"].ToString();
                                    //    model[i].Col21 = dt.Rows[i]["fee_amount"].ToString();
                                    //    model[i].Col22 = dt.Rows[i]["feetype"].ToString();
                                    //    model[i].Col23 = dt.Rows[i]["feehead_id"].ToString();
                                    //}

                                    model[0].Col13 = "Update";
                                    model[0].Col100 = "Update & New";
                                    model[0].Col121 = "U";
                                    model[0].Col122 = "<u>U</u>pdate";
                                    model[0].Col123 = "Update & Ne<u>w</u>";
                                    model[0].Col9 = tm.Col9;
                                    model[0].Col10 = tm.Col10;
                                    model[0].Col11 = tm.Col11;
                                    model[0].Col12 = tm.Col12;
                                    model[0].Col14 = tm.Col14;
                                    model[0].Col15 = tm.Col15;
                                }
                                else
                                {
                                    model = new List<Tmodelmain>();
                                    tm.Col17 = "";
                                    tm.Col18 = "";
                                    tm.Col19 = "";
                                    tm.Col20 = "";
                                    tm.Col9 = tm.Col9;
                                    model.Add(tm);
                                }
                                break;
                        }
                    }
                    break;
                #endregion
                #region health_checkup
                case "health_checkup":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            // reena callback done
                            //mq = "select en.rec_id,en.type,en.type_desc,en.col1,en.col2,ac.class as Class,ms1.master_name as Section,en.col3" +
                            //  ",to_char( convert_tz( en.vch_date,'UTC','" + sgen.Gettimezone() + "')," + "'" + sgen.Getsqldateformat() + "') as vch_date," +
                            //  "en.col4,en.col5,en.col6 as regnumber,(ud.first_name||' '||REPLACE(ud.middle_name,'0','')||' '||REPLACE(ud.last_name,'0','')) as name,en.col7" +
                            //  ",en.col8,en.chkvalue,en.vch_num,en.client_id,en.client_unit_id,en.ent_by,en.ent_date,en.edit_by, en.edit_date,en.edit_by" +
                            //  ",en.edit_date,en.ent_by,en.ent_date,sd.roll_number from " + model[0].Col10 + " en ,user_details ud,master_setting ms1,add_class ac,student_detail sd " +
                            //  " where (en.client_id||en.client_unit_id||en.vch_num||to_char(en.vch_date,'yyyymmdd')||en.type)='" + URL + "' " +
                            //  "and ud.RegNumber=en.col6 and find_in_set(ud.client_unit_id,en.client_unit_id)=1 and ud.type='STD' and " +
                            //  "ac.type='EAC' and ac.add_class_id=en.col1 and find_in_set(ac.client_unit_id,en.client_unit_id)=1 and " +
                            //  "ms1.master_id=en.col2 and ms1.type='ECS' and find_in_set(ms1.client_unit_id,en.client_unit_id)=1 " +
                            //  " and sd.reg_no=ud.Regnumber and sd.vch_num=ud.vch_num and sd.academic_year_id='" + Ac_Year_id + "' and" +
                            //  " sd.client_unit_id='" + unitid_mst + "' and sd.type='STD'";

                            mq = "select en.rec_id,en.col1,en.col2,ac.class as Class,ms1.master_name as Section,en.col3" +
                            ",to_char( convert_tz( en.vch_date,'UTC','" + sgen.Gettimezone() + "')," + "'" + sgen.Getsqldateformat() + "') as vch_date," +
                            "en.col4,en.col5,(ud.first_name||' '||REPLACE(ud.middle_name,'0','')||' '||REPLACE(ud.last_name,'0','')) as name,en.col7" +
                            ",en.col8,en.vch_num,en.client_id,en.client_unit_id,en.ent_by,en.ent_date,en.edit_by, en.edit_date,en.edit_by" +
                            ",en.edit_date,en.ent_by,en.ent_date,sd.roll_number from " + model[0].Col10 + " en ,user_details ud,master_setting ms1,add_class ac,student_detail sd " +
                            " where (en.client_id||en.client_unit_id||en.vch_num||to_char(en.vch_date,'yyyymmdd')||en.type)='" + URL + "' " +
                            "and ud.RegNumber=en.col6 and find_in_set(ud.client_unit_id,en.client_unit_id)=1 and ud.type='STD' and " +
                            "ac.type='EAC' and ac.add_class_id=en.col1 and find_in_set(ac.client_unit_id,en.client_unit_id)=1 and " +
                            "ms1.master_id=en.col2 and ms1.type='ECS' and find_in_set(ms1.client_unit_id,en.client_unit_id)=1 " +
                            " and sd.reg_no=ud.Regnumber and sd.vch_num=ud.vch_num and sd.academic_year_id='" + Ac_Year_id + "' and" +
                            " sd.client_unit_id='" + unitid_mst + "' and sd.type='STD'";

                            #region Checkup Type
                            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = cmd_Fun.chkuptype(userCode, unitid_mst);
                            #endregion
                            #region section 
                            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);
                            #endregion
                            #region Class
                            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);
                            #endregion
                            mod4.Add(new SelectListItem { Text = "Good", Value = "1" });
                            mod4.Add(new SelectListItem { Text = "OK", Value = "2" });
                            mod4.Add(new SelectListItem { Text = "Need Further Checkup", Value = "3" });
                            TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;

                            DataTable dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                ViewBag.vfill = "disabled='disabled'";
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                tm = model.FirstOrDefault();

                                foreach (DataRow dr in dtt.Rows)
                                {
                                    String[] L4 = new string[] { dr["col7"].ToString() };
                                    model.Add(new Tmodelmain
                                    {
                                        Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'",
                                        Col3 = dr["ent_by"].ToString(),
                                        Col4 = dr["ent_date"].ToString(),
                                        Col16 = dr["vch_num"].ToString(),
                                        Col1 = dr["client_id"].ToString(),
                                        Col2 = dr["client_unit_id"].ToString(),
                                        Col7 = dr["rec_id"].ToString(),
                                        Col13 = "Update",
                                        Col121 = "U",
                                        Col122 = "<u>U</u>pdate",
                                        Col9 = tm.Col9,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col12 = tm.Col12,
                                        Col10 = tm.Col10,
                                        Col11 = tm.Col11,
                                        Col17 = dr["col3"].ToString(),
                                        Col18 = dr["vch_date"].ToString(),
                                        Col19 = dr["col5"].ToString(),
                                        Col20 = dr["Name"].ToString(),
                                        Col21 = dr["Class"].ToString(),
                                        Col22 = dr["Section"].ToString(),
                                        Col24 = dr["col8"].ToString(),
                                        Col27 = dr["roll_number"].ToString(),
                                        TList1 = mod1,
                                        TList2 = mod2,
                                        TList3 = mod3,
                                        TList4 = mod4,
                                        SelectedItems1 = new string[] { "" },
                                        SelectedItems2 = new string[] { "" },
                                        SelectedItems3 = new string[] { "" },
                                        SelectedItems4 = L4
                                    });
                                }
                                model.RemoveAt(0);

                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col1"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col2"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["col4"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;

                            }
                            break;
                    }
                    break;
                #endregion
                #region blocked_student
                case "blocked_student":
                    switch (btnval.ToUpper())
                    {
                        case "STUDENT":
                            string status = "";
                            DataTable dtt = new DataTable();
                            mq = "select ud.status,(ud.vch_num|| to_char(ud.vch_date, 'ddmmyyyy')|| ud.type) as fstr,ud.f_email,ud.user_id," +
  "(ud.FIRST_NAME|| ' '|| REPLACE(ud.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(ud.LAST_NAME, '0', '')) as student_name," +
  "(ud.f_firstname|| ' '|| REPLACE(ud.f_middlename, '0', '')|| ' '|| REPLACE(ud.f_lastname, '0', '')) as Father_Name," +
  "(ud.m_firstname|| ' '|| REPLACE(ud.m_middlename, '0', '')|| ' '|| REPLACE(ud.m_lastname, '0', '')) as Mother_Name," +
  "(ud.g_firstname|| ' '|| REPLACE(ud.g_middlename, '0', '')|| ' '|| REPLACE(ud.g_lastname, '0', '')) as Gaurdian_Name," +
  "to_char(ud.dob, '" + sgen.Getsqldateformat() + "') as DOB,ud.blood_grp,ud.gender as Gender,ud.place_of_birth as Birth_Place," +
  "ud.main_language as Mother_Tongue,nvl(cl.class,'-') as Class,nvl(sd.roll_number,'-') as rollnumber,nvl(sec.master_name,'-') as section," +
  "nvl(ad.academic_year,'-') as Academic_Year,ud.adhaar_id as Adhaar_No,nvl(rl.master_name,'-') as Religion,nvl(cc.master_name,'-') as Caste," +
  "ud.NATIONALITY," +
  "ud.prev_school_name as Last_School,ud.regnumber as Reg_Number " +
  "from user_details ud inner  join student_detail sd on sd.reg_no=ud.RegNumber and sd.vch_num=ud.vch_num and sd.type= ud.type and sd.client_unit_id=ud.client_unit_id " +
  "left outer join add_class cl on sd.class_applied=cl.add_class_id  and sd.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
  "left outer join add_academic_year ad on sd.academic_year_id= ad.academic_year_id  and sd.client_id= ad.client_id and ad.type= 'ACY' " +
  "left outer join master_setting sec on sd.section= sec.master_id  and find_in_set(sd.client_unit_id,sec.client_unit_id)=1 and sec.type= 'ECS' " +
  "left outer join master_setting cc on ud.ucaste= cc.master_id and cc.type= 'ECT' " +
  "left outer join master_setting rl on ud.religion= rl.master_id and rl.type= 'ERT' " +
  "left outer join(select distinct country_name, alpha_2 from country_state) cs on cs.alpha_2=ud.nationality " +
  "WHERE  ud.client_unit_id= '" + unitid_mst + "' and ud.type= 'STD' and (ud.vch_num|| to_char(ud.vch_date, 'ddmmyyyy')|| ud.type)='" + URL + "' order by ud.vch_num desc";
                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col8 = "(ud.vch_num|| to_char(ud.vch_date, 'ddmmyyyy')|| ud.type) = '" + URL + "'";
                                model[0].Col17 = dtt.Rows[0]["student_name"].ToString();
                                model[0].Col18 = dtt.Rows[0]["Father_Name"].ToString();
                                model[0].Col19 = dtt.Rows[0]["Mother_Name"].ToString();
                                model[0].Col20 = dtt.Rows[0]["Gaurdian_Name"].ToString();
                                model[0].Col21 = dtt.Rows[0]["DOB"].ToString();
                                model[0].Col22 = dtt.Rows[0]["Gender"].ToString();
                                model[0].Col23 = dtt.Rows[0]["NATIONALITY"].ToString();
                                model[0].Col24 = dtt.Rows[0]["Birth_Place"].ToString();
                                model[0].Col25 = dtt.Rows[0]["Mother_Tongue"].ToString();
                                model[0].Col26 = dtt.Rows[0]["Adhaar_No"].ToString();
                                model[0].Col27 = dtt.Rows[0]["Religion"].ToString();
                                model[0].Col28 = dtt.Rows[0]["Caste"].ToString();
                                model[0].Col29 = dtt.Rows[0]["Last_School"].ToString();
                                model[0].Col30 = dtt.Rows[0]["Reg_Number"].ToString();
                                model[0].Col31 = dtt.Rows[0]["rollnumber"].ToString();
                                model[0].Col32 = dtt.Rows[0]["class"].ToString();
                                model[0].Col33 = dtt.Rows[0]["academic_year"].ToString();
                                model[0].Col34 = dtt.Rows[0]["section"].ToString();
                                model[0].Col35 = dtt.Rows[0]["blood_grp"].ToString();
                                model[0].Col38 = dtt.Rows[0]["fstr"].ToString();
                                model[0].Col39 = dtt.Rows[0]["f_email"].ToString();
                                model[0].Col40 = dtt.Rows[0]["f_email"].ToString();
                                if (dtt.Rows[0]["status"].ToString() == "inactive")
                                {
                                    model[0].Chk1 = true;
                                }
                                if (dtt.Rows[0]["status"].ToString() == "active")
                                {
                                    model[0].Chk1 = false;
                                }
                                model[0].Col13 = "Update";
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region student_remark
                case "student_remark":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            // reena callback done 
                            //mq = "select a.*,b.regno ,c.roll_number,(b.first_name||' '||replace(b.middle_name,'0','')||' '||replace(b.last_name,'0','')) as Student_Name," +
                            //    "(b.f_firstname||' '||replace(b.f_middlename,'0','')||' '||replace(b.f_lastname,'0','')) as Father_Name " +
                            //    "from (select  class_id,Section_Id,reg_no,lpad(sub_catid,6,0)Sub_CatId,Left_Reason as Remarks ,vch_num,to_char(vch_date,'ddmmyyyy') as vch_date,ent_by,ent_date from student_result a " +
                            //    "where (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date, 'yyyymmdd')||a.type)= '" + URL + "'" +
                            //    " union" +
                            //    " select a.class_applied as class_id,a.Section as section_id,  a.reg_no, '' as Sub_CatId,'' as Remarks ,'' as vch_num, '' as vch_date, '' as ent_by, null as ent_date" +
                            //    " from student_detail a inner join user_details b on a.reg_no = b.regnumber where a.class_applied in" +
                            //    " (SELECT DISTINCT class_id  from student_result a where (a.client_id|| a.client_unit_id|| a.vch_num|| " +
                            //    "to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "') and a.section in (SELECT DISTINCT Section_Id from student_result a" +
                            //    " where (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "')" +
                            //    " and a.Academic_Year_Id = '" + Ac_Year_id + "' and Reg_no not in (SELECT DISTINCT reg_no from student_result a" +
                            //    " where (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "') " +
                            //    "and b.status = 'active' and b.type = 'STD') a inner join user_details b on a.Reg_no = b.RegNumber and b.type='STD'" +
                            //    "inner join student_detail c on a.reg_no=c.reg_no and a.class_id=c.class_applied and a.section_id =c.section order by a.vch_num desc";

                            mq = "select a.*,b.regno ,c.roll_number,(b.first_name||' '||replace(b.middle_name,'0','')||' '||replace(b.last_name,'0','')) as Student_Name," +
                              "(b.f_firstname||' '||replace(b.f_middlename,'0','')||' '||replace(b.f_lastname,'0','')) as Father_Name " +
                              "from (select  class_id,Section_Id,reg_no,lpad(sub_catid,6,0)Sub_CatId,Left_Reason as Remarks ,vch_num,to_char(vch_date,'ddmmyyyy') as vch_date,ent_by,ent_date from student_result a " +
                              "where (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date, 'yyyymmdd')||a.type)= '" + URL + "'" +
                              " union" +
                              " select a.class_applied as class_id,a.Section as section_id,  a.reg_no, '' as Sub_CatId,'' as Remarks ,'' as vch_num, '' as vch_date, '' as ent_by, null as ent_date" +
                              " from student_detail a inner join user_details b on a.reg_no = b.regnumber where a.class_applied in" +
                              " (SELECT DISTINCT class_id  from student_result a where (a.client_id|| a.client_unit_id|| a.vch_num|| " +
                              "to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "') and a.section in (SELECT DISTINCT Section_Id from student_result a" +
                              " where (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "')" +
                              " and a.Academic_Year_Id = '" + Ac_Year_id + "' and Reg_no not in (SELECT DISTINCT reg_no from student_result a" +
                              " where (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "') " +
                              "and b.status = 'active' and b.type = 'STD') a inner join user_details b on a.Reg_no = b.RegNumber and b.type='STD'" +
                              "inner join student_detail c on a.reg_no=c.reg_no and a.class_id=c.class_applied and a.section_id =c.section order by a.vch_num desc";
                            DataTable dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                ViewBag.vfill = "disabled='disabled'";
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                tm = model.FirstOrDefault();
                                #region ddl
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.teacher(userCode, unitid_mst);   // teacher
                                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = sgen.BindClass(userCode, unitid_mst);   // class
                                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = sgen.BindSection(userCode, unitid_mst);  // section
                                #endregion
                                foreach (DataRow dr in dtt.Rows)
                                {
                                    model.Add(new Tmodelmain
                                    {
                                        Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'",
                                        Col9 = tm.Col9,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col12 = tm.Col12,
                                        Col10 = tm.Col10,
                                        Col11 = tm.Col11,
                                        Col18 = dr["roll_number"].ToString(),
                                        Col19 = dr["Student_Name"].ToString(),
                                        Col20 = dr["Father_Name"].ToString(),
                                        Col16 = dr["vch_num"].ToString(),
                                        Col17 = dr["vch_date"].ToString(),
                                        Col21 = dr["Remarks"].ToString(),
                                        Col22 = dr["reg_no"].ToString(),
                                        Col3 = dr["ent_by"].ToString(),
                                        Col4 = dr["ent_date"].ToString(),
                                        Col13 = "Update",
                                        Col100 = "Update & New",
                                        Col121 = "U",
                                        Col122 = "<u>U</u>pdate",
                                        Col123 = "Update & Ne<u>w</u>",
                                        TList1 = mod1,
                                        TList2 = mod2,
                                        TList3 = mod3,
                                    });
                                }
                                model.RemoveAt(0);

                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["sub_catid"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["class_id"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["section_id"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;

                            }
                            break;
                    }
                    break;
                #endregion
                #region feetype
                case "feetype":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            mq = "select feetype_id, a.vch_num, a.FeeTypeName,a.ent_by as ent_by,a.ent_date as ent_date,vch_date ,(case when Status='0' then 'Y' else 'N' end) Status,Inactive_date from  " + model[0].Col10 + " a " +
                                "where(a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type||master_type)='" + URL + "' ";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            string staus = "";
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col8 = "(client_id||client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type||master_type) = '" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["FeeTypeName"].ToString();
                                model[0].Col18 = dtt.Rows[0]["status"].ToString();
                                model[0].Col20 = dtt.Rows[0]["FeeType_Id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtt.Rows[0]["ent_date"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                model.Add(tm);
                            }
                            break;
                    }
                    break;
                #endregion
                #region feehead
                case "feehead":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select client_id,client_unit_id, rec_id, master_entby, section_strength,master_entdate,master_id, master_name,vch_num,sectionid,subjectid,CLIENT_NAME,UNIT_NAME" +
                                " from master_setting where (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'ddmmyyyy')||type||master_type||sectionid)='" + URL + "'";
                            DataTable dtt = new DataTable();
                            dtt = sgen.getdata(userCode, mq);
                            string status = "";
                            if (dtt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                #region feetypename                        
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.feetype(userCode, unitid_mst);
                                #endregion
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                //   model[0].TList1 = mod1;
                                model[0].Col8 = "(client_id||client_unit_id||vch_num||to_char(vch_date, 'ddmmyyyy')||type||master_type||sectionid)='" + URL + "'";
                                model[0].Col16 = dtt.Rows[0]["vch_num"].ToString();
                                model[0].Col17 = dtt.Rows[0]["master_name"].ToString();     //head name
                                model[0].Col18 = dtt.Rows[0]["subjectid"].ToString();      //Active or inactive
                                model[0].Col19 = dtt.Rows[0]["Section_Strength"].ToString();  //Fee for which type ofstudent
                                model[0].Col21 = dtt.Rows[0]["master_id"].ToString();
                                model[0].Col3 = dtt.Rows[0]["master_entby"].ToString();
                                model[0].Col4 = dtt.Rows[0]["master_entdate"].ToString();
                                model[0].Col1 = dtt.Rows[0]["client_id"].ToString();
                                model[0].Col7 = dtt.Rows[0]["rec_id"].ToString();
                                model[0].Col2 = dtt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col22 = dtt.Rows[0]["CLIENT_NAME"].ToString();//debit ledger
                                model[0].Col24 = dtt.Rows[0]["UNIT_NAME"].ToString();//credit ledger

                                model[0].Col25 = sgen.seekval(userCode, "SELECT CPNAME FROM  clients_mst where type='LDG' " +
                                 "AND VCH_NUM='" + model[0].Col22 + "' AND find_in_set(client_unit_id,'" + unitid_mst + "')=1", "CPNAME");
                                model[0].Col23 = sgen.seekval(userCode, "SELECT CPNAME FROM  clients_mst where type='LDG' " +
                                      "AND VCH_NUM='" + model[0].Col24 + "' AND find_in_set(client_unit_id,'" + unitid_mst + "')=1", "CPNAME");
                                model[0].Col20 = "Education Fees Head";
                                string[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(row => row["sectionid"].ToString()).Distinct()).Split(',');    //Fee Type
                                model[0].SelectedItems1 = L1;
                                //   model[0].TList1 = mod1;
                            }
                            else
                            {
                                model = new List<Tmodelmain>();
                                tm.Col17 = "";
                                tm.Col18 = "";
                                tm.Col19 = "";
                                tm.Col20 = "";
                                model.Add(tm);
                            }
                            break;

                        case "CLEDGER":
                            mq = "select vch_num as ldg_code,c_name as ldg_name from clients_mst where vch_num||to_char(vch_date,'yyyymmdd')||type = '" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {

                                model[0].Col23 = dt.Rows[0]["ldg_name"].ToString();
                                model[0].Col24 = dt.Rows[0]["ldg_code"].ToString();
                                model[0].Col25 = "";
                                model[0].Col22 = "";
                            }
                            break;
                        case "DLEDGER":
                            mq = "select vch_num as ldg_code,c_name as ldg_name from clients_mst where vch_num||to_char(vch_date,'yyyymmdd')||type = '" + URL + "'";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col25 = dt.Rows[0]["ldg_name"].ToString();
                                model[0].Col22 = dt.Rows[0]["ldg_code"].ToString();
                                model[0].Col23 = "";
                                model[0].Col24 = "";
                            }
                            break;
                    }
                    break;
                #endregion
                #region homework
                case "mess":
                    switch (btnval.ToUpper())
                    {
                        //case "Topic":
                        //  mq = "SELECT (c.client_id||c.client_unit_id||c.vch_num||to_char(c.vch_date, 'yyyymmdd')||c.type) as fstr,ac.Class,ms.master_name as Subject,ct.cat_name as" +
                        //      " Chapters,C.COU_TITLE AS Topic,C.COU_DESCP AS Description from courses c,add_class ac,master_setting ms, category ct where c.ref_code=ac.add_class_id" +
                        //      " and c.type='TOP' AND c.client_id='" + clientid_mst + "' AND c.client_unit_id='" + unitid_mst + "' and c.mod_id=ms.master_id and ms.type='ESW'" +
                        //      " and c.cat_id=ct.cat_id and ct.type='CHP' and c.ref_code='" + model[0].SelectedItems2.FirstOrDefault() + "' and c.client_id=ac.client_id and c.client_unit_id = ac.client_unit_id and" +
                        //     "  c.client_id=ms.client_id and c.client_unit_id = ms.client_unit_id and c.client_id=ct.client_id and c.client_unit_id = ct.client_unit_id";
                        //  break;
                        case "RESEND":
                        case "EDIT":
                            // reena why nvl with case ok
                            //// reena callback done
                            //                     mq = "select (c.class||'-'||d.master_name) as classsection,sd.class_applied,sd.section, sd.roll_number" +
                            //                                                  " ,(case when (a.col1= '0' or a.col1=null) then cast(a.col23 as varchar(1000)) else a.col1 end) as col1 ,a.col2,a.col5,a.col6,a.col9,a.col10," +
                            //                                                  "a.col11,a.col4,a.col17,a.col7,a.col12,a.col13,a.col14,a.col15,a.col16,a.col8" +
                            //                                                  ",a.ent_by,a.ent_date,a.edit_by,a.edit_date,a.vch_num,a.vch_date,a.client_id," +
                            //                                                  "a.client_unit_id,a.col3 as Mail_Subject_heading ,e.regnumber as reg_no" +
                            //                                                  ",(e.first_name || ' ' || replace(e.middle_name, '0', '') || ' ' || replace" +
                            //                                                  "(e.last_name, '0', '')) as Student_Name,(replace(e.f_firstname, '0', '') || ' ' || replace(e.f_middlename, '0', '') || ' ' || " +
                            //                                                  "replace(e.f_lastname, '0', '')) as f_firstname,(e.m_firstname || ' ' || replace(e.m_middlename, '0', '') || ' ' || replace(e.m_lastname, '0', ''))" +
                            //                                                  " as m_firstname,(CASE WHEN e.default_emailid = 'F' THEN e.f_email WHEN e.default_emailid = 'M' THEN e.m_email WHEN e.default_emailid = 'G' THEN e.g_email else '-' END) as Email_Id," +
                            //                                                  "(CASE WHEN e.default_Ph = 'F' THEN e.f_con_number WHEN e.default_Ph = 'M' THEN e.m_con_number WHEN " +
                            //                                                  "e.default_Ph = 'G' THEN e.g_con_number else '-' END) as PhoneNo,GROUP_CONCAT(distinct e.RELIGION) as RELIGION ,GROUP_CONCAT(distinct e.ucaste) as ucaste " +
                            //                                                  "from enx_tab2 a inner join user_details e on e.type = 'STD' and find_in_set(e.regnumber," +
                            //                                                  " (case when (a.col1= '0' or a.col1=null) then cast(a.col23 as varchar(1000)) else a.col1 end)) = 1 " +
                            //                                                  "and find_in_set(e.class_applied, a.col16)= 1 " +
                            //                                                  "inner join student_detail sd on sd.reg_no = e.regnumber and sd.type = 'STD'  and a.client_unit_id = sd.client_unit_id and " +
                            //                                                  "sd.academic_year_id = '" + Ac_Year_id + "' " +
                            //                                                  "inner join add_class c on sd.class_applied = c.add_class_id and c.type = 'EAC'  and sd.client_unit_id = c.client_unit_id " +
                            //                                                  "inner join master_setting d on sd.section = d.master_id and d.type = 'ECS' and find_in_set(sd.client_unit_id,d.client_unit_id)=1 " +
                            //                                                  "where(a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "' " +
                            //                                                  " group by (c.class||'-'||d.master_name),sd.class_applied,sd.section, sd.roll_number " +
                            //                                                  ",(case when (a.col1= '0' or a.col1=null) then cast(a.col23 as varchar(1000)) else a.col1 end),a.col2," +
                            //                                                  "a.col5,a.col6,a.col9,a.col10,a.col11,a.col4,a.col17,a.col7,a.col12,a.col13,a.col14,a.col15," +
                            //                                                  "a.col16,a.col8,a.ent_by,a.ent_date,a.edit_by,a.edit_date,a.vch_num,a.vch_date,a.client_id," +
                            //                                                  "a.client_unit_id,a.col3,e.regnumber,(e.first_name || ' ' || replace(e.middle_name, '0', '') || ' ' || replace(e.last_name, '0', ''))" +
                            //                                                  ",(replace(e.f_firstname, '0', '') || ' ' || replace(e.f_middlename, '0', '') || ' ' || replace(e.f_lastname, '0', ''))," +
                            //                                                  "(e.m_firstname || ' ' || replace(e.m_middlename, '0', '') || ' ' || replace(e.m_lastname, '0', ''))," +
                            //                                                  "(CASE WHEN e.default_emailid = 'F' THEN e.f_email WHEN e.default_emailid = 'M' THEN e.m_email WHEN e.default_emailid = 'G' THEN e.g_email else '-' END)," +
                            //                                                  "(CASE WHEN e.default_Ph = 'F' THEN e.f_con_number WHEN e.default_Ph = 'M' THEN e.m_con_number WHEN e.default_Ph = 'G' THEN e.g_con_number else '-' END)";


                            mq = "select (c.class||'-'||d.master_name) as classsection,nvl(sd.class_applied,'-') class_applied,nvl(sd.section,'-') section,nvl(sd.roll_number,'-') roll_number" +
                                                         " ,(case when (a.col1= '0' or a.col1=null) then cast(a.col23 as varchar(1000)) else a.col1 end) as col1 ," +
                                                         "a.col17,a.col7,a.col12,a.col13,a.col15,a.col16,a.col8" +
                                                         ",a.ent_by,a.ent_date,a.edit_by,a.edit_date,a.vch_num,a.vch_date,a.client_id," +
                                                         "a.client_unit_id,a.col3 as Mail_Subject_heading ,e.regnumber as reg_no" +
                                                         ",(e.first_name || ' ' || replace(e.middle_name, '0', '') || ' ' || replace" +
                                                         "(e.last_name, '0', '')) as Student_Name,(replace(e.f_firstname, '0', '') || ' ' || replace(e.f_middlename, '0', '') || ' ' || " +
                                                         "replace(e.f_lastname, '0', '')) as f_firstname,(e.m_firstname || ' ' || replace(e.m_middlename, '0', '') || ' ' || replace(e.m_lastname, '0', ''))" +
                                                         " as m_firstname,(CASE WHEN e.default_emailid = 'F' THEN e.f_email WHEN e.default_emailid = 'M' THEN e.m_email WHEN e.default_emailid = 'G' THEN e.g_email else '-' END) as Email_Id," +
                                                         "(CASE WHEN e.default_Ph = 'F' THEN e.f_con_number WHEN e.default_Ph = 'M' THEN e.m_con_number WHEN " +
                                                         "e.default_Ph = 'G' THEN e.g_con_number else '-' END) as PhoneNo,GROUP_CONCAT(distinct e.RELIGION) as RELIGION ,GROUP_CONCAT(distinct e.ucaste) as ucaste " +
                                                         "from enx_tab2 a LEFT join user_details e on e.type = 'STD' and find_in_set(e.regnumber," +
                                                         " (case when (a.col1= '0' or a.col1=null) then cast(a.col23 as varchar(1000)) else a.col1 end)) = 1 " +
                                                         "and find_in_set(e.class_applied, a.col16)= 1 " +
                                                         "left join student_detail sd on sd.reg_no = e.regnumber and sd.type = 'STD'  and a.client_unit_id = sd.client_unit_id and " +
                                                         "sd.academic_year_id = '" + Ac_Year_id + "' " +
                                                         "left join add_class c on sd.class_applied = c.add_class_id and c.type = 'EAC'  and sd.client_unit_id = c.client_unit_id " +
                                                         "left join master_setting d on sd.section = d.master_id and d.type = 'ECS' and find_in_set(sd.client_unit_id,d.client_unit_id)=1 " +
                                                         "where(a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd')|| a.type) = '" + URL + "' " +
                                                         " group by (c.class||'-'||d.master_name),sd.class_applied,sd.section, sd.roll_number " +
                                                         ",(case when (a.col1= '0' or a.col1=null) then cast(a.col23 as varchar(1000)) else a.col1 end)," +
                                                         "a.col17,a.col7,a.col12,a.col13,a.col15," +
                                                         "a.col16,a.col8,a.ent_by,a.ent_date,a.edit_by,a.edit_date,a.vch_num,a.vch_date,a.client_id," +
                                                         "a.client_unit_id,a.col3,e.regnumber,(e.first_name || ' ' || replace(e.middle_name, '0', '') || ' ' || replace(e.last_name, '0', ''))" +
                                                         ",(replace(e.f_firstname, '0', '') || ' ' || replace(e.f_middlename, '0', '') || ' ' || replace(e.f_lastname, '0', ''))," +
                                                         "(e.m_firstname || ' ' || replace(e.m_middlename, '0', '') || ' ' || replace(e.m_lastname, '0', ''))," +
                                                         "(CASE WHEN e.default_emailid = 'F' THEN e.f_email WHEN e.default_emailid = 'M' THEN e.m_email WHEN e.default_emailid = 'G' THEN e.g_email else '-' END)," +
                                                         "(CASE WHEN e.default_Ph = 'F' THEN e.f_con_number WHEN e.default_Ph = 'M' THEN e.m_con_number WHEN e.default_Ph = 'G' THEN e.g_con_number else '-' END)";
                            string cond = "";

                            DataTable dtfill = new DataTable();
                            dtfill = sgen.getdata(userCode, mq);

                            #region MOC 1
                            dt = sgen.getdata(userCode, "select 'SMS' as communication from dual Union all select 'Email' as communication from dual Union all select 'Portal' as communication from dual");
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    mod1.Add(new SelectListItem { Text = dr["communication"].ToString(), Value = dr["communication"].ToString() });
                                }
                            }
                            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

                            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClass_Actual(userCode, unitid_mst);    // class
                            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3 = sgen.BindSection(userCode, unitid_mst);   // section
                            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = cmd_Fun.caste(userCode, unitid_mst);   // caste
                            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = cmd_Fun.religion(userCode, unitid_mst);   // religion
                            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6 = cmd_Fun.mailcc(userCode);   // mail cc
                            #endregion
                            if (dtfill.Rows.Count > 0)
                            {
                                model = new List<Tmodelmain>();
                                sgen.SetSession(MyGuid, "reg_no", dtfill.Rows[0]["col1"].ToString());
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                for (int i = 0; i < dtfill.Rows.Count; i++)
                                {
                                    Tmodelmain tmm = new Tmodelmain();
                                    tmm.Col24 = dtfill.Rows[i]["classsection"].ToString();
                                    tmm.Col25 = dtfill.Rows[i]["roll_number"].ToString();
                                    tmm.Col26 = dtfill.Rows[i]["Student_Name"].ToString();
                                    tmm.Col27 = dtfill.Rows[i]["f_firstname"].ToString();
                                    tmm.Col28 = dtfill.Rows[i]["m_firstname"].ToString();
                                    tmm.Col29 = dtfill.Rows[i]["Email_Id"].ToString();
                                    tmm.Col30 = dtfill.Rows[i]["PhoneNo"].ToString();
                                    tmm.Col40 = dtfill.Rows[i]["reg_no"].ToString();
                                    tmm.Col41 = dtfill.Rows[i]["class_applied"].ToString();
                                    tmm.Col42 = dtfill.Rows[i]["Section"].ToString();
                                    tmm.Col9 = tm.Col9;
                                    tmm.Col10 = tm.Col10;
                                    tmm.Col11 = tm.Col11;
                                    tmm.Col12 = tm.Col12;
                                    tmm.Col13 = tm.Col13;
                                    tmm.Col14 = tm.Col14;
                                    tmm.Col15 = tm.Col15;
                                    tmm.Col43 = tm.Col43;
                                    tmm.Col43 = tm.Col43;
                                    tmm.TList1 = tm.TList1;
                                    tmm.TList2 = tm.TList2;
                                    tmm.TList3 = tm.TList3;
                                    tmm.TList4 = tm.TList4;
                                    tmm.TList5 = tm.TList5;
                                    tmm.TList6 = tm.TList6;
                                    model.Add(tmm);
                                }
                                try
                                {
                                    if (Convert.ToBoolean(dtfill.Rows[0]["col17"].ToString())) { model[0].Col21 = "2"; model[0].Col21 = "1"; }
                                    else { model[0].Col21 = "1"; model[0].Col21 = "2"; }
                                }
                                catch (Exception err) { model[0].Col21 = "1"; model[0].Col21 = "2"; }
                                if (dtfill.Rows[0]["col7"].ToString() == "None")
                                {
                                    model[0].Col18 = "N";
                                    dt = sgen.getdata(userCode, "select 'None' as communication from dual");
                                }
                                else
                                {
                                    model[0].Col18 = "Y";
                                    dt = sgen.getdata(userCode, "select 'SMS' as communication from dual Union all select 'Email' as communication from dual Union all select 'Portal' as communication from dual");
                                }
                                if (dtfill.Rows[0]["col12"].ToString() == "G")
                                {
                                    model[0].Col19 = "1";
                                    //model[0].Col19 = "2";
                                }
                                else
                                {
                                    //model[0].Col19 = "1";
                                    model[0].Col19 = "3";
                                }
                                mod1 = new List<SelectListItem>();
                                model[0].TList1 = mod1;
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod1.Add(new SelectListItem { Text = dr["communication"].ToString(), Value = dr["communication"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;

                                vch_num = dtfill.Rows[0]["vch_num"].ToString();
                                model[0].Col16 = dtfill.Rows[0]["vch_num"].ToString();
                                //model[0].Col18 = dtfill.Rows[0]["col17"].ToString();
                                //model[0].Col19 = dtfill.Rows[0]["col12"].ToString();
                                model[0].Col17 = dtfill.Rows[0]["Mail_Subject_heading"].ToString();
                                model[0].Col22 = dtfill.Rows[0]["col13"].ToString();
                                model[0].Col3 = dtfill.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dtfill.Rows[0]["ent_date"].ToString();
                                model[0].Col1 = dtfill.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dtfill.Rows[0]["client_unit_id"].ToString();
                                model[0].Col6 = dtfill.Rows[0]["vch_num"].ToString();
                                model[0].Col23 = dtfill.Rows[0]["col15"].ToString();
                                String[] L1 = System.String.Join(",", dtfill.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dtfill.Rows.OfType<DataRow>().Select(r => r["col16"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dtfill.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                // String[] L6 = System.String.Join(",", dtfill.Rows.OfType<DataRow>().Select(r => r["col14"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = tm.SelectedItems4;
                                model[0].SelectedItems5 = tm.SelectedItems5;
                                //model[0].SelectedItems6 = L6;
                                if (model[0].Col23 == "")
                                {
                                    model[0].Chk3 = true;
                                }
                                model[0].Col8 = "(client_id|| client_unit_id|| vch_num||to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'";
                                //ViewState["url"] = url;
                                //ScriptManager.RegisterStartupScript(this, this.GetType(), "abcd", "filldropdown('" + dtfill.Rows[0]["col16"].ToString() + "','ddl_class');" +
                                //    " filldropdown('" + dtfill.Rows[0]["col8"].ToString() + "','ddl_section'); filldropdown('" + dtfill.Rows[0]["ucaste"].ToString() + "','ddl_caste'); filldropdown('" + dtfill.Rows[0]["RELIGION"].ToString() + "','ddl_religion');", true);
                                model[0].Col13 = "Update";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                            }
                            else
                            {
                                ViewBag.vnew = "";
                                ViewBag.vresend = "";
                                ViewBag.vsavenew = "disabled = 'disabled'";
                                ViewBag.vedit = "disabled = 'disabled'";
                                ViewBag.vresave = "disabled = 'disabled'";
                                ViewBag.scripCall = "showmsgJS(1, 'Data Not Found', 0);";
                            }
                            break;
                    }
                    break;
                #endregion
                #region Datesheet
                case "datesheet":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            string mq1 = "select distinct a.subject_id,b.master_name as Subject from student_result a inner join master_setting b on a.Subject_Id=b.master_id" +
                                       " where a.type='class_subject' and a.academic_year_id='" + Ac_Year_id + "'  and a.client_unit_id='" + unitid_mst + "'" +
                                        " and b.type='ESW'  and find_in_set(a.client_unit_id,b.client_unit_id)=1 and a.Class_Id in (select distinct a.r_no as class_id from enx_tab a where  (a.client_id|| a.client_unit_id|| a.vch_num||" +
                                        " to_char(a.vch_date, 'yyyymmdd')|| a.type||a.col11)='" + URL + "' ) and" +
                                         " a.section_id in (select distinct a.ref_code as section_id from enx_tab a where  (a.client_id|| a.client_unit_id|| a.vch_num||" +
                                         " to_char(a.vch_date, 'yyyymmdd')|| a.type||a.col11)='" + URL + "' ) ";
                            string mq2 = "select 1 as Sub_status, a.ent_by,a.ent_date,a.vch_num, a.vch_date, a.col1 as subject_id,max(a.col2) as col2,to_char( min(a.date1),'" + sgen.Getsqldateformat() + "') as date1," +
                                "max(b.master_name) as Subject,max(a.col3) as col3,max(a.col4) as col4,max(a.col5) as col5,max(a.col6) as col6,max(a.col7)" +
                                " as col7,max(a.col8) as col8,GROUP_CONCAT( distinct a.r_no) as class_id,GROUP_CONCAT(distinct a.ref_code) as section_id," +
                                "GROUP_CONCAT(distinct cl.class||' '||sc.master_name) as Class_section,GROUP_CONCAT(distinct a.col1|| a.r_no||a.ref_code)" +
                                " as subclasssec ,a.col9,a.col10 from enx_tab a inner join master_setting b on a.col1 = b.master_id inner join add_class cl on" +
                                " a.r_no=cl.add_class_id and cl.type='EAC'  and a.client_unit_id=cl.client_unit_id " +
                                "inner join master_setting sc on a.ref_code=sc.master_id and sc.type='ECS' and" +
                                " find_in_set(a.client_unit_id,sc.client_unit_id )=1  where (a.client_id|| a.client_unit_id|| a.vch_num||" +
                                " to_char(a.vch_date, 'yyyymmdd')|| a.type||a.col11)='" + URL + "'  and b.type='ESW'  and find_in_set( a.client_unit_id,b.client_unit_id)=1" +
                                " group by  a.col1, a.ent_by,a.ent_date,a.vch_num, a.vch_date,a.col9,a.col10 ";
                            mq = "select nvl(a.Sub_status,0) as Sub_status, b.subject_id,b.subject, nvl(a.ent_by,'-') as ent_by ,nvl(to_char(a.ent_date,'" + sgen.GetSaveSqlDateFormat() + "'),'0') as ent_date " +
                                ",nvl(a.vch_num,'-') as vch_num, nvl(to_char(a.vch_date,'" + sgen.GetSaveSqlDateFormat() + "'),'0')  as vch_date , nvl(a.col2,'-') as col2,nvl(a.date1,'0')as date1," +
                                " nvl(a.col3,'-') as col3,nvl(col4,'-') as col4  ,nvl(col5,'-') as col5 ,nvl(col6,'-') col6" +
                                ",nvl(col7,'-') as col7,nvl(col8,'-') as col8,nvl(class_id,'-') as class_id ,nvl(section_id,'-') as section_id ,nvl(Class_section,'-') as Class_section " +
                                ",nvl(subclasssec,'-') as subclasssec,nvl(col9,'-') as col9,nvl(col10,'-') as  col10 from (" + mq1 + ") b left join (" + mq2 + ")a" +
                                " on a.subject_id=b.subject_id and a.subject=b.subject order by vch_num desc ";
                            // reena why these dropdown outside if condition (no need in if condition as they used outside the grid) ok
                            #region Class 1
                            TempData[MyGuid + "_Tlist1"] = mod1 = sgen.BindClass_Actual(userCode, unitid_mst);

                            #endregion
                            #region Section 2
                            TempData[MyGuid + "_Tlist2"] = mod2 = sgen.BindSection(userCode, unitid_mst);
                            //TempData[MyGuid + "_Tlist2"] = mod2;
                            #endregion
                            #region Frequency 3
                            // this is already in cmd
                            dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='EFQ'  and client_unit_id='0'");
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                }

                            }
                            TempData[MyGuid + "_Tlist3"] = mod3;
                            #endregion
                            #region ExamType 4
                            TempData[MyGuid + "_Tlist4"] = mod4 = cmd_Fun.examtype(userCode, unitid_mst);
                            //TempData[MyGuid + "_Tlist4"] = mod4;
                            #endregion
                            #region Subtype 5
                            mq1 = "select master_id,master_name from master_setting where master_name != 'Break' and master_name!= 'Assembly' and type = 'ECL' and find_in_set(client_unit_id ,'" + unitid_mst + "')=1";
                            DataTable dt1 = sgen.getdata(userCode, mq1);
                            TempData[MyGuid + "_Tlist5"] = mod5 = sgen.dt_to_selectlist(dt1);
                            //TempData[MyGuid + "_Tlist5"] = mod5;
                            #endregion
                            dt = sgen.getdata(userCode, mq);
                            model = new List<Tmodelmain>();
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    Tmodelmain tmm = new Tmodelmain();
                                    tmm.Col19 = dt.Rows[i]["Subject"].ToString();
                                    tmm.Col20 = dt.Rows[i]["Class_section"].ToString();
                                    tmm.Col26 = dt.Rows[i]["col2"].ToString();
                                    tmm.Col27 = dt.Rows[i]["subclasssec"].ToString();
                                    tmm.Col28 = dt.Rows[i]["subject_id"].ToString();
                                    tmm.Col21 = dt.Rows[i]["date1"].ToString();
                                    tmm.Col22 = dt.Rows[i]["col9"].ToString();
                                    tmm.Col23 = dt.Rows[i]["col10"].ToString();
                                    tmm.Col24 = dt.Rows[i]["col3"].ToString();
                                    tmm.Col25 = dt.Rows[i]["col4"].ToString();
                                    tmm.TList5 = mod5;
                                    string subject_type = dt.Rows[i]["col2"].ToString();
                                    string[] L5 = new string[] { subject_type };
                                    tmm.SelectedItems1 = tm.SelectedItems1;
                                    tmm.SelectedItems2 = tm.SelectedItems2;
                                    tmm.SelectedItems3 = tm.SelectedItems3;
                                    tmm.SelectedItems4 = tm.SelectedItems4;
                                    tmm.SelectedItems5 = L5;
                                    if (dt.Rows[i]["Sub_status"].ToString() == "0")
                                    {
                                        tmm.Chk1 = false;
                                    }
                                    else { tmm.Chk1 = true; }
                                    model.Add(tmm);
                                }
                                model[0].Col17 = dt.Rows[0]["col5"].ToString();
                                model[0].Col18 = dt.Rows[0]["col6"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type||col11)='" + URL + "'";
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                model[0].Col9 = tm.Col9;
                                model[0].TList1 = mod1;
                                model[0].TList2 = mod2;
                                model[0].TList3 = mod3;
                                model[0].TList4 = mod4;
                                String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["class_id"].ToString()).Distinct()).Split(',');
                                String[] L2 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["section_id"].ToString()).Distinct()).Split(',');
                                String[] L3 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col7"].ToString()).Distinct()).Split(',');
                                String[] L4 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["col8"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                model[0].SelectedItems2 = L2;
                                model[0].SelectedItems3 = L3;
                                model[0].SelectedItems4 = L4;
                            }
                            break;
                        case "PRINT":
                            mq = "select sf.master_name as frequencyname,et.master_name as Exam_Type, max(a.col2) as col2,to_char( min(a.date1,'" + sgen.Getsqldateformat() + "') as date1," +
                                    "max(b.master_name) as Subject,max(a.col3) as max_marks,max(a.col4) as min_marks,max(a.col5) as col5,max(a.col6) as col6,max(a.col7)" +
                                    " as col7,max(a.col8) as col8,GROUP_CONCAT( distinct a.r_no) as class_id,GROUP_CONCAT(distinct a.ref_code) as section_id," +
                                    "GROUP_CONCAT(distinct cl.class||' '||sc.master_name) as Class_section,GROUP_CONCAT(distinct a.col1|| a.r_no||a.ref_code)" +
                                    " as subclasssec ,a.col9 as FromTime,a.col10 as To_Time from enx_tab a inner join master_setting b on a.col1 = b.master_id inner join add_class cl on" +
                                    " a.r_no=cl.add_class_id and cl.type='EAC'  and a.client_unit_id=cl.client_unit_id " +
                                    "inner join master_setting sc on a.ref_code=sc.master_id and sc.type='ECS'  and" +
                                    " find_in_set(a.client_unit_id,sc.client_unit_id)=1 inner join master_setting sf on a.col7=sf.master_id  and sf.type='EFQ'" +
                                    "inner join master_setting et on a.col8=et.master_id and et.type='EEM'" +
                                    "  and find_in_set(a.client_unit_id,et.client_unit_id)=1   where (a.client_id|| a.client_unit_id|| a.vch_num||" +
                                    " to_char(a.vch_date, 'yyyymmdd')|| a.type||a.col11)='" + URL + "'  and b.type='ESW'  " +
                                    "and find_in_set(a.client_unit_id,b.client_unit_id)=1 group by  a.col1,sf.master_name,et.master_name,a.col9,a.col10";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.open_report_bydt_xml(userCode, dt, "Datesheet", "Date Sheet");
                                //sgen.open_report_byDs_xml(userCode, ds, tm.Col24, "Student Admit Card");
                                ViewBag.scripCall += "showRptnew('Date Sheet');";

                                //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
                                #region Class 1
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass_Actual(userCode, unitid_mst);

                                #endregion
                                #region Section 2
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);

                                #endregion
                                #region Frequency 3
                                dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='EFQ' and client_id='0' and client_unit_id='0'");
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                                #endregion
                                #region ExamType 4
                                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = cmd_Fun.examtype(userCode, unitid_mst);

                                #endregion
                                #region Subtype 5
                                mq1 = "select master_id,master_name from master_setting where master_name != 'Break' and master_name!= 'Assembly' and type = 'ECL' and client_unit_id = '" + unitid_mst + "'";
                                dt1 = sgen.getdata(userCode, mq1);
                                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = sgen.dt_to_selectlist(dt1);

                                #endregion

                                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                                if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                                if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                                if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                            }
                            else
                            {
                                sgen.showmsg(1, "Data Not Found", 2);
                            }
                            break;
                    }
                    break;
                #endregion
                #region std_confirm
                case "std_confirm":
                    switch (btnval.ToUpper())
                    {
                        case "ATTACHMENT":
                            sgen.SetSession(MyGuid, "std_attch", "(client_id || client_unit_id || rec_id || to_char(vch_date, 'yyyymmdd') || type) = '" + URL + "'");
                            ViewBag.scripCall += "expfile();";
                            //mq = "select * from file_tab where (client_id||client_unit_id||rec_id||to_char(vch_date, 'yyyymmdd')||type) in('" + URL + "')";
                            //DataTable dtval = sgen.getdata(userCode, mq);
                            //if (dtval.Rows.Count > 0)
                            //{
                            //    //for (int k = 0; k < dtval.Rows.Count; k++)
                            //    //{
                            //    string content_type = dtval.Rows[0]["col2"].ToString();
                            //    string file_name = dtval.Rows[0]["file_name"].ToString();
                            //    string file_path = dtval.Rows[0]["file_path"].ToString();
                            //    string file_title = dtval.Rows[0]["col1"].ToString();
                            //    System.Web.HttpResponse response = System.Web.HttpContext.Current.Response;
                            //    response.ClearContent();
                            //    response.Clear();
                            //    response.ContentType = content_type;
                            //    response.AddHeader("Content-Disposition", "attachment;filename=\"" + file_name + "\"");
                            //    byte[] data = System.IO.File.ReadAllBytes(Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/" + file_path));
                            //    response.BinaryWrite(data);
                            //    response.Flush();
                            //    response.End();
                            //    //}
                            //}
                            break;
                    }
                    break;
                #endregion
                #region mis_fee
                case "mis_fee":
                    switch (btnval.ToUpper())
                    {
                        case "STR":
                            // reena callback done
                            //mq = "select '0' as rec_id,a.vch_num,  a.vch_date,a.type,a.client_id,a.client_unit_id,a.ent_by,a.ent_date,a.edit_by," +
                            //         "a.edit_date, GROUP_CONCAT(a.class_id) as class_id,d.class,a.feetype_id as feetype,a.FeeHead_Id,b.feetypename,c.master_name as HeadName,a.Academic_year_Id,a.fee_amount," +
                            //         "to_char(min(a.valid_from),'" + sgen.Getsqldateformat() + "')  as Valid_From,to_char(min(a.valid_to),'" + sgen.Getsqldateformat() + "') as Valid_To  from " +
                            //         "school_fee_structure a,school_fee_type b, master_setting c,add_class d where a.class_id=d.add_class_id and a.type='EFS'  and  a.feehead_id=c.master_id and c.type='EFH' and" +
                            //         " (a.client_id|| a.client_unit_id|| a.vch_num||to_char(a.vch_date, 'yyyymmdd')|| a.type||a.master_type||a.class_id||a.FeeType_Id||a.FeeHead_Id)='" + URL + "' " +
                            //         " and b.client_unit_id='" + unitid_mst + "'  and c.client_unit_id='" + unitid_mst + "' and b.feetype_id=a.feetype_id" +
                            //         " and b.type='EEF' and a.master_type='B' and b.master_type='B' and c.master_type='B' and a.client_unit_id=" +
                            //         "d.client_unit_id group by a.feetype_id,a.feehead_id,b.feetypename,c.master_name ,a.vch_num,a.vch_date,a.type," +
                            //         "a.client_id,a.client_unit_id,a.ent_by,a.ent_date,a.edit_by,a.edit_date,d.class,a.feetype_id,a.Academic_year_Id ,a.fee_amount ";

                            mq = "select  a.vch_num,  a.vch_date, GROUP_CONCAT(a.class_id) as class_id,d.class,a.feetype_id as feetype,a.FeeHead_Id,b.feetypename" +
                                ",c.master_name as HeadName,a.fee_amount from " +
                                     "school_fee_structure a,school_fee_type b, master_setting c,add_class d where a.class_id=d.add_class_id and a.type='EFS'  and  a.feehead_id=c.master_id and c.type='EFH' and" +
                                     " (a.client_id|| a.client_unit_id|| a.vch_num||to_char(a.vch_date, 'yyyymmdd')|| a.type||a.master_type||a.class_id||a.FeeType_Id||a.FeeHead_Id)='" + URL + "' " +
                                     " and b.client_unit_id='" + unitid_mst + "'  and c.client_unit_id='" + unitid_mst + "' and b.feetype_id=a.feetype_id" +
                                     " and b.type='EEF' and a.master_type='B' and b.master_type='B' and c.master_type='B' and a.client_unit_id=" +
                                     "d.client_unit_id group by a.feetype_id,a.feehead_id,b.feetypename,c.master_name ,a.vch_num,a.vch_date," +
                                     "d.class,a.feetype_id,a.fee_amount ";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].Col18 = dt.Rows[0]["class"].ToString();
                                model[0].Col19 = dt.Rows[0]["class_id"].ToString();
                                model[0].Col23 = dt.Rows[0]["FeeHead_Id"].ToString();
                                model[0].Col22 = dt.Rows[0]["HeadName"].ToString();
                                model[0].Col21 = dt.Rows[0]["FeeType"].ToString();
                                model[0].Col20 = dt.Rows[0]["feetypename"].ToString();
                                model[0].Col24 = dt.Rows[0]["fee_amount"].ToString();
                                model[0].Col36 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col37 = dt.Rows[0]["vch_date"].ToString();

                            }
                            break;
                    }
                    break;
                #endregion
                #region fee_rpts
                case "fee_rpts":

                    switch (btnval.ToUpper())
                    {
                        case "RECEIPT":

                            sgen.SetSession(MyGuid, "Acadamic_Year", Ac_Year_id);
                            string rpt = sgen.seekval(userCode, "select client_name from master_setting where type='FRF' and classid='1'", "client_name");
                            sgen.FeeReceiptRpt(userCode, clientid_mst, unitid_mst, Ac_Year_id, rpt);
                            // ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                            ViewBag.scripCall += "showRptnew('Student Fees Reciept');";


                            break;
                        case "LEDGER":
                            string regcond = "", edicond = "", url = "";
                            string currdate = sgen.server_datetime_local(userCode);
                            currdate = sgen.Savedate(currdate, true);
                            // currdate = (Convert.ToDateTime(currdate)).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);

                            //currdate = sgen.Make_date(currdate).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture); //08042020

                            //string from_ac_dt = (Convert.ToDateTime(Ac_From_Date)).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                            string from_ac_dt = sgen.Make_datetime(Ac_From_Date).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture); //08042020

                            DateTime mydate = sgen.server_datetime_dt(userCode);


                            url = sgen.GetSession(MyGuid, "SSEEKVAL").ToString();

                            DataTable dtGrpdetail = new DataTable();

                            mq = "select b.class_applied,nvl(b.section,'-') as section,b.vch_num, a.sibling1_rollno,((e.FIRST_NAME)||' '||replace(e.MIDDLE_NAME,'0','')||' '||replace(e.LAST_NAME,'0','')) as Family_Group_Name," +
                                                                                  "c.Class as class_name,  nvl(d.master_name,'-') as Section_name, ((a.FIRST_NAME)||''||replace(a.MIDDLE_NAME,'0','')" +
                                                                                "||' '||replace(a.LAST_NAME,'0','')) as Student_Name,((a.f_firstname)||' '||replace(a.f_middlename,'0','')||" +
                                                                                "' '||replace(a.f_lastname,'0','') ) as Father_Name  ,a.GENDER as Gender,a.RegNo,a.RegNumber,nvl(b.RollNo,'0') as RollNo,nvl(b.Roll_number,'-')" +
                                                                                " as Roll_Number ,a.a_i_date,a.Status from student_detail b inner join user_details a on b.reg_no=a.regnumber " +
                                                                                "and a.type=b.type  and a.vch_num=b.vch_num  inner join add_class c on b.class_applied=c.add_class_id and" +
                                                                                " c.type='EAC'  and b.client_unit_id=c.client_unit_id  left join master_setting d" +
                                                                                " on b.section =d.master_id and d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                                                                                " inner join user_details e on a.sibling1_rollno=e.regnumber and e.type=b.type WHERE b.type='STD'" +
                                                                                "  and  b.client_unit_id='" + unitid_mst + "' and b.Academic_year_Id='" + Ac_Year_id + "'" +
                                                                                " and (b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)= '" + url + "' order by a.sibling1_rollno  ";
                            dtGrpdetail = sgen.getdata(userCode, mq);

                            if (dtGrpdetail.Rows.Count > 0)
                            {
                                string Class_id = dtGrpdetail.Rows[0]["class_applied"].ToString();
                                string Section_id = dtGrpdetail.Rows[0]["section"].ToString();
                                string RollNo = dtGrpdetail.Rows[0]["RollNo"].ToString();
                                string reg = dtGrpdetail.Rows[0]["RegNumber"].ToString();
                                string Student_id = dtGrpdetail.Rows[0]["Vch_num"].ToString();
                                string inactivedt = dtGrpdetail.Rows[0]["a_i_date"].ToString();
                                string stdstatus = dtGrpdetail.Rows[0]["status"].ToString();
                                string classsection = dtGrpdetail.Rows[0]["class_name"].ToString() + '-' + dtGrpdetail.Rows[0]["section_name"].ToString();



                                string ssval = sgen.seekval(userCode, "select regno from fees_detail where class_id='" + Class_id + "'  and  type='STD' and " +
                                                        "Academic_year_Id='" + Ac_Year_id + "' and regno='" + reg + "'  and client_unit_id='" + unitid_mst + "'", "regno");
                                if (ssval.Trim().Equals("0"))
                                {
                                    regcond = " class_id = '" + Class_id + "'  and type = 'STR' and " +
                                 "Academic_year_Id='" + Ac_Year_id + "'  and client_unit_id='" + unitid_mst + "' " +
                                 " and (case when (feetype_id||feehead_id)='001001' or  fee_amount>0 then 1 else to_number(due_date) end )>0";

                                }
                                else
                                {
                                    regcond = " class_id='" + Class_id + "'  and  type='STD' and " +
                                     "Academic_year_Id='" + Ac_Year_id + "' and regno='" + reg + "'  and client_unit_id='" + unitid_mst + "' " +
                                     " and (case when (feetype_id||feehead_id)='001001' or  fee_amount>0 then 1 else to_number(due_date) end )>0";
                                }
                                edicond = "type = 'EDI' and Academic_year_Id='" + Ac_Year_id + "' and regno='" + reg + "'  and client_unit_id='" + unitid_mst + "'";

                                mq = sgen.vw_fees_new(regcond, edicond) + " where RegNumber = '" + reg + "' order by due_dt";
                                string mq2 = "";
                                string mq1 = "select '-' Status, '-' as Receipt_No, class_id, studenttype,((first_name)|| ' '|| REPLACE(middle_name, '0','')|| ' '|| REPLACE(last_name,'0', '')) as Student_Name" +
                                        ",((f_firstname)|| ' '|| REPLACE(f_middlename, '0','')|| ' '||REPLACE(f_lastname,'0', '')) as Father_Name " +
                                        " , RegNumber, '0' as paid, Scholarship_id,  scholarship , feestatus, FeeDate,Fee_Month,null as Receipt_Date" +
                                    ",to_char(Due_Date1,'" + sgen.Getdateformat() + "') as Due_Date1 ,to_char(overdue_dt,'" + sgen.Getsqldatetimeformat() + "') overdue_dt ,HideDate,Month_id as month_idd,Month_name,Fee_Amount,FeeType_Id,Frequency_Id,FeeHead_Id,FrequencyName,FeeTypeName,HeadName,to_number(Receipt_Amount) as Receipt_Amount," +
                                    "PaidAmount,IntialStatus,havetransport,pick_point,drop_point, Email_id, Phoneno,due_date as due_day,overdue_date as overdue_day from (" + mq + ") a";




                                mq2 = "select (case when a.type='ERD' and (a.receipt_amount)>0 then 'Regular Fees' when a.type='ERD' and (a.receipt_amount)<0 then 'Reversible Fees' " +
                                "when a.type='ERC' then 'Concession Fees' else 'Mid Term Concession' End) as Status, a.Receipt_No, a.class_id, ud.std_type as studenttype ,((ud.first_name)|| ' '|| REPLACE(ud.middle_name, '0','')|| ' '||" +
                                   " REPLACE(ud.last_name,'0', '')) as Student_Name ,((ud.f_firstname)|| ' '|| REPLACE(ud.f_middlename, '0','')|| ' '||" +
                                   " REPLACE(ud.f_lastname,'0', '')) as Father_Name, a.RegNo as  RegNumber, '2' as paid , null as Scholarship_id,  " +
                                                          "(case when a.type in ('ERC','ERW') then Receipt_Amount else 0.00 end)+(a.Concession_Amount) as scholarship, '-' as feestatus,(to_char(a.DueDt,'yyyymm')||'01') as FeeDate," +
                                                          "('01/'|| to_char(a.DueDt, 'mm/yyyy')) as Fee_Month," +
                                                          " a.vch_date as Receipt_Date,to_char(a.DueDt,'" + sgen.Getdateformat() + "') as Due_Date1, to_char(Last_Day(a.DueDt), '" + sgen.Getsqldatetimeformat() + "') as overdue_dt,to_char(Last_Day(a.DueDt), '" + sgen.Getsqldateformat() + "') as HideDate ,a.Month_id as Month_idd,a.Month_name, 0 as Fee_Amount,a.Fee_type_id as FeeType_Id," +
                                                          "a.Frequency_Id,a.Fee_Head_id as FeeHead_Id,'Monthly' as FrequencyName,st.FeeTypeName, h.master_name as HeadName, Receipt_Amount ," +
                                                          "(case when a.type  in ('ERD') then Receipt_Amount else 0.00 end) as   PaidAmount,'Y' as IntialStatus,'-' as havetransport,'-' as pick_point," +
                                                          "'-' as drop_point,(CASE WHEN ud.default_emailid='F' THEN ud.f_email WHEN ud.default_emailid='M' THEN ud.m_email else ud.g_email END)" +
                                                          " as Email_Id ,(CASE WHEN ud.default_Ph='F' THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number else ud.g_con_number END) as " +
                                                          "PhoneNo ,0 as due_day,0 as overdue_day " +
                                                          " from student_receipt_detail a inner join user_details ud on  ud.RegNumber= a.RegNo and ud.type='STD' inner join master_setting h" +
                                                          " on a.Fee_Head_id=h.master_id and h.type='EFH' and a.client_unit_id=h.client_unit_id and h.master_type='Education Fees Head' and a.Fee_type_id=h.sectionid" +
                                                          " inner join school_fee_type st  on st.FeeType_Id = a.Fee_type_id and st.client_unit_id = a.client_unit_id and(st.master_type = ''" +
                               " or st.master_type = '0')  where  a.type in ('ERD','ERC','ERW')  and a.client_unit_id = '" + unitid_mst + "' " +
                                                          "and a.academic_year_id='" + Ac_Year_id + "' and a.regNo ='" + reg + "' and a.class_id='" + Class_id + "'";

                                mq = mq1 + " union all " + mq2;

                                mq = "select a.*,'" + classsection + "' as classname,m.Femaleratio as display_id " +
                                 "from (" + mq + ") a inner join master_setting m on a.month_idd =m.section_strength and m.type='MNT' " +
                                 "where (feetype_id||feehead_id)!='001001' " +
                                 "order by  m.Femaleratio,feetype_id,feeHead_id,fee_amount desc";

                                dt = new DataTable();
                                dt = sgen.getdata(userCode, mq);
                                DataTable dtmain = new DataTable();
                                dtmain = dt.Copy();

                                if (dt.Rows.Count > 0)
                                {

                                    string trnamt = "0";
                                    DataTable dttrn, dtmonths, dtthismonth = new DataTable();
                                    DataView dvv = dt.DefaultView;
                                    dtmonths = dvv.ToTable(true, "Month_name", "Month_idd");

                                    try
                                    {
                                        string pickpoint = sgen.seekval_dt(userCode, dt, "FeeTypeName", "Transport", "pick_point");
                                        string Droppoint = sgen.seekval_dt(userCode, dt, "FeeTypeName", "Transport", "drop_point");

                                        string mqt = "select  nvl(round(sum(Transamt)/2),0)  Transamt from (select  group_name as Transamt from master_setting where type='LCL' and" +
                                            "  client_unit_id='" + unitid_mst + "' and master_name='" + pickpoint + "'  and classid='" + Class_id + "' union all " +
                                            "select group_name as Transamt from master_setting where type = 'LCL'  and client_unit_id" +
                                            " = '" + unitid_mst + "' and master_name = '" + Droppoint + "'  and classid = '" + Class_id + "') a";

                                        dttrn = sgen.getdata(userCode, mqt);
                                        trnamt = dttrn.Rows[0][0].ToString();
                                    }
                                    catch (Exception err)
                                    {
                                        dttrn = new DataTable();
                                    }

                                    foreach (DataRow drm in dtmonths.Rows)
                                    {

                                        dvv = dt.DefaultView;
                                        dvv.RowFilter = "month_idd='" + drm["Month_idd"] + "'";
                                        dtthismonth = dvv.ToTable();

                                        #region Transport

                                        if (ssval.Trim().Equals("0"))
                                        {
                                            try
                                            {


                                                string havetrans = sgen.seekval_dt(userCode, dtthismonth, "FeeTypeName", "Transport", "havetransport");

                                                if (havetrans.ToLower().Trim() == "school")
                                                {

                                                    if ((dttrn.Rows.Count > 0) && (Convert.ToDecimal(dttrn.Rows[0]["Transamt"].ToString()) > 0))
                                                    {

                                                        int ind = sgen.seekval_dt_rowindex(dt, "month_idd='" + drm["Month_idd"] + "' and FeeTypeName ='Transport' and HeadName='Transport' ");
                                                        dt.Rows[ind - 1]["Fee_amount"] = dttrn.Rows[0]["Transamt"].ToString();



                                                        decimal pending = 0;
                                                        pending = Convert.ToDecimal(dt.Rows[ind - 1]["Fee_Amount"]) - (Convert.ToDecimal(dt.Rows[ind - 1]["Scholarship"]) + Convert.ToDecimal(dt.Rows[ind - 1]["Paidamount"]));
                                                        if (pending == 0)
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Paid";

                                                        }
                                                        else
                                                        {
                                                            dt.Rows[ind - 1]["Feestatus"] = "Pending";
                                                        }
                                                    }

                                                    else
                                                    {


                                                    }

                                                }
                                            }
                                            catch (Exception ex)
                                            { }
                                        }
                                        #endregion
                                    }

                                    DataTable dtalllbl = dt;
                                    DataTable lbldt = new DataTable();

                                    lbldt = dt.Clone();


                                    lbldt.Merge(dtalllbl);

                                    DataTable dtstatuswise = new DataTable();

                                    sgen.SetSession(MyGuid, "DTALL", null);

                                    Int16 k = 0;

                                    try
                                    {
                                        DateTime abcd = new DateTime(mydate.Year, mydate.Month, 1).AddMonths(1).AddDays(-1);

                                        dtstatuswise = dt.AsEnumerable().Where(w => (DateTime)w["due_date"] <= mydate)
                                                                 .Select(s => s).CopyToDataTable();



                                    }
                                    catch (Exception ex)
                                    {
                                        dtstatuswise = null;

                                    }

                                    //dvv = dt.DefaultView;
                                    //dvv.Sort = "RECEIPT_NO";
                                    //dt = dvv.ToTable();

                                    //rpt = "../../erp/schoolReports_Rpts/Fee_Ledger.rpt";
                                    rpt = "../schoolReports_Rpts/Fee_Ledger.rpt";
                                    sgen.open_report_bydt_xml(userCode, dt, "Fee_Ledger.rpt", "Fee Ledger");
                                    //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                                    ViewBag.scripCall += "showRptnew('Reports');";



                                }
                                else
                                {
                                    sgen.showmsg(1, "Data Doesnot exist!", 2);
                                }
                            }
                            break;
                    }
                    break;
                #endregion
                #region class sub
                case "class_sub":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            // reena callback done
                            //mq = "select  a.master_id,a.master_name,b.sub_catid as sub_catid from master_setting a left join (select a.client_id,a.client_unit_id,  " +
                            //            "a.subject_id as master_id, a.vch_date, a.vch_num,a.sub_catid,a.class_id,a.Ent_By, a.Ent_Date FROM student_result a " +
                            //            "WHERE  (a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type || a.academic_year_id) = '" + URL + "'" +
                            //            " ) b on  find_in_set(a.client_unit_id,b.client_unit_id)=1 and a.master_id = b.master_id where " +
                            //            "find_in_set(a.client_unit_id , '" + unitid_mst + "')=1  and a.type = 'ESW'";

                            mq = "select  a.master_id,b.sub_catid  from master_setting a left join (select  a.sub_catid,a.subject_id as master_id,a.client_unit_id" +
                                " FROM student_result a WHERE  (a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type || a.academic_year_id) = '" + URL + "'" +
                                        " ) b on  find_in_set(a.client_unit_id,b.client_unit_id)=1 and a.master_id = b.master_id where " +
                                        "find_in_set(a.client_unit_id , '" + unitid_mst + "')=1  and a.type = 'ESW'";

                            //DataTable dts = sgen.getdata(userCode, "select a.client_id,a.client_unit_id,max(a.vch_date) as vch_date,a.vch_num,a.class_id," +
                            //    "a.Ent_By, MAX(a.Ent_Date) AS ent_date,GROUP_CONCAT(distinct a.section_id) as  section_id FROM student_result a WHERE  " +
                            //    "(a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type || a.academic_year_id) " +
                            //    "= '" + URL + "' group by  a.client_id,a.client_unit_id, a.vch_num,a.class_id,a.Ent_By");

                            DataTable dts = sgen.getdata(userCode, "select a.client_id,a.client_unit_id,a.vch_num,a.class_id," +
                              "a.Ent_By, MAX(a.Ent_Date) AS ent_date,GROUP_CONCAT(distinct a.section_id) as  section_id FROM student_result a WHERE  " +
                              "(a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type || a.academic_year_id) " +
                              "= '" + URL + "' group by  a.client_id,a.client_unit_id, a.vch_num,a.class_id,a.Ent_By");
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass_Str(userCode, unitid_mst); ;


                                String[] L1 = System.String.Join(",", dts.Rows.OfType<DataRow>().Select(r => r["class_id"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                #region section

                                DataTable dtdd2 = sgen.getdata(userCode, "SELECT  master_id,master_name FROM master_setting where  type='ECS'  and" +
                                    " find_in_set(client_unit_id,'" + unitid_mst + "')=1 and master_id  in (select section_id from student_result where type='class_subject' and" +
                                    "    class_id='" + model[0].SelectedItems1.FirstOrDefault() + "' and  (client_id|| client_unit_id|| vch_num||" +
                                    " to_char(vch_date, 'yyyymmdd')|| type||academic_year_id)='" + URL + "' )   ");
                                if (dtdd2.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtdd2.Rows)
                                    {
                                        mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                    }
                                }
                                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                                String[] L2 = System.String.Join(",", dts.Rows.OfType<DataRow>().Select(r => r["section_id"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;
                                #endregion

                                model[0].Col1 = dts.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dts.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dts.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dts.Rows[0]["ent_date"].ToString();
                                // model[0].Col8 = "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type||col11)='" + URL + "'";
                                model[0].Col8 = "(client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type||academic_year_id) = '" + URL + "'";
                                model[0].Col10 = tm.Col10;
                                model[0].Col11 = tm.Col11;
                                model[0].Col12 = tm.Col12;
                                model[0].Col14 = tm.Col14;
                                model[0].Col15 = tm.Col15;
                                model[0].Col16 = dts.Rows[0]["vch_num"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col100 = "Update & New";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col123 = "Update & Ne<u>w</u>";
                                var tm1 = model.FirstOrDefault();
                                model = new List<Tmodelmain>();
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {

                                    Tmodelmain tmm = new Tmodelmain();
                                    tmm.TList3 = mod3;
                                    tmm.Col10 = tm.Col10;
                                    tmm.Col11 = tm.Col11;
                                    tmm.Col12 = tm.Col12;
                                    tmm.Col14 = tm.Col14;
                                    tmm.Col15 = tm.Col15;
                                    tmm.Col16 = tm1.Col16;
                                    tmm.Col9 = tm.Col9;
                                    tmm.Col8 = tm.Col8;
                                    tmm.Col3 = tm.Col3;
                                    tmm.Col4 = tm.Col4;
                                    tmm.Col13 = tm.Col13;
                                    tmm.Col100 = tm.Col100;
                                    tmm.Col121 = tm.Col121;
                                    tmm.Col122 = tm.Col122;
                                    tmm.Col123 = tm.Col123;
                                    tmm.TList1 = tm1.TList1;
                                    tmm.TList2 = tm1.TList2;
                                    tmm.SelectedItems1 = tm1.SelectedItems1;
                                    tmm.SelectedItems2 = tm1.SelectedItems2;
                                    model.Add(tmm);
                                    if (dt.Rows[i]["Sub_CatId"].ToString() == "002")
                                    {
                                        mq = "select a.master_name as master_id,b.master_name as master_name from master_setting a,master_setting b where a.master_type='opt_subject' and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                                        " and a.master_name =b.master_id and b.type='ESW'  and a.client_unit_id='" + unitid_mst + "'and find_in_set(b.client_unit_id,'" + unitid_mst + "')=1" +
                                        "   and (a.status='Y' or a.status='' or a.status='0') and (b.status='Y' or b.status='' or b.status='0')";
                                    }
                                    else
                                    {
                                        mq = "select master_id,master_name from master_setting where " +
                                        "  find_in_set(client_unit_id,'" + unitid_mst + "')=1  and type='ESW' and (status='Y' or status='')  and " +
                                        "master_id not in (select a.master_name  from master_setting a where a.master_type='opt_subject' " +
                                        "and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'  and client_unit_id='" + unitid_mst + "' )";
                                    }
                                    DataTable dtt = sgen.getdata(userCode, mq);
                                    var mymod = sgen.dt_to_selectlist(dtt);

                                    #region subject cat
                                    DataTable dtdd3 = new DataTable();//Subject Category
                                    dtdd3 = sgen.getdata(userCode, "select master_id,master_name from master_setting where " +
                                     " type='ESC' and find_in_set(client_unit_id,'" + unitid_mst + "')=1 ");
                                    var mymod3 = sgen.dt_to_selectlist(dtdd3);
                                    #endregion
                                    string[] L3 = new string[] { dt.Rows[i]["Sub_CatId"].ToString() };
                                    string[] L4 = new string[] { dt.Rows[i]["master_id"].ToString() };
                                    model[i].SelectedItems3 = L3;
                                    model[i].SelectedItems4 = L4;
                                    if (dt.Rows[i]["Sub_CatId"].ToString() == "")
                                    {
                                        model[i].SelectedItems4 = new string[] { "" };
                                        model[i].SelectedItems3 = new string[] { "" };
                                    }
                                    TempData[MyGuid + "_Tlist3"] = model[i].TList3 = mymod3;
                                    TempData[MyGuid + "_Tlist4"] = model[i].TList4 = mymod;

                                }


                            }
                            break;
                    }
                    break;
                #endregion
                #region result_rpts
                case "result_rpts":
                    dt = new DataTable();
                    DataTable datatable = new DataTable();
                    mq = "select b.*,a. master_name as FrequencyName,a.ExamType, a.min_marks from(select a.RollNo as Ds_Ref, sd.roll_number," +
                " a.rec_id,a.position,a.total_marks, a.Class_Id,a.Reg_no as Reg_Number,a.Subject_Id,a.Marks,a.vch_num," +
                " a.vch_date,a.ent_by,a.ent_date,b.master_name as Sub, b.master_name as Subject_Name , COALESCE(a.reg_no, '') as RegNumber" +
                ",(replace(ud.first_name, '0', '')|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '')) as Student_Name," +
                "ud.f_firstname as Father_Name,c.class as class_name,a.Section_Id,d.master_name as Section ,e.marks as Subject_Total_Marks,a.client_id," +
                "a.client_unit_id from student_result a INNER join  user_details ud on a.reg_no = ud.regnumber and ud.type = 'STD'" +
                " inner join student_detail sd on a.reg_no = sd.Reg_no  and a.academic_year_id = sd.academic_year_id and a.class_id = sd.class_applied " +
                "and a.section_id = sd.section and sd.type = 'STD' and  a.client_unit_id = sd.client_unit_id inner join " +
                " (select master_id, master_name from  master_setting where type = 'ESW'   and find_in_set(client_unit_id,'" + unitid_mst + "')=1 " +
                " UNION" +
                " select  master_id, master_name from master_setting where type= 'EST'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1) b" +
                " on b.master_id = a.Subject_Id inner join add_class c on a.class_id = c.add_class_id  and" +
                " c.client_unit_id = a.client_unit_id inner join master_setting d on a.Section_Id = d.master_id  " +
                "and find_in_set(a.client_unit_id,d.client_unit_id)=1 and d.type = 'ECS'inner join(select subject_id, marks from student_result a  " +
                " where (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type||a.academic_year_id)= '" + URL + "'" +
                " and a.academic_year_id='" + Ac_Year_id + "' and reg_no = '-') e on e.subject_id = a.subject_id where" +
                " (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type||a.academic_year_id)= '" + URL + "'" +
                " and a.academic_year_id='" + Ac_Year_id + "' order by a.Subject_Id) b left outer join(select a.col4 as min_marks, a.col1," +
                " (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')|| a.type||a.col11) as fstr,b.master_name,c.master_name as ExamType" +
                " from enx_tab a inner join  master_setting b on a.col7=b.master_id  and b.type='EFQ'" +
                " inner join master_setting c on a.col8=c.master_id and c.type='EEM'  and find_in_set(a.client_unit_id,c.client_unit_id)=1 " +
                "where a.type='EDS'  and a.client_unit_id='" + unitid_mst + "') a on b.Ds_Ref=a.fstr and a.col1=b.subject_id";


                    dt = sgen.getdata(userCode, mq);


                    switch (btnval.ToUpper())
                    {
                        case "PRINT":
                            if (dt.Rows.Count > 0)
                            {
                                //string rpt = "../../erp/schoolReports_Rpts/student_result_tbl.rpt";
                                string rpt = "../schoolReports_Rpts/student_result_tbl.rpt";
                                sgen.open_report_bydt(userCode, dt, rpt, "Student Result Report");
                                sgen.SetSession(MyGuid, "reportmenuid", null);
                                ViewBag.scripCall += "showRptnew('Student Result Report')";
                                //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                            }
                            else
                            {
                                ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";

                            }
                            break;
                        case "PRINT1":
                            if (dt.Rows.Count > 0)
                            {
                                string rpt = "Student_Result_1.rpt";
                                sgen.open_report_bydt(userCode, dt, rpt, "Student Result Report");
                                sgen.SetSession(MyGuid, "reportmenuid", null);
                                ViewBag.scripCall += "showRptnew('Student Result Report');";

                                //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                            }
                            else
                            {
                                ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";

                            }
                            break;

                    }
                    break;
                #endregion
                #region teacher_sub
                case "teacher_sub":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            // reena why dropdown outside if condition(as they are outside the repeater)

                            DataTable dtt = sgen.getdata(userCode, "select '' as class_id,'' as Subject_id,'' as Priority from dual");
                            sgen.SetSession(MyGuid, "BASEDT", dtt);
                            sgen.SetSession(MyGuid, "EDMODE", "Y");
                            #region teacher_name


                            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.username(userCode);
                            #endregion
                            #region classteacher
                            dt = sgen.getdata(userCode, "select DISTINCT ( a.class_applied||'-'||a.section ) as classid_sectionid, (  b.class||' '||c.master_name )" +
                           " as class_section ,cast(a.class_applied as int) as class_id from student_detail a,add_class b,master_setting c where  a.class_applied = b.add_class_id " +
                           "and a.section=c.master_id and c.type='ECS' and a.academic_year_id='" + Ac_Year_id + "' and a.client_unit_id='" + unitid_mst + "'" +
                           " and a.client_unit_id=b.client_unit_id and find_in_set( a.client_unit_id,c.client_unit_id)=1  order by 3");
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    mod2.Add(new SelectListItem { Text = dr["class_section"].ToString(), Value = dr["classid_sectionid"].ToString() });
                                }
                            }
                            #endregion

                            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                            mq = "select a.class_teac,  a.fstr ,a.priority ,a.isclassteacher,a.teacher_id,a.first_name,a.class_sec class_id,a.class,a.subjectname,a.subject_id" +
                                   ",group_concat(distinct class_teacher_id) as class_teacher_id from( SELECT group_concat(distinct class_id||'-'||section_id)class_sec,teacher_subject.class_teac, (teacher_subject.client_id ||" +
                                   " teacher_subject.client_unit_id || teacher_subject.vch_num || to_char(teacher_subject.vch_date, 'yyyymmdd') ||" +
                                   " teacher_subject.type) as fstr, teacher_subject.Isclassteacher, teacher_subject.Teacher_Id, teacher_subject.priority, " +
                                   "((user_details.first_name) || ' ' || (user_details.last_name))  AS First_name, GROUP_CONCAT(distinct teacher_subject.Class_Id)" +
                                   " AS Class_Id, GROUP_CONCAT(distinct add_class.class) as class , GROUP_CONCAT(distinct teacher_subject.section_Id) AS section_Id, " +
                                   "GROUP_CONCAT(distinct b.master_name) as subjectname," +
                                   "GROUP_CONCAT(distinct teacher_subject.Subject_Id) as Subject_Id , ((teacher_subject.Class_Teacher_Id) ||'-'||" +
                                   "(teacher_subject.Section_Teacher_Id )) as class_Teacher_Id  from user_details,teacher_subject,add_class,master_setting b " +
                                   " where user_details.vch_num=teacher_subject.Teacher_Id and teacher_subject.Class_Id= add_class.add_class_id and " +
                                   "   b.type= 'ESW' and b.master_id= teacher_subject.Subject_Id and teacher_subject.client_id= '" + clientid_mst + "' " +
                                   " and teacher_subject.client_unit_id= '" + unitid_mst + "'  and (teacher_subject.client_id||teacher_subject.client_unit_id|| " +
                                   "  teacher_subject.vch_num||to_char(teacher_subject.vch_date,'yyyymmdd')||teacher_subject.type)='" + URL + "' " +
                                   " and teacher_subject.client_id= user_details.client_id and teacher_subject.client_unit_id= user_details.client_unit_id " +
                                   " and teacher_subject.client_id= add_class.client_id and teacher_subject.client_unit_id= add_class.client_unit_id  and " +
                                   "  teacher_subject.client_id= b.client_id and teacher_subject.client_unit_id= b.client_unit_id  group by class_teac, priority, Teacher_Id," +
                                   " row_num, class_teacher_id, section_teacher_id, teacher_subject.client_id|| teacher_subject.client_unit_id||" +
                                   "teacher_subject.vch_num||to_char(teacher_subject.vch_date,'yyyymmdd')||teacher_subject.type ,teacher_subject.Teacher_Id," +
                                   "((user_details.first_name)||' '||(user_details.last_name)),teacher_subject.Isclassteacher ) a group by a.class_teac, a.fstr," +
                                   " a.isclassteacher, a.teacher_id, a.first_name, a.class_id, a.class,a.subjectname,a.subject_id,a.section_Id ,a.priority ,class_sec";

                            dtt = sgen.getdata(userCode, mq);
                            if (dtt.Rows.Count > 0)
                            {
                                #region class                            
                                dt = sgen.getdata(userCode, "select DISTINCT ( a.class_applied||'-'||a.section ) as classid_sectionid, (  b.class||' '||c.master_name )" +
                                   " as class_section ,cast(a.class_applied as int) as class_id from student_detail a,add_class b,master_setting c where  a.class_applied = b.add_class_id " +
                                   "and a.section=c.master_id and c.type='ECS' and a.academic_year_id='" + Ac_Year_id + "' and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "'" +
                                   " and a.client_id=b.client_id and a.client_unit_id=b.client_unit_id and a.client_id=c.client_id and a.client_unit_id=c.client_unit_id  order by 3");
                                if (dt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        mod3.Add(new SelectListItem { Text = dr["class_section"].ToString(), Value = dr["classid_sectionid"].ToString() });
                                    }
                                }

                                sgen.SetSession(MyGuid, "classsection", dt);
                                #endregion
                                #region subject

                                mod4 = cmd_Fun.lib_subject(userCode, unitid_mst);
                                #endregion
                                #region priority
                                dt = sgen.getdata(userCode, "SELECT rownum FROM XMLTABLE('1 to 5')");
                                if (dt.Rows.Count > 0)
                                {
                                    if (dt.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in dt.Rows)
                                        {
                                            mod5.Add(new SelectListItem { Text = dr["rownum"].ToString(), Value = dr["rownum"].ToString() });
                                        }
                                    }
                                }
                                #endregion
                                String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["Teacher_Id"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;

                                String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["class_teac"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems2 = L2;

                                model = new List<Tmodelmain>();
                                for (Int32 i = 0; i < dtt.Rows.Count; i++)

                                {

                                    Tmodelmain tmm = new Tmodelmain();
                                    if (dtt.Rows[0]["Isclassteacher"].ToString().Trim() == "Y") { tmm.Col17 = "1"; } else { tmm.Col17 = "2"; }

                                    tmm.Col10 = tm.Col10;
                                    tmm.Col11 = tm.Col11;
                                    tmm.Col12 = tm.Col12;
                                    tmm.Col14 = tm.Col14;
                                    tmm.Col15 = tm.Col15;
                                    tmm.Col16 = tm.Col16;
                                    tmm.Col9 = tm.Col9;
                                    tmm.Col8 = tm.Col8;

                                    tmm.Col3 = tm.Col3;
                                    tmm.Col4 = tm.Col4;
                                    tmm.Col13 = "Update";
                                    tmm.Col100 = "Update & New";
                                    tmm.Col121 = "U";
                                    tmm.Col122 = "<u>U</u>pdate";
                                    tmm.Col123 = "Update & Ne<u>w</u>";
                                    tmm.TList1 = mod1;
                                    tmm.TList2 = mod2;
                                    tmm.SelectedItems1 = L1;
                                    tmm.SelectedItems2 = L2;
                                    model.Add(tmm);


                                    string[] L3 = System.String.Join(",", dtt.Rows[i]["class_Id"].ToString()).Split(','); ;
                                    model[i].SelectedItems3 = L3;
                                    string[] L4 = System.String.Join(",", dtt.Rows[i]["subject_id"].ToString()).Split(','); ;
                                    model[i].SelectedItems4 = L4;
                                    string[] L5 = System.String.Join(",", dtt.Rows[i]["priority"].ToString()).Split(','); ;
                                    model[i].SelectedItems5 = L5;

                                    TempData[MyGuid + "_Tlist3"] = model[i].TList3 = mod3;
                                    TempData[MyGuid + "_Tlist4"] = model[i].TList4 = mod4;
                                    TempData[MyGuid + "_Tlist5"] = model[i].TList5 = mod5;
                                }
                                DataTable dts = sgen.getdata(userCode, "select * from teacher_subject a where 1=1  and (a.client_id|| a.client_unit_id|| a.vch_num||" +
                                   " to_char(a.vch_date, 'yyyymmdd')|| a.type)='" + URL + "' ");
                                if (dts.Rows.Count > 0)
                                {


                                    model[0].Col1 = dts.Rows[0]["client_id"].ToString();
                                    model[0].Col2 = dts.Rows[0]["client_unit_id"].ToString();
                                    model[0].Col3 = dts.Rows[0]["ent_by"].ToString();
                                    model[0].Col4 = dts.Rows[0]["ent_date"].ToString();
                                    model[0].Col8 = "(client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type||academic_year_id) = '" + URL + "'";


                                }

                            }
                            break;
                    }
                    break;
                #endregion
                #region grade
                case "grade":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            mq = "select a.client_id,a.client_unit_id,a.ent_by,a.ent_date,a.rec_id, (case when  length(a.vch_num)=6 then a.vch_num else lpad(a.vch_num, 6, 0) end ) vch_num," +
                               "a.vch_date,b.class,a.GradePostion_Per,a.grade,a.position from student_result a inner join " +
                               "add_class b on a.class_id = b.add_class_id where  (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type) ='" + URL + "'" +
                               " order by a.rec_id desc";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model[0].LTM1 = new List<Tmodelmain>();
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    Tmodelmain ltm = new Tmodelmain();
                                    ltm.Col1 = dt.Rows[i]["id"].ToString();
                                    ltm.Col2 = dt.Rows[i]["GradePostion_Per"].ToString();
                                    ltm.Col3 = dt.Rows[i]["Grade"].ToString();
                                    ltm.Col4 = dt.Rows[i]["Position"].ToString();
                                    ltm.SelectedItems1 = new string[] { dt.Rows[i]["relation"].ToString() };
                                    ltm.TList1 = mod1;
                                    model[0].LTM1.Add(ltm);
                                }

                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col16 = dt.Rows[0]["vch_num"].ToString();
                                model[0].Col13 = "Update";
                                model[0].Col8 = "client_id||client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";

                            }
                            break;
                    }
                    break;
                #endregion
                #region fine setting
                case "late_fee":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "WAVEOFF":
                            mq = "select '0' as rec_id,vch_num, to_char(convert_tz(vch_date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')" +
                                    " as vch_date,type,client_id,client_unit_id,ent_by,ent_date,edit_by,edit_date" +
                                    " ,group_concat(distinct ref_code) as CLASS_id,col1 as FineType ,col2 as col1,col3 as col2,col4,col5 from enx_tab where type='EFS' and " +
                                    " (client_id||client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)='" + URL + "'" +
                                    " group by vch_num,vch_date,type,client_id,client_unit_id,ent_by,ent_date,edit_by,edit_date,col1,col2,col3,col4,col5";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                model = getedit(model, dt, URL);
                                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.lib_class(userCode, unitid_mst);
                                String[] L1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => r["CLASS_id"].ToString()).Distinct()).Split(',');
                                model[0].SelectedItems1 = L1;
                                sgen.SetSession(MyGuid, "EDMODE", "Y");
                                model[0].Col1 = dt.Rows[0]["client_id"].ToString();
                                model[0].Col2 = dt.Rows[0]["client_unit_id"].ToString();
                                model[0].Col3 = dt.Rows[0]["ent_by"].ToString();
                                model[0].Col4 = dt.Rows[0]["ent_date"].ToString();
                                model[0].Col7 = dt.Rows[0]["rec_id"].ToString();
                                model[0].Col8 = "client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')|| type = '" + URL + "'";
                                if (btnval == "EDIT")
                                {
                                    model[0].Col16 = dt.Rows[0]["VCH_NUM"].ToString().Trim();
                                    model[0].Col17 = dt.Rows[0]["vch_date"].ToString().Trim();
                                    model[0].Col13 = "Update";
                                    model[0].Col100 = "Update & New";
                                    model[0].Col121 = "U";
                                    model[0].Col122 = "<u>U</u>pdate";
                                    model[0].Col123 = "Update & Ne<u>w</u>";
                                }
                                else
                                {
                                    model[0].Col13 = "Save";
                                    model[0].Col100 = "Save & New";
                                    model[0].Col121 = "S";
                                    model[0].Col122 = "<u>S</u>ave";
                                    model[0].Col123 = "Save & Ne<u>w</u>";
                                }
                                model[0].Col18 = dt.Rows[0]["finetype"].ToString().Trim() == "S" ? "1" : "0";
                                model[0].LTM1 = new List<Tmodelmain>();
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    Tmodelmain ltm2 = new Tmodelmain();
                                    if (i == 0)
                                    {
                                        ltm2.Col1 = dt.Rows[0]["col5"].ToString(); //
                                        ltm2.Col18 = dt.Rows[0]["col1"].ToString();  //
                                        ltm2.Col19 = dt.Rows[0]["col2"].ToString();  //
                                        ltm2.Col20 = dt.Rows[0]["col4"].ToString(); //
                                    }
                                    else
                                    {
                                        ltm2.Col1 = dt.Rows[i]["col5"].ToString(); //
                                        ltm2.Col18 = dt.Rows[i]["col1"].ToString();  //
                                        ltm2.Col19 = dt.Rows[i]["col2"].ToString();  //
                                        ltm2.Col20 = dt.Rows[i]["col4"].ToString(); //
                                    }
                                    model[0].LTM1.Add(ltm2);
                                }
                            }
                            break;
                    }
                    break;
                    #endregion
            }
            return model;
        }
        #endregion
        //=========makequery============
        #region make query
        public void Make_query(string viewname, string title, string btnval, string seektype, string Myguid = "")
        {
            FillMst(Myguid);
            btnval = btnval.ToUpper();
            sgen.SetSession(MyGuid, "btnval", btnval);
            string cmd = "";
            clientid_mst = sgen.GetCookie(MyGuid, "clientid_mst");
            unitid_mst = sgen.GetCookie(MyGuid, "unitid_mst");
            switch (viewname.ToLower())
            {
                #region ExamName
                case "examname":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type as fstr," +
                                "master_name as Exam_Name, (CASE when status='Y' THEN 'Active' when status = '' THEN 'Active' else 'Inactive' end) as Status, " +
                                "classid as Promoted_To from master_setting where" +
                                "  client_unit_id='" + unitid_mst + "' and (type='EEM'or type='DDEEM') order by vch_num desc";
                            break;
                    }
                    break;
                #endregion
                #region leave
                case "leaveapplication":
                    if (sgen.GetSession(MyGuid, "RTR_MID") != null)
                    {
                        mid_mst = sgen.GetSession(MyGuid, "RTR_MID").ToString();

                    }
                    switch (btnval.ToUpper())
                    {
                        case "REG":
                            if (sgen.GetSession(MyGuid, "RTYPE_MST") != null)
                            {
                                type = sgen.GetSession(MyGuid, "RTYPE_MST").ToString().Trim();
                                if (type == "TLA")
                                {
                                    cmd = "SELECT a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                        "a.first_name||' '||Replace(a.MIDDLE_NAME,'0','')||' '||Replace(a.last_name,'0','') AS Teacher_Name," +
                                        "b.master_name as Designation,c.master_name as Department FROM user_details a inner join master_setting b" +
                                        " on a.designation=b.master_id and b.type='MDG' inner join master_setting c on a.DEPARTMENT=c.master_id and" +
                                        " c.type='MDP'  where a.Type='CPR'  and a.client_unit_id='" + unitid_mst + "'" +
                                        " and a.status='active'";
                                }
                                else if (type == "BLA")
                                {
                                    // reena line 3 and last line ask from brijesh
                                    cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr" +
                                        ",emp.emp_code as Employee_Code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as " +
                                        "Employee_Name,to_char(emp.dob, '" + sgen.Getsqldateformat() + "') as DOB,emp.gender as Gender,to_char(emp.st_dt, '" + sgen.Getsqldateformat() + "') as date_of_join," +
                                        "emp.contact_no as ContactNo,dp.master_name emp_dept, nvl(dg.master_name, '-') emp_desig" +
                                        " from emp_master emp inner join master_setting dp on dp.master_id = emp.emp_dept and dp.type = 'MDP' and " +
                                        " find_in_set(emp.client_unit_id, dp.client_unit_id)= 1 left" +
                                        " join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' " +
                                        " and find_in_set(emp.client_unit_id,dg.client_unit_id)= 1  where  emp.client_unit_id " +
                                        "in ('" + unitid_mst + "') and emp.type = 'EMP' and emp.emp_status != 'R' and(case when to_char(emp.ex_dt, 'yyyy') = '1900' then " +
                                        "1 when emp.ex_dt > to_date(to_char(utc_timestamp()), '" + sgen.Getsqldateformat() + "') then 1 else 0 end)= 1";
                                }
                                else if (type == "ELA")
                                {

                                    string cond = "";
                                    if (mid_mst.Trim() == "13000.11")
                                    {
                                        mq = "select sibling2_rollno from user_details where vch_num='" + Convert.ToInt32(userid_mst) + "' and client_unit_id='" + unitid_mst + "'";
                                        string familyid = sgen.getstring(userCode, mq);
                                        cond = "and a.sibling2_rollno='" + familyid.Trim() + "'";


                                    }
                                    cmd = "select b.client_id|| b.client_unit_id|| b.vch_num|| to_char(b.vch_date,'yyyymmdd')||b.type as fstr, c.Class as Class_Name,  d.master_name as Section, " +
                                        "(a.FIRST_NAME)||' '||replace(a.MIDDLE_NAME,'0','')||' '||replace(a.LAST_NAME,'0','') as Student_Name," +
                                        "(a.f_firstname)||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name" +
                                        "  ,a.Gender ,a.RegNumber as Reg_Number,b.Roll_number as Roll_Number ,a.Status" +
                          " from student_detail b INNER JOIN user_details a on a.regnumber=b.reg_no and a.type= b.type and a.vch_num=b.vch_num and  a.status='active' inner join add_class c" +
                          " on c.add_class_id=b.class_applied  and c.type='EAC'  and b.client_unit_id=c.client_unit_id inner join master_setting d on b.section =d.master_id and d.type='ECS'" +
                          " and find_in_set(b.client_unit_id,d.client_unit_id)=1  WHERE b.type='STD'  and b.client_unit_id='" + unitid_mst + "'  and b.academic_year_id='" + Ac_Year_id + "' " +
                          "  and b.section IS NOT Null and b.Roll_Number Is NOT Null " + cond + " order by b.CLASS_APPLIED ,d.master_name";
                                }
                            }
                            break;
                        case "VIEW":
                        case "EDIT":
                            if (sgen.GetSession(MyGuid, "RTYPE_MST") != null)
                            {
                                type = sgen.GetSession(MyGuid, "RTYPE_MST").ToString().Trim();
                                if (type == "ELA")
                                {
                                    string cond = "";
                                    if (mid_mst.Trim() == "13000.11")
                                    {
                                        mq = "select sibling2_rollno from user_details where vch_num='" + Convert.ToInt32(userid_mst) + "'";
                                        string familyid = sgen.getstring(userCode, mq);
                                        cond = "and ud.sibling2_rollno='" + familyid.Trim() + "'";


                                    }

                                    cmd = @"SELECT en.client_unit_id|| en.vch_num|| to_char(en.vch_date,'yyyymmdd')||en.type as fstr,en.vch_num as doc_no, REPLACE(ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME,'0','')|| ' '|| ud.last_name,'0','') as Student_Name," +
                "cl.class as Class,sec.master_name as Section,sd.roll_number as RollNo, " +
                "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type," +
                "ms.master_name as Reason,en.col6 as Remark,en.col7 as Status, " +
                "to_char(en.date1, '" + sgen.Getsqldateformat() + "') as From_Date, " +
                "to_char(en.date2, '" + sgen.Getsqldateformat() + "') as To_Date," +
                "nvl(ap.FIRST_NAME|| ' '|| replace(ap.MIDDLE_NAME,'0','')|| ' '|| replace(ap.last_name,'0',''), '-') as Approved_By " +
                "from enx_tab en " +
                "INNER JOIN user_details ud on en.col1 = ud.RegNumber and ud.type = 'STD' " +
                "LEFT OUTER JOIN user_details ap on en.col8 = ap.vch_num and ap.type = 'CPR' " +
                "INNER JOIN master_setting ms on en.col5 = ms.master_id and ms.type = 'ELM' and find_in_set( en.client_unit_id , ms.client_unit_id)=1   " +
                "INNER JOIN student_detail sd on sd.Reg_no= en.col1 and sd.type= 'STD' and sd.client_unit_id= en.client_unit_id   " +
                "INNER JOIN add_class cl on sd.CLASS_APPLIED= cl.add_class_id  and cl.type= 'EAC'  and sd.client_unit_id= cl.client_unit_id  " +
                "INNER JOIN master_setting sec on sd.section= sec.master_id and sec.type= 'ECS'  and find_in_set(sd.client_unit_id,sec.client_unit_id )=1 " +
                "where en.col7='Pending' and en.type = 'ELA'  and en.client_unit_id = '" + unitid_mst + "' " + cond + " and to_date(to_char(en.vch_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
              "and to_date('" + Ac_To_Date + "','" + sgen.Getsqldatetimeformat() + "') ";
                                }
                                else if (type == "BLA")
                                {
                                    cond = "";
                                    if (!role_mst.ToUpper().Equals("OWNER"))
                                    {
                                        string emp_code = sgen.getstring(userCode, "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type from emp_master where client_unit_id='" + unitid_mst + "' and type='EMP' and  vch_num " +
                                  "=(select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' )");

                                        cond = " and (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) = '" + emp_code + "' ";
                                    }
                                    // reena line 2 (brijesh)
                                    cmd = "SELECT en.client_unit_id|| en.vch_num|| to_char(en.vch_date,'yyyymmdd')||en.type as fstr,en.vch_num doc_no,en.col1 as employee_code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', ''))  as employee_name,en.col9 as department,EN.COL11 as designation,en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') " +
                                        "as To_Leave_Type,en.col6 as Remark,en.col7 as Status,ms.master_name as reason,to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date,to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date from enx_tab en INNER JOIN master_setting ms on en.col5 = ms.master_id and ms.type = 'ELM' " +
                                        " and find_in_set(en.client_unit_id,ms.client_unit_id)=1 inner join emp_master emp on en.col1= emp.emp_code and emp.type='EMP' " +
                                        "and emp.client_unit_id = '" + unitid_mst + "' " + cond + "  where en.type = 'BLA'  and en.client_unit_id = '" + unitid_mst + "'" +
                                        " and to_date(to_char(en.vch_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
              "and to_date('" + Ac_To_Date + "','" + sgen.Getsqldatetimeformat() + "') ";
                                }
                                else if (type == "TLA")
                                {
                                    cmd = "select en.client_unit_id|| en.vch_num|| to_char(en.vch_date,'yyyymmdd')||en.type as fstr,en.vch_num doc_no,ud.vch_num as teacher_id,REPLACE(ud.FIRST_NAME|| ' '|| ud.MIDDLE_NAME|| ' '|| ud.last_name,'0','') as Teacher_Name," +
                                    " en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type," +
                                    "to_char(en.date1, '" + sgen.Getsqldateformat() + "') as From_Date" +
                                    ", to_char(en.date2, '" + sgen.Getsqldateformat() + "') as To_Date " +
                                    ",en.col6 as Remark,en.col7 as Status,ms.master_name as Reason,nvl(ap.FIRST_NAME|| ' '|| ap.MIDDLE_NAME|| ' '|| ap.last_name, '-')" +
                                    " as Approved_By from enx_tab en INNER JOIN user_details ud on en.col1 = ud.vch_num and ud.type = 'CPR' INNER JOIN master_setting ms " +
                                    "on en.col5 = ms.master_id and ms.type = 'ELM'  and find_in_set(en.client_unit_id,ms.client_unit_id)=1 " +
                                    " LEFT OUTER JOIN user_details ap on en.col8 = ap.vch_num and ap.type = 'CPR'  where en.col7='Pending' and en.type='TLA' " +
                                    " and en.client_unit_id='" + unitid_mst + "' and to_date(to_char(en.vch_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
              "and to_date('" + Ac_To_Date + "','" + sgen.Getsqldatetimeformat() + "') ";
                                }
                            }
                            break;

                        case "EMPDETAIL":
                            cmd = "select (emp.client_id||emp.client_unit_id||emp.vch_num||to_char(emp.vch_date,'yyyymmdd')||emp.type) as fstr,emp.emp_code as Emp_Code," +
                        "emp.old_empcode Old_EmpCode,(emp.FIRST_NAME|| ' '|| REPLACE(emp.MIDDLE_NAME,'0','')|| ' '||REPLACE(emp.LAST_NAME,'0','')) as Emp_Name," +
                        "nvl(dg.master_name,'-') as designation,nvl(dp.master_name,'-') as department,emp.f_name as Father_Name,emp.gender as Gender, " +
                        "to_char(emp.st_dt,'" + sgen.Getsqldateformat() + "') as Date_Of_Joining" +
                        " from emp_master emp left join master_setting dp on dp.master_id=emp.emp_dept and dp.type='MDP' and find_in_set(dp.client_unit_id,'" + unitid_mst + "')=1 " +
                        "left join master_setting dg on dg.master_id = emp.emp_desig and dg.type = 'MDG' and find_in_set(dg.client_unit_id,'" + unitid_mst + "')= 1 WHERE emp.type= 'EMP' " +
                        "and emp.client_unit_id= '" + unitid_mst + "' and emp.emp_status='Y' order by emp.emp_code asc";
                            break;
                    }
                    break;
                #endregion
                #region RoomName
                case "er_master":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type as  fstr," +
                                "master_name as Room_Name,classid as Floor,sectionid as No_Of_Seats,(Case when status='Y' then 'Active' Else 'Inactive' END) as Status from master_setting where" +
                                " (type='ERM' OR type='DDERM')  and client_unit_id='" + unitid_mst + "' order by vch_num desc";
                            break;
                    }
                    break;
                #endregion
                #region RoomAllocation
                case "er_allocation":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT DISTINCT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as  fstr," +
                                " d.Class,e.master_name as Section, b.master_name || '('||b.classid ||')' || 'Floor' as Roomname,b.sectionid as" +
                                " No_Of_Seats,c.master_name as Exam_Type FROM  enx_tab2 a inner join master_setting b on b.master_id= a.col2 and" +
                                " b.type='ERM' and  a.client_unit_id=b.client_unit_id inner join master_setting c" +
                                " on a.col5=c.master_id and c.type='EEM' and find_in_set(a.client_unit_id,c.client_unit_id)=1 INNER JOIN " +
                                "add_class d on a.col6=d.add_class_id and d.type='EAC' and  a.client_unit_id=d.client_unit_id  " +
                                "inner join master_setting e on a.col7=e.master_id and e.type='ECS'  and" +
                                " find_in_set(a.client_unit_id,e.client_unit_id)=1 WHERE  a.type='ERA'  and a.client_unit_id='" + unitid_mst + "'";
                            break;
                        case "ADD2":
                            if ((sgen.GetSession(MyGuid, "SelectClass") != null) && (sgen.GetSession(MyGuid, "SelectSection") != null))
                            {
                                cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr, b.master_name as FrequencyName, c.master_name as Exam_Type," +
                     "to_char( min(a.date1),'" + sgen.Getsqldateformat() + "') as Exam_From," +
                     " to_char( max(a.date1),'" + sgen.Getsqldateformat() + "') as Exam_To " +
                     "  from enx_tab a inner join master_setting b on a.col7=b.master_id and b.type='EFQ' " +
                     "   inner join master_setting c on a.col8 =c.master_id and c.type='EEM'" +
                     "  and  a.client_unit_id= c.client_unit_id where a.type='EDS' '" +
                     " and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + sgen.GetSession(MyGuid, "SelectClass").ToString() + "'" +
                     " and a.ref_code='" + sgen.GetSession(MyGuid, "SelectSection").ToString() + "' and a.col11='" + Ac_Year_id + "' " +
                     "group by  a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type , b.master_name, c.master_name";
                            }
                            break;
                    }
                    break;
                #endregion
                #region Student Attendance
                case "student_attendence":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            if (sgen.GetSession(MyGuid, "R_ATT").ToString() != null)
                            {
                                if (sgen.GetSession(MyGuid, "R_ATT").ToString() == "STD")
                                {
                                    cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr, b.class, c.master_name as Section," +
                               " to_char(min(a.atten_date),'" + sgen.Getsqldateformat() + "') as From_Date" +
                               ",to_char(max(a.atten_date),'" + sgen.Getsqldateformat() + "') as To_Date, " +
                               "d.First_name ||' ' || Replace(d.middle_name,'0','') || ' '|| Replace(d.last_name,'0','') as Ent_By, " +
                               "to_char( convert_tz( a.ent_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Ent_Date from student_attendance a" +
                               " inner join add_class b on  a.class_id=b.add_class_id and b.type='EAC' and  find_in_set(a.client_unit_id,b.client_unit_id)=1" +
                               " inner join master_setting c on a.section_id=c.master_id and  c.type='ECS' and find_in_set(a.client_unit_id,c.client_unit_id)=1  " +
                               "   inner join user_details d on  a.ent_by =d.vch_num" +
                               " where   a.type='STD' and find_in_set(a.Client_unit_id,'" + unitid_mst + "')=1 and " +
                               " a.Academic_year_Id='" + Ac_Year_id + "' " +
                               "  group by a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type,b.class, c.master_name, " +
                               "d.First_name || ' ' || Replace(d.middle_name, '0', '') || ' ' || Replace(d.last_name, '0', '')," +
                               " to_char(convert_tz(a.ent_date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')";
                                }
                                if (sgen.GetSession(MyGuid, "R_ATT").ToString() == "TEA")
                                {
                                    cmd = " select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr" +
                                   ",e.First_name ||' ' || Replace(e.middle_name,'0','') || ' '|| Replace(e.last_name,'0','') as Teacher_Name," +
                                   " to_char(a.atten_date,'" + sgen.Getsqldateformat() + "') as Attendance_Date" +
                                   ",a.First_Half,a.Second_Half, d.First_name ||' ' || Replace(d.middle_name,'0','') " +
                                   "|| ' '|| Replace(d.last_name,'0','') as Ent_By, to_char( convert_tz( a.Ent_Date,'UTC','" + sgen.Gettimezone() + "')," +
                                   "'" + sgen.Getsqldateformat() + "')as Ent_Date from student_attendance a inner join user_details d on  " +
                                   "a.ent_by =d.vch_num  inner join user_details e on  a.reg_id=e.vch_num  and e.type='CPR' where " +
                                   "a.type='TEA' and find_in_set(a.Client_unit_id,'" + unitid_mst + "')=1 and  a.Academic_year_Id='" + Ac_Year_id + "' ";
                                }
                            }
                            break;
                        case "VIEW":
                            if (sgen.GetSession(MyGuid, "R_ATT").ToString() != null)
                            {
                                if (sgen.GetSession(MyGuid, "R_ATT").ToString() == "STD")
                                {
                                    cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr, " +
                                        "b.class, c.master_name as Section,e.First_name ||' ' || Replace(e.middle_name,'0','') || ' '|| Replace(e.last_name,'0','') as Student_Name," +
                                " to_char( a.atten_date,'" + sgen.Getsqldateformat() + "') as Attendance_Date,a.First_Half,a.Second_half," +
                                " d.First_name ||' ' || Replace(d.middle_name,'0','') || ' '|| Replace(d.last_name,'0','') as Ent_By," +
                                " to_char( a.Ent_Date,'" + sgen.Getsqldateformat() + "')as Ent_Date from student_attendance a" +
                                " inner join add_class b on a.class_id=b.add_class_id and b.type='EAC' and find_in_set(a.client_unit_id,b.client_unit_id)=1  inner join master_setting c" +
                                "  on a.section_id=c.master_id and c.type='ECS' and find_in_set(a.client_unit_id,c.client_unit_id)=1 inner join " +
                                "user_details d on a.ent_by =d.vch_num inner join  user_details e on a.student_id=e.vch_num and e.type='STD' where a.type='STD' and find_in_set(a.Client_unit_id,'" + unitid_mst + "')=1 and a.Academic_year_Id='" + Ac_Year_id + "' ";
                                }
                                if (sgen.GetSession(MyGuid, "R_ATT").ToString() == "TEA")
                                {
                                    cmd = " select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd'),a.type as fstr" +
                                    ",e.First_name ||' ' || Replace(e.middle_name,'0','') || ' '|| Replace(e.last_name,'0','') as Teacher_Name," +
                                    " to_char( a.atten_date,'" + sgen.Getsqldateformat() + "') as Attendance_Date" +
                                    ",a.First_Half,a.Second_Half, d.First_name ||' ' || Replace(d.middle_name,'0','') " +
                                    "|| ' '|| Replace(d.last_name,'0','') as Ent_By, to_char( a.Ent_Date," +
                                    "'" + sgen.Getsqldateformat() + "')as Ent_Date from student_attendance a inner join user_details d on  a.ent_by =d.vch_num  inner join user_details e on  a.reg_id=e.vch_num   and e.type='CPR' where a.type='TEA' and find_in_set(a.Client_unit_id,'" + unitid_mst + "')=1 and  a.Academic_year_Id='" + Ac_Year_id + "'" +
                                    "  ";
                                }
                            }
                            break;
                    }
                    break;
                #endregion               
                #region ac_yr
                case "ac_yr":
                    switch (btnval.ToUpper())
                    {
                        case "VIEW":
                            cmd = "SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr, a.Academic_Year," +
                      "to_char(a.From_Date,'" + sgen.Getsqldateformat() + "') as From_Date," +
                      "to_char(a.To_Date,'" + sgen.Getsqldateformat() + "') as To_Date," +
                      "b.First_name ||' ' || replace(b.middle_name,'0','') || ' '|| replace(b.last_name,'0','') as Ent_By,to_char( convert_tz( a.Ent_Date,'UTC','" + sgen.Gettimezone() + "')," +
                      "'" + sgen.Getsqldateformat() + "') as Ent_Date from  add_academic_year a,user_details b where a.ent_by = b.vch_num " +
                      " and a.client_id='" + clientid_mst + "'  and  a.type='ACY' order by a.vch_num  ";
                            break;
                    }
                    break;
                #endregion
                #region AdmitCard
                case "std_cards":
                    switch (btnval.ToUpper())
                    {
                        case "ADD2":
                            //if ((Session["SelectClass"] != null) && (Session["SelectSection"] != null))
                            {
                                cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                    " b. Master_name FrequencyName, c.master_name as Exam_Type," +
                     "to_char( min(a.date1),'" + sgen.Getsqldateformat() + "') as Exam_From," +
                     " to_char( max(a.date1),'" + sgen.Getsqldateformat() + "' ) as Exam_To " +
                     "  from enx_tab a inner join master_setting b on a.col7=b.master_id " +
                     " and b.type='EFQ' inner join master_setting c on a.col8 =c.master_id and c.type='EEM'" +
                     "  and  a.client_unit_id= c.client_unit_id where a.type='EDS' " +
                     " and a.client_unit_id='" + unitid_mst + "'" +
                     "  group by  a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd'),a.type , b.master_name, c.master_name";
                            }
                            break;
                    }
                    break;
                #endregion
                #region Teacher Holiday Master
                case "teac_hm":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            cmd = "SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                " a.Holiday_Name, (to_char(min(a.holiday_frm),'" + sgen.Getsqldateformat() + "')) holiday_from " +
                                ",(to_char(min(a.holiday_to),'" + sgen.Getsqldateformat() + "')) Holiday_To FROM holiday_master a " +
                                "WHERE a.type='TEA'  and a.client_unit_id='" + unitid_mst + "' and a.academic_year_id=" +
                                "'" + Ac_Year_id + "' Group By a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type,a.Holiday_Name ";
                            break;
                        case "VIEW":
                            cmd = "SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                " d.First_name ||' ' || Replace(d.middle_name,'0','') || ' '|| Replace(d.last_name,'0','')" +
                                " as Teacher_Name,  a.Holiday_Name, to_char(a.Holiday_frm,'" + sgen.Getsqldateformat() + "')" +
                                "  as Holiday_From , to_char(a.Holiday_to,'" + sgen.Getsqldateformat() + "') as Holiday_To" +
                                "  FROM holiday_master a inner Join user_details d on a.teacher_id=d.vch_num and d.type='CPR' " +
                                "WHERE a.type='TEA'  and a.client_unit_id='" + unitid_mst + "' and a.academic_year_id='" + Ac_Year_id + "' ";
                            break;
                    }
                    break;
                #endregion
                #region Teacher Weekly Off
                case "teac_wo":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":

                            cmd = "SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                " d.First_name ||' ' || Replace(d.middle_name,'0','') || ' '|| Replace(d.last_name,'0','') as Teacher_Name," +
                                "(case when a.IsMonday = 1 then 'Weekly Off' else 'Working' end) as Monday," +
                        "(CASE WHEN a.IsTuesday=1 THEN 'Weekly Off'  else 'Working' end) as Tuesday," +
                        "(case  when a.IsWednesday=1 then 'Weekly Off' else 'Working' end) as Wednesday," +
                        "(case  when a.IsThursday=1 then 'Weekly Off' else 'Working' end) as Thursday," +
                        "(case  when a.IsFriday=1 then 'Weekly Off' else 'Working' end) as Friday," +
                        "(case  when a.IsSaturday=1 then 'Weekly Off' else 'Working' end) as Saturday," +
                        "(case  when a.IsSunday=1 then 'Weekly Off' else 'Working' end) as Sunday " +
                        "FROM add_class a inner Join user_details d on a.class=d.vch_num and d.type='CPR' " +
                                "WHERE a.type='TWO'  and a.client_unit_id='" + unitid_mst + "' ";
                            break;
                    }
                    break;
                #endregion                
                #region std_reg
                case "std_registration":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            cmd = "select sad.client_id|| sad.client_unit_id|| sad.vch_num|| to_char(sad.vch_date, 'yyyymmdd')|| sad.type as fstr,sad.vch_num as Temp_id,sad.student_status as Status," +
                               "sad.FIRST_NAME|| ' '|| REPLACE(sad.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(sad.LAST_NAME, '0', '') as Student_Name," +
                               "sad.f_firstname|| ' '|| REPLACE(sad.f_middlename, '0', '')|| ' '|| REPLACE(sad.f_lastname, '0', '') as Father_Name,cl.class as Class_Name,ad.academic_year as Academic_Year from student_applicant_details sad " +
                               "left outer join add_class cl on sad.class_applied=cl.add_class_id  and sad.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                               "left outer join add_academic_year ad on sad.usession=ad.academic_year_id and sad.client_unit_id= ad.client_unit_id and ad.type= 'ACY' WHERE  sad.client_unit_id= '" + unitid_mst + "' and sad.type= 'STD' and sad.student_status<>'permanent' and usession='" + Ac_Year_id + "' order by sad.vch_num desc";
                            break;
                        case "VIEW":
                            cmd = "select sad.client_id|| sad.client_unit_id|| sad.vch_num|| to_char(sad.vch_date, 'yyyymmdd')|| sad.type as fstr,sad.vch_num as Temp_id,sad.student_status as Status," +
                                "sad.FIRST_NAME|| ' '|| REPLACE(sad.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(sad.LAST_NAME, '0', '') as Student_Name," +
                                "sad.f_firstname|| ' '|| REPLACE(sad.f_middlename, '0', '')|| ' '|| REPLACE(sad.f_lastname, '0', '') as Father_Name," +
                                "sad.m_firstname|| ' '|| REPLACE(sad.m_middlename, '0', '')|| ' '|| REPLACE(sad.m_lastname, '0', '') as Mother_Name," +
                                "sad.g_firstname|| ' '|| REPLACE(sad.g_middlename, '0', '')|| ' '|| REPLACE(sad.g_lastname, '0', '') as Gaurdian_Name," +
                                "(case when to_char(sad.dob, '" + sgen.Getsqldateformat() + "') ='01/01/1900' then '-' else to_char(sad.dob, '" + sgen.Getsqldateformat() + "')end) as DOB," +
                                "sad.blood_grp,sad.gender as Gender,cl.class as Class_Name,ad.academic_year as Academic_Year,sad.place_of_birth as Birth_Place," +
                                "sad.main_language as Mother_Tongue,sad.adhaar_id as Adhaar_No,nvl(rl.master_name,'-') as Religion,nvl(cc.master_name,'-') as Caste," +
                                "sad.issibling as Is_Sibling,sad.sibling2_rollno as Sibling_Grp_Id,sad.isfamily as Is_Family,sad.sibling1_reg_no as Family_Grp_Id," +
                                "sad.scholarship as Scholarship,sad.role as Role,sad.user_id as User_id,sad.prev_school_name as Last_School," +
                                "sad.istransfer as Is_Transfer,sad.havetransport as Have_Transport,sad.regnumber as  Reg_Number,sad.srn_no as SRN_No,sad.withdrawl_no as Withdrawl_No," +
                                "sad.enrollment_no as Enrollment_No,(case when to_char(sad.F_dob, '" + sgen.Getsqldateformat() + "') ='01/01/1900' then '-' else to_char(sad.f_dob, '" + sgen.Getsqldateformat() + "')end) as F_DOB," +
                                "sad.f_email as F_Email,sad.f_adhaar_id as F_Adhaar_No,nvl(fqa.master_name,'-') as f_quali,sad.f_occupation as F_Occupation,sad.f_designation as F_Desig,sad.f_org_name as F_Org,sad.f_annual_income as F_Annual_Income," +
                                "sad.f_adhaar_Id as F_AdhaarNo,sad.f_con_number as F_ContactNo,sad.f_alumni_type as F_Alumni," +
                                "(case when to_char(sad.m_dob, '" + sgen.Getsqldateformat() + "') ='01/01/1900' then '-' else to_char(sad.m_dob, '" + sgen.Getsqldateformat() + "')end) as M_DOB," +
                                "sad.m_email as M_Email,sad.m_adhaar_id as M_Adhaar_No,nvl(mqa.master_name,'-') as m_quali,sad.m_occupation as M_Occupation," +
                                "sad.m_designation as M_Desig,sad.m_org_name as M_Org,sad.m_annual_income as M_Annual_Income,sad.m_adhaar_id as M_AdhaarNo,sad.m_con_number as M_ContactNo,sad.m_alumni_type as M_Alumni," +
                                "(case when to_char(sad.g_dob, '" + sgen.Getsqldateformat() + "') ='01/01/1900' then '-' else to_char(sad.g_dob, '" + sgen.Getsqldateformat() + "')end) as G_DOB," +
                                "sad.g_email as G_Email,sad.g_adhaar_id as G_Adhaar_No,nvl(gqa.master_name,'-') as g_qualif,sad.g_occupation as G_Occupation," +
                                "sad.g_designation as G_Desig,sad.g_org_name as G_Org,sad.g_adhaar_id as G_AdhaarNo,sad.g_con_number as G_ContactNo,sad.g_alumni_type as G_Alumni " +
                                "from student_applicant_details sad " +
                                "left outer join add_class cl on sad.class_applied=cl.add_class_id  and sad.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                                "left outer join add_academic_year ad on sad.usession=ad.academic_year_id and  sad.client_id= ad.client_id and ad.type= 'ACY' " +
                                "left outer join master_setting fqa on sad.f_qualification=fqa.master_id  and find_in_set(sad.client_unit_id,fqa.client_unit_id)=1 and fqa.type= 'EQU' " +
                                "left outer join master_setting mqa on sad.m_qualification=mqa.master_id  and find_in_set(sad.client_unit_id, mqa.client_unit_id)=1 and mqa.type= 'EQU' " +
                                "left outer join master_setting gqa on sad.g_qualification=gqa.master_id  and find_in_set(sad.client_unit_id, gqa.client_unit_id)=1 and gqa.type= 'EQU' " +
                                "left outer join master_setting cc on sad.ucaste=cc.master_id and cc.type= 'ECT' " +
                                "left outer join master_setting rl on sad.religion=rl.master_id and rl.type= 'ERT' " +
                                "left outer join (select distinct country_name, alpha_2 from country_state) cs on cs.alpha_2=sad.nationality and cs.alpha_2=sad.f_nationality and cs.alpha_2=sad.m_nationality and cs.alpha_2=sad.g_nationality " +
                                "WHERE  sad.client_unit_id= '" + unitid_mst + "' and sad.type= 'STD' and sad.student_status<>'permanent' and usession='" + Ac_Year_id + "' order by sad.vch_num desc";
                            break;
                        case "FREG":
                            cmd = "select distinct (b.vch_num|| to_char(b.vch_date, 'yyyymmdd')|| b.type) as fstr,c.Class as Class_Name,b.FIRST_NAME|| ' '||" +
                         " REPLACE(b.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(b.LAST_NAME, '0', '') as student_Name,b.f_firstname|| ' '|| " +
                         "replace(b.f_middlename, '0', '')|| ' '|| replace(b.f_lastname, '0', '') as Father_Name,b.m_firstname|| ' '|| " +
                         "REPLACE(b.m_middlename, '0', '')||' '|| REPLACE(b.m_lastname, '0', '') as Mother_Name,b.GENDER ,a.Reg_No from student_detail a inner join" +
                         " user_details b on a.reg_no = b.regnumber and a.type = b.type INNER join add_class c on a.class_applied = c.add_class_id and " +
                         " a.client_unit_id = c.client_unit_id WHERE a.type = 'STD' and c.type = 'EAC' and b.issibling='N' " +
                         " and a.client_unit_id = '" + unitid_mst + "' and a.academic_year_id='" + Ac_Year_id + "' order by 1";
                            break;
                        case "SIBREG":
                            // reena why case in name replace ok
                            cmd = "select distinct (b.vch_num|| to_char(b.vch_date, 'yyyymmdd')|| b.type) as fstr,c.Class as Class_Name,b.FIRST_NAME  || ' '||" +
                     "(case when length(b.middle_name)=1 then replace(b.middle_NAME, '0', '') else b.middle_name end)|| ' '|| (case when length(b.last_name)=1 then replace(b.last_NAME, '0', '') else b.last_NAME end)  student_Name,b.f_firstname|| ' '|| " +
                     "(case when length(b.f_middlename)=1 then replace(b.F_middlename, '0', '') else b.F_middlename end)|| ' '|| (case when length(b.f_lastname)=1 then replace(b.F_lastname, '0', '') else b.F_lastname end) as Father_Name,b.m_firstname|| ' '|| " +
                     "(case when length(b.m_middlename)=1 then replace(b.m_middlename, '0', '') else b.m_middlename end)|| ' '|| (case when length(b.m_lastname)=1then replace(b.m_lastname, '0', '') else b.m_lastname end) as Mother_Name,b.GENDER ,a.Reg_No from student_detail a inner join" +
                     "  user_details b on a.reg_no = b.regnumber and a.type = b.type INNER join add_class c on a.class_applied = c.add_class_id and " +
                     " a.client_unit_id = c.client_unit_id WHERE a.type = 'STD' and c.type = 'EAC' and b.issibling='N' " +
                     " and a.client_unit_id = '" + unitid_mst + "' and a.academic_year_id='" + Ac_Year_id + "' order by 1";
                            break;
                        case "ADD1":
                        case "ADD2":
                            cmd = "SELECT (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr," +
                                "v_name as village,teh_name as tehsil,district_name,state_name,country_name FROM country_state where type = 'CSV' " + sgen.GetSession(MyGuid, "ACOND_MST") + "";
                            break;
                        case "ENQ":
                            cmd = "select (sad.client_id|| sad.client_unit_id|| sad.enq_no|| to_char(sad.enq_date, 'yyyymmdd')|| sad.type1) as fstr,sad.enq_no as Temp_id," +
                                "sad.FIRST_NAME|| ' '|| REPLACE(sad.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(sad.LAST_NAME, '0', '') as Student_Name," +
                                "sad.f_firstname|| ' '|| REPLACE(sad.f_middlename, '0', '')|| ' '|| REPLACE(sad.f_lastname, '0', '') as Father_Name," +
                                "sad.m_firstname|| ' '|| REPLACE(sad.m_middlename, '0', '')|| ' '|| REPLACE(sad.m_lastname, '0', '') as Mother_Name," +
                                "sad.g_firstname|| ' '|| REPLACE(sad.g_middlename, '0', '')|| ' '|| REPLACE(sad.g_lastname, '0', '') as Gaurdian_Name," +
                                "to_char(sad.dob,'" + sgen.Getsqldateformat() + "') as DOB," +
                                "cl.class as Class_Name," +
                                "sad.issibling as Is_Sibling,sad.sibling2_rollno as Sibling_Grp_Id,sad.isfamily as Is_Family,sad.sibling1_reg_no as Family_Grp_Id," +
                                "sad.prev_school_name as Last_School," +
                                "sad.istransfer as Is_Transfer," +
                                "(CASE WHEN sad.f_dob= sad.created_date THEN '0' ELSE to_char(sad.f_dob,'" + sgen.Getsqldateformat() + "') end) as Father_DOB," +
                                "sad.f_email as Father_Email,nvl(fqa.master_name,'-') as fqualification,sad.f_occupation as Father_Occupation," +
                                "sad.f_annual_income as Father_Annual_Income," +
                                "sad.f_con_number as Father_ContactNo," +
                                "(CASE WHEN sad.m_dob=sad.created_date THEN '0' ELSE to_char(sad.m_dob,'" + sgen.Getsqldateformat() + "') end) as Mother_DOB," +
                                "sad.m_email as Mother_Email,nvl(mqa.master_name,'-') as mqualification," +
                                "sad.m_occupation as Mother_Occupation," +
                                "sad.m_annual_income as Mother_Annual_Income," +
                                "sad.m_con_number as Mother_ContactNo," +
                                "(CASE WHEN sad.g_dob=sad.created_date THEN '0' ELSE to_char(sad.g_dob,'" + sgen.Getsqldateformat() + "') end) as Gaurdian_DOB," +
                                "sad.g_email as Gaurdian_Email,nvl(gqa.master_name,'-') as gqualification,sad.g_occupation as Gaurdian_Occupation," +
                                "sad.g_con_number as Gaurdian_ContactNo " +
                                "from student_applicant_details sad " +
                                "left outer join add_class cl on sad.class_applied=cl.add_class_id  and sad.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                                "left outer join master_setting fqa on sad.f_qualification=fqa.master_id  and find_in_set(sad.client_unit_id,fqa.client_unit_id)=1 and fqa.type= 'EQU' " +
                                "left outer join master_setting mqa on sad.m_qualification=mqa.master_id  and find_in_set(sad.client_unit_id, mqa.client_unit_id)=1 and mqa.type= 'EQU' " +
                                "left outer join master_setting gqa on sad.g_qualification=gqa.master_id  and find_in_set(sad.client_unit_id, gqa.client_unit_id)=1 and gqa.type= 'EQU' " +
                                "WHERE  and sad.client_unit_id= '" + unitid_mst + "' and sad.type1= 'ENQ' order by sad.vch_num desc";
                            break;
                    }
                    break;
                #endregion
                #region class_master 
                case "class_master":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            cmd = "SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr, a.Class,c.master_name as Edu_Category," +
                                "(CASE when a.status='Y' THEN 'Active'  when a.status = '' THEN 'Active' else 'Inactive' end) as Status," +
                      "b.First_name ||' ' || replace(b.middle_name, '0', '') || ' '|| replace(b.last_name, '0','') as Ent_By," +
                      "to_char( convert_tz( a.Ent_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Ent_Date" +
                      " FROM  add_class a INNER JOIN  user_details b ON  a.ent_by = b.vch_num LEFT JOIN master_setting c " +
                      "ON c.type='ECC' and  a.CategoryType=c.master_id  and find_in_set(c.client_unit_id,'" + unitid_mst + "')=1  where  " +
                      " a.client_unit_id='" + unitid_mst + "'  and  a.type in  ('EAC','DDEAC')   order by a.vch_num";
                            break;
                        case "VIEW":

                            cmd = "SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr, a.Class,c.master_name as Edu_Category," +
                        " (case  when a.IsMonday=1 then 'Weekly Off' else 'Working' end) as Monday," +
                        "(CASE WHEN a.IsTuesday=1 THEN 'Weekly Off'  else 'Working' end) as Tuesday," +
                        "(case  when a.IsWednesday=1 then 'Weekly Off' else 'Working' end) as Wednesday," +
                        "(case  when a.IsThursday=1 then 'Weekly Off' else 'Working' end) as Thursday," +
                        "(case  when a.IsFriday=1 then 'Weekly Off' else 'Working' end) as Friday," +
                        "(case  when a.IsSaturday=1 then 'Weekly Off' else 'Working' end) as Saturday," +
                        "(case  when a.IsSunday=1 then 'Weekly Off' else 'Working' end) as Sunday " +
                        ",(CASE when a.status='Y' THEN 'Active'  when a.status = '' THEN 'Active' else 'Inactive' end) as Status," +
                        "b.First_name ||' ' || replace(b.middle_name, '0', '') || ' '|| replace(b.last_name, '0','') as Ent_By," +
                        "to_char( convert_tz( a.Ent_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Ent_Date" +
                        " FROM  add_class a INNER JOIN  user_details b ON  a.ent_by = b.vch_num LEFT JOIN master_setting c " +
                        "ON c.type='ECC' and  a.CategoryType=c.master_id  and find_in_set(c.client_unit_id,'" + unitid_mst + "')=1  where  " +
                        " a.client_unit_id='" + unitid_mst + "'  and  a.type in  ('EAC','DDEAC')   order by a.vch_num";
                            break;
                    }


                    break;
                #endregion
                #region holiday_master
                case "holiday_master":
                    switch (btnval)
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select holiday_master.client_id||holiday_master.client_unit_id||holiday_master.vch_num||to_char(holiday_master.vch_date,'yyyymmdd')||holiday_master.type as fstr," +
                                " holiday_master.Holiday_Name,to_char(holiday_master.Holiday_frm,'" + sgen.Getsqldateformat() + "') as Holiday_From," +
                        " to_char(holiday_master.Holiday_to,'" + sgen.Getsqldateformat() + "') as Holiday_To," +
            " (case when holiday_master.IsStudent_Holiday = 1 THEN 'Applicable' ELSE 'Not Applicable' END	) as For_Student, (CASE WHEN  holiday_master.IsTeacher_Holiday = 1  THEN  'Applicable' ELSE 'Not Applicable' END)as For_Teacher ,add_class.Class from holiday_master,add_class" +
            " WHERE holiday_master.type='STD' and holiday_master.class=add_class.add_class_id and holiday_master.client_unit_id='" + unitid_mst + "' and add_class.client_unit_id='" + unitid_mst + "' and holiday_master.Academic_year_Id='" + Ac_Year_id + "' order by holiday_master.vch_num,holiday_master.holiday_id,holiday_master.holiday_name";
                            break;
                    }
                    break;
                #endregion
                #region section_strength
                case "section_strength":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            cmd = " SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,c.Class,d.master_name as Section, a.master_name as Section_strength ," +
                        "a.subject_strength No_Of_Subject,a.FemaleRatio Female_Ratio,a.MaleRatio male_ratio, " +
                        "(CASE when a.SectionType = 'Both' THEN 'For Both Male And Female Students' WHEN a.SectionType = 'Male' then 'For Male Students Only' else 'For Female Students Only' end) as Section_Type," +
                        "b.First_name ||' ' || replace(b.middle_name, '0','') || ' '|| replace(b.last_name,'0','') as Ent_By,to_char( convert_tz( a.master_EntDate,'UTC','" + sgen.Gettimezone() + "')," +
                        "'" + sgen.Getsqldateformat() + "')as Ent_Date from " + sgen.GetSession(MyGuid, "TBL_MST") + " a,user_details b,add_class c,master_setting d where a.classid=c.add_class_id and a.sectionid=d.master_id and d.type='ECS'  and a.client_unit_id='" + unitid_mst + "' and  (a.type='ESS' or a.type='DDESS') and a.master_type='Sec_str' and " +
                        " a.master_entby =b.vch_num  and c.client_unit_id='" + unitid_mst + "' and find_in_set(d.client_unit_id,'" + unitid_mst + "')=1   order by a.master_name ";
                            break;
                        case "VIEW":
                            //  cmd = "SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,c.Class,d.master_name as Section, a.master_name as Section_strength, " +
                            //"a.subject_strength No_Of_Subject,a.FemaleRatio Female_ratio,a.MaleRatio male_ratio, CASE when a.SectionType='Female'THEN' For Female Students Only '" +
                            //" WHEN a.SectionType = 'Male' then 'For Male Students Only' when a.SectionType = 'Both' THEN'For Both Male And Female Students' end as Section_Type," +
                            //"b.First_name ||' ' || replace(b.middle_name,'0','') || ' '|| replace(b.last_name,'0','') as Ent_By,to_char( convert_tz( a.master_EntDate,'UTC','" + sgen.Gettimezone() + "')," +
                            //"'" + sgen.Getsqldateformat() + "')as Ent_Date from " + sgen.GetSession(MyGuid, "TBL_MST") + " a,user_details b,add_class c,master_setting d where a.classid=c.add_class_id and a.sectionid=d.master_id and d.type='ECS' and a.client_unit_id='" + unitid_mst + "' and (a.type='ESS' or a.type='DDESS') and a.master_type='Sec_str' and " +
                            ////" a.master_entby =lpad(b.rec_id,6,'0') and b.client_id='" + clientid_mst + "' and b.client_unit_id='" + unitid_mst + "' and c.client_id='" + clientid_mst + "' and c.client_unit_id='" + unitid_mst + "' and d.client_id='" + clientid_mst + "' and d.client_unit_id='" + unitid_mst + "'   order by a.master_name  ";
                            //" a.master_entby =lpad(b.rec_id,6,'0') and c.client_unit_id='" + unitid_mst + "'and find_in_set(d.client_unit_id,'" + unitid_mst + "')=1   order by a.master_name  ";


                            cmd = "SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,c.Class,d.master_name as Section, a.master_name as Section_strength, " +
                          "a.subject_strength No_Of_Subject,a.FemaleRatio Female_ratio,a.MaleRatio male_ratio, " +
                         "(CASE when a.SectionType = 'Both' THEN 'For Both Male And Female Students' WHEN a.SectionType = 'Male' then 'For Male Students Only' else 'For Female Students Only' end) as Section_Type," +
                          "b.First_name ||' ' || replace(b.middle_name,'0','') || ' '|| replace(b.last_name,'0','') as Ent_By,to_char( convert_tz( a.master_EntDate,'UTC','" + sgen.Gettimezone() + "')," +
                          "'" + sgen.Getsqldateformat() + "')as Ent_Date from " + sgen.GetSession(MyGuid, "TBL_MST") + " a,user_details b,add_class c,master_setting d where a.classid=c.add_class_id and a.sectionid=d.master_id and d.type='ECS' and a.client_unit_id='" + unitid_mst + "' and (a.type='ESS' or a.type='DDESS') and a.master_type='Sec_str' and " +
                          " a.master_entby =b.vch_num and c.client_unit_id='" + unitid_mst + "'and find_in_set(d.client_unit_id,'" + unitid_mst + "')=1   order by a.master_name  ";
                            break;
                    }
                    break;
                #endregion
                #region educatgory
                case "edu_category":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT a.client_id||a.client_unit_id||a.master_id||to_char(a.vch_date,'yyyymmdd')||a.type as fstr, a.master_name as Education_Category," +
                        "Section_Strength as Class_Hours,classid as Class_Start_Time,sectionid as Class_End_Time ," +
                        "(CASE when a.status='Y' THEN 'Active'  when a.status = '' THEN 'Active' else 'Inactive' end) as Status  " +
                           ",b.First_name ||' ' || replace(b.middle_name,'0','') || ' '|| replace(b.last_name,'0','') as Ent_By," +
                           "to_char( convert_tz( a.master_EntDate,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')as Ent_Date from master_setting a,user_details b  where a.type in ( 'ECC','DDECC') and " +
                           " a.master_entby =b.vch_num  and find_in_set(a.client_unit_id,'" + unitid_mst + "')=1 order by a.master_name ";
                            break;
                    }
                    break;
                #endregion                
                #region Enquiry
                case "enquiry":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select sad.client_id|| sad.client_unit_id|| sad.enq_no|| to_char(sad.enq_date, 'yyyymmdd')|| sad.type1 as fstr,sad.enq_no as Temp_id," +
                                "sad.FIRST_NAME|| ' '|| REPLACE(sad.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(sad.LAST_NAME, '0', '') as Student_Name," +
                                "sad.f_firstname|| ' '|| REPLACE(sad.f_middlename, '0', '')|| ' '|| REPLACE(sad.f_lastname, '0', '') as Father_Name," +
                                "sad.m_firstname|| ' '|| REPLACE(sad.m_middlename, '0', '')|| ' '|| REPLACE(sad.m_lastname, '0', '') as Mother_Name," +
                                "sad.g_firstname|| ' '|| REPLACE(sad.g_middlename, '0', '')|| ' '|| REPLACE(sad.g_lastname, '0', '') as Gaurdian_Name," +
                                "to_char(sad.dob,'" + sgen.Getsqldateformat() + "') as DOB," +
                                "cl.class as Class_Name," +
                                "sad.issibling as Is_Sibling,sad.sibling2_rollno as Sibling_Grp_Id,sad.isfamily as Is_Family,sad.sibling1_reg_no as Family_Grp_Id," +
                                "sad.prev_school_name as Last_School," +
                                "sad.istransfer as Is_Transfer," +
                                "(CASE WHEN sad.f_dob= sad.created_date THEN '0' ELSE to_char(sad.f_dob,'" + sgen.Getsqldateformat() + "') end) as Father_DOB," +
                                "sad.f_email as Father_Email,nvl(fqa.master_name,'-') as fqualification,sad.f_occupation as Father_Occupation," +
                                "sad.f_annual_income as Father_Annual_Income," +
                                "sad.f_con_number as Father_ContactNo," +
                                "(CASE WHEN sad.m_dob=sad.created_date THEN '0' ELSE to_char(sad.m_dob,'" + sgen.Getsqldateformat() + "') end) as Mother_DOB," +
                                "sad.m_email as Mother_Email,nvl(mqa.master_name,'-') as mqualification," +
                                "sad.m_occupation as Mother_Occupation," +
                                "sad.m_annual_income as Mother_Annual_Income," +
                                "sad.m_con_number as Mother_ContactNo," +
                                "(CASE WHEN sad.g_dob=sad.created_date THEN '0' ELSE to_char(sad.g_dob,'" + sgen.Getsqldateformat() + "') end) as Gaurdian_DOB," +
                                "sad.g_email as Gaurdian_Email,nvl(gqa.master_name,'-') as gqualification,sad.g_occupation as Gaurdian_Occupation," +
                                "sad.g_con_number as Gaurdian_ContactNo " +
                                "from student_applicant_details sad " +
                                "left outer join add_class cl on sad.class_applied=cl.add_class_id and  sad.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                                "left outer join master_setting fqa on sad.f_qualification=fqa.master_id and find_in_set(sad.client_unit_id, fqa.client_unit_id)=1 and fqa.type= 'EQU' " +
                                "left outer join master_setting mqa on sad.m_qualification=mqa.master_id and find_in_set(sad.client_unit_id, mqa.client_unit_id)=1 and mqa.type= 'EQU' " +
                                "left outer join master_setting gqa on sad.g_qualification=gqa.master_id and find_in_set(sad.client_unit_id, gqa.client_unit_id)=1 and gqa.type= 'EQU' " +
                                "WHERE  and sad.client_unit_id= '" + unitid_mst + "' and sad.type1= 'ENQ' order by sad.vch_num desc";
                            break;
                        case "FREG":
                            cmd = "select distinct b.vch_num|| to_char(b.vch_date, 'yyyymmdd')||b.type as fstr,c.Class as Class_Name,b.FIRST_NAME|| ' '||" +
                         " REPLACE(b.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(b.LAST_NAME, '0', '') as student_Nameb.f_firstname, ' ', " +
                         "replace(b.f_middlename, '0', '')|| ' '|| replace(b.f_lastname, '0', '') as Father_Name,b.m_firstname, ' ', " +
                         "REPLACE(b.m_middlename, '0', '')|| ' '|| REPLACE(b.m_lastname, '0', '') as Mother_Name,b.GENDER ,a.Reg_No from student_detail a inner join" +
                         "   user_details b  on a.reg_no = b.regnumber and a.type = b.type INNER join add_class c on a.class_applied = c.add_class_id  and " +
                         " a.client_unit_id = c.client_unit_id  WHERE a.type = 'STD' and c.type = 'EAC' and b.issibling='N' " +
                         " and  a.client_unit_id = '" + unitid_mst + "' order by b.vch_num";
                            break;
                        case "SIBREG":
                            cmd = "select distinct b.vch_num|| to_char(b.vch_date, 'yyyymmdd')|| b.type as fstr,c.Class as Class_Name,b.FIRST_NAME|| ' '||" +
                     " REPLACE(b.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(b.LAST_NAME, '0', '') as student_Name,b.f_firstname|| ' '|| " +
                     "replace(b.f_middlename, '0', '')|| ' '|| replace(b.f_lastname, '0', '') as Father_Name,b.m_firstname|| ' '|| " +
                     "REPLACE(b.m_middlename, '0', '')|| ' '|| REPLACE(b.m_lastname, '0', '')) as Mother_Name,b.GENDER ,a.Reg_No from student_detail a inner join" +
                     "   user_details b  on a.reg_no = b.regnumber and a.type = b.type INNER join add_class c on a.class_applied = c.add_class_id  and " +
                     "a.client_unit_id = c.client_unit_id  WHERE a.type = 'STD' and c.type = 'EAC' and b.issibling='N' " +
                     "  and a.client_unit_id = '" + unitid_mst + "' order by b.vch_num";
                            break;
                        case "ADD1":
                        case "ADD2":
                            cmd = "SELECT client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type as fstr,v_name as village,teh_name as tehsil,district_name," +
                                "state_name,country_name FROM country_state where type = 'CSV' " + sgen.GetSession(MyGuid, "ACOND_MST") + "";

                            break;
                    }
                    break;
                #endregion                
                #region Expense Details
                case "expense_details":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                "a.col2 as Amount,a.col3 as Payment_To ,a.col4 as Remark,b.master_name as Mode_Of_Payment from enx_tab2 a" +
                                " inner join master_setting b on  a.col6=b.master_id and b.type='EPM' where a.type='EXP'  " +
                                "and  a.client_unit_id='" + unitid_mst + "'";
                            break;
                    }
                    break;
                #endregion
                #region opening_edi
                case "opening_edi":
                    switch (btnval.ToUpper())
                    {
                        case "REG":
                        case "VIEW":
                            cmd = "select nvl(b.client_id||b.client_unit_id||b.reg_no,'-') as fstr , c.Class as Class_Name, " +
                                               " d.master_name as Section, (a.FIRST_NAME)||' '||replace(a.MIDDLE_NAME,'0','')||' '||" +
                                               "replace(a.LAST_NAME,'0','') as Student_Name,(a.f_firstname)||' '||replace" +
                                               "(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name  ,a.Gender ,a.RegNumber as" +
                                               " Reg_Number,b.Roll_number as Roll_Number , a.Status, " +
                                               "  nvl(fd.fee_amount,'0') as Previous_Year_Amount from  student_detail b  left join fees_detail fd   on fd.regno= b.reg_no and" +
                                               "   fd.client_unit_id=b.client_unit_id and fd.type='EDI' and " +
                                               "fd.academic_year_id='" + Ac_Year_id + "'	 inner join   user_details a on a.vch_num=b.vch_num and a.regnumber=b.reg_no" +
                                               " and a.type='STD' inner join add_class c on c.add_class_id=b.class_applied and c.type='EAC' and " +
                                               " b.client_unit_id=c.client_unit_id inner join master_setting d  " +
                                               "on b.section =d.master_id and  d.type='ECS' and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                                               " where b.type='STD' and b.academic_year_id='" + Ac_Year_id + "'  and" +
                                               " b.client_unit_id='" + unitid_mst + "'  order by  nvl(fd.client_id||fd.client_unit_id||fd.regno,'-') desc ";
                            break;
                    }
                    break;
                #endregion                
                #region Fee Structure
                case "fee_structure":
                    switch (btnval.ToUpper())
                    {
                        case "VIEW":
                        case "EDIT":
                            cmd = "select a.fstr,a.Class, GROUP_CONCAT( distinct a.fee_head) as Fee_Head, sum(a.new_fee) as New_Student_Fee" +
                                " ,SUM(a.old_fee) as Old_Student_Fee,a.Created_Date from (select fd.client_id||fd.client_unit_id||fd.vch_num||" +
                                "to_char(fd.vch_date,'yyyymmdd')||fd.type||fd.class_id||fd.academic_year_id as fstr,  c.Class,h.master_name as fee_head,fd.Fee_Amount," +
                                "h.Section_Strength as Fee_For, (case when h.Section_Strength in('B','N') THEN fd.Fee_Amount ELSE 0 END) as New_Fee," +
                                "(case when h.Section_Strength in('B','O') THEN fd.Fee_Amount ELSE 0 END) as Old_fee,to_char( convert_tz( fd.created_date,'UTC','" + sgen.Gettimezone() + "')," +
                                  "'" + sgen.Getsqldateformat() + "')as Created_Date from   fees_detail fd INNER join " +
                                "add_class c on fd.class_id=c.add_class_id and c.type='EAC' and  fd.client_unit_id=c.client_unit_id " +
                                "inner join master_setting h on fd.feetype_id|| fd.FeeHead_Id= h.sectionid||h.master_id and h.type='EFH' and" +
                                " fd.client_unit_id=h.client_unit_id and h.master_type='Education Fees Head'  where fd.type='STR' " +
                                " and fd.client_unit_id='" + unitid_mst + "' and fd.academic_year_id='" + Ac_Year_id + "') a GROUP by a.fstr,a.class,a.Created_Date";
                            break;
                    }
                    break;
                #endregion
                #region Student Fee Structure
                case "std_fee_structure":
                    switch (btnval.ToUpper())
                    {
                        case "REG":
                            mq3 = "b.client_id|| b.client_unit_id|| b.type|| b.academic_year_id|| b.reg_no||'!~!~!'||studenttype";
                            string mq = sgen.Fee_AllData(clientid_mst, unitid_mst, Ac_Year_id, mq3);
                            cmd = mq;
                            break;
                        case "VIEW":
                            cmd = "select  f.client_id||f.client_unit_id||f.vch_num||to_char(f.vch_date,'yyyymmdd')||f.type as fstr," +
                                "ud.FIRST_NAME||' '||replace(ud.MIDDLE_NAME,'0','')||' '||replace(ud.LAST_NAME,'0','') as Student_Name," +
                                "c.Class as Class, nvl(d.master_name,'-') as Section," +
                                "GROUP_CONCAT(distinct h.master_name) AS FeeHead,sum(f.Fee_Amount) as Actual_Amount,sum(f.std_amount) as Standard_Amount  " +
                                "from fees_detail f INNER JOIN user_details ud on ud.RegNumber=f.regno and ud.type='STD' INNER JOIN master_setting h" +
                                " on f.feetype_id || f.FeeHead_Id=h.sectionid||h.master_id and h.type='EFH' and f.client_unit_id=h.client_unit_id and" +
                                " h.master_type='Education Fees Head' inner join add_class c on ud.class_applied=c.add_class_id and" +
                                " c.type='EAC' and ud.client_unit_id=c.client_unit_id  left join master_setting d" +
                                " on ud.section =d.master_id and d.type='ECS' and find_in_set(ud.client_unit_id,d.client_unit_id)=1 where f.type='STD' and f.client_unit_id='" + unitid_mst + "'" +
                                " and f.academic_year_id='" + Ac_Year_id + "' group by  f.client_id||f.client_unit_id||f.vch_num||to_char(f.vch_date,'yyyymmdd')||f.type" +
                                ",ud.FIRST_NAME||' '||replace(ud.MIDDLE_NAME,'0','')||' '||replace(ud.LAST_NAME,'0',''),c.Class , nvl(d.master_name, '-')";
                            break;
                    }
                    break;
                #endregion
                #region Regular Fees
                case "fee_receipt":
                case "fee_receipt_new":
                    switch (btnval.ToUpper())
                    {
                        case "REG":
                            if (sgen.GetSession(MyGuid, "RFeeType") != null)
                            {




                                if (sgen.GetSession(MyGuid, "Parent_Fee").ToString() == "Y")
                                {
                                    string mqq1 = "select sibling1_rollno from user_details where vch_num='" + Convert.ToInt32(userid_mst) + "'";
                                    string familyid = sgen.getstring(userCode, mqq1);
                                    cond = "and a.sibling1_rollno='" + familyid.Trim() + "'";
                                }
                                if (sgen.GetSession(MyGuid, "RFeeType").Equals("G"))
                                {
                                    mq3 = "b.client_id||b.client_unit_id||b.type||a.sibling1_rollno";
                                }
                                else if (sgen.GetSession(MyGuid, "RFeeType").Equals("S"))
                                {
                                    mq3 = "b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type";
                                }
                                //string mq = sgen.Fee_AllData(clientid_mst, unitid_mst, Ac_Year_id, mq3);
                                string mq = "select " + mq3 + " as fstr, c.Class as Class_Name, nvl(d.master_name, '-') as Sec,  b.reg_no Reg_Number,nvl(b.Roll_number, '-') as Roll_Number," +
            " (a.FIRST_NAME || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || replace(a.LAST_NAME, '0', '')) as Student_Name,a.gender ," +
            "(a.f_firstname || ' ' || replace(a.f_middlename, '0', '') || ' ' || replace(a.f_lastname, '0', '')) as Father_Name,b.StudentType std_type" +
            ", (CASE when a.status = 'active' THEN 'Active' " +
            " when a.status = '' THEN 'Active' else 'Inactive' end) Status from student_detail b  inner join user_details a on a.RegNumber=b.reg_no and a.vch_num=b.vch_num  and a.type='STD'" +
                                    " inner join add_class c on b.class_applied = c.add_class_id and c.type = 'EAC' and  b.client_unit_id = " +
            "c.client_unit_id  left join master_setting d on b.section = d.master_id and d.type = 'ECS'  and " +
            "find_in_set(b.client_unit_id,d.client_unit_id)=1  where b.type= a.type and b.client_unit_id='" + unitid_mst + "' " +
                                    "and b.academic_year_id='" + Ac_Year_id + "'  and b.class_applied in (select distinct class_id from fees_detail where academic_year_id='" + Ac_Year_id + "' " +
                                    "and type='STR' and client_unit_id='" + unitid_mst + "') ";

                                if (sgen.GetSession(MyGuid, "Parent_Fee").ToString() == "Y")
                                {
                                    string mqq1 = "select sibling1_rollno from user_details where vch_num='" + Convert.ToInt32(userid_mst) + "' and client_unit_id='" + unitid_mst + "'";
                                    string familyid = sgen.getstring(userCode, mqq1);
                                    //cond = "and a.sibling1_rollno='" + familyid.Trim() + "'";
                                    mq = "select * from (" + mq + ") where Family_ID='" + familyid.Trim() + "'";
                                }
                                cmd = mq;
                                if (sgen.GetSession(MyGuid, "RFeeType").Equals("A"))
                                {
                                    cmd = " SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,c.Class as Class_Name, first_name||' '||Replace(middle_name,'0','')||' '||" +
              "Replace(last_name,'0','') AS Student_Name,a.f_firstname||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name" +
              ",a.Gender FROM student_applicant_details a,add_class c WHERE uSESSION='" + Ac_Year_id + "' and c.add_class_id=a.class_applied  and c.client_unit_id='" + unitid_mst + "' " +
              "and a.student_status='temporary' and  a.client_unit_id='" + unitid_mst + "' and  sa_id  not in " +
              "(SELECT Student_ID FROM  student_receipt_detail where Fee_status='Approved'  and trim(regno)='' and trim(Family_Grp_Id)='' and Type = 'ERD'  " +
              "and  client_unit_id='" + unitid_mst + "' )";
                                }
                            }
                            break;

                        case "DETAIL":
                            if (sgen.GetSession(MyGuid, "RFeeType") != null)
                            {

                                //string   to_ac_dt = (Convert.ToDateTime(Ac_To_Date)).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                                string to_ac_dt = sgen.Make_datetime(Ac_To_Date).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);

                                if (sgen.GetSession(MyGuid, "Parent_Fee").ToString() == "Y")
                                {
                                    string mqq1 = "select sibling1_rollno from user_details where vch_num='" + Convert.ToInt32(userid_mst) + "'";
                                    string familyid = sgen.getstring(userCode, mqq1);
                                    cond = "and a.sibling1_rollno='" + familyid.Trim() + "'";
                                }
                                if (sgen.GetSession(MyGuid, "RFeeType").Equals("G"))
                                {
                                    mq3 = "b.client_id||b.client_unit_id||b.type||a.sibling1_rollno";
                                }
                                else if (sgen.GetSession(MyGuid, "RFeeType").Equals("S"))
                                {
                                    mq3 = "b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type";
                                }
                                string mq = sgen.Fee_AllData(clientid_mst, unitid_mst, Ac_Year_id, mq3);
                                //string mq = sgen.Fee_PRYData(clientid_mst, unitid_mst, Ac_Year_id, mq3, to_ac_dt);
                                if (sgen.GetSession(MyGuid, "Parent_Fee").ToString() == "Y")
                                {
                                    string mqq1 = "select sibling1_rollno from user_details where vch_num='" + Convert.ToInt32(userid_mst) + "' and client_unit_id='" + unitid_mst + "'";
                                    string familyid = sgen.getstring(userCode, mqq1);
                                    //cond = "and a.sibling1_rollno='" + familyid.Trim() + "'";
                                    mq = "select * from (" + mq + ") where Family_ID='" + familyid.Trim() + "'";
                                }
                                cmd = mq;
                                if (sgen.GetSession(MyGuid, "RFeeType").Equals("A"))
                                {
                                    cmd = " SELECT a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type as fstr,c.Class as Class_Name, first_name||' '||Replace(middle_name,'0','')||' '||" +
              "Replace(last_name,'0','') AS Student_Name,a.f_firstname||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name" +
              ",a.Gender FROM student_applicant_details a,add_class c WHERE uSESSION='" + Ac_Year_id + "' and c.add_class_id=a.class_applied  and c.client_unit_id='" + unitid_mst + "' " +
              "and a.student_status='temporary' and  a.client_unit_id='" + unitid_mst + "' and  sa_id  not in " +
              "(SELECT Student_ID FROM  student_receipt_detail where Fee_status='Approved'  and trim(regno)='' and trim(Family_Grp_Id)='' and Type = 'ERD'  " +
              "and  client_unit_id='" + unitid_mst + "' )";
                                }
                            }
                            break;
                        case "FORMAT":
                            cmd = "select client_id||client_unit_id||master_id|| to_char(vch_date, 'yyyymmdd')||type as fstr,master_name as Receipt_Format from master_setting " +
                       "where  client_unit_id='" + unitid_mst + "' and type='FRF'";
                            break;
                    }
                    break;
                #endregion
                #region Promoted_Students
                case "promoted_students":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":

                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||a.Academic_Year_Id||a.grade as fstr," +
                                "max(CASE WHEN a.Sub_CatId ='N' Then 'Promoted Without Result' else 'Promoted With Result' end ) as Promotion_type,max(b.Class) From_Class,max(c.master_name) as From_Section ,max(d.Class) To_Class " +
                                "from student_result a INNER JOIN add_class b on  a.Class_Id=b.add_class_id and a.client_unit_id=b.client_unit_id" +
                                " and b.type='EAC' INNER JOIN master_setting c on a.Section_Id=c.master_id and find_in_set(a.client_unit_id,c.client_unit_id)=1 and c.type='ECS'" +
                                " INNER JOIN add_class d on  a.grade=d.add_class_id and a.client_unit_id=d.client_unit_id and d.type='EAC' where a.type='PRM'" +
                                " and a.client_unit_id='" + unitid_mst + "' and a.position='" + Ac_Year_id + "'  group by " +
                                " a.client_unit_id ||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||a.Academic_Year_Id||a.grade order by max(a.class_id)";
                            break;
                        case "VIEW":
                            cmd = "select a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||a.Academic_Year_Id||a.grade as fstr," +
                                "(CASE WHEN (a.Sub_CatId ='N' and a.promoted='1') Then 'Promoted Without Result' when (a.Sub_CatId ='Y' and a.promoted='1') then 'Promoted With Result' else '-' end ) as Promotion_type," +
                                "(case when a.promoted = '1' then 'Promoted' else 'Not Promoted' end) stdent_status,a.reg_no," +
                                " (ud.FIRST_NAME || ' ' || REPLACE(ud.MIDDLE_NAME, '0', '') || ' ' || REPLACE(ud.LAST_NAME, '0', '')) as Student_Name," +
                                "(ud.f_firstname || ' ' || REPLACE(ud.f_middlename, '0', '') || ' ' || REPLACE(ud.f_lastname, '0', '')) as Father_Name," +
                                "(b.Class)From_Class, (c.master_name) as From_Section ,(case when a.promoted='1' then d.Class else '-' end )To_Class from student_result a INNER JOIN user_details ud " +
                                "on ud.regnumber = a.reg_no and ud.type = 'STD' inner join student_detail sd on sd.reg_no = ud.RegNumber and sd.vch_num = ud.vch_num and sd.type = 'STD' " +
                                "and sd.academic_year_id = '" + Ac_Year_id + "'  INNER JOIN add_class b on a.Class_Id = b.add_class_id and a.client_unit_id = b.client_unit_id and b.type = 'EAC'" +
                                " INNER JOIN master_setting c on a.Section_Id = c.master_id and find_in_set(a.client_unit_id, c.client_unit_id)= 1 and" +
                                " c.type = 'ECS' INNER JOIN add_class d on a.grade = d.add_class_id and a.client_unit_id = d.client_unit_id and d.type = 'EAC' " +
                                "where a.type = 'PRM' and a.client_unit_id = '" + unitid_mst + "' and a.position = '" + Ac_Year_id + "' order by a.class_id ,a.promoted";
                            break;
                    }
                    break;
                #endregion
                #region location_mst
                case "location_mst":
                    switch (btnval.ToUpper())
                    {
                        case "VIEW":
                        case "EDIT":
                            {
                                cmd = "SELECT (client_id||client_unit_id||vch_num|| to_char(vch_date, 'yyyymmdd')||type) as fstr,master_id as Loc_No," +
                                    "master_name as Mentioned_Location,group_name as Google_Location,client_name as Lat_Long from master_setting" +
                                    " where type='LOC' and  client_unit_id='" + unitid_mst + "'";
                            }
                            break;
                    }
                    break;
                #endregion
                #region transport_feemaster
                case "transport_feemaster":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            // from table
                            cmd = "select (ms.client_id|| ms.client_unit_id|| ms.master_id|| to_char(ms.vch_date,'yyyymmdd')||ms.type) as fstr,ms.vch_num  as Doc_No," +
                        "ms.vch_date as Doc_Date, ms1.master_name as Location,ac.class,ms.group_name from master_setting ms ,master_setting ms1,add_class ac WHERE " +
                        " ms.client_unit_id= '" + unitid_mst + "' and ms.type= 'LCL' " +
                        " and ms1.client_unit_id= '" + unitid_mst + "' and ms1.type= 'LOC' " +
                        "and ms1.master_id=ms.master_name  " +
                        "and ac.client_unit_id= '" + unitid_mst + "' and ac.type= 'EAC' and ms.classid=ac.add_class_id";
                            break;
                    }
                    break;
                #endregion
                #region mis_feetype
                case "mis_feetype":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = " SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||master_type) as fstr," +
                        " a.FeeTypeName as misc_fee_type_name ," +
                        "(CASE when a.status='Y' THEN 'Active'  when a.status = '' THEN 'Active' else 'Inactive' end) as Status " +
                           ",(b.First_name ||' ' || replace(b.middle_name,'0','') || ' '|| replace(b.last_name,'0','')) as Ent_By,to_char( convert_tz( a.ent_date,'UTC','" + sgen.Gettimezone() + "')," +
                           "'" + sgen.Getsqldateformat() + "')as Ent_Date from school_fee_type  a,user_details b where " +
                           "  a.type='EEF' and master_type='B'  and  a.ent_by =lpad(b.vch_num,6,'0') and a.client_unit_id='" + unitid_mst + "' " +
                           "" + Condition + " order by a.FeeTypeName  ";
                            break;
                    }
                    break;
                #endregion
                #region mis_fee_head
                case "mis_fee_head":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = " SELECT(a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'ddmmyyyy') || a.type || a.master_type) as fstr" +
                        ",c.feetypename as Mis_Fee_Type, a.master_name as Mis_Fee_Head ," +
                        "(CASE when a.status='Y' THEN 'Active'  when a.status = '' THEN 'Active' else 'Inactive' end) as Status " +
                           ",(b.First_name ||' ' || replace(b.middle_name,'0','') || ' '|| replace(b.last_name,'0','')) as Ent_By,to_char( convert_tz( a.master_EntDate,'UTC','" + sgen.Gettimezone() + "')," +
                           "'" + sgen.Getsqldateformat() + "')as Ent_Date from master_setting  a,user_details b,school_fee_type c where " +
                           "  a.type='EFH' and a.master_type='B' and  a.master_entby =b.vch_num and a.sectionid=c.feetype_id and c.type='EEF' and c.master_type='B'" +
                           " and a.client_unit_id='" + unitid_mst + "' and  a.client_unit_id = c.client_unit_id  order by a.master_name  ";
                            break;
                    }
                    break;
                #endregion
                #region mis_fee_structure
                case "mis_fee_structure":
                    switch (btnval.ToUpper())
                    {
                        case "VIEW":
                            cmd = "SELECT (a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type) as fstr," +
                                "b.class,e.FeetypeName, d.master_name as FeeHead,a.Fee_Amount ,c.FIRST_NAME as Ent_By,to_char( convert_tz( a.Ent_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Ent_Date FROM school_fee_structure a, " +
                                "add_class b,user_details c, master_setting d,school_fee_type e where a.class_id=b.add_class_id and " +
                                "a.academic_year_id= '" + Ac_Year_id + "'  and a.client_unit_id= '" + unitid_mst + "' " +
                                "and  b.client_unit_id= '" + unitid_mst + "'" +
                                " and d.client_unit_id= '" + unitid_mst + "'  and e.client_unit_id= '" + unitid_mst + "'" +
                                "  and a.ent_by= c.vch_num and a.FeeHead_Id= d.master_id and d.type= 'EFH' " +
                                " and a.type= 'EFS' and a.FeeType_Id= e.FeeType_id and e.type= 'EEF' and a.master_type= 'B'" +
                                " and d.master_type= 'B' and e.master_type= 'B' and a.type= 'EFS'  order by b.sequence";
                            break;
                        case "EDIT":
                            cmd = "SELECT (a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type) as fstr," +
                                " GROUP_CONCAT(DISTINCT b.class) as Class," +
                                "GROUP_CONCAT(DISTINCT d.master_name) as FeeHead,c.FIRST_NAME as Ent_By,to_char( convert_tz( a.Ent_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Ent_Date" +
                                " FROM school_fee_structure a, add_class b,user_details c, master_setting d " +
                                "where a.class_id = b.add_class_id and a.academic_year_id='" + Ac_Year_id + "'  " +
                                "and a.client_unit_id= '" + unitid_mst + "' and  b.client_unit_id= '" + unitid_mst + "' " +
                                "and  d.client_unit_id= '" + unitid_mst + "'  and a.ent_by= c.vch_num " +
                                "and a.FeeHead_Id= d.master_id and d.type= 'EFH' and a.type= 'EFS' and a.master_type= 'B' and d.master_type= 'B'" +
                                "GROUP by a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type,a.ent_Date,c.FIRST_NAME";
                            break;
                    }
                    break;
                #endregion
                #region health_checkup
                case "health_checkup":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select DISTINCT(en.client_id||en.client_unit_id||en.vch_num||to_char(en.vch_date,'yyyymmdd')||en.type) as fstr, " +
                                 "ms.master_name as Checkup_Type,en.col3 as Doctor_Name, " +
                                 "to_char(en.vch_date,'" + sgen.Getsqldateformat() + "')as Checkup_Date," +
                                 "ac.class,ms1.master_name as Section from enx_tab en,master_setting ms,add_class ac,master_setting ms1 where en.type='HCM' and find_in_set(en.client_unit_id,'" + unitid_mst + "')=1  " +
                                 "and to_date(to_char(en.vch_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
              "and to_date('" + Ac_To_Date + "','" + sgen.Getsqldatetimeformat() + "') and ms.master_id=col4 and " +
                                 "ms.type='HCT' and find_in_set(ms.client_unit_id,en.client_unit_id)=1 and ac.type='EAC' and ac.add_class_id=en.col1 and find_in_set(ac.client_unit_id,en.client_unit_id)=1 and " +
                                 "ms1.master_id=en.col2 and ms1.type='ECS' and find_in_set(ms1.client_unit_id,en.client_unit_id)=1 ";
                            break;
                    }
                    break;
                #endregion
                #region blocked_student
                case "blocked_student":
                    switch (btnval.ToUpper())
                    {
                        case "STUDENT":
                            cmd = "select (ud.vch_num|| to_char(ud.vch_date, 'ddmmyyyy')|| ud.type) as fstr,ud.status," +
   "(ud.FIRST_NAME|| ' '|| REPLACE(ud.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(ud.LAST_NAME, '0', '')) as Student_Name," +
  "(ud.f_firstname|| ' '|| REPLACE(ud.f_middlename, '0', '')|| ' '|| REPLACE(ud.f_lastname, '0', '')) as Father_Name," +
  "(ud.m_firstname|| ' '|| REPLACE(ud.m_middlename, '0', '')|| ' '|| REPLACE(ud.m_lastname, '0', '')) as Mother_Name," +
  "(ud.g_firstname|| ' '|| REPLACE(ud.g_middlename, '0', '')|| ' '||REPLACE(ud.g_lastname, '0', '')) as Gaurdian_Name," +
  "to_char(ud.dob,'" + sgen.Getsqldateformat() + "') as DOB,ud.blood_grp,ud.gender as Gender,ud.place_of_birth as Birth_Place," +
  "ud.main_language as Mother_Tongue,nvl(cl.class,'-') as Class,nvl(sd.roll_number,'-') as rollnumber,nvl(sec.master_name,'-') as section," +
  "nvl(ad.academic_year,'-') as Academic_Year,ud.adhaar_id as Adhaar_No,nvl(rl.master_name,'-') as Religion,nvl(cc.master_name,'-') as Caste," +
  "ud.NATIONALITY,ud.issibling as Is_Sibling,ud.sibling1_rollno as Sibling_Grp_Id,ud.isfamily as Is_Family,ud.sibling2_rollno as Family_Grp_Id," +
  "ud.scholarship as Scholarship,nvl(ud.role,'-') as Role,ud.prev_school_name as Last_School,ud.regnumber as Reg_Number,ud.srn_no as SRN_No," +
  "ud.withdrawl_no as Withdrawl_No,ud.enrollment_no as Enrollment_No," +
  "(CASE WHEN ud.f_dob= ud.created_date THEN '0' ELSE to_char(ud.f_dob,'" + sgen.Getsqldateformat() + "') end) as Father_DOB,ud.f_email as Father_Email,ud.f_adhaar_id as Father_AdhaarNo,ud.f_qualification,nvl(fqa.master_name,'-') as fqualification,ud.f_occupation as Father_Occupation,ud.f_designation as Father_Designation,ud.f_org_name as Father_Organisation,ud.f_annual_income as Father_Annual_Income,ud.f_con_number as Father_ContactNo,ud.f_alumni_type as Father_Alumni,ud.f_nationality," +
  "(CASE WHEN ud.m_dob=ud.created_date THEN '0' ELSE to_char(ud.m_dob,'" + sgen.Getsqldateformat() + "') end) as Mother_DOB,ud.m_email as Mother_Email,ud.m_adhaar_id as Mother_Adhaar_No,ud.m_qualification,nvl(mqa.master_name,'-') as mqualification,ud.m_occupation as Mother_Occupation,ud.m_designation as Mother_Designation,ud.m_org_name as Mother_Organisation,ud.m_annual_income as Mother_Annual_Income,ud.m_con_number as Mother_ContactNo,ud.m_alumni_type as Mother_Alumni,ud.m_nationality," +
  "(CASE WHEN ud.g_dob=ud.created_date THEN '0' ELSE to_char(ud.g_dob,'" + sgen.Getsqldateformat() + "') end) as Gaurdian_DOB,ud.g_email as Gaurdian_Email,ud.g_adhaar_id as Gaurdian_Adhaar_No,ud.g_qualification,nvl(gqa.master_name,'-') as gqualification,ud.g_occupation as Gaurdian_Occupation,ud.g_designation as Gaurdian_Designation,ud.g_org_name as Gaurdian_Organisation,ud.g_con_number as Gaurdian_ContactNo,ud.g_nationality " +
  "from user_details ud left outer join student_detail sd on sd.reg_no=ud.RegNumber and sd.vch_num=ud.vch_num and sd.academic_year_id='" + Ac_Year_id + "' and sd.type= ud.type " +
  "left outer join add_class cl on sd.class_applied=cl.add_class_id and  sd.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
  "left outer join add_academic_year ad on sd.academic_year_id= ad.academic_year_id  and sd.client_id= ad.client_id and ad.type= 'ACY' " +
  "left outer join master_setting sec on sd.section= sec.master_id and find_in_set(sd.client_unit_id,sec.client_unit_id)=1 and sec.type= 'ECS' " +
  "left outer join master_setting fqa on ud.f_qualification= fqa.master_id  and find_in_set(ud.client_unit_id, fqa.client_unit_id)=1 and fqa.type= 'EQU' " +
  "left outer join master_setting mqa on ud.m_qualification= mqa.master_id  and find_in_set(ud.client_unit_id, mqa.client_unit_id)=1 and mqa.type= 'EQU' " +
  "left outer join master_setting gqa on ud.g_qualification= gqa.master_id  and find_in_set(ud.client_unit_id, gqa.client_unit_id)=1 and gqa.type= 'EQU' " +
  "left outer join master_setting cc on ud.ucaste= cc.master_id and cc.type= 'ECT' " +
  "left outer join master_setting rl on ud.religion= rl.master_id and rl.type= 'ERT' " +
  "left outer join(select distinct country_name, alpha_2 from country_state) cs on cs.alpha_2=ud.nationality " +
  "left outer join(select distinct country_name, alpha_2 from country_state) fcs on fcs.alpha_2=ud.f_nationality " +
  "left outer join(select distinct country_name, alpha_2 from country_state) mcs on mcs.alpha_2=ud.m_nationality " +
  "left outer join(select distinct country_name, alpha_2 from country_state) gcs on gcs.alpha_2=ud.g_nationality " +
  "WHERE  ud.client_unit_id= '" + unitid_mst + "' and ud.type= 'STD' order by ud.vch_num desc";
                            break;
                    }
                    break;
                #endregion
                #region student_remark
                case "student_remark":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,a.vch_num doc_no," +
                            "  b.Class , c.master_name  as Section ,(d.first_name||' '||replace(d.middle_name, '0', '')||' '||" +
                            "replace(d.last_name, '0', '')) as Student_Name,(d.f_firstname|| ' '|| replace(d.f_middlename, '0', '')||" +
                            " ' '|| replace(d.f_lastname, '0', '')) as Father_Name,s.roll_number,a.left_reason as Remarks,to_char" +
                            "( convert_tz( a.Ent_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Ent_Date" +
                            " FROM student_result a inner join add_class b on a.class_id = b.add_class_id and b.type = 'EAC' " +
                            "  and a.client_unit_id = b.client_unit_id  INNER JOIN master_setting c   on a.Section_Id = " +
                            "c.master_id   and C.type = 'ECS' and find_in_set(a.client_unit_id,c.client_unit_id)=1 inner join " +
                            "user_details d on a.reg_no = d.RegNumber and d.type = 'STD' inner join student_detail s  on s.vch_num=d.vch_num and  s.reg_no=d.regnumber" +
                            " and s.type='STD' and s.client_unit_id='" + unitid_mst + "' and s.academic_year_id='" + Ac_Year_id + "'  WHERE a.type = 'TSR'  " +
                            " and a.client_unit_id = '" + unitid_mst + "' and to_date(to_char(a.ent_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
              "and to_date('" + Ac_To_Date + "','" + sgen.Getsqldatetimeformat() + "') order by a.vch_num desc";
                            break;
                    }
                    break;
                #endregion
                #region leave_approval
                case "l_apr":
                    if (sgen.GetSession(Myguid, "M_ID") != null)
                    {
                        mid_mst = sgen.GetSession(Myguid, "M_ID").ToString();
                    }

                    string rptto = "";
                    cond = "";
                    if ((mid_mst.Trim().Equals("8007.1")) && (!role_mst.ToUpper().Equals("OWNER")))
                    {
                        rptto = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                        // cond = "and ( emp.rptto='" + rptto + "' or emp.rptto2='" + rptto + "')";
                        cond = "and  en.ref_code='" + userid_mst + "'";
                    }


                    switch (btnval.ToUpper())
                    {

                        case "APPROVED":
                            if (mid_mst.Trim().Equals("8007.1"))
                            {

                                cmd = "SELECT en.vch_num doc_no,en.col1 as employee_code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as employee_name,en.col9 as department,EN.COL11 as designation," +
                                      "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type,en.col6 as Remark,en.col7 as" +
                                      " Status,ms.master_name as reason,to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date,to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date" +
                                      " , ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Approved_By,to_char(en.ref_dt,'" + sgen.Getsqldateformat() + "') Approved_Date from enx_tab en INNER JOIN master_setting ms on en.col5 = ms.master_id and ms.type = 'ELM' and en.client_id = ms.client_id" +
                                      " and en.client_unit_id = ms.client_unit_id left join emp_master emp on en.col1= emp.emp_code and emp.type='EMP' and emp.client_unit_id='" + unitid_mst + "'  Inner join user_details ud on en.ref_code=ud.vch_num and ud.type='CPR'  where en.type = 'BLA'  and " +
                                      "en.client_unit_id = '" + unitid_mst + "' and en.col7 = 'Approved'  " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + " " + cond + "";
                            }
                            else
                            {
                                cmd = "SELECT (en.client_id||en.client_unit_id||en.vch_num||to_char(en.vch_date,'yyyymmdd')||en.type) as fstr,en.vch_num," +
                                      " (ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME,'0','')|| ' '|| replace(ud.last_name,'0','')) as Student_Name," +
                                      "cl.class as Class,sec.master_name as Section,sd.roll_number as RollNo, " +
                                      "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type," +
                                      "ms.master_name as Reason,en.col6 as Remark,en.col7 as Status, " +
                                      "to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date, " +
                                      "to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date," +
                                      "nvl((ap.FIRST_NAME|| ' '|| replace(ap.MIDDLE_NAME,'0','')|| ' '|| replace(ap.last_name,'0','')), '-') as Approved_By " +
                                      "from enx_tab en INNER JOIN user_details ud on en.col1 = ud.RegNumber and ud.type = 'STD' LEFT OUTER JOIN user_details ap on en.col8 = ap.vch_num  and ap.type = 'CPR' " +
                                      "INNER JOIN master_setting ms on en.col5 = ms.master_id  and en.client_unit_id = ms.client_unit_id and ms.type = 'ELM' " +
                                      "INNER JOIN student_detail sd on sd.Reg_no= en.col1  and sd.client_unit_id= en.client_unit_id and sd.type= 'STD' " +
                                      "INNER JOIN add_class cl on sd.CLASS_APPLIED= cl.add_class_id and sd.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                                      "INNER JOIN master_setting sec on sd.section= sec.master_id  and find_in_set(sd.client_unit_id,sec.client_unit_id)=1 and sec.type= 'ECS' " +
                                      "where en.type = 'ELA'  and en.client_unit_id = '" + unitid_mst + "' and en.col7='Approved'  " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + " ";
                            }
                            break;
                        case "REJECTED":
                            if (mid_mst.Trim().Equals("8007.1"))
                            {
                                cmd = "SELECT en.vch_num doc_no,en.col1 as employee_code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as employee_name,en.col9 as department,EN.COL11 as designation," +
                                      "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type,en.col6 as Remark,en.col7 as" +
                                      " Status,ms.master_name as reason,to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date,to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date" +
                                      ",  ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') Rejected_By,to_char(en.ref_dt,'" + sgen.Getsqldateformat() + "') Rejected_Date from enx_tab en INNER JOIN master_setting ms on en.col5 = ms.master_id and ms.type = 'ELM' " +
                                      " and find_in_set(en.client_unit_id,ms.client_unit_id)=1 left join emp_master emp on en.col1= emp.emp_code and emp.type='EMP' and emp.client_unit_id='" + unitid_mst + "'   Inner join user_details ud on en.ref_code=ud.vch_num and ud.type='CPR' where en.type = 'BLA'  and " +
                                      "en.client_unit_id = '" + unitid_mst + "' and en.col7 = 'Rejected'  " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + " " + cond + "";
                            }
                            else
                            {
                                cmd = "SELECT (en.client_id||en.client_unit_id||en.vch_num||to_char(en.vch_date,'yyyymmdd')||en.type) as fstr,en.vch_num," +
                                      " (ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME,'0','')|| ' '|| replace(ud.last_name,'0','')) as Student_Name," +
                                      "cl.class as Class,sec.master_name as Section,sd.roll_number as RollNo, " +
                                      "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type," +
                                      "ms.master_name as Reason,en.col6 as Remark,en.col7 as Status, " +
                                      "to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date, " +
                                      "to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date," +
                                      "nvl((ap.FIRST_NAME|| ' '|| replace(ap.MIDDLE_NAME,'0','')|| ' '|| replace(ap.last_name,'0','')), '-') as Approved_By " +
                                      "from enx_tab en INNER JOIN user_details ud on en.col1 = ud.RegNumber and ud.type = 'STD' LEFT OUTER JOIN user_details ap on en.col8 = ap.vch_num and ap.type = 'CPR' " +
                                      "INNER JOIN master_setting ms on en.col5 = ms.master_id  and find_in_set(en.client_unit_id , ms.client_unit_id)=1 and ms.type = 'ELM' " +
                                      "INNER JOIN student_detail sd on sd.Reg_no= en.col1  and sd.client_unit_id= en.client_unit_id and sd.type= 'STD' " +
                                      "INNER JOIN add_class cl on sd.CLASS_APPLIED= cl.add_class_id  and sd.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                                      "INNER JOIN master_setting sec on sd.section= sec.master_id and  find_in_set(sd.client_unit_id,sec.client_unit_id)=1 and sec.type= 'ECS' " +
                                      "where en.type = 'ELA' and  en.client_unit_id = '" + unitid_mst + "' and en.col7='Rejected'  " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + "";
                            }
                            break;
                    }
                    break;
                #endregion
                #region FeeType
                case "feetype":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            cmd = "select (client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type||master_type) as fstr,vch_num as Doc_No, " +
                                "feetype_id,feetypename from school_fee_type where type='0' " +
                                " and  client_unit_id='" + unitid_mst + "' and master_type='0' and  ispredefined=0 order by feetype_id ";
                            break;
                        case "VIEW":
                            cmd = "select (client_id||client_unit_id||vch_num||to_char(vch_date,'yyyymmdd')||type||master_type) as fstr,vch_num as Doc_No, " +
                                "feetype_id,feetypename, (case when ispredefined=1 then 'system_created' else 'user_created' end) created_user from school_fee_type where type='0' " +
                                " and  client_unit_id='" + unitid_mst + "' and master_type='0' order by feetype_id ";
                            break;
                    }
                    break;
                #endregion
                #region FeeHead
                case "feehead":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                            cmd = "select (a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'ddmmyyyy') || a.type || a.master_type||a.sectionid) as fstr,a.vch_num as Doc_No," +
                                "b.feetypename as fee_type_name, a.master_name as Fee_Head_Name," +
                                "(CASE WHEN a.section_strength = 'O' then 'For Old Students' WHEN a.section_strength = 'N' THEN 'For New Students' else 'For Both New and Old Students' END) as Student_type" +
                                " from master_setting a inner join school_fee_type b  on a.sectionid = b.feetype_id and(b.type = 'EEF' or b.type = '0') " +
                                "and a.client_unit_id = b.client_unit_id and b.master_type = '0' and b.FeeTypeName!='Fine' and" +
                                " b.FeeTypeName!='Transport'  and b.FeeTypeName!='Library' and b.feetypename!='Previous Year Fees' where a.type = 'EFH'" +
                                " and a.client_unit_id = '" + unitid_mst + "' and a.master_type = 'Education Fees Head'";
                            break;
                        case "VIEW":
                            cmd = "select (a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'ddmmyyyy') || a.type || a.master_type||a.sectionid) as fstr, a.vch_num as Doc_No," +
                                "b.feetypename as fee_type_name, a.master_name as Fee_Head_Name," +
                                "(CASE WHEN a.section_strength = 'O' then 'For Old Students' WHEN a.section_strength = 'N' THEN 'For New Students' else 'For Both New and Old Students' END) as Student_type" +
                                " from master_setting a inner join school_fee_type b  on a.sectionid = b.feetype_id and(b.type = 'EEF' or b.type = '0') " +
                                "and a.client_unit_id = b.client_unit_id and b.master_type = '0'  where a.type = 'EFH'" +
                                " and a.client_unit_id = '" + unitid_mst + "' and a.master_type = 'Education Fees Head'";
                            break;
                        case "CLEDGER":
                            cmd = "select vch_num||to_char(vch_date,'yyyymmdd')||type as fstr,vch_num as ldg_code,c_name as ldg_name,cpname as ldg_name_short from clients_mst where type='LDG' " +
                                "and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                            break;
                        case "DLEDGER":
                            cmd = "select vch_num||to_char(vch_date,'yyyymmdd')||type as fstr,vch_num as ldg_code,c_name as ldg_name,cpname as ldg_name_short from clients_mst where type='LDG' " +
                                "and find_in_set(client_unit_id,'" + unitid_mst + "')=1";
                            break;
                    }
                    break;
                #endregion
                #region homework
                case "mess":
                    switch (btnval.ToUpper())
                    {
                        //case "Topic":
                        //    cmd = "SELECT (c.client_id||c.client_unit_id||c.vch_num||to_char(c.vch_date, 'yyyymmdd')||c.type) as fstr,ac.Class,ms.master_name as Subject,ct.cat_name as" +
                        //        " Chapters,C.COU_TITLE AS Topic,C.COU_DESCP AS Description from courses c,add_class ac,master_setting ms, category ct where c.ref_code=ac.add_class_id" +
                        //        " and c.type='TOP' AND c.client_id='" + clientid_mst + "' AND c.client_unit_id='" + unitid_mst + "' and c.mod_id=ms.master_id and ms.type='ESW'" +
                        //        " and c.cat_id=ct.cat_id and ct.type='CHP' and c.ref_code='001' and c.client_id=ac.client_id and c.client_unit_id = ac.client_unit_id and" +
                        //        "  c.client_id=ms.client_id and c.client_unit_id = ms.client_unit_id and c.client_id=ct.client_id and c.client_unit_id = ct.client_unit_id";
                        //    break;
                        case "EDIT":
                        case "VIEW":
                            cmd = "select * from (SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date, 'yyyymmdd')||a.type) as fstr,to_char(a.Vch_date,'" + sgen.Getsqldateformat() + "') as HomeWork_Date,e.Class, " +
                               "  a.col3 as Mail_Subject_heading,a.col13 as Body_Text ,(case when a.col7='None' then 'Saved' else 'Sent' end) as Status ,(case when a.col12='H' then 'Home Work' else 'General' end) as Message_Type FROM enx_tab2 a,master_setting b,category c,courses d, add_class e where " +
                               " a.client_unit_id='" + unitid_mst + "' and a.col7='None' and " +
                               "a.type='AHW' and a.client_unit_id=b.client_unit_id and b.type='ESW' and a.client_unit_id = c.client_unit_id and c.type='CHP'  and to_date(to_char(a.vch_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
                                 "and to_date('" + Ac_To_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
                               " and a.col6= b.master_id and a.col5=c.cat_id and a.col2=d.vch_num and d.type='TOP' and a.client_unit_id = d.client_unit_id and a.client_unit_id=e.client_unit_id and find_in_set(e.add_class_id,a.col16)=1 union " +
                                "select (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')||a.type) as fstr,to_char(a.Vch_date,'" + sgen.Getsqldateformat() + "') as HomeWork_Date,e.Class ,a.col3 as " +
                                "Mail_Subject_heading,a.col13 as Body_Text,  " +
                                "(case when a.col7='None' then 'Saved' else 'Sent' end) as Status ,(case when a.col12='H' then 'Home Work' else 'General' end) as Message_Type" +
                                " from enx_tab2 a , add_class e where  a.client_unit_id = '" + unitid_mst + "' and a.type = 'AHW' and to_date(to_char(a.vch_DATE,'ddMMyyyy'),'ddMMyyyy') between to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "') " +
              "and to_date('" + Ac_To_Date + "','" + sgen.Getsqldatetimeformat() + "') and " +
                                "a.client_unit_id=e.client_unit_id and find_in_set(e.add_class_id,a.col16)=1 ) t   order by t.fstr  desc";
                            break;
                        case "RESEND":
                            cmd = "SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date, 'yyyymmdd')||a.type) as fstr,to_char(a.Vch_date,'" + sgen.Getsqldateformat() + "') as HomeWork_Date,e.Class, b.master_name as Subject,c.cat_name as Chapter,d.COU_TITLE AS Topic, " +
                               "  a.col3 as Mail_Subject_heading,a.col13 as Body_Text ,(case when a.col7='None' then 'Saved' else 'Sent' end) as Status ,(case when a.col12='H' then 'Home Work' else 'General' end) as Message_Type FROM enx_tab2 a,master_setting b,category c,courses d, add_class e where " +
                               " a.client_unit_id='" + unitid_mst + "' and a.col7 !='None' and " +
                               "a.type='AHW' and a.client_unit_id=b.client_unit_id and b.type='ESW' and a.client_unit_id = c.client_unit_id and c.type='CHP'" +
                               " and a.col6= b.master_id and a.col5=c.cat_id and a.col2=d.vch_num and d.type='TOP' and a.client_unit_id = d.client_unit_id and a.client_unit_id=e.client_unit_id and find_in_set(e.add_class_id,a.col16)=1 union " +
                               "select (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date, 'yyyymmdd')||a.type) as fstr,to_char(a.Vch_date,'" + sgen.Getsqldateformat() + "') as HomeWork_Date ,e.Class,'-' as Subject,'-' as Chapter ,'-' as Topic," +
                               "a.col3 as Mail_Subject_heading,a.col13 as Body_Text, (case when a.col7='None' then 'Saved' else 'Sent' end) as Status ,(case when a.col12='H' then 'Home Work' else 'General' end) as Message_Type" +
                               " from enx_tab2 a , add_class e where a.col7 !='None' and col12 = 'G' and a.client_unit_id = '" + unitid_mst + "' and a.type = 'AHW' and a.client_unit_id=e.client_unit_id and find_in_set(e.add_class_id,a.col16) =1 ";
                            break;
                    }
                    break;
                #endregion
                #region Datesheet
                case "datesheet":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                        case "PRINT":
                            cmd = "SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||a.col11) as fstr,a.vch_num doc_no," +
                                " GROUP_CONCAT(DISTINCT b.class) as Class,GROUP_CONCAT(distinct c.master_name)as Section,d.master_name as Exam_Frequency ," +
                                "e.master_name as Exam_Type, to_char(a.date1,'" + sgen.Getsqldateformat() + "') as Exam_Date,(f.First_name ||' ' || replace(f.middle_name,'0','') || ' '|| replace(f.last_name,'0','')) as" +
                                " Ent_By , to_char(convert_tz(a.Ent_Date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Ent_Date FROM  enx_tab a inner join add_class b on a.r_no=b.add_class_id " +
                                "INNER JOIN master_setting c on a.ref_code= c.master_id inner join master_setting d on a.col7= d.master_id and d.type= 'EFQ' " +
                                "INNER JOIN master_setting e on a.col8= e.master_id INNER join user_details f  on a.ent_by = f.vch_num WHERE a.type= 'EDS' and " +
                                " a.client_unit_id= '" + unitid_mst + "' and  a.client_unit_id= b.client_unit_id and " +
                                "find_in_set(a.client_unit_id ,c.client_unit_id)=1 and c.type = 'ECS' and d.type = 'EFQ' and e.type = 'EEM' " +
                                "and a.client_id = e.client_id and a.client_unit_id = e.client_unit_id and a.col11= '" + Ac_Year_id + "'  group by a.vch_num, d.master_name , " +
                                "e.master_name, (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')|| a.type || a.col11) ," +
                                "to_char(a.date1,'" + sgen.Getsqldateformat() + "'),(f.First_name || ' ' || replace(f.middle_name,'0','') || ' ' || replace(f.last_name,'0',''))," +
                                "to_char(convert_tz(a.Ent_Date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') order by a.vch_num desc";
                            break;
                    }
                    break;
                #endregion
                #region std_confirm
                case "std_confirm":
                    switch (btnval.ToUpper())
                    {
                        case "ATTACHMENT":
                            if (sgen.GetSession(MyGuid, "sch_vchnum") != null)
                            {
                                cmd = "select (client_id||client_unit_id||rec_id||to_char(vch_date,'yyyymmdd')||type) as fstr,file_name AS File_Name," +
                                    "col1 as File_Title from file_tab where type='STD'  and client_unit_id='" + unitid_mst + "' and ref_code='" + sgen.GetSession(MyGuid, "sch_vchnum").ToString() + "'";
                            }
                            break;
                    }
                    break;
                #endregion
                #region mis_fee
                case "mis_fee":
                    switch (btnval.ToUpper())
                    {
                        case "STR":

                            cmd = "SELECT (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||a.master_type||a.class_id||a.FeeType_Id||a.FeeHead_Id) as fstr,  b.class,e.FeetypeName, d.master_name as FeeHead" +
                        ",a.Fee_Amount ,c.FIRST_NAME as Ent_By,to_char(a.ent_Date,'" + sgen.Getsqldateformat() + "') as Ent_Date FROM school_fee_structure a ,add_class b,user_details c," +
                        "master_setting d,school_fee_type e where a.class_id=b.add_class_id and a.academic_year_id='" + Ac_Year_id + "'  " +
                        "and a.client_unit_id='" + unitid_mst + "'  and b.client_unit_id='" + unitid_mst + "' " +
                        " and d.client_unit_id='" + unitid_mst + "'  and e.client_unit_id='" + unitid_mst + "'  and a.ent_by=c.vch_num" +
                        " and a.FeeHead_Id=d.master_id and d.type='EFH'  and a.type='EFS' and a.FeeType_Id=e.FeeType_id and e.type='EEF' and a.master_type='B'" +
                        " and d.master_type='B' and e.master_type='B' and a.type='EFS'  order by b.sequence";
                            break;
                    }
                    break;
                #endregion
                #region class sub
                case "class_sub":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||a.academic_year_id) as fstr" +
                                " ,GROUP_CONCAT( DISTINCT b.class) as Class ,GROUP_CONCAT( DISTINCT c.master_name) as Section  from student_result a inner join " +
                                "add_class b  on a.class_id =b. add_class_id  and a.client_unit_id=b.client_unit_id " +
                                " and b.type='EAC' inner join master_setting c on c.master_id=a.section_id and c.type='ECS' " +
                                " and find_in_set(a.client_unit_id,c.client_unit_id)=1 inner join master_setting d  on a.sub_catid=d.master_id  and d.type='ESC'" +
                                " inner join master_setting e on a.subject_id=e.master_id and e.type='ESW'  " +
                                " and find_in_set(a.client_unit_id,e.client_unit_id)=1   where a.type='class_subject' " +
                                " and a.client_unit_id='" + unitid_mst + "' and a.academic_year_id='" + Ac_Year_id + "' group by " +
                                " (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||a.academic_year_id) ";
                            break;
                    }
                    break;
                #endregion
                #region fee_rpts
                case "fee_rpts":
                    sgen.SetSession(MyGuid, "RPTCMD", null);
                    switch (btnval.ToUpper())
                    {
                        case "RECEIPT":
                            // reena 2 line ok
                            cmd = "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr,Receipt_No," +
                                "to_char(a.Receipt_Date,'" + sgen.Getsqldateformat() + "') as Receipt_Date , sum(a.Receipt_Amount) as Receipt_Amount, " +
                                "      GROUP_CONCAT(distinct a.Month_Name) as Month_Name,c.class,b.RegNumber, b.FIRST_NAME from student_receipt_detail a" +
                                "  inner join user_details b on a.Student_id= b.vch_num and b.type='STD' inner join add_class c on a.Class_Id= c.add_class_id " +
                                " and c.type= 'EAC' and a.client_unit_id= c.client_unit_id inner join student_detail d on  a.student_id= d.vch_num and d.type= 'STD'" +
                                "  and a.client_unit_id= d.client_unit_id where  a.Academic_year_Id= '" + Ac_Year_id + "'and  a.client_unit_id= '" + unitid_mst + "'" +
                      " and a.type='ERD' group by  b.FIRST_NAME, (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type), c.class," +
                      " a.Receipt_No, a.Class_Id, b.RegNumber, a.Receipt_Date order by  a.Receipt_No desc";
                            break;

                        case "LEDGER":
                            //           cmd = "select (b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type) as fstr, c.Class as Class_Name, " +
                            //               " d.master_name as Section, ((a.FIRST_NAME)||' '||replace(a.MIDDLE_NAME,'0','')||' '||replace(a.LAST_NAME,'0','')) as Student_Name," +
                            //              "((a.f_firstname)||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') ) as Father_Name" +
                            //              "  ,a.Gender ,a.RegNumber as Reg_Number,b.Roll_number as Roll_Number , CASE when a.status='active' THEN 'Active' " +
                            //              " when a.status = '' THEN 'Active' when a.status='inactive' THEN 'Inactive' end as Status" +
                            //" from user_details a ,student_detail b,add_class c,master_setting d WHERE  a.rec_id=b.vch_num and a.regnumber=b.reg_no and b.Academic_year_Id='" + Ac_Year_id + "' and b.section IS NOT Null" +
                            //" and b.RollNo Is NOT Null and c.add_class_id=b.class_applied  and b.section =d.master_id and d.type='ECS' and b.academic_year_id='" + Ac_Year_id + "'" +
                            //" and  b.client_unit_id='" + unitid_mst + "'  " +
                            //"  and  c.client_unit_id='" + unitid_mst + "' and find_in_set(d.client_unit_id,'" + unitid_mst + "')=1  order by b.CLASS_APPLIED ,d.master_name";

                            cmd = "select (b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type) as fstr, c.Class as Class_Name, " +
                       " d.master_name as Section, ((a.FIRST_NAME)||' '||replace(a.MIDDLE_NAME,'0','')||' '||replace(a.LAST_NAME,'0','')) as Student_Name," +
                      "((a.f_firstname)||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') ) as Father_Name" +
                      "  ,a.Gender ,a.RegNumber as Reg_Number,b.Roll_number as Roll_Number , " +
                      "(CASE when a.status='active' THEN 'Active' when a.status = '' THEN 'Active' else 'Inactive' end) as Status" +
        " from user_details a ,student_detail b,add_class c,master_setting d WHERE  a.vch_num=b.vch_num and a.regnumber=b.reg_no and b.Academic_year_Id='" + Ac_Year_id + "' and b.section IS NOT Null" +
        " and b.Roll_Number Is NOT Null and c.add_class_id=b.class_applied  and b.section =d.master_id and d.type='ECS' and b.academic_year_id='" + Ac_Year_id + "'" +
        " and b.client_id='" + clientid_mst + "' and b.client_unit_id='" + unitid_mst + "'  and c.client_id='" + clientid_mst + "'" +
        " and c.client_unit_id='" + unitid_mst + "' and find_in_set( d.client_unit_id,'" + unitid_mst + "')=1  order by b.CLASS_APPLIED ,d.master_name";
                            break;
                    }
                    break;
                #endregion
                #region result_rpts
                case "result_rpts":
                    switch (btnval.ToUpper())
                    {
                        case "PRINT":
                        case "PRINT1":
                            cmd = "SELECT DISTINCT (sr.client_id||sr.client_unit_id||sr.vch_num||to_char(sr.vch_date, 'yyyymmdd')||sr.type ||sr.academic_year_id) as fstr," +
                           "ac.Class,cs.master_name as Section,sr.vch_num as Doc_Number,to_char( convert_tz( sr.Vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Doc_Date," +
                           "(ud.first_name||' '||replace(ud.middle_name,'0','')||' '||ud.last_name) as Enter_By,to_char( convert_tz(sr.ent_date,'UTC'," +
                           "'" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Entered_Date" +
                           " from Student_result  sr,user_details ud,add_class ac,master_setting cs where sr.type='SER' " +
                           " and sr.client_unit_id='" + unitid_mst + "' and  sr.ent_by = ud.vch_num and sr.class_id=ac.add_class_id " +
                           " and sr.client_unit_id=ac.client_unit_id and sr.section_id=cs.master_id" +
                           " and find_in_set(sr.client_unit_id,cs.client_unit_id)=1 and cs.type='ECS'";


                            break;


                    }
                    break;
                #endregion
                #region teacher_sub
                case "teacher_sub":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select fstr, Teacher_Name,GROUP_CONCAT( Class) as Class,Subject_Name,Ent_by,Ent_date from" +
                      " (select (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type)  as fstr," +
                      " a.teacher_id,((b.first_name)||' '||replace(b.last_name,'0','')) AS Teacher_Name,GROUP_CONCAT(DISTINCT class_teacher_id ) " +
                      "as Class_Teacher_Id,GROUP_CONCAT(DISTINCT section_teacher_id ) as Section_Teacher_Id,GROUP_CONCAT( distinct class_id) as Class_Id," +
                      "GROUP_CONCAT(distinct e.Class) as Class,GROUP_CONCAT(distinct subject_id ) as Subject_Id, group_concat( distinct f.master_name  ) " +
                      "as Subject_Name, ((g.first_name)||' '||replace(g.last_name,'0','')) as Ent_by,to_char" +
                      "( convert_tz( a.Ent_Date,'+0:00','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Ent_Date from teacher_subject a," +
                      "user_details b,add_class e,master_setting f,user_details g  where  a.client_unit_id= '" + unitid_mst + "' and " +
                      " f.master_id=a.subject_id and f.type='ESW' and a.class_id=e.add_class_id and a.client_id=f.client_id and a.client_unit_id" +
                      "=f.client_unit_id and a.client_id=e.client_id and a.client_unit_id=e.client_unit_id    and a.Teacher_Id=b.vch_num and b.type='CPR'" +
                      " and a.client_id=b.client_id and a.client_unit_id=b.client_unit_id and a.ent_by=g.vch_num  group  by a.teacher_id,a.class_id," +
                      "a.ent_by,(a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type) ," +
                      "((b.first_name)||' '||replace(b.last_name,'0','')) , ((g.first_name)||' '||replace(g.last_name,'0','')) " +
                      ",to_char(convert_tz(a.Ent_Date, '+0:00', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')  order by Teacher_Id)    tab GROUP by" +
                      " Teacher_Id,ent_by,Subject_Name,fstr,Teacher_Name,Ent_date";
                            break;
                    }
                    break;
                #endregion
                #region Grade
                case "grade":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "VIEW":
                            cmd = "select (a.client_id|| a.client_unit_id|| a.vch_num|| to_char(a.vch_date,'yyyymmdd')||a.type)  as fstr, (case when  length(a.vch_num)=6 then a.vch_num else lpad(a.vch_num, 6, 0) end ) vch_num," +
                                "a.vch_date,b.class,a.GradePostion_Per,a.grade,a.position from student_result a inner join " +
                                "add_class b on a.class_id = b.add_class_id where a.type = 'Result_Master'  and a.client_unit_id = '" + unitid_mst + "'" +
                                " order by a.rec_id desc";
                            break;
                    }
                    break;
                #endregion
                #region fine setting
                case "late_fee":
                    switch (btnval.ToUpper())
                    {
                        case "EDIT":
                        case "WAVEOFF":
                            cmd = "Select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr, GROUP_CONCAT( b.Class) as class" +
                                " , a. Col2 as No_Of_Days, col3 as Fine_Per_Day,col4 as Wave_Off_Amt,d.FIRST_NAME as Ent_By,to_char(a.ent_Date,'ddmmyyyy') as Ent_Date" +
                                " from enx_tab a,add_class b,user_details d  WHERE  a.ref_code=b.add_class_id and a.ent_by= d.vch_num and a.type='EFS'" +
                                "and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "'and b.client_id='" + clientid_mst + "' and b.client_unit_id='" + unitid_mst + "'  " +
                                "  group by (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type), a.Col2,a.col3 ,a.col4,d.FIRST_NAME,a.ent_Date " +
                                " ORDER BY (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type)  desc";
                            break;

                        case "VIEW":
                            cmd = "Select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) as fstr, b.Class ," +
                                " a. Col2 as No_Of_Days, col3 as Fine_Per_Day,col4 as Wave_Off_Amt,d.FIRST_NAME as Ent_By,to_char(a.ent_Date,'dd/mm/yyyy') as Ent_Date " +
                                "from enx_tab a,add_class b,user_details d  WHERE  a.ref_code=b.add_class_id and a.ent_by= d.vch_num and a.type='EFS'" +
                                "and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "'and b.client_id='" + clientid_mst + "' and b.client_unit_id='" + unitid_mst + "'   " +
                                " ORDER BY a.vch_num desc";

                            break;
                    }
                    break;
                    #endregion
            }
            sgen.open_grid(title, cmd, sgen.Make_int(seektype));
            ViewBag.pageurl = sgen.GetSession(MyGuid, "pageurl").ToString();
        }
        #endregion        
        [HttpGet]
        public FileResult expfile()
        {
            FillMst();
            string value = sgen.GetSession(MyGuid, "std_attch").ToString();
            if (!value.Trim().Equals(""))
            {
                DataTable dt2 = new DataTable();
                mq = "select file_name,file_path from file_tab where " + value + "";
                dt2 = sgen.getdata(userCode, mq);
                if (dt2.Rows.Count > 0)
                {
                    path1 = Convert.ToString(dt2.Rows[0]["file_path"]);
                    fileName1 = Convert.ToString(dt2.Rows[0]["file_name"]);
                }
            }
            byte[] fileBytes = System.IO.File.ReadAllBytes(Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/" + path1));
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fileName1);
        }
        #region Day Care Master
        #region Day Care Fee
        public ActionResult DC_Fee()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            Tmodelmain tmodel = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                TList1 = mod1,
                SelectedItems1 = new string[] { "" },
            }
                );
            return View(model);
        }
        [HttpPost]
        public ActionResult DC_Fee(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                tab_name = "";
                type = "";
                type_desc = "";
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                if (command == "New")
                {

                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";

                }
                else if (command == "Save")
                {
                    try
                    {
                        var tmodel = model.FirstOrDefault();
                        string currdate = sgen.server_datetime(userCode);
                        string vch_num = "", master_id = "";
                        string cond = "";
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            isedit = true;
                        }
                        else
                        {
                            cond = "";
                            isedit = false;
                            vch_num = sgen.genNo(userCode, "select max(to_number(vch_num)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                        }
                    }
                    catch (Exception ex)
                    { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Day Care Activity
        public ActionResult DC_Activity()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            Tmodelmain tmodel = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                TList1 = mod1,
                SelectedItems1 = new string[] { "" },
            }
                );
            return View(model);
        }
        [HttpPost]
        public ActionResult DC_Activity(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                tab_name = "";
                type = "";
                type_desc = "";
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                if (command == "New")
                {
                    try
                    {
                        sgen.SetSession(MyGuid, "EDMODE", "N");
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "enableForm();";
                    }
                    catch (Exception ex)
                    { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                }
                else if (command == "Save")
                {
                    try
                    {
                        var tmodel = model.FirstOrDefault();
                        string currdate = sgen.server_datetime(userCode);
                        string vch_num = "", master_id = "";
                        string cond = "";
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            isedit = true;
                        }
                        else
                        {
                            cond = "";
                            isedit = false;
                            vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                        }
                    }
                    catch (Exception ex)
                    { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #endregion
        #region Day Care Students
        public ActionResult DC_Students()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            Tmodelmain tmodel = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                TList1 = mod1,
                SelectedItems1 = new string[] { "" },
            }
                );
            return View(model);
        }
        [HttpPost]
        public ActionResult DC_Students(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                tab_name = "";
                type = "";
                type_desc = "";
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                if (command == "New")
                {
                    try
                    {
                        sgen.SetSession(MyGuid, "EDMODE", "N");
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "enableForm();";
                    }
                    catch (Exception ex)
                    { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                }
                else if (command == "Save")
                {
                    try
                    {
                        var tmodel = model.FirstOrDefault();
                        string currdate = sgen.server_datetime(userCode);
                        string vch_num = "", master_id = "";
                        string cond = "";
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            isedit = true;
                        }
                        else
                        {
                            cond = "";
                            isedit = false;
                            vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                        }
                    }
                    catch (Exception ex)
                    { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Day Care Activity Update
        public ActionResult DC_Act_Upd()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            Tmodelmain tmodel = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                TList1 = mod1,
                SelectedItems1 = new string[] { "" },
            }
                );
            return View(model);
        }
        [HttpPost]
        public ActionResult DC_Act_Upd(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                tab_name = "";
                type = "";
                type_desc = "";
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                if (command == "New")
                {
                    try
                    {
                        sgen.SetSession(MyGuid, "EDMODE", "N");
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "enableForm();";
                    }
                    catch (Exception ex)
                    { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                }
                else if (command == "Save")
                {
                    try
                    {
                        var tmodel = model.FirstOrDefault();
                        string currdate = sgen.server_datetime(userCode);
                        string vch_num = "", master_id = "";
                        string cond = "";
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            isedit = true;
                        }
                        else
                        {
                            cond = "";
                            isedit = false;
                            vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                        }
                    }
                    catch (Exception ex)
                    { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region grade
        public ActionResult grade()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            DataTable dt = new DataTable();
            TempData[MyGuid + "_EDMODE"] = "N";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            Tmodelmain tm1 = new Tmodelmain();
            tm1.Col10 = "student_result";
            tm1.Col13 = "Save";
            tm1.Col100 = "Save & New";
            tm1.Col121 = "S";
            tm1.Col122 = "<u>S</u>ave";
            tm1.Col123 = "Save & Ne<u>w</u>";
            //tm1.Col9 = "CONFIRM CLIENT";
            tm1.Col9 = "GRADE";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col12 = "Result_Master";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = MyGuid.Trim();

            Tmodelmain tmltm1 = new Tmodelmain();
            tmltm1.Col1 = "1";
            tm1.LTM1.Add(tmltm1);

            TempData[MyGuid + "_TList1"] = tm1.LTM1[0].TList1 = mod1 = sgen.BindClass_Actual(userCode, unitid_mst);
            if (tmltm1.SelectedItems1 == null) tmltm1.SelectedItems1 = new string[] { "" };


            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult grade(List<Tmodelmain> model, string command, string hfrow)
        {
            try
            {
                bool ok = false;
                int fcount = 0;
                FillMst();
                var tm = model.FirstOrDefault();
                string fromclass = "", Txt_ProPer = "";
                FillMst(model[0].Col15);

                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (command == "New")
                {
                    try
                    {
                        sgen.SetSession(MyGuid, "EDMODE", "N");
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "enableForm();";
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                        Tmodelmain tmltm1 = new Tmodelmain();
                        mod1 = new List<SelectListItem>();
                        DataTable dt = new DataTable();

                        #region bindclass
                        TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = sgen.BindClass_Actual(userCode, unitid_mst);

                        #endregion

                    }
                    catch (Exception ex) { }
                }

                else if (command == "Callback")
                {

                    if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; }
                    else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    String URL = sgen.GetSession(MyGuid, "SSEEKVAL").ToString();

                    model = CallbackFun(btnval, "N", controllerName, "grade", model);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";

                }
                else if (command == "properc")
                {


                    // fromclass = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Value.ToString();
                    Txt_ProPer = sgen.getstring(userCode, "select Promting_perc from student_result where type='Result_Master' and " +
                       "class_id='" + model[0].SelectedItems1.FirstOrDefault() + "'  and student_result.client_unit_id='"
                       + unitid_mst + "'");
                    model[0].Col17 = Txt_ProPer;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";


                }
                else if (command == "+")
                {

                    Tmodelmain ntm = new Tmodelmain();
                    ntm.Col1 = (Convert.ToInt32(model[0].LTM1.Max(x => sgen.Make_int(x.Col1))) + 1).ToString();
                    model[0].LTM1.Add(ntm);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";

                }
                else if (command == "X")
                {
                    if (model[0].LTM1.Count > 1) model[0].LTM1.RemoveAt(sgen.Make_int(hfrow));
                    else
                    {
                        ViewBag.scripCall = "showmsgJS(1,'You cannot remove last entry',2)";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";

                        return View(model);
                    }
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                }

                else if (command.Trim() == "Save" || command.Trim() == "Update" || command == "Save & New" || command == "Update & New")
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);

                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                        mq1 = " and vch_num<>'" + tmodel.Col16.Trim() + "'";


                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                        mq1 = "";
                    }

                    string found = sgen.getstring(userCode, @"select vch_num from student_result where type='Result_Master' and 
                                    class_id='" + model[0].SelectedItems1.FirstOrDefault() + "' and Academic_Year_Id='" + Ac_Year_id + "'" +
                                    " and  client_unit_id='" + unitid_mst + "' " + mq1 + "");

                    if (found != "")
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Grade Already Set for Selected Class', 2);";
                        return View(model);
                    }

                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10);

                    for (int k = 0; k < model[0].LTM2.Count; k++)
                    {
                        string foundgrade = sgen.getstring(userCode, @"select id from student_result where type='Result_Master' and  class_id='" + model[0].SelectedItems1.FirstOrDefault() + "' " +
                                "                                     and Academic_Year_Id='" + Ac_Year_id + "' and Grade='" + model[0].LTM1[k].Col3 + "' and " +
                                "                                         client_unit_id='" + unitid_mst + "'");
                        if (foundgrade == "")
                        {
                            DataRow dr2 = dataTable.NewRow();
                            dr2["id"] = k;
                            dr2["rec_id"] = "0";
                            dr2["Academic_Year_Id"] = Ac_Year_id;
                            dr2["type"] = model[0].Col12;
                            dr2["vch_date"] = currdate;
                            dr2["vch_num"] = model[0].Col16;
                            dr2["class_id"] = model[0].SelectedItems1.FirstOrDefault();
                            dr2["Promting_perc"] = model[0].Col17;
                            dr2["GradePostion_Per"] = model[0].LTM1[k].Col2;
                            dr2["Grade"] = model[0].LTM1[k].Col3;
                            dr2["Position"] = model[0].LTM1[k].Col4;
                            dr2["Promoted"] = "1";

                            if (isedit)
                            {
                                dr2["client_id"] = model[0].Col1.Trim();
                                dr2["client_unit_id"] = model[0].Col2.Trim();
                                dr2["ent_by"] = model[0].Col3;
                                dr2["ent_date"] = model[0].Col4;
                                dr2["edit_by"] = userid_mst;
                                dr2["edit_date"] = currdate;
                            }
                            else
                            {
                                dr2["client_id"] = clientid_mst;
                                dr2["client_unit_id"] = unitid_mst;
                                dr2["ent_by"] = userid_mst;
                                dr2["ent_date"] = currdate;
                                dr2["edit_by"] = "-"; ;
                                dr2["edit_date"] = currdate;
                            }
                            dataTable.Rows.Add(dr2);
                        }
                        //dtfile = cmd_Fun.GetStructure(userCode, "file_tab");


                    }

                    ok = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, model[0].Col8, isedit);

                    if (ok == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            LTM1 = new List<Tmodelmain>() { new Tmodelmain {
                            TList1=mod1,
                            SelectedItems1=new string[]{ "" }
                            } }
                        });
                    }


                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Student registration form
        public ActionResult std_registration(string m_id, string mid, string fstr)
        {
            List<Tmodelmain> model = new List<Tmodelmain>();
            try
            {
                FillMst(EncryptDecrypt.Decrypt(m_id));
                chkRef();

                Tmodelmain tm1 = new Tmodelmain();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
                m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
                //Session["vch_num_std"] = null;
                tm1.Col14 = mid_mst.Trim();
                tm1.Col15 = m_id_mst.Trim();
                tm1.Col116 = "0"; //fstr
                tm1.Col118 = "0";//from registration

                DataTable dtu = sgen.getdata(userCode, "select unit_address,logo_path from company_unit_profile where company_profile_id='" + unitid_mst + "'");
                if (dtu.Rows.Count > 0)
                {
                    tm1.Col22 = dtu.Rows[0]["unit_address"].ToString();
                    tm1.Col23 = dtu.Rows[0]["logo_path"].ToString();
                }
                if (Request.QueryString["fstr"] != null)
                {
                    if (Request.QueryString["fstr"].StartsWith("1001001"))
                    {
                        tm1.Col116 = EncryptDecrypt.Decrypt(Request.QueryString["fstr"].ToString().Replace("1001001", "").Trim());
                        tm1.Col118 = "1";//before confirmation
                        tm1.Col9 = "STUDENT REGISTRATION FORM";
                        tm1.Col10 = "student_applicant_details";
                        tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                        tm1.Col12 = "STD";
                        tm1.Col13 = "Save";
                        tm1.Col134 = "Save & New";
                        tm1.Col131 = "S";
                        tm1.Col132 = "<u>S</u>ave";
                        tm1.Col133 = "Save & Ne<u>w</u>";
                        tm1.Col15 = MyGuid;
                        sgen.SetSession(MyGuid, "SSEEKVAL", tm1.Col116);
                        model.Add(tm1);
                        CallbackFun("EDIT", "Y", "std_registration", "Education", model);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    else if (Request.QueryString["fstr"].StartsWith("200200200"))
                    {
                        tm1.Col116 = EncryptDecrypt.Decrypt(Request.QueryString["fstr"].ToString().Replace("200200200", "").Trim());
                        tm1.Col118 = "1";//before confirmation
                        tm1.Col9 = "STUDENT REGISTRATION FORM";
                        tm1.Col10 = "student_applicant_details";
                        tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                        tm1.Col12 = "STD";
                        tm1.Col13 = "Save";
                        tm1.Col134 = "Save & New";
                        tm1.Col131 = "S";
                        tm1.Col132 = "<u>S</u>ave";
                        tm1.Col133 = "Save & Ne<u>w</u>";
                        tm1.Col15 = MyGuid;
                        sgen.SetSession(MyGuid, "SSEEKVAL", tm1.Col116);
                        model.Add(tm1);
                        CallbackFun("EDIT", "N", "std_registration", "Education", model);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall = "disableForm();";
                        return View(model);
                    }
                    else
                    {
                        tm1.Col116 = EncryptDecrypt.Decrypt(Request.QueryString["fstr"]);
                        tm1.Col118 = "2";//after confirmation edit std through list of student
                        tm1.Col9 = "UPDATE STUDENT DETAILS";
                        tm1.Col10 = "user_details";
                        tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                        tm1.Col12 = "STD";
                        tm1.Col13 = "Save";
                        tm1.Col134 = "Save & New";
                        tm1.Col131 = "S";
                        tm1.Col132 = "<u>S</u>ave";
                        tm1.Col133 = "Save & Ne<u>w</u>";
                        tm1.Col15 = MyGuid;
                        model.Add(tm1);
                        model = CallbackFun("CONFSTD", "Y", "std_registration", "Education", model);
                        if (model[0].Col130 == "error")
                        {
                            ModelState.Clear();
                            return View(model);
                        }
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                }
                ViewBag.vnew = "";
                ViewBag.vedit = "";
                ViewBag.vsave = "disabled='disabled'";
                ViewBag.vsavenew = "disabled='disabled'";
                ViewBag.scripCall = "disableForm();";
                tm1.Col9 = "STUDENT REGISTRATION FORM"; tm1.Col12 = "STD";
                tm1.Col10 = "student_applicant_details";
                tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                tm1.Col13 = "Save";
                tm1.Col134 = "Save & New";
                tm1.Col131 = "S";
                tm1.Col132 = "<u>S</u>ave";
                tm1.Col133 = "Save & Ne<u>w</u>";
                tm1.Col91 = "file_tab";
                tm1.Col79 = "Choose File";
                tm1.Col80 = "Choose File";
                tm1.Col81 = "Choose File";
                tm1.Col82 = "Choose File";
                tm1.Col83 = "Choose File";
                tm1.Col84 = "Choose File";
                tm1.Col85 = "Choose File";
                tm1.Col97 = "Choose File";
                tm1.Col98 = "Choose File";
                tm1.Col99 = "Choose File";
                tm1.Col100 = "Choose File";
                tm1.Col101 = "Choose File";
                tm1.Col102 = "Choose File";
                //Session["ATR_MID"] = mid_mst.Trim();
                //Session["ATYPE_MST"] = tm1.Col12.Trim();
                sgen.SetSession(MyGuid, "ACOND_MST", tm1.Col11);
                //Session["ATBL_MST"] = tm1.Col10.Trim();
                tm1.Col18 = "";

                tm1.TList29 = tm1.TList28 = tm1.TList27 = tm1.TList26 = tm1.TList25 = tm1.TList24 = tm1.TList23 = tm1.TList22 = tm1.TList21 = tm1.TList20 = tm1.TList19 = tm1.TList18 = tm1.TList17 = tm1.TList16 = tm1.TList15 = tm1.TList14 = tm1.TList13 = tm1.TList12 = tm1.TList11 = tm1.TList10 = tm1.TList9 = tm1.TList8 = tm1.TList7 = tm1.TList6 = tm1.TList5 = tm1.TList4 = tm1.TList3 = tm1.TList2 = tm1.TList1 = mod1;

                tm1.SelectedItems29 = tm1.SelectedItems28 = tm1.SelectedItems27 = tm1.SelectedItems26 = tm1.SelectedItems25 = tm1.SelectedItems24 = tm1.SelectedItems23 = tm1.SelectedItems22 = tm1.SelectedItems21 = tm1.SelectedItems20 = tm1.SelectedItems19 = tm1.SelectedItems18 = tm1.SelectedItems17 = tm1.SelectedItems16 = tm1.SelectedItems15 = tm1.SelectedItems14 = tm1.SelectedItems13 = tm1.SelectedItems12 = tm1.SelectedItems11 = tm1.SelectedItems10 = tm1.SelectedItems9 = tm1.SelectedItems8 = tm1.SelectedItems7 = tm1.SelectedItems6 = tm1.SelectedItems5 = tm1.SelectedItems4 = tm1.SelectedItems3 = tm1.SelectedItems2 = tm1.SelectedItems1 = new string[] { "" };

                //mq = "select edu_board from company_unit_profile where company_profile_id='" + clientid_mst + "' and cup_id='" + unitid_mst + "'";
                mq = "select edu_board from company_unit_profile where cup_id='" + unitid_mst + "'";
                mq = sgen.seekval(userCode, mq, "edu_board");
                if (mq.Trim() != "0")
                {
                    if (mq.Trim().Equals("002")) tm1.Col104 = mq.Trim();
                    else if (mq.Trim().Equals("001")) tm1.Col117 = mq.Trim();
                }

                if (role_mst.ToUpper().Equals("OWNER"))
                {
                    mq = "select mod_id from com_module where mod_id='25000' and com_code='" + userCode + "'";
                    mq = sgen.seekval(userCode, mq, "mod_id");
                    if (mq != "0") tm1.Col109 = "1";
                }
                else
                {
                    mq = "select mod_id from user_details where type='CPR' and vch_num='" + Convert.ToInt32(userid_mst) + "' and find_in_set('25000',mod_id)=1";
                    mq = sgen.seekval(userCode, mq, "mod_id");
                    if (mq != "0") { if (mq.Trim().Split(',').Contains("25000")) tm1.Col109 = "1"; }
                }
                tm1.LTM1 = new List<Tmodelmain>();
                tm1.Chk4 = true;
                //path = "data:" + Model[0].LTM1[f].Col5 + ";base64," + Convert.ToBase64String(File.ReadAllBytes(HttpContext.Current.Server.MapPath("/Uploads/" + userCode + "/" + Model[0].LTM1[f].Col4)));
                //string pdfPath = Server.MapPath("/Uploads/" + userCode + "/" + "MDAxMDAxMDAxMDAwMDAxMjAxOS0xMS0xMiAwNTo0MTo0MV9GaWxlICgzKS5wZGY=");
                //byte[] pdfBytes =System.IO.File.ReadAllBytes(pdfPath);
                //string pdfBase64 = Convert.ToBase64String(pdfBytes);
                //var path = "data:application/pdf;base64," + pdfBase64;
                //ViewBag.scripCall = "renderPDF('" + path + "', document.getElementById('holder'));";
                model.Add(tm1);
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            return View(model);
        }
        public List<Tmodelmain> new_std_registration(List<Tmodelmain> model)
        {
            try
            {
                string defval = "";
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                List<SelectListItem> mod3 = new List<SelectListItem>();
                List<SelectListItem> mod4 = new List<SelectListItem>();
                List<SelectListItem> mod5 = new List<SelectListItem>();
                List<SelectListItem> mod6 = new List<SelectListItem>();
                List<SelectListItem> mod7 = new List<SelectListItem>();
                List<SelectListItem> mod8 = new List<SelectListItem>();
                List<SelectListItem> mod9 = new List<SelectListItem>();
                List<SelectListItem> mod10 = new List<SelectListItem>();
                List<SelectListItem> mod11 = new List<SelectListItem>();
                List<SelectListItem> mod12 = new List<SelectListItem>();
                List<SelectListItem> mod13 = new List<SelectListItem>();
                List<SelectListItem> mod14 = new List<SelectListItem>();
                List<SelectListItem> mod15 = new List<SelectListItem>();
                List<SelectListItem> mod16 = new List<SelectListItem>();
                List<SelectListItem> mod17 = new List<SelectListItem>();
                List<SelectListItem> mod18 = new List<SelectListItem>();
                List<SelectListItem> mod19 = new List<SelectListItem>();
                List<SelectListItem> mod20 = new List<SelectListItem>();
                List<SelectListItem> mod21 = new List<SelectListItem>();
                List<SelectListItem> mod22 = new List<SelectListItem>();
                List<SelectListItem> mod23 = new List<SelectListItem>();
                List<SelectListItem> mod24 = new List<SelectListItem>();
                List<SelectListItem> mod25 = new List<SelectListItem>();
                List<SelectListItem> mod26 = new List<SelectListItem>();
                List<SelectListItem> mod27 = new List<SelectListItem>();
                List<SelectListItem> mod28 = new List<SelectListItem>();
                List<SelectListItem> mod29 = new List<SelectListItem>();
                sgen.SetSession(MyGuid, "EDMODE", "N");
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
                ViewBag.scripCall = "enableForm();";
                mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                model[0].Col17 = vch_num;
                model[0].LTM1 = new List<Tmodelmain>();
                DataTable dt = new DataTable();

                #region 1.bindnationality
                mq = @"select DISTINCT alpha_2,country_name from country_state";
                dt = sgen.getdata(userCode, mq);
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        mod1.Add(new SelectListItem { Text = dr["country_name"].ToString(), Value = dr["alpha_2"].ToString() });
                    }
                }
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_TList13"] = model[0].TList13 = mod1;
                TempData[MyGuid + "_Tlist18"] = model[0].TList18 = mod1;
                TempData[MyGuid + "_TList23"] = model[0].TList23 = mod1;
                #endregion
                #region 2.bindclass
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClass(userCode, unitid_mst);
                TempData[MyGuid + "_Tlist10"] = model[0].TList10 = mod2;
                TempData[MyGuid + "_TList27"] = model[0].TList27 = mod2;
                #endregion

                #region 3.bindacademicyr
                dt = sgen.BindAcademicYear(userCode, clientid_mst);
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        mod3.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                    }
                }
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                #endregion
                #region 

                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = cmd_Fun.caste_cate(userCode, unitid_mst);  //4.caste

                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = cmd_Fun.religion(userCode, unitid_mst); // 5.Religion
                #endregion
                #region 6.bloodgroup
                mod6.Add(new SelectListItem { Text = "A+", Value = "A+" });
                mod6.Add(new SelectListItem { Text = "B+", Value = "B+" });
                mod6.Add(new SelectListItem { Text = "AB+", Value = "AB+" });
                mod6.Add(new SelectListItem { Text = "O+", Value = "O+" });
                mod6.Add(new SelectListItem { Text = "A-", Value = "A-" });
                mod6.Add(new SelectListItem { Text = "B-", Value = "B-" });
                mod6.Add(new SelectListItem { Text = "AB-", Value = "AB-" });
                mod6.Add(new SelectListItem { Text = "O-", Value = "O-" });
                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                #endregion
                #region 7.pickuplocation
                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod7 = cmd_Fun.pickdrop(userCode, unitid_mst);


                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod8 = cmd_Fun.pickdrop(userCode, unitid_mst);    // 8.droplocation
                #endregion
                #region 9.disablity
                mod9.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                mod9.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                TempData[MyGuid + "_Tlist9"] = model[0].TList9 = mod9;
                #endregion
                #region 11.hobby
                TempData[MyGuid + "_Tlist11"] = model[0].TList11 = mod11 = cmd_Fun.hobby(userCode, unitid_mst);
                #endregion
                #region 12.father title
                mod12.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                mod12.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                mod12.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                mod12.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                TempData[MyGuid + "_Tlist12"] = model[0].TList12 = mod12;
                #endregion
                #region 14.qualification
                TempData[MyGuid + "_Tlist14"] = model[0].TList14 = mod13 = cmd_Fun.qualification(userCode, unitid_mst, out defval);
                TempData[MyGuid + "_TList19"] = model[0].TList19 = mod13;
                TempData[MyGuid + "_TList24"] = model[0].TList24 = mod13;
                #endregion
                #region 15.Annual income
                TempData[MyGuid + "_Tlist15"] = model[0].TList15 = mod14 = cmd_Fun.annincome(userCode, unitid_mst);
                TempData[MyGuid + "_TList20"] = model[0].TList20 = mod14;
                TempData[MyGuid + "_TList26"] = model[0].TList26 = mod14;
                #endregion
                #region 16.Alumini
                mod15.Add(new SelectListItem { Text = "None", Value = "None" });
                mod15.Add(new SelectListItem { Text = "Staff", Value = "Staff" });
                mod15.Add(new SelectListItem { Text = "Student", Value = "Student" });
                TempData[MyGuid + "_Tlist16"] = model[0].TList16 = mod15;
                TempData[MyGuid + "_TList21"] = model[0].TList21 = mod15;
                TempData[MyGuid + "_TList25"] = model[0].TList25 = mod15;
                #endregion
                #region 17.Mother title
                mod16.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                mod16.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                mod16.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                mod16.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                TempData[MyGuid + "_Tlist17"] = model[0].TList17 = mod16;
                #endregion
                #region 18.Gurdian title
                mod17.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                mod17.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                mod17.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                mod17.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                TempData[MyGuid + "_TList22"] = model[0].TList22 = mod17;
                #endregion
                #region 28.relation
                mod28.Add(new SelectListItem { Text = "Brother", Value = "B" });
                mod28.Add(new SelectListItem { Text = "Sister", Value = "S" });
                TempData[MyGuid + "_TList28"] = model[0].TList28 = mod28;
                #endregion
                #region 29.caste ccate
                TempData[MyGuid + "_TList29"] = model[0].TList29 = mod29 = cmd_Fun.caste(userCode, unitid_mst);
                #endregion

                #region SELECTEDITEM

                model[0].SelectedItems1 = new string[] { "IN" };
                model[0].SelectedItems2 = new string[] { "" };
                model[0].SelectedItems3 = new string[] { Ac_Year_id };
                model[0].SelectedItems4 = new string[] { "" };
                model[0].SelectedItems5 = new string[] { "" };
                model[0].SelectedItems6 = new string[] { "" };
                model[0].SelectedItems7 = new string[] { "" };
                model[0].SelectedItems8 = new string[] { "" };
                model[0].SelectedItems9 = new string[] { "" };
                model[0].SelectedItems10 = new string[] { "" };
                model[0].SelectedItems11 = new string[] { "" };
                model[0].SelectedItems12 = new string[] { "Mr." };
                model[0].SelectedItems13 = new string[] { "IN" };
                model[0].SelectedItems14 = new string[] { "" };
                model[0].SelectedItems15 = new string[] { "" };
                model[0].SelectedItems16 = new string[] { "None" };
                model[0].SelectedItems17 = new string[] { "Mrs." };
                model[0].SelectedItems18 = new string[] { "IN" };
                model[0].SelectedItems19 = new string[] { "" };
                model[0].SelectedItems20 = new string[] { "" };
                model[0].SelectedItems21 = new string[] { "None" };
                model[0].SelectedItems22 = new string[] { "" };
                model[0].SelectedItems23 = new string[] { "IN" };
                model[0].SelectedItems24 = new string[] { "" };
                model[0].SelectedItems25 = new string[] { "" };
                model[0].SelectedItems26 = new string[] { "" };
                model[0].SelectedItems27 = new string[] { "" };
                model[0].SelectedItems28 = new string[] { "" };
                model[0].SelectedItems29 = new string[] { "" };
                #endregion
                model[0].Col110 = "New";
                if (mod3.Count == 2) { model[0].Col110 = "Old"; }
                model[0].Col13 = "Save";
                model[0].Col21 = "Male";
                model[0].Col125 = "N";
                model[0].Chk4 = true;

            }
            catch (Exception ex) { }
            return model;
        }
        [HttpPost]
        public ActionResult std_registration(List<Tmodelmain> model, string command, HttpPostedFileBase upd1, HttpPostedFileBase upd2, HttpPostedFileBase upd3,
            HttpPostedFileBase upd4, HttpPostedFileBase upd5, HttpPostedFileBase upd6, HttpPostedFileBase upd7, HttpPostedFileBase upd8, HttpPostedFileBase upd9,
            HttpPostedFileBase upd10, HttpPostedFileBase upd11, HttpPostedFileBase upd12, HttpPostedFileBase upd13)
        {
            try
            {
                FillMst(model[0].Col15);
                type_desc = "Std Tmp Registration";
                #region dropdown
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                List<SelectListItem> mod3 = new List<SelectListItem>();
                List<SelectListItem> mod4 = new List<SelectListItem>();
                List<SelectListItem> mod5 = new List<SelectListItem>();
                List<SelectListItem> mod6 = new List<SelectListItem>();
                List<SelectListItem> mod7 = new List<SelectListItem>();
                List<SelectListItem> mod8 = new List<SelectListItem>();
                List<SelectListItem> mod9 = new List<SelectListItem>();
                List<SelectListItem> mod10 = new List<SelectListItem>();
                List<SelectListItem> mod11 = new List<SelectListItem>();
                List<SelectListItem> mod12 = new List<SelectListItem>();
                List<SelectListItem> mod13 = new List<SelectListItem>();
                List<SelectListItem> mod14 = new List<SelectListItem>();
                List<SelectListItem> mod15 = new List<SelectListItem>();
                List<SelectListItem> mod16 = new List<SelectListItem>();
                List<SelectListItem> mod17 = new List<SelectListItem>();
                List<SelectListItem> mod18 = new List<SelectListItem>();
                List<SelectListItem> mod19 = new List<SelectListItem>();
                List<SelectListItem> mod20 = new List<SelectListItem>();
                List<SelectListItem> mod21 = new List<SelectListItem>();
                List<SelectListItem> mod22 = new List<SelectListItem>();
                List<SelectListItem> mod23 = new List<SelectListItem>();
                List<SelectListItem> mod24 = new List<SelectListItem>();
                List<SelectListItem> mod25 = new List<SelectListItem>();
                List<SelectListItem> mod26 = new List<SelectListItem>();
                List<SelectListItem> mod27 = new List<SelectListItem>();
                List<SelectListItem> mod28 = new List<SelectListItem>();
                List<SelectListItem> mod29 = new List<SelectListItem>();
                TempData[MyGuid + "_TList1"] = model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                TempData[MyGuid + "_TList2"] = model[0].TList2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                TempData[MyGuid + "_TList3"] = model[0].TList3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
                TempData[MyGuid + "_TList4"] = model[0].TList4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];
                TempData[MyGuid + "_TList5"] = model[0].TList5 = (List<SelectListItem>)TempData[MyGuid + "_TList5"];
                TempData[MyGuid + "_TList6"] = model[0].TList6 = (List<SelectListItem>)TempData[MyGuid + "_TList6"];
                TempData[MyGuid + "_TList7"] = model[0].TList7 = (List<SelectListItem>)TempData[MyGuid + "_TList7"];
                TempData[MyGuid + "_TList8"] = model[0].TList8 = (List<SelectListItem>)TempData[MyGuid + "_TList8"];
                TempData[MyGuid + "_TList9"] = model[0].TList9 = (List<SelectListItem>)TempData[MyGuid + "_TList9"];
                TempData[MyGuid + "_TList10"] = model[0].TList10 = (List<SelectListItem>)TempData[MyGuid + "_TList10"];
                TempData[MyGuid + "_TList11"] = model[0].TList11 = (List<SelectListItem>)TempData[MyGuid + "_TList11"];
                TempData[MyGuid + "_TList12"] = model[0].TList12 = (List<SelectListItem>)TempData[MyGuid + "_TList12"];
                TempData[MyGuid + "_TList13"] = model[0].TList13 = (List<SelectListItem>)TempData[MyGuid + "_TList13"];
                TempData[MyGuid + "_TList14"] = model[0].TList14 = (List<SelectListItem>)TempData[MyGuid + "_TList14"];
                TempData[MyGuid + "_TList15"] = model[0].TList15 = (List<SelectListItem>)TempData[MyGuid + "_TList15"];
                TempData[MyGuid + "_TList16"] = model[0].TList16 = (List<SelectListItem>)TempData[MyGuid + "_TList16"];
                TempData[MyGuid + "_TList17"] = model[0].TList17 = (List<SelectListItem>)TempData[MyGuid + "_TList17"];
                TempData[MyGuid + "_TList18"] = model[0].TList18 = (List<SelectListItem>)TempData[MyGuid + "_TList18"];
                TempData[MyGuid + "_TList19"] = model[0].TList19 = (List<SelectListItem>)TempData[MyGuid + "_TList19"];
                TempData[MyGuid + "_TList20"] = model[0].TList20 = (List<SelectListItem>)TempData[MyGuid + "_TList20"];
                TempData[MyGuid + "_TList21"] = model[0].TList21 = (List<SelectListItem>)TempData[MyGuid + "_TList21"];
                TempData[MyGuid + "_TList22"] = model[0].TList22 = (List<SelectListItem>)TempData[MyGuid + "_TList22"];
                TempData[MyGuid + "_TList23"] = model[0].TList23 = (List<SelectListItem>)TempData[MyGuid + "_TList23"];
                TempData[MyGuid + "_TList24"] = model[0].TList24 = (List<SelectListItem>)TempData[MyGuid + "_TList24"];
                TempData[MyGuid + "_TList25"] = model[0].TList25 = (List<SelectListItem>)TempData[MyGuid + "_TList25"];
                TempData[MyGuid + "_TList26"] = model[0].TList26 = (List<SelectListItem>)TempData[MyGuid + "_TList26"];
                TempData[MyGuid + "_TList27"] = model[0].TList27 = (List<SelectListItem>)TempData[MyGuid + "_TList27"];
                TempData[MyGuid + "_TList28"] = model[0].TList28 = (List<SelectListItem>)TempData[MyGuid + "_TList28"];
                TempData[MyGuid + "_TList29"] = model[0].TList29 = (List<SelectListItem>)TempData[MyGuid + "_TList29"];

                var tm = model.FirstOrDefault();
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                if (tm.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                if (tm.SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
                if (tm.SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
                if (tm.SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
                if (tm.SelectedItems10 == null) model[0].SelectedItems10 = new string[] { "" };
                if (tm.SelectedItems11 == null) model[0].SelectedItems11 = new string[] { "" };
                if (tm.SelectedItems12 == null) model[0].SelectedItems12 = new string[] { "" };
                if (tm.SelectedItems13 == null) model[0].SelectedItems13 = new string[] { "" };
                if (tm.SelectedItems14 == null) model[0].SelectedItems14 = new string[] { "" };
                if (tm.SelectedItems15 == null) model[0].SelectedItems15 = new string[] { "" };
                if (tm.SelectedItems16 == null) model[0].SelectedItems16 = new string[] { "" };
                if (tm.SelectedItems17 == null) model[0].SelectedItems17 = new string[] { "" };
                if (tm.SelectedItems18 == null) model[0].SelectedItems18 = new string[] { "" };
                if (tm.SelectedItems19 == null) model[0].SelectedItems19 = new string[] { "" };
                if (tm.SelectedItems20 == null) model[0].SelectedItems20 = new string[] { "" };
                if (tm.SelectedItems21 == null) model[0].SelectedItems21 = new string[] { "" };
                if (tm.SelectedItems22 == null) model[0].SelectedItems22 = new string[] { "" };
                if (tm.SelectedItems23 == null) model[0].SelectedItems23 = new string[] { "" };
                if (tm.SelectedItems24 == null) model[0].SelectedItems24 = new string[] { "" };
                if (tm.SelectedItems25 == null) model[0].SelectedItems25 = new string[] { "" };
                if (tm.SelectedItems26 == null) model[0].SelectedItems26 = new string[] { "" };
                if (tm.SelectedItems27 == null) model[0].SelectedItems27 = new string[] { "" };
                if (tm.SelectedItems28 == null) model[0].SelectedItems28 = new string[] { "" };
                if (tm.SelectedItems29 == null) model[0].SelectedItems29 = new string[] { "" };
                #endregion
                if (command == "Yes" || command == "New")
                {
                    model = new_std_registration(model);
                }

                else if (command == "No")
                {
                    return CancelFun(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    if (sgen.GetSession(MyGuid, "delid") != null) { btnval = "FDEL"; }
                    else if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "N", "std_registration", "Education", model);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                }
                else if (command.Split('_')[0].Trim() == "No")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                }
                else if (command.Trim() == "Save" || command.Trim() == "Update" || command.Split('_')[0].Trim() == "Yes")
                {
                    //try
                    //{
                    var tmodel = model.FirstOrDefault();
                    int num = random.Next(10000, 90000);
                    name = model[0].Col18.Trim() + num.ToString();
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    gender = model[0].Col21.Trim();
                    if (model[0].Chk1 == true) issibling = "Y";
                    if (model[0].Chk2 == true) isfamily = "Y";
                    if (model[0].Chk3 == true) isscholarship = "Y";
                    havetransport = model[0].Col30;
                    if (model[0].Chk5 == true) isdisable = "Y";
                    if (model[0].Chk6 == true) istransfer = "Y";
                    sameas = model[0].Col68;
                    if (model[0].Chk7 == true) ishobby = "Y";
                    isemailauth = model[0].Col89;
                    isphoneauth = model[0].Col90;
                    //try
                    //{
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + model[0].Col17.Trim() + "'";
                        isedit = true;
                        vch_num = model[0].Col17.Trim();
                        sa_id = vch_num;
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        if (vch_num == "") { ViewBag.scripCall = "showmsgJS(1,'Max no error', 2);"; }
                        sa_id = vch_num;
                        isedit = false;
                    }
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = ent_date;
                    dr["type"] = model[0].Col12.Trim();
                    dr["type_desc"] = type_desc.Trim();
                    std_type = model[0].Col110;
                    if (model[0].Col110 == null || model[0].Col110 == "")
                    {
                        std_type = model[0].Col124;
                    }
                    if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1")
                    {
                        iscfrm = "N";
                        mq3 = "";
                        dr["sa_id"] = vch_num.Trim();
                        regnum = "";
                    }
                    else
                    {
                        iscfrm = "Y";
                        mq3 = sgen.padlc(Convert.ToInt32(model[0].Col17), 6);
                        regnum = model[0].Col115;
                        dr["section"] = model[0].Col113;
                        dr["regnumber"] = model[0].Col115;
                        dr["roll_number"] = model[0].Col114;
                    }
                    dr["first_name"] = model[0].Col18.Trim();
                    dr["middle_name"] = model[0].Col19;
                    dr["last_name"] = model[0].Col20;
                    dr["gender"] = gender.Trim();
                    //dr["dob"] = sgen.Savedate(model[0].Col22, false);
                    if ((model[0].Col22 == null) || (model[0].Col22 == "0"))
                    {
                        dr["dob"] = "01/01/1900";
                    }
                    else
                    {
                        dr["dob"] = sgen.Make_date_S(model[0].Col22);
                    }
                    dr["nationality"] = model[0].SelectedItems1.FirstOrDefault().ToString();
                    dr["place_of_birth"] = model[0].Col23;
                    dr["main_language"] = model[0].Col24;
                    dr["class_applied"] = model[0].SelectedItems2.FirstOrDefault().ToString().Trim();
                    dr["usession"] = model[0].SelectedItems3.FirstOrDefault().ToString().Trim();
                    dr["adhaar_id"] = model[0].Col25;
                    dr["religion"] = model[0].SelectedItems5.FirstOrDefault().ToString();
                    dr["ucaste"] = model[0].SelectedItems4.FirstOrDefault().ToString();
                    dr["blood_grp"] = model[0].SelectedItems6.FirstOrDefault().ToString();
                    dr["std_caste"] = model[0].SelectedItems29.FirstOrDefault().ToString();
                    var freg = model[0].Col28 == null ? "0" : model[0].Col28;
                    if (issibling.Equals("Y"))
                    {
                        issameschool = model[0].Col105;
                        var sreg = model[0].Col26 == null ? "0" : model[0].Col26;
                        var sname = model[0].Col106 == null ? "0" : model[0].Col106;
                        try
                        {
                            if (issameschool.Equals("Y") && sreg.Trim().Length > 0)
                            {
                                dr["issameschool"] = "Y";
                                dr["issibling"] = "Y";
                                dr["sibling2_rollno"] = sreg;
                                dr["isfamily"] = "Y";
                                if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1") { dr["sibling1_reg_no"] = sgen.seekval(userCode, "select sibling1_rollno from user_details where regnumber='" + sreg.Trim() + "' and type='" + model[0].Col12 + "'", "sibling1_rollno"); }
                                else { dr["sibling1_rollno"] = sgen.seekval(userCode, "select sibling1_rollno from user_details where regnumber='" + sreg.Trim() + "' and type='" + model[0].Col12 + "'", "sibling1_rollno"); }
                            }
                            else if (issameschool.Equals("O") && sname.Trim().Length > 0)
                            {
                                dr["issameschool"] = "O";
                                dr["sibling1_name"] = sname; //name
                                dr["sibling1_class"] = model[0].Col107; //school
                                dr["sibling2_name"] = model[0].SelectedItems27.FirstOrDefault().ToString(); //class
                                dr["sibling2_class"] = model[0].SelectedItems28.FirstOrDefault().ToString(); //relation
                                dr["issibling"] = "N";
                                dr["sibling2_rollno"] = model[0].Col115;
                                dr["isfamily"] = "N";
                                if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1") { dr["sibling1_reg_no"] = model[0].Col115; }
                                else { dr["sibling1_rollno"] = model[0].Col115; }
                            }
                        }
                        catch (Exception err)
                        {
                            dr["issibling"] = "N";
                            dr["sibling2_rollno"] = model[0].Col115;
                            dr["isfamily"] = "N";
                            if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1") { dr["sibling1_reg_no"] = model[0].Col115; }
                            else { dr["sibling1_rollno"] = model[0].Col120; }
                        }
                    }
                    else
                    {
                        dr["issibling"] = "N";
                        dr["sibling2_rollno"] = model[0].Col115;
                        dr["isfamily"] = "N";
                        if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1") { dr["sibling1_reg_no"] = model[0].Col115; }
                        else { dr["sibling1_rollno"] = model[0].Col120; }
                    }
                    if (isfamily.Equals("Y") && freg.Length > 0)
                    {
                        dr["isfamily"] = "Y";
                        if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1") { dr["sibling1_reg_no"] = freg; }
                        else dr["sibling1_rollno"] = freg;
                    }
                    if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1")
                    {
                    }
                    else
                    {
                        if (dr["sibling1_rollno"].ToString().Trim().Equals("") || dr["sibling1_rollno"].ToString().Trim().Equals("0") || dr["sibling1_rollno"].ToString().Trim().Equals("-"))
                        {
                            dr["sibling1_rollno"] = model[0].Col115;
                        }
                    }
                    //else
                    //{                           
                    //    dr["isfamily"] = "N";
                    //    if (model[0].Col116 == "" || model[0].Col116 == null) { dr["sibling1_reg_no"] = "-"; }
                    //    else { dr["sibling1_reg_no"] = "-"; }
                    //}
                    dr["scholarship"] = isscholarship;
                    dr["havetransport"] = havetransport;
                    dr["pick_point"] = model[0].SelectedItems7.FirstOrDefault().ToString();
                    dr["drop_point"] = model[0].SelectedItems8.FirstOrDefault().ToString();
                    try
                    {
                        DataTable dtadd = new DataTable();

                        //mq2 = "select * from country_state where rec_id='" + model[0].Col16 + "'";
                        mq2 = "select alpha_2, state_gst_code, city_name, district_id, teh_id, v_id from country_state where rec_id='" + model[0].Col16 + "'";
                        dtadd = sgen.getdata(userCode, mq2);
                        if (dtadd.Rows.Count > 0)
                        {
                            dr["per_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
                            dr["per_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
                            dr["per_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
                            dr["per_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
                            dr["per_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
                            dr["per_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
                            dr["per_address"] = model[0].Col31;
                            if (model[0].Chk4 == true)
                            {
                                isperadd = "Y";
                                dr["cur_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
                                dr["cur_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
                                dr["cur_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
                                dr["cir_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
                                dr["cur_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
                                dr["cur_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
                                dr["cur_address"] = model[0].Col31;
                            }
                            else
                            {
                                DataTable dtadd1 = new DataTable();

                                //mq2 = "select * from country_state where rec_id='" + model[0].Col96 + "'";
                                mq2 = "select alpha_2, state_gst_code, city_name, district_id, teh_id, v_id from country_state where rec_id='" + model[0].Col96 + "'";
                                dtadd1 = sgen.getdata(userCode, mq2);
                                if (dtadd1.Rows.Count > 0)
                                {
                                    dr["cur_country"] = dtadd1.Rows[0]["alpha_2"].ToString().Trim();
                                    dr["cur_state"] = dtadd1.Rows[0]["state_gst_code"].ToString().Trim();
                                    dr["cur_city"] = dtadd1.Rows[0]["city_name"].ToString().Trim();
                                    dr["cir_district"] = dtadd1.Rows[0]["district_id"].ToString().Trim();
                                    dr["cur_tehsil"] = dtadd1.Rows[0]["teh_id"].ToString().Trim();
                                    dr["cur_village"] = dtadd1.Rows[0]["v_id"].ToString().Trim();
                                    dr["cur_address"] = model[0].Col38;
                                }
                            }
                        }
                        else
                        {
                            DataTable dtadd1 = new DataTable();

                            //mq2 = "select * from country_state where rec_id='" + model[0].Col96.Trim() + "'";
                            mq2 = "select alpha_2, state_gst_code, city_name, district_id, teh_id, v_id from country_state where rec_id='" + model[0].Col96.Trim() + "'";
                            dtadd1 = sgen.getdata(userCode, mq2);
                            if (dtadd1.Rows.Count > 0)
                            {
                                dr["cur_country"] = dtadd1.Rows[0]["alpha_2"].ToString().Trim();
                                dr["cur_state"] = dtadd1.Rows[0]["state_gst_code"].ToString().Trim();
                                dr["cur_city"] = dtadd1.Rows[0]["city_name"].ToString().Trim();
                                dr["cir_district"] = dtadd1.Rows[0]["district_id"].ToString().Trim();
                                dr["cur_tehsil"] = dtadd1.Rows[0]["teh_id"].ToString().Trim();
                                dr["cur_village"] = dtadd1.Rows[0]["v_id"].ToString().Trim();
                                dr["cur_address"] = model[0].Col38;
                            }
                        }
                    }
                    catch (Exception ex) { }
                    dr["isperadd"] = isperadd;
                    dr["isdisable"] = isdisable;
                    if (isdisable.Equals("Y"))
                    {
                        dr["dis_type"] = model[0].SelectedItems9.FirstOrDefault().ToString();
                        dr["dis_desc"] = model[0].Col45;
                    }
                    dr["istransfer"] = istransfer;
                    if (istransfer.Equals("Y"))
                    {
                        dr["prev_school_name"] = model[0].Col46;
                        // dr["transfer_dt"] = sgen.Savedate(model[0].Col47, false);
                        dr["transfer_dt"] = sgen.Make_date_S(model[0].Col47);
                        dr["transfer_class"] = model[0].SelectedItems10.FirstOrDefault().ToString();
                        dr["transfer_reason"] = model[0].Col121;
                    }
                    dr["ishobby"] = ishobby;
                    if (ishobby.Equals("Y")) dr["std_hobby"] = model[0].SelectedItems11.FirstOrDefault().ToString();
                    //fathers detail
                    dr["f_title"] = model[0].SelectedItems12.FirstOrDefault().ToString().Trim();
                    dr["f_firstname"] = model[0].Col48.Trim();
                    dr["f_middlename"] = model[0].Col49;
                    dr["f_lastname"] = model[0].Col50;
                    //dr["f_dob"] = sgen.Savedate(model[0].Col51, false);
                    if ((model[0].Col51 == null) || (model[0].Col51 == "0")) { dr["f_dob"] = "01/01/1900"; }
                    else { dr["f_dob"] = sgen.Make_date_S(model[0].Col51); }
                    dr["f_nationality"] = model[0].SelectedItems13.FirstOrDefault().ToString();
                    dr["f_qualification"] = model[0].SelectedItems14.FirstOrDefault().ToString();
                    dr["f_occupation"] = model[0].Col52;
                    dr["f_designation"] = model[0].Col53;
                    dr["f_annual_income"] = model[0].SelectedItems15.FirstOrDefault().ToString();
                    dr["f_org_name"] = model[0].Col54;
                    dr["f_adhaar_id"] = model[0].Col55;
                    if (model[0].Col56 == null) { model[0].Col56 = "0"; }
                    dr["f_con_number"] = model[0].Col56;
                    dr["f_email"] = model[0].Col57;
                    dr["f_alumni_type"] = model[0].SelectedItems16.FirstOrDefault().ToString();
                    //mothers detail
                    dr["m_title"] = model[0].SelectedItems17.FirstOrDefault().ToString().Trim();
                    dr["m_firstname"] = model[0].Col58.Trim();
                    dr["m_middlename"] = model[0].Col59;
                    dr["m_lastname"] = model[0].Col60;
                    //dr["m_dob"] = sgen.Savedate(model[0].Col61, false);
                    if ((model[0].Col61 == null) || (model[0].Col61 == "0")) { dr["m_dob"] = "01/01/1900"; }
                    else { dr["m_dob"] = sgen.Make_date_S(model[0].Col61); }
                    dr["m_nationality"] = model[0].SelectedItems18.FirstOrDefault().ToString();
                    dr["m_qualification"] = model[0].SelectedItems19.FirstOrDefault().ToString();
                    dr["m_occupation"] = model[0].Col62;
                    dr["m_designation"] = model[0].Col63;
                    dr["m_annual_income"] = model[0].SelectedItems20.FirstOrDefault().ToString();
                    dr["m_email"] = model[0].Col67;
                    dr["m_adhaar_id"] = model[0].Col65;
                    dr["m_org_name"] = model[0].Col64;
                    if (model[0].Col66 == null) { model[0].Col66 = "0"; }
                    dr["m_con_number"] = model[0].Col66;
                    dr["m_alumni_type"] = model[0].SelectedItems21.FirstOrDefault().ToString();
                    //gaurdians detail
                    dr["sameas"] = sameas.Trim();
                    if (sameas.Trim().Equals("Same as Father"))
                    {
                        dr["g_title"] = model[0].SelectedItems12.FirstOrDefault().ToString().Trim();
                        dr["g_firstname"] = model[0].Col48.Trim();
                        dr["g_middlename"] = model[0].Col49;
                        dr["g_lastname"] = model[0].Col50;
                        //dr["g_dob"] = sgen.Savedate(model[0].Col72, false);
                        if ((model[0].Col51 == null) || (model[0].Col51 == "0")) { dr["g_dob"] = "01/01/1900"; }
                        else { dr["g_dob"] = sgen.Make_date_S(model[0].Col51); }
                        dr["g_nationality"] = model[0].SelectedItems13.FirstOrDefault().ToString();
                        dr["g_qualification"] = model[0].SelectedItems14.FirstOrDefault().ToString();
                        dr["g_occupation"] = model[0].Col52;
                        dr["g_designation"] = model[0].Col53;
                        dr["g_annual_income"] = model[0].SelectedItems15.FirstOrDefault().ToString();
                        dr["g_org_name"] = model[0].Col54;
                        dr["g_adhaar_id"] = model[0].Col55;
                        if (model[0].Col56 == null) { model[0].Col56 = "0"; }
                        dr["g_con_number"] = model[0].Col56;
                        dr["g_email"] = model[0].Col57;
                        dr["g_alumni_type"] = model[0].SelectedItems16.FirstOrDefault().ToString();
                    }
                    else if (sameas.Trim().Equals("Same as Mother"))
                    {
                        dr["g_title"] = model[0].SelectedItems17.FirstOrDefault().ToString().Trim();
                        dr["g_firstname"] = model[0].Col58.Trim();
                        dr["g_middlename"] = model[0].Col59;
                        dr["g_lastname"] = model[0].Col60;
                        //dr["g_dob"] = sgen.Savedate(model[0].Col72, false);
                        if ((model[0].Col61 == null) || (model[0].Col61 == "0")) { dr["g_dob"] = "01/01/1900"; }
                        else { dr["g_dob"] = sgen.Make_date_S(model[0].Col61); }
                        dr["g_nationality"] = model[0].SelectedItems18.FirstOrDefault().ToString();
                        dr["g_qualification"] = model[0].SelectedItems19.FirstOrDefault().ToString();
                        dr["g_occupation"] = model[0].Col62;
                        dr["g_designation"] = model[0].Col63;
                        dr["g_annual_income"] = model[0].SelectedItems20.FirstOrDefault().ToString();
                        dr["g_org_name"] = model[0].Col64;
                        dr["g_adhaar_id"] = model[0].Col65;
                        if (model[0].Col66 == null) { model[0].Col66 = "0"; }
                        dr["g_con_number"] = model[0].Col66;
                        dr["g_email"] = model[0].Col67;
                        dr["g_alumni_type"] = model[0].SelectedItems21.FirstOrDefault().ToString();
                    }
                    else
                    {
                        dr["g_title"] = model[0].SelectedItems22.FirstOrDefault().ToString();
                        dr["g_firstname"] = model[0].Col69.Trim();
                        dr["g_middlename"] = model[0].Col70;
                        dr["g_lastname"] = model[0].Col71;
                        //dr["g_dob"] = sgen.Savedate(model[0].Col72, false);
                        if ((model[0].Col72 == null) || (model[0].Col72 == "0")) { dr["g_dob"] = "01/01/1900"; }
                        else { dr["g_dob"] = sgen.Make_date_S(model[0].Col72); }
                        dr["g_nationality"] = model[0].SelectedItems23.FirstOrDefault().ToString();
                        dr["g_qualification"] = model[0].SelectedItems24.FirstOrDefault().ToString();
                        dr["g_occupation"] = model[0].Col73;
                        dr["g_designation"] = model[0].Col74;
                        dr["g_annual_income"] = model[0].SelectedItems26.FirstOrDefault().ToString();
                        dr["g_org_name"] = model[0].Col75;
                        dr["g_email"] = model[0].Col78;
                        dr["g_adhaar_id"] = model[0].Col76;
                        if (model[0].Col77 == null) { model[0].Col77 = "0"; }
                        dr["g_con_number"] = model[0].Col77;
                        dr["g_alumni_type"] = model[0].SelectedItems25.FirstOrDefault().ToString();
                    }
                    dr["withdrawl_no"] = model[0].Col86;
                    dr["srn_no"] = model[0].Col87;
                    dr["enrollment_no"] = model[0].Col88;
                    dr["default_emailid"] = isemailauth;
                    dr["default_ph"] = isphoneauth;
                    if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1")
                    {
                        dr["password"] = EncryptDecrypt.Encrypt("1234");
                        dr["role"] = "student";
                        dr["user_id"] = name.Trim();
                        dr["student_status"] = "temporary";
                    }
                    dr["sssm_id"] = model[0].Col103;
                    dr["std_type"] = std_type;
                    dr["old_regno"] = model[0].Col111;
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["rec_id"] = model[0].Col7;
                        dr["ent_date"] = model[0].Col4.Trim();
                        if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1")
                        {
                            dr["client_id"] = model[0].Col1.Trim();
                            dr["client_unit_id"] = model[0].Col2.Trim();
                        }
                        dr["edit_by"] = userid_mst.Trim();
                        dr["edit_date"] = ent_date;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = ent_date;
                        if (model[0].Col116 == "0" || model[0].Col118 == "0" || model[0].Col118 == "1")
                        {
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                        }
                        dr["edit_by"] = "-";
                        dr["edit_date"] = ent_date;
                    }
                    #endregion
                    dtstr.Rows.Add(dr);
                    bool ok = sgen.Update_data(userCode, dtstr, model[0].Col10, model[0].Col8, isedit);
                    if (ok)
                    {
                        if (iscfrm.Equals("Y"))
                        {
                            if (regnum.Equals("")) { sgen.showmsg(1, "There is no Registration Number, please check again.", 0); return View(model); }
                            DataTable dtsd = new DataTable();
                            string picpoint = model[0].SelectedItems7.FirstOrDefault().ToString().Trim().Length > 2 ? model[0].SelectedItems7.FirstOrDefault().ToString().Trim() : "0";
                            string droppoint = model[0].SelectedItems8.FirstOrDefault().ToString().Trim().Length > 2 ? model[0].SelectedItems8.FirstOrDefault().ToString().Trim() : "0";
                            if (havetransport == null || havetransport.Trim().Equals(""))
                            {
                                havetransport = "0";
                            }
                            res = sgen.execute_cmd(userCode, "update student_detail set studenttype='" + std_type + "'," +
                                "class_applied='" + model[0].SelectedItems2.FirstOrDefault().ToString().Trim() + "',section='" + model[0].Col113
                                + "',roll_number='" + model[0].Col114 + "'," +
                                "pick_point='" + picpoint + "',drop_point='" + droppoint + "',havetransport='" + havetransport + "' " +
                                "where reg_no='" + regnum + "' and type='STD'  and client_unit_id='" + unitid_mst + "'");
                            res = sgen.execute_cmd(userCode, "commit");
                        }
                        DataTable dtfile = new DataTable();
                        //dtfile = sgen.getdata(userCode, "select * from " + model[0].Col91 + " WHERE 1=2");
                        dtfile = cmd_Fun.GetStructure(userCode, "file_tab");
                        type_desc = "Std Temp Reg";
                        type = "STD";
                        string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                        #region attachments
                        //transfer certificate
                        try
                        {
                            if (model[0].Chk6 == true)
                            {
                                HttpPostedFileBase file3 = upd3;
                                ctype3 = file3.ContentType;
                                fileName3 = file3.FileName;
                                path3 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName3;
                                encpath3 = sgen.Convert_Stringto64(path3).ToString();
                                finalpath3 = serverpath + encpath3;
                                file3.SaveAs(finalpath3);
                                filesave(currdate, dtfile, fileName3, encpath3, "Transfer Certificate", ctype3, iscfrm, regnum, mq3);
                            }
                        }
                        catch (Exception ex) { }
                        //birth certificate
                        try
                        {
                            HttpPostedFileBase file2 = upd2;
                            ctype2 = file2.ContentType;
                            fileName2 = file2.FileName;
                            path2 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName2;
                            encpath2 = sgen.Convert_Stringto64(path2).ToString();
                            finalpath2 = serverpath + encpath2;
                            file2.SaveAs(finalpath2);
                            filesave(currdate, dtfile, fileName2, encpath2, "Birth Certificate", ctype2, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) {/* ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);";*/ }
                        //student photo
                        try
                        {
                            HttpPostedFileBase file1 = upd1;
                            ctype1 = file1.ContentType;
                            fileName1 = file1.FileName;
                            path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
                            encpath1 = sgen.Convert_Stringto64(path1).ToString();
                            finalpath1 = serverpath + encpath1;
                            file1.SaveAs(finalpath1);
                            filesave(currdate, dtfile, fileName1, encpath1, "Child Photo", ctype1, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //father photo
                        try
                        {
                            HttpPostedFileBase file4 = upd4;
                            ctype4 = file4.ContentType;
                            fileName4 = file4.FileName;
                            path4 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName4;
                            encpath4 = sgen.Convert_Stringto64(path4).ToString();
                            finalpath4 = serverpath + encpath4;
                            file4.SaveAs(finalpath4);
                            filesave(currdate, dtfile, fileName4, encpath4, "Father Photo", ctype4, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //mother photo
                        try
                        {
                            HttpPostedFileBase file5 = upd5;
                            ctype5 = file5.ContentType;
                            fileName5 = file5.FileName;
                            path5 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName5;
                            encpath5 = sgen.Convert_Stringto64(path5).ToString();
                            finalpath5 = serverpath + encpath5;
                            file5.SaveAs(finalpath5);
                            filesave(currdate, dtfile, fileName5, encpath5, "Mother Photo", ctype5, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //gaurdian photo
                        try
                        {
                            if (model[0].Col68 == "Other")
                            {
                                HttpPostedFileBase file6 = upd6;
                                ctype6 = file6.ContentType;
                                fileName6 = file6.FileName;
                                path6 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName6;
                                encpath6 = sgen.Convert_Stringto64(path6).ToString();
                                finalpath6 = serverpath + encpath6;
                                file6.SaveAs(finalpath6);
                                filesave(currdate, dtfile, fileName6, encpath6, "Gaurdian Photo", ctype6, iscfrm, regnum, mq3);
                            }
                        }
                        catch (Exception ex) { }
                        //student adhaar
                        try
                        {
                            HttpPostedFileBase file7 = upd7;
                            ctype7 = file7.ContentType;
                            fileName7 = file7.FileName;
                            path7 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName7;
                            encpath7 = sgen.Convert_Stringto64(path7).ToString();
                            finalpath7 = serverpath + encpath7;
                            file7.SaveAs(finalpath7);
                            filesave(currdate, dtfile, fileName7, encpath7, "Student Aadhaar", ctype7, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //family photo
                        try
                        {
                            HttpPostedFileBase file8 = upd8;
                            ctype8 = file8.ContentType;
                            fileName8 = file8.FileName;
                            path8 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName8;
                            encpath8 = sgen.Convert_Stringto64(path8).ToString();
                            finalpath8 = serverpath + encpath8;
                            file8.SaveAs(finalpath8);
                            filesave(currdate, dtfile, fileName8, encpath8, "Family Photo", ctype8, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //Father adhaar 
                        try
                        {
                            HttpPostedFileBase file9 = upd9;
                            ctype9 = file9.ContentType;
                            fileName9 = file9.FileName;
                            path9 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName9;
                            encpath9 = sgen.Convert_Stringto64(path9).ToString();
                            finalpath9 = serverpath + encpath9;
                            file9.SaveAs(finalpath9);
                            filesave(currdate, dtfile, fileName9, encpath9, "Father Aadhaar", ctype9, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //mother adhaar
                        try
                        {
                            HttpPostedFileBase file10 = upd10;
                            ctype10 = file10.ContentType;
                            fileName10 = file10.FileName;
                            path10 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName10;
                            encpath10 = sgen.Convert_Stringto64(path10).ToString();
                            finalpath10 = serverpath + encpath10;
                            file10.SaveAs(finalpath10);
                            filesave(currdate, dtfile, fileName10, encpath10, "Mother Aadhaar", ctype10, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //marksheet
                        try
                        {
                            HttpPostedFileBase file11 = upd11;
                            ctype11 = file11.ContentType;
                            fileName11 = file11.FileName;
                            path11 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName11;
                            encpath11 = sgen.Convert_Stringto64(path11).ToString();
                            finalpath11 = serverpath + encpath11;
                            file11.SaveAs(finalpath11);
                            filesave(currdate, dtfile, fileName11, encpath11, "Marksheet", ctype11, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //cast certificate
                        try
                        {
                            HttpPostedFileBase file12 = upd12;
                            ctype12 = file12.ContentType;
                            fileName12 = file12.FileName;
                            path12 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName12;
                            encpath12 = sgen.Convert_Stringto64(path12).ToString();
                            finalpath12 = serverpath + encpath12;
                            file12.SaveAs(finalpath12);
                            filesave(currdate, dtfile, fileName12, encpath12, "Caste Certificate", ctype12, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        //student bank passbook
                        try
                        {
                            HttpPostedFileBase file13 = upd13;
                            ctype13 = file13.ContentType;
                            fileName13 = file13.FileName;
                            path13 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName13;
                            encpath13 = sgen.Convert_Stringto64(path13).ToString();
                            finalpath13 = serverpath + encpath13;
                            file13.SaveAs(finalpath13);
                            filesave(currdate, dtfile, fileName13, encpath13, "Student Bank Passbook", ctype13, iscfrm, regnum, mq3);
                        }
                        catch (Exception ex) { }
                        #endregion
                        res = sgen.Update_data(userCode, dtfile, model[0].Col91, model[0].Col94, false);
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain()
                        {
                            TList1 = tmodel.TList1,
                            TList2 = tmodel.TList2,
                            TList3 = tmodel.TList3,
                            TList4 = tmodel.TList4,
                            TList5 = tmodel.TList5,
                            TList6 = tmodel.TList6,
                            TList7 = tmodel.TList7,
                            TList8 = tmodel.TList8,
                            TList9 = tmodel.TList9,
                            TList10 = tmodel.TList10,
                            TList11 = tmodel.TList11,
                            TList12 = tmodel.TList12,
                            TList13 = tmodel.TList13,
                            TList14 = tmodel.TList14,
                            TList15 = tmodel.TList15,
                            TList16 = tmodel.TList16,
                            TList17 = tmodel.TList17,
                            TList18 = tmodel.TList18,
                            TList19 = tmodel.TList19,
                            TList20 = tmodel.TList20,
                            TList21 = tmodel.TList21,
                            TList22 = tmodel.TList22,
                            TList23 = tmodel.TList23,
                            TList24 = tmodel.TList24,
                            TList25 = tmodel.TList25,
                            TList26 = tmodel.TList26,
                            TList27 = tmodel.TList27,
                            TList28 = tmodel.TList28,
                            TList29 = tmodel.TList29,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },
                            SelectedItems6 = new string[] { "" },
                            SelectedItems7 = new string[] { "" },
                            SelectedItems8 = new string[] { "" },
                            SelectedItems9 = new string[] { "" },
                            SelectedItems10 = new string[] { "" },
                            SelectedItems11 = new string[] { "" },
                            SelectedItems12 = new string[] { "" },
                            SelectedItems13 = new string[] { "" },
                            SelectedItems14 = new string[] { "" },
                            SelectedItems15 = new string[] { "" },
                            SelectedItems16 = new string[] { "" },
                            SelectedItems17 = new string[] { "" },
                            SelectedItems18 = new string[] { "" },
                            SelectedItems19 = new string[] { "" },
                            SelectedItems20 = new string[] { "" },
                            SelectedItems21 = new string[] { "" },
                            SelectedItems22 = new string[] { "" },
                            SelectedItems23 = new string[] { "" },
                            SelectedItems24 = new string[] { "" },
                            SelectedItems25 = new string[] { "" },
                            SelectedItems26 = new string[] { "" },
                            SelectedItems27 = new string[] { "" },
                            SelectedItems28 = new string[] { "" },
                            SelectedItems29 = new string[] { "" },
                            Col9 = "STUDENT DETAILS",
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = tmodel.Col13,
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col91 = tmodel.Col91,
                            Col79 = tmodel.Col79,
                            Col80 = tmodel.Col80,
                            Col81 = tmodel.Col81,
                            Col82 = tmodel.Col82,
                            Col83 = tmodel.Col83,
                            Col84 = tmodel.Col84,
                            Col85 = tmodel.Col85,
                            Col97 = tmodel.Col97,
                            Col98 = tmodel.Col98,
                            Col99 = tmodel.Col99,
                            Col100 = tmodel.Col100,
                            Col101 = tmodel.Col101,
                            Col102 = tmodel.Col102,
                            Col104 = tmodel.Col104,
                            Col109 = tmodel.Col109,
                            Col116 = "0",
                            Col117 = tmodel.Col117,
                            Col118 = "0",
                            Col131 = "S",
                            Col132 = "<u>S</u>ave",
                            Col133 = "Save & Ne<u>w</u>",
                            Col134 = "Save & New",
                            Chk4 = true,
                            LTM1 = new List<Tmodelmain>()
                        });
                        if (!res) { ViewBag.scripCall += ";showmsgJS(1, 'Error In File Saving', 1);disableForm();"; }
                        else
                        {
                            if (command.Split('_')[1].Trim().ToUpper().Equals("SAVE") || command.Split('_')[1].Trim().ToUpper().Equals("UPDATE"))
                            {
                                ViewBag.vnew = "";
                                ViewBag.vedit = "";
                                ViewBag.vsave = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Student Saved Successfully');disableForm();";
                            }
                            else if (command.Split('_')[1].Trim().ToUpper().Equals("SAVE & NEW") || command.Split('_')[1].Trim().ToUpper().Equals("UPDATE & NEW"))
                            {
                                try
                                {
                                    model = new_std_registration(model);
                                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Student Saved Successfully');";
                                }
                                catch (Exception ex)
                                {
                                    ViewBag.scripCall += "showmsgJS(1,'" + ex.Message.ToString() + "', 0);";
                                }
                            }
                            sgen.SetSession(MyGuid, "vch_num_std", null);
                        }
                        //ViewBag.vnew = "";
                        //ViewBag.vedit = "";
                        //ViewBag.vsave = "disabled='disabled'";
                        //ViewBag.vsavenew = "disabled='disabled'";
                        //ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";


                        //sgen.SetSession(MyGuid, "vch_num_std", null);
                    }
                    //}
                    //catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString().Replace('\'', ' ') + "', 0);"; }
                    //}
                    //catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
                }
                else if (command.Trim() == "Import")
                {

                    HttpPostedFileBase file1 = upd1;
                    DataTable dt = new DataTable();
                    if (file1.ContentLength > 1)
                    {
                        string ext = Path.GetExtension(file1.FileName).ToLower();
                        if (ext == ".csv")
                        {
                            string filesavepath = AppDomain.CurrentDomain.BaseDirectory + "\\Uploads\\" + cg_com_name.Replace(" ", "")
                                + "\\file" + DateTime.Now.ToString("ddMMyyyyhhmmfff") + ext;
                            file1.SaveAs(filesavepath);
                            // Read sample data from CSV file
                            int i = 0;
                            using (CsvFileReader reader = new CsvFileReader(filesavepath))
                            {
                                CsvRow row = new CsvRow();
                                while (reader.ReadRow(row))
                                {
                                    DataRow dr = dt.NewRow();
                                    for (int c = 0; c < row.Count; c++)
                                    {
                                        if (i == 0) { dt.Columns.Add(row[c].ToString()); }
                                        else { dr[c] = row[c].ToString(); }
                                        //if (c > dt.Columns.Count) break;                                                                 
                                    }
                                    i++;
                                    dt.Rows.Add(dr);
                                }
                            }
                        }
                        dt.Rows[0].Delete();
                    }
                    var tmodel = model.FirstOrDefault();
                    DataTable dtstr = new DataTable();
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    for (int k = 0; k < dt.Rows.Count; k++)
                    {
                        int num = random.Next(10000, 90000);
                        name = dt.Rows[k]["First_Name"].ToString().Trim() + num.ToString();
                        gender = dt.Rows[k]["Gender"].ToString().Trim();
                        issibling = "N";
                        isfamily = "N";
                        isscholarship = "N";
                        havetransport = "";
                        isdisable = "N";
                        istransfer = "N";
                        isperadd = "N";
                        sameas = "Same as Father";
                        ishobby = "N";
                        isemailauth = "F";
                        isphoneauth = "F";
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        if (vch_num == "") { ViewBag.scripCall = "showmsgJS(1,'Max no error', 2);"; }
                        sa_id = vch_num;
                        isedit = false;
                        #region dtstr
                        DataRow dr = dtstr.NewRow();
                        dr["vch_num"] = vch_num.Trim();
                        dr["vch_date"] = ent_date;
                        dr["type"] = model[0].Col12.Trim();
                        dr["type_desc"] = type_desc.Trim();
                        iscfrm = "N";
                        mq3 = "";
                        dr["sa_id"] = vch_num.Trim();
                        regnum = "";
                        dr["first_name"] = dt.Rows[k]["First_Name"].ToString().Trim();
                        dr["middle_name"] = dt.Rows[k]["Middle_Name"].ToString().Trim();
                        dr["last_name"] = dt.Rows[k]["Last_Name"].ToString().Trim();
                        dr["gender"] = gender.Trim();
                        if (dt.Rows[k]["DOB"].ToString().Trim() == "") { dr["dob"] = "01/01/1900"; }
                        else { dr["dob"] = sgen.Make_date_S(dt.Rows[k]["DOB"].ToString().Trim()); }
                        dr["nationality"] = "IN";
                        dr["place_of_birth"] = dt.Rows[k]["Place_Of_Birth"].ToString().Trim();
                        dr["main_language"] = dt.Rows[k]["Mother_Tongue"].ToString().Trim();
                        dr["class_applied"] = dt.Rows[k]["Class_Applied"].ToString().Trim();
                        dr["usession"] = Ac_Year_id.Trim();
                        dr["issibling"] = "N";
                        dr["sibling2_rollno"] = "0";
                        dr["isfamily"] = "N";
                        dr["sibling1_rollno"] = "0";
                        dr["scholarship"] = isscholarship;
                        dr["havetransport"] = havetransport;
                        dr["isperadd"] = isperadd;
                        dr["isdisable"] = isdisable;
                        dr["istransfer"] = istransfer;
                        dr["ishobby"] = ishobby;
                        //fathers detail
                        dr["f_title"] = "Mr.";
                        dr["f_firstname"] = dt.Rows[k]["F_first_name"].ToString().Trim();
                        dr["f_middlename"] = dt.Rows[k]["F_middle_name"].ToString().Trim();
                        dr["f_lastname"] = dt.Rows[k]["F_last_name"].ToString().Trim();
                        if (dt.Rows[k]["F_DOB"].ToString().Trim() == "") { dr["f_dob"] = "01/01/1900"; }
                        else { dr["f_dob"] = sgen.Make_date_S(dt.Rows[k]["F_DOB"].ToString().Trim()); }
                        dr["f_nationality"] = "IN";
                        dr["f_con_number"] = dt.Rows[k]["F_contact_no"].ToString().Trim();
                        dr["f_email"] = dt.Rows[k]["F_email"].ToString().Trim();
                        //mothers detail
                        dr["m_title"] = "Mrs.";
                        dr["m_firstname"] = dt.Rows[k]["F_first_name"].ToString().Trim();
                        dr["m_middlename"] = dt.Rows[k]["F_middle_name"].ToString().Trim();
                        dr["m_lastname"] = dt.Rows[k]["F_last_name"].ToString().Trim();
                        if (dt.Rows[k]["M_DOB"].ToString().Trim() == "") { dr["m_dob"] = "01/01/1900"; }
                        else { dr["m_dob"] = sgen.Make_date_S(dt.Rows[k]["M_DOB"].ToString().Trim()); }
                        dr["m_nationality"] = "IN";
                        dr["m_con_number"] = dt.Rows[k]["M_contact_no"].ToString().Trim();
                        dr["m_email"] = dt.Rows[k]["M_email"].ToString().Trim();
                        //gaurdians detail
                        dr["sameas"] = sameas.Trim();
                        if (sameas.Trim().Equals("Same as Father"))
                        {
                            dr["g_title"] = "Mr.";
                            dr["g_firstname"] = dt.Rows[k]["F_first_name"].ToString().Trim();
                            dr["g_middlename"] = dt.Rows[k]["F_middle_name"].ToString().Trim();
                            dr["g_lastname"] = dt.Rows[k]["F_last_name"].ToString().Trim();
                            if (dt.Rows[k]["F_DOB"].ToString().Trim() == "") { dr["g_dob"] = "01/01/1900"; }
                            else { dr["g_dob"] = sgen.Make_date_S(dt.Rows[k]["F_DOB"].ToString().Trim()); }
                            dr["g_nationality"] = "IN";
                            dr["g_con_number"] = dt.Rows[k]["F_contact_no"].ToString().Trim();
                            dr["g_email"] = dt.Rows[k]["F_email"].ToString().Trim();
                        }
                        dr["withdrawl_no"] = dt.Rows[k]["Withdrawl_no"].ToString().Trim();
                        dr["srn_no"] = dt.Rows[k]["Srn_no"].ToString().Trim();
                        dr["enrollment_no"] = dt.Rows[k]["Enrollment_no"].ToString().Trim();
                        dr["default_emailid"] = isemailauth;
                        dr["default_ph"] = isphoneauth;
                        dr["password"] = EncryptDecrypt.Encrypt("1234");
                        dr["role"] = "student";
                        dr["user_id"] = name.Trim();
                        dr["student_status"] = "temporary";
                        dr["std_type"] = dt.Rows[k]["Student_Type"].ToString().Trim(); ;
                        dr["old_regno"] = dt.Rows[k]["Manual_Registration_No"].ToString().Trim();
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = ent_date;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = ent_date;
                        #endregion
                        dtstr.Rows.Add(dr);
                    }
                    bool ok = sgen.Update_data(userCode, dtstr, model[0].Col10, model[0].Col8, isedit);
                    if (ok)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain()
                        {
                            TList1 = tmodel.TList1,
                            TList2 = tmodel.TList2,
                            TList3 = tmodel.TList3,
                            TList4 = tmodel.TList4,
                            TList5 = tmodel.TList5,
                            TList6 = tmodel.TList6,
                            TList7 = tmodel.TList7,
                            TList8 = tmodel.TList8,
                            TList9 = tmodel.TList9,
                            TList10 = tmodel.TList10,
                            TList11 = tmodel.TList11,
                            TList12 = tmodel.TList12,
                            TList13 = tmodel.TList13,
                            TList14 = tmodel.TList14,
                            TList15 = tmodel.TList15,
                            TList16 = tmodel.TList16,
                            TList17 = tmodel.TList17,
                            TList18 = tmodel.TList18,
                            TList19 = tmodel.TList19,
                            TList20 = tmodel.TList20,
                            TList21 = tmodel.TList21,
                            TList22 = tmodel.TList22,
                            TList23 = tmodel.TList23,
                            TList24 = tmodel.TList24,
                            TList25 = tmodel.TList25,
                            TList26 = tmodel.TList26,
                            TList27 = tmodel.TList27,
                            TList28 = tmodel.TList28,
                            TList29 = tmodel.TList29,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },
                            SelectedItems6 = new string[] { "" },
                            SelectedItems7 = new string[] { "" },
                            SelectedItems8 = new string[] { "" },
                            SelectedItems9 = new string[] { "" },
                            SelectedItems10 = new string[] { "" },
                            SelectedItems11 = new string[] { "" },
                            SelectedItems12 = new string[] { "" },
                            SelectedItems13 = new string[] { "" },
                            SelectedItems14 = new string[] { "" },
                            SelectedItems15 = new string[] { "" },
                            SelectedItems16 = new string[] { "" },
                            SelectedItems17 = new string[] { "" },
                            SelectedItems18 = new string[] { "" },
                            SelectedItems19 = new string[] { "" },
                            SelectedItems20 = new string[] { "" },
                            SelectedItems21 = new string[] { "" },
                            SelectedItems22 = new string[] { "" },
                            SelectedItems23 = new string[] { "" },
                            SelectedItems24 = new string[] { "" },
                            SelectedItems25 = new string[] { "" },
                            SelectedItems26 = new string[] { "" },
                            SelectedItems27 = new string[] { "" },
                            SelectedItems28 = new string[] { "" },
                            SelectedItems29 = new string[] { "" },
                            Col9 = "STUDENT DETAILS",
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = tmodel.Col13,
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col91 = tmodel.Col91,
                            Col79 = tmodel.Col79,
                            Col80 = tmodel.Col80,
                            Col81 = tmodel.Col81,
                            Col82 = tmodel.Col82,
                            Col83 = tmodel.Col83,
                            Col84 = tmodel.Col84,
                            Col85 = tmodel.Col85,
                            Col97 = tmodel.Col97,
                            Col98 = tmodel.Col98,
                            Col99 = tmodel.Col99,
                            Col100 = tmodel.Col100,
                            Col101 = tmodel.Col101,
                            Col102 = tmodel.Col102,
                            Col104 = tmodel.Col104,
                            Col109 = tmodel.Col109,
                            Col116 = tmodel.Col116,
                            Col117 = tmodel.Col117,
                            Col118 = tmodel.Col118,
                            Col131 = tmodel.Col131,
                            Col132 = tmodel.Col132,
                            Col133 = tmodel.Col133,
                            Col134 = tmodel.Col134,
                            Chk4 = true,
                            LTM1 = new List<Tmodelmain>()
                        });
                        sgen.SetSession(MyGuid, "vch_num_std", null);
                    }
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        private void filesave(string currdate, DataTable dtfile, string filename, string filepath, string filetitle, string content_type, string isconfrim, string regnum, string refcode)
        {
            FillMst();
            DataRow drf = dtfile.NewRow();
            if (isconfrim.Trim().Equals("Y"))
            {
                drf["vch_num"] = sgen.padlc(Convert.ToInt32(vch_num.Trim()), 6);
                drf["ref_code1"] = regnum;
            }
            else
            {
                drf["vch_num"] = vch_num.Trim();
                drf["ref_code1"] = Convert.ToInt32(vch_num.Trim());
            }
            drf["rec_id"] = 0;
            drf["vch_date"] = sgen.Savedate(currdate, true);
            drf["type"] = type;
            drf["type_desc"] = type_desc.Trim();
            drf["ref_code"] = vch_num.Trim();
            drf["file_name"] = filename;
            drf["file_path"] = filepath;
            drf["col1"] = filetitle;
            drf["col2"] = content_type;
            if (isedit)
            {
                drf["ent_by"] = userid_mst;
                drf["ent_date"] = currdate;
                if (isconfrim.Equals("Y")) drf["ref_code"] = refcode;
                drf["client_id"] = clientid_mst;
                drf["client_unit_id"] = unitid_mst;
            }
            else
            {
                drf["ent_by"] = userid_mst;
                drf["ent_date"] = currdate;
                if (isconfrim.Equals("Y")) drf["ref_code"] = sgen.padlc(Convert.ToInt32(vch_num.Trim()), 6);
                drf["client_id"] = clientid_mst;
                drf["client_unit_id"] = unitid_mst;
            }
            drf["edit_by"] = userid_mst;
            drf["edit_date"] = currdate;
            dtfile.Rows.Add(drf);
        }
        [HttpGet]
        public FileResult fdown(string value, string myguid)
        {
            FillMst(myguid);
            sgen = new sgenFun(myguid);
            if (!value.Trim().Equals(""))
            {
                DataTable dt2 = new DataTable();
                mq = "select file_name,file_path from file_tab where rec_id='" + value.Trim() + "' and type='STD'  and client_unit_id='" + unitid_mst + "'";
                dt2 = sgen.getdata(userCode, mq);
                if (dt2.Rows.Count > 0)
                {
                    path1 = Convert.ToString(dt2.Rows[0]["file_path"]);
                    fileName1 = Convert.ToString(dt2.Rows[0]["file_name"]);
                }
            }
            byte[] fileBytes = System.IO.File.ReadAllBytes(Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/" + path1));
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fileName1);
        }
        [HttpPost]
        public void fdelete(string value)
        {
            sgen = new sgenFun(MyGuid);
            sgen.SetSession(MyGuid, "delid", value);
        }
        [HttpPost]
        public ContentResult filedata()
        {
            if (sgen.GetSession(MyGuid, "vch_num_std") != null)
            {
                sgen = new sgenFun(MyGuid);
                string vch = sgen.GetSession(MyGuid, "vch_num_std").ToString();
                DataTable dt = new DataTable();
                dt = sgen.getdata(userCode, "select rec_id,file_name,file_path,col1 from file_tab where ref_code='" + vch + "' and type='STD' and client_unit_id='" + unitid_mst + "'");
                dt.TableName = "MainData";
                DataSet ds3 = new DataSet();
                ds3.Tables.Add(dt);
                return Content(ds3.GetXml());
            }
            else { return Content(""); }
        }
        [HttpPost]
        public ContentResult checkadhaarself(string value)
        {
            try
            {
                FillMst(MyGuid);
                if (!value.Trim().Equals(""))
                {
                    reslt = sgen.seekval(userCode, "select user_id from user_details where (adhaar_id= '" + value.Trim() + "' or " +
                        "f_adhaar_id='" + value.Trim() + "' or m_adhaar_id='" + value.Trim() + "') and type='STD'", "user_id");
                    if (!reslt.Trim().Equals("0")) { reslt = "Y"; return Content(reslt); }
                    else { reslt = "N"; return Content(reslt); }
                }
                else { reslt = "N"; return Content(reslt); }
            }
            catch (Exception ex) { reslt = "E"; return Content(reslt); }
        }
        [HttpPost]
        public ContentResult checkadhaarfather(string value)
        {
            try
            {
                FillMst(MyGuid);
                if (!value.Trim().Equals(""))
                {
                    reslt = sgen.seekval(userCode, "select sa_id from student_applicant_details where (adhaar_id= '" + value.Trim() + "' " +
                        "or f_adhaar_id='" + value.Trim() + "' or m_adhaar_id='" + value.Trim() + "')", "sa_id");
                    if (!reslt.Trim().Equals("0")) { reslt = "Y"; return Content(reslt); }
                    else { reslt = "N"; return Content(reslt); }
                }
                else { reslt = "N"; return Content(reslt); }
            }
            catch (Exception ex) { reslt = "E"; return Content(reslt); }
        }
        [HttpPost]
        public ContentResult checkadhaarmother(string value)
        {
            try
            {
                FillMst(MyGuid);
                if (!value.Trim().Equals(""))
                {
                    reslt = sgen.seekval(userCode, "select sa_id from student_applicant_details where adhaar_id= '" + value + "' or " +
                        "f_adhaar_id='" + value + "' or m_adhaar_id='" + value + "'", "sa_id");
                    if (!reslt.Trim().Equals("0")) { reslt = "Y"; return Content(reslt); }
                    else { reslt = "N"; return Content(reslt); }
                }
                else { reslt = "N"; return Content(reslt); }
            }
            catch (Exception ex) { reslt = "E"; return Content(reslt); }
        }
        [HttpPost]
        public ContentResult checkadhaargaurdian(string value)
        {
            try
            {
                FillMst(MyGuid);
                if (!value.Trim().Equals(""))
                {
                    reslt = sgen.seekval(userCode, "select sa_id from student_applicant_details where adhaar_id= '" + value + "' or " +
                        "f_adhaar_id='" + value + "' or m_adhaar_id='" + value + "'", "sa_id");
                    if (!reslt.Trim().Equals("0")) { reslt = "Y"; return Content(reslt); }
                    else { reslt = "N"; return Content(reslt); }
                }
                else { reslt = "N"; return Content(reslt); }
            }
            catch (Exception ex) { reslt = "E"; return Content(reslt); }
        }
        [HttpPost]
        public ContentResult SetSession(List<Tmodelmain> Val, string Name)
        {
            sgen = new sgenFun(Val[0].Col15);
            sgen.SetSession(Val[0].Col15, Name, Val);
            return Content("");
        }
        [HttpGet]
        public FileResult stdtemp(List<Tmodelmain> model)
        {
            FillMst();
            model = (List<Tmodelmain>)sgen.GetSession(MyGuid, "model");
            mq = "SELECT 'New' Student_Type,'' Manual_Registration_No,'' First_Name,'' Middle_Name,'' Last_Name,'Male' Gender,'' DOB," +
                "'' Place_Of_Birth,'' Mother_Tongue,'' Class_Applied,'' F_first_name,'' F_middle_name,'' F_last_name,'' F_DOB," +
                "'' F_contact_no,'' F_email,'' M_first_name,'' M_middle_name,'' M_last_name,'' M_DOB,'' M_contact_no,'' M_email," +
                "'-' Withdrawl_no,'0' Srn_no,'0' Enrollment_no from Dual";
            DataTable dtl = new DataTable();
            dtl = sgen.getdata(userCode, mq);
            string cg_com_name = sgen.GetCookie(MyGuid, "cg_com_name");
            Byte[] fileBytes = sgen.Exp_to_csv_new(dtl, "stdupload", cg_com_name);
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, "stdupload");
        }
        #endregion
        //============================================================
        #region Enquiry For School Reception
        public ActionResult Enquiry()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            sgen.SetSession(MyGuid, "vch_num_std", null);
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "ENQUIRY FORM"; tm1.Col12 = "ENQ";
            tm1.Col10 = "student_applicant_details";
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col13 = "Save";
            tm1.Col100 = "Save & New";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            DataTable dtu = sgen.getdata(userCode, "select unit_address,logo_path from company_unit_profile where company_profile_id='" + unitid_mst + "'");
            if (dtu.Rows.Count < 0)
            {
                tm1.Col22 = dtu.Rows[0]["unit_address"].ToString();
                tm1.Col23 = dtu.Rows[0]["logo_path"].ToString();
            }
            sgen.SetSession(MyGuid, "ATR_MID", mid_mst.Trim());
            sgen.SetSession(MyGuid, "ATYPE_MST", tm1.Col12.Trim());
            sgen.SetSession(MyGuid, "ACOND_MST", tm1.Col11.Trim());
            sgen.SetSession(MyGuid, "ATBL_MST", tm1.Col10.Trim());
            tm1.Col18 = "";
            tm1.TList1 = mod1;
            tm1.SelectedItems1 = new string[] { "" };//teacher/user
            tm1.TList2 = mod1;
            tm1.SelectedItems2 = new string[] { "" };//classapplied
            tm1.TList3 = mod1;
            tm1.SelectedItems3 = new string[] { "" };//ac yr
            tm1.TList9 = mod1;
            tm1.SelectedItems9 = new string[] { "" };//disability
            tm1.TList10 = mod1;
            tm1.SelectedItems10 = new string[] { "" };//last class
            tm1.TList12 = mod1;
            tm1.SelectedItems12 = new string[] { "" };//ftitle
            tm1.TList14 = mod1;
            tm1.SelectedItems14 = new string[] { "" };//fqual
            tm1.TList15 = mod1;
            tm1.SelectedItems15 = new string[] { "" };//fannualincome        
            tm1.TList17 = mod1;
            tm1.SelectedItems17 = new string[] { "" };//mtitle      
            tm1.TList19 = mod1;
            tm1.SelectedItems19 = new string[] { "" };//mqual
            tm1.TList20 = mod1;
            tm1.SelectedItems20 = new string[] { "" };//mannualincome        
            tm1.TList22 = mod1;
            tm1.SelectedItems22 = new string[] { "" };//gtitle            
            tm1.TList24 = mod1;
            tm1.SelectedItems24 = new string[] { "" };//gqual            
            tm1.TList26 = mod1;
            tm1.SelectedItems26 = new string[] { "" };//gannualincome
            tm1.TList27 = mod1;
            tm1.SelectedItems27 = new string[] { "" };//sibclass
            tm1.TList28 = mod1;
            tm1.SelectedItems28 = new string[] { "" };//sibrelation
            tm1.Chk4 = true;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult Enquiry(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                #region dropdown
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                List<SelectListItem> mod3 = new List<SelectListItem>();
                List<SelectListItem> mod9 = new List<SelectListItem>();
                List<SelectListItem> mod10 = new List<SelectListItem>();
                List<SelectListItem> mod12 = new List<SelectListItem>();
                List<SelectListItem> mod14 = new List<SelectListItem>();
                List<SelectListItem> mod15 = new List<SelectListItem>();
                List<SelectListItem> mod17 = new List<SelectListItem>();
                List<SelectListItem> mod19 = new List<SelectListItem>();
                List<SelectListItem> mod20 = new List<SelectListItem>();
                List<SelectListItem> mod22 = new List<SelectListItem>();
                List<SelectListItem> mod24 = new List<SelectListItem>();
                List<SelectListItem> mod26 = new List<SelectListItem>();
                List<SelectListItem> mod27 = new List<SelectListItem>();
                List<SelectListItem> mod28 = new List<SelectListItem>();
                model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                model[0].TList2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                model[0].TList3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
                model[0].TList9 = (List<SelectListItem>)TempData[MyGuid + "_TList9"];
                model[0].TList10 = (List<SelectListItem>)TempData[MyGuid + "_TList10"];
                model[0].TList12 = (List<SelectListItem>)TempData[MyGuid + "_TList12"];
                model[0].TList14 = (List<SelectListItem>)TempData[MyGuid + "_TList14"];
                model[0].TList15 = (List<SelectListItem>)TempData[MyGuid + "_TList15"];
                model[0].TList17 = (List<SelectListItem>)TempData[MyGuid + "_TList17"];
                model[0].TList19 = (List<SelectListItem>)TempData[MyGuid + "_TList19"];
                model[0].TList20 = (List<SelectListItem>)TempData[MyGuid + "_TList20"];
                model[0].TList22 = (List<SelectListItem>)TempData[MyGuid + "_TList22"];
                model[0].TList24 = (List<SelectListItem>)TempData[MyGuid + "_TList24"];
                model[0].TList26 = (List<SelectListItem>)TempData[MyGuid + "_TList26"];
                model[0].TList27 = (List<SelectListItem>)TempData[MyGuid + "_TList27"];
                model[0].TList28 = (List<SelectListItem>)TempData[MyGuid + "_TList28"];
                TempData[MyGuid + "_TList1"] = model[0].TList1;
                TempData[MyGuid + "_TList2"] = model[0].TList2;
                TempData[MyGuid + "_TList3"] = model[0].TList3;
                TempData[MyGuid + "_TList9"] = model[0].TList9;
                TempData[MyGuid + "_TList10"] = model[0].TList10;
                TempData[MyGuid + "_TList12"] = model[0].TList12;
                TempData[MyGuid + "_TList14"] = model[0].TList14;
                TempData[MyGuid + "_TList15"] = model[0].TList15;
                TempData[MyGuid + "_TList17"] = model[0].TList17;
                TempData[MyGuid + "_TList19"] = model[0].TList19;
                TempData[MyGuid + "_TList20"] = model[0].TList20;
                TempData[MyGuid + "_TList22"] = model[0].TList22;
                TempData[MyGuid + "_TList24"] = model[0].TList24;
                TempData[MyGuid + "_TList26"] = model[0].TList26;
                TempData[MyGuid + "_TList27"] = model[0].TList27;
                TempData[MyGuid + "_TList28"] = model[0].TList28;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (tm.SelectedItems9 == null) model[0].SelectedItems9 = new string[] { "" };
                if (tm.SelectedItems10 == null) model[0].SelectedItems10 = new string[] { "" };
                if (tm.SelectedItems12 == null) model[0].SelectedItems12 = new string[] { "" };
                if (tm.SelectedItems14 == null) model[0].SelectedItems14 = new string[] { "" };
                if (tm.SelectedItems15 == null) model[0].SelectedItems15 = new string[] { "" };
                if (tm.SelectedItems17 == null) model[0].SelectedItems17 = new string[] { "" };
                if (tm.SelectedItems19 == null) model[0].SelectedItems19 = new string[] { "" };
                if (tm.SelectedItems20 == null) model[0].SelectedItems20 = new string[] { "" };
                if (tm.SelectedItems22 == null) model[0].SelectedItems22 = new string[] { "" };
                if (tm.SelectedItems24 == null) model[0].SelectedItems24 = new string[] { "" };
                if (tm.SelectedItems26 == null) model[0].SelectedItems26 = new string[] { "" };
                if (tm.SelectedItems27 == null) model[0].SelectedItems27 = new string[] { "" };
                if (tm.SelectedItems28 == null) model[0].SelectedItems28 = new string[] { "" };
                #endregion
                if (command == "New")
                {
                    string defval = "";
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(enq_no)) as auto_genid from " + model[0].Col10.Trim() + " a where type1='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col17 = vch_num;
                    model[0].LTM1 = new List<Tmodelmain>();
                    DataTable dt = new DataTable();

                    #region 1.binduser
                    mq = "select vch_num rec_id,first_name||' '||replace(middle_name,'0','')||' '||replace(last_name,'0','') name from user_details where type='CPR'";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["rec_id"].ToString() });
                        }
                    }
                    #endregion
                    #region 2.bindclass
                    mod2 = sgen.BindClass(userCode, unitid_mst);

                    TempData[MyGuid + "_Tlist2"] = mod2;
                    #endregion

                    #region 3.bindacademicyr
                    dt = sgen.BindAcademicYear(userCode, clientid_mst);
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod3.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                        }
                    }
                    #endregion
                    #region 9.disablity
                    mod9.Add(new SelectListItem { Text = "Partially", Value = "Partially" });
                    mod9.Add(new SelectListItem { Text = "Fully", Value = "Fully" });
                    #endregion
                    #region 12.father title
                    mod12.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                    mod12.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                    mod12.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                    mod12.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                    #endregion
                    #region 14.qualification
                    mod14 = cmd_Fun.qualification(userCode, unitid_mst, out defval);
                    #endregion
                    #region 15.Annual income
                    mod15 = cmd_Fun.annincome(userCode, unitid_mst);
                    #endregion
                    #region 17.Mother title
                    mod17.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                    mod17.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                    mod17.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                    mod17.Add(new SelectListItem { Text = "Lt.", Value = "Lt." });
                    #endregion
                    #region 22.Gurdian title
                    mod22.Add(new SelectListItem { Text = "Mr.", Value = "Mr." });
                    mod22.Add(new SelectListItem { Text = "Mrs.", Value = "Mrs." });
                    mod22.Add(new SelectListItem { Text = "Dr.", Value = "Dr." });
                    mod22.Add(new SelectListItem { Text = "Er.", Value = "Er." });
                    #endregion
                    #region 28.relation
                    mod28.Add(new SelectListItem { Text = "Brother", Value = "B" });
                    mod28.Add(new SelectListItem { Text = "Sister", Value = "S" });
                    #endregion
                    #region TEMPDATA
                    TempData[MyGuid + "_Tlist1"] = mod1;
                    TempData[MyGuid + "_Tlist2"] = mod2;
                    TempData[MyGuid + "_Tlist3"] = mod3;
                    TempData[MyGuid + "_Tlist9"] = mod9;
                    TempData[MyGuid + "_Tlist10"] = mod2;
                    TempData[MyGuid + "_Tlist12"] = mod12;
                    TempData[MyGuid + "_Tlist14"] = mod14;
                    TempData[MyGuid + "_Tlist15"] = mod15;
                    TempData[MyGuid + "_Tlist17"] = mod17;
                    TempData[MyGuid + "_TList19"] = mod14;
                    TempData[MyGuid + "_TList20"] = mod15;
                    TempData[MyGuid + "_TList22"] = mod22;
                    TempData[MyGuid + "_TList24"] = mod14;
                    TempData[MyGuid + "_TList26"] = mod15;
                    TempData[MyGuid + "_TList27"] = mod2;
                    TempData[MyGuid + "_TList28"] = mod28;
                    #endregion
                    #region SELECTEDITEM
                    model[0].Col13 = "Save";
                    model[0].Chk4 = true;
                    model[0].TList1 = mod1;
                    model[0].SelectedItems1 = new string[] { "" };
                    model[0].TList2 = mod2;
                    model[0].SelectedItems2 = new string[] { "" };
                    model[0].TList3 = mod3;
                    model[0].SelectedItems3 = new string[] { Ac_Year_id };
                    model[0].TList10 = mod2;
                    model[0].SelectedItems10 = new string[] { "" };
                    model[0].TList12 = mod12;
                    model[0].SelectedItems12 = new string[] { "Mr." };
                    model[0].TList14 = mod14;
                    model[0].SelectedItems14 = new string[] { "" };
                    model[0].TList15 = mod15;
                    model[0].SelectedItems15 = new string[] { "" };
                    model[0].TList17 = mod17;
                    model[0].SelectedItems17 = new string[] { "Mrs." };
                    model[0].TList19 = mod14;
                    model[0].SelectedItems19 = new string[] { "" };
                    model[0].TList20 = mod15;
                    model[0].SelectedItems20 = new string[] { "" };
                    model[0].TList22 = mod22;
                    model[0].SelectedItems22 = new string[] { "" };
                    model[0].TList24 = mod14;
                    model[0].SelectedItems24 = new string[] { "" };
                    model[0].TList26 = mod15;
                    model[0].SelectedItems26 = new string[] { "" };
                    model[0].TList27 = mod2;
                    model[0].SelectedItems27 = new string[] { "" };
                    model[0].TList28 = mod28;
                    model[0].SelectedItems28 = new string[] { "" };
                    model[0].TList9 = mod9;
                    model[0].SelectedItems9 = new string[] { "" };
                    #endregion

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command.Trim() == "Save" || command.Trim() == "Update")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    if (model[0].Chk1 == true) issibling = "Y";
                    if (model[0].Chk2 == true) isfamily = "Y";
                    if (model[0].Chk6 == true) istransfer = "Y";
                    sameas = model[0].Col68;

                    DataTable dtstr = new DataTable();

                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE") != null && sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and enq_no<>'" + model[0].Col17.Trim() + "'";
                        isedit = true;
                        vch_num = model[0].Col17.Trim();
                        sa_id = vch_num;
                    }
                    else
                    {
                        mq = "select max(to_number(enq_no)) as auto_genid from " + model[0].Col10 + " where type1='" + model[0].Col12 + "' "
                            + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        sa_id = vch_num;
                        isedit = false;
                    }
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["enq_no"] = vch_num.Trim();
                    dr["enq_date"] = ent_date;
                    dr["type1"] = model[0].Col12.Trim();
                    dr["type_desc"] = "Enquiry";
                    dr["first_name"] = model[0].Col18.Trim();
                    dr["middle_name"] = model[0].Col19;
                    dr["last_name"] = model[0].Col20;
                    //["dob"] = sgen.Savedate(model[0].Col22, false);
                    dr["dob"] = sgen.Make_date_S(model[0].Col22);
                    dr["class_applied"] = model[0].SelectedItems2.FirstOrDefault().ToString().Trim();
                    dr["usession"] = model[0].SelectedItems3 == null ? "0" : model[0].SelectedItems3.FirstOrDefault();
                    var freg = model[0].Col28 == null ? "0" : model[0].Col28;
                    if (issibling.Equals("Y"))
                    {
                        issameschool = model[0].Col105;
                        var sreg = model[0].Col26 == null ? "0" : model[0].Col26;
                        var sname = model[0].Col106 == null ? "0" : model[0].Col106;
                        if (issameschool.Equals("Y") && sreg.Trim().Length > 3)
                        {
                            dr["issameschool"] = "Y";
                            dr["issibling"] = "Y";
                            dr["sibling2_rollno"] = sreg;
                            dr["isfamily"] = "Y";
                            dr["sibling1_reg_no"] = sgen.seekval(userCode, "select sibling1_rollno from user_details where regnumber='" + sreg.Trim() + "' and type='" + model[0].Col12 + "'", "sibling1_rollno");
                        }
                        else if (issameschool.Equals("O") && sname.Trim().Length > 3)
                        {
                            dr["issameschool"] = "O";
                            dr["sibling1_name"] = sname; //name
                            dr["sibling1_class"] = model[0].Col107; //school
                            dr["sibling2_name"] = model[0].SelectedItems27.FirstOrDefault().ToString(); //class
                            dr["sibling2_class"] = model[0].SelectedItems28.FirstOrDefault().ToString(); //relation
                            dr["issibling"] = "N";
                            dr["sibling2_rollno"] = "-";
                            dr["isfamily"] = "N";
                            dr["sibling1_reg_no"] = "-";
                        }
                    }
                    else
                    {
                        dr["issibling"] = "N";
                        dr["sibling2_rollno"] = model[0].Col119;
                        dr["isfamily"] = "N";
                        dr["sibling1_reg_no"] = "-";
                    }
                    if (isfamily.Equals("Y") && freg.Length > 3)
                    {
                        dr["isfamily"] = "Y";
                        dr["sibling1_reg_no"] = freg;
                    }

                    DataTable dtadd = new DataTable();

                    mq2 = "select * from country_state where rec_id='" + model[0].Col16 + "'";
                    dtadd = sgen.getdata(userCode, mq2);
                    if (dtadd.Rows.Count > 0)
                    {
                        dr["per_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
                        dr["per_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
                        dr["per_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
                        dr["per_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
                        dr["per_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
                        dr["per_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
                        dr["per_address"] = model[0].Col31;
                        if (model[0].Chk4 == true)
                        {
                            isperadd = "Y";
                            dr["cur_country"] = dtadd.Rows[0]["alpha_2"].ToString().Trim();
                            dr["cur_state"] = dtadd.Rows[0]["state_gst_code"].ToString().Trim();
                            dr["cur_city"] = dtadd.Rows[0]["city_name"].ToString().Trim();
                            dr["cir_district"] = dtadd.Rows[0]["district_id"].ToString().Trim();
                            dr["cur_tehsil"] = dtadd.Rows[0]["teh_id"].ToString().Trim();
                            dr["cur_village"] = dtadd.Rows[0]["v_id"].ToString().Trim();
                            dr["cur_address"] = model[0].Col31;
                        }
                        else
                        {
                            DataTable dtadd1 = new DataTable();

                            mq3 = "select * from country_state where rec_id='" + model[0].Col96 + "'";
                            dtadd1 = sgen.getdata(userCode, mq3);
                            if (dtadd1.Rows.Count > 0)
                            {
                                dr["cur_country"] = dtadd1.Rows[0]["alpha_2"].ToString().Trim();
                                dr["cur_state"] = dtadd1.Rows[0]["state_gst_code"].ToString().Trim();
                                dr["cur_city"] = dtadd1.Rows[0]["city_name"].ToString().Trim();
                                dr["cir_district"] = dtadd1.Rows[0]["district_id"].ToString().Trim();
                                dr["cur_tehsil"] = dtadd1.Rows[0]["teh_id"].ToString().Trim();
                                dr["cur_village"] = dtadd1.Rows[0]["v_id"].ToString().Trim();
                                dr["cur_address"] = model[0].Col38;
                            }
                        }
                    }
                    else
                    {
                        DataTable dtadd1 = new DataTable();

                        mq3 = "select * from country_state where rec_id='" + model[0].Col96.Trim() + "'";
                        dtadd1 = sgen.getdata(userCode, mq3);
                        if (dtadd1.Rows.Count > 0)
                        {
                            dr["cur_country"] = dtadd1.Rows[0]["alpha_2"].ToString().Trim();
                            dr["cur_state"] = dtadd1.Rows[0]["state_gst_code"].ToString().Trim();
                            dr["cur_city"] = dtadd1.Rows[0]["city_name"].ToString().Trim();
                            dr["cir_district"] = dtadd1.Rows[0]["district_id"].ToString().Trim();
                            dr["cur_tehsil"] = dtadd1.Rows[0]["teh_id"].ToString().Trim();
                            dr["cur_village"] = dtadd1.Rows[0]["v_id"].ToString().Trim();
                            dr["cur_address"] = model[0].Col38;
                        }
                    }

                    dr["isperadd"] = isperadd;
                    dr["isdisable"] = isdisable;
                    if (isdisable.Equals("Y"))
                    {
                        dr["dis_type"] = model[0].SelectedItems9.FirstOrDefault().ToString();
                        dr["dis_desc"] = model[0].Col45;
                    }
                    dr["istransfer"] = istransfer;
                    if (istransfer.Equals("Y"))
                    {
                        dr["prev_school_name"] = model[0].Col46;
                        dr["transfer_dt"] = sgen.Make_date_S(model[0].Col47);
                        dr["transfer_class"] = model[0].SelectedItems10 == null ? "0" : model[0].SelectedItems10.FirstOrDefault().ToString();
                        dr["transfer_reason"] = model[0].Col121;
                    }
                    dr["f_title"] = model[0].SelectedItems12.FirstOrDefault().ToString().Trim();
                    dr["f_firstname"] = model[0].Col48.Trim();
                    dr["f_middlename"] = model[0].Col49;
                    dr["f_lastname"] = model[0].Col50;
                    //dr["f_dob"] = sgen.Savedate(model[0].Col51, false);
                    dr["f_dob"] = sgen.Make_date_S(model[0].Col51);
                    dr["f_qualification"] = model[0].SelectedItems14 == null ? "0" : model[0].SelectedItems14.FirstOrDefault().ToString();
                    dr["f_occupation"] = model[0].Col52;
                    dr["f_annual_income"] = model[0].SelectedItems15.FirstOrDefault().ToString();
                    dr["f_con_number"] = model[0].Col56;
                    dr["f_email"] = model[0].Col57;
                    dr["m_title"] = model[0].SelectedItems17.FirstOrDefault().ToString().Trim();
                    dr["m_firstname"] = model[0].Col58.Trim();
                    dr["m_middlename"] = model[0].Col59;
                    dr["m_lastname"] = model[0].Col60;
                    dr["m_dob"] = sgen.Make_date_S(model[0].Col61);
                    dr["m_qualification"] = model[0].SelectedItems19.FirstOrDefault().ToString();
                    dr["m_occupation"] = model[0].Col62;
                    dr["m_annual_income"] = model[0].SelectedItems20.FirstOrDefault().ToString();
                    dr["m_email"] = model[0].Col67;
                    dr["m_con_number"] = model[0].Col66;
                    dr["sameas"] = sameas.Trim();
                    dr["g_title"] = model[0].SelectedItems22.FirstOrDefault().ToString();
                    dr["g_firstname"] = model[0].Col69.Trim();
                    dr["g_middlename"] = model[0].Col70;
                    dr["g_lastname"] = model[0].Col71;
                    dr["g_dob"] = sgen.Make_date_S(model[0].Col72);
                    dr["g_qualification"] = model[0].SelectedItems24.FirstOrDefault().ToString();
                    dr["g_occupation"] = model[0].Col73;
                    dr["g_annual_income"] = model[0].SelectedItems26.FirstOrDefault().ToString();
                    dr["g_email"] = model[0].Col78;
                    dr["g_adhaar_id"] = model[0].Col76;
                    dr["g_con_number"] = model[0].Col77;
                    dr["about"] = model[0].Col21;
                    dr["reffered_by"] = model[0].Col63;
                    dr["remark_date"] = model[0].Col64;
                    dr["teacher_name"] = model[0].SelectedItems1.FirstOrDefault().ToString();
                    dr["remark"] = model[0].Col65;
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["rec_id"] = model[0].Col7;
                        dr["ent_date"] = model[0].Col4.Trim();
                        dr["client_id"] = model[0].Col1.Trim();
                        dr["client_unit_id"] = model[0].Col2.Trim();
                        dr["edit_by"] = userid_mst.Trim();
                        dr["edit_date"] = ent_date;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = ent_date;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = ent_date;
                    }
                    #endregion
                    dtstr.Rows.Add(dr);
                    bool ok = sgen.Update_data(userCode, dtstr, model[0].Col10, model[0].Col8, isedit);
                    if (ok)
                    {
                        string SMS = "", Email = "", Detail, PhoneNo = "", class_name, Email_To = "";
                        string smsid = "000009";// SMS and Email OF Result Approve
                        string emailid = "", phoneno = "";
                        string[] config = sgen.get_config(userCode, "000009", clientid_mst, unitid_mst, "SMS");
                        SMS = config[0].ToString(); Email = config[1].ToString(); Detail = config[2].ToString();
                        BulkSMS bulk = new BulkSMS(userCode, clientid_mst, unitid_mst, MyGuid);
                        Mailer mailer = new Mailer(userCode, clientid_mst, unitid_mst, MyGuid);
                        if (SMS == "1")
                        {
                            PhoneNo = model[0].Col56;
                            Email_To = model[0].Col57;
                            class_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Text.ToString();
                            string smstext = "Dear Mr " + model[0].Col48 + " Thanks For Enquiry For Class " + class_name;
                            if ((PhoneNo != "") && (PhoneNo != "-") && (PhoneNo != "0"))
                            {
                                bulk.Add_sms(PhoneNo, smstext);
                                bulk.Send_SMS_Bulk();
                            }
                            if (Email == "1")
                            {
                                if ((Email_To != "") && (Email_To != "-") && (Email_To != "0"))
                                {
                                    mailer.Add_Mail(Email_To, "Exam Result", smstext);
                                    mailer.Send_Email_Bulk();
                                }
                            }
                        }
                        #region SMS
                        #endregion
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain()
                        {
                            TList1 = tmodel.TList1,
                            TList2 = tmodel.TList2,
                            TList3 = tmodel.TList3,
                            TList10 = tmodel.TList10,
                            TList9 = tmodel.TList9,
                            TList12 = tmodel.TList12,
                            TList14 = tmodel.TList14,
                            TList15 = tmodel.TList15,
                            TList17 = tmodel.TList17,
                            TList19 = tmodel.TList19,
                            TList20 = tmodel.TList20,
                            TList22 = tmodel.TList22,
                            TList24 = tmodel.TList24,
                            TList26 = tmodel.TList26,
                            TList27 = tmodel.TList27,
                            TList28 = tmodel.TList28,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems9 = new string[] { "" },
                            SelectedItems10 = new string[] { "" },
                            SelectedItems12 = new string[] { "" },
                            SelectedItems14 = new string[] { "" },
                            SelectedItems15 = new string[] { "" },
                            SelectedItems17 = new string[] { "" },
                            SelectedItems19 = new string[] { "" },
                            SelectedItems20 = new string[] { "" },
                            SelectedItems22 = new string[] { "" },
                            SelectedItems24 = new string[] { "" },
                            SelectedItems26 = new string[] { "" },
                            SelectedItems27 = new string[] { "" },
                            SelectedItems28 = new string[] { "" },
                            Col9 = tmodel.Col9,
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = tmodel.Col13,
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Chk4 = true,
                        });
                        sgen.SetSession(MyGuid, "vch_num_std", null);
                    }
                    else
                    {


                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        //==============
        #region Exam Room Allocation
        public ActionResult ER_Allocation()
        {
            FillMst();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "EXAM ROOM ALLOCATION";
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].TList4 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            return View(model);
        }
        public List<Tmodelmain> new_ER_Allocation(List<Tmodelmain> model)
        {
            var tm = model.FirstOrDefault();
            model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                Col9 = tm.Col9,
                Col13 = tm.Col13,
                Col100 = "Save & New",
                Col121 = "S",
                Col122 = "<u>S</u>ave",
                Col123 = "Save & Ne<u>w</u>",
                Col14 = tm.Col14,
                Col15 = tm.Col15,
                TList1 = tm.TList1,
                TList2 = tm.TList2,
                TList3 = tm.TList3,
                TList4 = tm.TList4,
                SelectedItems1 = new string[] { "" },
                SelectedItems2 = new string[] { "" },
                SelectedItems3 = new string[] { "" },
                SelectedItems4 = new string[] { "" },
            }
             );
            //model.Add(tm);

            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "enableForm();";
            ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";

            #region  Room
            DataTable dt = new DataTable();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            //dt = sgen.getdata(userCode, "select  master_id,  master_name || '('||classid ||')' || 'Floor' as Roomname from master_setting where" +
            //    " type='ERM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
            dt = sgen.getdata(userCode, "select  master_id,  master_name || '('||classid ||')' || 'Floor' as Roomname from master_setting where" +
                " type='ERM' and client_unit_id='" + unitid_mst + "'");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["Roomname"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            //DataTable dtr = sgen.getdata(userCode, "select classid,sectionid from master_setting where type='ERM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and master_id='" + dt.Rows[0]["master_id"].ToString() + "'");
            DataTable dtr = sgen.getdata(userCode, "select classid,sectionid from master_setting where type='ERM' and client_unit_id='" + unitid_mst + "' and master_id='" + dt.Rows[0]["master_id"].ToString() + "'");
            if (dtr.Rows.Count > 0)
            {
                model[0].Col20 = dtr.Rows[0]["classid"].ToString();
                model[0].Col21 = dtr.Rows[0]["sectionid"].ToString();
            }
            #endregion

            #region BindExamType
            DataTable dt2 = new DataTable();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            // dt2 = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='EEM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
            dt2 = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='EEM' and client_unit_id='" + unitid_mst + "'");
            if (dt2.Rows.Count > 0)
            {
                foreach (DataRow dr in dt2.Rows)
                {
                    mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            #endregion
            #region Bind Class
            List<SelectListItem> mod3 = new List<SelectListItem>();
            mod3 = sgen.BindClass(userCode, unitid_mst);
            #endregion
            #region BindSection
            List<SelectListItem> mod4 = new List<SelectListItem>();
            mod4 = sgen.BindSection(userCode, unitid_mst);
            if (dt2.Rows.Count > 0)
                #endregion
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            sgen.SetSession(MyGuid, "SelectClass", model[0].TList3[0].Value);
            sgen.SetSession(MyGuid, "SelectSection", model[0].TList4[0].Value);
            return model;
        }
        [HttpPost]
        public ActionResult ER_Allocation(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                List<SelectListItem> mod11 = new List<SelectListItem>();
                mod11 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod12 = new List<SelectListItem>();
                mod12 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod13 = new List<SelectListItem>();
                mod13 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod14 = new List<SelectListItem>();
                mod14 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod11;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod12;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod13;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod14;
                userCode = sgen.GetCookie(MyGuid, "userCode");
                clientid_mst = sgen.GetCookie(MyGuid, "clientid_mst");
                unitid_mst = sgen.GetCookie(MyGuid, "unitid_mst");
                userid_mst = sgen.GetCookie(MyGuid, "userid_mst");
                Ac_Year_id = sgen.GetCookie(MyGuid, "Ac_Year_id");
                tab_name = "enx_tab2";
                type = "ERA";
                type_desc = "Exam Room Allocation";
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                string Room = "";
                if (command == "New")
                {
                    model = new_ER_Allocation(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    string RoomId = string.Join(",", model[0].SelectedItems1);
                    string ExamType = string.Join(",", model[0].SelectedItems2);
                    string Class_Id = string.Join(",", model[0].SelectedItems3);
                    String Section_Id = string.Join(",", model[0].SelectedItems4);
                    if (RoomId == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Room ', 2);";
                        goto END;
                    }
                    if (Class_Id == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Class', 2);";
                        goto END;
                    }
                    if (Section_Id == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Section', 2);";
                        goto END;
                    }
                    if (sgen.GetSession(MyGuid, "EDMODE") != null)
                    {
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            isedit = true;
                        }
                        else
                        {
                            isedit = false;
                        }
                    }
                    else
                    {
                    }
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, tab_name);
                    string seatalloted = "";
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Chk1 == true)
                        {
                            seatalloted = "Y";
                            DataRow dr = dataTable.NewRow();
                            dr["rec_id"] = "0";
                            dr["type"] = type;
                            dr["vch_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["vch_num"] = vch_num.Trim();
                            dr["col2"] = string.Join(",", model[0].SelectedItems1);//Room Id
                            dr["col5"] = model[0].Col26; //Exam_Type
                            dr["col6"] = string.Join(",", model[0].SelectedItems3); // Class
                            dr["col7"] = string.Join(",", model[0].SelectedItems4); // Section
                            dr["col4"] = model[i].Col16; // RegNumber
                            dr["col9"] = model[i].Col22; // SeatNo
                            dr["col10"] = model[0].Col25; // frequency_id
                            dr["col12"] = seatalloted; // seat alloted
                                                       // exam_type
                            dr["col1"] = model[0].Col28; // date sheet ref
                            if (isedit)
                            {
                                dr["ent_by"] = model[0].Col1;
                                dr["ent_date"] = model[0].Col2;
                                dr["edit_by"] = userid_mst;
                                dr["edit_date"] = currdate;
                            }
                            else
                            {
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = currdate;
                                dr["edit_by"] = "-";
                                dr["edit_date"] = currdate;
                            }
                            dataTable.Rows.Add(dr);
                        }
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, tab_name, tmodel.Col6, isedit);
                    if (Result == true)
                    {
                        List<SelectListItem> mod1 = new List<SelectListItem>();
                        TempData[MyGuid + "_Tlist1"] = mod1;
                        TempData[MyGuid + "_Tlist2"] = mod1;
                        TempData[MyGuid + "_Tlist3"] = mod1;
                        TempData[MyGuid + "_Tlist4"] = mod1;
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = "EXAM ROOM ALLOCATION",
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col17 = "",
                            Col1 = "",
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            TList1 = mod1,
                            TList2 = mod1,
                            TList3 = mod1,
                            TList4 = mod1,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_ER_Allocation(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }

                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                    //ViewBag.scripCall = "enableForm();";
                    DataTable dt = new DataTable();
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    String Class_Id = string.Join(",", model[0].SelectedItems3);
                    String Section_Id = string.Join(",", model[0].SelectedItems4);
                    DataTable datatable = new DataTable();
                    mq = "SELECT (select nvl(file_path,'-') as file_path  from file_tab where type='STD'  and client_unit_id='" + unitid_mst + "' and col1='Child Photo'" +
                        " and ref_code1=a.reg_no and rownum<2) as File_path, a.Reg_no, A.roll_Number ,(ud.first_name)|| ' '|| REPLACE(ud.middle_name, '0', '')|| ' '||" +
                        " REPLACE(ud.last_name, '0', '') as Student_Name ,(ud.f_firstname)|| ' '|| REPLACE(ud.f_middlename, '0', '')||" +
                        " ' '|| REPLACE(ud.f_lastname, '0', '') as Father_Name FROM student_detail a inner join user_details ud on a.Reg_no=ud.RegNumber" +
                        " where  a.client_unit_id='" + unitid_mst + "' and a.Academic_Year_Id='" + Ac_Year_id + "' " +
                        "and a.CLASS_APPLIED='" + Class_Id + "' and a.section='" + Section_Id + "' and ud.type='STD'";
                    datatable = sgen.getdata(userCode, mq);
                    var tm = model.FirstOrDefault();
                    int seat = 0;
                    if (datatable.Rows.Count > 0)
                    {
                        int totalseats = sgen.Make_int(tm.Col21);
                        FileStream fs;
                        BinaryReader br;
                        byte[] Image = new byte[0];
                        foreach (DataRow dr in datatable.Rows)
                        {
                            string filepath = "/Uploads/" + cg_com_name.Replace(" ", "") + "/" + dr["file_path"].ToString();
                            if (filepath == "-")
                            {
                                filepath = "/Uploads/" + "person-icon.png";
                            }
                            Boolean seatalloted = false;
                            if (seat < totalseats)
                            {
                                seat = seat + 1;
                                seatalloted = true;
                            }
                            else
                            {
                                totalseats = 0;
                                seat = 0;
                            }
                            rpt_model.Add(new Tmodelmain
                            {
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Chk1 = seatalloted,
                                Col20 = tm.Col20,
                                Col9 = tm.Col9,
                                Col25 = tm.Col25,
                                Col26 = tm.Col26,
                                Col27 = tm.Col27,
                                Col28 = tm.Col28,
                                Col24 = tm.Col24,
                                Col21 = tm.Col21,
                                Col16 = dr["Reg_no"].ToString(),
                                Col17 = dr["roll_Number"].ToString(),
                                Col18 = dr["Student_Name"].ToString(),
                                Col19 = dr["Father_Name"].ToString(),
                                //Col23 = "/Uploads/messi.jpg",
                                Col23 = filepath,
                                Col22 = (seat).ToString(),
                                TList1 = tm.TList1,
                                TList2 = tm.TList2,
                                TList3 = tm.TList3,
                                TList4 = tm.TList4,
                                SelectedItems1 = tm.SelectedItems1,
                                SelectedItems2 = tm.SelectedItems2,
                                SelectedItems3 = tm.SelectedItems3,
                                SelectedItems4 = tm.SelectedItems4
                            });
                        }
                        model = rpt_model;
                    }
                    else
                    {
                        model = new List<Tmodelmain>();
                        tm.Col16 = "";
                        tm.Col17 = "";
                        tm.Col18 = "";
                        tm.Col19 = "";
                        model.Add(tm);
                    }
                }


                else if (command == "Floor")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    Room = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Value.ToString();
                    DataTable dt = sgen.getdata(userCode, "select classid,sectionid from master_setting where type='ERM' and client_unit_id='" + unitid_mst + "' and master_id='" + Room + "'");
                    if (dt.Rows.Count > 0)
                    {
                        model[0].Col20 = dt.Rows[0]["classid"].ToString();
                        model[0].Col21 = dt.Rows[0]["sectionid"].ToString();
                    }
                }
                else if (command == "Class")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    sgen.SetSession(MyGuid, "SelectClass", ((List<SelectListItem>)TempData[MyGuid + "_Tlist3"]).SingleOrDefault(item => item.Value == model[0].SelectedItems3.FirstOrDefault().ToString()).Value.ToString());
                }
                else if (command == "Section")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    sgen.SetSession(MyGuid, "SelectSection", ((List<SelectListItem>)TempData[MyGuid + "_Tlist4"]).SingleOrDefault(item => item.Value == model[0].SelectedItems4.FirstOrDefault().ToString()).Value.ToString());
                }
                TempData[MyGuid + "_Tlist1"] = model.FirstOrDefault().TList1;
                TempData[MyGuid + "_Tlist2"] = model.FirstOrDefault().TList2;
                TempData[MyGuid + "_Tlist3"] = model.FirstOrDefault().TList3;
                TempData[MyGuid + "_Tlist4"] = model.FirstOrDefault().TList4;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region academic year
        public ActionResult ac_yr()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            //ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            model.Add(new Tmodelmain
            {
                Col1 = "",
                //Col9 = "ACADEMIC AND FINANCIAL YEAR",
                Col9 = "ADD YEAR",
                Col13 = "Save",
                Col100 = "Save & New",
                Col121 = "S",
                Col122 = "<u>S</u>ave",
                Col123 = "Save & Ne<u>w</u>",
                Col14 = mid_mst,
                Col15 = m_id_mst
            });
            string checkyr = sgen.getstring(userCode, "select SUBSTR( academic_year,6,5) as academic_year from add_academic_year where academic_year_id='" + Ac_Year_id + "'  and client_id='" + clientid_mst + "' and type='ACY'");
            if (checkyr != "")
            {
                string checknextyr = sgen.getstring(userCode, "select academic_year from add_academic_year where academic_year LIKE '" + checkyr + "%' and client_id='" + clientid_mst + "' and type='ACY'");
                if (checknextyr != "")
                {
                    ViewBag.scripCall = "disableForm();$('#btnnew').attr('disabled','disabled')";
                }
            }
            else { }
            return View(model);
        }
        public List<Tmodelmain> new_ac_yr(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            //ViewBag.vsavenew = "";
            ////string ac_date_from = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture).AddYears(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            ////string ac_date_To = DateTime.ParseExact(Ac_To_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture).AddYears(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            //string ac_date_from = DateTime.ParseExact(Ac_To_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture).AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            //string ac_date_To = DateTime.ParseExact(Ac_To_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture).AddYears(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            ////string fn_date_from = DateTime.ParseExact(FN_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture).AddYears(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            ////string fn_date_To = DateTime.ParseExact(FN_To_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture).AddYears(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            //string fn_date_from = DateTime.ParseExact(FN_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture).AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            //string fn_date_To = DateTime.ParseExact(FN_To_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture).AddYears(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);

            var ACDT = sgen.Make_datetime(Ac_To_Date);
            string ac_date_from = ACDT.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            string ac_date_To = ACDT.AddYears(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);

            //var ACcy = sgen.Make_datetime(FN_To_Date);
            //string fn_date_from = ACcy.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
            //string fn_date_To = ACcy.AddYears(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);


            var tm = model.FirstOrDefault();
            model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                Col9 = tm.Col9,
                Col13 = tm.Col13,
                Col100 = tm.Col100,
                Col121 = tm.Col121,
                Col122 = tm.Col122,
                Col123 = tm.Col123,
                Col14 = tm.Col14,
                Col15 = tm.Col15,
                Col16 = ac_date_from,
                Col17 = ac_date_To,
                //Col18 = fn_date_from,
                //Col19 = fn_date_To,
            });
            return model;
        }
        [HttpPost]
        public ActionResult ac_yr(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                if (command == "New")
                {
                    model = new_ac_yr(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string vch_num = "", master_id = "", ac_id = ""; ;
                    string cond = "";
                    #region ac_yr
                    tab_name = "add_academic_year";
                    type = "ACY";
                    cond = "";
                    isedit = false;
                    vch_num = sgen.genNo(userCode, "select to_number(max(vch_num)) as max from  " + tab_name + " where  client_id='" + clientid_mst + "' and type='" + type + "'", 6, "max");
                    ac_id = sgen.genNo(userCode, "select max(to_number (nvl(academic_year_id,'0'))) as max from " + tab_name + " where client_id='" + clientid_mst + "' and type='" + type + "' ", 3, "max");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, tab_name);
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = type;
                        dr["vch_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["vch_num"] = vch_num.Trim();
                        dr["academic_year_id"] = ac_id;
                        dr["academic_year"] = sgen.Make_date(model[0].Col16).Year.ToString() + " " + sgen.Make_date(model[0].Col17).Year.ToString();
                        dr["From_Month"] = monthName.GetMonthName(sgen.Make_date(model[0].Col16).Month).ToString();
                        dr["To_Month"] = monthName.GetMonthName(sgen.Make_date(model[0].Col17).Month).ToString();
                        dr["FMonthId"] = sgen.Make_date(model[0].Col16).Month;
                        dr["TMonthId"] = sgen.Make_date(model[0].Col17).Month;
                        dr["From_Date"] = sgen.Make_date_S(model[0].Col16.Trim());
                        dr["To_date"] = sgen.Make_date_S(model[0].Col17.Trim());
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, tab_name, tmodel.Col8, isedit);
                    #endregion
                    #region FN_yr
                    //tab_name = "com_year ";
                    //type = "0";
                    //cond = "";
                    //isedit = false;
                    //vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from  " + tab_name + " where client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                    //string com_year = userCode + '-' + sgen.Make_date(model[0].Col18).Year;
                    ////dataTable = sgen.getdata(userCode, "select  * from " + tab_name + " where  1=2");
                    //dataTable = cmd_Fun.GetStructure(userCode, tab_name);
                    //for (int i = 0; i < model.Count; i++)
                    //{
                    //    DataRow dr = dataTable.NewRow();
                    //    dr["rec_id"] = "0";
                    //    dr["type"] = type;
                    //    dr["vch_date"] = currdate;
                    //    dr["client_id"] = clientid_mst;
                    //    dr["client_unit_id"] = unitid_mst;
                    //    dr["vch_num"] = vch_num.Trim();
                    //    dr["com_code"] = com_year;
                    //    dr["com_year"] = sgen.Make_date(model[0].Col18).Year + " " + sgen.Make_date(model[0].Col19).Year;
                    //    dr["year_From"] = sgen.Make_date_S(model[0].Col18.Trim());
                    //    dr["year_To"] = sgen.Make_date_S(model[0].Col19.Trim());
                    //    dr["ent_by"] = userid_mst;
                    //    dr["ent_date"] = currdate;
                    //    dr["edit_by"] = "-";
                    //    dr["edit_date"] = currdate;
                    //    dataTable.Rows.Add(dr);
                    //}
                    //Result = sgen.Update_data(userCode, dataTable, tab_name, tmodel.Col8, isedit);
                    #endregion
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    //ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        ViewBag.scripCall = "disableForm();";
                        //ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";

                        //foreach (var key in HttpContext.Application.Keys)
                        //{
                        //    if (key.ToString().ToLower().Contains("_c_")) HttpContext.Application[key.ToString()] = null;
                        //}

                        List<string> apps = new List<string>();
                        foreach (var key in HttpContext.Application.Keys)
                        {
                            if (key.ToString().ToUpper().Contains("_U_" + userCode + ""))
                            {
                                apps.Add(key.ToString());
                            }
                        }
                        foreach (var ap in apps)
                        {
                            HttpContext.Application[ap.ToString()] = null;
                        }

                        List<SelectListItem> mod1 = new List<SelectListItem>();
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col13 = "Save",
                            //Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            // Col123 = "Save & Ne<u>w</u>",
                            //Col9 = "ACADEMIC AND FINANCIAL YEAR",
                            Col9 = "ADD YEAR",
                            Col15 = tmodel.Col15,
                            Col14 = tmodel.Col14
                        });
                        string checkyr = sgen.getstring(userCode, "select SUBSTR( academic_year,6,5) as academic_year  from add_academic_year where academic_year_id='" + Ac_Year_id + "'  and client_id='" + clientid_mst + "' and type='ACY'");
                        if (checkyr != "")
                        {
                            string checknextyr = sgen.getstring(userCode, "select  academic_year  from add_academic_year where academic_year LIKE '" + checkyr + "%' and client_id='" + clientid_mst + "' and type='ACY'");
                            if (checknextyr != "")
                            {
                                ViewBag.scripCall = "disableForm();$('#btnnew').attr('disabled','disabled')";
                            }
                        }
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Reports
        #region admin card
        public ActionResult std_cards()
        {
            CrystalDecisions.Web.CrystalImageHandler handler = new CrystalDecisions.Web.CrystalImageHandler();
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            //List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            //m_id_mst = "7020.2";
            string title = "", rpt = "";
            if (mid_mst == "7020.2")
            {
                title = "STUDENT I CARD";
                ViewBag.scripCall = "EnableForm();";
                rpt = sgen.seekval(userCode, "select client_name from master_setting where type='ICF'  and classid='1'", "client_name");
            }
            if (mid_mst == "7014.5")
            {
                title = "STUDENT ADMIT CARD";
                ViewBag.scripCall = "EnableForm();";
                rpt = sgen.seekval(userCode, "select client_name from master_setting where type='ACF'  and classid='1'", "client_name");
            }
            model.Add(new Tmodelmain
            {
                Col9 = title,
                Col13 = "Save",
                Col14 = mid_mst,
                Col15 = m_id_mst,
                Col24 = rpt,
                SelectedItems1 = new string[] { "" },
                SelectedItems2 = new string[] { "" }
            }
             );
            #region Class
            List<SelectListItem> mod1 = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);

            #endregion
            #region BindSection
            List<SelectListItem> mod2 = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);

            #endregion

            try
            {
                sgen.SetSession(MyGuid, "SelectClass", model[0].TList1[0].Value.ToString());
                sgen.SetSession(MyGuid, "SelectSection", model[0].TList2[0].Value.ToString());
            }
            catch { }
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            return View(model);
        }
        [HttpPost]
        public ActionResult std_cards(List<Tmodelmain> model, string command)
        {
            try
            {

                DataSet ds = new DataSet();
                FillMst(model[0].Col15);
                List<SelectListItem> mod11 = new List<SelectListItem>();
                mod11 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod12 = new List<SelectListItem>();
                mod12 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod11;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod12;
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                if (command == "Submit")
                {

                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    var tm = model.FirstOrDefault();
                    //String format_id = string.Join(",", model[0].SelectedItems3);
                    if (tm.Col14 == "7014.5")
                    {
                        String Class_Id = model[0].Col22;
                        String Section_Id = model[0].Col23;
                        mq = "select nvl(a.file_path,'-') as file_path, b.Class_section, a.Reg_no, A.roll_Number,a.Student_Name,a.father_name,a.Mother_Name,b.frequencyname," +
                       "b.Exam_Type,b.max_marks,b.min_marks,max(b.col5)  as FromTime,min(b.col6) as Totime " +
                       ",b.Subject,b.exam_date from (SELECT (select file_path from file_tab where type='STD' " +
                       " and client_unit_id='" + unitid_mst + "' and col1='Child Photo' and ref_code1=a.reg_no and rownum<2) as File_path  , " +
                       "a.CLASS_APPLIED,a.section, a.Reg_no, A.roll_Number ," +
                       "ud.first_name|| ' '|| REPLACE(ud.middle_name, '0', '')|| ' '|| REPLACE(ud.last_name, " +
                       "'0', '') as Student_Name ,REPLACE(ud.f_firstname, '0', '')|| ' '|| REPLACE(ud.f_middlename, '0', '')" +
                       "||' '|| REPLACE(ud.f_lastname, '0', '') as Father_Name,REPLACE(ud.m_firstname, '0', '')|| ' '||" +
                       " REPLACE(ud.m_middlename, '0', '')||' '|| REPLACE(ud.m_lastname, '0', '') as Mother_Name FROM student_detail" +
                       " a inner join user_details ud on a.Reg_no = ud.RegNumber  where " +
                       "  a.client_unit_id = '" + unitid_mst + "' and a.Academic_Year_Id = '" + Ac_Year_id + "'  and a.CLASS_APPLIED " +
                       "= '" + Class_Id + "' and a.section = '" + Section_Id + "' and ud.type = 'STD') a   " +
                       " inner join " +
                       " (select sf.master_name frequencyname, et.master_name as Exam_Type, max(a.col2) as col2," +
                       " to_char(min(a.date1),'" + sgen.Getsqldateformat() + "')" +
                       " as exam_date, max(b.master_name) as Subject, max(a.col3) as max_marks, max(a.col4) as min_marks, " +
                       "max(a.col5) as col5, max(a.col6) as col6, max(a.col7) as col7, max(a.col8) as col8," +
                       " GROUP_CONCAT(distinct a.r_no) as class_id, GROUP_CONCAT(distinct a.ref_code) as section_id," +
                       " GROUP_CONCAT(distinct cl.class||' '||sc.master_name) as Class_section,GROUP_CONCAT(distinct a.col1||" +
                       " a.r_no|| a.ref_code) as subclasssec ,a.col9 as FromTime,a.col10 as To_Time from enx_tab a inner join " +
                       "master_setting b on a.col1 = b.master_id inner join add_class cl on a.r_no= cl.add_class_id and " +
                       "cl.type= 'EAC'  and a.client_unit_id= cl.client_unit_id inner join" +
                       " master_setting sc on a.ref_code= sc.master_id and sc.type= 'ECS'  and" +
                       " find_in_set(a.client_unit_id ,sc.client_unit_id )=1 inner join master_setting sf on a.col7= sf.master_id and" +
                       " sf.type= 'EFQ'  inner join " +
                       "master_setting et on a.col8= et.master_id and et.type= 'EEM' and  " +
                       "find_in_set(a.client_unit_id,et.client_unit_id) =1  where a.client_id|| a.client_unit_id|| a.vch_num|| to_char" +
                       "(a.vch_date, 'yyyymmdd')|| a.type='" + tm.Col19 + "'  and b.type='ESW' " +
                       " and find_in_set(a.client_unit_id,b.client_unit_id )=1 group by  a.col1,sf.master_name, et.master_name,a.col9,a.col10)b on  a.class_applied=b.class_id and " +
                       "a.section=b.section_id group by a.CLASS_APPLIED, a.section, a.Reg_no, A.roll_Number, a.Student_Name, " +
                       "a.father_name, b.frequencyname, b.Exam_Type, b.exam_date, b.Subject, b.max_marks, b.min_marks ,nvl(a.file_path,'-'),b.Class_section,a.Mother_Name order by b.exam_date ASC";
                        DataTable dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            Pivot pv = new Pivot(dt, MyGuid);
                            dt = pv.PivotData("exam_date", AggregateFunction.Max, new string[]
                       { "Reg_no","roll_Number","Class_section", "Student_Name", "father_name", "Mother_Name","file_path","frequencyname","Exam_Type","FromTime","Totime" },
                       new string[] { "Subject" });
                            DataTable dtm = new DataTable();
                            dtm = dt.Copy();
                            var dtcols = new DataTable();
                            for (int c = 0; c < 20; c++)
                            {
                                string nn = "Col" + (c + 1);
                                dtcols.Columns.Add(nn);
                            }
                            var drc = dtcols.NewRow();
                            drc[0] = "-";
                            dtcols.Rows.Add(drc);
                            for (int c = 0; c < 20; c++)
                            {
                                try
                                {
                                    dtcols.Rows[0][c] = dtm.Columns[c + 11].ColumnName.ToString();
                                    dtm.Columns[c + 11].ColumnName = "VCol" + (c + 1);
                                }
                                catch (Exception err)
                                {
                                    string nn = "VCol" + (c + 1);
                                    dtm.Columns.Add(nn);
                                    dtcols.Rows[0][c] = "-";
                                }
                            }
                            dtm.Columns.Add("stdimage", typeof(Byte[]));
                            dtm.Columns.Add("qrimg", typeof(Byte[]));
                            foreach (DataRow dr in dtm.Rows)
                            {
                                //dr["stdimage"]= "/ Uploads / messi.jpg";
                                FileStream fs;
                                BinaryReader br;
                                string filepath = Server.MapPath("~/Uploads/") + cg_com_name.Replace(" ", "") + "/" + dr["file_path"].ToString();
                                try
                                {
                                    fs = new FileStream(filepath, FileMode.Open);
                                    br = new BinaryReader(fs);
                                    byte[] Image = new byte[fs.Length + 1];
                                    Image = br.ReadBytes(Convert.ToInt32((fs.Length)));
                                    dr["stdimage"] = Image;
                                    br.Close();
                                    fs.Close();
                                }
                                catch
                                {
                                    filepath = Server.MapPath("~/Uploads/") + "person-icon.png";
                                    fs = new FileStream(filepath, FileMode.Open);
                                    br = new BinaryReader(fs);
                                    byte[] Image = new byte[fs.Length + 1];
                                    Image = br.ReadBytes(Convert.ToInt32((fs.Length)));
                                    dr["stdimage"] = Image;
                                    br.Close();
                                    fs.Close();
                                }
                                string code = dr["Reg_no"].ToString() + "\n" + dr["roll_Number"].ToString()
                                    + "\n" + dr["Student_Name"].ToString() + "\n" + dr["father_name"].ToString();
                                QRCodeGenerator qrGenerator = new QRCodeGenerator();
                                QRCodeGenerator.QRCode qrCode = qrGenerator.CreateQrCode(code, QRCodeGenerator.ECCLevel.Q);
                                System.Web.UI.WebControls.Image imgBarCode = new System.Web.UI.WebControls.Image();
                                imgBarCode.Height = 150;
                                imgBarCode.Width = 150;
                                using (Bitmap bitMap = qrCode.GetGraphic(20))
                                {
                                    using (MemoryStream ms = new MemoryStream())
                                    {
                                        bitMap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                                        byte[] byteImage = ms.ToArray();
                                        dr["qrimg"] = byteImage;
                                        //imgBarCode.ImageUrl = "data:image/png;base64," + Convert.ToBase64String(byteImage);
                                    }
                                    //plBarCode.Controls.Add(imgBarCode);
                                }
                            }
                            dtm.AcceptChanges();
                            dtm.TableName = "prepcur";
                            ds.Tables.Add(dtm);
                            dtcols.TableName = "heads";
                            ds.Tables.Add(dtcols);
                            sgen.open_report_byDs_xml(userCode, ds, tm.Col24, "Student Admit Card");
                            ViewBag.scripCall += "showRptnew('Student Admit Card');";

                            //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                        }
                        else
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Data Not Exist', 2);";
                            goto END;
                        }
                    }
                    else
                    {
                        String Class_Id = string.Join(",", model[0].SelectedItems1);
                        String Section_Id = string.Join(",", model[0].SelectedItems2);
                        mq = "SELECT   (select file_path from file_tab where type='STD'  and client_unit_id='" + unitid_mst + "'" +
                            " and col1='Child Photo' and ref_code1=a.reg_no and rownum<2) as File_path ,(select file_path from file_tab where type='STD'  and client_unit_id='" + unitid_mst + "'" +
                            " and col1='Father Photo' and ref_code1=a.reg_no and rownum<2) as File_path_F ,(select file_path from file_tab where type='STD'  and client_unit_id='" + unitid_mst + "'" +
                            " and col1='Mother Photo' and ref_code1=a.reg_no and rownum<2) as File_path_M , a.CLASS_APPLIED,a.section, a.Reg_no," +
                            " A.roll_Number ,ud.first_name|| ' '|| REPLACE(ud.middle_name, '0', '')|| ' '|| " +
                            "REPLACE(ud.last_name, '0', '') as Student_Name ,REPLACE(ud.f_firstname, '0', '')|| ' '|| REPLACE(ud.f_middlename," +
                            " '0', '')||' '|| REPLACE(ud.f_lastname, '0', '') as Father_Name,REPLACE(ud.m_firstname, '0', '')||' '||" +
                            " REPLACE(ud.m_middlename, '0', '')||' '||REPLACE(ud.m_lastname, '0', '') as Mother_Name,c.class,d.master_name as section" +
                            ",a.roll_number,ud.blood_grp,ud.CUR_ADDRESS,ud.PER_ADDRESS ,a.havetransport ,'" + Ac_Year + "' as ac_yr,ud.DOB  FROM student_detail a inner join user_details" +
                            " ud on a.Reg_no = ud.RegNumber and ud.type = 'STD' inner join add_class c on a.class_applied=c.add_class_id and" +
                            " c.type='EAC'  and a.client_unit_id=c.client_unit_id inner join master_setting " +
                            " d on a.section=d.master_id and d.type ='ECS'  and find_in_set(a.client_unit_id,d.client_unit_id)=1" +
                            " where a.type='STD' and   and a.client_unit_id = '" + unitid_mst + "'" +
                            " and a.Academic_Year_Id = '" + Ac_Year_id + "'  and a.CLASS_APPLIED = '" + Class_Id + "' and a.section = '" + Section_Id + "'";
                        DataTable dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            dt.Columns.Add("stdimage", typeof(Byte[]));
                            dt.Columns.Add("fimage", typeof(Byte[]));
                            dt.Columns.Add("mimage", typeof(Byte[]));
                            dt.Columns.Add("qrimg", typeof(Byte[]));
                            foreach (DataRow dr in dt.Rows)
                            {
                                //dr["stdimage"]= "/ Uploads / messi.jpg";
                                FileStream fs;
                                BinaryReader br;
                                string filepath = Server.MapPath("~/Uploads/") + cg_com_name.Replace(" ", "") + "/" + dr["file_path"].ToString();
                                string filepath_f = Server.MapPath("~/Uploads/") + cg_com_name.Replace(" ", "") + "/" + dr["file_path_F"].ToString();
                                string filepath_M = Server.MapPath("~/Uploads/") + cg_com_name.Replace(" ", "") + "/" + dr["file_path_M"].ToString();
                                #region STD Image
                                try
                                {
                                    fs = new FileStream(filepath, FileMode.Open);
                                    br = new BinaryReader(fs);
                                    byte[] Image = new byte[fs.Length + 1];
                                    Image = br.ReadBytes(Convert.ToInt32((fs.Length)));
                                    dr["stdimage"] = Image;
                                    br.Close();
                                    fs.Close();
                                }
                                catch
                                {
                                    filepath = Server.MapPath("~/Uploads/") + "person-icon.png";
                                    fs = new FileStream(filepath, FileMode.Open);
                                    br = new BinaryReader(fs);
                                    byte[] Image = new byte[fs.Length + 1];
                                    Image = br.ReadBytes(Convert.ToInt32((fs.Length)));
                                    dr["stdimage"] = Image;
                                    br.Close();
                                    fs.Close();
                                }
                                #endregion
                                #region Father Image
                                try
                                {
                                    fs = new FileStream(filepath_f, FileMode.Open);
                                    br = new BinaryReader(fs);
                                    byte[] Image = new byte[fs.Length + 1];
                                    Image = br.ReadBytes(Convert.ToInt32((fs.Length)));
                                    dr["fimage"] = Image;
                                    br.Close();
                                    fs.Close();
                                }
                                catch
                                {
                                    filepath_f = Server.MapPath("~/Uploads/") + "person-icon.png";
                                    fs = new FileStream(filepath_f, FileMode.Open);
                                    br = new BinaryReader(fs);
                                    byte[] Image = new byte[fs.Length + 1];
                                    Image = br.ReadBytes(Convert.ToInt32((fs.Length)));
                                    dr["fimage"] = Image;
                                    br.Close();
                                    fs.Close();
                                }
                                #endregion
                                #region Mother Image
                                try
                                {
                                    fs = new FileStream(filepath_M, FileMode.Open);
                                    br = new BinaryReader(fs);
                                    byte[] Image = new byte[fs.Length + 1];
                                    Image = br.ReadBytes(Convert.ToInt32((fs.Length)));
                                    dr["mimage"] = Image;
                                    br.Close();
                                    fs.Close();
                                }
                                catch
                                {
                                    filepath_M = Server.MapPath("~/Uploads/") + "person-icon.png";
                                    fs = new FileStream(filepath_f, FileMode.Open);
                                    br = new BinaryReader(fs);
                                    byte[] Image = new byte[fs.Length + 1];
                                    Image = br.ReadBytes(Convert.ToInt32((fs.Length)));
                                    dr["mimage"] = Image;
                                    br.Close();
                                    fs.Close();
                                }
                                #endregion
                                string code = dr["Reg_no"].ToString() + "\n" + dr["roll_Number"].ToString()
                                    + "\n" + dr["Student_Name"].ToString() + "\n" + dr["father_name"].ToString();
                                QRCodeGenerator qrGenerator = new QRCodeGenerator();
                                QRCodeGenerator.QRCode qrCode = qrGenerator.CreateQrCode(code, QRCodeGenerator.ECCLevel.Q);
                                System.Web.UI.WebControls.Image imgBarCode = new System.Web.UI.WebControls.Image();
                                imgBarCode.Height = 150;
                                imgBarCode.Width = 150;
                                using (Bitmap bitMap = qrCode.GetGraphic(20))
                                {
                                    using (MemoryStream ms = new MemoryStream())
                                    {
                                        bitMap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                                        byte[] byteImage = ms.ToArray();
                                        dr["qrimg"] = byteImage;
                                        //imgBarCode.ImageUrl = "data:image/png;base64," + Convert.ToBase64String(byteImage);
                                    }
                                    //plBarCode.Controls.Add(imgBarCode);
                                }
                            }
                            dt.AcceptChanges();
                            dt.TableName = "prepcur";
                            ds.Tables.Add(dt);
                            sgen.open_report_byDs_xml(userCode, ds, tm.Col24, "Student I Card");
                            //sgen.open_report_byDs_xml(userCode, ds, "Student_IC1", "Student I Card");
                            ViewBag.scripCall += "showRptnew('Student I Card');";

                            //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                        }
                        else
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Data Not Exist', 2);";
                            goto END;
                        }
                    }
                END:;
                }

                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                TempData[MyGuid + "_Tlist1"] = model.FirstOrDefault().TList1;
                TempData[MyGuid + "_Tlist2"] = model.FirstOrDefault().TList2;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #endregion
        #region Teacher Weekly Off
        public ActionResult teac_wo()
        {
            FillMst();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].Col9 = "TEACHER WEEKLY OFF";
            return View(model);
        }
        public List<Tmodelmain> new_teac_wo(List<Tmodelmain> model)
        {
            var tm = model.FirstOrDefault();

            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                Col9 = tm.Col9,
                Col13 = tm.Col13,
                Col100 = "Save & New",
                Col121 = "S",
                Col122 = "<u>S</u>ave",
                Col123 = "Save & Ne<u>w</u>",
                Col14 = tm.Col14,
                Col15 = tm.Col15,
                TList1 = tm.TList1,
                SelectedItems1 = new string[] { "" },
                Chk7 = true,
            });
            #region Department
            List<SelectListItem> mod1 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
            #endregion
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;


            return model;
        }
        [HttpPost]
        public ActionResult teac_wo(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                tab_name = "add_class";
                type = "TWO";
                type_desc = "teacher Weekly off";
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod11 = new List<SelectListItem>();
                mod11 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod11;

                if (command == "New")
                {
                    model = new_teac_wo(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string vch_num = "", master_id = "", ac_id = ""; ;
                    string cond = "";
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col5;
                    }
                    else
                    {
                        cond = "";
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, tab_name);
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = type;
                        dr["vch_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["vch_num"] = vch_num.Trim();
                        dr["class"] = model[i].Col18.Trim();
                        dr["IsMonday"] = model[i].Chk8;
                        dr["IsTuesday"] = model[i].Chk9;
                        dr["IsWednesday"] = model[i].Chk10;
                        dr["IsThursday"] = model[i].Chk11;
                        dr["IsFriday"] = model[i].Chk12;
                        dr["IsSaturday"] = model[i].Chk13;
                        dr["IsSunday"] = model[i].Chk14;
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, tab_name, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        List<SelectListItem> mod1 = new List<SelectListItem>();
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col9 = "TEACHER WEEKLY OFF",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                        });

                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_teac_wo(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    string Dept = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Value.ToString();
                    DataTable dt = sgen.getdata(userCode, "SELECT a.first_name||' '||Replace(a.MIDDLE_NAME,'0','')||" +
                        "' '||Replace(a.last_name,'0','') AS Teacher_Name,a.vch_num rec_id,b.master_name as Desig FROM user_details a" +
                        " inner join master_setting b on a.designation=b.master_id and b.type='MDG'" +
                     " where a.Type='CPR'  and a.client_unit_id='" + unitid_mst + "'" +
                     " and a.status='active' and a.department='" + Dept + "'");
                    string att_status_F = "", att_status_S = "";
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "enableForm();$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in dt.Rows)
                        {
                            rpt_model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = tm.Col16,
                                Col17 = tm.Col17,
                                Col18 = dr["rec_id"].ToString(),
                                Col19 = dr["Teacher_Name"].ToString(),
                                Col20 = dr["Desig"].ToString(),
                                Chk1 = tm.Chk1,
                                Chk2 = tm.Chk2,
                                Chk3 = tm.Chk3,
                                Chk4 = tm.Chk4,
                                Chk5 = tm.Chk5,
                                Chk6 = tm.Chk6,
                                Chk7 = tm.Chk7,
                                Chk8 = tm.Chk1,
                                Chk9 = tm.Chk2,
                                Chk10 = tm.Chk3,
                                Chk11 = tm.Chk4,
                                Chk12 = tm.Chk5,
                                Chk13 = tm.Chk6,
                                Chk14 = tm.Chk7,
                                TList1 = tm.TList1,
                                SelectedItems1 = tm.SelectedItems1,
                            });
                        }
                        model = rpt_model;
                    }
                    else
                    {
                        model = new List<Tmodelmain>();
                        tm.Col16 = "";
                        tm.Col17 = "";
                        tm.Col18 = "";
                        tm.Col19 = "";
                        model.Add(tm);
                    }
                END:;

                }
                else if (command == "Department")
                {
                    try
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "enableForm();";
                        if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                        var tmmm = model.FirstOrDefault();
                        model = new List<Tmodelmain>();
                        tmmm.Col18 = "";
                        tmmm.Col19 = "";
                        tmmm.Col20 = "";
                        tmmm.Col21 = "";
                        tmmm.Col22 = "";
                        model.Add(tmmm);
                    }
                    catch (Exception ex)
                    { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                }
                TempData[MyGuid + "_Tlist1"] = model.FirstOrDefault().TList1;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion        
        #region edu_category
        public ActionResult edu_category()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "EDUCATION CATEGORY";
            model[0].Col10 = "master_setting";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "ECC";
            sgen.SetSession(MyGuid, "TR_MID", mid_mst.Trim());
            sgen.SetSession(MyGuid, "TYPE_MST", model[0].Col12.Trim());
            sgen.SetSession(MyGuid, "COND_MST", model[0].Col11.Trim());
            sgen.SetSession(MyGuid, "TBL_MST", model[0].Col10.Trim());
            return View(model);
        }
        public List<Tmodelmain> new_edu_category(List<Tmodelmain> model)
        {
            List<SelectListItem> mod1 = new List<SelectListItem>();
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type in  ('DDECC' ,'ECC')" + model[0].Col11 + "";
            master_id = sgen.genNo(userCode, mq, 3, "auto_genid");
            model[0].Col16 = master_id;
            model[0].Col22 = "Y";
            return model;
        }
        [HttpPost]
        public ActionResult edu_category(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                Master_Type = "Edu_Category";
                if (command == "New")
                {
                    model = new_edu_category(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    string found = "", inactive_date = "";
                    var tmodel = model.FirstOrDefault();

                    string currdate = sgen.server_datetime(userCode);

                    DataTable dtstr = new DataTable();

                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + tmodel.Col23.Trim() + "'";
                        isedit = true;
                        vch_num = tmodel.Col23.Trim();
                        master_id = tmodel.Col16.Trim();
                    }
                    else
                    {
                        mq1 = "";
                        isedit = false;
                        mq = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type in  ('DDECC','ECC')" + model[0].Col11 + "";
                        master_id = sgen.genNo(userCode, mq, 3, "auto_genid");
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type in   ('DDECC','ECC')" + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    found = sgen.getstring(userCode, "select master_name from " + model[0].Col10 + " a where upper(master_name)= upper('" + model[0].Col18 + "')" +
                        " and type in  ('DDECC','ECC') " + model[0].Col11 + " " + mq1 + "");
                    if (found != "")
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Data Already Exists', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                    }
                    if (model[0].Col22 == "Y") { status = "Y"; inactive_date = currdate; model[0].Col12 = "ECC"; }
                    else { status = "N"; inactive_date = currdate; model[0].Col12 = "DDECC"; }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    DataRow dr = dataTable.NewRow();
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = sgen.Savedate(model[0].Col17, false);
                    dr["type"] = model[0].Col12;
                    dr["Master_type"] = Master_Type;
                    dr["Master_Name"] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(model[0].Col18.ToLower());
                    dr["master_id"] = master_id;
                    dr["Section_Strength"] = model[0].Col20.Trim();
                    dr["classid"] = model[0].Col19.Trim();
                    dr["sectionid"] = model[0].Col21.Trim();
                    dr["Status"] = status;
                    dr["Inactive_date"] = sgen.Savedate(inactive_date, false);
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    if (isedit)
                    {
                        dr["master_entby"] = model[0].Col3.Trim();
                        dr["master_entdate"] = model[0].Col4.Trim();
                        dr["master_editby"] = userid_mst;
                        dr["master_editdate"] = currdate;
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                        dr["rec_id"] = model[0].Col7;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["master_editby"] = "-";
                        dr["master_editdate"] = currdate;
                        dr["master_entby"] = userid_mst;
                        dr["master_entdate"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        //sgen.SetSession(MyGuid, "BindClasscategory", null);

                        List<string> apps = new List<string>();
                        foreach (var key in HttpContext.Application.Keys)
                        {
                            if (key.ToString().ToUpper().Contains("_U_" + userCode + ""))
                            {
                                apps.Add(key.ToString());
                            }
                        }
                        foreach (var ap in apps)
                        {
                            HttpContext.Application[ap.ToString()] = null;
                        }

                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tmodel.Col10,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col9 = tmodel.Col9,
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_edu_category(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion        
        #region section_strength
        public ActionResult section_strength()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "SECTION STRENGTH";
            model[0].Col10 = "master_setting";
            model[0].Col12 = "ESS";
            model[0].Col13 = "Save";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod1;
            model[0].SelectedItems2 = new string[] { "" };
            sgen.SetSession(MyGuid, "TR_MID", mid_mst.Trim());
            sgen.SetSession(MyGuid, "TYPE_MST", model[0].Col12.Trim());
            sgen.SetSession(MyGuid, "COND_MST", model[0].Col11.Trim());
            sgen.SetSession(MyGuid, "TBL_MST", model[0].Col10.Trim());
            return View(model);
        }
        public List<Tmodelmain> new_section_strength(List<Tmodelmain> model)
        {
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.scripCall = "enableForm();";
            mq1 = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq1, 3, "auto_genid");
            #region bindclass

            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);
            #endregion
            #region bindsection
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst); ;
            #endregion

            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].Col16 = vch_num;
            model[0].Col21 = "Y";
            model[0].Col17 = "2";
            return model;
        }
        [HttpPost]
        public ActionResult section_strength(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                Master_Type = "Sec_str";
                string x = "";
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                if (command == "New")
                {
                    model = new_section_strength(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    try
                    {
                        string found = "";
                        var tmodel = model.FirstOrDefault();
                        string currdate = sgen.server_datetime(userCode);

                        if (model[0].Col21.Trim() == "N")
                        {
                            model[0].Col12 = "DDESS";
                            status = "N";
                        }
                        else status = "Y";
                        DataTable dtstr = new DataTable();
                        //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10.Trim() + " WHERE 1=2");
                        dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            mq1 = " and vch_num<>'" + model[0].Col16.Trim() + "'";
                            isedit = true;
                            vch_num = model[0].Col16.Trim();
                            id = model[0].Col23.Trim();
                        }
                        else
                        {
                            found = sgen.getstring(userCode, "select master_name from " + model[0].Col10 + " where classid='" + model[0].SelectedItems1.FirstOrDefault() + "' and  sectionid='" + model[0].SelectedItems2.FirstOrDefault() + "' " + model[0].Col11 + "and (type='ESS' or type ='DDESS' ) and master_type='" + Master_Type + "' ");
                            if (found != "")
                            {
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                ViewBag.scripCall = "showmsgJS(1, 'Data Already Exist', 2);";
                                goto END;
                            }
                            mq = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10.Trim() + " a where type  in ('ESS','DDESS' )" + model[0].Col11.Trim() + "";
                            id = sgen.genNo(userCode, mq, 3, "auto_genid");
                            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type  in ('ESS','DDESS' ) " + model[0].Col11.Trim() + "";
                            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                            isedit = false;
                        }
                        if (model[0].Col17 == "1")
                        {
                            x = "Male";
                            model[0].Col22 = "0";
                            model[0].Col18 = "0";
                        }
                        if (model[0].Col17 == "0")
                        {
                            x = "Female";
                            model[0].Col22 = "0";
                            model[0].Col18 = "0";
                        }
                        if (model[0].Col17 == "2")
                        {
                            x = "Both";
                            if ((model[0].Chk1 == true) && ((model[0].Col18 == "") || (model[0].Col18 == "0")))
                            {
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                ViewBag.scripCall = "showmsgJS(1, 'Please Enter Female Ratio', 2);";
                                goto END;
                            }
                            if (model[0].Chk1 == true)
                            {
                                try { model[0].Col22 = (Convert.ToDecimal(100 * 1) - Convert.ToDecimal(model[0].Col18)).ToString(); }
                                catch { }
                            }
                            else
                            {
                                model[0].Col22 = "0";
                            }
                        }
                        DataRow dr = dtstr.NewRow();
                        dr["rec_id"] = "0";
                        dr["vch_num"] = vch_num;
                        dr["vch_date"] = sgen.server_datetime(userCode);
                        dr["type"] = model[0].Col12;
                        dr["Master_type"] = Master_Type;
                        dr["Master_Name"] = model[0].Col19.Trim();
                        dr["classid"] = string.Join(",", model[0].SelectedItems1);
                        dr["sectionid"] = string.Join(",", model[0].SelectedItems2);
                        dr["Section_strength"] = model[0].Col19.Trim();
                        dr["subject_strength"] = model[0].Col20.Trim();
                        dr["SectionType"] = x;
                        dr["FemaleRatio"] = model[0].Col18.Trim();
                        dr["MaleRatio"] = model[0].Col22;
                        dr["status"] = model[0].Col21;
                        dr["master_id"] = id;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        if (isedit)
                        {
                            dr["master_entby"] = model[0].Col3;
                            dr["master_entdate"] = model[0].Col4;
                            dr["master_editby"] = userid_mst;
                            dr["master_editdate"] = currdate;
                            dr["rec_id"] = model[0].Col7;
                            //dr["vch_date"] = ViewState["vch_date"].ToString();
                        }
                        else
                        {
                            dr["master_editby"] = "-";
                            dr["master_editdate"] = currdate;
                            dr["master_entby"] = userid_mst;
                            dr["master_entdate"] = currdate;
                        }
                        dtstr.Rows.Add(dr);
                        bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, model[0].Col8, isedit);
                        if (Result == true)
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            // ViewBag.vsavenew = "disabled='disabled'";
                            // ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Section Strength Saved Successfully');disableForm();";

                            model = new List<Tmodelmain>();
                            tmodel.Col16 = "";
                            tmodel.Col18 = "";
                            tmodel.Col19 = "";
                            tmodel.Col20 = "";
                            tmodel.Col21 = "";
                            tmodel.Col13 = "Save";
                            tmodel.Col100 = "Save & New";
                            tmodel.Col121 = "S";
                            tmodel.Col122 = "<u>S</u>ave";
                            tmodel.Col123 = "Save & Ne<u>w</u>";
                            tmodel.TList1 = mod1;
                            tmodel.SelectedItems1 = new string[] { "" };
                            tmodel.TList2 = mod2;
                            tmodel.SelectedItems2 = new string[] { "" };
                            tmodel.Col9 = tmodel.Col9;
                            model.Add(tmodel);
                            sgen.SetSession(MyGuid, "BindClass_Actual", null);
                            sgen.SetSession(MyGuid, "BindClass_Str", null);
                            sgen.SetSession(MyGuid, "BindSection", null);

                            if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                            {
                                ViewBag.vnew = "";
                                ViewBag.vedit = "";
                                ViewBag.vsave = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Section Strength Saved Successfully');disableForm();";
                            }
                            else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                            {
                                try
                                {
                                    model = new_section_strength(model);
                                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Section Strength Saved Successfully');";
                                }
                                catch (Exception ex) { }
                            }
                        }
                        else
                        {

                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                        }
                    END:;
                    }
                    catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "', 0);"; }
                }
                //mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                //mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                //TempData[MyGuid + "_Tlist1"] = mod1;
                //TempData[MyGuid + "_Tlist2"] = mod2;
                //model[0].TList1 = mod1;
                //model[0].TList2 = mod2;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region pattern_gen
        public ActionResult pattern_gen()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod6 = new List<SelectListItem>();
            List<SelectListItem> mod7 = new List<SelectListItem>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            model[0].Col9 = "PATTERN GENERATION";
            model[0].Col10 = "pattern_gen";
            model[0].Col13 = "Update";
            model[0].Col121 = "U";
            model[0].Col122 = "<u>U</u>pdate";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod1;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod1;
            model[0].SelectedItems3 = new string[] { "" };
            model[0].TList4 = mod1;
            model[0].SelectedItems4 = new string[] { "" };
            model[0].TList5 = mod1;
            model[0].SelectedItems5 = new string[] { "" };
            model[0].TList6 = mod1;
            model[0].SelectedItems6 = new string[] { "" };
            model[0].TList7 = mod1;
            model[0].SelectedItems7 = new string[] { "" };
            model[0].TList8 = mod1;
            model[0].SelectedItems8 = new string[] { "" };

            string chk_pattern = sgen.getstring(userCode, "select count(*) cnt from pattern_gen where client_unit_id='" + unitid_mst + "'");
            if (chk_pattern == "0")
            {
                #region patterns
                #region Invoice
                string xDate = sgen.server_datetime(userCode);
                string dt_ft = "YYYY-MM-dd HH24:MI:SS";
                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Prefix','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='INV' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='bnpmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Company Name','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='INV' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='bnpmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Unit Name','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='INV' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='bnpmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Year','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='INV' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='bnpmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Month','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='INV' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='bnpmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Date','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='INV' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='bnpmain')");

                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Minimum Digit Required','bnpmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='INV' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='bnpmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Start Number','bnpmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='INV' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='bnpmain')");



                #endregion
                #region MRN Number

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Prefix','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='invtmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Company Name','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='invtmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Unit Name','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='invtmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Year','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='invtmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Month','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='invtmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Date','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='invtmain')");

                // MRN Type
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','MRN Type','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='MRN Type' and module_id='invtmain')");

                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Minimum Digit Required','invtmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='invtmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Start Number','invtmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='invtmain')");



                #endregion
                #region WO Number

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Prefix','pdmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='pdmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Company Name','pdmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='pdmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Unit Name','pdmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='pdmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Year','pdmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='pdmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Month','pdmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='pdmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Date','pdmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='pdmain')");

                //WO Type
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','WO Type','pdmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='WO Type' and module_id='pdmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Minimum Digit Required','pdmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='pdmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Start Number','pdmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='pdmain')");



                #endregion
                #region Receipt No


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','School Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Branch Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Branch Code','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Branch Code' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Year','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Month','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Date','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Country','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Country' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','State','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='State' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','City','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='City' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Minimum Digit Required','edumain' ,'Y' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Start Number','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Class','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Class' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Section','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Section' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
             " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
             " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Prefix','edumain','N' from dual where NOT EXISTS" +
             "(select content from pattern_gen where type='REC' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='edumain')");



                #endregion
                #region PO Number

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Prefix','invtmain,purmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='invtmain,purmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Company Name','invtmain,purmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='invtmain,purmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Unit Name','invtmain,purmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='invtmain,purmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Year','invtmain,purmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='invtmain,purmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Month','invtmain,purmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='invtmain,purmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Date','invtmain,purmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='invtmain,purmain')");

                //PO Type Wise Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','PO Type Wise Number','invtmain,purmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='PO Type Wise Number' and module_id='invtmain,purmain')");

                //PO Type prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','PO Type Prefix','invtmain,purmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='PO Type Prefix' and module_id='invtmain,purmain')");


                //EXP/IMP
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','E/D Type Wise Number','invtmain,purmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='E/D Type Wise Number' and module_id='invtmain,purmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Minimum Digit Required','invtmain,purmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='invtmain,purmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Start Number','invtmain,purmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='invtmain,purmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
             " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
             " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Suffix','invtmain,purmain' ,'N' from dual " +
             "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='purmain')");


                #endregion
                #region Issue Number

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Prefix','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='invtmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Company Name','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='invtmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Unit Name','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='invtmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Year','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='invtmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Month','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='invtmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Date','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='invtmain')");

                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Minimum Digit Required','invtmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='invtmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Start Number','invtmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='invtmain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Suffix','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='invtmain')");


                #endregion
                #region Reg No
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','School Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Branch Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Branch Code','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Branch Code' and module_id='edumain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Year','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='edumain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Month','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Date','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Country','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Country' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','State','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='State' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','City','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='City' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Class','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Class' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Section','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Section' and module_id='edumain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Minimum Digit Required','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Start Number','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='edumain')");

                #endregion
                #region userid_mst
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','First Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='USE' and client_unit_id='" + unitid_mst + "' and content='First Name' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','DOB','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='USE' and client_unit_id='" + unitid_mst + "' and content='DOB' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','Academic Year','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='USE' and client_unit_id='" + unitid_mst + "' and content='Academic Year' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','Record Id','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='USE' and client_unit_id='" + unitid_mst + "' and content='Record Id' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
    " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
    " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Prefix','edumain','N' from dual where NOT EXISTS" +
    "(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
" select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
" to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Suffix','edumain','N' from dual where NOT EXISTS" +
"(select content from pattern_gen where type='REG' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='edumain')");



                #endregion
                #region VOUCHER

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Prefix','acctmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='acctmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Company Name','acctmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='acctmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Unit Name','acctmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='acctmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Year','acctmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='acctmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Month','acctmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='acctmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Date','acctmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='acctmain')");

                //WO Type
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Voucher Type','acctmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Voucher Type' and module_id='acctmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Minimum Digit Required','acctmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='acctmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Start Number','acctmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='acctmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
             " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
             " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Prefix','acctmain' ,'N' from dual " +
             "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='acctmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Suffix','acctmain' ,'N' from dual " +
         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='acctmain')");


                #endregion
                #region Quotation Number

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Prefix','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='bnpmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Company Name','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='bnpmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Unit Name','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='bnpmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Year','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='bnpmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Month','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='bnpmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Date','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='bnpmain')");

                //SO Type
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Quotation Type','bnpmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Quotation Type' and module_id='bnpmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Minimum Digit Required','bnpmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='bnpmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Start Number','bnpmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='bnpmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
             " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
             " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Suffix','bnpmain' ,'N' from dual " +
             "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='bnpmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Date','bnpmain' ,'N' from dual " +
        "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='bnpmain')");


                #endregion
                #region ACCESSION NUMBER

                // Publisher Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Publisher Name','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Publisher Name' and module_id='lbrmain')");

                // Year Of Purchase
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Year Of Purchase','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Year Of Purchase' and module_id='lbrmain')");


                //Academic Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Year','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='lbrmain')");

                // Book Category
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Book Category','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Book Category' and module_id='lbrmain')");


                // Vch Num Of Book Category
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Vch Num Of Book Category','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Vch Num Of Book Category' and module_id='lbrmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Minimum Digit Required','lbrmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='lbrmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Start Number','lbrmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='lbrmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
             " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
             " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Prefix','lbrmain' ,'N' from dual " +
             "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='lbrmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Suffix','lbrmain' ,'N' from dual " +
        "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='lbrmain')");


                #endregion
                #region Roll No
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','School Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Branch Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Branch Code','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Branch Code' and module_id='edumain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Year','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='edumain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Month','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Date','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Country','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Country' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','State','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='State' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','City','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='City' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Class','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Class' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Section','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Section' and module_id='edumain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Minimum Digit Required','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='edumain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Start Number','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
             " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
             " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Prefix','edumain' ,'N' from dual where NOT EXISTS" +
             "(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='edumain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Suffix','edumain' ,'N' from dual where NOT EXISTS" +
        "(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='edumain')");



                #endregion
                #region Employee Code

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Prefix','paymain,hrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='paymain,hrmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Company Name','paymain,hrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='paymain,hrmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Unit Name','paymain,hrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='paymain,hrmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Minimum Digit Required','paymain,hrmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='EMP' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='paymain,hrmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Start Number','paymain,hrmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='paymain,hrmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
            " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
            " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Suffix','paymain,hrmain' ,'N' from dual " +
            "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='paymain,hrmain')");


                #endregion
                #region Indent Number

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Prefix','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='invtmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Company Name','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='invtmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Unit Name','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='invtmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Year','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='invtmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Month','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='invtmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Date','invtmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='invtmain')");

                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Minimum Digit Required','invtmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='invtmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Start Number','invtmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='invtmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
             " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
             " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Suffix','invtmain' ,'N' from dual " +
             "where NOT EXISTS(select content from pattern_gen where type='IND' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='invtmain')");


                #endregion
                #region HOSTEL
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date(''" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','School Name','hostmain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='hostmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Branch Name','hostmain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='hostmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Branch Code','hostmain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Branch Code' and module_id='hostmain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Year','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='hostmain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Month','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='hostmain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Date','hostmain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='hostmain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Country','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Country' and module_id='hostmain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','State','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='State' and module_id='hostmain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','City','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='City' and module_id='hostmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Class','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Class' and module_id='hostmain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Section','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Section' and module_id='hostmain')");



                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Minimum Digit Required','hostmain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='hostmain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Start Number','hostmain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='hostmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
              " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date(''" + xDate + "','" + dt_ft + "')," +
              " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Prefix','hostmain' ,'N' from dual where NOT EXISTS" +
              "(select content from pattern_gen where type='ROL' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='hostmain')");

                #endregion
                #region ASSET CODE

                // Major Asset Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Major Asset Abbreviation','fixmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Major Asset Abbreviation' and module_id='fixmain')");
                //Minor Asset Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Minor Asset Abbreviation','fixmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Minor Asset Abbreviation' and module_id='fixmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Company Name','fixmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='fixmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Unit Name','fixmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='fixmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Year','fixmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='fixmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Minimum Digit Required','fixmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='fixmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Start Number','fixmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='fixmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
            " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
            " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Major Asset Prefix','fixmain' ,'N' from dual " +
            "where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Major Asset Prefix' and module_id='fixmain')");


                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Minor Asset Prefix','fixmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='AST' and client_unit_id='" + unitid_mst + "' and content='Minor Asset Prefix' and module_id='fixmain')");


                #endregion
                #region SO Number

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Prefix','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='bnpmain')");

                // Company Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Company Name','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='bnpmain')");

                // Unit Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Unit Name','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='bnpmain')");

                // Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Year','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='bnpmain')");

                // Month
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Month','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='bnpmain')");

                // Date
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Date','bnpmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='bnpmain')");

                //SO Type
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','SO Type','bnpmain' ,'N' from dual " +
                "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='SO Type' and module_id='bnpmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Minimum Digit Required','bnpmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='bnpmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Start Number','bnpmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='bnpmain')");



                #endregion
                #region LIBRARY MEMBERSHIP

                // Prefix
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Prefix','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='lbrmain')");

                // Student Registration Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Student Registration Number','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_unit_id='" + unitid_mst + "' and content='Student Registration Number' and module_id='lbrmain')");


                //Academic Year
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Year','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='lbrmain')");

                // School Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','School Name','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='lbrmain')");


                // Branch Name
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Branch Name','lbrmain' ,'N' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='lbrmain')");


                // Minimum Digit Required
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Minimum Digit Required','lbrmain','Y' from dual" +
                 " where NOT EXISTS(select content from pattern_gen where type='MEM' and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='lbrmain')");

                // Start Number
                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
                 " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "', to_date('" + xDate + "','" + dt_ft + "')," +
                 " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Start Number','lbrmain','Y' from dual " +
                 "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='lbrmain')");

                sgen.execute_cmd(userCode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
            " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid_mst + "',to_date('" + xDate + "','" + dt_ft + "')," +
            " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Suffix','lbrmain' ,'N' from dual " +
            "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='lbrmain')");


                #endregion
                #region assignment code
                //work allocation  sama es emp code
                #endregion
                #endregion
            }
            #region pattern type
            DataTable dt = sgen.getdata(userCode, "SELECT distinct type_desc,type FROM  pattern_gen where  client_unit_id='" + unitid_mst + "' and Find_in_set('" + m_module3 + "',module_id)=1");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["type_desc"].ToString(), Value = dr["type"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            #endregion
            //model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            //model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult pattern_gen(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                List<SelectListItem> mod11 = new List<SelectListItem>();
                List<SelectListItem> mod12 = new List<SelectListItem>();
                List<SelectListItem> mod13 = new List<SelectListItem>();
                List<SelectListItem> mod14 = new List<SelectListItem>();
                List<SelectListItem> mod15 = new List<SelectListItem>();
                List<SelectListItem> mod16 = new List<SelectListItem>();
                List<SelectListItem> mod17 = new List<SelectListItem>();
                List<SelectListItem> mod18 = new List<SelectListItem>();
                mod11 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                mod12 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                mod13 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                mod14 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                mod15 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
                mod16 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];
                mod17 = (List<SelectListItem>)TempData[MyGuid + "_Tlist7"];
                mod18 = (List<SelectListItem>)TempData[MyGuid + "_Tlist8"];
                //TempData[MyGuid + "_Tlist1"] = mod11;
                //TempData[MyGuid + "_Tlist2"] = mod12;
                //TempData[MyGuid + "_Tlist3"] = mod13;
                //TempData[MyGuid + "_Tlist4"] = mod14;
                //TempData[MyGuid + "_Tlist5"] = mod15;
                //TempData[MyGuid + "_Tlist6"] = mod16;
                //TempData[MyGuid + "_Tlist7"] = mod17;
                //TempData[MyGuid + "_Tlist8"] = mod18;
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod11;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod12;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod13;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod14;
                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod15;
                TempData[MyGuid + "_Tlist1"] = model[0].TList6 = mod16;
                TempData[MyGuid + "_Tlist7"] = model[0].TList7 = mod17;
                TempData[MyGuid + "_Tlist8"] = model[0].TList8 = mod18;
                switch (command)
                {
                    case "pattern":
                        try
                        {
                            var tm = model.FirstOrDefault();
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall = "enableForm();";
                            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                            if (model[0].SelectedItems7 == null) model[0].SelectedItems7 = new string[] { "" };
                            if (model[0].SelectedItems8 == null) model[0].SelectedItems8 = new string[] { "" };
                            string Col22 = "", Col30 = "", Col31 = "", Col35 = "", Col36 = "", Col37 = "";
                            string Col23 = "", Col24 = "", Col25 = "", Col26 = "", Col27 = "", Col38 = "", Col39 = "", Col40 = "";
                            string Col28 = "", Col29 = "", Col32 = "", Col33 = "", Col34 = "", Col41 = "";
                            string Col42 = "", Col43 = "", Col44 = "", Col45 = "", Col46 = "";
                            string Col47 = "", Col48 = "", Col49 = "", Col50 = "", Col51 = "";
                            string Col61 = "", Col62 = "", Col63 = "", Col64 = "", Col65 = "";
                            #region Comp_Unit
                            string str_type = "";
                            if (model[0].SelectedItems1.FirstOrDefault() == "ROL") { str_type = "CRN"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "REC") { str_type = "CRC"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "REG") { str_type = "CRG"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "USE") { str_type = "CUS"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "INV") { str_type = "CIV"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "IND") { str_type = "CIN"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "MRN") { str_type = "CMR"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "PUR") { str_type = "CPR"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "EMP") { str_type = "CEM"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "SAL") { str_type = "CSO"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "WRK") { str_type = "CWO"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "VOC") { str_type = "CVC"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "HOS") { str_type = "CHO"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "AST") { str_type = "CAS"; }
                            else if (model[0].SelectedItems1.FirstOrDefault() == "QUO") { str_type = "CQU"; }
                            #endregion
                            #region rec_setting
                            DataTable dtrec = sgen.getdata(userCode, "select a.client_id||a.client_unit_id||a.master_id||to_char(a.vch_date,'yyyymmdd')||a.type as fstr" +
                                ",a.master_id ,a.master_entby," +
                                " a.IsReceiptNoChange from master_setting a where a.type='REC'  and a.client_unit_id='" + unitid_mst + "' ");
                            if (dtrec.Rows.Count > 0)
                            {
                                Col29 = "Update Receipt No Settings";
                                Col28 = dtrec.Rows[0]["IsReceiptNoChange"].ToString();
                                Col32 = "client_id||client_unit_id|| master_id|| to_char(vch_date, 'yyyymmdd')|| type = '" + dtrec.Rows[0]["fstr"].ToString() + "'";
                                Col33 = dtrec.Rows[0]["master_id"].ToString();
                                Col34 = dtrec.Rows[0]["master_entby"].ToString();
                            }
                            else
                            {
                                Col29 = "Save Receipt No Settings";
                                Col32 = "";
                                Col33 = "";
                                Col34 = "";
                                Col28 = "0";
                            }
                            #endregion
                            #region reg_setting
                            DataTable dtreg = sgen.getdata(userCode, "select a.client_id||a.client_unit_id||a.master_id||to_char(a.vch_date,'yyyymmdd')||a.type as fstr" +
                                ",a.master_id ,a.master_entby," +
                                " a.IsRegNoChange from master_setting a where a.type='REG' and  a.client_unit_id='" + unitid_mst + "' ");
                            if (dtreg.Rows.Count > 0)
                            {
                                Col31 = "Update Reg No Settings";
                                Col30 = dtreg.Rows[0]["IsRegNoChange"].ToString();
                                Col22 = dtreg.Rows[0]["IsRegNoChange"].ToString();
                                Col35 = "client_id|| client_unit_id|| master_id|| to_char(vch_date, 'yyyymmdd')|| type = '" + dtreg.Rows[0]["fstr"].ToString() + "'";
                                Col36 = dtreg.Rows[0]["master_id"].ToString();
                                Col37 = dtreg.Rows[0]["master_entby"].ToString();
                            }
                            else
                            {
                                Col31 = "Save Reg No Settings";
                                Col35 = "";
                                Col36 = "";
                                Col37 = "";
                                Col30 = "0";
                                Col22 = "0";
                            }
                            #endregion
                            #region rollno_setting
                            DataTable dtrol = sgen.getdata(userCode, "select a.client_id||a.client_unit_id||a.master_id||to_char(a.vch_date,'yyyymmdd')||a.type as fstr" +
                                ",a.master_id ,a.master_entby," +
                                " a.IsRollNoRegWise,a.IsRegNoChange,a.IsRollNoChange,a.IsSchoolBased,a.IsClassBased,a.IsSectionBased,a.IsAdmission_Wise," +
                                "a.IsAlphabetic_Wise from master_setting a where a.type='ROL'  and a.client_unit_id='" + unitid_mst + "' ");
                            if (dtrol.Rows.Count > 0)
                            {
                                Col27 = "Update Roll No Settings";
                                Col26 = dtrol.Rows[0]["IsAdmission_Wise"].ToString();
                                if ((dtrol.Rows[0]["IsSchoolBased"].ToString()) == "1")
                                {
                                    Col25 = "1";
                                }
                                else if ((dtrol.Rows[0]["IsClassBased"].ToString()) == "1")
                                {
                                    Col25 = "0";
                                }
                                else if ((dtrol.Rows[0]["IsSectionBased"].ToString()) == "1")
                                {
                                    Col25 = "2";
                                }
                                else
                                {
                                    Col25 = dtrol.Rows[0]["IsSectionBased"].ToString();
                                }
                                Col24 = dtrol.Rows[0]["IsRollNoChange"].ToString();
                                if (Col22 == "1")
                                {
                                }
                                else
                                {
                                    Col23 = dtrol.Rows[0]["IsRollNoRegWise"].ToString();
                                }
                                Col38 = "client_id|| client_unit_id|| master_id||to_char(vch_date, 'yyyymmdd')|| type = '" + dtrol.Rows[0]["fstr"].ToString() + "'";
                                Col39 = dtrol.Rows[0]["master_id"].ToString();
                                Col40 = dtrol.Rows[0]["master_entby"].ToString();
                            }
                            else
                            {
                                Col27 = "Save Roll No Settings";
                                Col38 = "";
                                Col39 = "";
                                Col40 = "";
                                Col26 = "1";
                                Col25 = "0";
                                Col24 = "0";
                                Col23 = "0";
                            }
                            #endregion
                            #region  start no setting
                            DataTable dta = sgen.getdata(userCode, "select a.client_unit_id||a.master_id||to_char(a.vch_date,'yyyymmdd')||a.type as fstr," +
                                " a.IsReceiptNoChange,a.master_id,a.master_entby from master_setting a where a.type='" + str_type + "' and a.client_unit_id='" + unitid_mst + "' ");
                            if (dta.Rows.Count > 0)
                            {
                                Col41 = dta.Rows[0]["IsReceiptNoChange"].ToString();
                                //Col32 = dtrec.Rows[0]["fstr"].ToString();
                                Col46 = "client_unit_id|| master_id|| to_char(vch_date, 'yyyymmdd')|| type = '" + dta.Rows[0]["fstr"].ToString() + "'";
                                Col44 = dta.Rows[0]["master_id"].ToString();
                                Col45 = dta.Rows[0]["master_entby"].ToString();
                                Col42 = "Update Start No.Setting";
                            }
                            else
                            {
                                Col41 = "U";
                                Col42 = "Save Start No.Setting";
                            }
                            #endregion
                            mq = "select a.client_id|| a.client_unit_id|| a.vch_num||a.type as fstr," +
                               "a.module_id,a.content,a.print_field,a.seprator,a.position,a.required,a.type_desc,vch_num from pattern_gen a where" +
                               " a.type='" + model[0].SelectedItems1.FirstOrDefault() + "'  and" +
                               " a.client_unit_id='" + unitid_mst + "'";
                            DataTable dt = sgen.getdata(userCode, mq);
                            DataTable dt2 = sgen.getdata(userCode, "select  '/' as sep, '/' as id from dual union select '.' as sep, '.' as id from dual" +
                                " union select '-' as sep, '-' as id from dual UNION select '_' as sep, '_' as id from dual" +
                                " union select ':' as sep, ':' as id from dual UNION select '' as sep, 'None' as id from dual");
                            //DataTable dt1 = sgen.getdata(userCode, "select * from seq_1_to_" + dt.Rows.Count);
                            DataTable dt1 = sgen.getdata(userCode, "SELECT rownum FROM XMLTABLE('1 to " + dt.Rows.Count + "')");
                            DataTable dt4 = sgen.getdata(userCode, "select 'yyyy yyyy' as year from dual union select 'yyyy' as year from dual UNION select 'yy yy' as year from dual union select 'yy' as year from dual");
                            mod12 = sgen.dt_to_selectlist(dt2);
                            mod13 = sgen.dt_to_selectlist(dt1);
                            mod14 = sgen.dt_to_selectlist(dt4);
                            mod15 = new List<SelectListItem>();
                            mod15.Add(new SelectListItem { Text = "1", Value = "1" });
                            mod15.Add(new SelectListItem { Text = "2", Value = "2" });
                            mod15.Add(new SelectListItem { Text = "3", Value = "3" });
                            mod15.Add(new SelectListItem { Text = "4", Value = "4" });
                            mod15.Add(new SelectListItem { Text = "5", Value = "5" });
                            #region PO type
                            mod16 = new List<SelectListItem>();
                            mod17 = new List<SelectListItem>();
                            DataTable dt16 = sgen.getdata(userCode, "select master_id,master_name from master_setting  where client_unit_id='" + unitid_mst + "' and type='KPO' and SUBSTR(master_id,1,1)=5");
                            if (dt16.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt16.Rows)
                                {
                                    mod16.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                }
                            }
                            #endregion
                            #region MRN type
                            DataTable dt17 = sgen.getdata(userCode, "select master_id,master_name from master_setting  where client_unit_id='" + unitid_mst + "' and type='KMR'");
                            if (dt17.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt17.Rows)
                                {
                                    mod17.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                }
                            }
                            #endregion
                            #region SO type
                            mod18 = new List<SelectListItem>();
                            DataTable dt18 = sgen.getdata(userCode, "select master_id,master_name from master_setting  where client_unit_id='" + unitid_mst + "' and type='KPO' and SUBSTR(master_id,1,1)=4");
                            if (dt18.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt18.Rows)
                                {
                                    mod18.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                                }
                            }
                            #endregion
                            TempData[MyGuid + "_Tlist2"] = mod12;
                            TempData[MyGuid + "_Tlist3"] = mod13;
                            TempData[MyGuid + "_Tlist4"] = mod14;
                            TempData[MyGuid + "_Tlist5"] = mod15;
                            TempData[MyGuid + "_Tlist6"] = mod16;
                            TempData[MyGuid + "_Tlist7"] = mod17;
                            TempData[MyGuid + "_Tlist8"] = mod18;
                            string print_field = "";
                            Boolean req = false;
                            if (dt.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dt.Rows)
                                {
                                    if (dr["required"].ToString() == "Y")
                                    {
                                        req = true;
                                    }
                                    else
                                    {
                                        req = false;
                                    }
                                    if (dr["content"].ToString() == "Month")
                                    {
                                        print_field = sgen.server_datetime_dt(userCode).ToString("MM");
                                    }
                                    else if (dr["content"].ToString() == "Date")
                                    {
                                        print_field = sgen.server_datetime_dt(userCode).ToString("dd");
                                    }
                                    else if (dr["content"].ToString() == "Minimum Digit Required")
                                    {
                                        req = true;
                                    }
                                    else if (dr["content"].ToString() == "Start Number")
                                    {
                                        req = true;
                                        print_field = dr["print_field"].ToString();
                                    }
                                    else if (dr["content"].ToString() == "Class")
                                    {
                                        print_field = "Class";
                                    }
                                    else if (dr["content"].ToString() == "Section")
                                    {
                                        print_field = "Section";
                                    }
                                    else if (dr["content"].ToString() == "Year Of Purchase")
                                    {
                                        print_field = "eg 2018";
                                    }
                                    else if (dr["content"].ToString() == "Vch Num Of Book Category")
                                    {
                                        dr["Print_Field"] = "eg 000001";
                                    }
                                    else
                                    {
                                        print_field = dr["print_field"].ToString();
                                    }
                                    rpt_model.Add(new Tmodelmain
                                    {
                                        Col8 = "client_id|| client_unit_id|| vch_num|| type = '" + dr["fstr"].ToString() + "'",
                                        Col9 = tm.Col9,
                                        Col10 = tm.Col10,
                                        Col12 = model[0].SelectedItems1.FirstOrDefault(),
                                        Col13 = tm.Col13,
                                        Col121 = tm.Col121,
                                        Col122 = tm.Col122,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col28 = Col28,
                                        Col29 = Col29,
                                        Col32 = Col32,
                                        Col33 = Col33,
                                        Col34 = Col34,
                                        Col30 = Col30,
                                        Col31 = Col31,
                                        Col35 = Col35,
                                        Col36 = Col36,
                                        Col37 = Col37,
                                        Col22 = Col22,
                                        Col23 = Col23,
                                        Col24 = Col24,
                                        Col25 = Col25,
                                        Col26 = Col26,
                                        Col27 = Col27,
                                        Col38 = Col38,
                                        Col39 = Col39,
                                        Col40 = Col40,
                                        Col41 = Col41,
                                        Col42 = Col42,
                                        Col43 = Col43,
                                        Col44 = Col44,
                                        Col45 = Col45,
                                        Col46 = Col46,
                                        Col47 = str_type,
                                        Col16 = dr["content"].ToString(),
                                        Col17 = print_field,
                                        Col18 = dr["module_id"].ToString(),
                                        Col19 = dr["type_desc"].ToString(),
                                        Col20 = dr["vch_num"].ToString(),
                                        Chk1 = req,
                                        TList1 = tm.TList1,
                                        TList2 = mod12,
                                        TList3 = mod13,
                                        TList4 = mod14,
                                        TList5 = mod15,
                                        TList6 = mod16,
                                        TList7 = mod17,
                                        TList8 = mod18,
                                        SelectedItems1 = tm.SelectedItems1,
                                        SelectedItems2 = dr["seprator"].ToString().Split(','),
                                        SelectedItems3 = dr["position"].ToString().Split(','),
                                        SelectedItems4 = dr["print_field"].ToString().Split(','),
                                        SelectedItems5 = dr["print_field"].ToString().Split(','),
                                        SelectedItems6 = dr["print_field"].ToString().Split(','),
                                        SelectedItems7 = dr["print_field"].ToString().Split(','),
                                        SelectedItems8 = dr["print_field"].ToString().Split(','),
                                    });
                                }
                                model = rpt_model;
                            }
                        }
                        catch (Exception ex) { }
                        break;
                    case "Cancel":
                        return CancelFun(model);
                        break;
                    case "Callback":
                        model = StartCallback(model);
                        break;
                    case "Save":
                    case "Update":
                        try
                        {
                            var tmodel = model.FirstOrDefault();
                            string currdate = sgen.server_datetime(userCode);
                            string vch_num = "", master_id = "";
                            isedit = true;
                            DataTable dataTable = cmd_Fun.GetStructure(userCode, tmodel.Col10.Trim());
                            for (int i = 0; i < model.Count; i++)
                            {
                                string req = "N";
                                string Sep = "";
                                string position = "-";
                                if (model[i].Chk1 == true)
                                {
                                    req = "Y";
                                    if ((model[i].Col16 != "Book Category") && (model[i].Col16 != "Vch Num Of Book Category") && (model[i].Col16 != "Student Registration Number") && (model[i].Col16 != "Class") && (model[i].Col16 != "Section") && (model[i].Col16 != "Year") && (model[i].Col16 != "Academic Year") && (model[i].Col16 != "Minimum Digit Required") && (model[i].Col16 != "Country") && (model[i].Col16 != "State") && (model[i].Col16 != "City") && (model[i].Col16 != "PO Type") && (model[i].Col16 != "MRN Type"))
                                    {
                                        if (((model[i].Col17 == null) || (model[i].Col17 == "") || (model[i].Col17 == "0")) && (model[i].Col12 != "USE"))
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Fill Print Field', 2);";
                                            goto END;
                                        }
                                    }
                                    if (((model[i].Col16 == "Year") || (model[i].Col16 == "Academic Year")) && (model[i].SelectedItems4 == null))
                                    {
                                        ViewBag.scripCall = "showmsgJS(1, 'Please Select Year Format', 2);";
                                        goto END;
                                    }
                                    if ((model[i].Col16 == "Minimum Digit Required") && (model[i].SelectedItems5 == null))
                                    {
                                        ViewBag.scripCall = "showmsgJS(1, 'Please Select Minimum Digit Required', 2);";
                                        goto END;
                                    }
                                    if ((model[i].Col16 != "Minimum Digit Required"))
                                    {
                                        if (model[i].SelectedItems2 == null)
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Select Position', 2);";
                                            goto END;
                                        }
                                        if (model[i].SelectedItems3 == null)
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Select Seprator', 2);";
                                            goto END;
                                        }
                                    }
                                    if (((model[i].Col16 == "PO Type")) && (model[i].SelectedItems6 == null))
                                    {
                                        ViewBag.scripCall = "showmsgJS(1, 'Please Select PO Type', 2);";
                                        goto END;
                                    }
                                    if (((model[i].Col16 == "MRN Type")) && (model[i].SelectedItems7 == null))
                                    {
                                        ViewBag.scripCall = "showmsgJS(1, 'Please Select MRN Type', 2);";
                                        goto END;
                                    }
                                    if (((model[i].Col16 == "SO Type")) && (model[i].SelectedItems8 == null))
                                    {
                                        ViewBag.scripCall = "showmsgJS(1, 'Please Select SO Type', 2);";
                                        goto END;
                                    }
                                }
                                if (model[i].Chk1 == false)
                                {
                                    req = "N";
                                }
                                if (model[i].SelectedItems2 == null) model[i].SelectedItems2 = new string[] { "" };
                                if (model[i].SelectedItems3 == null) model[i].SelectedItems3 = new string[] { "" };
                                if (model[i].SelectedItems4 == null) model[i].SelectedItems4 = new string[] { "" };
                                if (model[i].SelectedItems5 == null) model[i].SelectedItems5 = new string[] { "" };
                                if (model[i].SelectedItems6 == null) model[i].SelectedItems6 = new string[] { "" };
                                if (model[i].SelectedItems7 == null) model[i].SelectedItems7 = new string[] { "" };
                                if (model[i].SelectedItems8 == null) model[i].SelectedItems8 = new string[] { "" };
                                DataRow dr = dataTable.NewRow();
                                dr["rec_id"] = "0";
                                dr["vch_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr["vch_num"] = model[0].Col20;
                                dr["content"] = model[i].Col16.Trim();
                                if ((model[i].Col16 == "Year") || (model[i].Col16 == "Academic Year"))
                                {
                                    dr["print_field"] = model[i].SelectedItems4.FirstOrDefault();
                                }
                                else if (model[i].Col16 == "Minimum Digit Required")
                                {
                                    dr["print_field"] = model[i].SelectedItems5.FirstOrDefault();
                                }
                                else if (model[i].Col16 == "PO Type")
                                {
                                    dr["print_field"] = model[i].SelectedItems6.FirstOrDefault();
                                }
                                else if (model[i].Col16 == "MRN Type")
                                {
                                    dr["print_field"] = model[i].SelectedItems7.FirstOrDefault();
                                }
                                else if (model[i].Col16 == "SO Type")
                                {
                                    dr["print_field"] = model[i].SelectedItems8.FirstOrDefault();
                                }
                                else
                                {
                                    dr["print_field"] = model[i].Col17;
                                }
                                dr["required"] = req;
                                dr["seprator"] = model[i].SelectedItems2.FirstOrDefault();
                                dr["position"] = model[i].SelectedItems3.FirstOrDefault();
                                dr["type"] = model[0].SelectedItems1.FirstOrDefault();
                                dr["type_desc"] = model[i].Col19;
                                dr["module_id"] = model[i].Col18;
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = currdate;
                                dr["edit_by"] = userid_mst;
                                dr["edit_date"] = currdate;
                                if (model[i].Col16.Trim().ToUpper() == sgen.seekval_dt(dataTable, "content='" + model[i].Col16.Trim() + "'", "content").Trim().ToUpper()) { }
                                else dataTable.Rows.Add(dr);
                            }
                            //bool Result = sgen.Update_data(userCode, dataTable, tmodel.Col10, tmodel.Col8, isedit);
                            bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);

                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            if (Result == true)
                            {
                                //ViewBag.scripCall = "showmsgJS(1, 'Record Saved Successfully', 1);";
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                                model = new List<Tmodelmain>();
                                model.Add(tmodel);
                                //model.Add(new Tmodelmain
                                //{
                                model[0].Col17 = "";
                                model[0].Col1 = "";
                                model[0].Col13 = "Update";
                                model[0].Col121 = "U";
                                model[0].Col122 = "<u>U</u>pdate";
                                model[0].Col9 = "PATTERN GENERATION";
                                model[0].TList1 = mod11;
                                model[0].TList2 = mod12;
                                model[0].TList3 = mod13;
                                model[0].TList4 = mod14;
                                model[0].TList5 = mod15;
                                model[0].SelectedItems1 = new string[] { "" };
                                model[0].SelectedItems2 = new string[] { "" };
                                model[0].SelectedItems3 = new string[] { "" };
                                model[0].SelectedItems4 = new string[] { "" };
                                model[0].SelectedItems5 = new string[] { "" };
                                model[0].SelectedItems6 = new string[] { "" };
                                model[0].SelectedItems7 = new string[] { "" };
                                model[0].SelectedItems8 = new string[] { "" };
                                //}
                                //    );
                            }
                        END:;
                        }
                        catch (Exception ex)
                        { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 2);"; }
                        break;
                    case "View Sample":
                        try
                        {
                            var tm = model.FirstOrDefault();
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            string xsample = "";
                            string xyear = "";
                            string min = "";
                            string potype = "";
                            string mrntype = "";
                            DataTable dtsample = new DataTable();
                            dtsample.Columns.Add("Contents", typeof(string));
                            dtsample.Columns.Add("Print_Field", typeof(string));
                            dtsample.Columns.Add("position", typeof(Int32));
                            dtsample.Columns.Add("Seprator", typeof(string));
                            for (int i = 0; i < model.Count; i++)
                            {
                                if (model[i].SelectedItems2 == null) model[i].SelectedItems2 = new string[] { "" };
                                if (model[i].SelectedItems3 == null) model[i].SelectedItems3 = new string[] { "0" };
                                if (model[i].Chk1 == true)
                                {
                                    DataRow dr = dtsample.NewRow();
                                    dr["Contents"] = model[i].Col16;
                                    dr["Seprator"] = model[i].SelectedItems2.FirstOrDefault();
                                    dr["position"] = sgen.Make_int(model[i].SelectedItems3.FirstOrDefault());
                                    if ((dr["Contents"].ToString() == "Year") || (dr["Contents"].ToString() == "Academic Year"))
                                    {
                                        if (model[i].SelectedItems4 == null)
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Select Year Format', 2);";
                                            goto END;
                                        }
                                        else
                                        {
                                            xyear = model[i].SelectedItems4.FirstOrDefault();
                                            dr["Print_Field"] = xyear;
                                        }
                                    }
                                    else if (dr["Contents"].ToString() == "Class")
                                    {
                                        dr["Print_Field"] = "Class";
                                    }
                                    else if (dr["Contents"].ToString() == "Section")
                                    {
                                        dr["Print_Field"] = "Section";
                                    }
                                    else if (dr["Contents"].ToString() == "Book Category")
                                    {
                                        dr["Print_Field"] = "Book Category";
                                    }
                                    else if (dr["Contents"].ToString() == "Vch Num Of Book Category")
                                    {
                                        dr["Print_Field"] = "000001";
                                    }
                                    else if (dr["Contents"].ToString() == "PO Type")
                                    {
                                        if (model[i].SelectedItems6 == null)
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Select PO Type', 2);";
                                            goto END;
                                        }
                                        else
                                        {
                                            potype = model[i].SelectedItems6.FirstOrDefault();
                                            dr["Print_Field"] = potype;
                                        }
                                    }
                                    else if (dr["Contents"].ToString() == "MRN Type")
                                    {
                                        if (model[i].SelectedItems7 == null)
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Select MRN Type', 2);";
                                            goto END;
                                        }
                                        else
                                        {
                                            mrntype = model[i].SelectedItems7.FirstOrDefault();
                                            dr["Print_Field"] = mrntype;
                                        }
                                    }
                                    else if (dr["Contents"].ToString() == "SO Type")
                                    {
                                        if (model[i].SelectedItems8 == null)
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Select SO Type', 2);";
                                            goto END;
                                        }
                                        else
                                        {
                                            potype = model[i].SelectedItems8.FirstOrDefault();
                                            dr["Print_Field"] = potype;
                                        }
                                    }
                                    else if (dr["Contents"].ToString() == "Minimum Digit Required")
                                    {
                                        if (model[i].SelectedItems5 == null)
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Select Minimum Digit Required', 2);";
                                            goto END;
                                        }
                                        else
                                        {
                                            min = model[i].SelectedItems5.FirstOrDefault();
                                            dr["Print_Field"] = min;
                                        }
                                    }
                                    else if (dr["Contents"].ToString() == "Student Registration Number")
                                    {
                                        dr["Print_Field"] = "Reg No";
                                    }
                                    else
                                    {
                                        if (((model[i].Col17 == null) || (model[i].Col17 == "") || (model[i].Col17 == "0")) && (model[i].Col12 != "USE") && (dr["Contents"].ToString() != "PO Type Wise Number") && (dr["Contents"].ToString() != "ED Type Wise Number"))
                                        {
                                            ViewBag.scripCall = "showmsgJS(1, 'Please Fill Print Field', 2);";
                                            goto END;
                                        }
                                        dr["Print_Field"] = model[i].Col17;
                                    }
                                    dtsample.Rows.Add(dr);
                                }
                            }
                            if (dtsample.Rows.Count > 0)
                            {
                                DataView dv = dtsample.DefaultView;
                                dv.Sort = "position";
                                dtsample = dv.ToTable();
                            }
                            var duplicates = dtsample.AsEnumerable()
                          .Select(dr => dr.Field<int>("position"))
                          .GroupBy(x => x)
                          .Where(g => g.Count() > 1)
                          .Select(g => g.Key)
                          .ToList();
                            if (duplicates.Count > 0)
                            {
                                ViewBag.scripCall = "showmsgJS(1, 'Please Reset Position', 2);";
                                goto END;
                            }
                            foreach (DataRow dr in dtsample.Rows)
                            {
                                string displayyr = "";
                                if ((dr["Contents"].ToString() == "Year") || (dr["Contents"].ToString() == "Academic Year"))
                                {
                                    if (xyear == "yyyy yyyy")
                                    {
                                        displayyr = Ac_Year;
                                    }
                                    else if (xyear == "yyyy")
                                    {
                                        displayyr = Ac_Year.Substring(0, 4);
                                    }
                                    else if (xyear == "yy yy")
                                    {
                                        displayyr = Ac_Year.Substring(2, 2) + ' ' + Ac_Year.Substring(7, 2);
                                    }
                                    else if (xyear == "yy")
                                    {
                                        displayyr = Ac_Year.Substring(2, 2);
                                    }
                                    xsample = xsample + displayyr + dr["Seprator"];
                                }
                                else if (dr["Contents"].ToString() == "Start Number")
                                {
                                    try
                                    {
                                        string id = sgen.genNo(userCode, "Select '" + dr["Print_Field"] + "'-1 as No  from dual ", Convert.ToInt32(min), "No");
                                        xsample = xsample + id + dr["Seprator"];
                                    }
                                    catch { }
                                }
                                else
                                {
                                    if (dr["Contents"].ToString() != "Minimum Digit Required")
                                    {
                                        xsample = xsample + dr["Print_Field"] + dr["Seprator"];
                                    }
                                }
                            }
                            if ((xsample.Substring(xsample.Length - 1) == "/") || (xsample.Substring(xsample.Length - 1) == ".") || (xsample.Substring(xsample.Length - 1) == "-") || (xsample.Substring(xsample.Length - 1) == "_") || (xsample.Substring(xsample.Length - 1) == ":"))
                            {
                                xsample = xsample.Substring(0, xsample.Length - 1);
                            }
                            model[0].Col21 = xsample;
                        END:;
                        }
                        catch (Exception ex) { ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Select Position');"; }
                        break;
                    case "Save Start No.Setting":
                    case "Update Start No.Setting":
                        try
                        {
                            var tm = model.FirstOrDefault();
                            string master_id = "";
                            string currdate = sgen.server_datetime(userCode);
                            if (tm.Col42 == "Update Start No.Setting")
                            {
                                isedit = true;
                                master_id = tm.Col44;
                            }
                            else
                            {
                                isedit = false;
                                master_id = sgen.genNo(userCode, "select max(to_number (master_id)) as max from  master_setting where  client_unit_id='" + unitid_mst + "' and type= '" + tm.Col47 + "'", 3, "max");
                            }
                            string IsReceiptNoChange = ""; ;
                            DataTable dataTable = cmd_Fun.GetStructure(userCode, "master_setting");
                            //for (int i = 0; i < model.Count; i++)
                            {
                                IsReceiptNoChange = model[0].Col41;
                                DataRow dr = dataTable.NewRow();
                                dr["rec_id"] = "0";
                                dr["type"] = tm.Col47;
                                dr["vch_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr["master_id"] = master_id;
                                dr["IsReceiptNoChange"] = IsReceiptNoChange;
                                if (isedit)
                                {
                                    dr["master_entby"] = model[0].Col45;
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                else
                                {
                                    dr["master_entby"] = userid_mst;
                                    dr["master_entdate"] = currdate;
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                dataTable.Rows.Add(dr);
                            }
                            bool Result = sgen.Update_data(userCode, dataTable, "master_setting", tm.Col46, isedit);
                            if (Result == true)
                            {
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                        }
                        catch (Exception ex)
                        { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
                        break;
                    case "Save Receipt No Settings":
                    case "Update Receipt No Settings":
                        try
                        {
                            var tm = model.FirstOrDefault();
                            string master_id = "";
                            string currdate = sgen.server_datetime(userCode);
                            if (tm.Col29 == "Update Receipt No Settings")
                            {
                                isedit = true;
                                master_id = tm.Col33;
                            }
                            else
                            {
                                isedit = false;
                                master_id = sgen.genNo(userCode, "select max(to_number (master_id)) as max from  master_setting where client_id='" + clientid_mst + "'" +
                              " and client_unit_id='" + unitid_mst + "' and type='REC'", 3, "max");
                            }
                            string IsReceiptNoChange = "";
                            DataTable dataTable = cmd_Fun.GetStructure(userCode, "master_setting");
                            //for (int i = 0; i < model.Count; i++)
                            {
                                IsReceiptNoChange = model[0].Col28;
                                DataRow dr = dataTable.NewRow();
                                dr["rec_id"] = "0";
                                dr["type"] = "REC";
                                dr["vch_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr["master_id"] = master_id;
                                dr["IsReceiptNoChange"] = IsReceiptNoChange;
                                if (isedit)
                                {
                                    dr["master_entby"] = model[0].Col33;
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                else
                                {
                                    dr["master_entby"] = userid_mst;
                                    dr["master_entdate"] = currdate;
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                dataTable.Rows.Add(dr);
                            }
                            bool Result = sgen.Update_data(userCode, dataTable, "master_setting", tm.Col32, isedit);
                            if (Result == true)
                            {
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                        }
                        catch (Exception ex)
                        { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
                        break;
                    case "Save Reg No Settings":
                    case "Update Reg No Settings":
                        try
                        {
                            var tm = model.FirstOrDefault();
                            string currdate = sgen.server_datetime(userCode);
                            string master_id = "";
                            if (tm.Col31 == "Update Reg No Settings")
                            {
                                isedit = true;
                                master_id = tm.Col36;
                            }
                            else
                            {
                                isedit = false;
                                master_id = sgen.genNo(userCode, "select max(to_number (master_id)) as max from  master_setting where client_id='" + clientid_mst + "'" +
                              " and client_unit_id='" + unitid_mst + "' and type='REG'", 3, "max");
                            }
                            DataTable dataTable = cmd_Fun.GetStructure(userCode, "master_setting");
                            string IsRegNoChange = "";
                            //for (int i = 0; i < model.Count; i++)
                            {
                                IsRegNoChange = model[0].Col30;
                                DataRow dr = dataTable.NewRow();
                                dr["rec_id"] = "0";
                                dr["type"] = "REG";
                                dr["vch_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr["master_id"] = master_id;
                                dr["IsRegNoChange"] = IsRegNoChange;
                                if (isedit)
                                {
                                    dr["master_entby"] = model[0].Col37;
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                else
                                {
                                    dr["master_entby"] = userid_mst;
                                    dr["master_entdate"] = currdate;
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                dataTable.Rows.Add(dr);
                            }
                            bool Result = sgen.Update_data(userCode, dataTable, "master_setting", tm.Col35, isedit);
                            if (Result == true)
                            {
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                        }
                        catch (Exception ex)
                        { ViewBag.scripCall += "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
                        break;
                    case "Save Roll No Settings":
                    case "Update Roll No Settings":
                        try
                        {
                            var tm = model.FirstOrDefault();
                            string currdate = sgen.server_datetime(userCode);
                            string master_id = "";
                            if (tm.Col27 == "Update Roll No Settings")
                            {
                                isedit = true;
                                master_id = tm.Col39;
                            }
                            else
                            {
                                isedit = false;
                                master_id = sgen.genNo(userCode, "select max(to_number (master_id)) as max from  master_setting where client_id='" + clientid_mst + "'" +
                              " and client_unit_id='" + unitid_mst + "' and type='ROL'", 3, "max");
                            }
                            DataTable dataTable = cmd_Fun.GetStructure(userCode, "master_setting");
                            string IsAdmission_Wise = "0", IsAlphabetic_Wise = "0", IsSchoolBased = "0", IsClassBased = "0", IsSectionBased = "0", IsRollNoChange = "0", IsRollNoRegWise = "0";
                            //for (int i = 0; i < model.Count; i++)
                            {
                                if (model[0].Col26 == "1")
                                {
                                    IsAdmission_Wise = model[0].Col26;
                                }
                                else if (model[0].Col26 == "0")
                                {
                                    IsAlphabetic_Wise = model[0].Col26;
                                }
                                if (model[0].Col25 == "1")
                                {
                                    IsSchoolBased = "1";
                                }
                                else if (model[0].Col25 == "0")
                                {
                                    IsClassBased = "1";
                                }
                                else if (model[0].Col25 == "2")
                                {
                                    IsSectionBased = "1";
                                }
                                IsRollNoRegWise = model[0].Col23;
                                IsRollNoChange = model[0].Col24;
                                DataRow dr = dataTable.NewRow();
                                dr["rec_id"] = "0";
                                dr["type"] = "ROL";
                                dr["vch_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr["master_id"] = master_id;
                                dr["IsAdmission_Wise"] = IsAdmission_Wise;
                                dr["IsAlphabetic_Wise"] = IsAlphabetic_Wise;
                                dr["IsSchoolBased"] = IsSchoolBased;
                                dr["IsClassBased"] = IsClassBased;
                                dr["IsSectionBased"] = IsSectionBased;
                                dr["IsRollNoRegWise"] = IsRollNoRegWise;
                                dr["IsRollNoChange"] = IsRollNoChange;
                                if (isedit)
                                {
                                    dr["master_entby"] = model[0].Col40;
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                else
                                {
                                    dr["master_entby"] = userid_mst;
                                    dr["master_entdate"] = currdate;
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                dataTable.Rows.Add(dr);
                            }
                            bool Result = sgen.Update_data(userCode, dataTable, "master_setting", tm.Col38, isedit);
                            if (Result == true)
                            {
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                        }
                        catch (Exception ex)
                        { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 0);"; }
                        break;
                }
                TempData[MyGuid + "_Tlist1"] = model.FirstOrDefault().TList1;
                TempData[MyGuid + "_TList2"] = model.FirstOrDefault().TList2;
                TempData[MyGuid + "_TList3"] = model.FirstOrDefault().TList3;
                TempData[MyGuid + "_TList4"] = model.FirstOrDefault().TList4;
                TempData[MyGuid + "_TList5"] = model.FirstOrDefault().TList5;
                TempData[MyGuid + "_TList6"] = model.FirstOrDefault().TList6;
                TempData[MyGuid + "_TList7"] = model.FirstOrDefault().TList7;
                TempData[MyGuid + "_TList8"] = model.FirstOrDefault().TList8;
                foreach (var tm in model)
                {
                    tm.TList1 = mod11;
                    tm.TList2 = mod12;
                    tm.TList3 = mod13;
                    tm.TList4 = mod14;
                    tm.TList5 = mod15;
                    tm.TList6 = mod16;
                    tm.TList7 = mod17;
                    tm.TList8 = mod18;
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region examname
        public ActionResult ExamName()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            //Tmodelmain tm1 = new Tmodelmain();
            model = getload(model);
            model[0].Col9 = "EXAM NAME";
            model[0].Col12 = "EEM";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col10 = "master_setting";
            //model[0].Col13 = "Save";
            sgen.SetSession(MyGuid, "TR_MID", mid_mst.Trim());
            sgen.SetSession(MyGuid, "TYPE_MST", model[0].Col12.Trim());
            sgen.SetSession(MyGuid, "COND_MST", model[0].Col11.Trim());
            sgen.SetSession(MyGuid, "TBL_MST", model[0].Col10.Trim());
            //model.Add(tm1);
            return View(model);
        }
        public List<Tmodelmain> new_examName(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + " ";
            vch_num = sgen.genNo(userCode, mq, 3, "auto_genid");
            model[0].Col17 = vch_num;
            model[0].Col19 = "Y";
            return model;
        }
        [HttpPost]
        public ActionResult ExamName(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                // Master_Type = "Education Exam Master";
                if (command == "New")
                {
                    model = new_examName(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    isprmoted = "N";
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    status = tmodel.Col19.Trim();
                    if (status == "N") { model[0].Col12 = "DDEEM"; }
                    if (status == "Y") { model[0].Col12 = "EEM"; }
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        isedit = true;
                        vch_num = tmodel.Col16.Trim();
                        id = tmodel.Col17.Trim();
                    }
                    else
                    {

                        mq = sgen.seekval(userCode, "Select master_name as master_name from " + model[0].Col10 + " where type in ('EEM','DDEEM') and upper(master_name)='" + tmodel.Col18.Trim().ToUpper() + "' " + model[0].Col11 + ""
                          , "master_name");
                        if (!mq.Trim().Equals("0"))
                        {
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall = "showmsgJS(1, 'You already saved Exam Name', 2);";
                            goto END;
                        }
                        else
                        {
                            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type in ('EEM','DDEEM') " + model[0].Col11 + "  ";
                            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                            string mid = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type in ('EEM','DDEEM') " + model[0].Col11 + "";
                            id = sgen.genNo(userCode, mid, 3, "auto_genid");
                            isedit = false;
                        }
                    }

                    if (isprmoted == "Y")
                    {
                        mq = sgen.seekval(userCode, "select classid from " + model[0].Col10 + " where  type in ('EEM','DDEEM') and classid='Y' " + model[0].Col11 + " " + mq1 + " ", "classid");
                        if (!mq.Trim().Equals("0"))
                        {
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall = "showmsgJS(1, 'You already checked for Exam Name', 2);";
                            goto END;
                        }
                    }
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12.Trim();
                    dr["master_id"] = id.Trim();
                    dr["master_name"] = model[0].Col18;
                    dr["master_type"] = Master_Type.Trim();
                    dr["status"] = status.Trim();
                    dr["classid"] = isprmoted.Trim();
                    #endregion
                    if (isedit)
                    {
                        dr["client_id"] = model[0].Col1.Trim();
                        dr["client_unit_id"] = model[0].Col2.Trim();
                        dr["vch_num"] = model[0].Col16;
                        dr["rec_id"] = model[0].Col7;
                        dr["master_entby"] = model[0].Col3;
                        dr["master_entdate"] = model[0].Col4;
                        dr["master_editby"] = userid_mst;
                        dr["master_editdate"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["master_entby"] = userid_mst;
                        dr["master_entdate"] = currdate;
                        dr["master_editby"] = "-";
                        dr["master_editdate"] = currdate;
                    }
                    dtstr.Rows.Add(dr);
                    bool Result = sgen.Update_data(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);

                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        tmodel.Col17 = "";
                        tmodel.Col18 = "";
                        tmodel.Col20 = "";
                        tmodel.Col21 = "";
                        tmodel.Col13 = "Save";
                        tmodel.Col100 = "Save & New";
                        tmodel.Col121 = "S";
                        tmodel.Col122 = "<u>S</u>ave";
                        tmodel.Col123 = "Save & Ne<u>w</u>";
                        tmodel.Col9 = tmodel.Col9;
                        tmodel.Col19 = "";
                        model.Add(tmodel);
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_examName(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;


                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region leaveapplication
        public ActionResult leaveapplication()
        {
            FillMst();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "LEAVE APPLY";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            //model[0].Col13 = "Save";
            model[0].Col30 = "";
            model[0].Col34 = "Pending";
            if (mid_mst.Trim().Equals("7021.7"))
            {
                model[0].Col12 = "TLA";
                model[0].Col26 = "User Id";
                model[0].Col27 = "Teacher Name";
                model[0].Col28 = "Department";
                model[0].Col29 = "Designation";
            }
            else if ((mid_mst.Trim().Equals("8006.1")) || (mid_mst.Trim().Equals("330012.1")))
            {
                model[0].Col12 = "BLA";
                model[0].Col26 = "Employee Id";
                model[0].Col27 = "Employee Name";
                model[0].Col28 = "Department";
                model[0].Col29 = "Designation";
                if (mid_mst.Trim().Equals("330012.1"))
                {
                    model[0].Col34 = "Approved";
                }
            }
            else if (mid_mst.Trim().Equals("13000.11"))
            {
                model[0].Col12 = "ELA";
                model[0].Col26 = "Reg No.";
                model[0].Col27 = "Student Name";
                model[0].Col28 = "Roll No.";
                model[0].Col29 = "Class & Section";

            }
            else
            {
                model[0].Col12 = "ELA";
                model[0].Col26 = "Reg No.";
                model[0].Col27 = "Student Name";
                model[0].Col28 = "Roll No.";
                model[0].Col29 = "Class & Section";
            }

            sgen.SetSession(MyGuid, "RTR_MID", mid_mst.Trim());
            sgen.SetSession(MyGuid, "RTYPE_MST", model[0].Col12.Trim());
            sgen.SetSession(MyGuid, "RCOND_MST", model[0].Col11.Trim());
            sgen.SetSession(MyGuid, "RTBL_MST", model[0].Col10.Trim());
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod1;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod1;
            model[0].SelectedItems3 = new string[] { "" };
            model[0].TList4 = mod1;
            model[0].SelectedItems4 = new string[] { "" };
            //model.Add(tmodel);
            return View(model);
        }
        public List<Tmodelmain> new_leaveapplication(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + " ";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            //leavefrom
            #region
            List<SelectListItem> mod1 = new List<SelectListItem>();

            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            mod1.Add(new SelectListItem { Text = "First Half", Value = "First Half" });
            mod1.Add(new SelectListItem { Text = "Second Half", Value = "Second Half" });
            mod1.Add(new SelectListItem { Text = "Full Day", Value = "Full Day" });



            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod1;

            mod3 = cmd_Fun.leavereas(userCode, unitid_mst);
            TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;

            DataTable dtl = sgen.getdata(userCode, " select vch_num,col3 leave_type from kc_tab where type='KLV'" +
                " and client_unit_id='" + unitid_mst + "' union all select '999999' vch_num, 'Short Leave' leave_type from dual ");
            mod4 = sgen.dt_to_selectlist(dtl);

            TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
            #endregion
            model[0].Col3 = vch_num;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            if (model[0].Col12 == "BLA")
            {
                if (model[0].Col14.Equals("8006.1"))
                {
                    sgen.SetSession(MyGuid, "SSEEKVAL", cond);
                    model = CallbackFun("EMPDETAIL", "Y", "leaveapplication", "Hr", model);
                }
            }

            return model;
        }
        [HttpPost]
        public ActionResult leaveapplication(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                List<SelectListItem> mod3 = new List<SelectListItem>();
                List<SelectListItem> mod4 = new List<SelectListItem>();
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
                TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];

                if (command == "New")
                {
                    model = new_leaveapplication(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string appdays = "", dayscount = "", dayscount1 = "", rbvalue = "", dflag1 = "-", dflag2 = "-";
                    rbvalue = tmodel.Col23.Trim();
                    type_desc = "Leave Apply";
                    if (tmodel.SelectedItems1 == null) tmodel.SelectedItems1 = new string[] { "" };
                    if (tmodel.SelectedItems2 == null) tmodel.SelectedItems2 = new string[] { "" };
                    if (tmodel.SelectedItems3 == null) tmodel.SelectedItems3 = new string[] { "" };
                    if (rbvalue == "Single")
                    {
                        appdays = rbvalue;
                        tmodel.Col17 = tmodel.Col16;
                        tmodel.SelectedItems2 = tmodel.SelectedItems1;
                        if (tmodel.SelectedItems1.FirstOrDefault().ToString().Trim().Equals("First Half")) { dayscount = "0.5"; dayscount1 = "0.5"; dflag1 = "F"; }
                        else if (tmodel.SelectedItems1.FirstOrDefault().ToString().Trim().Equals("Second Half")) { dayscount = "0.5"; dayscount1 = "0.5"; dflag1 = "S"; }
                        else
                        {
                            dayscount1 = "1";
                            dayscount = "1";
                            dflag1 = "L";
                            dflag2 = "L";
                        }
                    }
                    if (rbvalue == "Multiple")
                    {
                        appdays = rbvalue;
                        if (tmodel.SelectedItems1.FirstOrDefault().ToString().Trim().Equals("First Half")) { dayscount = "0.5"; dflag1 = "F"; }
                        else if (tmodel.SelectedItems1.FirstOrDefault().ToString().Trim().Equals("Second Half")) { dayscount1 = "0.5"; dflag1 = "S"; }
                        else
                        {
                            dayscount = "1";
                            dflag1 = "L";
                        }
                        if (tmodel.SelectedItems2.FirstOrDefault().ToString().Trim().Equals("First Half")) { dayscount = "0.5"; dflag2 = "F"; }
                        else if (tmodel.SelectedItems2.FirstOrDefault().ToString().Trim().Equals("Second Half")) { dayscount1 = "0.5"; dflag2 = "S"; }
                        else { dayscount1 = "1"; dflag2 = "L"; }
                    }
                    DataTable dtleave = new DataTable();
                    //dtleave = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtleave = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + tmodel.Col3.Trim() + "'";
                        isedit = true;
                        vch_num = tmodel.Col3.Trim();
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        isedit = false;
                    }
                    DataRow dr = dtleave.NewRow();
                    dr["vch_num"] = vch_num.Trim();
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["type_desc"] = type_desc.Trim();
                    dr["col1"] = tmodel.Col19.Trim();
                    dr["col2"] = appdays.Trim();
                    dr["col3"] = tmodel.SelectedItems1.FirstOrDefault().ToString().Trim();//first half
                    dr["col4"] = tmodel.SelectedItems2.FirstOrDefault().ToString().Trim();//second half
                    dr["col5"] = tmodel.SelectedItems3.FirstOrDefault().ToString().Trim();
                    dr["col6"] = tmodel.Col18;
                    // dr["col7"] = "Pending";
                    dr["col7"] = model[0].Col34;
                    dr["r_no"] = dayscount; //first half
                    dr["ref_code"] = dayscount1; //second half
                    dr["date1"] = sgen.Make_date_S(tmodel.Col16);// from date
                    dr["date2"] = sgen.Make_date_S(tmodel.Col17);// to date
                    dr["col8"] = tmodel.Col20.Trim();//dept
                    dr["col9"] = tmodel.Col21.Trim();//desi
                    dr["col10"] = tmodel.Col18.Trim();//remark

                    if (model[0].Col12.Trim() == "ELA")//
                    {
                        dr["col11"] = tmodel.Col24.Trim();
                    }
                    else
                    {
                        dr["col11"] = tmodel.Col22.Trim();
                    }
                    dr["col12"] = dflag1;
                    dr["col13"] = dflag2;

                    dr["col14"] = tmodel.Col31;//From time
                    dr["col15"] = tmodel.Col32;//To time
                    dr["col16"] = tmodel.SelectedItems4.FirstOrDefault();//leave type
                    if (isedit)
                    {
                        dr["vch_num"] = model[0].Col3;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["created_date"] = currdate;
                        dr["ent_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                    }
                    dr["rec_id"] = 0;
                    dr["edit_by"] = userid_mst;
                    dr["edit_date"] = currdate;
                    dtleave.Rows.Add(dr);
                    bool Result = sgen.Update_data_fast1(userCode, dtleave, model[0].Col10, tmodel.Col6, isedit);

                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        mod1 = new List<SelectListItem>();
                        model.Add(new Tmodelmain
                        {
                            Col11 = "",
                            //Col14=tmodel.Col14,
                            Col26 = tmodel.Col26,
                            Col27 = tmodel.Col27,
                            Col28 = tmodel.Col28,
                            Col29 = tmodel.Col29,
                            Col12 = tmodel.Col12,
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col34 = tmodel.Col34,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col9 = "LEAVE APPLY",
                            Col10 = "enx_tab",
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod1,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod1,
                            SelectedItems3 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_leaveapplication(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion 
        #region class_master
        public ActionResult class_master()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "SCHOOL CLASSES";
            model[0].Col12 = "EAC";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col10 = "add_class";
            sgen.SetSession(MyGuid, "EAC_MID", mid_mst.Trim());
            sgen.SetSession(MyGuid, "EAC_TYPE_MST", model[0].Col12.Trim());
            sgen.SetSession(MyGuid, "EAC_COND_MST", model[0].Col11.Trim());
            sgen.SetSession(MyGuid, "EAC_TBL_MST", model[0].Col10.Trim());
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            //model.Add(tm1);
            return View(model);
        }
        public List<Tmodelmain> new_class_master(List<Tmodelmain> model)
        {

            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            #region bindsubject
            DataTable dt = new DataTable();
            dt = sgen.getdata(userCode, "select master_name, master_id from master_setting where type='ESW' and client_unit_id='" + unitid_mst + "'");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            #endregion

            #region educategory
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClasscategory(userCode, unitid_mst);

            #endregion
            #region fillsequence
            dt = sgen.getdata(userCode, "select nvl( max((sequence)+1),1) as sequence from add_class where client_unit_id='" + unitid_mst + "' and type in ('EAC','DDEAC') and  type_desc='Education Add Class'");
            if (dt.Rows.Count > 0)
            {
                model[0].Col24 = dt.Rows[0]["sequence"].ToString();
            }
            #endregion
            //model[0].TList1 = mod1;
            //model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems1 = new string[] { "" };
            model[0].Col25 = "Y";
            model[0].Chk7 = true;
            return model;
        }
        [HttpPost]
        public ActionResult class_master(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                Master_Type = "Education Add Class";
                string inactive_date = "";
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (command == "New")
                {

                    model = new_class_master(model);

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "N", "class_master", "Education", model);

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";

                    if (btnval.ToUpper() == "EDIT")
                    {
                        model[0].Col13 = "Update";
                        model[0].Col100 = "Update & New";
                        model[0].Col121 = "U";
                        model[0].Col122 = "<u>U</u>pdate";
                        model[0].Col123 = "Update & Ne<u>w</u>";

                    }

                    else if (btnval.ToUpper() == "VIEW")
                    {
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        model[0].Col13 = "Save";
                        model[0].Col100 = "Save & New";
                        model[0].Col121 = "S";
                        model[0].Col122 = "<u>S</u>ave";
                        model[0].Col123 = "Save & Ne<u>w</u>";
                        ViewBag.scripCall = "disableForm();";

                    }

                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    string found = "";
                    int IsMonday = 0, IsTuesday = 0, IsWednesday = 0, IsThursday = 0, IsFriday = 0, IsSaturday = 0, IsSunday = 0;

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    ent_date = currdate;
                    if (model[0].Col25 == "Y")
                    {
                        status = "Y";
                        model[0].Col12 = "EAC";
                        inactive_date = currdate;
                    }
                    else
                    {
                        status = "N";
                        model[0].Col12 = "DDEAC";
                        inactive_date = currdate;
                    }
                    if (model[0].Chk1 == true) { IsMonday = 1; }
                    if (model[0].Chk2 == true) { IsTuesday = 1; }
                    if (model[0].Chk3 == true) { IsWednesday = 1; }
                    if (model[0].Chk4 == true) { IsThursday = 1; }
                    if (model[0].Chk5 == true) { IsFriday = 1; }
                    if (model[0].Chk6 == true) { IsSaturday = 1; }
                    if (model[0].Chk7 == true) { IsSunday = 1; }
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    string cond = "";
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        cond = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        isedit = true;
                        vch_num = tmodel.Col16.Trim();
                        id = tmodel.Col26.Trim();
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(add_class_id)) as auto_genid from " + model[0].Col10 + " where  type in ('EAC','DDEAC' ) " + model[0].Col11 + "";
                        id = sgen.genNo(userCode, mq, 3, "auto_genid");
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type in ('EAC','DDEAC' ) " + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    found = sgen.getstring(userCode, "select class from " + model[0].Col10 + " where upper(class)= upper('" + model[0].Col23 + "') " + model[0].Col11 + "" +
                           " and type in ('EAC','DDEAC' ) and type_desc='" + Master_Type + "'  " + cond + " ");
                    if (found != "")
                    {
                        //ViewBag.scripCall = "showmsgJS(3, 'Already Exists', 1);disableForm();";
                        ViewBag.scripCall = "showmsgJS(1, 'Data Already Exists', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                    }
                    //  validation
                    if (model[0].Col23 == "")
                    {
                        model[0].TList1 = mod1;
                        model[0].SelectedItems1 = new string[] { "" };
                        model[0].TList2 = mod2;
                        model[0].SelectedItems2 = new string[] { "" };
                        ViewBag.scripCall = "showmsgJS(1, 'Please Enter Class', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                        //text_class.Focus();
                    }
                    //if ((model[0].Chk1 = false) && (model[0].Chk2 = false) && (model[0].Chk3 = false) && (model[0].Chk4 = false) && (model[0].Chk5 = false) && (model[0].Chk6 = false) && (model[0].Chk7 = false))
                    if (model[0].Chk1 == false && model[0].Chk2 == false && model[0].Chk3 == false && model[0].Chk4 == false && model[0].Chk5 == false && model[0].Chk6 == false && model[0].Chk7 == false)
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Please Select Atleast One Weekly Off', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        model[0].TList1 = mod1;
                        model[0].SelectedItems1 = new string[] { "" };
                        model[0].TList2 = mod2;
                        model[0].SelectedItems2 = new string[] { "" };
                        return View(model);
                    }
                    if (model[0].SelectedItems1.FirstOrDefault() != "" && model[0].SelectedItems1.ToList().Count < 2)
                    {
                        model[0].TList1 = mod1;
                        model[0].SelectedItems1 = new string[] { "" };
                        model[0].TList2 = mod2;
                        model[0].SelectedItems2 = new string[] { "" };
                        //ViewBag.scripCall = "showmsgJS(1, 'Please Select Minimum 2 Optional Subjects',2);disableForm();";
                        ViewBag.scripCall = "showmsgJS(1, 'Please Select Minimum 2 Optional Subjects',2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    #region dtstr class_master
                    DataRow dr = dtstr.NewRow();
                    dr["rec_id"] = "0";
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["type_desc"] = Master_Type;
                    dr["add_class_id"] = id;
                    dr["class"] = model[0].Col23.Trim();
                    dr["IsMonday"] = IsMonday;
                    dr["IsTuesday"] = IsTuesday;
                    dr["IsWednesday"] = IsWednesday;
                    dr["IsThursday"] = IsThursday;
                    dr["IsFriday"] = IsFriday;
                    dr["IsSaturday"] = IsSaturday;
                    dr["IsSunday"] = IsSunday;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    dr["CategoryType"] = tmodel.SelectedItems2.FirstOrDefault().ToString().Trim();
                    dr["Sequence"] = model[0].Col24.Trim();
                    dr["Status"] = status;
                    dr["Inactive_date"] = sgen.Savedate(inactive_date, false);
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                        dr["rec_id"] = model[0].Col7;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                    }
                    dtstr.Rows.Add(dr);
                    #endregion
                    bool Result = sgen.Update_data(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        //if (tmodel.Col17 != null)
                        {
                            string[] opsub = string.Join(",", model[0].SelectedItems1).Split(',');
                            //dtstr = sgen.getdata(userCode, "select  * from master_setting where 1=2");
                            dtstr = cmd_Fun.GetStructure(userCode, "master_setting");
                            for (int i = 0; i < opsub.Length; i++)
                            {
                                dr = dtstr.NewRow();
                                if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                                {
                                    isedit = true;
                                    id = tmodel.Col26.Trim();
                                    if (tmodel.Col27 == null)
                                    {
                                        mq = "select max(to_number(master_id)) as auto_genid from master_setting where  client_unit_id='" + unitid_mst + "' and type='EOS' and master_type='opt_subject' ";
                                        master_id = sgen.genNo(userCode, mq, 3, "auto_genid");
                                    }
                                    else
                                    {
                                        master_id = tmodel.Col27.Trim();
                                    }
                                }
                                else
                                {
                                    mq = "select max(to_number(master_id)) as auto_genid from master_setting where  client_unit_id='" + unitid_mst + "' and type='EOS' and master_type='opt_subject' ";
                                    master_id = sgen.genNo(userCode, mq, 3, "auto_genid");
                                }
                                dr["rec_id"] = "0";
                                //dr["vch_num"] = vch_num;
                                dr["vch_date"] = currdate;
                                dr["type"] = "EOS";//Education Optional Subject
                                dr["Master_type"] = "opt_subject";
                                dr["Master_Name"] = opsub[i].Trim();
                                dr["classid"] = id;
                                dr["master_id"] = master_id;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                if (isedit)
                                {
                                    if (model[0].Col21 == null)
                                    {
                                        dr["master_entby"] = userid_mst;
                                        dr["master_entdate"] = currdate;
                                    }
                                    else
                                    {
                                        dr["master_entby"] = model[0].Col21;
                                        dr["master_entdate"] = model[0].Col22;
                                        dr["client_id"] = model[0].Col19;
                                        dr["client_unit_id"] = model[0].Col20;
                                    }
                                    dr["master_editby"] = userid_mst;
                                    dr["master_editdate"] = currdate;
                                }
                                else
                                {
                                    dr["master_editby"] = "-";
                                    dr["master_editdate"] = currdate;
                                    dr["master_entby"] = userid_mst;
                                    dr["master_entdate"] = currdate;
                                }
                                dtstr.Rows.Add(dr);
                            }
                            if (dtstr.Rows.Count > 0)
                            {
                                string new_tab = "master_setting";
                                if (sgen.GetSession(MyGuid, "EDMODE").ToString() == "")
                                {
                                    isedit = false;
                                }
                                if (tmodel.Col17 == null) isedit = false;
                                Result = sgen.Update_data(userCode, dtstr, new_tab, tmodel.Col17, isedit);
                            }
                        }
                        if (Result == true)
                        {
                            //sgen.SetSession(MyGuid, "BindClass", null);
                            //sgen.SetSession(MyGuid, "BindClass_Actual", null);

                            List<string> apps = new List<string>();
                            foreach (var key in HttpContext.Application.Keys)
                            {
                                if (key.ToString().ToUpper().Contains("_U_" + userCode + ""))
                                {
                                    apps.Add(key.ToString());
                                }
                            }
                            foreach (var ap in apps)
                            {
                                HttpContext.Application[ap.ToString()] = null;
                            }

                            model = new List<Tmodelmain>();
                            model.Add(new Tmodelmain
                            {
                                Col10 = tmodel.Col10,
                                Col14 = tmodel.Col14,
                                Col15 = tmodel.Col15,
                                Col11 = tmodel.Col11,
                                Col12 = tmodel.Col12,
                                Col13 = "Save",
                                Col100 = "Save & New",
                                Col121 = "S",
                                Col122 = "<u>S</u>ave",
                                Col123 = "Save & Ne<u>w</u>",
                                TList1 = mod1,
                                SelectedItems1 = new string[] { "" },
                                TList2 = mod2,
                                SelectedItems2 = new string[] { "" },
                                Col9 = "SCHOOL CLASSES",
                            });
                            if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                            {
                                ViewBag.vnew = "";
                                ViewBag.vedit = "";
                                ViewBag.vsave = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                            }
                            else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                            {
                                try
                                {
                                    model = new_class_master(model);
                                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                                }
                                catch (Exception ex) { }
                            }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;

                }
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region holiday_master
        public ActionResult holiday_master()
        {
            FillMst();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col1 = "";
            model[0].Col17 = "";
            model[0].TList1 = mod1;
            model[0].Col10 = "holiday_master";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "STD";
            model[0].Col9 = "HOLIDAY MASTER";
            model[0].Col13 = "Save";
            model[0].SelectedItems1 = new string[] { "" };
            //model.Add(tm);
            return View(model);
        }
        public List<Tmodelmain> new_holiday_master(List<Tmodelmain> model)
        {
            List<SelectListItem> mod1 = new List<SelectListItem>();

            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            #region bindclass
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);

            #endregion

            model[0].SelectedItems1 = new string[] { "" };
            model[0].Col18 = sgen.server_datetime_local(userCode);
            model[0].Col19 = sgen.server_datetime_local(userCode);
            model[0].Chk2 = true;
            return model;
        }
        [HttpPost]
        public ActionResult holiday_master(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                Master_Type = "Education Add Class";
                string inactive_date = "";
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                if (command == "New")
                {
                    model = new_holiday_master(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    DataTable dtfound = new DataTable();
                    string holiday_id = "", found = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string vch_date = sgen.server_datetime_local(userCode);
                    vch_date = sgen.Savedate(vch_date, true);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_date = model[0].Col21;
                        holiday_id = model[0].Col20;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(holiday_id)) as auto_genid from " + model[0].Col10 + "  where type='" + model[0].Col12 + "' " + model[0].Col11 + "";
                        holiday_id = sgen.genNo(userCode, mq, 3, "auto_genid");
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + "  where type='" + model[0].Col12 + "' " + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        // reena 1 and 2 line ok
                        dtfound = sgen.getdata(userCode, "select holiday_id from holiday_master  where Holiday_frm = to_date('" + model[0].Col18 + "','" + sgen.Getsqldateformat() + "')" +
                            " and Holiday_to = to_date('" + model[0].Col19 + "','" + sgen.Getsqldateformat() + "') " + model[0].Col11 + "");
                        Isvalid = true;
                        if (dtfound.Rows.Count > 0)
                        {
                            Isvalid = false;
                            ViewBag.scripCall = "showmsgJS(1, 'Already Exists', 2);";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            goto END;
                        }
                    }
                    string[] selclass = string.Join(",", model[0].SelectedItems1).Split(',');
                    //dtfound = sgen.getdata(userCode, "select  * from " + model[0].Col10 + " where 1=2");
                    dtfound = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    for (int i = 0; i < selclass.Length; i++)
                    {
                        string mq = "";
                        DataTable dt = new DataTable();

                        mq = "select holiday_name,holiday_frm,holiday_to,IsStudent_Holiday,IsTeacher_Holiday from " + model[0].Col10 + " where " +
                            " holiday_frm= to_date('" + model[0].Col18 + "','" + sgen.Getsqldateformat() + "') and holiday_to= to_date('" + model[0].Col19 + "','" + sgen.Getsqldateformat() + "') and class='" + selclass[i].Trim() + "' and " + model[0].Col11 + "";
                        dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Holiday Already Exist for this class', 1);";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            goto END;
                        }
                        DataRow dr = dtfound.NewRow();
                        dr["vch_num"] = vch_num;
                        dr["vch_date"] = vch_date;
                        dr["type"] = model[0].Col12.Trim();
                        dr["Holiday_Id"] = holiday_id;
                        dr["Holiday_name"] = model[0].Col17.Trim();
                        dr["Holiday_frm"] = sgen.Make_date_S(model[0].Col18.Trim());
                        dr["Holiday_to"] = sgen.Make_date_S(model[0].Col19.Trim());
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["IsStudent_Holiday"] = "1";
                        dr["academic_year_id"] = Ac_Year_id;
                        dr["class"] = selclass[i].Trim();
                        if (isedit)
                        {

                            dr["ent_by"] = model[0].Col3.Trim();
                            dr["ent_date"] = model[0].Col4.Trim();
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                            dr["client_id"] = model[0].Col1;
                            dr["client_unit_id"] = model[0].Col2;
                            dr["rec_id"] = model[0].Col7;

                        }
                        else
                        {

                            dr["rec_id"] = "0";
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;

                        }
                        dtfound.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dtfound, model[0].Col10.Trim(), tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col17 = "",
                            Col18 = "",
                            Col19 = "",
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            Col9 = "HOLIDAY MASTER",
                            Col10 = "Holiday_master",
                            Col12 = "STD"
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_holiday_master(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Exam Room Master
        public ActionResult ER_Master()
        {
            FillMst();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col1 = "";
            model[0].Col9 = "EXAM ROOM MASTER";
            return View(model);
        }
        public List<Tmodelmain> new_ER_Master(List<Tmodelmain> model)
        {
            tab_name = "Master_Setting";
            type = "ERM";
            type_desc = "Exam Room Master";
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type in('ERM','DDERM')", 6, "max");
            var tm = model.FirstOrDefault();
            model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                Col9 = tm.Col9,
                Col13 = tm.Col13,
                Col14 = tm.Col14,
                Col15 = tm.Col15,
                Col16 = "",
                Col19 = "Y",
                Col3 = vch_num,
                Col100 = "Save & New",
                Col121 = "S",
                Col122 = "<u>S</u>ave",
                Col123 = "Save & Ne<u>w</u>",
            });
            return model;
        }
        [HttpPost]
        public ActionResult ER_Master(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                tab_name = "Master_Setting";
                type = "ERM";
                type_desc = "Exam Room Master";
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                if (command == "New")
                {
                    model = new_ER_Master(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string vch_num = "", master_id = "";
                    string cond = "";
                    status = tmodel.Col19.Trim();
                    if (status == "Y") { type = "ERM"; }
                    if (status == "N") { type = "DDERM"; }
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col3;
                        master_id = model[0].Col20;
                        cond = "and vch_num != '" + vch_num + "'";
                    }
                    else
                    {
                        cond = "";
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type in('ERM','DDERM')", 6, "max");
                        master_id = sgen.genNo(userCode, "select max(to_number (master_id)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type in('ERM','DDERM') ", 3, "max");
                    }
                    mq = sgen.seekval(userCode, "select master_name   from " + tab_name + " where upper(master_name)=upper('" + model[0].Col16 + "') and classid='" + model[0].Col17 + "'" +
                        " and  type in('ERM','DDERM')  and " +
                            "  client_unit_id='" + unitid_mst + "' " + cond + "  ", "master_name");
                    if (!mq.Trim().Equals("0"))
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'You already Enter Same Room Name on Floor  " + model[0].Col17 + "', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                    }
                    if (vch_num == "0")
                    {
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select  * from " + tab_name + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, tab_name);
                    DataRow dr = dataTable.NewRow();
                    dr["rec_id"] = "0";
                    dr["type"] = type;
                    dr["vch_date"] = currdate;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    dr["master_id"] = master_id;
                    dr["master_name"] = model[0].Col16;
                    dr["classid"] = model[0].Col17;
                    dr["sectionid"] = model[0].Col18;
                    dr["status"] = status.Trim();
                    dr["vch_num"] = vch_num.Trim();
                    if (isedit)
                    {
                        dr["master_entby"] = model[0].Col1;
                        dr["master_entdate"] = model[0].Col2;
                        dr["master_editby"] = userid_mst;
                        dr["master_editdate"] = currdate;
                    }
                    else
                    {
                        dr["master_entby"] = userid_mst;
                        dr["master_entdate"] = currdate;
                        dr["master_editby"] = "-";
                        dr["master_editdate"] = currdate;
                    }
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data(userCode, dataTable, tab_name, tmodel.Col6, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col16 = "",
                            Col17 = "",
                            Col18 = "",
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col9 = "EXAM ROOM MASTER",
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_ER_Master(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Teacher Holiday Master
        public ActionResult teac_hm()
        {
            FillMst();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].Col9 = "TEACHER HOLIDAY MASTER";
            return View(model);
        }
        public List<Tmodelmain> new_teac_hm(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            var tm = model.FirstOrDefault();
            model = new List<Tmodelmain>();
            model.Add(new Tmodelmain
            {
                Col9 = tm.Col9,
                Col13 = tm.Col13,
                Col100 = tm.Col100,
                Col121 = tm.Col121,
                Col122 = tm.Col122,
                Col123 = tm.Col123,
                Col14 = tm.Col14,
                Col15 = tm.Col15,
                TList1 = tm.TList1,
                Col16 = sgen.server_datetime_local(userCode),
                Col17 = sgen.server_datetime_local(userCode),
                SelectedItems1 = new string[] { "" },
            });
            #region Department
            List<SelectListItem> mod1 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
            #endregion
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;

            return model;
        }
        [HttpPost]
        public ActionResult teac_hm(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                tab_name = "Holiday_master";
                type = "TEA";
                type_desc = "";
                List<SelectListItem> mod11 = new List<SelectListItem>();
                mod11 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod11;

                if (command == "New")
                {
                    model = new_teac_hm(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string vch_num = "", master_id = "", ac_id = ""; ;
                    string holiday_id = "", cond = "";
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col5;
                    }
                    else
                    {
                        cond = "";
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                        holiday_id = sgen.genNo(userCode, "select max(to_number (holiday_id)) as max from " + tab_name + " where type='" + type + "'   " +
                          "and  client_unit_id='" + unitid_mst + "'", 3, "max");
                    }
                    //DataTable dataTable = sgen.getdata(userCode, "select  * from " + tab_name + " where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, tab_name);
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = type;
                        dr["vch_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["vch_num"] = vch_num.Trim();
                        dr["academic_year_id"] = Ac_Year_id;
                        dr["Holiday_Id"] = holiday_id;
                        dr["Holiday_name"] = model[0].Col23.Trim();
                        dr["Holiday_frm"] = sgen.Savedate(model[i].Col21.Trim(), true);
                        dr["Holiday_to"] = sgen.Savedate(model[i].Col22.Trim(), true);
                        dr["IsStudent_Holiday"] = false;
                        dr["IsTeacher_Holiday"] = true;
                        dr["academic_year_id"] = Ac_Year_id;
                        dr["teacher_id"] = model[i].Col18.Trim();
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, tab_name, tmodel.Col8, isedit);
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        List<SelectListItem> mod1 = new List<SelectListItem>();
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col13 = "Save",
                            Col9 = "TEACHER HOLIDAY MASTER",
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                        }
                            );
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_teac_hm(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    //ViewBag.scripCall = "enableForm();";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    string Dept = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Value.ToString();
                    DataTable dt = sgen.getdata(userCode, "SELECT a.first_name||' '||Replace(a.MIDDLE_NAME,'0','')||" +
                        "' '||Replace(a.last_name,'0','') AS Teacher_Name,a.vch_num rec_id,b.master_name as Desig FROM user_details a inner join master_setting b on a.designation=b.master_id and b.type='MDG'" +
                     " where a.Type='CPR'  and a.client_unit_id='" + unitid_mst + "' and a.status='active' and a.department='" + Dept + "'");
                    var tm = model.FirstOrDefault();
                    string att_status_F = "", att_status_S = "";
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        //ViewBag.scripCall = "enableForm();$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in dt.Rows)
                        {
                            rpt_model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = tm.Col16,
                                Col17 = tm.Col17,
                                Col18 = dr["rec_id"].ToString(),
                                Col19 = dr["Teacher_Name"].ToString(),
                                Col20 = dr["Desig"].ToString(),
                                Col21 = tm.Col16,
                                Col22 = tm.Col17,
                                Col23 = tm.Col23,
                                TList1 = tm.TList1,
                                SelectedItems1 = tm.SelectedItems1,
                            });
                        }
                        model = rpt_model;
                    }
                    else
                    {
                        model = new List<Tmodelmain>();
                        tm.Col16 = "";
                        tm.Col17 = "";
                        tm.Col18 = "";
                        tm.Col19 = "";
                        model.Add(tm);
                    }
                END:;
                }
                else if (command == "Department")
                {

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    var tmmm = model.FirstOrDefault();
                    model = new List<Tmodelmain>();
                    tmmm.Col18 = "";
                    tmmm.Col19 = "";
                    tmmm.Col20 = "";
                    tmmm.Col21 = "";
                    tmmm.Col22 = "";
                    model.Add(tmmm);

                }
                TempData[MyGuid + "_Tlist1"] = model.FirstOrDefault().TList1;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion                
        #region Expense Details
        public ActionResult expense_details()
        {

            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model = getload(model);

            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].Col9 = "EXPENSE DETAIL";
            model[0].Col1 = clientid_mst;
            model[0].Col2 = unitid_mst;
            model[0].Col10 = "enx_tab2 ";
            model[0].Col12 = "EXP";

            return View(model);
        }
        [HttpPost]
        public ActionResult expense_details(List<Tmodelmain> model, string command, HttpPostedFileBase upd1)
        {
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                if (command == "New")
                {

                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    var tm = model.FirstOrDefault();
                    #region Type Of Expense
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.exptype(userCode, unitid_mst);

                    #endregion
                    #region mode of  payment
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = cmd_Fun.Modeofpayment(userCode, unitid_mst);

                    #endregion

                    model[0].SelectedItems1 = new string[] { "" };
                    model[0].SelectedItems1 = new string[] { "" };
                    model[0].Col16 = sgen.server_datetime_local(userCode);

                }
                else if (command == "Save" || command == "Update")
                {
                    var tm = model.FirstOrDefault();
                    bool data = false;

                    type = "EXP";
                    mid_mst = tm.Col14;
                    isedit = false;
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col5;
                    }
                    else
                    {
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where type='" + type + "' " +
                        "and  client_unit_id='" + model[0].Col2 + "'", 6, "max");
                    }
                    string currdate = sgen.Savedate(model[0].Col16, true).ToString();
                    //DataTable dataTable = sgen.getdata(userCode, "select  * from  " + model[0].Col10 + "  where  1=2");
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    #region 
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = type;
                        dr["vch_date"] = sgen.Savedate(model[0].Col16, true).ToString();
                        dr["client_id"] = model[0].Col1;
                        dr["client_unit_id"] = model[0].Col2;
                        dr["vch_num"] = vch_num.Trim();
                        dr["col2"] = model[0].Col17;//Amount
                        dr["col3"] = model[0].Col18;//payment to
                        dr["col4"] = model[0].Col19;//remark
                        dr["col5"] = model[0].SelectedItems1.FirstOrDefault();//Expense Type
                        dr["col6"] = model[0].SelectedItems2.FirstOrDefault();//mode of payment
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    #endregion
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tm.Col8, isedit);
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        #region Upload
                        DataTable dtfile = new DataTable();
                        //dtfile = sgen.getdata(userCode, "select * from  file_tab WHERE 1=2");
                        dtfile = cmd_Fun.GetStructure(userCode, "file_tab");
                        type_desc = "Expense detail";
                        type = "EXP";
                        string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                        try
                        {
                            HttpPostedFileBase file1 = upd1;
                            ctype1 = file1.ContentType;
                            fileName1 = file1.FileName;
                            path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
                            encpath1 = sgen.Convert_Stringto64(path1).ToString();
                            finalpath1 = serverpath + encpath1;
                            file1.SaveAs(finalpath1);
                            filesave(currdate, dtfile, fileName1, encpath1, "Expense Detail", ctype1, "N", "", "");
                            bool res = sgen.Update_data(userCode, dtfile, "file_tab", tm.Col8, isedit);
                        }
                        catch (Exception ex) { }
                        #endregion
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        //ViewBag.scripCall = "showmsgJS(1, 'Data Saved Successfully', 1);disableForm();";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                        mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = "EXPENSE DETAIL",
                            Col1 = clientid_mst,
                            Col2 = unitid_mst,
                            Col10 = "Enx_tab2",
                            Col12 = type,
                            Col13 = "Save",
                            Col14 = mid_mst,
                            Col15 = m_id_mst,
                            Col16 = "",
                            TList1 = mod1,
                            TList2 = mod2,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                        }
                           );
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Student Fee Structure
        public ActionResult std_fee_structure()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "STUDENT FEE STRUCTURE";
            model[0].Col10 = "fees_detail";
            model[0].Col12 = "STD";
            model[0].Col16 = "";
            model[0].Col17 = "";
            return View(model);
        }
        [HttpPost]
        public ActionResult std_fee_structure(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                //if (command == "New")
                //{

                //        sgen.SetSession(MyGuid, "EDMODE", "N");
                //        ViewBag.vnew = "disabled='disabled'";
                //        ViewBag.vedit = "disabled='disabled'";
                //        ViewBag.vsave = "";
                //        ViewBag.vsavenew = "";
                //        ViewBag.scripCall = "enableForm();";
                //        var tm = model.FirstOrDefault();

                //}
                if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    var tm = model.FirstOrDefault();
                    bool data = false;

                    string type = tm.Col12;
                    mid_mst = tm.Col14;
                    isedit = false;
                    if (model[0].Col51 != null && model[0].Col51.Trim().Equals("1")) { isedit = true; } else { tm.Col8 = ""; }
                    vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " +
                    "and client_unit_id='" + unitid_mst + "'", 6, "max");
                    //}
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    for (int g = 0; g < tm.LTM1.Count; g++)
                    {
                        for (Int32 h = 0; h < tm.LTM1[g].LTM1.Count; h++)
                        {
                            #region Str
                            for (Int32 k = 0; k < tm.LTM1[g].LTM1[h].LTM1.Count; k++)
                            {
                                decimal Receiptamount = 0;
                                String feetype = tm.LTM1[g].LTM1[h].LTM1[k].Col1;
                                String feehead_id = tm.LTM1[g].LTM1[h].LTM1[k].Col2;
                                String Month_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col3;
                                String Month_Name = tm.LTM1[g].LTM1[h].LTM1[k].Col4;
                                String std_Amount = tm.LTM1[g].LTM1[h].LTM1[k].Col5 == null ? "0" : tm.LTM1[g].LTM1[h].LTM1[k].Col5;
                                String act_Amount = tm.LTM1[g].LTM1[h].LTM1[k].Col6 == null ? "0" : tm.LTM1[g].LTM1[h].LTM1[k].Col6;
                                String tstart_dt = "1", start_dt = tm.LTM1[g].LTM1[h].LTM1[k].Col7;
                                String tEnd_dt = "1", End_dt = tm.LTM1[g].LTM1[h].LTM1[k].Col8;
                                //if (start_dt != null && start_dt != "0") { tstart_dt = start_dt; } else { start_dt = "0"; }
                                //if (End_dt != null && End_dt != "0") { tEnd_dt = End_dt; } else { End_dt = "0"; }
                                if (Month_Id == "03") { }
                                DateTime From_dt = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                                int CY, FY = From_dt.Year;
                                int FM = From_dt.Month;
                                int CM = sgen.Make_int(Month_Id);
                                if (CM < FM) CY = FY + 1;
                                else { CY = FY; }
                                if (start_dt != null && start_dt != "0")
                                {
                                    try
                                    {
                                        DateTime a = new DateTime(CY, CM, sgen.Make_int(start_dt));
                                        tstart_dt = start_dt;
                                    }
                                    catch (Exception ex) { start_dt = "1"; }
                                }
                                else { start_dt = "0"; }
                                if (End_dt != null && End_dt != "0")
                                {
                                    try
                                    {
                                        DateTime a = new DateTime(CY, CM, sgen.Make_int(End_dt));
                                        tEnd_dt = End_dt;
                                    }
                                    catch (Exception ex) { End_dt = DateTime.DaysInMonth(CY, CM).ToString(); }
                                }
                                else { End_dt = "0"; }
                                string due_dt = new DateTime(CY, CM, sgen.Make_int(tstart_dt)).ToString("yyyy-MM-dd HH:mm:ss");
                                if (End_dt == "0")
                                {
                                    tEnd_dt = DateTime.DaysInMonth(CY, CM).ToString();
                                }
                                string over_dt = new DateTime(CY, CM, sgen.Make_int(tEnd_dt)).ToString("yyyy-MM-dd HH:mm:ss");
                                if (new DateTime(CY, CM, sgen.Make_int(tEnd_dt)) < new DateTime(CY, CM, sgen.Make_int(tstart_dt)))
                                {
                                    var ty = tm.LTM1[g].Col2;
                                    var hd = tm.LTM1[g].LTM1[h].Col3;
                                    ViewBag.scripCall = "showmsgJS(1, 'End Date is lesser then Start Date in " + Month_Name + " for " + ty + "-" + hd + "', 1);";
                                    ModelState.Clear();
                                    return View(model);
                                }
                                for (int i = 0; i < model.Count; i++)
                                {
                                    DataRow dr = dataTable.NewRow();
                                    dr["rec_id"] = "0";
                                    dr["type"] = type;
                                    dr["vch_date"] = currdate;
                                    dr["client_id"] = model[0].Col1;
                                    dr["client_unit_id"] = model[0].Col2;
                                    dr["vch_num"] = vch_num.Trim();
                                    dr["academic_year_id"] = Ac_Year_id;
                                    dr["class_id"] = model[0].Col20;
                                    dr["FeeType_Id"] = feetype;
                                    dr["FeeHead_Id"] = feehead_id;
                                    dr["regno"] = model[0].Col17;
                                    dr["Fee_Amount"] = act_Amount;
                                    dr["std_amount"] = std_Amount;
                                    dr["From_date"] = sgen.Make_date_S(Ac_From_Date);
                                    dr["No_Trans"] = "12";
                                    dr["Months"] = vch_num.Trim();
                                    dr["Due_Month"] = tm.LTM1[g].LTM1[h].LTM1[k].Col3;
                                    dr["monthname"] = tm.LTM1[g].LTM1[h].LTM1[k].Col4;
                                    dr["due_date"] = start_dt;
                                    dr["overdue_date"] = End_dt;
                                    dr["due_dt"] = due_dt;
                                    dr["overdue_dt"] = over_dt;
                                    dr["frequency_id"] = "4";
                                    dr["frequencyName"] = "Monthly";
                                    dr["approved_by"] = model[0].Col25;
                                    dr["remark"] = model[0].Col26;
                                    dr["client_id"] = clientid_mst;
                                    dr["client_unit_id"] = unitid_mst;
                                    if (isedit)
                                    {
                                        dr["ent_by"] = userid_mst;
                                        dr["ent_date"] = currdate;
                                        dr["edit_by"] = userid_mst;
                                        dr["edit_date"] = currdate;
                                    }
                                    else
                                    {
                                        dr["ent_by"] = userid_mst;
                                        dr["ent_date"] = currdate;
                                        dr["edit_by"] = userid_mst;
                                        dr["edit_date"] = currdate;
                                    }
                                    dataTable.Rows.Add(dr);
                                }
                            }
                            #endregion
                        }
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tm.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = "STUDENT FEE STRUCTURE",
                            Col1 = clientid_mst,
                            Col2 = unitid_mst,
                            Col10 = "fees_detail",
                            Col12 = type,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col16 = "",
                            Col17 = ""
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {

                                Make_query("std_fee_structure", "Select Student", "REG", "1", MyGuid);
                                ViewBag.scripCall = "callFoo('Select Student');";
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }

                    }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                //else if (command == "Fill Data")
                //{
                //}
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region  Fee Structure
        public ActionResult fee_structure()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();
            //try
            //{
            FillMst();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model = getload(model);
            type_desc = "Fee Structure";
            string title = "";
            title = "FEE STRUCTURE";
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].Col9 = title;
            model[0].Col1 = clientid_mst;
            model[0].Col2 = unitid_mst;
            model[0].Col10 = "fees_detail";
            model[0].Col12 = "STR";
            model[0].Col16 = "";
            model[0].Col17 = "";
            return View(model);
        }
        public List<Tmodelmain> new_fee_structure(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "SSEEKVAL", null);
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "disabled='disabled";
            ViewBag.vsavenew = "disabled='disabled";
            ViewBag.scripCall = "enableForm();";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            var tm = model.FirstOrDefault();

            #region Class
            DataTable dt1 = new DataTable();
            mq = "select add_class_id as Class_id,class,cast(sequence as int) from add_class where  client_unit_id='" + unitid_mst + "' " +
        "  and type='EAC' and (status='Y' or status='') and add_class_id not in (select distinct class_id from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and  client_unit_id='" + unitid_mst + "' and academic_year_id='" + Ac_Year_id + "')  order by 3";
            dt1 = sgen.getdata(userCode, mq);
            if (dt1.Rows.Count > 0)
            {
                foreach (DataRow dr in dt1.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["class"].ToString(), Value = dr["Class_id"].ToString() });
                }
            }
            #endregion

            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems1 = new string[] { "" };
            //  model[0].Col13 = "Save";
            return model;
        }
        [HttpPost]
        public ActionResult fee_structure(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];

                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                if (command == "New")
                {
                    model = new_fee_structure(model);
                }
                else if (command == "Class")
                {
                    try
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "disabled='disabled";
                        ViewBag.vsavenew = "disabled='disabled";
                        ViewBag.scripCall = "enableForm();";
                        string class_id = string.Join(",", model[0].SelectedItems1);
                        #region Feetype
                        bool libfees = false;
                        try
                        {
                            libfees = Convert.ToBoolean(sgen.getstring(userCode, "select IsregFeesBeforeadm from master_setting where type='LIB' and   client_unit_id='" + unitid_mst + "'"));
                        }
                        catch { libfees = false; }
                        string cond = "";
                        if (libfees == false)
                        {
                            cond = "";
                        }
                        else
                        {
                            cond = "and b.FeeTypeName='Library'";
                        }
                        DataTable dt2 = new DataTable();
                        mod2 = new List<SelectListItem>();
                        mq = "select FeeType_Id,FeeTypeName  from school_Fee_Type where ( master_type='0' or master_type='') and " +
                            "client_unit_id='" + unitid_mst + "'  and( FeeType_Id !='001' and  FeeType_Id!='004') " +
                            "and feetype_id in ( select sectionid from master_setting where type = 'EFH' and client_unit_id " +
                            "= '" + unitid_mst + "' and master_type = 'Education Fees Head')  ";
                        dt2 = sgen.getdata(userCode, mq);
                        if (dt2.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dt2.Rows)
                            {
                                mod2.Add(new SelectListItem { Text = dr["FeeTypeName"].ToString(), Value = dr["FeeType_Id"].ToString() });
                            }
                        }
                        TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;

                        #endregion
                    }
                    catch (Exception ex) { }
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    var tm = model.FirstOrDefault();
                    bool data = false;

                    string type = tm.Col12;
                    mid_mst = tm.Col14;
                    isedit = false;
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col5;
                    }
                    else
                    {
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " +
                        "and  client_unit_id='" + unitid_mst + "'", 6, "max");
                    }
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (model[0].TList1.Count > 0 && model[0].SelectedItems1 != null)
                    {
                        foreach (SelectListItem item in model[0].TList1)
                        {
                            if (model[0].SelectedItems1.Contains(item.Value))
                            {
                                item.Selected = true;
                                for (int g = 0; g < tm.LTM1.Count; g++)
                                {
                                    for (Int32 h = 0; h < tm.LTM1[g].LTM1.Count; h++)
                                    {
                                        #region Str
                                        for (Int32 k = 0; k < tm.LTM1[g].LTM1[h].LTM1.Count; k++)
                                        {
                                            decimal Receiptamount = 0;
                                            String feetype = tm.LTM1[g].LTM1[h].LTM1[k].Col1;
                                            String feehead_id = tm.LTM1[g].LTM1[h].LTM1[k].Col2;
                                            String Month_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col3;
                                            String Month_Name = tm.LTM1[g].LTM1[h].LTM1[k].Col4;
                                            String Amount = tm.LTM1[g].LTM1[h].LTM1[k].Col5 == null ? "0" : tm.LTM1[g].LTM1[h].LTM1[k].Col5;
                                            String tstart_dt = "1", start_dt = tm.LTM1[g].LTM1[h].LTM1[k].Col6;
                                            String tend_dt = "1", End_dt = tm.LTM1[g].LTM1[h].LTM1[k].Col7;
                                            DateTime From_dt = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                                            int CY, FY = From_dt.Year;
                                            int FM = From_dt.Month;
                                            int CM = sgen.Make_int(Month_Id);
                                            if (CM < FM) CY = FY + 1;
                                            else { CY = FY; }
                                            if (start_dt != null && start_dt != "0")
                                            {
                                                try
                                                {
                                                    DateTime a = new DateTime(CY, CM, sgen.Make_int(start_dt));
                                                    tstart_dt = start_dt;
                                                }
                                                catch (Exception ex) { start_dt = "1"; }
                                            }
                                            else { start_dt = "0"; }
                                            if (End_dt != null && End_dt != "0")
                                            {
                                                try
                                                {
                                                    DateTime a = new DateTime(CY, CM, sgen.Make_int(End_dt));
                                                    tend_dt = End_dt;
                                                }
                                                catch (Exception ex) { End_dt = DateTime.DaysInMonth(CY, CM).ToString(); }
                                            }
                                            else { End_dt = "0"; }
                                            string due_dt = new DateTime(CY, CM, sgen.Make_int(tstart_dt)).ToString("yyyy-MM-dd HH:mm:ss");
                                            if (End_dt == "0")
                                            {
                                                tend_dt = DateTime.DaysInMonth(CY, CM).ToString();
                                            }
                                            string over_dt = "";
                                            over_dt = new DateTime(CY, CM, sgen.Make_int(tend_dt)).ToString("yyyy-MM-dd HH:mm:ss");
                                            { tend_dt = DateTime.DaysInMonth(CY, CM).ToString(); }
                                            if (new DateTime(CY, CM, sgen.Make_int(tend_dt)) < new DateTime(CY, CM, sgen.Make_int(tstart_dt)))
                                            {
                                                var ty = tm.LTM1[g].Col2;
                                                var hd = tm.LTM1[g].LTM1[h].Col3;
                                                ViewBag.scripCall = "showmsgJS(1, 'End Date is Lesser Than Start Date in " + Month_Name + " For " + ty + "-" + hd + "', 2);";
                                                ModelState.Clear();
                                                return View(model);
                                            }
                                            for (int i = 0; i < model.Count; i++)
                                            {
                                                DataRow dr = dataTable.NewRow();
                                                dr["rec_id"] = "0";
                                                dr["type"] = type;
                                                dr["vch_date"] = currdate;
                                                dr["client_id"] = model[0].Col1;
                                                dr["client_unit_id"] = model[0].Col2;
                                                dr["vch_num"] = vch_num.Trim();
                                                dr["academic_year_id"] = Ac_Year_id;
                                                dr["class_id"] = item.Value;
                                                dr["FeeType_Id"] = feetype;
                                                dr["FeeHead_Id"] = feehead_id;
                                                dr["Fee_Amount"] = Amount;
                                                dr["std_Amount"] = Amount;
                                                dr["From_date"] = sgen.Savedate(Ac_From_Date, true);
                                                dr["No_Trans"] = "12";
                                                dr["Months"] = vch_num.Trim();
                                                dr["Due_Month"] = tm.LTM1[g].LTM1[h].LTM1[k].Col3;
                                                dr["Monthname"] = tm.LTM1[g].LTM1[h].LTM1[k].Col4;
                                                dr["due_date"] = start_dt;
                                                dr["overdue_date"] = End_dt;
                                                dr["due_dt"] = due_dt;
                                                dr["overdue_dt"] = over_dt;
                                                dr["frequency_id"] = "4";
                                                dr["frequencyName"] = "Monthly";
                                                if (isedit)
                                                {
                                                    dr["ent_by"] = model[0].Col3;
                                                    dr["ent_date"] = model[0].Col4;
                                                    dr["edit_by"] = userid_mst;
                                                    dr["edit_date"] = currdate;
                                                }
                                                else
                                                {
                                                    dr["ent_by"] = userid_mst;
                                                    dr["ent_date"] = currdate;
                                                    dr["edit_by"] = userid_mst;
                                                    dr["edit_date"] = currdate;
                                                }
                                                dataTable.Rows.Add(dr);
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }
                        }
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, model[0].Col8, isedit);
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        //ViewBag.vnew = "";
                        //ViewBag.vedit = "";
                        //ViewBag.vsave = "disabled='disabled'";
                        //ViewBag.vsavenew = "disabled='disabled'";
                        //ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Fee Structure Saved Successfully');disableForm();";
                        sgen.SetSession(MyGuid, "SSEEKVAL", null);
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            TList1 = mod1,
                            TList2 = mod2,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            Col9 = "FEE STRUCTURE",
                            Col1 = clientid_mst,
                            Col2 = unitid_mst,
                            Col10 = "fees_detail",
                            Col12 = type,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col16 = "",
                            Col17 = ""
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_fee_structure(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    #region BindHead
                    DataTable dtmain = new DataTable();
                    DataTable dt = new DataTable();
                    String URL = "";
                    if (sgen.GetSession(MyGuid, "SSEEKVAL") != null)
                    {
                        URL = sgen.GetSession(MyGuid, "SSEEKVAL").ToString();
                    }
                    #region Check STD Structure
                    DataTable dth = sgen.getdata(userCode, "select DISTINCT FeeType_Id from fees_detail where Academic_year_Id='" + Ac_Year_id + "' and" +
                        " feetype_id!='001' and type='STD' and class_id='" + model[0].SelectedItems1.FirstOrDefault() + "' and  client_unit_id='" + unitid_mst + "'");
                    if (dth.Rows.Count > 0)
                    {
                        string feetype = string.Join(",", model[0].SelectedItems2);
                        foreach (DataRow dr in dth.Rows)
                        {
                            if (!feetype.Contains(dr["Feetype_id"].ToString()))
                            {
                                ViewBag.scripCall = "showmsgJS(1, 'You Cant Remove FeeType , It is Already Used In Student Fee Structure', 2);";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                goto END;
                            }
                        }
                    }
                    #endregion
                    #region Check Fees
                    DataTable dtF = sgen.getdata(userCode, "select DISTINCT Fee_type_id from student_receipt_detail  where Academic_year_Id='" + Ac_Year_id + "' " +
                        "and  Fee_type_id!='001' and fee_head_id!='001' and class_id='" + model[0].SelectedItems1.FirstOrDefault() + "'  " +
                        "and client_unit_id='" + unitid_mst + "'");
                    if (dtF.Rows.Count > 0)
                    {
                        string feetype = string.Join(",", model[0].SelectedItems2);
                        foreach (DataRow dr in dtF.Rows)
                        {
                            if (!feetype.Contains(dr["Fee_type_id"].ToString()))
                            {
                                ViewBag.scripCall = "showmsgJS(1, 'You Cant Remove FeeType , Fees Already Saved For Selected Feetypes In Student Fee', 2);";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                goto END;
                            }
                        }
                    }
                    #endregion
                    // reena why nvl with case ok
                    mq = "select a.*,m.month_id,m.month_name,m.display_id from(select a.section_strength as Fee_apply,  (CASE WHEN a.section_strength='O' then 'For Old Students'" +
                   " WHEN a.section_strength='N' THEN 'For New Students' WHEN a.section_strength='B' THEN 'For Both New and Old Students' else '-' END ) " +
                   "as Studenttype, '0' as flag, a.master_id as feehead_id, a.master_name as headname,a.sectionid AS feetype,b.feetypename" +
                   " from master_setting a inner join school_fee_type b on a.sectionid=b.feetype_id and a.master_type!='B' and b.master_type!='B' " +
                   " and a.client_unit_id=b.client_unit_id where a.Type='EFH' " +
                   " and a.client_unit_id='" + unitid_mst + "' and (a.sectionid ='001' or a.sectionid in (" + string.Join(",", model[0].SelectedItems2) + "))" +
                   " and a.subjectid =1) a   inner join (select Section_Strength as month_id ,master_name as month_name,FemaleRatio as display_id from master_setting where" +
                   " type='MNT') m on 1=1 order by feetype,display_id asc";
                    mq1 = "select  (select GROUP_CONCAT( distinct fd.FeeType_Id) as Fee_type from fees_detail fd  where " +
                               "fd.client_id||fd.client_unit_id||fd.vch_num||to_char(fd.vch_date,'yyyymmdd')||fd.type||fd.class_id||fd.academic_year_id='" + URL + "') as Fee_type" +
                               " , h.section_strength as Fee_apply,  (CASE WHEN h.section_strength='O' then 'For Old Students'" +
                               " WHEN h.section_strength='N' THEN 'For New Students' WHEN h.section_strength='B' THEN 'For Both New and  Old Students' else '-' END )" +
                               " as Studenttype, '0' as flag, c.Class,b.FeeTypeName,h.master_name as Headname, fd.due_month  as Month_Id,fd.monthname as Month_name, " +
                               "fd.feetype_id as feetype,fd.FeeHead_Id ,fd.Fee_Amount,fd.std_amount,fd.ent_by,fd.ent_date,fd.vch_num,fd.vch_date,fd.client_id," +
                               "fd.client_unit_id,GROUP_CONCAT(distinct fd.class_id) as class_id,due_date,overdue_date from fees_detail fd inner join add_class c " +
                               "on fd.class_id=c.add_class_id and c.type='EAC' and fd.client_id=c.client_id and fd.client_unit_id=c.client_unit_id " +
                               "inner join master_setting h on fd.feetype_id||fd.FeeHead_Id=h.sectionid||h.master_id and h.type='EFH'  and " +
                               "fd.client_unit_id=h.client_unit_id and h.master_type='Education Fees Head' inner join school_fee_type b on fd.FeeType_Id " +
                               "=  b.feetype_id  and b.master_type!='B'   and fd.client_unit_id=b.client_unit_id" +
                               " where fd.client_id||fd.client_unit_id||fd.vch_num||to_char(fd.vch_date,'yyyymmdd')||fd.type||fd.class_id||fd.academic_year_id" +
                               "='" + URL + "' group by h.section_strength , c.Class,b.FeeTypeName,h.master_name, fd.due_month,fd.monthname, fd.feetype_id" +
                               ",fd.FeeHead_Id,fd.Fee_Amount,fd.std_amount,fd.ent_by,fd.ent_date,fd.vch_num,fd.vch_date,fd.client_id,fd.client_unit_id ," +
                               "due_date,overdue_date order by fd.FeeType_Id";
                    mq = "select a.*, nvl(b.fee_amount,'0') as Fee_Amount,b.due_date,b.overdue_date from  (" + mq + ") a left join (" + mq1 + ")b " +
                        "on a.feehead_id=b.feehead_id and a.feetype=b.feetype and a.month_id=b.month_id order by a.display_id asc   ";
                    dtmain = sgen.getdata(userCode, mq);
                    dt = dtmain.Copy();
                    if (dtmain.Rows.Count > 0)
                    {
                        var newDt = dtmain.AsEnumerable().GroupBy(r => new
                        {
                            feetype = r.Field<string>("feetype"),
                            feetypename = r.Field<string>("feetypename"),
                        }).Select(g =>
                        {
                            var row = dt.NewRow();
                            row["feetype"] = g.Key.feetype;
                            row["feetypename"] = g.Key.feetypename;
                            return row;
                        }).CopyToDataTable();
                        DataTable dtFeetype = newDt;
                        List<Tmodelmain> LTM1 = new List<Tmodelmain>();
                        foreach (DataRow drf in dtFeetype.Rows)
                        {
                            Tmodelmain ltm1 = new Tmodelmain();
                            ltm1.Col1 = drf["feetype"].ToString();
                            ltm1.Col2 = drf["feetypename"].ToString();
                            ltm1.Col3 = "0";
                            ltm1.Col4 = "0";
                            //ltm1.Col15 = "RAM";
                            var vrhead = dtmain.AsEnumerable().Where(w => (string)w["feetype"] == drf["feetype"].ToString())
                                                          .Select(s => s).CopyToDataTable();
                            DataTable dthd = vrhead;
                            var Dt = dthd.AsEnumerable().GroupBy(r => new
                            {
                                feetype = r.Field<string>("feetype"),
                                feehead_id = r.Field<string>("feehead_id"),
                                headname = r.Field<string>("headname"),
                                Studenttype = r.Field<string>("Studenttype"),
                                Fee_apply = r.Field<string>("Fee_apply")
                            }).Select(g =>
                            {
                                var row = dt.NewRow();
                                row["feetype"] = g.Key.feetype;
                                row["feehead_id"] = g.Key.feehead_id;
                                row["headname"] = g.Key.headname;
                                row["Studenttype"] = g.Key.Studenttype;
                                row["Fee_apply"] = g.Key.Fee_apply;
                                return row;
                            }).CopyToDataTable();
                            DataTable dthead = Dt;
                            List<Tmodelmain> LTM2 = new List<Tmodelmain>();
                            foreach (DataRow drh in dthead.Rows)
                            {
                                Tmodelmain ltm2 = new Tmodelmain();
                                ltm2.Col1 = drh["feetype"].ToString();
                                ltm2.Col2 = drh["feehead_id"].ToString();
                                ltm2.Col3 = drh["headname"].ToString();
                                ltm2.Col4 = "0";
                                ltm2.Col5 = drh["Studenttype"].ToString();
                                ltm2.Col6 = drh["Fee_apply"].ToString();
                                var vrmonth = dtmain.AsEnumerable().Where(w => (string)w["feetype"] == drh["feetype"].ToString() && (string)w["feehead_id"] == drh["feehead_id"].ToString())
                                                                                          .Select(s => s).CopyToDataTable();
                                DataTable dtmonth = vrmonth;
                                List<Tmodelmain> LTM3 = new List<Tmodelmain>();
                                foreach (DataRow drm in dtmonth.Rows)
                                {
                                    Tmodelmain ltm3 = new Tmodelmain();
                                    ltm3.Col1 = drm["feetype"].ToString();
                                    ltm3.Col2 = drm["feehead_id"].ToString();
                                    ltm3.Col3 = drm["Month_Id"].ToString();
                                    ltm3.Col4 = drm["Month_Name"].ToString();
                                    //ltm3.Col5 = "0";
                                    ltm3.Col5 = drm["Fee_amount"].ToString();
                                    try
                                    {
                                        ltm3.Col6 = drm["due_date"].ToString();
                                        ltm3.Col7 = drm["overdue_date"].ToString();
                                    }
                                    catch
                                    {
                                        ltm3.Col6 = "";
                                        ltm3.Col7 = "";
                                    }
                                    LTM3.Add(ltm3);
                                }
                                ltm2.LTM1 = LTM3;
                                LTM2.Add(ltm2);
                            }
                            ltm1.LTM1 = LTM2;
                            LTM1.Add(ltm1);
                        }
                        model[0].LTM1 = LTM1;
                    }
                #endregion
                END:;

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Regular Fees
        [HttpPost]
        public ContentResult chkfeetype(string value)
        {
            try
            {
                sgen = new sgenFun(MyGuid);
                if (value.Trim().Equals("G"))
                {
                    sgen.SetSession(MyGuid, "RFeeType", "G");
                }
                else if (value.Trim().Equals("S"))
                {
                    sgen.SetSession(MyGuid, "RFeeType", "S");
                }
                else if (value.Trim().Equals("A"))
                {
                    sgen.SetSession(MyGuid, "RFeeType", "A");
                }
                else { sgen.SetSession(MyGuid, "RFeeType", ""); }
            }
            catch (Exception ex) { }
            return Content("");
        }
        public ActionResult fee_receipt()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();
            string rpt = "";
            try
            {
                FillMst();
                chkRef();
                ViewBag.scripCall = "enableForm();";
                mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
                m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
                List<SelectListItem> mod1 = new List<SelectListItem>();
                Tmodelmain tm1 = new Tmodelmain();
                string Rdb = "S";
                //mid_mst = "7019.2"; m_id_mst = "7019.2";
                tm1.Col14 = mid_mst.Trim();
                tm1.Col15 = m_id_mst.Trim();
                tm1.Col10 = "";
                tm1.Col13 = "Save";
                tm1.Col100 = "Save & New";
                tm1.Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                sgen.SetSession(MyGuid, "Rpt_Menuid", mid_mst);
                sgen.SetSession(MyGuid, "RFeeType", "S");
                string vchdate = sgen.server_datetime_local(userCode);
                string title = "", xtype = "", lbl_rece = "", Rec_amt = "", Col54 = "", Col22 = "";
                string col53 = "";
                sgen.SetSession(MyGuid, "Parent_Fee", "YN");
                if (mid_mst == "7019.5")//regular fee
                {
                    title = "FEE RECEIPT";
                    type = "ERD";
                    lbl_rece = "Receiving Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "16000.5.2")//library fee
                {
                    title = "LIBRARY FEE RECEIPT";
                    type = "ERD";
                    lbl_rece = "Receiving Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.6") //concession 
                {
                    title = "FEE CONCESSION";
                    type = "ERC";
                    lbl_rece = "Concession Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.8")
                {
                    title = "FEE REVERSAL";
                    type = "ERD";
                    lbl_rece = "Reverse Amount";
                    Rec_amt = "N";
                    Col54 = "Total Paid Amount";
                    Col22 = "2";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.11")
                {
                    title = "CONCESSION REVERSAL";
                    type = "ERC";
                    lbl_rece = "Reverse Amount";
                    Rec_amt = "N";
                    Col54 = "Total Paid Amount";
                    Col22 = "2";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.10")
                {
                    title = "FEE WAIVE OFF FOR MID TERM JOINING";
                    type = "ERW";
                    lbl_rece = "Mid Term Concession Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.2")
                {
                    title = "ADMISSION FEES RECEIPT";
                    type = "ERD";
                    lbl_rece = "Receiving Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    sgen.SetSession(MyGuid, "RFeeType", "A");
                    Rdb = "A";
                    col53 = "Temp Student No.";
                }

                else if (mid_mst == "13000.8")//Parent fee
                {
                    title = "FEE REPORT";
                    type = "ERD";
                    lbl_rece = "Receiving Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                    sgen.SetSession(MyGuid, "Parent_Fee", "Y");
                }
                rpt = sgen.seekval(userCode, "select client_name from master_setting where type='FRF'  and classid='1'", "client_name");
                string receipt_format = sgen.seekval(userCode, "select master_name from master_setting where type='FRF'  and classid='1'", "master_name");
                tm1.Col9 = title;
                tm1.Col12 = type;
                tm1.Col50 = Rec_amt;
                tm1.Col18 = vchdate;
                tm1.Col24 = vchdate;
                tm1.Col22 = Col22;
                tm1.Col23 = "";
                tm1.Col52 = Rdb;
                tm1.Col62 = "N";
                tm1.Col53 = "Registration No.";
                tm1.Col54 = Col54;
                tm1.Col58 = lbl_rece;
                tm1.Col53 = col53;
                tm1.TList1 = mod1;
                tm1.SelectedItems1 = new string[] { "" };
                tm1.Col38 = receipt_format;
                tm1.Col39 = rpt;
                #region mode of payment
                tm1.SelectedItems1 = new string[] { "" };
                TempData[MyGuid + "_Tlist1"] = tm1.TList1 = mod1 = cmd_Fun.Modeofpayment(userCode, unitid_mst);

                #endregion

                model.Add(tm1);
                model = receipt_pattern(model);
            }
            catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 2);"; }
            if (rpt == "")
            {
                ViewBag.scripCall = "showmsgJS(1, 'Please Set Report Template In Template Master', 2);";
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult fee_receipt(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                if (command == null || command == "") { command = "REG"; }
                List<SelectListItem> mod1 = new List<SelectListItem>();
                mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                model[0].TList1 = mod1;
                if (command == "Cancel")
                {
                    sgen.SetSession(MyGuid, "btnval", null);
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Submit")
                {
                    var tm = model.FirstOrDefault();
                    tm.Col8 = "";
                    bool data = false;

                    string type = tm.Col12;
                    mid_mst = tm.Col14;
                    isedit = false;
                    string vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from student_receipt_detail where type='" + type + "'  and client_unit_id='" + unitid_mst + "'", 6, "max");
                    string query = "";
                    String User_Id = "";
                    string vch_date = sgen.Savedate(tm.Col18, false);
                    string cm_date = sgen.Make_date_S(tm.Col24.Trim());
                    string dt = sgen.SaveDate_dt(tm.Col18, false).ToString("yyyyMMdd");
                    string url = clientid_mst + unitid_mst + vch_num + dt + "" + type + "";
                    sgen.SetSession(MyGuid, "SSEEKVAL", url);
                    //CheckSetting();
                    //receipt();
                    if (tm.Col17 == "")
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "showmsg(1,'Please Enter Receipt Number',2);";
                        goto END;
                    }
                    model = receipt_pattern(model);
                    string Receipt_Master_Id = "";
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dataTable = dataTable = cmd_Fun.GetStructure(userCode, "student_receipt_detail");
                    string lbl_student_id = "";
                    for (int g = 0; g < tm.LTM1.Count; g++)
                    {
                        //Repeater FeeRepeater = (Repeater)Fee_grp.Items[g].FindControl("FeeRepeater");
                        string lbl_grpid = tm.LTM1[g].Col2;
                        lbl_student_id = tm.LTM1[g].Col3;
                        string lbl_rollno = tm.LTM1[g].Col4;
                        string lbl_section_id = tm.LTM1[g].Col5;
                        string lbl_Class_id = tm.LTM1[g].Col6;
                        string lbl_RegNumber = tm.LTM1[g].Col7;
                        for (Int32 h = 0; h < tm.LTM1[g].LTM1.Count; h++)
                        {
                            string lbl_month_id = tm.LTM1[g].LTM1[h].Col1;
                            string lbl_Month_Name = tm.LTM1[g].LTM1[h].Col2;
                            string lbl_Fee_Amount = tm.LTM1[g].LTM1[h].Col12;
                            string lbl_hideamt = tm.LTM1[g].LTM1[h].Col19;
                            string Txt_Receipt_amt = tm.LTM1[g].LTM1[h].Col16;
                            {
                                #region ERD
                                decimal totalamount = 0;
                                for (Int32 k = 0; k < tm.LTM1[g].LTM1[h].LTM1.Count; k++)
                                {
                                    decimal Receiptamount = 0;
                                    String lbl_FrequencyName = tm.LTM1[g].LTM1[h].LTM1[k].Col4;
                                    String lbl_Frequency_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col1;
                                    String lbl_FeeType_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col13;
                                    String lbl_FeeTypeName = tm.LTM1[g].LTM1[h].LTM1[k].Col14;
                                    String lbl_FeeHead_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col15;
                                    String lbl_HeadName = tm.LTM1[g].LTM1[h].LTM1[k].Col16;
                                    String lbl_paid = tm.LTM1[g].LTM1[h].LTM1[k].Col20;
                                    String lbl_Fee_Amount_detail = tm.LTM1[g].LTM1[h].LTM1[k].Col18;
                                    String Txt_Receipt = tm.LTM1[g].LTM1[h].LTM1[k].Col22;
                                    String lbl_Intial = tm.LTM1[g].LTM1[h].LTM1[k].Col5;
                                    String lbl_concession = tm.LTM1[g].LTM1[h].LTM1[k].Col19;
                                    String lbl_scholarshiptype = tm.LTM1[g].LTM1[h].LTM1[k].Col6;
                                    String lbl_duedate = tm.LTM1[g].LTM1[h].LTM1[k].Col17;
                                    String lbl_overdue = tm.LTM1[g].LTM1[h].LTM1[k].Col26;
                                    Decimal due_amt = sgen.Make_decimal(tm.LTM1[g].LTM1[h].LTM1[k].Col18.ToString());
                                    string lbl_Chequeno = tm.LTM1[g].LTM1[h].LTM1[k].Col23;
                                    string chk_payment = tm.LTM1[g].LTM1[h].LTM1[k].Col25;
                                    string Txt_payment = tm.LTM1[g].LTM1[h].LTM1[k].Col24;
                                    string receiptamountt = "0";
                                    decimal diffamt = 0;
                                    if (tm.Col50 == "N")
                                    {
                                        Receiptamount = sgen.Make_decimal(Txt_Receipt);
                                        Txt_Receipt = Convert.ToString(-Receiptamount);
                                    }
                                    diffamt = Convert.ToDecimal(lbl_Fee_Amount_detail) -
                                    (Convert.ToDecimal(lbl_concession) +
                                    Convert.ToDecimal(lbl_paid) +
                                    Convert.ToDecimal(Txt_Receipt));
                                    try
                                    {
                                        if (Txt_Receipt.Contains(','))
                                        {
                                        }
                                        else
                                        {
                                            receiptamountt = Txt_Receipt;
                                        }
                                        Receiptamount = Convert.ToDecimal(receiptamountt);
                                    }
                                    catch { }
                                    string lbl_balance = tm.LTM1[g].LTM1[h].LTM1[k].Col21;
                                    string xlbl_Chequeno = "";
                                    if ((model[0].Col14 == "7019.8") || (model[0].Col14 == "7019.11"))
                                    {
                                        if (diffamt < 0)
                                        {
                                            diffamt = 0;
                                        }
                                    }
                                    if ((chk_payment == "1" && diffamt > 0) || (chk_payment == "1" && diffamt == 0))
                                    {
                                        if (model[0].Col14 == "7019.2")
                                        {
                                            lbl_grpid = "";
                                            lbl_RegNumber = "";
                                            lbl_student_id = lbl_rollno;
                                        }
                                        DataRow dr = dataTable.NewRow();
                                        dr["rec_id"] = "0";
                                        dr["type"] = type;
                                        dr["vch_date"] = currdate;
                                        dr["client_id"] = clientid_mst;
                                        dr["client_unit_id"] = unitid_mst;
                                        dr["vch_num"] = vch_num.Trim();
                                        dr["family_grp_id"] = lbl_grpid;
                                        dr["Class_Id"] = lbl_Class_id;
                                        dr["RegNo"] = lbl_RegNumber;
                                        dr["Receipt_Academic_year_Id"] = Ac_Year_id;
                                        dr["Receipt_Number"] = tm.Col51;
                                        dr["Receipt_No"] = tm.Col17;
                                        dr["Receipt_Date"] = vch_date;
                                        dr["Academic_year_Id"] = Ac_Year_id;
                                        dr["month_id"] = lbl_month_id;
                                        dr["month_name"] = lbl_Month_Name;
                                        dr["student_id"] = lbl_student_id;
                                        dr["Frequency_Id"] = lbl_Frequency_Id;
                                        dr["Fee_Head_id"] = lbl_FeeHead_Id;
                                        dr["Fee_type_id"] = lbl_FeeType_Id;
                                        dr["due_amount"] = due_amt;
                                        dr["Receipt_Amount"] = receiptamountt;
                                        dr["Mode_of_Payment"] = tm.SelectedItems1.FirstOrDefault();
                                        dr["Ent_By"] = userid_mst;
                                        dr["Ent_Date"] = currdate;
                                        dr["Type"] = type;
                                        dr["vch_num"] = vch_num;
                                        dr["vch_date"] = vch_date;
                                        dr["client_id"] = clientid_mst;
                                        dr["client_unit_id"] = unitid_mst;
                                        dr["Section_Id"] = lbl_section_id;
                                        dr["Concession_Amount"] = lbl_concession;
                                        dr["Scholarshiptype"] = lbl_scholarshiptype;
                                        dr["cmt_date"] = cm_date;
                                        dr["Remarks"] = tm.Col23;
                                        dr["Ref_no"] = tm.Col27;
                                        dr["duedt"] = DateTime.ParseExact(lbl_duedate, sgen.Getdateformat(), CultureInfo.InvariantCulture).ToString(sgen.GetSaveDateFormat(), CultureInfo.InvariantCulture);
                                        dataTable.Rows.Add(dr);
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, "student_receipt_detail", tm.Col8, isedit);
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        if (tm.Col14.ToString() == "7019.2")
                        {
                            string xstatus = "";
                            if (tm.Col55 == "0")
                            {
                                xstatus = "Approved";
                            }
                            else
                            {
                                xstatus = "UnApproved";
                            }
                            sgen.execute_cmd(userCode, "Update student_receipt_detail set Fee_Status='" + xstatus + "'  where Student_Id='" + lbl_student_id + "' and regno='0' and Academic_year_Id='" + Ac_Year_id + "'    and client_unit_id='" + unitid_mst + "'		");
                        }
                        else if (tm.Col14.ToString() == "7019.5")
                        {
                            string SMS = "", Email = "";
                            string smsid = "000008";// SMS On Submit fee
                            string emailid = "", phoneno = "";
                            string[] config = sgen.get_config(userCode, "000008", clientid_mst, unitid_mst, "SMS");
                            if (config.Length > 1)
                            {
                                SMS = config[0].ToString(); Email = config[1].ToString();
                                var new_list = tm.LTM1.Where(m => Convert.ToDecimal(m.Col14) > 0).ToList();
                                for (int g = 0; g < new_list.Count; g++)
                                {
                                    {
                                        string msgtxt = "";
                                        emailid = new_list[g].Col60;
                                        phoneno = new_list[g].Col61;
                                        msgtxt = "Thanks for depositing Fees of " + new_list[g].Col1 + " Of Amount " + new_list[g].Col14 + " On Receipt Number " + tm.Col17 + "";
                                        //string smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, phoneno, msgtxt);
                                        if (SMS == "1")
                                        {
                                            //sendmsg
                                        }
                                        if (Email == "1")
                                        {
                                            //sendemail
                                        }
                                    }
                                }
                            }
                        }
                        ViewBag.scripCall = "showmsgJS(2, 'Data Saved Successfully. Do You Want To Print', 1);";
                        string vchdate = sgen.server_datetime_local(userCode);
                        string title = "", xtype = "", lbl_rece = "", Rec_amt = "", Col54 = "";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col22 = tm.Col22,
                            Col18 = vchdate,
                            Col24 = vchdate,
                            Col9 = tm.Col9,
                            Col52 = "S",
                            Col50 = tm.Col50,
                            Col53 = "Registration No.",
                            Col54 = tm.Col54,
                            Col13 = "Save",
                            Col58 = tm.Col58,
                            Col12 = type,
                            TList1 = mod1,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col62 = tm.Col62,
                            Col39 = tm.Col39,
                        }
                            );
                        sgen.SetSession(MyGuid, "RFeeType", "S");
                        model = receipt_pattern(model);
                    }
                END:;
                }
                else if (command == "hfbtnyes")
                {
                    sgen.FeeReceiptRpt(userCode, clientid_mst, unitid_mst, Ac_Year_id, model[0].Col39);
                    // ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_Viewer.aspx','95%','900px','Reports');";
                    ViewBag.scripCall += "showRptnew('Student Fees Reciept');";
                }
                TempData[MyGuid + "_Tlist1"] = model[0].TList1;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }

        public ActionResult fee_receipt_new()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();
            string rpt = "";
            try
            {
                FillMst();
                chkRef();
                ViewBag.scripCall = "enableForm();";
                mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
                m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
                List<SelectListItem> mod1 = new List<SelectListItem>();
                Tmodelmain tm1 = new Tmodelmain();
                string Rdb = "S";
                //mid_mst = "7019.2"; m_id_mst = "7019.2";
                tm1.Col14 = mid_mst.Trim();
                tm1.Col15 = m_id_mst.Trim();
                tm1.Col10 = "";
                tm1.Col13 = "Save";
                tm1.Col100 = "Save & New";
                tm1.Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                sgen.SetSession(MyGuid, "Rpt_Menuid", mid_mst);
                sgen.SetSession(MyGuid, "RFeeType", "S");
                string vchdate = sgen.server_datetime_local(userCode);
                string title = "", xtype = "", lbl_rece = "", Rec_amt = "", Col54 = "", Col22 = "";
                string col53 = "";
                sgen.SetSession(MyGuid, "Parent_Fee", "YN");
                if (mid_mst == "7019.12")//regular fee
                {
                    title = "FEE RECEIPT";
                    type = "ERD";
                    lbl_rece = "Receiving Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "16000.5.2")//library fee
                {
                    title = "LIBRARY FEE RECEIPT";
                    type = "ERD";
                    lbl_rece = "Receiving Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.6") //concession 
                {
                    title = "FEE CONCESSION";
                    type = "ERC";
                    lbl_rece = "Concession Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.8")
                {
                    title = "FEE REVERSAL";
                    type = "ERD";
                    lbl_rece = "Reverse Amount";
                    Rec_amt = "N";
                    Col54 = "Total Paid Amount";
                    Col22 = "2";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.11")
                {
                    title = "CONCESSION REVERSAL";
                    type = "ERC";
                    lbl_rece = "Reverse Amount";
                    Rec_amt = "N";
                    Col54 = "Total Paid Amount";
                    Col22 = "2";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.10")
                {
                    title = "FEE WAIVE OFF FOR MID TERM JOINING";
                    type = "ERW";
                    lbl_rece = "Mid Term Concession Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                }
                else if (mid_mst == "7019.2")
                {
                    title = "ADMISSION FEES RECEIPT";
                    type = "ERD";
                    lbl_rece = "Receiving Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    sgen.SetSession(MyGuid, "RFeeType", "A");
                    Rdb = "A";
                    col53 = "Temp Student No.";
                }

                else if (mid_mst == "13000.8")//Parent fee
                {
                    title = "FEE REPORT";
                    type = "ERD";
                    lbl_rece = "Receiving Amount";
                    Rec_amt = "P";
                    Col54 = "Total Due Fees";
                    Col22 = "0";
                    col53 = "Registration No.";
                    sgen.SetSession(MyGuid, "Parent_Fee", "Y");
                }
                rpt = sgen.seekval(userCode, "select client_name from master_setting where type='FRF'  and classid='1'", "client_name");
                string receipt_format = sgen.seekval(userCode, "select master_name from master_setting where type='FRF'  and classid='1'", "master_name");
                tm1.Col9 = title;
                tm1.Col12 = type;
                tm1.Col50 = Rec_amt;
                tm1.Col18 = vchdate;
                tm1.Col24 = vchdate;
                tm1.Col22 = Col22;
                tm1.Col23 = "";
                tm1.Col52 = Rdb;
                tm1.Col62 = "N";
                tm1.Col53 = "Registration No.";
                tm1.Col54 = Col54;
                tm1.Col58 = lbl_rece;
                tm1.Col53 = col53;
                tm1.TList1 = mod1;
                tm1.SelectedItems1 = new string[] { "" };
                tm1.Col38 = receipt_format;
                tm1.Col39 = rpt;
                #region mode of payment
                tm1.SelectedItems1 = new string[] { "" };
                TempData[MyGuid + "_Tlist1"] = tm1.TList1 = mod1 = cmd_Fun.Modeofpayment(userCode, unitid_mst);

                //TempData[MyGuid + "_Tlist1"] = tm1.TList1 = mod1;
                #endregion
                //tm1.TList1 = mod1;
                model.Add(tm1);
                model = receipt_pattern(model);
            }
            catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 2);"; }
            if (rpt == "")
            {
                ViewBag.scripCall = "showmsgJS(1, 'Please Set Report Template In Template Master', 2);";
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult fee_receipt_new(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                if (command == null || command == "") { command = "REG"; }
                List<SelectListItem> mod1 = new List<SelectListItem>();
                mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                model[0].TList1 = mod1;
                if (command == "Cancel")
                {
                    sgen.SetSession(MyGuid, "btnval", null);
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Submit")
                {
                    var tm = model.FirstOrDefault();
                    tm.Col8 = "";
                    bool data = false;

                    string type = tm.Col12;
                    mid_mst = tm.Col14;
                    isedit = false;
                    string vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from student_receipt_detail where type='" + type + "'  and client_unit_id='" + unitid_mst + "'", 6, "max");


                    string query = "";
                    String User_Id = "";
                    string vch_date = sgen.Savedate(tm.Col18, false);
                    string cm_date = sgen.Make_date_S(tm.Col24.Trim());
                    string dt = sgen.SaveDate_dt(tm.Col18, false).ToString("yyyyMMdd");
                    string url = clientid_mst + unitid_mst + vch_num + dt + "" + type + "";
                    sgen.SetSession(MyGuid, "SSEEKVAL", url);
                    //CheckSetting();
                    //receipt();
                    if (tm.Col17 == "")
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "showmsg(1,'Please Enter Receipt Number',2);";
                        goto END;
                    }
                    model = receipt_pattern(model);
                    string Receipt_Master_Id = "";
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dataTable = dataTable = cmd_Fun.GetStructure(userCode, "student_receipt_detail");
                    string lbl_student_id = "";
                    for (int g = 0; g < tm.LTM1.Count; g++)
                    {
                        //Repeater FeeRepeater = (Repeater)Fee_grp.Items[g].FindControl("FeeRepeater");
                        string lbl_grpid = tm.LTM1[g].Col2;
                        lbl_student_id = tm.LTM1[g].Col3;
                        string lbl_rollno = tm.LTM1[g].Col4;
                        string lbl_section_id = tm.LTM1[g].Col5;
                        string lbl_Class_id = tm.LTM1[g].Col6;
                        string lbl_RegNumber = tm.LTM1[g].Col7;
                        for (Int32 h = 0; h < tm.LTM1[g].LTM1.Count; h++)
                        {
                            string lbl_month_id = tm.LTM1[g].LTM1[h].Col1;
                            string lbl_Month_Name = tm.LTM1[g].LTM1[h].Col2;
                            string lbl_Fee_Amount = tm.LTM1[g].LTM1[h].Col12;
                            string lbl_hideamt = tm.LTM1[g].LTM1[h].Col19;
                            string Txt_Receipt_amt = tm.LTM1[g].LTM1[h].Col16;
                            {
                                #region ERD
                                decimal totalamount = 0;
                                for (Int32 k = 0; k < tm.LTM1[g].LTM1[h].LTM1.Count; k++)
                                {
                                    decimal Receiptamount = 0;
                                    String lbl_FrequencyName = tm.LTM1[g].LTM1[h].LTM1[k].Col4;
                                    String lbl_Frequency_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col1;
                                    String lbl_FeeType_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col13;
                                    String lbl_FeeTypeName = tm.LTM1[g].LTM1[h].LTM1[k].Col14;
                                    String lbl_FeeHead_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col15;
                                    String lbl_HeadName = tm.LTM1[g].LTM1[h].LTM1[k].Col16;
                                    String lbl_paid = tm.LTM1[g].LTM1[h].LTM1[k].Col20;
                                    String lbl_Fee_Amount_detail = tm.LTM1[g].LTM1[h].LTM1[k].Col18;
                                    String Txt_Receipt = tm.LTM1[g].LTM1[h].LTM1[k].Col22;
                                    String lbl_Intial = tm.LTM1[g].LTM1[h].LTM1[k].Col5;
                                    String lbl_concession = tm.LTM1[g].LTM1[h].LTM1[k].Col19;
                                    String lbl_scholarshiptype = tm.LTM1[g].LTM1[h].LTM1[k].Col6;
                                    String lbl_duedate = tm.LTM1[g].LTM1[h].LTM1[k].Col17;
                                    String lbl_overdue = tm.LTM1[g].LTM1[h].LTM1[k].Col26;
                                    Decimal due_amt = sgen.Make_decimal(tm.LTM1[g].LTM1[h].LTM1[k].Col18.ToString());
                                    string lbl_Chequeno = tm.LTM1[g].LTM1[h].LTM1[k].Col23;
                                    string chk_payment = tm.LTM1[g].LTM1[h].LTM1[k].Col25;
                                    string Txt_payment = tm.LTM1[g].LTM1[h].LTM1[k].Col24;
                                    string receiptamountt = "0";
                                    decimal diffamt = 0;
                                    if (tm.Col50 == "N")
                                    {
                                        Receiptamount = sgen.Make_decimal(Txt_Receipt);
                                        Txt_Receipt = Convert.ToString(-Receiptamount);
                                    }
                                    diffamt = Convert.ToDecimal(lbl_Fee_Amount_detail) -
                                    (Convert.ToDecimal(lbl_concession) +
                                    Convert.ToDecimal(lbl_paid) +
                                    Convert.ToDecimal(Txt_Receipt));
                                    try
                                    {
                                        if (Txt_Receipt.Contains(','))
                                        {
                                        }
                                        else
                                        {
                                            receiptamountt = Txt_Receipt;
                                        }
                                        Receiptamount = Convert.ToDecimal(receiptamountt);
                                    }
                                    catch { }
                                    string lbl_balance = tm.LTM1[g].LTM1[h].LTM1[k].Col21;
                                    string xlbl_Chequeno = "";
                                    if ((model[0].Col14 == "7019.8") || (model[0].Col14 == "7019.11"))
                                    {
                                        if (diffamt < 0)
                                        {
                                            diffamt = 0;
                                        }
                                    }
                                    if ((chk_payment == "1" && diffamt > 0) || (chk_payment == "1" && diffamt == 0))
                                    {
                                        if (model[0].Col14 == "7019.2")
                                        {
                                            lbl_grpid = "";
                                            lbl_RegNumber = "";
                                            lbl_student_id = lbl_rollno;
                                        }
                                        DataRow dr = dataTable.NewRow();
                                        dr["rec_id"] = "0";
                                        dr["type"] = type;
                                        dr["vch_date"] = currdate;
                                        dr["client_id"] = clientid_mst;
                                        dr["client_unit_id"] = unitid_mst;
                                        dr["vch_num"] = vch_num.Trim();
                                        dr["family_grp_id"] = lbl_grpid;
                                        dr["Class_Id"] = lbl_Class_id;
                                        dr["RegNo"] = lbl_RegNumber;
                                        dr["Receipt_Academic_year_Id"] = Ac_Year_id;
                                        dr["Receipt_Number"] = tm.Col51;
                                        dr["Receipt_No"] = tm.Col17;
                                        dr["Receipt_Date"] = vch_date;
                                        dr["Academic_year_Id"] = Ac_Year_id;
                                        dr["month_id"] = lbl_month_id;
                                        dr["month_name"] = lbl_Month_Name;
                                        dr["student_id"] = lbl_student_id;
                                        dr["Frequency_Id"] = lbl_Frequency_Id;
                                        dr["Fee_Head_id"] = lbl_FeeHead_Id;
                                        dr["Fee_type_id"] = lbl_FeeType_Id;
                                        dr["due_amount"] = due_amt;
                                        dr["Receipt_Amount"] = receiptamountt;
                                        dr["Mode_of_Payment"] = tm.SelectedItems1.FirstOrDefault();
                                        dr["Ent_By"] = userid_mst;
                                        dr["Ent_Date"] = currdate;
                                        dr["Type"] = type;
                                        dr["vch_num"] = vch_num;
                                        dr["vch_date"] = vch_date;
                                        dr["client_id"] = clientid_mst;
                                        dr["client_unit_id"] = unitid_mst;
                                        dr["Section_Id"] = lbl_section_id;
                                        dr["Concession_Amount"] = lbl_concession;
                                        dr["Scholarshiptype"] = lbl_scholarshiptype;
                                        dr["cmt_date"] = cm_date;
                                        dr["Remarks"] = tm.Col23;
                                        dr["Ref_no"] = tm.Col27;
                                        dr["duedt"] = DateTime.ParseExact(lbl_duedate, sgen.Getdateformat(), CultureInfo.InvariantCulture).ToString(sgen.GetSaveDateFormat(), CultureInfo.InvariantCulture);
                                        dataTable.Rows.Add(dr);
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, "student_receipt_detail", tm.Col8, isedit);
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        #region concession with regular fees

                        if (tm.Col14 == "7019.12")
                        {
                            if (model[0].Col63 != null)
                            {
                                type = "ERC";

                                vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from student_receipt_detail where type='" + type + "'  and client_unit_id='" + unitid_mst + "'", 6, "max");
                                model = receipt_pattern(model);
                                Receipt_Master_Id = "";
                                dataTable = dataTable = cmd_Fun.GetStructure(userCode, "student_receipt_detail");
                                lbl_student_id = "";

                                for (int g = 0; g < tm.LTM1.Count; g++)
                                {
                                    //Repeater FeeRepeater = (Repeater)Fee_grp.Items[g].FindControl("FeeRepeater");
                                    string lbl_grpid = tm.LTM1[g].Col2;
                                    lbl_student_id = tm.LTM1[g].Col3;
                                    string lbl_rollno = tm.LTM1[g].Col4;
                                    string lbl_section_id = tm.LTM1[g].Col5;
                                    string lbl_Class_id = tm.LTM1[g].Col6;
                                    string lbl_RegNumber = tm.LTM1[g].Col7;
                                    for (Int32 h = 0; h < tm.LTM1[g].LTM1.Count; h++)
                                    {
                                        string lbl_month_id = tm.LTM1[g].LTM1[h].Col1;
                                        string lbl_Month_Name = tm.LTM1[g].LTM1[h].Col2;
                                        string lbl_Fee_Amount = tm.LTM1[g].LTM1[h].Col12;
                                        string lbl_hideamt = tm.LTM1[g].LTM1[h].Col19;
                                        string Txt_Receipt_amt = tm.LTM1[g].LTM1[h].Col16;
                                        {
                                            #region ERD
                                            decimal totalamount = 0;
                                            for (Int32 k = 0; k < tm.LTM1[g].LTM1[h].LTM1.Count; k++)
                                            {
                                                decimal Receiptamount = 0;
                                                String lbl_FrequencyName = tm.LTM1[g].LTM1[h].LTM1[k].Col4;
                                                String lbl_Frequency_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col1;
                                                String lbl_FeeType_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col13;
                                                String lbl_FeeTypeName = tm.LTM1[g].LTM1[h].LTM1[k].Col14;
                                                String lbl_FeeHead_Id = tm.LTM1[g].LTM1[h].LTM1[k].Col15;
                                                String lbl_HeadName = tm.LTM1[g].LTM1[h].LTM1[k].Col16;
                                                String lbl_paid = tm.LTM1[g].LTM1[h].LTM1[k].Col20;
                                                String lbl_Fee_Amount_detail = tm.LTM1[g].LTM1[h].LTM1[k].Col18;
                                                String Txt_Receipt = tm.LTM1[g].LTM1[h].LTM1[k].Col66;
                                                String lbl_Intial = tm.LTM1[g].LTM1[h].LTM1[k].Col5;
                                                String lbl_concession = tm.LTM1[g].LTM1[h].LTM1[k].Col19;
                                                String lbl_scholarshiptype = tm.LTM1[g].LTM1[h].LTM1[k].Col6;
                                                String lbl_duedate = tm.LTM1[g].LTM1[h].LTM1[k].Col17;
                                                String lbl_overdue = tm.LTM1[g].LTM1[h].LTM1[k].Col26;
                                                Decimal due_amt = sgen.Make_decimal(tm.LTM1[g].LTM1[h].LTM1[k].Col18.ToString());
                                                string lbl_Chequeno = tm.LTM1[g].LTM1[h].LTM1[k].Col23;
                                                string chk_payment = tm.LTM1[g].LTM1[h].LTM1[k].Col25;
                                                string Txt_payment = tm.LTM1[g].LTM1[h].LTM1[k].Col24;
                                                string receiptamountt = "0";
                                                decimal diffamt = 0;
                                                if (tm.Col50 == "N")
                                                {
                                                    Receiptamount = sgen.Make_decimal(Txt_Receipt);
                                                    Txt_Receipt = Convert.ToString(-Receiptamount);
                                                }
                                                diffamt = Convert.ToDecimal(lbl_Fee_Amount_detail) -
                                                (Convert.ToDecimal(lbl_concession) +
                                                Convert.ToDecimal(lbl_paid) +
                                                Convert.ToDecimal(Txt_Receipt));
                                                try
                                                {
                                                    if (Txt_Receipt.Contains(','))
                                                    {
                                                    }
                                                    else
                                                    {
                                                        receiptamountt = Txt_Receipt;
                                                    }
                                                    Receiptamount = Convert.ToDecimal(receiptamountt);
                                                }
                                                catch { }
                                                string lbl_balance = tm.LTM1[g].LTM1[h].LTM1[k].Col21;
                                                string xlbl_Chequeno = "";
                                                //if ((model[0].Col14 == "7019.8") || (model[0].Col14 == "7019.11"))
                                                //{
                                                //    if (diffamt < 0)
                                                //    {
                                                //        diffamt = 0;
                                                //    }
                                                //}
                                                if ((chk_payment == "1" && diffamt > 0) || (chk_payment == "1" && diffamt == 0))
                                                {

                                                    DataRow dr = dataTable.NewRow();
                                                    dr["rec_id"] = "0";
                                                    dr["type"] = type;
                                                    dr["vch_date"] = currdate;
                                                    dr["client_id"] = clientid_mst;
                                                    dr["client_unit_id"] = unitid_mst;
                                                    dr["vch_num"] = vch_num.Trim();
                                                    dr["family_grp_id"] = lbl_grpid;
                                                    dr["Class_Id"] = lbl_Class_id;
                                                    dr["RegNo"] = lbl_RegNumber;
                                                    dr["Receipt_Academic_year_Id"] = Ac_Year_id;
                                                    dr["Receipt_Number"] = tm.Col51;
                                                    dr["Receipt_No"] = tm.Col17;
                                                    dr["Receipt_Date"] = vch_date;
                                                    dr["Academic_year_Id"] = Ac_Year_id;
                                                    dr["month_id"] = lbl_month_id;
                                                    dr["month_name"] = lbl_Month_Name;
                                                    dr["student_id"] = lbl_student_id;
                                                    dr["Frequency_Id"] = lbl_Frequency_Id;
                                                    dr["Fee_Head_id"] = lbl_FeeHead_Id;
                                                    dr["Fee_type_id"] = lbl_FeeType_Id;
                                                    dr["due_amount"] = due_amt;
                                                    dr["Receipt_Amount"] = receiptamountt;
                                                    dr["Mode_of_Payment"] = tm.SelectedItems1.FirstOrDefault();
                                                    dr["Ent_By"] = userid_mst;
                                                    dr["Ent_Date"] = currdate;
                                                    dr["Type"] = type;
                                                    dr["vch_num"] = vch_num;
                                                    dr["vch_date"] = vch_date;
                                                    dr["client_id"] = clientid_mst;
                                                    dr["client_unit_id"] = unitid_mst;
                                                    dr["Section_Id"] = lbl_section_id;
                                                    dr["Concession_Amount"] = lbl_concession;
                                                    dr["Scholarshiptype"] = lbl_scholarshiptype;
                                                    dr["cmt_date"] = cm_date;
                                                    dr["Remarks"] = tm.Col23;
                                                    dr["Ref_no"] = tm.Col27;
                                                    dr["duedt"] = DateTime.ParseExact(lbl_duedate, sgen.Getdateformat(), CultureInfo.InvariantCulture).ToString(sgen.GetSaveDateFormat(), CultureInfo.InvariantCulture);
                                                    dataTable.Rows.Add(dr);
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                Result = sgen.Update_data(userCode, dataTable, "student_receipt_detail", tm.Col8, isedit);

                            }
                        }
                        #endregion
                        if (tm.Col14.ToString() == "7019.2")
                        {
                            string xstatus = "";
                            if (tm.Col55 == "0")
                            {
                                xstatus = "Approved";
                            }
                            else
                            {
                                xstatus = "UnApproved";
                            }
                            sgen.execute_cmd(userCode, "Update student_receipt_detail set Fee_Status='" + xstatus + "'  where Student_Id='" + lbl_student_id + "' and regno='0' and Academic_year_Id='" + Ac_Year_id + "'    and client_unit_id='" + unitid_mst + "'		");
                        }
                        else if (tm.Col14.ToString() == "7019.12")
                        {
                            string SMS = "", Email = "";
                            string smsid = "000008";// SMS On Submit fee
                            string emailid = "", phoneno = "";
                            string[] config = sgen.get_config(userCode, "000008", clientid_mst, unitid_mst, "SMS");
                            if (config.Length > 1)
                            {
                                SMS = config[0].ToString(); Email = config[1].ToString();
                                var new_list = tm.LTM1.Where(m => Convert.ToDecimal(m.Col14) > 0).ToList();
                                for (int g = 0; g < new_list.Count; g++)
                                {
                                    {
                                        string msgtxt = "";
                                        emailid = new_list[g].Col60;
                                        phoneno = new_list[g].Col61;
                                        msgtxt = "Thanks for depositing Fees of " + new_list[g].Col1 + " Of Amount " + new_list[g].Col14 + " On Receipt Number " + tm.Col17 + "";
                                        //string smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, phoneno, msgtxt);
                                        if (SMS == "1")
                                        {
                                            //sendmsg
                                        }
                                        if (Email == "1")
                                        {
                                            //sendemail
                                        }
                                    }
                                }
                            }
                        }
                        ViewBag.scripCall = "showmsgJS(2, 'Data Saved Successfully. Do You Want To Print', 1);";
                        string vchdate = sgen.server_datetime_local(userCode);
                        string title = "", xtype = "", lbl_rece = "", Rec_amt = "", Col54 = "";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col22 = tm.Col22,
                            Col18 = vchdate,
                            Col24 = vchdate,
                            Col9 = tm.Col9,
                            Col52 = "S",
                            Col50 = tm.Col50,
                            Col53 = "Registration No.",
                            Col54 = tm.Col54,
                            Col13 = "Save",
                            Col58 = tm.Col58,
                            Col12 = type,
                            TList1 = mod1,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col62 = tm.Col62,
                            Col39 = tm.Col39,
                        }
                            );
                        sgen.SetSession(MyGuid, "RFeeType", "S");
                        model = receipt_pattern(model);
                    }
                END:;
                }
                else if (command == "hfbtnyes")
                {
                    sgen.FeeReceiptRpt(userCode, clientid_mst, unitid_mst, Ac_Year_id, model[0].Col39);
                    //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_XML.aspx','95%','900px','Reports');";
                    ViewBag.scripCall += "showRptnew('Student Fees Reciept');";
                }
                TempData[MyGuid + "_Tlist1"] = model[0].TList1;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }

        #endregion
        #region student_attendance
        public ActionResult student_attendence()
        {
            FillMst();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<Tmodelmain> model = new List<Tmodelmain>();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            sgen.SetSession(MyGuid, "Class_Id", null);
            sgen.SetSession(MyGuid, "Section_Id", null);
            model = getload(model);
            string title = "";
            if (mid_mst == "7021.6")
            {
                title = "TEACHER ATTENDANCE";
                type = "TEA";
            }
            else if (mid_mst == "7015.1")
            {
                title = "STUDENT ATTENDANCE";
                type = "STD";
            }
            sgen.SetSession(MyGuid, "R_ATT", type);
            //model.Add(new Tmodelmain
            //{
            //model[0].Col1 = "",
            model[0].TList1 = model[0].TList2 = model[0].TList3 = mod1;
            //model[0].TList2 = mod1;
            //model[0].TList3 = mod1;
            model[0].SelectedItems1 = model[0].SelectedItems2 = model[0].SelectedItems3 = new string[] { "" };
            //model[0].SelectedItems2 = new string[] { "" };
            //model[0].SelectedItems3 = new string[] { "" };
            model[0].Col9 = title;
            model[0].Col10 = type;
            model[0].Col30 = "enable";
            //model[0].Col13 = "Save",
            //model[0].Col14 = mid_mst,
            //model[0].Col15 = m_id_mst
            //}
            //    );
            return View(model);
        }
        public List<Tmodelmain> new_student_attendence(List<Tmodelmain> model)
        {
            try
            {
                sgen.SetSession(MyGuid, "EDMODE", "N");
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
                ViewBag.scripCall = "enableForm();";
                ViewBag.scripCall = "$('#txt_From').attr('disabled','disabled')";
                var tm = model.FirstOrDefault();
                model = new List<Tmodelmain>();
                model.Add(new Tmodelmain
                {
                    Col9 = tm.Col9,
                    Col30 = "enable",
                    Col10 = tm.Col10,
                    Col13 = tm.Col13,
                    Col14 = tm.Col14,
                    Col15 = tm.Col15,
                    Col100 = tm.Col100,
                    Col121 = tm.Col121,
                    Col122 = tm.Col122,
                    Col123 = tm.Col123,
                    Col16 = sgen.server_datetime_local(userCode),
                    Col17 = sgen.server_datetime_local(userCode),
                    TList1 = tm.TList1,
                    TList2 = tm.TList2,
                    TList3 = tm.TList3,
                    SelectedItems1 = new string[] { "" },
                    SelectedItems2 = new string[] { "" },
                    SelectedItems3 = new string[] { "" },
                });
                #region Class
                List<SelectListItem> mod1 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass_Actual(userCode, unitid_mst);

                #endregion
                #region BindSection
                DataTable dt2 = new DataTable();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);
                //TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                //model[0].TList2 = mod2;
                #endregion
                #region Department
                List<SelectListItem> mod3 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist3"] = mod3 = cmd_Fun.dept(userCode, clientid_mst, unitid_mst);
                //TempData[MyGuid + "_Tlist3"] = mod3;
                #endregion
                string class_id = model[0].TList1[0].Value.ToString();
                string section_id = model[0].TList2[0].Value.ToString();
                string mq = "select to_char(max(Atten_Date),'" + sgen.Getsqldatetimeformat() + "') AS Atten_Date " +
                    " from student_attendance where Class_id='" + class_id + "' and Section_Id='" + section_id + "' and find_in_set(client_unit_id,'" + unitid_mst + "')=1 and type='STD' and academic_year_id='" + Ac_Year_id + "'";
                string atten_date = sgen.seekval(userCode, mq, "atten_date");
                DateTime Temacdate = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                if (atten_date != "0")
                {
                    DateTime Temattn = DateTime.ParseExact(atten_date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                    if ((atten_date != "") && (Temattn >= Temacdate))
                    {
                        model[0].Col16 = Temattn.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        model[0].Col17 = Temattn.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        model[0].Col16 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        model[0].Col17 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    }
                }
                else
                {
                    model[0].Col16 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    model[0].Col17 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                }
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                //model[0].TList3 = mod3;
                model[0].SelectedItems1 = new string[] { "" };
                model[0].SelectedItems2 = new string[] { "" };
                model[0].SelectedItems3 = new string[] { "" };

            }
            catch (Exception ex) { }
            return model;
        }

        [HttpPost]
        public ActionResult student_attendence(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                List<SelectListItem> mod11 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod11 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod12 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod12 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod13 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod13 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];

                if (sgen.GetSession(MyGuid, "Class_Id") == null)
                {
                    sgen.SetSession(MyGuid, "Class_Id", "");
                }
                if (sgen.GetSession(MyGuid, "Section_Id") == null) { sgen.SetSession(MyGuid, "Section_Id", ""); }
                tab_name = "student_attendance";
                type_desc = "";
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                string Room = "";
                if (command == "New")
                {
                    model = new_student_attendence(model);

                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    model[0].SelectedItems1 = new string[] { sgen.GetSession(MyGuid, "Class_Id").ToString() };
                    model[0].SelectedItems2 = new string[] { sgen.GetSession(MyGuid, "Section_Id").ToString() };
                    string currdate = sgen.server_datetime(userCode);
                    string vch_num = "", master_id = "";
                    string cond = "", title = "";
                    title = tmodel.Col9;
                    tmodel.Col30 = "disabled";
                    if (tmodel.Col9.ToString() == "TEACHER ATTENDANCE")
                    {
                        tmodel.Col10 = "TEA";
                    }
                    if (tmodel.Col9.ToString() == "STUDENT ATTENDANCE")
                    {
                        tmodel.Col10 = "STD";
                    }
                    type = tmodel.Col10;
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col3;
                    }
                    else
                    {
                        cond = "";
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + tab_name + " where  client_unit_id='" + unitid_mst + "' and type='" + type + "'", 6, "max");
                    }
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, tab_name);
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = type;
                        dr["vch_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["vch_num"] = vch_num.Trim();
                        dr["academic_year_id"] = Ac_Year_id;
                        dr["Class_id"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["student_id"] = model[i].Col24;
                        dr["month_id"] = model[i].Col25;
                        dr["month_name"] = model[i].Col26;
                        dr["section_id"] = model[0].SelectedItems2.FirstOrDefault();
                        dr["roll_no"] = model[i].Col27;
                        dr["atten_date"] = sgen.Make_date_S(model[i].Col21);
                        dr["first_half"] = model[i].Col22;
                        dr["second_half"] = model[i].Col23;
                        dr["reg_id"] = model[i].Col18;
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col1;
                            dr["ent_date"] = model[0].Col2;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, tab_name, tmodel.Col6, isedit);
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        try
                        {
                            if (model[0].Col14.ToString() == "7015.1")
                            {
                                string SMS = "", SMS2 = "", Email = "", Email2 = "", DetailSms = "0", DetailEmail = "0";
                                string smsid = "000001";//all sms
                                smsid = "000002";//only leave or absent sms
                                string emailid = "", phoneno = "", student_name = "";
                                string[] config = sgen.get_config(userCode, "000001", clientid_mst, unitid_mst, "SMS");
                                SMS = config[0].ToString(); Email = config[1].ToString(); DetailSms = config[2].ToString(); DetailEmail = config[3].ToString();
                                string[] config2 = sgen.get_config(userCode, "000002", clientid_mst, unitid_mst, "SMS");
                                SMS2 = config2[0].ToString(); Email2 = config2[1].ToString(); DetailSms = config2[2].ToString(); DetailEmail = config2[3].ToString();
                                //Detail = "1";
                                string class_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                                string section_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Text.ToString();
                                string smstl = "", smsp = "";
                                int totaldays = 1;
                                string fromdt = model[0].Col16;
                                string Todt = model[0].Col17;
                                DateTime from_dt = DateTime.ParseExact(fromdt, sgen.Getdateformat(), CultureInfo.InvariantCulture);
                                DateTime to_dt = DateTime.ParseExact(Todt, sgen.Getdateformat(), CultureInfo.InvariantCulture);
                                DateTime tempdate = from_dt;
                                if (fromdt != Todt)
                                {
                                    TimeSpan dtdiff = (to_dt - from_dt);
                                    var xtotaldays = dtdiff.TotalDays;
                                    totaldays = totaldays + Convert.ToInt32(xtotaldays);
                                }
                                string smsabsent = "";
                                string smsleave = "";
                                string smspresent = "";
                                BulkSMS bulk = new BulkSMS(userCode, clientid_mst, unitid_mst, MyGuid);
                                for (int d = 0; d < totaldays; d++)
                                {
                                    string nosA = "", emailA = "", nosp = "", nosl = "", emailp = "", emaill = "";
                                    string datenew = DateTime.ParseExact(model[0].Col16, sgen.Getdateformat(), CultureInfo.InvariantCulture).AddDays(d).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                                    //var abc = model.Where(m => m.Col5 == "date").ToList();
                                    var new_model = model.Where(m => m.Col21 == datenew).ToList();
                                    for (int k = 0; k < new_model.Count; k++)
                                    {
                                        emailid = new_model[k].Col28.ToString();
                                        phoneno = new_model[k].Col29.ToString();
                                        if ((DetailSms == "1") || (DetailEmail == "1"))
                                        {
                                            student_name = new_model[k].Col20.ToString();
                                            nosl = ""; nosA = ""; nosp = "";
                                        }
                                        #region SMS
                                        if (SMS == "1")//all
                                        {
                                            if (((new_model[k].Col22.ToString() == "L") || (new_model[k].Col23.ToString() == "L")) && (phoneno != "") && (phoneno != "-") && (phoneno != "0"))
                                            {
                                                nosl = nosl + "," + phoneno;
                                                smsleave = " D/P, Your Ward " + student_name + " in Class " + class_name + "-" + section_name + " is on leave on " + datenew + ".";
                                            }
                                            else if (((new_model[k].Col22.ToString() == "A") || (new_model[k].Col23.ToString() == "A")) && (phoneno != "") && (phoneno != "-") && (phoneno != "0"))
                                            {
                                                nosA = nosA + "," + phoneno;
                                                smsabsent = " D/P, Your Ward " + student_name + " in Class " + class_name + "-" + section_name + " is on Absent on " + datenew + ".";
                                                //send sms
                                            }
                                            else
                                            {
                                                if (((new_model[k].Col22.ToString() == "P") || (new_model[k].Col23.ToString() == "P")) && (phoneno != "") && (phoneno != "-") && (phoneno != "0"))
                                                {
                                                    nosp = nosp + "," + phoneno;
                                                    smspresent = " D/P, Your Ward " + student_name + " in Class " + class_name + "-" + section_name + " is Present on " + datenew + ".";
                                                }
                                            }
                                            //send sms
                                        }
                                        else if (SMS2 == "1")
                                        {
                                            if (((new_model[k].Col22.ToString() == "L") || (new_model[k].Col23.ToString() == "L")) && (phoneno != "") && (phoneno != "-") && (phoneno != "0"))
                                            {
                                                nosl = nosl + "," + phoneno;
                                                smsleave = " D/P, Your Ward " + student_name + " in Class " + class_name + "-" + section_name + " is on leave on " + datenew + ".";
                                                //send sms
                                            }
                                            else if (((new_model[k].Col22.ToString() == "A") || (new_model[k].Col23.ToString() == "A")) && (phoneno != "") && (phoneno != "-") && (phoneno != "0"))
                                            {
                                                nosA = nosA + "," + phoneno;
                                                smsabsent = " D/P, Your Ward " + student_name + " in Class " + class_name + "-" + section_name + " is on Absent on " + datenew + ".";
                                                //send sms
                                            }
                                        }
                                        if (DetailSms == "1")
                                        {
                                            try
                                            {
                                                if (nosp != "") { nosp = nosp.Substring(1); }
                                                if (nosl != "") { nosl = nosl.Substring(1); }
                                                if (nosA != "") { nosA = nosA.Substring(1); }
                                                string smsstatus = "";
                                                if ((nosl != "") && (smsleave != ""))
                                                {
                                                    //smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, nosl, smsleave);
                                                    bulk.Add_sms(nosl, smsleave);
                                                }
                                                if ((nosA != "") && (smsabsent != ""))
                                                {
                                                    //smsstatus = sgen.Send_Sms(userCode, clientid_mst, userid_mst, nosA, smsabsent);
                                                    bulk.Add_sms(nosA, smsabsent);
                                                }
                                                if ((nosp != "") && (smspresent != ""))
                                                {
                                                    //smsstatus = sgen.Send_Sms(userCode, clientid_mst, userid_mst, nosp, smspresent);
                                                    bulk.Add_sms(nosp, smspresent);
                                                }
                                            }
                                            catch (Exception ex) { }
                                        }
                                        #endregion
                                        #region Email
                                        if (Email == "1")//all
                                        {
                                            if (((new_model[k].Col22.ToString() == "L") || (new_model[k].Col23.ToString() == "L")) && (emailid != "") && (emailid != "-") && (emailid != "0"))
                                            {
                                                emaill = emaill + "," + emailid;
                                                //send Email
                                            }
                                            else if (((new_model[k].Col22.ToString() == "A") || (new_model[k].Col23.ToString() == "A")) && (emailid != "") && (emailid != "-") && (emailid != "0"))
                                            {
                                                emailA = emailA + "," + emailid;
                                                //send Email
                                            }
                                            else
                                            {
                                                if (((new_model[k].Col22.ToString() == "P") || (new_model[k].Col23.ToString() == "P")) && (emailid != "") && (emailid != "-") && (emailid != "0"))
                                                {
                                                    emailp = emailp + "," + emailid;
                                                    //send Email
                                                }
                                            }
                                        }
                                        else if (Email2 == "1")
                                        {
                                            if (((new_model[k].Col22.ToString() == "L") || (new_model[k].Col23.ToString() == "L")) && (emailid != "") && (emailid != "-") && (emailid != "0"))
                                            {
                                                emaill = emaill + "," + emailid;
                                                //send Email
                                            }
                                            else if (((new_model[k].Col22.ToString() == "A") || (new_model[k].Col23.ToString() == "A")) && (emailid != "") && (emailid != "-") && (emailid != "0"))
                                            {
                                                emailA = emailA + "," + emailid;
                                                //send Email
                                            }
                                        }
                                        if (DetailEmail == "1")
                                        {
                                            try
                                            {
                                                if (emaill != "") { emaill = emaill.Substring(1); }
                                                if (emailp != "") { emailp = emailp.Substring(1); }
                                                if (emailA != "") { emailA = emailA.Substring(1); }
                                            }
                                            catch (Exception ex) { }
                                        }
                                        #endregion
                                    }
                                    if (DetailSms == "1")
                                    {
                                        bulk.Send_SMS_Bulk();
                                    }
                                    if (DetailSms == "0")
                                    {
                                        try
                                        {
                                            if (nosp != "") { nosp = nosp.Substring(1); }
                                            if (nosl != "") { nosl = nosl.Substring(1); }
                                            if (nosA != "") { nosA = nosA.Substring(1); }
                                            string smsstatus = "";
                                            if ((nosl != "") && (smsleave != ""))
                                            {
                                                smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, nosl, smsleave, false);
                                            }
                                            if ((nosA != "") && (smsabsent != ""))
                                            {
                                                smsstatus = sgen.Send_Sms(userCode, clientid_mst, userid_mst, nosA, smsabsent, false);
                                            }
                                            if ((nosp != "") && (smspresent != ""))
                                            {
                                                smsstatus = sgen.Send_Sms(userCode, clientid_mst, userid_mst, nosp, smspresent, false);
                                            }
                                        }
                                        catch (Exception ex) { }
                                    }
                                    if (DetailEmail == "0")
                                    {
                                        try
                                        {
                                            if (emaill != "") { emaill = emaill.Substring(1); }
                                            if (emailp != "") { emailp = emailp.Substring(1); }
                                            if (emailA != "") { emailA = emailA.Substring(1); }
                                        }
                                        catch (Exception ex) { }
                                    }
                                }
                            }
                        }
                        catch { }
                        //ViewBag.scripCall = "showmsgJS(1, 'Data Saved Successfully', 1);disableForm();";
                        //ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        List<SelectListItem> mod1 = new List<SelectListItem>();
                        TempData[MyGuid + "_Tlist3"] = TempData[MyGuid + "_Tlist2"] = TempData[MyGuid + "_Tlist1"] = mod1;
                        //TempData[MyGuid + "_Tlist1"] = mod1;
                        //TempData[MyGuid + "_Tlist2"] = mod1;
                        //TempData[MyGuid + "_Tlist3"] = mod1;
                        sgen.SetSession(MyGuid, "Class_Id", null);
                        sgen.SetSession(MyGuid, "Section_Id", null);
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col17 = "",
                            Col1 = "",
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col9 = title,
                            TList1 = mod1,
                            TList2 = mod1,
                            TList3 = mod1,
                            Col30 = "disabled",
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_student_attendence(model);
                                ViewBag.scripCall = "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";

                            }
                            catch (Exception ex)
                            {
                                ViewBag.scripCall += "mytoast('error', 'toast-top-right', '" + ex.Message.ToString().Trim() + "');";
                            }
                        }
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Class")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    ViewBag.scripCall = "$('#txt_From').attr('disabled','disabled')";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    string class_id = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Value.ToString();
                    string section_id = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Value.ToString();
                    string mq = "select to_char( max(Atten_Date),'" + sgen.Getsqldatetimeformat() + "') AS Atten_Date " +
                        " from student_attendance where Class_id='" + class_id + "' and Section_Id='" + section_id + "' and client_unit_id='" + unitid_mst + "' and type='STD' and academic_year_id='" + Ac_Year_id + "'";
                    string atten_date = sgen.seekval(userCode, mq, "atten_date");
                    DateTime Temacdate = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                    if (atten_date != "0")
                    {
                        DateTime Temattn = DateTime.ParseExact(atten_date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                        if ((atten_date != "") && (Temattn >= Temacdate))
                        {
                            model[0].Col16 = Temattn.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                            model[0].Col17 = Temattn.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            model[0].Col16 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                            model[0].Col17 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        }
                    }
                    else
                    {
                        model[0].Col16 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        model[0].Col17 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    }
                    var tmmm = model.FirstOrDefault();
                    model = new List<Tmodelmain>();
                    tmmm.Col18 = "";
                    tmmm.Col19 = "";
                    tmmm.Col20 = "";
                    tmmm.Col21 = "";
                    tmmm.Col22 = "";
                    tmmm.Col23 = "";
                    model.Add(tmmm);
                }
                else if (command == "Section")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    ViewBag.scripCall = "$('#txt_From').attr('disabled','disabled')";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    string class_id = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Value.ToString();
                    string section_id = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Value.ToString();
                    string mq = "select to_char( max(Atten_Date,'" + sgen.Getsqldatetimeformat() + "') AS Atten_Date " +
                        " from student_attendance where Class_id='" + class_id + "' and Section_Id='" + section_id + "' and client_unit_id='" + unitid_mst + "' and type='STD'";
                    string atten_date = sgen.seekval(userCode, mq, "atten_date");
                    DateTime Temacdate = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                    if (atten_date != "0")
                    {
                        DateTime Temattn = DateTime.ParseExact(atten_date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                        if ((atten_date != "") && (Temattn >= Temacdate))
                        {
                            model[0].Col16 = Temattn.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                            model[0].Col17 = Temattn.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            model[0].Col16 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                            model[0].Col17 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        }
                    }
                    else
                    {
                        model[0].Col16 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        model[0].Col17 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    }
                    var tmmm = model.FirstOrDefault();
                    model = new List<Tmodelmain>();
                    tmmm.Col18 = "";
                    tmmm.Col19 = "";
                    tmmm.Col20 = "";
                    tmmm.Col21 = "";
                    tmmm.Col22 = "";
                    tmmm.Col23 = "";
                    model.Add(tmmm);
                }
                else if (command == "Fill Data")
                {

                    string fromdt = model[0].Col16;
                    string Todt = model[0].Col17;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (sgen.SaveDate_dt(Todt, false) > sgen.server_datetime_dt_local(userCode))
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Attendance Cant Be Save In Future Date', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                    }
                    DataTable dt = new DataTable();
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    String Class_Id = string.Join(",", model[0].SelectedItems1);
                    String Section_Id = string.Join(",", model[0].SelectedItems2);
                    //String dept = string.Join(",", model[0].SelectedItems3);
                    sgen.SetSession(MyGuid, "Class_Id", Class_Id);
                    sgen.SetSession(MyGuid, "Section_Id", Section_Id);
                    DateTime from_dt = DateTime.ParseExact(fromdt, sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    DateTime to_dt = DateTime.ParseExact(Todt, sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    DateTime tempdate = from_dt;
                    var tm = model.FirstOrDefault();
                    DataTable datatable = new DataTable();
                    #region Student
                    if (tm.Col14 == "7015.1")
                    {
                        #region check holiday or Weekly Off

                        mq = "SELECT to_char(Holiday_frm,'" + sgen.Getsqldateformat() + "') as Holiday_frm, to_char(Holiday_to,'" + sgen.Getsqldateformat() + "')" +
                        " as Holiday_to , convert_tz( Holiday_frm,'UTC','" + sgen.Gettimezone() + "') as frmdt, convert_tz( Holiday_to,'UTC','" + sgen.Gettimezone() + "') as todt FROM holiday_master" +
                  " WHERE  (to_date(to_char(Holiday_frm,'" + sgen.Getsqldateformat() + "'), " +
                  "'" + sgen.Getsqldateformat() + "') between to_date('" + fromdt + "','" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "','" + sgen.Getsqldateformat() + "')" +
                  " or to_date(to_char(Holiday_to,'" + sgen.Getsqldateformat() + "')," +
                  " '" + sgen.Getsqldateformat() + "')  between to_date('" + fromdt + "','" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "','" + sgen.Getsqldateformat() + "'))" +
                  " and IsStudent_Holiday=true and type='STD' and class='" + Class_Id + "' and academic_year_id='" + Ac_Year_id + "'" +
                  " and client_unit_id='" + unitid_mst + "'";
                        DataTable dtholiday = sgen.getdata(userCode, mq);

                        DataTable dtweeklyoff = sgen.getdata(userCode, "select * from add_class where add_class_id='" + Class_Id + "' and client_unit_id='" + unitid_mst + "'");
                        bool ok1 = false;
                        do
                        {
                            try
                            {
                                var g = dtholiday.AsEnumerable().Where(w => ((DateTime)w["frmdt"]).Date <= tempdate.Date && ((DateTime)w["todt"]).Date >= tempdate.Date)
                                                                      .Select(s => s).CopyToDataTable();
                                ok1 = false;
                            }
                            catch (Exception err)
                            {
                                ok1 = true;
                            }
                            if (ok1)
                            {
                                string dayname = tempdate.ToString("dddd");
                                try
                                {
                                    var a = sgen.seekval_dt(dtweeklyoff, "Is" + dayname + "=1", "Is" + dayname);
                                    if (a == "0") ok1 = true;
                                    else ok1 = false;
                                }
                                catch (Exception err) { }
                            }
                            tempdate = tempdate.AddDays(1);
                            if (ok1) break;
                        }
                        while (tempdate <= to_dt);
                        if (!ok1)
                        {
                            ViewBag.scripCall = "enableForm();";
                            ViewBag.scripCall = "showmsgJS(1, 'Weekly off Or Holiday Exists Between Selected Dates', 2);";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            goto END;
                        }
                        #endregion
                        //mq = "select  lpad(to_char(a.atten_date),'mm') as month_id,to_char(a.atten_date,'mmmm') as month_name, L.L_Status, a.RegNo,a.student_id,a.roll_number,a.RollNo,a.student_name,a.Email_Id,a.PhoneNo, to_char( a.atten_date,'dd/mm/yyyy') as atten_date, a.day,(case when a.atten_date = H. Holiday_date Then 'H' Else (case when a.day = W.day Then 'W' Else (case when L_Status='F' or L_Status='L' Then 'L' Else 'P' END)  END) END) As First_Half,(case when a.atten_date = H. Holiday_date Then 'H' Else (case when a.day = W.day Then 'W' Else (case when L_Status='S' or L_Status='L' Then 'L' Else 'P' END) END) END) As Second_Half ,a.eff_dt from ( select a.RegNo, a.student_id, a.roll_number, a.RollNo, a.student_name, a.Email_Id, a.PhoneNo, b.Day, b.atten_date, a.eff_dt from  ( SELECT student_detail.vch_num as student_id, student_detail.roll_number, student_detail.RollNo, replace(user_details.FIRST_NAME, '0', '') || ' ' || replace(user_details.MIDDLE_NAME, '0', '') || ' ' || replace(user_details.LAST_NAME, '0', '') as Student_Name, nvl(CASE WHEN user_details.default_emailid = 'F' THEN user_details.f_email WHEN user_details.default_emailid = 'M' THEN user_details.m_email WHEN user_details.default_emailid = 'G' THEN user_details.g_email END, '-') as Email_Id, nvl(CASE WHEN user_details.default_Ph = 'F' THEN user_details.f_con_number WHEN user_details.default_Ph = 'M' THEN user_details.m_con_number WHEN user_details.default_Ph = 'G' THEN user_details.g_con_number END, '-') as PhoneNo, student_detail.Reg_no as RegNo, to_date(to_char(convert_tz(user_details.eff_dt, 'UTC', '+05:30'), 'dd/MM/YYYY HH24:MI:SS'), 'dd/MM/YYYY HH24:MI:SS') as eff_dt from student_detail, user_details  where  student_detail.Academic_year_Id = '001' and  student_detail.roll_number Is Not Null and student_detail.CLASS_APPLIED = '001' and student_detail.section = '001' and user_details.rec_id = student_detail.vch_num  and student_detail.type = 'STD' and student_detail.client_id = '001' and student_detail.client_unit_id = '001001' and   student_detail.section IS NOT Null and student_detail.RollNo Is NOT Null )a inner join(select  Newdate as Atten_date, Day from( select to_char((to_date('01/01/2019 00:00:00', 'dd/MM/YYYY HH24:MI:SS') + rownum - 1), 'ddd') as Day, to_date('01/01/2019 00:00:00', 'dd/MM/YYYY HH24:MI:SS') + rownum - 1 as Newdate, rownum   FROM XMLTABLE('1 to 365') )a WHERE Newdate BETWEEN  to_date('20/02/2019', 'dd/MM/YYYY') and  to_date('20/02/2019', 'dd/MM/YYYY')) b on 1 = 1  and b.atten_date >= to_date(to_char(a.eff_dt, 'dd/mm/yyyy'), 'dd/mm/yyyy') )a left join ( Select date_new as Holiday_date  from(select to_date('01/01/2019 00:00:00', 'dd/MM/YYYY HH24:MI:SS') + rownum - 1 as date_new, rownum   FROM XMLTABLE('1 to 365'))d inner join holiday_master h on  d.date_new BETWEEN to_date(to_char(convert_tz(h.Holiday_frm, 'UTC', '+05:30'), 'dd/MM/YYYY'), 'dd/MM/YYYY') and to_date(to_char(convert_tz(h.Holiday_to, 'UTC', '+05:30'), 'dd/MM/YYYY'), 'dd/MM/YYYY') where d.date_new between to_date('20/02/2019', 'dd/MM/YYYY') and to_date('20/02/2019', 'dd/MM/YYYY')  and IsStudent_Holiday = 1 and type = 'STD' and class='001' and academic_year_id = '001' and client_id = '001' and client_unit_id = '001001' )H on  h.Holiday_date=a.atten_date left join  (  select  'Mon' as Day from add_class where type = 'EAC'  and client_id = '001' and client_unit_id = '001001' and add_class_id = '001' and Ismonday = 1 union select 'Tue' as Day from add_class where type = 'EAC'  and client_id = '001' and client_unit_id = '001001'  and add_class_id = '001' and IsTuesday = 1 union select 'Wed' as Day from add_class where type = 'EAC'  and client_id = '001' and client_unit_id = '001001'  and add_class_id = '001' and IsWednesday = 1  union select 'Thu' as Day from add_class where type = 'EAC'  and client_id = '001' and client_unit_id = '001001'  and add_class_id = '001' and IsThursday = 1 union select 'Fri' as Day from add_class where type = 'EAC'  and client_id = '001' and client_unit_id = '001001'  and add_class_id = '001' and IsFriday = 1 union select 'Sat' as Day from add_class where type = 'EAC'  and client_id = '001' and client_unit_id = '001001'  and add_class_id = '001' and IsSaturday = 1 union select 'Sun' as Day from add_class where type = 'EAC'  and client_id = '001'  and client_unit_id = '001001'  and add_class_id = '001' and IsSunday = 1  )W on 1=1  and a.day=w.day  left join  (  select b.date_new, a.col1 as RegNo, a.col2, a.col3, a.col4 , col12, col13, (case when date_new = to_date(to_char(convert_tz(date1, 'UTC', '+05:30'), 'dd/MM/YYYY'), 'dd/MM/YYYY') Then col12 else  (CASE when date_new = to_date(to_char(convert_tz(date1, 'UTC', '+05:30'), 'dd/MM/YYYY'), 'dd/MM/YYYY') Then col12 else 'L' END) END) as L_Status from  (  select to_date('01/01/2019 00:00:00','dd/MM/YYYY HH24:MI:SS')+rownum-1 as date_new , rownum FROM XMLTABLE('1 to 365')  ) b inner join enx_tab a on 1=1 and b.date_new BETWEEN to_date(to_char(convert_tz(date1,'UTC','+05:30'),'dd/MM/YYYY'),'dd/MM/YYYY') and to_date(to_char(convert_tz(date2,'UTC','+05:30'),'dd/MM/YYYY'),'dd/MM/YYYY') and type = 'ELA' and col7 = 'Approved'  and client_id = '001' and client_unit_id = '001001' where b.date_new  between to_date('20/02/2019','dd/MM/YYYY') and to_date('20/02/2019','dd/MM/YYYY') )L on a.atten_date=L.date_new and a.regno=l.regno order by regno, month_id, atten_date";

                        // 10.02.2020
                        //mq = "select  to_char(a.atten_date,'MM') as month_id,to_char(a.atten_date,'Month') as month_name," +
                        //    " L.L_Status, a.RegNo,a.student_id,a.roll_number,a.RollNo,a.student_name,a.Email_Id,a.PhoneNo," +
                        //    " to_char( a.atten_date,'" + sgen.Getsqldateformat() + "') as atten_date, a.day,(case when a.atten_date = H. Holiday_date Then 'H'" +
                        //    " Else (case when a.day = W.day Then 'W' Else (case when L_Status='F' or L_Status='L' Then 'L' Else 'P' END)  END) END) As First_Half," +
                        //    "(case when a.atten_date = H. Holiday_date Then 'H' Else (case when a.day = W.day Then 'W' Else (case when L_Status='S' or L_Status='L' Then " +
                        //    "'L' Else 'P' END) END) END) As Second_Half ,a.eff_dt from ( select a.RegNo, a.student_id, a.roll_number, a.RollNo, a.student_name, a.Email_Id," +
                        //    " a.PhoneNo, b.Day, b.atten_date, a.eff_dt from  ( SELECT student_detail.vch_num as student_id, student_detail.roll_number, student_detail.RollNo," +
                        //    " user_details.FIRST_NAME || ' ' || replace(user_details.MIDDLE_NAME, '0', '') || ' ' || replace(user_details.LAST_NAME, '0', '')" +
                        //    " as Student_Name, nvl(CASE WHEN user_details.default_emailid = 'F' THEN user_details.f_email WHEN user_details.default_emailid = 'M'" +
                        //    " THEN user_details.m_email WHEN user_details.default_emailid = 'G' THEN user_details.g_email END, '-') as Email_Id," +
                        //    " nvl(CASE WHEN user_details.default_Ph = 'F' THEN user_details.f_con_number WHEN user_details.default_Ph = 'M' THEN user_details.m_con_number" +
                        //    " WHEN user_details.default_Ph = 'G' THEN user_details.g_con_number END, '-') as PhoneNo, student_detail.Reg_no as RegNo," +
                        //    " to_date(to_char(convert_tz(user_details.eff_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldatetimeformat() + "')," +
                        //    " '" + sgen.Getsqldatetimeformat() + "') as eff_dt from student_detail, user_details  where  student_detail.Academic_year_Id = '" + Ac_Year_id + "' and" +
                        //    "  student_detail.roll_number Is Not Null and student_detail.CLASS_APPLIED = '" + Class_Id + "' and student_detail.section = '" + Section_Id + "' " +
                        //    "and user_details.rec_id = student_detail.vch_num  and student_detail.type = 'STD' and student_detail.client_id = '" + clientid_mst + "' and" +
                        //    " student_detail.client_unit_id = '" + unitid_mst + "' and   student_detail.section IS NOT Null and student_detail.RollNo Is NOT Null and user_details.status = 'active' )a" +
                        //    " inner join (select  Newdate as Atten_date, Day from( select to_char((to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1), 'ddd')" +
                        //    " as Day, to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as Newdate, rownum   FROM XMLTABLE('1 to 365') )a" +
                        //    " WHERE Newdate BETWEEN  to_date('" + fromdt + "', '" + sgen.Getsqldateformat() + "') and  to_date('" + Todt + "', '" + sgen.Getsqldateformat() + "')) b on 1 = 1 " +
                        //    " and b.atten_date >= to_date(to_char(a.eff_dt, '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') )a left join" +
                        //    " ( Select date_new as Holiday_date  from(select to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as date_new," +
                        //    " rownum   FROM XMLTABLE('1 to 365'))d inner join holiday_master h on  d.date_new BETWEEN to_date(to_char(convert_tz(h.Holiday_frm," +
                        //    " 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') and to_date(to_char(convert_tz " +
                        //    "(h.Holiday_to, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') where d.date_new" +
                        //    " between to_date('" + fromdt + "', '" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "', '" + sgen.Getsqldateformat() + "')  and IsStudent_Holiday = 1" +
                        //    " and type = 'STD' and class='" + Class_Id + "' and academic_year_id = '" + Ac_Year_id + "' and client_id = '" + clientid_mst + "'" +
                        //    " and client_unit_id = '" + unitid_mst + "' )H on  h.Holiday_date=a.atten_date left join  (  select  'Mon' as Day from add_class where type = 'EAC' " +
                        //    " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' and add_class_id = '" + Class_Id + "' and Ismonday = 1 union select 'Tue' as Day" +
                        //    " from add_class where type = 'EAC'  and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'  and add_class_id = '" + Class_Id + "'" +
                        //    " and IsTuesday = 1 union select 'Wed' as Day from add_class where type = 'EAC'  and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'" +
                        //    "  and add_class_id = '" + Class_Id + "' and IsWednesday = 1  union select 'Thu' as Day from add_class where type = 'EAC'  and client_id = '" + clientid_mst + "'" +
                        //    " and client_unit_id = '" + unitid_mst + "'  and add_class_id = '" + Class_Id + "' and IsThursday = 1 union select 'Fri' as Day from add_class where type = 'EAC' " +
                        //    " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'  and add_class_id = '" + Class_Id + "' and IsFriday = 1 " +
                        //    "union select 'Sat' as Day from add_class where type = 'EAC'  and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' " +
                        //    " and add_class_id = '" + Class_Id + "' and IsSaturday = 1 union select 'Sun' as Day from add_class where type = 'EAC'  and client_id = '" + clientid_mst + "' " +
                        //    " and client_unit_id = '" + unitid_mst + "'  and add_class_id = '" + Class_Id + "' and IsSunday = 1  )W on 1=1  and a.day=w.day  left join" +
                        //    "  (  select b.date_new, a.col1 as RegNo, a.col2, a.col3, a.col4 , col12, col13, (case when date_new = to_date(to_char(convert_tz(date1, 'UTC'," +
                        //    " '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') Then col12 else  (CASE when date_new = to_date(to_char(convert_tz(date1, 'UTC'," +
                        //    " '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') Then col12 else 'L' END) END) as L_Status from" +
                        //    "  (  select to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "')+rownum-1 as date_new , rownum FROM XMLTABLE('1 to 365')  ) b " +
                        //    "inner join enx_tab a on 1=1 and b.date_new BETWEEN to_date(to_char(convert_tz(date1,'UTC','" + sgen.Gettimezone() + "'), " +
                        //    "'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') and to_date(to_char(convert_tz(date2,'UTC','" + sgen.Gettimezone() + "')," +
                        //    "'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') and type = 'ELA' and col7 = 'Approved'  and client_id = " +
                        //    "'" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' where b.date_new  between to_date('" + fromdt + "'," +
                        //    "'" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "','" + sgen.Getsqldateformat() + "') )L on a.atten_date=L.date_new and" +
                        //    " a.regno=l.regno order by regno, month_id, atten_date";

                        // reena - need to recheck  09.04.2020
                        //mq = "select  to_char(a.atten_date,'MM') as month_id,to_char(a.atten_date,'Month') as month_name," +
                        //    " L.L_Status, a.RegNo,a.student_id,a.roll_number,a.RollNo,a.student_name,a.Email_Id,a.PhoneNo," +
                        //    " to_char( a.atten_date,'" + sgen.Getsqldateformat() + "') as atten_date, a.day,(case when a.atten_date = H.Holiday_date Then 'H'" +
                        //    " Else (case when a.day = W.day Then 'W' Else (case when L_Status='F' or L_Status='L' Then 'L' Else 'P' END)  END) END) As First_Half," +
                        //    "(case when a.atten_date = H. Holiday_date Then 'H' Else (case when a.day = W.day Then 'W' Else (case when L_Status='S' or L_Status='L' Then " +
                        //    "'L' Else 'P' END) END) END) As Second_Half ,a.eff_dt from ( select a.RegNo, a.student_id, a.roll_number, a.RollNo, a.student_name, a.Email_Id," +
                        //    " (case when a.PhoneNo='0000000000' then '-' else a.PhoneNo end ) phoneno, b.Day, b.atten_date, a.eff_dt from  ( SELECT student_detail.vch_num as student_id, student_detail.roll_number, student_detail.RollNo," +
                        //    " user_details.FIRST_NAME || ' ' || replace(user_details.MIDDLE_NAME, '0', '') || ' ' || replace(user_details.LAST_NAME, '0', '')" +
                        //    " as Student_Name, nvl(CASE WHEN user_details.default_emailid = 'F' THEN user_details.f_email WHEN user_details.default_emailid = 'M'" +
                        //    " THEN user_details.m_email WHEN user_details.default_emailid = 'G' THEN user_details.g_email END, '-') as Email_Id," +
                        //    " nvl(CASE WHEN user_details.default_Ph = 'F' THEN user_details.f_con_number WHEN user_details.default_Ph = 'M' THEN user_details.m_con_number" +
                        //    " WHEN user_details.default_Ph = 'G' THEN user_details.g_con_number END, '-') as PhoneNo, student_detail.Reg_no as RegNo," +
                        //    " to_date(to_char(convert_tz(user_details.eff_dt, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldatetimeformat() + "')," +
                        //    " '" + sgen.Getsqldatetimeformat() + "') as eff_dt from student_detail, user_details  where  student_detail.Academic_year_Id = '" + Ac_Year_id + "' and" +
                        //    "  student_detail.roll_number Is Not Null and student_detail.CLASS_APPLIED = '" + Class_Id + "' and student_detail.section = '" + Section_Id + "' " +
                        //    "and user_details.vch_num = student_detail.vch_num  and student_detail.type = 'STD'  and  user_details.type='STD' and " +
                        //    " find_in_set(student_detail.client_unit_id , '" + unitid_mst + "')=1 and   student_detail.section IS NOT Null and student_detail.RollNo Is NOT Null and user_details.status = 'active' )a" +
                        //    " inner join (select  Newdate as Atten_date, Day from( select to_char((to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1), 'Dy')" +
                        //    " as Day, to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as Newdate, rownum   FROM XMLTABLE('1 to 365') )a" +
                        //    " WHERE Newdate BETWEEN  to_date('" + fromdt + "', '" + sgen.Getsqldateformat() + "') and  to_date('" + Todt + "', '" + sgen.Getsqldateformat() + "')) b on 1 = 1 " +
                        //    " and b.atten_date >= to_date(to_char(a.eff_dt, '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') )a left join" +
                        //    " ( Select date_new as Holiday_date  from(select to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as date_new," +
                        //    " rownum   FROM XMLTABLE('1 to 365'))d inner join holiday_master h on  d.date_new BETWEEN to_date(to_char(convert_tz(h.Holiday_frm," +
                        //    " 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') and to_date(to_char(convert_tz " +
                        //    "(h.Holiday_to, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') where d.date_new" +
                        //    " between to_date('" + fromdt + "', '" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "', '" + sgen.Getsqldateformat() + "')  and IsStudent_Holiday = 1" +
                        //    " and type = 'STD' and class='" + Class_Id + "' and academic_year_id = '" + Ac_Year_id + "' " +
                        //    " and find_in_set(client_unit_id , '" + unitid_mst + "')=1 )H on  h.Holiday_date=a.atten_date left join  (  select  'Mon' as Day from add_class where type = 'EAC' " +
                        //    " and find_in_set(client_unit_id , '" + unitid_mst + "')=1 and add_class_id = '" + Class_Id + "' and Ismonday = 1 union select 'Tue' as Day" +
                        //    " from add_class where type = 'EAC' and find_in_set(client_unit_id , '" + unitid_mst + "' )=1 and add_class_id = '" + Class_Id + "'" +
                        //    " and IsTuesday = 1 union select 'Wed' as Day from add_class where type = 'EAC' and find_in_set(client_unit_id , '" + unitid_mst + "')=1" +
                        //    "  and add_class_id = '" + Class_Id + "' and IsWednesday = 1  union select 'Thu' as Day from add_class where type = 'EAC' " +
                        //    " and find_in_set(client_unit_id , '" + unitid_mst + "')=1  and add_class_id = '" + Class_Id + "' and IsThursday = 1 union select 'Fri' as Day from add_class where type = 'EAC' " +
                        //    " and find_in_set(client_unit_id , '" + unitid_mst + "')=1  and add_class_id = '" + Class_Id + "' and IsFriday = 1 " +
                        //    "union select 'Sat' as Day from add_class where type = 'EAC'  and find_in_set(client_unit_id ,'" + unitid_mst + "')=1 " +
                        //    " and add_class_id = '" + Class_Id + "' and IsSaturday = 1 union select 'Sun' as Day from add_class where type = 'EAC'  " +
                        //    " and find_in_set(client_unit_id , '" + unitid_mst + "')=1  and add_class_id = '" + Class_Id + "' and IsSunday = 1  )W on 1=1  and a.day=w.day  left join" +
                        //    "  (  select b.date_new, a.col1 as RegNo, a.col2, a.col3, a.col4 , col12, col13, (case when date_new = to_date(to_char(convert_tz(date1, 'UTC'," +
                        //    " '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') Then col12 else  (CASE when date_new = to_date(to_char(convert_tz(date1, 'UTC'," +
                        //    " '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') Then col12 else 'L' END) END) as L_Status from" +
                        //    "  (  select to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "')+rownum-1 as date_new , rownum FROM XMLTABLE('1 to 365')  ) b " +
                        //    "inner join enx_tab a on 1=1 and b.date_new BETWEEN to_date(to_char(convert_tz(date1,'UTC','" + sgen.Gettimezone() + "'), " +
                        //    "'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') and to_date(to_char(convert_tz(date2,'UTC','" + sgen.Gettimezone() + "')," +
                        //    "'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') and type = 'ELA' and col7 = 'Approved'  " +
                        //    "and find_in_set(client_unit_id , '" + unitid_mst + "')=1 where b.date_new  between to_date('" + fromdt + "'," +
                        //    "'" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "','" + sgen.Getsqldateformat() + "') )L on a.atten_date=L.date_new and" +
                        //    " a.regno=l.regno order by regno, month_id, atten_date";

                        mq = "select  to_char(a.atten_date,'MM') as month_id,to_char(a.atten_date,'Month') as month_name, L.L_Status, a.RegNo,a.student_id,a.roll_number,a.RollNo,a.student_name,a.Email_Id,a.PhoneNo," +
                          " to_char( a.atten_date,'" + sgen.Getsqldateformat() + "') as atten_date, a.day," +
                          "(case when a.atten_date = H.Holiday_date Then 'H' when a.day = W.day Then 'W' when L_Status='F' or L_Status='L' Then 'L' Else 'P' END) As First_Half," +
                          "(case when a.atten_date = H.Holiday_date Then 'H' when a.day = W.day Then 'W' when L_Status='S' or L_Status='L' Then 'L' Else 'P' END) As Second_Half, " +
                          "a.eff_dt from ( select a.RegNo, a.student_id, a.roll_number, a.RollNo, a.student_name, a.Email_Id," +
                          " (case when a.PhoneNo='0000000000' then '-' else a.PhoneNo end ) phoneno, b.Day, b.atten_date, a.eff_dt from  ( SELECT student_detail.vch_num as student_id, student_detail.roll_number, nvl(student_detail.RollNo,'0') RollNo," +
                          " user_details.FIRST_NAME || ' ' || replace(user_details.MIDDLE_NAME, '0', '') || ' ' || replace(user_details.LAST_NAME, '0', '')" +
                          " as Student_Name, (CASE WHEN user_details.default_emailid = 'F' THEN user_details.f_email WHEN user_details.default_emailid = 'M' THEN user_details.m_email WHEN user_details.default_emailid = 'G' THEN user_details.g_email else '-' END) as Email_Id," +
                          " (CASE WHEN user_details.default_Ph = 'F' THEN user_details.f_con_number WHEN user_details.default_Ph = 'M' THEN user_details.m_con_number WHEN user_details.default_Ph = 'G' THEN user_details.g_con_number else '-' END) as PhoneNo, student_detail.Reg_no as RegNo," +
                          " to_date(to_char(user_details.eff_dt,'" + sgen.Getsqldatetimeformat() + "')," +
                          " '" + sgen.Getsqldatetimeformat() + "') as eff_dt from student_detail, user_details where student_detail.Academic_year_Id = '" + Ac_Year_id + "' and" +
                          "  student_detail.roll_number Is Not Null and student_detail.CLASS_APPLIED = '" + Class_Id + "' and student_detail.section = '" + Section_Id + "' " +
                          "and user_details.vch_num = student_detail.vch_num  and student_detail.type = 'STD' and user_details.type='STD' and " +
                          " find_in_set(student_detail.client_unit_id , '" + unitid_mst + "')=1 and student_detail.section IS NOT Null and student_detail.Roll_Number Is NOT Null and user_details.status = 'active' )a" +
                          " inner join (select  Newdate as Atten_date, Day from( select to_char((to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1), 'Dy')" +
                          " as Day, to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as Newdate, rownum   FROM XMLTABLE('1 to 365') )a" +
                          " WHERE Newdate BETWEEN  to_date('" + fromdt + "', '" + sgen.Getsqldateformat() + "') and  to_date('" + Todt + "', '" + sgen.Getsqldateformat() + "')) b on 1 = 1 " +
                          " and b.atten_date >= to_date(to_char(a.eff_dt, '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') )a left join" +
                          " ( Select date_new as Holiday_date  from(select to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as date_new," +
                          " rownum   FROM XMLTABLE('1 to 365'))d inner join holiday_master h on  d.date_new BETWEEN " +
                          "to_date(to_char(h.Holiday_frm, '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') and " +
                          "to_date(to_char(h.Holiday_to,  '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') where d.date_new" +
                          " between to_date('" + fromdt + "', '" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "', '" + sgen.Getsqldateformat() + "')  and IsStudent_Holiday = 1" +
                          " and type = 'STD' and class='" + Class_Id + "' and academic_year_id = '" + Ac_Year_id + "' " +
                          " and find_in_set(client_unit_id , '" + unitid_mst + "')=1 )H on  h.Holiday_date=a.atten_date left join  (  select  'Mon' as Day from add_class where type = 'EAC' " +
                          " and find_in_set(client_unit_id , '" + unitid_mst + "')=1 and add_class_id = '" + Class_Id + "' and Ismonday = 1 union select 'Tue' as Day" +
                          " from add_class where type = 'EAC' and find_in_set(client_unit_id , '" + unitid_mst + "' )=1 and add_class_id = '" + Class_Id + "'" +
                          " and IsTuesday = 1 union select 'Wed' as Day from add_class where type = 'EAC' and find_in_set(client_unit_id , '" + unitid_mst + "')=1" +
                          "  and add_class_id = '" + Class_Id + "' and IsWednesday = 1  union select 'Thu' as Day from add_class where type = 'EAC' " +
                          " and find_in_set(client_unit_id , '" + unitid_mst + "')=1  and add_class_id = '" + Class_Id + "' and IsThursday = 1 union select 'Fri' as Day from add_class where type = 'EAC' " +
                          " and find_in_set(client_unit_id , '" + unitid_mst + "')=1  and add_class_id = '" + Class_Id + "' and IsFriday = 1 " +
                          "union select 'Sat' as Day from add_class where type = 'EAC'  and find_in_set(client_unit_id ,'" + unitid_mst + "')=1 " +
                          " and add_class_id = '" + Class_Id + "' and IsSaturday = 1 union select 'Sun' as Day from add_class where type = 'EAC'  " +
                          " and find_in_set(client_unit_id , '" + unitid_mst + "')=1  and add_class_id = '" + Class_Id + "' and IsSunday = 1  )W on 1=1  and a.day=w.day  left join" +
                          "  (  select b.date_new, a.col1 as RegNo, a.col2, a.col3, a.col4 , col12, col13, (case when date_new = to_date(to_char(convert_tz(date1, 'UTC'," +
                          " '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') Then col12   else 'L' END) as L_Status from" +
                          "  (  select to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "')+rownum-1 as date_new , rownum FROM XMLTABLE('1 to 365')  ) b " +
                          "inner join enx_tab a on 1=1 and b.date_new BETWEEN to_date(to_char(convert_tz(date1,'UTC','" + sgen.Gettimezone() + "'), " +
                          "'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') and to_date(to_char(convert_tz(date2,'UTC','" + sgen.Gettimezone() + "')," +
                          "'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') and type = 'ELA' and col7 = 'Approved'  " +
                          "and find_in_set(client_unit_id , '" + unitid_mst + "')=1 where b.date_new  between to_date('" + fromdt + "'," +
                          "'" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "','" + sgen.Getsqldateformat() + "') )L on a.atten_date=L.date_new and" +
                          " a.regno=l.regno order by regno, month_id, atten_date";

                    }
                    #endregion
                    #region Teacher

                    else
                    {
                        String dept_id = string.Join(",", model[0].SelectedItems3);
                        #region check holiday or Weekly Off

                        mq = "SELECT to_char(convert_tz( Holiday_frm,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Holiday_frm" +
                  ",to_char(convert_tz( Holiday_to,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as Holiday_to ," +
                  "convert_tz( Holiday_frm,'UTC','" + sgen.Gettimezone() + "') as frmdt" +
                  ",convert_tz( Holiday_to,'UTC','" + sgen.Gettimezone() + "') as todt FROM holiday_master" +
                  " WHERE  (to_date(to_char(convert_tz(Holiday_frm, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), " +
                  "'" + sgen.Getsqldateformat() + "') between to_date('" + fromdt + "','" + sgen.Getsqldateformat() + "') and" +
                  " to_date('" + Todt + "','" + sgen.Getsqldateformat() + "')" +
                  " or to_date(to_char(convert_tz(Holiday_to, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')," +
                  " '" + sgen.Getsqldateformat() + "')  between to_date('" + fromdt + "','" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "','" + sgen.Getsqldateformat() + "'))" +
                  " and IsTeacher_Holiday=true and type='TEA' and class='" + Class_Id + "' and academic_year_id='" + Ac_Year_id + "'" +
                  "  and client_unit_id='" + unitid_mst + "'";
                        DataTable dtholiday = sgen.getdata(userCode, mq);

                        DataTable dtweeklyoff = sgen.getdata(userCode, "select * from add_class where add_class_id='" + Class_Id + "'  and client_unit_id='" + unitid_mst + "'");
                        bool ok1 = false;
                        do
                        {
                            try
                            {
                                var g = dtholiday.AsEnumerable().Where(w => ((DateTime)w["frmdt"]).Date <= tempdate.Date && ((DateTime)w["todt"]).Date >= tempdate.Date)
                                                                      .Select(s => s).CopyToDataTable();
                                ok1 = false;
                            }
                            catch (Exception err)
                            {
                                ok1 = true;
                            }
                            if (ok1)
                            {
                                string dayname = tempdate.ToString("dddd");
                                try
                                {
                                    var a = sgen.seekval_dt(dtweeklyoff, "Is" + dayname + "=1", "Is" + dayname);
                                    if (a == "0") ok1 = true;
                                    else ok1 = false;
                                }
                                catch (Exception err) { }
                            }
                            tempdate = tempdate.AddDays(1);
                            if (ok1) break;
                        }
                        while (tempdate <= to_dt);
                        if (!ok1)
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Weekly off Or Holiday Exists Between Selected Dates', 2);";
                            goto END;
                        }
                        #endregion

                        mq = "select   to_char(a.atten_date,'MM') as month_id,to_char(a.atten_date,'Month') as month_name, L.L_Status," +
                               " a.teacher_id,a.teacher_name,a.Department, to_char( a.atten_date,'" + sgen.Getsqldateformat() + "') as atten_date," +
                               " a.day,(case when a.atten_date = H. Holiday_date Then 'H' Else (case when a.day = W.day Then 'W' Else " +
                               "(case when L_Status='F' or L_Status='L' Then 'L' Else 'P' END)  END) END) As First_Half,(case when a.atten_date =" +
                               " H. Holiday_date Then 'H' Else (case when a.day = W.day Then 'W' Else (case when L_Status='S' or L_Status='L' Then 'L'" +
                               " Else 'P' END) END) END) As Second_Half  from  (select a.*,nvl(b.max_Date,to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "')) as max_Date from (select a.teacher_id, a.Department, a.teacher_name, b.Day, b.atten_date,a.eff_dt" +
                               " from(SELECT  ud.vch_num as teacher_id,to_date(to_char(convert_tz(ud.eff_dt, 'UTC', '" + sgen.Gettimezone() + "')," +
                               " '" + sgen.Getsqldatetimeformat() + "'),'" + sgen.Getsqldatetimeformat() + "') as eff_dt, ud.FIRST_NAME || ' '|| replace(ud.MIDDLE_NAME, '0', '')|| ' '||" +
                               " replace(ud.LAST_NAME, '0', '') as Teacher_Name, dp.master_name as Department from user_details ud inner join master_setting " +
                               "dp on ud.department = dp.master_id and dp.type = 'MDP' where ud.type = 'CPR' " +
                               " and ud.client_unit_id = '" + unitid_mst + "' and  ud.department in ('" + dept_id + "'))a inner join (select  Newdate as Atten_date, Day from( select to_char((to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1), 'ddd')" +
                            " as Day, to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as Newdate, rownum   FROM XMLTABLE('1 to 365') )a" +
                            " WHERE Newdate BETWEEN  to_date('" + fromdt + "', '" + sgen.Getsqldateformat() + "') and  to_date('" + Todt + "', '" + sgen.Getsqldateformat() + "')) b on 1 = 1 " +
                            " and b.atten_date >= to_date(to_char(a.eff_dt, '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') )a left join(select a.Reg_id as teacher_id ," +
                               "  max(convert_tz(Atten_Date, 'UTC', '" + sgen.Gettimezone() + "')) AS max_Date  from student_attendance a  where a.Type = 'TEA' " +
                               " and a.Client_unit_id = '" + unitid_mst + "' group by  a.Reg_id) b on a.teacher_id = b.teacher_id where a.Atten_Date >" +
                               " to_date(to_char(nvl(b.max_Date, to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "')), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "'))a left join" +
                            " ( Select h.teacher_id, date_new as Holiday_date  from(select to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as date_new," +
                            " rownum   FROM XMLTABLE('1 to 365'))d inner join holiday_master h on  d.date_new BETWEEN to_date(to_char(convert_tz(h.Holiday_frm," +
                            " 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') and to_date(to_char(convert_tz " +
                            "(h.Holiday_to, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') where d.date_new" +
                            " between to_date('" + fromdt + "', '" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "', '" + sgen.Getsqldateformat() + "')  and type = 'TEA'  and IsTeacher_Holiday = 1  and " +
                               " client_unit_id = '" + unitid_mst + "')H  on  h.Holiday_date = a.atten_date and  h.teacher_id = a.teacher_id left join (select class as teacher_id, 'Mon' as Day from add_class where type = 'TWO'" +
                               "   and client_unit_id = '" + unitid_mst + "'  and Ismonday = 1 union select class as teacher_id" +
                               ", 'Tue' as Day from add_class where type = 'TWO'   and client_unit_id = '" + unitid_mst + "'" +
                               " and IsTuesday = 1  union select class as teacher_id, 'Wed' as Day from add_class where type = 'TWO'  " +
                               " and client_unit_id = '" + unitid_mst + "'   and IsWednesday = 1  union select class as teacher_id, 'Thu' as Day from add_class" +
                               " where type = 'TWO'   and client_unit_id = '" + unitid_mst + "'  and IsThursday = 1 " +
                               "union select class as teacher_id, 'Fri' as Day from add_class where type = 'TWO'   and" +
                               " client_unit_id = '" + unitid_mst + "' and IsFriday = 1 union select class as teacher_id, 'Sat' as Day from add_class" +
                               " where type = 'TWO'   and client_unit_id = '" + unitid_mst + "' and IsSaturday = 1 " +
                               "union select  class as teacher_id, 'Sun' as Day from add_class where type = 'TWO'   " +
                               " and client_unit_id = '" + unitid_mst + "'and IsSunday = 1)W on 1=1  and a.day=w.day and a.teacher_id= w.teacher_id left join " +
                               "( select b.date_new, a.col1 as teacher_id, a.col2, a.col3, a.col4 , col12, col13, (case when date_new = to_date(to_char(convert_tz(date1, 'UTC'," +
                            " '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') Then col12 else  (CASE when date_new = to_date(to_char(convert_tz(date1, 'UTC'," +
                            " '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'), '" + sgen.Getsqldateformat() + "') Then col12 else 'L' END) END) as L_Status from(  select to_date('" + Ac_From_Date + "','" + sgen.Getsqldatetimeformat() + "')+rownum-1 as date_new" +
                               " , rownum FROM XMLTABLE('1 to 365')  ) b inner join enx_tab a on 1=1 and b.date_new" +
                               " BETWEEN to_date(to_char(convert_tz(date1,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')," +
                               "'" + sgen.Getsqldateformat() + "') and to_date(to_char(convert_tz(date2,'UTC','" + sgen.Gettimezone() + "')," +
                               "'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "') and a.type = 'TLA' and a.col7= 'Approved'  and" +
                               " a.client_unit_id = '" + unitid_mst + "' where b.date_new between" +
                               " to_date('" + fromdt + "','" + sgen.Getsqldateformat() + "') and to_date('" + Todt + "','" + sgen.Getsqldateformat() + "') )L" +
                               " on a.atten_date=L.date_new and a.teacher_id=l.teacher_id order by department, month_id, atten_date";
                    }
                    #endregion
                    datatable = sgen.getdata(userCode, mq);
                    string att_status_F = "", att_status_S = "", Email = "", Phone = "";
                    if (datatable.Rows.Count > 0)
                    {
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in datatable.Rows)
                        {
                            string Regno = "", roll_number = "", RollNo = "", Student_Name = "", student_id = "";
                            if (tm.Col14 == "7015.1")
                            {
                                Regno = dr["Regno"].ToString();
                                roll_number = dr["roll_number"].ToString();
                                RollNo = dr["RollNo"].ToString();
                                Student_Name = dr["Student_Name"].ToString();
                                student_id = dr["student_id"].ToString();
                                Email = dr["Email_Id"].ToString();
                                Phone = dr["PhoneNo"].ToString();
                            }
                            if (tm.Col14 == "7021.6")
                            {
                                Regno = dr["teacher_id"].ToString();
                                roll_number = dr["Department"].ToString();
                                RollNo = "0";
                                Student_Name = dr["Teacher_Name"].ToString();
                                student_id = "0";
                            }
                            rpt_model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col100 = tm.Col100,
                                Col121 = tm.Col121,
                                Col122 = tm.Col122,
                                Col123 = tm.Col123,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = tm.Col16,
                                Col17 = tm.Col17,
                                Col18 = Regno,
                                Col19 = roll_number,
                                Col27 = RollNo,
                                Col20 = Student_Name,
                                Col21 = dr["Atten_Date"].ToString(),
                                Col24 = student_id,
                                Col25 = dr["month_id"].ToString(),
                                Col26 = dr["month_name"].ToString(),
                                Col22 = dr["First_Half"].ToString(),
                                Col23 = dr["Second_Half"].ToString(),
                                Col31 = Phone,
                                Col28 = Email,
                                Col29 = Phone,
                                Col30 = "disabled",
                                TList1 = tm.TList1,
                                TList2 = tm.TList2,
                                TList3 = tm.TList3,
                                SelectedItems1 = tm.SelectedItems1,
                                SelectedItems2 = tm.SelectedItems2,
                                SelectedItems3 = tm.SelectedItems3
                            });
                        }
                        model = rpt_model;
                    }
                    else
                    {
                        ViewBag.scripCall = "enableForm();";
                        ViewBag.scripCall = "showmsgJS(1, 'Data Not Exist', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                        model = new List<Tmodelmain>();
                        tm.Col16 = "";
                        tm.Col17 = "";
                        tm.Col18 = "";
                        tm.Col19 = "";
                        model.Add(tm);
                    }
                    model[0].SelectedItems1 = new string[] { sgen.GetSession(MyGuid, "Class_Id").ToString() };
                    model[0].SelectedItems2 = new string[] { sgen.GetSession(MyGuid, "Section_Id").ToString() };
                END:;

                }
                else if (command == "dept")
                {

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    string mq = "select MIN(Atten_Date) as Atten_Date from (select b.DEPARTMENT, to_char( max(Atten_Date)," +
                        "'" + sgen.Getsqldatetimeformat() + "') AS Atten_Date  from student_attendance a inner join user_details b on a.Reg_id=b.vch_num" +
                        " where  a.type='TEA'  and a.client_unit_id='" + unitid_mst + "' and a.reg_id in (select vch_num " +
                        "from user_details where   type='CPR' and  department in ('" + string.Join(",", model[0].SelectedItems3).Replace(",", "','") + "')) GROUP by b.DEPARTMENT)a";
                    string atten_date = sgen.seekval(userCode, mq, "atten_date");
                    DateTime Temacdate = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                    if (atten_date != "0")
                    {
                        DateTime Temattn = DateTime.ParseExact(atten_date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                        if ((atten_date != "") && (Temattn >= Temacdate))
                        {
                            model[0].Col16 = Temattn.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                            model[0].Col17 = Temattn.AddDays(1).ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            model[0].Col16 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                            model[0].Col17 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        }
                    }
                    else
                    {
                        model[0].Col16 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                        model[0].Col17 = Temacdate.ToString(sgen.Getdateformat(), CultureInfo.InvariantCulture);
                    }

                }
                TempData[MyGuid + "_Tlist1"] = model.FirstOrDefault().TList1;
                TempData[MyGuid + "_Tlist2"] = model.FirstOrDefault().TList2;
                TempData[MyGuid + "_Tlist3"] = model.FirstOrDefault().TList3;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Fee_Opening_EDI
        public ActionResult opening_edi()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();

            FillMst();
            model = getload(model);

            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.scripCall = "enableForm()";
            model[0].Col10 = "fees_detail ";
            model[0].Col12 = "EDI";
            type_desc = "EDI";
            model[0].Col9 = "ENTRY OF OPENING PENDING FEE";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            //model = getload(model);
            //#region Class

            //TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);

            //#endregion
            //#region Section
            //TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);

            //#endregion
            model[0].Col30 = "";
            string chk = sgen.getstring(userCode, "select distinct type from fees_detail where type='EDI' and academic_year_id='" + Ac_Year_id + "' and client_unit_id='" + unitid_mst + "'");
            if (chk != "")
            {
                model[0].Col30 = "EDI";
            }

            return View(model);
        }
        [HttpPost]
        public ActionResult opening_edi(List<Tmodelmain> model, string command, HttpPostedFileBase upd1)
        {
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                string last_ac_dt = "";
                string ac = sgen.getstring(userCode, "select SUBSTR( academic_year,0,4) as academic_year " +
                        "from add_academic_year where type='ACY' and client_id='" + clientid_mst + "'" +
                        " and academic_year_id='" + Ac_Year_id + "'");

                string last_ac = sgen.getstring(userCode, "select academic_year_id from add_academic_year " +
                    "where type='ACY' and client_id='" + clientid_mst + "' and academic_year LIKE '%" + ac + "'");

                string to_date = sgen.getstring(userCode, "select TO_CHAR(to_date( to_char(to_date,'" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "')," +
                    "'" + sgen.Getsqldatetimeformat() + "') to_date from add_academic_year " +
                    "where type='ACY' and client_id='" + clientid_mst + "' and academic_year_id = '" + last_ac + "'");

                try
                {

                    last_ac_dt = sgen.Make_datetime(to_date).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                }
                catch { }

                //tab_name = "fees_detail";
                if (command == "New")
                {
                    sgen.SetSession(MyGuid, "SSEEKVAL", null);
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    var tm = model.FirstOrDefault();

                }
                else if (command == "Update Posting")
                {
                    if (model[0].Col30 == "EDI")
                    {
                        sgen.execute_cmd(userCode, "delete from fees_detail where type='EDI' and academic_year_id='" + Ac_Year_id + "' and client_unit_id='" + unitid_mst + "'");
                    }


                    string mq3 = "(b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)";
                    mq = sgen.Fee_PRYData(clientid_mst, unitid_mst, last_ac, mq3, last_ac_dt);

                    mq = "select a.*,a.Due_Bal_Amt as Due_Amount, b.class_applied as Class_Id,  c.Class as Current_Class,  d.master_name as Current_Section" +
                        " from (" + mq + ") a " + cond + " inner join student_detail b  on a.reg_number=b.reg_no and b.type='STD' inner join add_class c on c.add_class_id=b.class_applied and c.type='EAC' and " +
                             " b.client_unit_id=c.client_unit_id inner join master_setting d  " +
                             "on b.section =d.master_id and  d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                        " and b.academic_year_id='" + last_ac + "'  where a.Due_Bal_Amt>0 order by family_id";

                    DataTable dt = sgen.getdata(userCode, mq);

                    try
                    {


                        var tm = model.FirstOrDefault();
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " +
                        "and  client_unit_id='" + unitid_mst + "'", 6, "max");

                        string currdate = sgen.server_datetime(userCode);
                        DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10);
                        DateTime From_dt = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                        int month_id = From_dt.Month;
                        int year = From_dt.Year;
                        string month_name = monthName.GetMonthName(month_id);
                        DateTime overdue_dt = new DateTime(From_dt.Year, From_dt.Month, 1).AddMonths(1).AddDays(-1);
                        // string due_dt = Convert.ToDateTime(Ac_From_Date).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                        string due_dt = sgen.Make_datetime(Ac_From_Date).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);

                        try
                        {



                            for (int i = 1; i < dt.Rows.Count; i++)
                            {
                                DataRow dr = dataTable.NewRow();
                                dr["rec_id"] = "0";
                                dr["type"] = "EDI";
                                dr["vch_date"] = currdate;
                                dr["vch_num"] = vch_num.Trim();
                                dr["academic_year_id"] = Ac_Year_id;
                                dr["class_id"] = dt.Rows[i]["class_id"];
                                dr["FeeType_Id"] = "004";
                                dr["FeeHead_Id"] = "001";
                                dr["Fee_Amount"] = dt.Rows[i]["due_bal_amt"];
                                dr["std_Amount"] = dt.Rows[i]["due_bal_amt"];
                                dr["From_date"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat());
                                dr["No_Trans"] = "12";
                                dr["Months"] = vch_num.Trim();
                                dr["Due_Month"] = sgen.padlc(From_dt.Month, 2);
                                dr["Monthname"] = month_name;
                                dr["due_date"] = From_dt.Day;
                                dr["overdue_date"] = From_dt.Day;
                                dr["due_dt"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat());
                                dr["overdue_dt"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat());
                                dr["frequency_id"] = "4";
                                dr["frequencyName"] = "Monthly";
                                dr["regno"] = dt.Rows[i]["Reg_Number"];
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = currdate;
                                dr["edit_by"] = userid_mst;
                                dr["edit_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;

                                dataTable.Rows.Add(dr);
                            }

                            bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, model[0].Col8, isedit);
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            if (Result == true)
                            {
                                ViewBag.vnew = "";
                                ViewBag.vedit = "";
                                ViewBag.vsave = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                //ViewBag.scripCall = "showmsgJS(1, 'Data Saved Successfully', 1);disableForm();";
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                                sgen.SetSession(MyGuid, "SSEEKVAL", null);
                                model = new List<Tmodelmain>();
                                model.Add(new Tmodelmain
                                {

                                    Col9 = "ENTRY OF OPENING PENDING FEE",
                                    Col1 = clientid_mst,
                                    Col2 = unitid_mst,
                                    Col10 = "fees_detail",
                                    Col12 = "EDI",
                                    Col13 = "Save",
                                    Col14 = tm.Col14,
                                    Col15 = tm.Col15,
                                    Col16 = "",
                                    Col17 = ""
                                });
                                model[0].Col30 = "";
                                string chk = sgen.getstring(userCode, "select distinct type from fees_detail where type='EDI' and academic_year_id='" + Ac_Year_id + "' and client_unit_id='" + unitid_mst + "'");
                                if (chk != "")
                                {
                                    model[0].Col30 = "EDI";
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                        }
                    }
                    catch (Exception err)
                    {
                        sgen.showmsg(1, err.Message.ToString(), 0);
                    }

                }
                else if (command == "temp")
                {
                    try
                    {
                        DataTable dtopen = new DataTable();
                        mq = "select    a.FIRST_NAME||' '||replace(a.MIDDLE_NAME,'0','')||' '||" +
                                 "replace(a.LAST_NAME,'0','') as Student_Name,replace(a.f_firstname,'0','')||' '||replace" +
                                 "(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name  ,a.Gender ,a.RegNumber as" +
                                 " Reg_Number,b.Roll_number as Roll_Number ," +
                                 "b.class_applied as Class_Id,  c.Class as Current_Class, b.section as Section_Id,  d.master_name as Current_Section," +
                                 "nvl(fd.fee_amount,'0') as Previous_Year_Amount from  student_detail b  left join fees_detail fd   on fd.regno= b.reg_no and" +
                                 "   fd.client_unit_id=b.client_unit_id and fd.type='EDI' and " +
                                 "fd.academic_year_id='" + Ac_Year_id + "'	 inner join   user_details a on a.vch_num=b.vch_num and a.regnumber=b.reg_no" +
                                 " and a.type='STD' inner join add_class c on c.add_class_id=b.class_applied and c.type='EAC' and " +
                                 " b.client_unit_id=c.client_unit_id inner join master_setting d  " +
                                 "on b.section =d.master_id and  d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                                 " where b.type='STD' and b.academic_year_id='" + Ac_Year_id + "'  and" +
                                 " b.client_unit_id='" + unitid_mst + "'" +
                                 "  order by  nvl(fd.client_id||fd.client_unit_id||fd.regno,'-') desc ";
                        dtopen = sgen.getdata(userCode, mq);
                        if (dtopen.Rows.Count > 0)
                        {
                            sgen.Exp_to_csv_new(dtopen, "Opbal", cg_com_name);
                        }
                        //dtopen.Columns.Add("Student_Name", typeof(string));
                        //dtopen.Columns.Add("regno", typeof(string));
                        //dtopen.Columns.Add("Class", typeof(string));
                        //dtopen.Columns.Add("Section", typeof(string));
                        //dtopen.Columns.Add("Opening_Amount", typeof(string));
                    }
                    catch (Exception ex) { }
                }
                else if (command == "Previous Balance")
                {
                    try
                    {
                        mq = "select '-' as fstr,a.FIRST_NAME||' '||replace(a.MIDDLE_NAME,'0','')||' '||" +
                                 "replace(a.LAST_NAME,'0','') as Student_Name,replace(a.f_firstname,'0','')||' '||replace" +
                                 "(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name  ,a.Gender ,a.RegNumber as" +
                                 " Reg_Number,b.Roll_number as Roll_Number, c.Class as Current_Class,  d.master_name as Current_Section," +
                                 "nvl(fd.fee_amount,'0') as Previous_Year_Amount from  student_detail b  left join fees_detail fd   on fd.regno= b.reg_no and" +
                                 "   fd.client_unit_id=b.client_unit_id and fd.type='EDI' and " +
                                 "fd.academic_year_id='" + Ac_Year_id + "'	 inner join   user_details a on a.vch_num=b.vch_num and a.regnumber=b.reg_no" +
                                 " and a.type='STD' inner join add_class c on c.add_class_id=b.class_applied and c.type='EAC' and " +
                                 " b.client_unit_id=c.client_unit_id inner join master_setting d  " +
                                 "on b.section =d.master_id and  d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                                 " where b.type='STD' and b.academic_year_id='" + Ac_Year_id + "'  and" +
                                 " b.client_unit_id='" + unitid_mst + "' AND to_number(nvl(fd.fee_amount,'0')) > 0 order by  nvl(fd.client_id||fd.client_unit_id||fd.regno,'-') desc ";

                        sgen.open_grid("List Of Previous Year Balance", mq, 0);
                        ViewBag.scripCall = "callFoo('List Of Previous Year Balance');";
                    }
                    catch (Exception ex) { }
                }
                else if (command == "Import")
                {
                    try
                    {
                        #region Upload
                        DataTable dt = new DataTable();
                        DataTable dtfile = new DataTable();
                        sgen.SetSession(MyGuid, "EDMODE", "N");
                        string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                        try
                        {
                            HttpPostedFileBase file1 = upd1;
                            string ext = Path.GetExtension(file1.FileName).ToLower();
                            string filesavepath = AppDomain.CurrentDomain.BaseDirectory + "\\Uploads\\" + cg_com_name.Replace(" ", "")
                   + "\\file" + DateTime.Now.ToString("ddMMyyyyhhmmfff") + ext;
                            file1.SaveAs(filesavepath);
                            //bool res = sgen.Update_data(userCode, dtfile, "file_tab", tm.Col8, isedit);
                            // Read sample data from CSV file
                            int i = 0;
                            using (CsvFileReader reader = new CsvFileReader(filesavepath))
                            {
                                CsvRow row = new CsvRow();
                                while (reader.ReadRow(row))
                                {
                                    DataRow dr = dt.NewRow();
                                    for (int c = 0; c < row.Count; c++)
                                    {
                                        if (i == 0)
                                        {
                                            dt.Columns.Add(row[c].ToString());
                                        }
                                        else
                                        {
                                            //if (c > dt.Columns.Count) break;
                                            if (row[c].ToString() == "")
                                            {
                                                dr[c] = "0";
                                            }
                                            else
                                            {
                                                dr[c] = row[c].ToString();
                                            }
                                        }
                                    }
                                    i++;
                                    dt.Rows.Add(dr);
                                }
                            }
                        }
                        catch (Exception ex) { }
                        try
                        {
                            dt.Rows[0].Delete();
                            var tm = model.FirstOrDefault();
                            List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                            foreach (DataRow dr in dt.Rows)
                            {
                                model.Add(new Tmodelmain
                                {
                                    Col24 = dr["Reg_Number"].ToString(),
                                    Col25 = dr["Student_Name"].ToString(),
                                    Col26 = dr["Father_Name"].ToString(),
                                    Col27 = dr["Current_Class"].ToString() + " " + dr["Current_Section"].ToString(),
                                    Col28 = dr["Previous_Year_Amount"].ToString(),
                                    Col29 = dr["class_id"].ToString()
                                }
                               );
                            }
                            model.Add(tm);
                        }
                        catch (Exception err)
                        {
                            sgen.showmsg(1, err.Message.ToString(), 0);
                        }
                        #endregion
                    }
                    catch (Exception ex) { }
                }
                else if (command == "Save" || command == "Update")
                {
                    var tm = model.FirstOrDefault();
                    bool data = false;

                    string type = tm.Col12;
                    mid_mst = tm.Col14;
                    isedit = false;
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col5;
                    }
                    else
                    {
                        if (model.Count > 1)
                        {
                            sgen.execute_cmd(userCode, "delete from fees_detail where type='EDI' and academic_year_id='" + Ac_Year_id + "' and client_unit_id='" + unitid_mst + "'");
                        }

                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " +
                        "and  client_unit_id='" + unitid_mst + "'", 6, "max");
                    }
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    // DateTime From_dt = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                    DateTime From_dt = DateTime.ParseExact(Ac_From_Date, sgen.Getdatetimeformat(), CultureInfo.InvariantCulture);
                    int month_id = From_dt.Month;
                    //string monthid = sgen.padlc(2, From_dt.Month);
                    int year = From_dt.Year;
                    string month_name = monthName.GetMonthName(month_id);
                    DateTime overdue_dt = new DateTime(From_dt.Year, From_dt.Month, 1).AddMonths(1).AddDays(-1);

                    // string due_dt = Convert.ToDateTime(Ac_From_Date).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                    try
                    {
                        if (model[1].Col24 != null)
                        {
                            model[0].Col8 = "";
                            for (int i = 1; i < model.Count; i++)
                            {
                                if (i == 100)
                                {

                                }
                                if (model[i].Col28 != "0" && model[i].Col28 != "")
                                {
                                    DataRow dr = dataTable.NewRow();
                                    dr["rec_id"] = "0";
                                    dr["type"] = type;
                                    dr["vch_date"] = currdate;
                                    dr["client_id"] = model[0].Col1 == null ? clientid_mst : model[0].Col1;
                                    dr["client_unit_id"] = model[0].Col2 == null ? unitid_mst : model[0].Col2;
                                    dr["vch_num"] = vch_num.Trim();
                                    dr["academic_year_id"] = Ac_Year_id;
                                    // dr["class_id"] = model[i].Col29;
                                    dr["class_id"] = sgen.padlc(sgen.Make_int(model[i].Col29), 3);
                                    dr["FeeType_Id"] = "004";
                                    dr["FeeHead_Id"] = "001";
                                    dr["Fee_Amount"] = model[i].Col28;
                                    dr["std_Amount"] = model[i].Col28;
                                    dr["From_date"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat());
                                    dr["No_Trans"] = "12";
                                    dr["Months"] = vch_num.Trim();
                                    dr["Due_Month"] = sgen.padlc(From_dt.Month, 2);
                                    //dr["Due_Month"] = sgen.padlc(2, From_dt.Month);
                                    dr["Monthname"] = month_name;
                                    dr["due_date"] = From_dt.Day;
                                    dr["overdue_date"] = From_dt.Day;
                                    dr["due_dt"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat());
                                    dr["overdue_dt"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat());
                                    dr["frequency_id"] = "4";
                                    dr["frequencyName"] = "Monthly";
                                    dr["regno"] = model[i].Col24;

                                    dr["ent_by"] = userid_mst;
                                    dr["ent_date"] = currdate;
                                    dr["edit_by"] = userid_mst;
                                    dr["edit_date"] = currdate;
                                    dr["client_id"] = clientid_mst;
                                    dr["client_unit_id"] = unitid_mst;

                                    dataTable.Rows.Add(dr);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                    if (model.Count == 1)
                    {
                        if (model[0].Col20 != "" && model[0].Col20 != "0")
                        {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = type;
                        dr["vch_date"] = currdate;

                        dr["vch_num"] = vch_num.Trim();
                        dr["academic_year_id"] = Ac_Year_id;
                        dr["class_id"] = model[0].Col21;
                        dr["FeeType_Id"] = "004";
                        dr["FeeHead_Id"] = "001";
                        dr["Fee_Amount"] = model[0].Col20;
                        dr["std_Amount"] = model[0].Col20;
                        //dr["From_date"] = sgen.Savedate(Ac_From_Date, true);
                        dr["From_date"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat()); ;
                        dr["No_Trans"] = "12";
                        dr["Months"] = vch_num.Trim();
                        dr["Due_Month"] = sgen.padlc(From_dt.Month, 2, "0");
                        dr["Monthname"] = month_name;
                        dr["due_date"] = From_dt.Day;
                        dr["overdue_date"] = From_dt.Day;
                        dr["due_dt"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat());
                        dr["overdue_dt"] = sgen.Make_date_S(Ac_From_Date, sgen.Getdatetimeformat());
                        dr["frequency_id"] = "4";
                        dr["frequencyName"] = "Monthly";
                        dr["regno"] = model[0].Col18;

                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;

                        dataTable.Rows.Add(dr);


                        }
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, model[0].Col8, isedit);
                    ViewBag.vnew = "";
                    ViewBag.vedit = "";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        //ViewBag.scripCall = "showmsgJS(1, 'Data Saved Successfully', 1);disableForm();";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        sgen.SetSession(MyGuid, "SSEEKVAL", null);
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            //TList1 = mod1,
                            //TList2 = mod2,
                            //SelectedItems1 = new string[] { "" },
                            //SelectedItems2 = new string[] { "" },
                            Col9 = "ENTRY OF OPENING PENDING FEE",
                            Col1 = clientid_mst,
                            Col2 = unitid_mst,
                            Col10 = "fees_detail",
                            Col12 = "EDI",
                            Col13 = "Save",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col16 = "",
                            Col17 = ""
                        });
                        model[0].Col30 = "";
                        string chk = sgen.getstring(userCode, "select distinct type from fees_detail where type='EDI' and academic_year_id='" + Ac_Year_id + "' and client_unit_id='" + unitid_mst + "'");
                        if (chk != "")
                        {
                            model[0].Col30 = "EDI";
                        }
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }

            }

            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpGet]
        public FileResult filedown(string value, string id)
        {
            sgen = new sgenFun(MyGuid);
            FillMst(MyGuid);
            DataTable dtopen = new DataTable();
            if (!value.Trim().Equals(""))
            {
                if (id == "EDI")
                {
                    mq = "select    a.FIRST_NAME||' '||replace(a.MIDDLE_NAME,'0','')||' '||" +
                             "replace(a.LAST_NAME,'0','') as Student_Name,replace(a.f_firstname,'0','')||' '||replace" +
                             "(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')  as Father_Name  ,a.Gender ,a.RegNumber as" +
                             " Reg_Number,b.Roll_number as Roll_Number ," +
                             "b.class_applied as Class_Id,  c.Class as Current_Class, b.section as Section_Id,  d.master_name as Current_Section," +
                             "nvl(fd.fee_amount,'0') as Previous_Year_Amount from  student_detail b  left join fees_detail fd   on fd.regno= b.reg_no and" +
                             "   fd.client_unit_id=b.client_unit_id and fd.type='EDI' and " +
                             "fd.academic_year_id='" + Ac_Year_id + "'	 inner join   user_details a on a.vch_num=b.vch_num and a.regnumber=b.reg_no" +
                             " and a.type='STD' inner join add_class c on c.add_class_id=b.class_applied and c.type='EAC' and " +
                             " b.client_unit_id=c.client_unit_id inner join master_setting d  " +
                             "on b.section =d.master_id and  d.type='ECS'  and find_in_set(b.client_unit_id,d.client_unit_id)=1" +
                             " where b.type='STD' and b.academic_year_id='" + Ac_Year_id + "'  and" +
                             " b.client_unit_id='" + unitid_mst + "'" +
                             "  order by  nvl(fd.client_id||fd.client_unit_id||fd.regno,'-') desc ";
                    dtopen = sgen.getdata(userCode, mq);
                    if (dtopen.Rows.Count > 0)
                    {
                        fileName1 = "Opbal";
                    }
                }
            }
            byte[] fileBytes = sgen.Exp_to_csv_new(dtopen, fileName1, cg_com_name);
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fileName1);
        }
        #endregion
        #region Due Fees SMS and Email
        public ActionResult duefee()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();
            try
            {
                FillMst();
                chkRef();
                ViewBag.vnew = "";
                ViewBag.vedit = "";
                ViewBag.vsave = "disabled='disabled'";
                ViewBag.vsavenew = "disabled='disabled'";
                ViewBag.scripCall = "enableForm()";
                string title = "DUE FEES SMS AND EMAIL";
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                List<SelectListItem> mod3 = new List<SelectListItem>();

                #region Mode of communication
                string SMS = "", Email = "", DetailSms = "0", DetailEmail = "0";
                string[] config = sgen.get_config(userCode, "000006", clientid_mst, unitid_mst, "SMS");
                SMS = config[0].ToString(); Email = config[1].ToString(); DetailSms = config[2].ToString(); DetailEmail = config[3].ToString();
                DataTable dt = new DataTable();
                if ((DetailSms == "1") && (DetailEmail == "1"))
                {
                    dt = sgen.getdata(userCode, " select 'SMS' as communication from dual Union all select 'Email' as communication from dual");

                }
                else if ((DetailSms == "1") && (DetailEmail == "0"))
                {
                    dt = sgen.getdata(userCode, " select 'SMS' as communication from dual");

                }
                else if ((DetailSms == "0") && (DetailEmail == "1"))
                {
                    dt = sgen.getdata(userCode, " select 'Email' as communication from dual");

                }
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        mod1.Add(new SelectListItem { Text = dr["communication"].ToString(), Value = dr["communication"].ToString() });
                    }
                }
                TempData[MyGuid + "_TList1"] = mod1;
                #endregion
                #region Class
                TempData[MyGuid + "_TList2"] = mod2 = sgen.BindClass(userCode, unitid_mst);

                #endregion
                #region Section
                TempData[MyGuid + "_TList3"] = mod3 = sgen.BindSection(userCode, unitid_mst);

                #endregion


                model.Add(new Tmodelmain
                {
                    TList1 = mod1,
                    TList2 = mod2,
                    TList3 = mod3,
                    SelectedItems1 = new string[] { "" },
                    SelectedItems2 = new string[] { "" },
                    SelectedItems3 = new string[] { "" },
                    Col9 = title,
                    Col1 = clientid_mst,
                    Col2 = unitid_mst,
                    Col10 = tab_name,
                    Col12 = type,
                    Col13 = "Save",
                    Col14 = mid_mst,
                    Col15 = MyGuid
                }
                    );
            }
            catch (Exception ex)
            {
                ViewBag.scripCall = "showmsgJS(1," + ex.Message.ToString() + ",2)";
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult duefee(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;

                // why this new in this form 
                if (command == "New")
                {

                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    var tm = model.FirstOrDefault();

                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                    model[0].SelectedItems1 = new string[] { "" };
                    model[0].SelectedItems1 = new string[] { "" };
                    model[0].Col16 = sgen.server_datetime_local(userCode);

                }
                else if (command == "Save" || command == "Update")
                {
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    #region BindHead
                    DataTable dtmain = new DataTable();
                    DataTable dt = new DataTable();
                    var tm = model.FirstOrDefault();
                    String URL = "";
                    if (sgen.GetSession(MyGuid, "SSEEKVAL") != null)
                    {
                        URL = sgen.GetSession(MyGuid, "SSEEKVAL").ToString();
                    }
                    string cond = "";
                    try
                    {
                        if (model[0].SelectedItems1 == null)
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Please Select Mode of Communication', 2);";
                            goto END;
                        }
                        if (model[0].SelectedItems2 != null)
                        {
                            cond = "and a.CLASSID in('" + string.Join("','", model[0].SelectedItems2) + "') ";
                        }
                        if (model[0].SelectedItems3 != null)
                        {
                            cond = cond + " and  a.section_id in ('" + string.Join("','", model[0].SelectedItems3) + "')";
                        }
                    }
                    catch (Exception ex) { }
                    string mq3 = "b.client_id||b.client_unit_id||b.vch_num,to_char(b.vch_date,'yyyymmdd'),b.type";
                    mq = sgen.Fee_AllData(clientid_mst, unitid_mst, Ac_Year_id, mq3);
                    mq = "select * from (" + mq + ")a where 1=1 " + cond + "";
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        foreach (DataRow dr in dt.Rows)
                        {
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = dr["Class"].ToString() + '-' + dr["Section"].ToString(),
                                Col17 = dr["Roll_Number"].ToString(),
                                Col18 = dr["Student_Name"].ToString(),
                                Col19 = dr["Father_Name"].ToString(),
                                Col20 = dr["Mother_Name"].ToString(),
                                Col21 = dr["email_id"].ToString(),
                                Col22 = dr["PhoneNo"].ToString(),
                                Col23 = dr["Due_bal_amt"].ToString(),
                                Chk1 = true,
                                TList1 = tm.TList1,
                                TList2 = tm.TList2,
                                TList3 = tm.TList3,
                                SelectedItems1 = tm.SelectedItems1,
                                SelectedItems2 = tm.SelectedItems2,
                                SelectedItems3 = tm.SelectedItems3
                            });
                        }
                    }
                END:;
                    #endregion
                }
                else if (command == "Submit")
                {

                    string SMS = "", Email = "", DetailSms = "0", DetailEmail = "0";
                    string smsid = "000006";// SMS and Email OF Due Fee
                    string emailid = "", phoneno = "";
                    string[] config = sgen.get_config(userCode, "000006", clientid_mst, unitid_mst, "SMS");
                    SMS = config[0].ToString(); Email = config[1].ToString(); DetailSms = config[2].ToString(); DetailEmail = config[3].ToString();
                    Mailer mailer = new Mailer(userCode, clientid_mst, unitid_mst, MyGuid);
                    BulkSMS bulk = new BulkSMS(userCode, clientid_mst, unitid_mst, MyGuid);
                    int cnt = 0;
                    for (Int32 i = 0; i < model.Count; i++)
                    {
                        if (model[i].Chk1 == true)
                        {
                            cnt++;
                            DetailSms = "1";
                            #region SMS
                            if ((DetailSms == "1") && (model[0].SelectedItems1.FirstOrDefault() == "SMS"))
                            {
                                string phone_no = model[i].Col22;
                                string student_name = model[i].Col18;
                                string class_sec = model[i].Col16;
                                string msg_txt = "Dear Parents, Your Ward " + student_name + " Class " + class_sec + "  Fee " + model[i].Col23 + " Is Due";
                                if ((phone_no != "") && (phone_no != "-") && (phone_no != "0"))
                                {
                                    bulk.Add_sms(phone_no, msg_txt);
                                }
                            }
                            #endregion
                            #region Email
                            string mailfrom = "";
                            DataTable datatable = new DataTable();
                            datatable = sgen.getdata(userCode, "select com_email from company_profile where Company_Profile_Id='" + clientid_mst + "' and type='CP'");
                            if (datatable.Rows.Count > 0)
                            {
                                mailfrom = Convert.ToString(datatable.Rows[0]["com_email"]);
                            }
                            if ((DetailEmail == "1") && model[0].SelectedItems1.FirstOrDefault() == "Email")
                            {
                                {
                                    string Email_To = model[i].Col21;
                                    var body = new StringBuilder();
                                    string student_name = model[i].Col18;
                                    string class_sec = model[i].Col16;
                                    body.AppendLine(@"<b style='color:#3caee9; font-size: 20px'>Fee Reminder </b><br /><hr style='border:1px solid black' />" +
                                             "<p>Hi <b>Dear Parents, Your Ward " + student_name + " Class " + class_sec + "  Fee " + model[i].Col23 + " Is Due  </b>,</p><table style='font-weight:600'>");
                                    body.AppendLine(@"</table><br /><p></p><p>ThankYou,<br />" + clientname_mst + "<br /></p><br />");
                                    // sgen.Send_mail_SA1(userCode, clientid_mst, unitid_mst, mailfrom, Email_To, Email_To, body.ToString(), "Fee Reminder", "");
                                    if ((Email_To != "") && (Email_To != "-") && (Email_To != "0"))
                                    {
                                        mailer.Add_Mail(Email_To, "Fee Due Reminder", body.ToString());
                                    }
                                }
                            }
                            #endregion
                        }
                    }

                    if (cnt == 0)
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Please Select Atleast One Student', 2);";
                        goto END;
                    }
                    else
                    {
                        mailer.Send_Email_Bulk(); ;
                        bulk.Send_SMS_Bulk();
                        ViewBag.scripCall = "showmsgJS(1, 'Reminder Sent Successfully', 2);";
                    }

                END:;

                }
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };

                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
            }

            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Promoted To next Class
        public ActionResult Promoted_Students()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();

            FillMst();

            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            tab_name = "student_result";
            type = "PRM";
            model[0].TList1 = mod1;
            model[0].TList2 = mod1;
            model[0].TList3 = mod1;
            model[0].TList4 = mod1;
            model[0].TList5 = mod1;
            model[0].TList6 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            model[0].SelectedItems6 = new string[] { "" };
            model[0].Col9 = "PROMOTED TO NEXT CLASS";
            //model[0].Col1 = clientid_mst;
            //        model[0].Col2 = unitid_mst,
            model[0].Col10 = tab_name;
            model[0].Col12 = type;
            //model[0].Col13 = "Save",
            //model[0].Col14 = mid_mst,
            //model[0].Col15 = m_id_mst,
            model[0].Col20 = "N";

            return View(model);
        }
        public List<Tmodelmain> new_Promoted_Students(List<Tmodelmain> model)
        {

            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            //ViewBag.scripCall = "enableForm();";
            ViewBag.scripCall = "enableForm();$('#ddl_FromAc').attr('disabled','disabled');$('#ddl_ToAC').attr('disabled','disabled'); ";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            List<SelectListItem> mod6 = new List<SelectListItem>();
            #region  Academic Year
            DataTable dt = new DataTable();
            dt = sgen.getdata(userCode, "select academic_year_id,academic_year from add_academic_year where  client_id='" + clientid_mst + "' and type='ACY'");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                    mod2.Add(new SelectListItem { Text = dr["academic_year"].ToString(), Value = dr["academic_year_id"].ToString() });
                }
                //SelectedItems6 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => dr["promoted_class"].ToString()).Distinct()).Split(',')
                //model[0].SelectedItems1 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => dt.Rows[0]["promoted_class"].ToString()).Distinct()).Split(',');
                model[0].SelectedItems1 = new string[] { Ac_Year_id };
                model[0].Col25 = Ac_Year_id;
                string checkyr = sgen.getstring(userCode, "select SUBSTR( academic_year,6,5) as academic_year  from add_academic_year " +
                                " where academic_year_id='" + Ac_Year_id + "'  and client_id='" + clientid_mst + "' and type='ACY'");
                if (checkyr != "")
                {
                    string checknextyr = sgen.getstring(userCode, "select  academic_year_id  from add_academic_year where academic_year LIKE '" + checkyr + "%' and " +
                        "   client_id='" + clientid_mst + "' and type='ACY'");
                    if (checknextyr != "")
                    {
                        model[0].SelectedItems2 = new string[] { checknextyr };
                        model[0].Col26 = checknextyr;
                    }
                }
            }
            #endregion
            #region Bind Class
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3 = sgen.BindClass(userCode, unitid_mst);
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = sgen.BindClass(userCode, unitid_mst);
            TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6 = sgen.BindClass(userCode, unitid_mst);
            #endregion
            #region BindSection
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = sgen.BindSection(userCode, unitid_mst);
            #endregion
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            //TempData[MyGuid + "_TList1"] = mod1;
            //TempData[MyGuid + "_TList2"] = mod2;
            //TempData[MyGuid + "_TList3"] = mod3;
            //TempData[MyGuid + "_TList4"] = mod4;
            //TempData[MyGuid + "_TList5"] = mod5;
            //TempData[MyGuid + "_TList6"] = mod6;
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            //TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
            //TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
            //TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5;
            //TempData[MyGuid + "_TList6"] = model[0].TList6 = mod6;
            return model;
        }
        [HttpPost]
        public ActionResult Promoted_Students(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
                List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                if (command == "New")
                {
                    model = new_Promoted_Students(model);
                }
                else if (command == "Class")
                {
                    try
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "enableForm();$('#ddl_FromAc').attr('disabled','disabled');$('#ddl_ToAC').attr('disabled','disabled'); ";
                        string class_id = string.Join(",", model[0].SelectedItems3);
                        string class_to = sgen.getstring(userCode, "select add_class_id  from add_class where Sequence in ( select (sequence+1) from " +
                     "add_class where add_class_id='" + class_id + "') and  client_unit_id='" + unitid_mst + "' and type='EAC'");
                        model[0].SelectedItems4 = new string[] { class_to };
                        model[0].SelectedItems1 = new string[] { model[0].Col25 };
                        model[0].SelectedItems2 = new string[] { model[0].Col26 };
                    }
                    catch (Exception ex) { }
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tm = model.FirstOrDefault();
                    string type = tm.Col12;
                    mid_mst = tm.Col14;
                    isedit = false;
                    string col8 = "", col23 = "";
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col5;
                    }
                    else
                    {
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where type='PRM' " +
                        "and client_unit_id='" + unitid_mst + "'", 6, "max");
                    }
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, "student_Result");
                    DataTable dtpro = cmd_Fun.GetStructure(userCode, "student_detail");
                    string rec_id = "0";
                    for (Int32 i = 0; i < model.Count; i++)
                    {
                        if (model[i].Chk1 == true)
                        {
                            if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                            {
                                if (model[i].Col24 == "1")
                                {

                                    mq1 = "select * from student_detail where academic_year_id='" + model[0].Col26 + "' and Reg_no='" + model[i].Col17 + "' and type='STD'";
                                }
                                else
                                {

                                    mq1 = "select * from student_detail where academic_year_id='" + model[0].Col25 + "' and Reg_no='" + model[i].Col17 + "' and type='STD'";
                                }
                                rec_id = model[i].Col22;
                                col8 = model[i].Col8;
                                col23 = model[i].Col23;
                            }
                            else
                            {

                                mq1 = "select * from student_detail where academic_year_id='" + model[0].Col25 + "' and Reg_no='" + model[i].Col17 + "' and type='STD'";
                            }
                            DataTable dtstd = sgen.getdata(userCode, mq1);
                            if (dtstd.Rows.Count > 0)
                            {
                                DataRow dr = dtpro.NewRow();
                                dr["rec_id"] = rec_id;
                                dr["type"] = "STD";
                                dr["vch_date"] = currdate;
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                //  dr["vch_num"] = dtstd.Rows[0]["vch_num"].ToString();
                                dr["vch_num"] = model[i].Col27;
                                dr["Academic_year_Id"] = model[0].Col26;
                                dr["Reg_no"] = model[i].Col17;
                                dr["CLASS_APPLIED"] = model[0].SelectedItems6.FirstOrDefault();
                                dr["havetransport"] = dtstd.Rows[0]["havetransport"].ToString();
                                dr["pick_point"] = dtstd.Rows[0]["pick_point"].ToString();
                                dr["drop_point"] = dtstd.Rows[0]["drop_point"].ToString();
                                dr["StudentType"] = "Promoted";
                                dr["From_Academic_yr"] = model[0].Col25;
                                dr["From_Class"] = model[0].SelectedItems3.FirstOrDefault();
                                dr["From_Section"] = model[i].Col21;
                                if (isedit)
                                {
                                    dr["ent_by"] = model[0].Col3;
                                    dr["ent_date"] = model[0].Col4;
                                    dr["edit_by"] = userid_mst;
                                    dr["edit_date"] = currdate;
                                }
                                else
                                {
                                    dr["ent_by"] = userid_mst;
                                    dr["ent_date"] = currdate;
                                    dr["edit_by"] = "-";
                                    dr["edit_date"] = currdate;
                                }
                                dtpro.Rows.Add(dr);
                            }
                        }
                        #region new table
                        DataRow drr = dataTable.NewRow();
                        drr["rec_id"] = "0";
                        drr["type"] = "PRM";
                        drr["vch_date"] = currdate;
                        drr["client_id"] = clientid_mst;
                        drr["client_unit_id"] = unitid_mst;
                        drr["vch_num"] = vch_num.Trim();
                        drr["Academic_year_Id"] = model[0].Col26;
                        drr["Reg_no"] = model[i].Col17;
                        drr["class_id"] = model[0].SelectedItems3.FirstOrDefault(); //From Class
                        drr["section_id"] = model[i].Col21;
                        drr["grade"] = model[i].SelectedItems6.FirstOrDefault();//promoted class
                        drr["promoted"] = model[i].Chk1;
                        drr["position"] = model[0].Col25;// From Ac year
                        drr["Sub_CatId"] = tm.Col20;// Promoted type student
                        if (isedit)
                        {
                            drr["ent_by"] = model[0].Col3;
                            drr["ent_date"] = model[0].Col4;
                            drr["edit_by"] = userid_mst;
                            drr["edit_date"] = currdate;
                        }
                        else
                        {
                            drr["ent_by"] = userid_mst;
                            drr["ent_date"] = currdate;
                            drr["edit_by"] = "-";
                            drr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(drr);
                        #endregion
                    }
                    bool Result = sgen.Update_data(userCode, dtpro, "student_detail", col8, isedit);
                    if (Result == true)
                    {
                        Result = sgen.Update_data(userCode, dataTable, "student_result", col23, isedit);
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            TList4 = mod4,
                            TList5 = mod5,
                            TList6 = mod6,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },
                            SelectedItems6 = new string[] { "" },
                            Col9 = "PROMOTED TO NEXT CLASS",
                            Col1 = clientid_mst,
                            Col2 = unitid_mst,
                            Col10 = "student_result",
                            Col12 = "PRM",
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = mid_mst,
                            Col15 = tm.Col15,
                            Col20 = "N"
                        }
                           );
                    }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();$('#ddl_FromAc').attr('disabled','disabled');$('#ddl_ToAC').attr('disabled','disabled'); ";
                    var tm = model.FirstOrDefault();
                    model[0].SelectedItems1 = new string[] { model[0].Col25 };
                    model[0].SelectedItems2 = new string[] { model[0].Col26 };
                    string prm_class = sgen.getstring(userCode, "select distinct class_applied from student_detail where" +
                        " client_unit_id='" + unitid_mst + "' and type='STD' and From_Academic_yr='" + model[0].Col25 + "'" +
                        " and Academic_Year_Id='" + model[0].Col26 + "' and from_class='" + string.Join(",", model[0].SelectedItems3) + "' " +
                        "and From_Section='" + string.Join(",", model[0].SelectedItems5) + "'");
                    if (prm_class != "")
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Students Of Selected Class and Section Already Promoted', 2);";
                        goto END;
                    }

                    string prm_exam = sgen.getstring(userCode, "select master_id from master_setting where type='EEM' and " +
                        "client_unit_id='" + unitid_mst + "' and classid='Y'");

                    string dtfstr = "";
                    if (prm_exam != "")
                    {
                        dtfstr = sgen.getstring(userCode, "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type||a.col11)   from enx_tab a where  a.type='EDS'" +
                           " and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + string.Join(",", model[0].SelectedItems3) + "' and a.ref_code='" + string.Join(",", model[0].SelectedItems5) + "' and a.col8='" + prm_exam + "' ");
                    }
                    if (tm.Col20 == "Y")
                    {
                        //mq = "select distinct a.reg_no, ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '||" +
                        //    " replace(ud.last_name, '0', '') as Student_Name,replace(ud.f_firstname,'0','')||' '||replace(ud.f_middlename,'0','')||' '||replace(ud.f_lastname,'0','')  as Father_Name,c.class,(select add_class_id from add_class ac where ac.type='EAC' and  " +
                        //    "ac.client_unit_id=a.client_unit_id and ac.sequence= c.sequence+1 ) as promoted_class,a.Total_marks,(select sr.marks from" +
                        //    "  student_result sr where sr.type='SER'  and sr.client_unit_id='" + unitid_mst + "'" +
                        //    " and sr.Academic_Year_Id='" + model[0].Col25 + "' and sr.type='SER' and sr.Class_Id='" + string.Join(",", model[0].SelectedItems3) + "'" +
                        //    " AND sr.Section_Id='" + string.Join(",", model[0].SelectedItems5) + "' and sr.Sub_WisePass= true and sr.RollNo in " +
                        //    "(select  a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type   from enx_tab a where" +
                        //    "  a.type='EDS' and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + string.Join(",", model[0].SelectedItems3) + "' " +
                        //    "and a.ref_code='" + string.Join(",", model[0].SelectedItems5) + "' and a.col8='001' ) and sr.subject_id=700 and " +
                        //    "sr.reg_no=a.reg_no ) as scored_marks ,(select sr.marks from  student_result sr where sr.type='SER'  and sr.client_unit_id='" + unitid_mst + "' and sr.Academic_Year_Id='" + Ac_Year_id + "' and sr.type='SER' and " +
                        //    "sr.Class_Id='" + string.Join(",", model[0].SelectedItems3) + "' AND sr.Section_Id='" + string.Join(",", model[0].SelectedItems5) + "'" +
                        //    " and sr.Sub_WisePass= true and sr.RollNo in (select  (a.client_id||a.client_unit_id||a.vch_num,to_char(a.vch_date,'yyyymmdd')||a.type) " +
                        //    "  from enx_tab a where  a.type='EDS' and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + string.Join(",", model[0].SelectedItems3) + "'" +
                        //    " and a.ref_code='" + string.Join(",", model[0].SelectedItems5) + "' and a.col8='001' ) and sr.subject_id=701 " +
                        //    "and sr.reg_no=a.reg_no ) as per  ,(select sr.marks from  student_result sr where sr.type='SER' and" +
                        //    "  sr.client_unit_id='" + unitid_mst + "' and sr.Academic_Year_Id='" + Ac_Year_id + "' and sr.type='SER' and" +
                        //    " sr.Class_Id='" + string.Join(",", model[0].SelectedItems3) + "' AND sr.Section_Id='" + string.Join(",", model[0].SelectedItems5) + "' and " +
                        //    "sr.Sub_WisePass= true and sr.RollNo in (select  (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type)" +
                        //    "   from enx_tab a where  a.type='EDS' and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + string.Join(",", model[0].SelectedItems3) + "'" +
                        //    " and a.ref_code='" + string.Join(",", model[0].SelectedItems3) + "' and a.col8='001' ) and sr.subject_id=703 and sr.reg_no=a.reg_no " +
                        //    " ) as position from student_result a inner join user_details ud on a.reg_no=ud.regnumber and ud.type='STD' inner join add_class c" +
                        //    " on a.class_id=c.add_class_id and c.type='EAC' and a.client_unit_id=c.client_unit_id  where a.type='SER' " +
                        //    " and a.client_unit_id='" + unitid_mst + "' and a.Academic_Year_Id='" + Ac_Year_id + "' and a.type='SER' and a.Class_Id='" + string.Join(",", model[0].SelectedItems3) + "'" +
                        //    " AND a.Section_Id='" + string.Join(",", model[0].SelectedItems5) + "' and a.Sub_WisePass= true and a.RollNo in (select " +
                        //    " (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type)   from enx_tab a where  a.type='EDS'" +
                        //    " and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + string.Join(",", model[0].SelectedItems3) + "' and a.ref_code='" + string.Join(",", model[0].SelectedItems5) + "' and a.col8='001' )" +
                        //    " and a.subject_id<700  ";

                        mq = "select distinct ud.vch_num, a.Section_Id section, a.reg_no, ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '||" +
                               " replace(ud.last_name, '0', '') as Student_Name,replace(ud.f_firstname,'0','')||' '||replace(ud.f_middlename,'0','')||' '||replace(ud.f_lastname,'0','')  as Father_Name,c.class,(select add_class_id from add_class ac where ac.type='EAC' and  " +
                               "ac.client_unit_id=a.client_unit_id and ac.sequence= c.sequence+1 ) as promoted_class,a.Total_marks,(select sr.marks from" +
                               "  student_result sr where sr.type='SER'  and sr.client_unit_id='" + unitid_mst + "'" +
                               " and sr.Academic_Year_Id='" + model[0].Col25 + "' and sr.type='SER' and sr.Class_Id='" + string.Join(",", model[0].SelectedItems3) + "'" +
                               " AND sr.Section_Id='" + string.Join(",", model[0].SelectedItems5) + "' and sr.Sub_WisePass= '1' and sr.RollNo in " +
                               "(select  a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type   from enx_tab a where" +
                               "  a.type='EDS' and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + string.Join(",", model[0].SelectedItems3) + "' " +
                               "and a.ref_code='" + string.Join(",", model[0].SelectedItems5) + "' and a.col8='" + prm_exam + "' ) and sr.subject_id=700 and " +
                               "sr.reg_no=a.reg_no ) as scored_marks ,(select sr.marks from  student_result sr where sr.type='SER'  and sr.client_unit_id='" + unitid_mst + "' and sr.Academic_Year_Id='" + Ac_Year_id + "' and sr.type='SER' and " +
                               "sr.Class_Id='" + string.Join(",", model[0].SelectedItems3) + "' AND sr.Section_Id='" + string.Join(",", model[0].SelectedItems5) + "'" +
                               " and sr.Sub_WisePass= '1' and sr.RollNo in (select  (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) " +
                               "  from enx_tab a where  a.type='EDS' and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + string.Join(",", model[0].SelectedItems3) + "'" +
                               " and a.ref_code='" + string.Join(",", model[0].SelectedItems5) + "' and a.col8='" + prm_exam + "' ) and sr.subject_id=701 " +
                               "and sr.reg_no=a.reg_no ) as per  ,(select sr.marks from  student_result sr where sr.type='SER' and" +
                               "  sr.client_unit_id='" + unitid_mst + "' and sr.Academic_Year_Id='" + Ac_Year_id + "' and sr.type='SER' and" +
                               " sr.Class_Id='" + string.Join(",", model[0].SelectedItems3) + "' AND sr.Section_Id='" + string.Join(",", model[0].SelectedItems5) + "' and " +
                               "sr.Sub_WisePass= '1' and sr.RollNo in (select  (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type)" +
                               "   from enx_tab a where  a.type='EDS' and a.client_unit_id='" + unitid_mst + "' and a.r_no='" + string.Join(",", model[0].SelectedItems3) + "'" +
                               " and a.ref_code='" + string.Join(",", model[0].SelectedItems3) + "' and a.col8='" + prm_exam + "' ) and sr.subject_id=703 and sr.reg_no=a.reg_no " +
                               " ) as position from student_result a inner join user_details ud on a.reg_no=ud.regnumber and ud.type='STD' inner join add_class c" +
                               " on a.class_id=c.add_class_id and c.type='EAC' and a.client_unit_id=c.client_unit_id  where a.type='SER' " +
                               " and a.client_unit_id='" + unitid_mst + "' and a.Academic_Year_Id='" + Ac_Year_id + "' and a.type='SER' and a.Class_Id='" + string.Join(",", model[0].SelectedItems3) + "'" +
                               " AND a.Section_Id='" + string.Join(",", model[0].SelectedItems5) + "' and a.Sub_WisePass= '1' and a.RollNo ='" + dtfstr + "'" +
                               " and a.subject_id<700  ";
                    }
                    else
                    {
                        mq = "select ud.vch_num, a.reg_no,a.section , (ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '||" +
                               " replace(ud.last_name, '0', '')) as Student_Name,(replace(ud.f_firstname,'0','')||' '||replace(ud.f_middlename,'0','')||' '||" +
                               "replace(ud.f_lastname,'0','') ) as Father_Name ,c.class,(select add_class_id from add_class ac where" +
                               " ac.type='EAC' and  ac.client_unit_id=a.client_unit_id and ac.sequence= c.sequence+1 ) as promoted_class" +
                               " from student_detail a inner join user_details ud on a.reg_no=ud.regnumber and ud.type='STD' and ud.vch_num=a.vch_num inner join " +
                               " add_class c on a.class_applied=c.add_class_id and c.type='EAC' and a.client_unit_id=c.client_unit_id " +
                               " where a.type='STD' and a.class_applied = '" + string.Join(",", model[0].SelectedItems3) + "' and " +
                               " a.section in ('" + string.Join(",", model[0].SelectedItems5).Replace(",", "','") + "') and a.academic_year_id='" + model[0].Col25 + "' " +
                               "order by a.reg_no";
                    }
                    DataTable dt = sgen.getdata(userCode, mq);
                    string per = "", postion = "", section = "";
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            section = dr["section"].ToString();
                            if (tm.Col20 == "Y")
                            {
                                per = dr["per"].ToString();
                                postion = dr["position"].ToString();
                            }
                            else { section = dr["section"].ToString(); }
                            model.Add(new Tmodelmain
                            {
                                Col8 = tm.Col8,
                                Col9 = tm.Col9,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col100 = tm.Col100,
                                Col121 = tm.Col121,
                                Col122 = tm.Col122,
                                Col123 = tm.Col123,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col20 = tm.Col20,
                                Col23 = tm.Col23,
                                Col25 = tm.Col25,
                                Col26 = tm.Col26,
                                Col16 = dr["Student_Name"].ToString(),
                                Col27 = dr["vch_num"].ToString(),
                                Col17 = dr["reg_no"].ToString(),
                                Col18 = per,
                                Col19 = dr["Father_Name"].ToString(),
                                Col21 = section,
                                Chk1 = true,
                                TList1 = mod1,
                                TList2 = mod2,
                                TList3 = mod3,
                                TList4 = mod4,
                                TList5 = mod5,
                                TList6 = mod6,
                                SelectedItems1 = tm.SelectedItems1,
                                SelectedItems2 = tm.SelectedItems2,
                                SelectedItems3 = tm.SelectedItems3,
                                SelectedItems4 = tm.SelectedItems4,
                                SelectedItems5 = tm.SelectedItems5,
                                SelectedItems6 = System.String.Join(",", dt.Rows.OfType<DataRow>().Select(r => dr["promoted_class"].ToString()).Distinct()).Split(',')
                            });
                        }
                        model.RemoveAt(0);
                    }
                END:;

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region std_tchr_dir
        public ActionResult std_tchr_dir()
        {
            FillMst();


            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "TEACHER DIRECTORY"; tm1.Col12 = "TDR"; // TEACHER DIRECTORY
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col10 = "add_class";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            //tm1.Col13 = "Save";
            sgen.SetSession(MyGuid, "TDR_MID", mid_mst.Trim());
            sgen.SetSession(MyGuid, "TDR_TYPE_MST", model[0].Col12.Trim());
            sgen.SetSession(MyGuid, "TDR_COND_MST", model[0].Col11.Trim());
            sgen.SetSession(MyGuid, "TDR_TBL_MST", model[0].Col10.Trim());
            List<SelectListItem> mod1 = new List<SelectListItem>();
            #region bindstudent
            DataTable dt = new DataTable();
            mq = "select sibling2_rollno from user_details where vch_num='" + Convert.ToInt32(userid_mst) + "'";
            string familyid = sgen.getstring(userCode, mq);
            dt = sgen.getdata(userCode, "select (first_name||' '||last_name) as std_name,regnumber from user_details where type='STD' and sibling2_rollno='" + familyid.Trim() + "'");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["std_name"].ToString(), Value = dr["regnumber"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist1"] = tm1.TList1 = mod1;
            #endregion
            //tm1.TList1 = mod1;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult std_tchr_dir(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                TempData[MyGuid + "_TList1"] = model[0].TList1;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (command == "std")
                {
                    string stdd = model[0].SelectedItems1.FirstOrDefault();
                    mq = @"select (tc.FIRST_NAME||' '|| REPLACE(tc.MIDDLE_NAME, '0', '')|| ' '|| REPLACE(tc.LAST_NAME, '0', '')) Name,
tc.department,tc.designation,nvl(cl.class,'-') as Class,ms.master_name as dept,msdp.master_name as desg,tc.email,tc.con_number
from user_details ud
left outer join student_detail sd on sd.reg_no = ud.RegNumber and sd.type='STD' left outer join add_class cl on sd.class_applied = cl.add_class_id  and cl.client_unit_id = '" + unitid_mst + "' and cl.type = 'EAC' INNER join (SELECT DISTINCT teacher_id,class_id FROM teacher_subject where type='ETS'  and client_unit_id='" + unitid_mst + "') ts on sd.CLASS_APPLIED=ts.class_id inner join user_details tc on tc.vch_num=ts.teacher_id and tc.type='CPR' inner JOIN master_setting ms on ms.master_id = tc.deparTment and ms.type='MDP' inner join master_setting msdp on msdp.master_id = tc.designation and msdp.type='MDG' WHERE  ud.client_unit_id = '" + unitid_mst + "' and ud.type = 'STD' and ud.regnumber = '" + stdd + "'";
                    DataTable dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].Col17 = dt.Rows[0]["Name"].ToString();
                        model[0].Col18 = dt.Rows[0]["desg"].ToString();
                        model[0].Col19 = dt.Rows[0]["dept"].ToString();
                        model[0].Col22 = dt.Rows[0]["email"].ToString();
                        model[0].Col21 = dt.Rows[0]["con_number"].ToString();
                        model[0].Col20 = dt.Rows[0]["class"].ToString();
                    }
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region sch_directory
        public ActionResult sch_directory()
        {
            FillMst();


            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            Tmodelmain tm1 = new Tmodelmain();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            tm1.Col9 = "SCHOOL DIRECTORY"; tm1.Col12 = "SDR"; // SCHOOL DIRECTORY
            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            tm1.Col10 = "";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            mq = @"select DISTINCT (ud.first_name|| ' '|| replace(ud.middle_name,'0','')|| ' '|| replace(ud.last_name,'0','')) as name,ms.master_name as designation,msdp.master_name as
                   department,ud.email,ud.con_number,nvl(ts.Class_Id, '-') as classid,cl.class from user_details ud 
                   INNER JOIN master_setting ms on ud.designation=ms.master_id and ms.type= 'MDG' 
                   INNER JOIN master_setting msdp on ud.department=msdp.master_id and msdp.type= 'MDP' 
                   left OUTER JOIN teacher_subject ts on ud.vch_num= ts.Teacher_Id " +
                   " and ts.client_unit_id= '" + unitid_mst + "' and ts.type= 'ETS' INNER join add_class cl on ts.Class_Id= cl.add_class_id " +
                   "and  ts.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                   "where ud.type= 'CPR'  ";
            DataTable dt = sgen.getdata(userCode, mq);
            if (dt.Rows.Count > 0)
            {
                List<Tmodelmain> rpt = new List<Tmodelmain>();
                //for (int i = 0; i < dt.Rows.Count; i++)
                //{
                foreach (DataRow dr in dt.Rows)
                {
                    rpt.Add(new Tmodelmain
                    {
                        Col17 = dr["name"].ToString(),
                        Col18 = dr["designation"].ToString(),
                        Col19 = dr["department"].ToString(),
                        Col21 = dr["con_number"].ToString(),
                        Col20 = dr["class"].ToString(),
                        Col22 = dr["email"].ToString(),
                        Col14 = tm1.Col14,
                        Col15 = tm1.Col15,
                        Col12 = tm1.Col12,
                        Col10 = tm1.Col10,
                        Col9 = tm1.Col9
                    });
                }

                model = rpt;
            }
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult sch_directory(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                //List<SelectListItem> mod1 = new List<SelectListItem>();
                //model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                //TempData[MyGuid + "_TList1"] = model[0].TList1;
                //if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Report_Templates
        public ActionResult rpt_temp()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();
            string res_format = "", recp_format = "", ad_format = "", ic_format = "", inv_format = "";

            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "enableForm()";
            string title = "REPORT TEMPLATES";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();

            #region RECEIPT FORMAT
            DataTable dt = new DataTable();
            dt = sgen.getdata(userCode, "select  master_id ,master_name from master_setting " +
                   "where type='FRF' ");
            string col13 = "", col18 = "", col19 = "", col20 = "", col21 = "";
            col18 = "Update Result Format";
            col13 = "Update Receipt Format";
            col19 = "Update Admit Card Format";
            col20 = "Update Icard Format";
            col21 = "Update Invoice Format";
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
                recp_format = sgen.getstring(userCode, "select master_id from master_setting where type='FRF' and classid='1' ");
            }
            #endregion
            #region Invoice FORMAT
            dt = new DataTable();
            dt = sgen.getdata(userCode, "select  master_id ,master_name from master_setting " +
                   "where type='IRF' ");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod5.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
                recp_format = sgen.getstring(userCode, "select master_id from master_setting where type='IRF' and classid='1' ");
            }
            #endregion

            #region RESULT FORMAT
            DataTable dt1 = new DataTable();
            dt1 = sgen.getdata(userCode, "select  master_id ,master_name from master_setting " +
                   "where type='RRF' ");
            if (dt1.Rows.Count > 0)
            {
                foreach (DataRow dr in dt1.Rows)
                {
                    mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
                res_format = sgen.getstring(userCode, "select master_id from master_setting where type='RRF' and classid='1' ");
            }
            #endregion

            #region ADMIT CARD FORMAT
            DataTable dt4 = new DataTable();
            dt4 = sgen.getdata(userCode, "select  master_id ,master_name from master_setting " +
                   "where type='ACF' ");
            if (dt4.Rows.Count > 0)
            {
                foreach (DataRow dr in dt4.Rows)
                {
                    mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
                ad_format = sgen.getstring(userCode, "select master_id from master_setting where type='ACF' and classid='1' ");
            }
            #endregion

            #region I CARD FORMAT
            DataTable dt5 = new DataTable();
            dt5 = sgen.getdata(userCode, "select  master_id ,master_name from master_setting " +
                   "where type='ICF' ");
            if (dt5.Rows.Count > 0)
            {
                foreach (DataRow dr in dt5.Rows)
                {
                    mod4.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
                ic_format = sgen.getstring(userCode, "select master_id from master_setting where type='ICF' and classid='1' ");
            }
            #endregion
            TempData[MyGuid + "_TList1"] = mod1;
            TempData[MyGuid + "_TList2"] = mod2;
            TempData[MyGuid + "_TList3"] = mod3;
            TempData[MyGuid + "_TList4"] = mod4;
            TempData[MyGuid + "_TList5"] = mod5;
            model.Add(new Tmodelmain
            {
                TList1 = mod1,
                TList2 = mod2,
                TList3 = mod3,
                TList4 = mod4,
                TList5 = mod5,
                SelectedItems1 = new string[] { "" },
                SelectedItems2 = new string[] { "" },
                SelectedItems3 = new string[] { "" },
                SelectedItems4 = new string[] { "" },
                SelectedItems5 = new string[] { "" },
                Col9 = title,
                Col1 = clientid_mst,
                Col2 = unitid_mst,
                Col10 = tab_name,
                Col12 = type,
                Col13 = col13,
                Col18 = col18,
                Col19 = col19,
                Col20 = col20,
                Col21 = col21,
                Col14 = mid_mst,
                Col15 = m_id_mst,
                Col22 = m_module3
            });

            model[0].SelectedItems1 = new string[] { recp_format };
            model[0].SelectedItems2 = new string[] { res_format };
            model[0].SelectedItems3 = new string[] { ad_format };
            model[0].SelectedItems4 = new string[] { ic_format };
            model[0].SelectedItems5 = new string[] { inv_format };
            return View(model);
        }
        [HttpPost]
        public ActionResult rpt_temp(List<Tmodelmain> model, string command)
        {
            string res_format = "", recp_format = "", ad_format = "", ic_format = "", inv_format = "";
            CrystalDecisions.Web.CrystalImageHandler handler = new CrystalDecisions.Web.CrystalImageHandler();
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                DataTable dt = new DataTable();
                DataTable dt1 = new DataTable();
                if (command == "Receipt")
                {
                    try
                    {
                        string mq = "select 'Student_Name' AS name,'Father_Name'AS father_name,'Regno' as regno,'Receipt_no' as Receipt_no,'1.00' as receipt_amount" +
                            ",'" + Ac_Year_id + "'academic_year_id,'' academic_year,'001' as class_id,'1st' as class,'001'fee_head_id,'HeadName' as HeadName " +
                            ",'001' as mode_of_payment_id,'Cash' master_name,''client_id,''client_unit_id,'April' month_name,'001' section_id,'A' as section," +
                            "'' as Receipt_Date,'April' AS month from dual";
                        dt = sgen.getdata(userCode, mq);
                        //if (dt.Rows.Count > 0)
                        {
                            string rpt_name = sgen.getstring(userCode, "select client_name  from master_setting where type='FRF' and master_id='" + string.Join(",", model[0].SelectedItems1) + "'");
                            //string rpt = "../../erp/schoolReports_Rpts/" + rpt_name;
                            string rpt = "../schoolReports_Rpts/" + rpt_name;
                            sgen.open_report_bydt(userCode, dt, rpt, "Student Fee Receipt");
                            ViewBag.scripCall += "showRptnew('Student Fee Receipt');";

                            //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_Viewer.aspx','95%','900px','Reports');";
                        }
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if ((command == "Update Receipt Format"))
                {
                    try
                    {
                        sgen.execute_cmd(userCode, "Update master_setting set classid='0'  where type='FRF'  ");
                        sgen.execute_cmd(userCode, "Update master_setting set classid='1'  where type= 'FRF' and master_id= '" + string.Join(",", model[0].SelectedItems1) + "' ");
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";

                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if ((command == "Update Invoice Format"))
                {
                    try
                    {
                        sgen.execute_cmd(userCode, "Update master_setting set classid='0'  where type='IRF'  ");
                        sgen.execute_cmd(userCode, "Update master_setting set classid='1'  where type= 'IRF' and master_id= '" + string.Join(",", model[0].SelectedItems5) + "' ");
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";

                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if (command == "Result")
                {
                    try
                    {
                        dt = new DataTable();
                        string mq = "select 'Student_Name' AS Student_Name,'Father_Name'AS Father_Name,'Regno' as RegNumber," +
                            ",'" + Ac_Year_id + "'academic_year_id,'' academic_year,'001' as class_id,'1st' as Class_Name," +
                            "''client_id,''client_unit_id,'001' section_id,'A' as section,'001' as Subject_Id,'English' as Subject_Name,'40' as Marks,'50' total_marks,'50' Subject_Total_Marks," +
                            " '01' as roll_number,'Monthly' as FrequencyName,'Exam1' as ExamType,'15' min_marks,'40' Sub_Marks,'40' obt_marks,'50' marks_total," +
                            "'80' percentage,'A' std_grade from dual ";
                        dt = sgen.getdata(userCode, mq);
                        //if (dt.Rows.Count > 0)
                        {
                            dt1 = new DataTable();
                            string rpt_name = sgen.getstring(userCode, "select client_name  from master_setting where type='FRF' and master_id='" + string.Join(",", model[0].SelectedItems1) + "'");
                            //string rpt = "../../erp/schoolReports_Rpts/" + rpt_name;
                            string rpt = "../schoolReports_Rpts/" + rpt_name;
                            sgen.open_report_bydt(userCode, dt, rpt, "Student Result Report");
                            ViewBag.scripCall += "showRptnew('Student Result Report');";

                            //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_Viewer.aspx','95%','900px','Reports');";
                        }
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if (command == "Invoice")
                {
                    try
                    {
                        dt = new DataTable();
                        //dt = sgen.getdata(userCode, "select 'Item_name' Item_name ,'Item_code' as Icode," +
                        //   "'-' PARTNO,'Party_name' as Party_name,'Location' as Location,'-'  HSN,'-' as UOM,'0' as TaxRate,'0' as  Qty_in_stock,'0' as Qty_Ord,'0' as IRate," +
                        //"'-' disc_type,'0' as disc_rate,'0' IAmount,'0' TaxAmount,'0' discAmount,'0' LineAmount,'-' as delivery_date,'-' as Remark from dual");
                        dt = sgen.getdata(userCode, "select 'name' name,'gstin' sgtin,'address' address,'rec_id' rec_id,'created_date' " +
                            "created_date,'vch_num' vch_num,'vch_date' vch_date,'type' type,'client_id' client_id,'client_unit_id'" +
                            " client_unit_id, 'ent_by' ent_by, 'ent_date' ent_date, 'edit_by' edit_by,'iname' iname, 'icode' icode, " +
                            "'acode' acode, 'aname' aname, 'chlno' chlno, 'chldate' chldate,'invno' invno, 'invdate' invdate, 'ewayno' " +
                            "ewayno, 'ewaydate' ewaydate, 'qtystk' qtystk,'qtyin' qtyin, 'qtyout' qtyout, 'qtychl' qtychl, 'uom'" +
                            " uom, 'uom2' uom2, 'irate' irate, 'pono' pono, 'podate' podate, 'qtypo' qtypo, 'inspected' inspected, " +
                            "'qtybal' qtybal,'deptno' deptno, 'deptname' deptname, 'iamount' iamount, 'rgptype' rgptype, 'totremark' " +
                            "totremark, 'contactno' contactno, 'date1' date1, 'date2' date2, 'desig' desig, 'iremark' iremark, " +
                            "'pay_term' pay_term, 'price_term' price_term, 'hsno' hsno, 'igst' igst, 'cgst' cgst,'sgst' sgst," +
                            " 'shipfrom' shipfrom, 'shipto' shipto, 'cpartno' cpartno, 'ordqty' ordqty, 'taxrate' taxrate," +
                            " 'disctype' disctype, 'discamt' discamt, 'lineamount' lineamount, 'cond' cond, 'basicamt' basicamt," +
                            " 'gdisc' gdisc, 'gfreight' gfreight, 'insurance' insurance, 'ginstlchrg' ginstlchrg, 'gserchrg' gserchrg," +
                            " 'gamc' gamc, 'gloadchrg' gloadchrg, 'gothrchrg' gothrchrg, 'gtaxamt' gtaxamt, 0 gamt, 'potype' " +
                            "potype, 'store' store, 'tmode' tmode, 'partno' partno, 'vch_date1' vch_date1 from dual");
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                dt1 = new DataTable();
                                string rpt_name = sgen.getstring(userCode, "select client_name  from master_setting where type='IRF' and master_id='" + string.Join(",", model[0].SelectedItems5) + "'");
                                //if (!rpt_name.Contains(".rpt"))
                                //{
                                //    rpt_name = rpt_name + ".rpt";
                                //}
                                //string rpt = "../../erp/schoolReports_Rpts/" + rpt_name;
                                string rpt = "../schoolReports_Rpts/" + rpt_name;
                                //rpt = rpt_name;
                                sgen.open_report_bydt_xml(userCode, dt, rpt, "Invoice Report");
                                //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_Viewer.aspx','95%','900px','Reports');";
                                ViewBag.scripCall += "showRptnew('Invoice Report');";

                                //ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx','95%','900px','Reports');";
                            }
                        }
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if ((command == "Update Result Format"))
                {
                    try
                    {
                        sgen.execute_cmd(userCode, "Update master_setting set classid='0'  where type='RRF'  ");
                        sgen.execute_cmd(userCode, "Update master_setting set classid='1'  where type='RRF' and master_id= '" + string.Join(",", model[0].SelectedItems2) + "' ");
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if (command == "Admit")
                {
                    try
                    {
                        //DataTable dt = new DataTable();
                        //string mq = "select 'Student_Name' AS Student_Name,'Father_Name'AS Father_Name,'Regno' as RegNumber," +
                        //    ",'" + Ac_Year_id + "'academic_year_id,'' academic_year,'001' as class_id,'1st' as Class_Name," +
                        //    "''client_id,''client_unit_id,'001' section_id,'A' as section,'001' as Subject_Id,'English' as Subject_Name,'40' as Marks,'50' total_marks,'50' Subject_Total_Marks," +
                        //    " '01' as roll_number,'Monthly' as FrequencyName,'Exam1' as ExamType,'15' min_marks,'40' Sub_Marks,'40' obt_marks,'50' marks_total,'80' percentage,'A' std_grade ";
                        //dt = sgen.getdata(userCode, mq);
                        ////if (dt.Rows.Count > 0)
                        //{
                        //    DataTable dt1 = new DataTable();
                        //    string rpt_name = sgen.getstring(userCode, "select client_name  from master_setting where type='FRF' and master_id='" + string.Join(",", model[0].SelectedItems1) + "'");
                        //    string rpt = "../../erp/schoolReports_Rpts/" + rpt_name;
                        //    sgen.open_report_bydt(userCode, dt, rpt, "Student Result Report");
                        //    ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_Viewer.aspx','95%','900px','Reports');";
                        //}
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if ((command == "Update Admit Card Format"))
                {
                    try
                    {
                        sgen.execute_cmd(userCode, "Update master_setting set classid='0'  where type='ACF'  ");
                        sgen.execute_cmd(userCode, "Update master_setting set classid='1'  where type='ACF' and master_id= '" + string.Join(",", model[0].SelectedItems3) + "' ");
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if (command == "Icard")
                {
                    try
                    {
                        //DataTable dt = new DataTable();
                        //string mq = "select 'Student_Name' AS Student_Name,'Father_Name'AS Father_Name,'Regno' as RegNumber," +
                        //    ",'" + Ac_Year_id + "'academic_year_id,'' academic_year,'001' as class_id,'1st' as Class_Name," +
                        //    "''client_id,''client_unit_id,'001' section_id,'A' as section,'001' as Subject_Id,'English' as Subject_Name,'40' as Marks,'50' total_marks,'50' Subject_Total_Marks," +
                        //    " '01' as roll_number,'Monthly' as FrequencyName,'Exam1' as ExamType,'15' min_marks,'40' Sub_Marks,'40' obt_marks,'50' marks_total,'80' percentage,'A' std_grade ";
                        //dt = sgen.getdata(userCode, mq);
                        ////if (dt.Rows.Count > 0)
                        //{
                        //    DataTable dt1 = new DataTable();
                        //    string rpt_name = sgen.getstring(userCode, "select client_name  from master_setting where type='FRF' and master_id='" + string.Join(",", model[0].SelectedItems1) + "'");
                        //    string rpt = "../../erp/schoolReports_Rpts/" + rpt_name;
                        //    sgen.open_report_bydt(userCode, dt, rpt, "Student Result Report");
                        //    ViewBag.scripCall = "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_Viewer.aspx','95%','900px','Reports');";
                        //}
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                else if (command == "Update Icard Format")
                {
                    try
                    {
                        sgen.execute_cmd(userCode, "Update master_setting set classid='0'  where type='ICF'  ");
                        sgen.execute_cmd(userCode, "Update master_setting set classid='1'  where type='ICF' and master_id= '" + string.Join(",", model[0].SelectedItems4) + "' ");
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                    }
                    catch (Exception ex)
                    { sgen.showmsg(1, ex.Message.ToString(), 2); }
                }
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };

                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_TList3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_TList4"] = model[0].TList4 = mod4;
                TempData[MyGuid + "_TList5"] = model[0].TList5 = mod5;
                model[0].Col9 = "REPORT TEMPLATES";
                model[0].Col18 = "Update Result Format";
                model[0].Col13 = "Update Receipt Format";
                model[0].Col19 = "Update Admit Card Format";
                model[0].Col20 = "Update Icard Format";
                model[0].Col21 = "Update Invoice Format";
            }

            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region location_mst
        public ActionResult location_mst()
        {
            FillMst();
            chkRef();
            ViewBag.vnew = "";
            ViewBag.vedit = "";
            ViewBag.vsave = "disabled='disabled'";
            ViewBag.vsavenew = "disabled='disabled'";
            ViewBag.scripCall = "disableForm();";
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            Tmodelmain tm1 = new Tmodelmain();
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.Col9 = "LOCATION STOPPAGE MASTER";
            tm1.Col10 = "master_setting";
            tm1.Col12 = "LOC"; //LOC
            tm1.Col13 = "Save";
            tm1.Col100 = "Save & New";
            tm1.Col121 = "S";
            tm1.Col122 = "<u>S</u>ave";
            tm1.Col123 = "Save & Ne<u>w</u>";
            tm1.Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model.Add(tm1);
            return View(model);
        }
        public List<Tmodelmain> new_location_mst(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            if (model[0].Col19 == null) ViewBag.scripCall = ViewBag.scripCall + "initialize(28.477450,77.034138);";
            else ViewBag.scripCall = ViewBag.scripCall + "initialize(" + model[0].Col19 + ");";
            return model;
        }
        [HttpPost]
        public ActionResult location_mst(List<Tmodelmain> model, string command)
        {
            try
            {
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                if (command == "New")
                {
                    model = new_location_mst(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "N", "location_mst", "Hr", model);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    if (model[0].Col19 == null) ViewBag.scripCall = ViewBag.scripCall + "initialize(28.477450,77.034138);";
                    else ViewBag.scripCall = ViewBag.scripCall + "initialize(" + model[0].Col19 + ");";
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dtstr = new DataTable();

                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    string cond = "";
                    type = model[0].Col12;
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        id = tmodel.Col26.Trim();
                        type_desc = "Location Stoppage master";
                        cond = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                    }
                    else
                    {
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "  ";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                        string mid = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "";
                        id = sgen.genNo(userCode, mid, 3, "auto_genid");
                        isedit = false;
                    }
                    string ab = sgen.seekval(userCode, "select '1' as col1 from " + model[0].Col10 + " where type='LOC' " +
            " and client_unit_id='" + unitid_mst + "' and  upper(trim(master_name))='" + model[0].Col17.ToString().ToUpper().Trim() + "' " + cond + " " +
            "and vch_num!='" + model[0].Col17 + "'", "col1");
                    if (ab.Equals("1")) { ViewBag.scripCall = "showmsgJS(1,'Data Already Exist',2) ; disableForm();"; goto END; }
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = model[0].Col16;
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["master_id"] = id;
                    dr["master_name"] = model[0].Col17;
                    dr["group_name"] = model[0].Col20;
                    dr["client_name"] = model[0].Col19;
                    dr["optional_subject"] = model[0].Col18;
                    dr["master_type"] = type_desc.Trim();
                    #endregion
                    if (isedit)
                    {
                        dr["rec_id"] = model[0].Col7.Trim();
                        dr["client_id"] = model[0].Col1.Trim();
                        dr["client_unit_id"] = model[0].Col2.Trim();
                        dr["vch_num"] = model[0].Col16;
                        dr["master_entby"] = model[0].Col3;
                        dr["master_entdate"] = model[0].Col4;
                        dr["master_editby"] = userid_mst;
                        dr["master_editdate"] = currdate;
                    }
                    else
                    {
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["master_entby"] = userid_mst;
                        dr["master_entdate"] = currdate;
                        dr["master_editby"] = "-";
                        dr["master_editdate"] = currdate;
                    }
                    dtstr.Rows.Add(dr);
                    bool Result = sgen.Update_data(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col9 = tm.Col9,
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_location_mst(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region mis_feetype
        public ActionResult mis_feetype()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "MISCELLANEOUS FEE TYPE";
            model[0].Col10 = "school_fee_type";
            model[0].Col12 = "EEF"; //EEF
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            return View(model);
        }
        public List<Tmodelmain> new_mis_feetype(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number (nvl(a.vch_num,'0'))) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            status = model[0].Col18 = "Y";
            return model;
        }
        [HttpPost]
        public ActionResult mis_feetype(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                if (command == "New")
                {
                    model = new_mis_feetype(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    type_desc = "B";
                    string currdate = sgen.server_datetime(userCode);
                    string punch = "", cond = "", found = "";
                    string inactive_date = "";
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        cond = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        master_id = tmodel.Col20.Trim();
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (nvl(a.vch_num,'0'))) as max from " + model[0].Col10 + " a" +
              " where  a.type='" + model[0].Col12 + "'  " + model[0].Col11 + " and master_type='" + type_desc + "' ", 6, "max");
                        master_id = sgen.genNo(userCode, "select max(to_number (nvl(a.FeeType_id,'0'))) as max from " + model[0].Col10 + " a " +
                              "where   a.type='" + model[0].Col12 + "' and master_type='" + type_desc + "' " + model[0].Col11 + "", 3, "max");
                    }
                    found = sgen.getstring(userCode, "select a.FeeTypeName from " + model[0].Col10 + " a where  upper (a.FeeTypeName)= upper('" + model[0].Col17 + "' )and a.type='" + model[0].Col12 + "' and master_type='B'" +
               "  " + model[0].Col11 + " " + cond + "");
                    type = model[0].Col12;
                    if (model[0].Col18.Trim() == "N")
                    {
                        type = "DD" + type;
                    }
                    if (found != "")
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Data Already Exists', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                    }
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["rec_id"] = "0";
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["FeeTypeName"] = model[0].Col17;
                    dr["FeeType_id"] = master_id;
                    if (model[0].Col18 == "Y")
                    {
                        punch = "Y";
                    }
                    else
                    {
                        punch = "N";
                        inactive_date = currdate;
                    }
                    dr["Status"] = punch;
                    dr["ispredefined"] = 0;
                    dr["master_type"] = type_desc.Trim();
                    dr["Inactive_date"] = currdate;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    #endregion
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                    }
                    dtstr.Rows.Add(dr);
                    bool Result = sgen.Update_data(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        tmodel.Col17 = "";
                        tmodel.Col16 = "";
                        tmodel.Col18 = "";
                        tmodel.Col20 = "";
                        tmodel.Col21 = "";
                        tmodel.Col13 = "Save";
                        tmodel.Col100 = "Save & New";
                        tmodel.Col121 = "S";
                        tmodel.Col122 = "<u>S</u>ave";
                        tmodel.Col123 = "Save & Ne<u>w</u>";
                        tmodel.Col9 = "MISCELLANEOUS FEE TYPE";
                        model.Add(tmodel);

                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_mis_feetype(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region mis_fee_head
        public ActionResult mis_fee_head()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "MISCELLANEOUS FEE HEAD";
            model[0].Col10 = "master_setting";
            model[0].Col12 = "EFH"; //EFH
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            return View(model);
        }
        public List<Tmodelmain> new_mis_fee_head(List<Tmodelmain> model)
        {
            List<SelectListItem> mod1 = new List<SelectListItem>();
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            Master_Type = "B";
            mod1 = new List<SelectListItem>();
            #region feetypename
            DataTable dt1 = new DataTable();
            string condition = "and master_type='" + Master_Type + "' and (status='Y' or status='')";
            dt1 = sgen.BindData("EEF", "feetype_id", "feetypename", "school_fee_type ", condition, userCode, clientid_mst, unitid_mst);
            if (dt1.Rows.Count > 0)
            {
                foreach (DataRow dr in dt1.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["feetypename"].ToString(), Value = dr["feetype_id"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            #endregion
            model[0].Col18 = "Y";

            model[0].SelectedItems1 = new string[] { "" };

            return model;
        }
        [HttpPost]
        public ActionResult mis_fee_head(List<Tmodelmain> model, string command, string mid)
        {
            try
            {
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                model[0].TList1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                TempData[MyGuid + "_TList1"] = model[0].TList1;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (command == "New")
                {
                    model = new_mis_fee_head(model);
                }
                else if (command == "Cancel")
                {
                    return RedirectToAction("mis_fee_head", new { @m_id = EncryptDecrypt.Encrypt(model[0].Col15), @mid = EncryptDecrypt.Encrypt(model[0].Col14) });
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dtfound = new DataTable();
                    DataTable dtstr = new DataTable();
                    string punch = "", staus = "", inactive_date = "", cond = "";
                    //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    Master_Type = "B";
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        cond = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        master_id = tmodel.Col26.Trim();
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and master_type='B' " +
                         "and  client_unit_id='" + unitid_mst + "'", 6, "max");
                        master_id = sgen.genNo(userCode, "select max(to_number (master_id)) as max from " + model[0].Col10 + " where type='" + model[0].Col12 + "' and master_type='B'  " +
                       "and  client_unit_id='" + unitid_mst + "'", 3, "max");
                    }

                    dtfound = sgen.getdata(userCode, "select * from master_setting  where master_name ='" + model[0].Col17 + "' and type='" + model[0].Col12 + "' and master_type='B'  and client_unit_id='" + unitid_mst + "' " + cond + "");
                    if (dtfound.Rows.Count > 0)
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Data Already Exists', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                    }
                    type = model[0].Col12;
                    if (model[0].Col18.Trim() == "N")
                    {
                        type = "DD" + type;
                    }
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["master_id"] = master_id;
                    dr["master_name"] = model[0].Col17;
                    dr["sectionid"] = model[0].SelectedItems1.FirstOrDefault();//Fee Type
                    if (model[0].Col18 == "Y")
                    {
                        staus = "Y";
                    }
                    else
                    {
                        staus = "N";
                        inactive_date = currdate;
                    }
                    dr["Status"] = staus;
                    dr["master_type"] = Master_Type.Trim();
                    dr["Inactive_date"] = currdate;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    #endregion
                    if (isedit)
                    {
                        dr["rec_id"] = model[0].Col7.Trim();
                        dr["client_id"] = model[0].Col1.Trim();
                        dr["client_unit_id"] = model[0].Col2.Trim();
                        dr["master_entby"] = model[0].Col3;
                        dr["master_editby"] = userid_mst;
                        dr["master_editdate"] = currdate;
                    }
                    else
                    {
                        dr["rec_id"] = "0";
                        dr["master_entby"] = userid_mst;
                        dr["master_entdate"] = currdate;
                        dr["master_editby"] = "-";
                        dr["master_editdate"] = currdate;
                    }
                    dtstr.Rows.Add(dr);
                    bool Result = sgen.Update_data(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = tm.Col13,
                            Col14 = tm.Col14,
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                        });

                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_mis_fee_head(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region mis_fee_structure
        public ActionResult mis_fee_structure()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "MISC. FEE STRUCTURE";
            model[0].Col10 = "school_fee_structure";
            model[0].Col12 = "EFS"; //EFS
            //tm1.Col13 = "Save";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            //model.Add(tm1);
            return View(model);
        }
        public List<Tmodelmain> new_mis_fee_structure(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            Master_Type = "B";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            #region Class

            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);

            #endregion
            #region feetypename
            DataTable dt1 = new DataTable();
            string condition = "and master_type='" + Master_Type + "' and (status='Y' or status='') and  feetype_id in (select distinct sectionid from master_setting where type='EFH' and client_unit_id='" + unitid_mst + "' and master_type='B')";
            dt1 = sgen.BindData("EEF", "feetype_id", "feetypename", "school_fee_type ", condition, userCode, clientid_mst, unitid_mst);
            if (dt1.Rows.Count > 0)
            {
                foreach (DataRow dr in dt1.Rows)
                {
                    mod2.Add(new SelectListItem { Text = dr["feetypename"].ToString(), Value = dr["feetype_id"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            #endregion
            model[0].Col18 = "Y";

            model[0].SelectedItems1 = new string[] { "" };

            model[0].SelectedItems2 = new string[] { "" };
            return model;
        }
        [HttpPost]
        public ActionResult mis_fee_structure(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (command == "New")
                {
                    model = new_mis_fee_structure(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    string master_type = "", class_a = "";
                    master_type = "B";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    DataTable dtstr = new DataTable();

                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;


                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from school_fee_structure where  client_unit_id='" + unitid_mst + "'", 6, "max");
                        model[0].Col16 = vch_num;
                    }
                    string[] Ainsc = string.Join(",", model[0].SelectedItems1).Split(',');
                    for (int i = 0; i < Ainsc.Length; i++)
                    {
                        for (Int32 j = 0; j < model.Count; j++)
                        {
                            class_a = Ainsc[i];
                            DataRow dr = dtstr.NewRow();
                            dr["rec_id"] = "0";
                            dr["vch_num"] = model[0].Col16;
                            dr["vch_date"] = currdate;
                            dr["type"] = "EFS";
                            dr["master_type"] = master_type;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["academic_year_id"] = Ac_Year_id;
                            dr["class_id"] = class_a;
                            dr["valid_from"] = sgen.Make_date_S(model[0].Col17);
                            dr["valid_to"] = sgen.Make_date_S(model[0].Col18);
                            dr["FeeType_Id"] = model[j].Col22;
                            dr["FeeHead_Id"] = model[j].Col23;
                            dr["Fee_Amount"] = model[j].Col21;
                            if (isedit)
                            {
                                dr["client_id"] = model[0].Col1.Trim();
                                dr["client_unit_id"] = model[0].Col2.Trim();
                                dr["ent_by"] = model[0].Col3;
                                dr["ent_date"] = model[0].Col4;
                                dr["edit_by"] = userid_mst;
                                dr["edit_date"] = currdate;
                            }
                            else
                            {
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = currdate;
                                dr["edit_by"] = "-";
                                dr["edit_date"] = currdate;
                            }
                            dtstr.Rows.Add(dr);
                        }
                    }
                    bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = tm.Col13,
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_mis_fee_structure(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }


                    }
                    else
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {

                    string fromdt = model[0].Col17;
                    string Todt = model[0].Col18;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    if (sgen.SaveDate_dt(Todt, false) > sgen.server_datetime_dt_local(userCode))
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Fee Cant Be Save In Future Date', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                    }
                    DataTable datatable = new DataTable();
                    datatable = sgen.getdata(userCode, "select  a.master_id as feehead_id, a.master_name as headname,a.sectionid AS feetype,b.feetypename,'0' as Fee_amount  from master_setting a,school_fee_type b" +
                   " where a.sectionid in (" + String.Join(",", model[0].SelectedItems2) + ")  and a.Type='EFH' and a.master_type='B' and b.feetype_id=a.sectionid  and " +
                          "a.client_unit_id='" + unitid_mst + "' and b.client_unit_id='" + unitid_mst + "' and b.type='EEF' and b.master_type='B' ");
                    if (datatable.Rows.Count > 0)
                    {
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in datatable.Rows)
                        {
                            string Regno = "", roll_number = "", feetype = "", Fee_amount = "", headname = "";
                            headname = dr["headname"].ToString();
                            feetype = dr["feetypename"].ToString();
                            Fee_amount = dr["Fee_amount"].ToString();
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col10 = tm.Col10,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = tm.Col16,
                                Col17 = tm.Col17,
                                Col18 = tm.Col18,
                                Col100 = tm.Col100,
                                Col121 = tm.Col121,
                                Col122 = tm.Col122,
                                Col123 = tm.Col123,
                                Col19 = feetype,
                                Col20 = headname,
                                Col21 = Fee_amount,
                                Col22 = dr["feetype"].ToString(),
                                Col23 = dr["feehead_id"].ToString(),
                                TList1 = mod1,
                                SelectedItems1 = tm.SelectedItems1,
                                TList2 = mod2,
                                SelectedItems2 = tm.SelectedItems2,
                            });
                        }
                    }
                    model.RemoveAt(0);
                END:;
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region transport_feemaster
        public ActionResult transport_feemaster()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "LOCATION & CLASSWISE FEES";
            model[0].Col10 = "master_setting";
            model[0].Col12 = "LCL"; //LCL
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod1;
            model[0].SelectedItems2 = new string[] { "" };
            return View(model);
        }
        public List<Tmodelmain> new_transport_feemaster(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a " +
                  "where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            #region Location
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.pickdrop(userCode, unitid_mst);


            #endregion

            #region Class
            DataTable dt1 = new DataTable();
            mq1 = "select add_class_id as id ,class as name from add_class where type='EAC' and  client_unit_id='" + unitid_mst + "' ";
            dt1 = sgen.getdata(userCode, mq1);
            if (dt1.Rows.Count > 0)
            {
                foreach (DataRow dr in dt1.Rows)
                {
                    mod2.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["id"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            #endregion

            model[0].SelectedItems1 = new string[] { "" };

            model[0].SelectedItems2 = new string[] { "" };
            return model;
        }
        [HttpPost]
        public ActionResult transport_feemaster(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                TempData[MyGuid + "_Tlist1"] = mod1;
                TempData[MyGuid + "_Tlist2"] = mod2;
                model[0].TList1 = mod1;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (command == "New")
                {

                    model = new_transport_feemaster(model);

                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    string Vinsc = "", Vinst = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        id = tmodel.Col18.Trim();
                        vch_num = tmodel.Col16.Trim();
                        isedit = true;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a " +
                             "where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        mid = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "";
                        id = sgen.genNo(userCode, mid, 3, "auto_genid");
                    }
                    string[] Ainsc = string.Join(",", model[0].SelectedItems1).Split(',');
                    string[] Ainst = string.Join(",", model[0].SelectedItems2).Split(',');
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (Int32 i = 0; i < Ainsc.Length; i++)
                    {
                        Vinsc = Ainsc[i];
                        for (int j = 0; j < Ainst.Length; j++)
                        {
                            Vinst = Ainst[j];
                            string mq = "";
                            DataRow dr = dataTable.NewRow();
                            dr["rec_id"] = "0";
                            dr["type"] = model[0].Col12;
                            dr["vch_num"] = vch_num;
                            dr["master_id"] = id;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["group_name"] = model[0].Col17;
                            dr["master_Name"] = Vinsc;
                            dr["classid"] = Vinst;
                            if (isedit)
                            {
                                dr["client_id"] = model[0].Col1.Trim();
                                dr["client_unit_id"] = model[0].Col2.Trim();
                                dr["master_entby"] = model[0].Col3;
                                dr["master_entdate"] = model[0].Col4;
                                dr["master_editby"] = userid_mst;
                                dr["master_editdate"] = currdate;
                            }
                            else
                            {
                                dr["master_entby"] = userid_mst;
                                dr["master_entdate"] = currdate;
                                dr["master_editby"] = "-";
                                dr["master_editdate"] = currdate;
                            }
                            dataTable.Rows.Add(dr);
                        }
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_transport_feemaster(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region health_checkup
        public ActionResult health_checkup()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            model = getload(model);

            model[0].Col9 = "HEALTH CHECKUP";
            model[0].Col10 = "enx_tab";
            model[0].Col12 = "HCM"; //HCM
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod3;
            model[0].SelectedItems3 = new string[] { "" };
            model[0].TList4 = mod4;
            model[0].SelectedItems4 = new string[] { "" };
            //model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult health_checkup(List<Tmodelmain> model, string command, string mid)
        {
            try
            {
                FillMst(model[0].Col15);
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];

                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                var tm = model.FirstOrDefault();
                if (command == "New")
                {

                    model = new List<Tmodelmain>();
                    model.Add(tm);
                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.scripCall = "$('#btn_Fill').attr('enabled','enabled')";
                    //      ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    model[0].Col16 = vch_num;
                    model[0].Col13 = tm.Col13;
                    model[0].Col21 = tm.Col121;
                    model[0].Col122 = tm.Col122;

                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();

                    #region Checkup Type

                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3 = cmd_Fun.chkuptype(userCode, unitid_mst);

                    #endregion
                    #region Class
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);

                    #endregion
                    #region section 
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);

                    #endregion
                    mod4.Add(new SelectListItem { Text = "Good", Value = "1" });
                    mod4.Add(new SelectListItem { Text = "OK", Value = "2" });
                    mod4.Add(new SelectListItem { Text = "Need Further Checkup", Value = "3" });
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;

                    model[0].SelectedItems1 = new string[] { "" };

                    model[0].SelectedItems2 = new string[] { "" };

                    model[0].SelectedItems3 = new string[] { "" };

                    model[0].SelectedItems4 = new string[] { "" };

                }
                else if (command == "Save" || command == "Update")
                {

                    string drop = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a " +
                            "where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        if (model[i].SelectedItems4 == null) model[i].SelectedItems4 = new string[] { "" };
                        dr["type"] = model[0].Col12;
                        //dr["date1"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["vch_num"] = model[0].Col16;
                        dr["col1"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["col2"] = model[0].SelectedItems2.FirstOrDefault();
                        dr["col3"] = model[0].Col17;
                        dr["vch_date"] = sgen.Make_date_S(model[0].Col18);
                        dr["col4"] = model[0].SelectedItems3.FirstOrDefault();
                        dr["col5"] = model[0].Col19;
                        dr["col6"] = model[i].Col26;
                        dr["col8"] = model[i].Col24;
                        dr["col7"] = model[i].SelectedItems4.FirstOrDefault();
                        if (isedit)
                        {
                            dr["rec_id"] = model[i].Col7;
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["rec_id"] = "0";
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Health Checkup Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = tm.Col13,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                            TList4 = mod4,
                            SelectedItems4 = new string[] { "" },
                        }
                   );
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {


                    string fromdt = model[0].Col16;
                    string Todt = model[0].Col17;

                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    //     ViewBag.vsavenew = "disabled='disabled'";

                    DataTable datatable = new DataTable();

                    mq = "select Distinct ud.regnumber,'1' as col7,'0' as rec_id,'-' as col8,'-' as col9,'0' as chkvalue" +
                ",(ud.first_name||' '||replace(ud.middle_name,'0','')||' '||replace(ud.last_name,'0','')) AS Student_Name," +
                " cl.class as Class,ms.master_name as Section ,a.roll_number from student_detail a, add_class cl,master_setting ms,user_details ud" +
                " where a.type='STD' and a.class_applied= cl.add_class_id and a.section= ms.master_id and ms.type= 'ECS' and a.reg_no= ud.RegNumber" +
                " and a.academic_year_id= '" + Ac_Year_id + "' and a.class_applied In '" + model[0].SelectedItems1.FirstOrDefault() + "' and a.section In '" + model[0].SelectedItems2.FirstOrDefault() + "'" +
                " and find_in_set(ud.client_unit_id,a.client_unit_id)=1 and ud.status='active' " +
                " and find_in_set(a.client_unit_id,'" + unitid_mst + "')=1 and find_in_set(cl.client_unit_id,a.client_unit_id)=1 " +
                " and find_in_set(ms.client_unit_id,a.client_unit_id)=1 and ud.type='STD'";
                    datatable = sgen.getdata(userCode, mq);
                    if (datatable.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in datatable.Rows)
                        {
                            string Regno = "", roll_number = "", Section = "", Student_Name = "", class_s = "";
                            Regno = dr["regnumber"].ToString();
                            class_s = dr["Class"].ToString();
                            Section = dr["Section"].ToString();
                            Student_Name = dr["Student_Name"].ToString();
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col121 = tm.Col121,
                                Col122 = tm.Col122,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = tm.Col16,
                                Col17 = tm.Col17,
                                Col18 = tm.Col18,
                                Col19 = tm.Col19,
                                Col26 = Regno,
                                Col21 = class_s,
                                Col20 = Student_Name,
                                Col22 = Section,
                                Col27 = dr["roll_number"].ToString(),
                                TList1 = mod1,
                                TList2 = mod2,
                                TList3 = mod3,
                                TList4 = mod4,
                                SelectedItems1 = tm.SelectedItems1,
                                SelectedItems2 = tm.SelectedItems2,
                                SelectedItems3 = tm.SelectedItems3,
                                SelectedItems4 = tm.SelectedItems4,
                            });
                        }
                    }
                    else { ViewBag.scripCall = "showmsgJS(1,'Data Not Exist',2)"; }
                END:;
                }
                //model[0].TList4 = mod4;
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region blocked_student
        public ActionResult blocked_student()
        {
            FillMst();
            chkRef();
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);
            m_id_mst = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            List<Tmodelmain> model = new List<Tmodelmain>();

            Tmodelmain tm1 = new Tmodelmain();
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = m_id_mst.Trim();
            tm1.Col9 = "BLOCKED STUDENT";
            tm1.Col10 = "student_applicant_details";
            tm1.Col12 = "LOC";
            tm1.Col13 = "Save";
            tm1.Col100 = "Save & New";
            tm1.Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult blocked_student(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                if (command == "New")
                {

                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    mq = "select max(to_number(vch_num,UNSIGNED INTEGER)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");

                }
                if (command == "Inactive")
                {
                    try
                    {
                        if (model[0].Col17.Equals(""))
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Please Select Student', 2);";
                            return View(model);
                        }
                        if (model[0].Col36 == null)
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Please Select Date', 2);";
                            return View(model);
                        }
                        if (model[0].Col37 == null) { ViewBag.scripCall = "showmsgJS(1, 'Please Fill Reason', 2);"; return View(model); }
                        if (model[0].Col38 == null) { ViewBag.scripCall = "showmsgJS(1, 'Something went wrong, try again', 2);"; return View(model); }
                        if (model[0].Col39 == null) { ViewBag.scripCall = "showmsgJS(1, 'Something went wrong, try again', 2);"; return View(model); }
                        if (model[0].Col40 == null) { ViewBag.scripCall = "showmsgJS(1, 'Father's email is not available', 2);"; return View(model); }
                        DataTable dtmail = new DataTable();
                        dtmail = sgen.getdata(userCode, "select com_email,com_password,com_smtp,com_port from company_profile where company_profile_id='" + clientid_mst + "' and type='CP'");
                        if (dtmail.Rows.Count > 0)
                        {
                            string smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
                            string emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
                            string passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
                            int portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
                            string status = "active";
                            if (model[0].Chk1 == true)
                            {
                                status = "inactive";
                            }

                            // sgen.execute_cmd(userCode, "UPDATE USER_DETAILS SET STATUS='" + status + "',a_i_date= to_date('" + model[0].Col36 + "','YYYY-MM-DD HH24:MI:SS'),a_i_reason='" + model[0].Col37 + "' WHERE(rec_id || to_char(vch_date, 'ddmmyyyy') || type) = '" + model[0].Col38 + "'");
                            sgen.execute_cmd(userCode, "UPDATE USER_DETAILS SET STATUS='" + status + "',a_i_date= to_date('" + model[0].Col36 + "','" + sgen.Getsqldateformat() + "')," +
                                "a_i_reason='" + model[0].Col37 + "' WHERE(vch_num || to_char(vch_date, 'ddmmyyyy') || type) = '" + model[0].Col38 + "'");
                            ViewBag.scripCall = "showmsgJS(1, 'User Inactive Successfully', 1);";
                            if (passwordvalue != "" && smtpvalue != "" && portvalue != 0 && emailIdvalue != "")
                            {
                                try
                                {
                                    MailMessage msg = new MailMessage();
                                    msg.From = new MailAddress(emailIdvalue);
                                    msg.To.Add(model[0].Col39.ToString());
                                    msg.Subject = "Account Information";
                                    string msgbody = "<b style='color: #3caee9; font-size: 20px'>Login Details From Admin</b><br /><hr style='border:1px solid black' /><p>Hi <b>" + model[0].Col17.Trim() + "</b>,</p><p>This is to notify that your user login has been deactivated. Kindly contact your admin for any clarification and information. Your login details are as below :-</p><table style='font-weight:600'><tr><td> User id </td><td>: " + model[0].Col39.ToString() + " </td></tr></table><br /><p></p><p>Thank you,<br />Administrator<br /></p><br /><p>Note:- Please do not reply to this mail as it is an unmonitered alias.</p>";
                                    msg.Body = msgbody;
                                    msg.IsBodyHtml = true;
                                    SmtpClient smtp = new SmtpClient();
                                    smtp.Host = smtpvalue;
                                    System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                                    NetworkCred.UserName = emailIdvalue;
                                    NetworkCred.Password = passwordvalue;
                                    smtp.UseDefaultCredentials = true;
                                    smtp.Credentials = NetworkCred;
                                    smtp.Port = portvalue;
                                    smtp.EnableSsl = true;
                                    smtp.Send(msg);
                                }
                                catch { }
                                //sgen.showmsg(1, "User Inactive Successfully", 1);
                            }
                        }

                    }
                    catch (Exception ex) { }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region student_remark
        public ActionResult student_remark()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "STUDENT REMARKS";
            model[0].Col10 = "student_result";
            model[0].Col12 = "TSR"; //TSR
            //model[0].Col13 = "Save";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod3;
            model[0].SelectedItems3 = new string[] { "" };
            model[0].TList4 = mod4;
            model[0].SelectedItems4 = new string[] { "" };
            //model.Add(tm1);
            return View(model);
        }
        public List<Tmodelmain> new_student_remark(List<Tmodelmain> model)
        {
            var tm = model.FirstOrDefault();
            model = new List<Tmodelmain>();
            model.Add(tm);
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();

            #region teacher
            DataTable dt3 = new DataTable();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.teacher(userCode, unitid_mst);
            //TempData[MyGuid + "_Tlist1"] = mod1;
            #endregion
            #region Class

            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindClass(userCode, unitid_mst);

            //TempData[MyGuid + "_Tlist2"] = mod2;
            #endregion
            #region section 
            DataTable dt2 = new DataTable();
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3 = sgen.BindSection(userCode, unitid_mst);

            //TempData[MyGuid + "_Tlist3"] = mod3;
            #endregion
            //model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            //model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            //model[0].TList3 = mod3;
            model[0].SelectedItems3 = new string[] { "" };

            return model;
        }
        [HttpPost]
        public ActionResult student_remark(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                List<Tmodelmain> rpt_model = new List<Tmodelmain>();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                //TempData[MyGuid + "_Tlist1"] = mod1;
                //TempData[MyGuid + "_Tlist2"] = mod2;
                //TempData[MyGuid + "_Tlist3"] = mod3;
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                var tm = model.FirstOrDefault();
                if (command == "New")
                {
                    model = new_student_remark(model);

                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a " +
                            "where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["type"] = model[0].Col12;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["vch_num"] = model[0].Col16;
                        dr["vch_date"] = sgen.Make_date_S(model[0].Col17);
                        dr["reg_no"] = model[i].Col22;
                        dr["sub_catid"] = model[0].SelectedItems1.FirstOrDefault();
                        dr["class_id"] = model[0].SelectedItems2.FirstOrDefault();
                        dr["section_id"] = model[0].SelectedItems3.FirstOrDefault();
                        dr["left_reason"] = model[i].Col21;
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["client_id"] = clientid_mst;
                            dr["client_unit_id"] = unitid_mst;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dataTable.Rows.Add(dr);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = tm.Col13,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            TList1 = mod1,
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_student_remark(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Fill Data")
                {

                    if (model[0].SelectedItems1.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select taecher', 1);";
                    }
                    if (model[0].SelectedItems3.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select class', 1);";
                    }
                    if (model[0].SelectedItems2.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(3, 'Please Select Section', 1);";
                    }
                    string fromdt = model[0].Col16;
                    string Todt = model[0].Col17;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vsavenew = "disabled='disabled'";
                    DataTable dt = sgen.getdata(userCode, "select '' as Remarks,  a.reg_no,a.section," +
                        "(b.first_name||' '||replace(b.middle_name,'0','')||' '||replace(b.last_name,'0','')) as Student_Name," +
                        "(b.f_firstname||' '||replace(b.f_middlename,'0','')||' '||replace(b.f_lastname,'0','')) as Father_Name," +
                        "(b.m_firstname||' '||replace(b.m_middlename,'0','')||' '||replace(b.m_lastname,'0','')) as Mother_Name," +
                        "(CASE WHEN b.default_emailid='F' THEN b.f_email WHEN b.default_emailid='M' THEN b.m_email else b.g_email END) as Email_Id ," +
                                    "(CASE WHEN b.default_Ph='F' THEN b.f_con_number WHEN b.default_Ph='M' THEN b.m_con_number else b.g_con_number END) as PhoneNo," +
                                    "a.roll_number from student_detail a,user_details b where b.status = 'active' and a.reg_no=b.regnumber and a.client_unit_id='" + unitid_mst + "'" +
                                    " and a.type='STD' and a.type=b.type and a.academic_year_id='" + Ac_Year_id + "' and a.class_applied='" + model[0].SelectedItems2.FirstOrDefault() + "' and a.section ='" + model[0].SelectedItems3.FirstOrDefault() + "' ");
                    if (dt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in dt.Rows)
                        {
                            string Father = "", roll_number = "", Section = "", Student_Name = "", reg_number = "", class_s = "";
                            Student_Name = dr["Student_Name"].ToString();
                            Father = dr["Father_Name"].ToString();
                            roll_number = dr["roll_number"].ToString();
                            reg_number = dr["reg_no"].ToString();
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col16 = tm.Col16,
                                Col17 = tm.Col17,
                                Col21 = tm.Col21,
                                Col100 = tm.Col100,
                                Col121 = tm.Col121,
                                Col122 = tm.Col122,
                                Col123 = tm.Col123,
                                Col18 = roll_number,
                                Col19 = Student_Name,
                                Col20 = Father,
                                Col22 = reg_number,
                                TList1 = mod1,
                                TList2 = mod2,
                                TList3 = mod3,
                                SelectedItems1 = tm.SelectedItems1,
                                SelectedItems2 = tm.SelectedItems2,
                                SelectedItems3 = tm.SelectedItems3,
                            });
                        }
                    }
                END:;
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region student_remark_rpt
        public ActionResult student_remark_rpt()
        {
            // shiv - what is mode 3
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            //Tmodelmain tm1 = new Tmodelmain();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            model[0].Col9 = "STUDENT REMARKS DETAIL";
            model[0].Col10 = "student_result";
            model[0].Col12 = "TSR"; //TSR
            //model[0].Col13 = "Save";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            #region Class

            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass(userCode, unitid_mst);

            //TempData[MyGuid + "_Tlist1"] = mod1;
            #endregion
            #region section 

            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);

            //TempData[MyGuid + "_Tlist2"] = mod2;
            #endregion

            #region teacher
            DataTable dt3 = new DataTable();
            dt3 = sgen.getdata(userCode, "SELECT (user_details.first_name ||' '||replace(user_details.middle_name,'0','')||' '||replace(user_details.last_name,'0','')) AS First_name, vch_num rec_id FROM user_details" +
                " where Type='CPR' and client_unit_id='" + unitid_mst + "' and status='active'");
            if (dt3.Rows.Count > 0)
            {
                foreach (DataRow dr in dt3.Rows)
                {
                    mod4.Add(new SelectListItem { Text = dr["First_name"].ToString(), Value = dr["rec_id"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            #endregion
            //model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            //model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod3;
            model[0].SelectedItems3 = new string[] { "" };
            //model[0].TList4 = mod4;
            model[0].SelectedItems4 = new string[] { "" };
            model[0].Col25 = "D";
            //model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult student_remark_rpt(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                if (mod3 == null) mod3 = new List<SelectListItem>();
                if (mod4 == null) mod4 = new List<SelectListItem>();
                //TempData[MyGuid + "_Tlist1"] = mod1;
                //TempData[MyGuid + "_Tlist2"] = mod2;
                //TempData[MyGuid + "_Tlist3"] = mod3;
                //TempData[MyGuid + "_Tlist4"] = mod4;
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
                var tm = model.FirstOrDefault();
                //if (command == "New")
                //{

                //}
                #region Section
                if (command == "Section")
                {

                    ViewBag.scripCall = "enableForm();";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    string class_id = string.Join(",", model[0].SelectedItems1);
                    string section_id = string.Join(",", model[0].SelectedItems2);
                    DataTable dt3 = new DataTable();
                    mod3 = new List<SelectListItem>();
                    dt3 = sgen.getdata(userCode, "select  a.reg_no,a.section,(b.first_name||' '||" +
                            "replace(b.middle_name,'0','')||' '||replace(b.last_name,'0','')) as Student_Name from student_detail a,user_details b where b.status = 'active' and a.reg_no=b.regnumber and " +
                            "a.client_unit_id='" + unitid_mst + "'" +
                            " and a.type='STD' and a.type=b.type and a.academic_year_id='" + Ac_Year_id + "' and a.class_applied='" + class_id + "' and a.section ='" + section_id + "' ");
                    if (dt3.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt3.Rows)
                        {
                            mod3.Add(new SelectListItem { Text = dr["Student_Name"].ToString(), Value = dr["reg_no"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
                    //model[0].TList3 = mod3;
                    model[0].Col25 = tm.Col25;

                }
                #endregion
                //else if (command == "Cancel")
                //{
                //    return CancelFun(model);
                //}
                //else if (command == "Callback")
                //{
                //    model = StartCallback(model);
                //}
                else if (command == "Fill Data")
                {

                    if (model[0].SelectedItems1.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Select class',2)"; return View(model);
                    }
                    if (model[0].SelectedItems2.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Select Section',2)"; return View(model);
                    }
                    string cond = "", v_date = "";
                    string fromdt = model[0].Col16;
                    string Todt = model[0].Col17;
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    if (model[0].Col25 == "T")
                    {
                        cond = "order by a.sub_catid ";
                        v_date = "to_char( convert_tz( a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date ";
                    }
                    else
                    {
                        cond = "order by a.vch_date desc";
                        v_date = "to_char( convert_tz( a.vch_date,'+UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as vch_date ";
                    }
                    mq = "select to_char( convert_tz( a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date,a.left_reason,a.sub_catid ,(COALESCE(b.first_name,'')||' '||COALESCE(b.middle_name,'')||' '||COALESCE(b.last_name,''))" +
             " as teacher from student_result a,user_details b where a.type='TSR' and a.reg_no='" + model[0].SelectedItems3.FirstOrDefault() + "' and " +
             "a.client_unit_id='" + unitid_mst + "' and a.sub_catid=b.vch_num and b.type='CPR' " + cond + "";
                    DataTable dttmp = sgen.getdata(userCode, mq);
                    string remark = "", rmk = "";
                    if (dttmp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dttmp.Rows)
                        {
                            string teacher = "";
                            if (model[0].Col25 == "T")
                            {
                                if (!rmk.Contains(dr["teacher"].ToString()))
                                {
                                    teacher = Environment.NewLine + "Teacher : " + dr["teacher"] + "" + Environment.NewLine;
                                }
                                rmk = rmk + teacher + "               Date : " + " " + dr["vch_date"] + " " + ',' + " " + "Remark : " + " " + dr["left_reason"] + Environment.NewLine + "";
                            }
                            else
                            {
                                if (!rmk.Contains(dr["vch_date"].ToString()))
                                {
                                    teacher = Environment.NewLine + "Date : " + dr["vch_date"] + "" + Environment.NewLine;
                                }
                                rmk = rmk + teacher + "          Teacher : " + " " + dr["teacher"] + " " + ',' + " " + "Remark : " + " " + dr["left_reason"] + Environment.NewLine + "";
                            }
                        }
                        model[0].Col17 = rmk;
                    }
                END:;

                }
                else if (command == "Save" || command == "Update")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (model[0].Col34 == null)
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please add Remark',2)"; return View(model);
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a " +
                            "where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    DataRow dr = dataTable.NewRow();
                    dr["rec_id"] = "0";
                    dr["type"] = model[0].Col12;
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = sgen.Make_date_S(model[0].Col33);
                    dr["class_id"] = model[0].SelectedItems1.FirstOrDefault();
                    dr["section_id"] = model[0].SelectedItems2.FirstOrDefault();
                    dr["sub_catid"] = model[0].SelectedItems4.FirstOrDefault();
                    dr["reg_no"] = model[0].SelectedItems3.FirstOrDefault();
                    dr["left_reason"] = model[0].Col34;
                    if (isedit)
                    {
                        dr["ent_by"] = model[0].Col3;
                        dr["ent_date"] = model[0].Col4;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        dr["edit_by"] = userid_mst;
                        dr["edit_date"] = currdate;
                    }
                    else
                    {
                        dr["ent_by"] = userid_mst;
                        dr["ent_date"] = currdate;
                        dr["edit_by"] = "-";
                        dr["edit_date"] = currdate;
                    }
                    dataTable.Rows.Add(dr);
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        string cond = "", v_date = "";
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                        mq = "select to_char( convert_tz( a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date,a.left_reason,a.sub_catid ,(COALESCE(b.first_name,'')||' '||replace(b.middle_name,'0','')||' '||replace(b.last_name,'0',''))" +
                                " as teacher from student_result a,user_details b where a.type='TSR' and a.reg_no='" + model[0].SelectedItems3.FirstOrDefault() + "' " +
                                " and a.client_unit_id='" + unitid_mst + "' and a.sub_catid=b.vch_num and b.type='CPR' " + cond + "";
                        DataTable dttmp = sgen.getdata(userCode, mq);
                        string remark = "", rmk = "";
                        if (model[0].Col25 == "0")
                        {
                            cond = "order by a.sub_catid ,a.vch_date desc";
                            v_date = "to_char( convert_tz( a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date ";
                        }
                        else
                        {
                            cond = "order by a.vch_date desc";
                            v_date = "to_char( convert_tz( a.vch_date,'+UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as vch_date ";
                        }
                        if (dttmp.Rows.Count > 0)
                        {
                            foreach (DataRow drr in dttmp.Rows)
                            {
                                string teacher = "";
                                if (model[0].Col25 == "1")
                                {
                                    if (!rmk.Contains(drr["teacher"].ToString()))
                                    {
                                        teacher = Environment.NewLine + "Teacher : " + drr["teacher"] + "" + Environment.NewLine;
                                    }
                                    rmk = rmk + teacher + "               Date : " + " " + drr["vch_date"] + " " + ',' + " " + "Remark : " + " " + drr["left_reason"] + Environment.NewLine + "";
                                }
                                else
                                {
                                    if (!rmk.Contains(drr["vch_date"].ToString()))
                                    {
                                        teacher = Environment.NewLine + "Date : " + drr["vch_date"] + "" + Environment.NewLine;
                                    }
                                    rmk = rmk + teacher + "          Teacher : " + " " + drr["teacher"] + " " + ',' + " " + "Remark : " + " " + drr["left_reason"] + Environment.NewLine + "";
                                }
                            }
                            model[0].Col17 = rmk;
                        }
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = tm.Col13,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col17 = tm.Col17,
                            Col33 = tm.Col33,
                            TList1 = mod1,
                            SelectedItems1 = tm.SelectedItems1,
                            TList2 = mod2,
                            SelectedItems2 = tm.SelectedItems2,
                            TList3 = mod3,
                            SelectedItems3 = tm.SelectedItems3,
                            TList4 = mod4,
                            SelectedItems4 = new string[] { "" },
                        }
                   );
                    }

                }
                //else if (command == "teacher")
                //{
                //    try
                //    {
                //        if (model[0].SelectedItems1.FirstOrDefault() == "")
                //        {
                //            ViewBag.scripCall = "showmsgJS(1,'Please Select class',2)"; return View(model);
                //        }
                //        if (model[0].SelectedItems2.FirstOrDefault() == "")
                //        { ViewBag.scripCall = "showmsgJS(1,'Please Select Section',2)"; return View(model); }
                //        string cond = "", v_date = "";
                //        string fromdt = model[0].Col16;
                //        string Todt = model[0].Col17;
                //        ViewBag.vnew = "disabled='disabled'";
                //        ViewBag.vedit = "disabled='disabled'";
                //        mq = "select to_char( convert_tz( a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date,a.left_reason,a.sub_catid ,(COALESCE(b.first_name,'')||' '||COALESCE(b.middle_name,'')||' '||COALESCE(b.last_name,''))" +
                //                     " as teacher from student_result a,user_details b where a.type='TSR' and a.reg_no='" + model[0].SelectedItems3.FirstOrDefault() + "' and a.client_id='" + clientid_mst + "'" +
                //                     " and a.client_unit_id='" + unitid_mst + "' and a.sub_catid=b.rec_id and b.type='CPR' " + cond + "";
                //        DataTable dttmp = sgen.getdata(userCode, mq);
                //        if (model[0].Col25 == "0")
                //        {
                //            cond = "order by a.sub_catid ,a.vch_date desc";
                //            v_date = "to_char( convert_tz( a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date ";
                //        }
                //        else
                //        {
                //            cond = "order by a.vch_date desc";
                //            v_date = "to_char( convert_tz( a.vch_date,'+UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as vch_date ";
                //        }
                //        string remark = "", rmk = "";
                //        if (dttmp.Rows.Count > 0)
                //        {
                //            foreach (DataRow dr in dttmp.Rows)
                //            {
                //                string teacher = "";
                //                if (model[0].Col25 == "0")
                //                {
                //                    if (!rmk.Contains(dr["teacher"].ToString()))
                //                    {
                //                        teacher = Environment.NewLine + "Teacher : " + dr["teacher"] + "" + Environment.NewLine;
                //                    }
                //                    rmk = rmk + teacher + "               Date : " + " " + dr["vch_date"] + " " + ',' + " " + "Remark : " + " " + dr["left_reason"] + Environment.NewLine + "";
                //                }
                //                else
                //                {
                //                    if (!rmk.Contains(dr["vch_date"].ToString()))
                //                    {
                //                        teacher = Environment.NewLine + "Date : " + dr["vch_date"] + "" + Environment.NewLine;
                //                    }
                //                    rmk = rmk + teacher + "          Teacher : " + " " + dr["teacher"] + " " + ',' + " " + "Remark : " + " " + dr["left_reason"] + Environment.NewLine + "";
                //                }
                //            }
                //            model[0].Col17 = rmk;
                //        }
                //        END:;
                //    }
                //    catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                //}
                //else if (command == "Date")
                //{
                //    try
                //    {
                //        if (model[0].SelectedItems1.FirstOrDefault() == "")
                //        {
                //            ViewBag.scripCall = "showmsgJS(1,'Please Select class',2)"; return View(model);
                //        }
                //        if (model[0].SelectedItems2.FirstOrDefault() == "")
                //        { ViewBag.scripCall = "showmsgJS(1,'Please Select Section',2)"; return View(model); }
                //        string cond = "", v_date = "";
                //        string fromdt = model[0].Col16;
                //        string Todt = model[0].Col17;
                //        ViewBag.vnew = "disabled='disabled'";
                //        ViewBag.vedit = "disabled='disabled'";
                //        mq = "select to_char( convert_tz( a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date,a.left_reason,a.sub_catid ,(COALESCE(b.first_name,'')||' '||COALESCE(b.middle_name,'')||' '||COALESCE(b.last_name,''))" +
                //                     " as teacher from student_result a,user_details b where a.type='TSR' and a.reg_no='" + model[0].SelectedItems3.FirstOrDefault() + "' and a.client_id='" + clientid_mst + "'" +
                //                     " and a.client_unit_id='" + unitid_mst + "' and a.sub_catid=b.rec_id and b.type='CPR' " + cond + "";
                //        DataTable dttmp = sgen.getdata(userCode, mq);
                //        if (model[0].Col25 == "1")
                //        {
                //            cond = "order by a.sub_catid ,a.vch_date desc";
                //            v_date = "to_char( convert_tz( a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldatetimeformat() + "') as vch_date ";
                //        }
                //        else
                //        {
                //            cond = "order by a.vch_date desc";
                //            v_date = "to_char( convert_tz( a.vch_date,'+UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as vch_date ";
                //        }
                //        string remark = "", rmk = "";
                //        if (dttmp.Rows.Count > 0)
                //        {
                //            foreach (DataRow dr in dttmp.Rows)
                //            {
                //                string teacher = "";
                //                if (model[0].Col25 == "1")
                //                {
                //                    if (!rmk.Contains(dr["teacher"].ToString()))
                //                    {
                //                        teacher = Environment.NewLine + "Teacher : " + dr["teacher"] + "" + Environment.NewLine;
                //                    }
                //                    rmk = rmk + teacher + "               Date : " + " " + dr["vch_date"] + " " + ',' + " " + "Remark : " + " " + dr["left_reason"] + Environment.NewLine + "";
                //                }
                //                else
                //                {
                //                    if (!rmk.Contains(dr["vch_date"].ToString()))
                //                    {
                //                        teacher = Environment.NewLine + "Date : " + dr["vch_date"] + "" + Environment.NewLine;
                //                    }
                //                    rmk = rmk + teacher + "          Teacher : " + " " + dr["teacher"] + " " + ',' + " " + "Remark : " + " " + dr["left_reason"] + Environment.NewLine + "";
                //                }
                //            }
                //            model[0].Col17 = rmk;
                //        }
                //        END:;
                //    }
                //    catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1, '" + ex.Message.ToString() + "', 1);"; }
                //}
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion        
        #region class subject
        public ActionResult class_sub()
        {
            List<Tmodelmain> model = new List<Tmodelmain>();
            FillMst();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].TList1 = model[0].TList4 = model[0].TList3 = model[0].TList2 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].Col9 = "CLASS SUBJECT CATEGORY";
            model[0].Col10 = "student_result";
            model[0].Col12 = "class_subject";
            return View(model);
        }
        public List<Tmodelmain> bindsubject_repeater(List<Tmodelmain> model)
        {
            var tm = model.FirstOrDefault();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            if ((model[0].SelectedItems1.FirstOrDefault() == "") || (model[0].SelectedItems1.FirstOrDefault() == "0"))
            {
                ViewBag.scripCall += "showmsgJS(1, 'Please Select Class', 2);";
                return model;
            }
            #region subject cat
            DataTable dt = new DataTable();//Subject Category
            dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where " +
             " type='ESC'  and client_unit_id='" + unitid_mst + "' ");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            #endregion
            dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where " +
                "  client_unit_id='" + unitid_mst + "'  and type='ESW' and (status='Y' or status='')  and " +
                "master_id not in (select a.master_name  from master_setting a where a.master_type='opt_subject' " +
                "and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'  and client_unit_id='" + unitid_mst + "' )");
            //}
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod4.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }
            }
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;

            dt = sgen.getdata(userCode, "select rec_id, master_id,master_name,'' as sub_catid from master_setting where  type='ESW' and " +
              " client_unit_id='" + unitid_mst + "' and  status in ('Y','')");
            model = new List<Tmodelmain>();
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    Tmodelmain tmm = new Tmodelmain();
                    tmm.Col17 = dt.Rows[i]["master_id"].ToString();
                    tmm.Col18 = dt.Rows[i]["sub_catid"].ToString();
                    tmm.Col14 = tm.Col14;
                    tmm.Col15 = tm.Col15;
                    tmm.Col9 = tm.Col9;
                    tmm.Col10 = tm.Col10;
                    tmm.Col13 = tm.Col13;
                    tmm.Col100 = tm.Col100;
                    tmm.Col121 = tm.Col121;
                    tmm.Col122 = tm.Col122;
                    tmm.Col123 = tm.Col123;
                    tmm.Col12 = tm.Col12;
                    tmm.Col11 = tm.Col11;
                    tmm.TList1 = tm.TList1;
                    tmm.TList2 = tm.TList2;
                    tmm.TList3 = tm.TList3;
                    tmm.TList4 = tm.TList4;
                    tmm.SelectedItems1 = tm.SelectedItems1;
                    tmm.SelectedItems2 = tm.SelectedItems2;
                    tmm.SelectedItems3 = tm.SelectedItems3;
                    tmm.SelectedItems4 = tm.SelectedItems4;
                    model.Add(tmm);
                }
            }
            else
            {
                model = new List<Tmodelmain>();
                tm.Col16 = "";
                tm.Col17 = "";
                tm.Col18 = "";
                tm.Col19 = "";
                model.Add(tm);
            }

            return model;
        }
        public List<Tmodelmain> new_class_sub(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            #region BindClass
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = sgen.BindClass_Str(userCode, unitid_mst); ;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            #endregion
            string cattype = "ESC";
            string catmastertype = "sub_cat";
            string currdate = sgen.server_datetime(userCode);
            string dt_ft = "YYYY-MM-dd HH24:MI:SS";
            string vch_num = sgen.genNo(userCode, "select max(to_number (nvl(vch_num,'0'))) as max from master_setting where  client_unit_id='" + unitid_mst + "' and type='" + cattype + "' and  master_type='" + catmastertype + "'", 6, "max");
            model[0].Col16 = vch_num;
            master_id = sgen.genNo(userCode, "select max(to_number (nvl(master_id,'0'))) as max from master_setting where client_unit_id='" + unitid_mst + "' and  type='" + cattype + "' and master_type='" + catmastertype + "'", 3, "max");
            sgen.execute_cmd(userCode, "Insert into master_setting  (vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                       " select '" + vch_num + "',to_date('" + currdate + "','" + dt_ft + "'), '" + cattype + "','" + catmastertype + "','" + master_id + "','Mandatory','" + userid_mst + "',to_date('" + currdate + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "','-' ,to_date('" + currdate + "','" + dt_ft + "') ,to_date('" + currdate + "','" + dt_ft + "') from dual" +
                                       " where Not EXISTS(select Master_name from master_setting where Master_name='Mandatory' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and   type='" + cattype + "' and master_type='" + catmastertype + "') ");

            master_id = sgen.genNo(userCode, "select max(to_number (nvl(master_id,'0'))) as max from master_setting where  client_unit_id='" + unitid_mst + "' and  type='" + cattype + "' and master_type='" + catmastertype + "'", 3, "max");
            sgen.execute_cmd(userCode, "Insert into master_setting  (vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                       " select '" + vch_num + "',to_date('" + currdate + "','" + dt_ft + "'), '" + cattype + "','" + catmastertype + "','" + master_id + "','Optional','" + userid_mst + "',to_date('" + currdate + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "' ,'-' ,to_date('" + currdate + "','" + dt_ft + "'),to_date('" + currdate + "','" + dt_ft + "') from dual" +
                                       " where Not EXISTS(select Master_name from master_setting where Master_name='Optional' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and   type='" + cattype + "' and master_type='" + catmastertype + "') ");

            master_id = sgen.genNo(userCode, "select max(to_number (nvl(master_id,'0'))) as max from master_setting where  client_unit_id='" + unitid_mst + "' and  type='" + cattype + "' and master_type='" + catmastertype + "'", 3, "max");
            sgen.execute_cmd(userCode, "Insert into master_setting  (vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                       " select '" + vch_num + "',to_date('" + currdate + "','" + dt_ft + "'), '" + cattype + "','" + catmastertype + "','" + master_id + "','Choice','" + userid_mst + "',to_date('" + currdate + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "' ,'-' ,to_date('" + currdate + "','" + dt_ft + "'),to_date('" + currdate + "','" + dt_ft + "') from dual" +
                                       " where Not EXISTS(select Master_name from master_setting where Master_name='Choice' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and   type='" + cattype + "' and master_type='" + catmastertype + "') ");

            master_id = sgen.genNo(userCode, "select max(to_number (nvl(master_id,'0'))) as max from master_setting where  client_unit_id='" + unitid_mst + "' and  type='" + cattype + "' and master_type='" + catmastertype + "'", 3, "max");
            sgen.execute_cmd(userCode, "Insert into master_setting  (vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id, master_editby ,master_editdate,CREATED_DATE )" +
                                       " select '" + vch_num + "',to_date('" + currdate + "','" + dt_ft + "'), '" + cattype + "','" + catmastertype + "','" + master_id + "','Extra','" + userid_mst + "',to_date('" + currdate + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "' ,'-' ,to_date('" + currdate + "','" + dt_ft + "') ,to_date('" + currdate + "','" + dt_ft + "') from dual" +
                                       " where Not EXISTS(select Master_name from master_setting where Master_name='Extra' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and   type='" + cattype + "' and master_type='" + catmastertype + "') ");

            return model;
        }
        [HttpPost]
        public ActionResult class_sub(List<Tmodelmain> model, string command, string hfrow)
        {
            try
            {
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                #region ddls
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                TempData[MyGuid + "_Tlist1"] = mod1;
                TempData[MyGuid + "_Tlist2"] = mod2;
                model[0].TList1 = mod1;
                model[0].TList2 = mod2;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                foreach (var mod in model)
                {
                    TempData[MyGuid + "_Tlist3"] = mod.TList3 = mod3;
                    TempData[MyGuid + "_Tlist4"] = mod.TList4 = mod4;
                    if (mod.SelectedItems3 == null) mod.SelectedItems3 = new string[] { "" };
                    if (mod.SelectedItems4 == null) mod.SelectedItems4 = new string[] { "" };
                }
                #endregion
                if (command == "New")
                {
                    model = new_class_sub(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    type = model[0].Col12;
                    DataTable dtstr = new DataTable();
                    if ((model[0].SelectedItems1.FirstOrDefault() == "0") || (model[0].SelectedItems1.FirstOrDefault() == ""))
                    {

                        ViewBag.scripCall += "showmsgJS(1, 'Please Select Class', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }

                    if ((model[0].SelectedItems2.FirstOrDefault() == "0") || (model[0].SelectedItems2.FirstOrDefault() == ""))
                    {
                        ViewBag.scripCall += "showmsgJS(1, 'Please Select Section', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    dtstr = sgen.getdata(userCode, "select  * from " + model[0].Col10 + " where 1=2");
                    string[] ddlclass = string.Join(",", model[0].SelectedItems1).Split(',');
                    string[] ddlsection = string.Join(",", model[0].SelectedItems2).Split(',');
                    int maxsub = 0;
                    foreach (string Itemsec in ddlsection)
                    {
                        if (Itemsec != "")
                        {
                            try
                            {
                                maxsub = Convert.ToInt32(sgen.getstring(userCode, "select subject_strength FROM master_setting WHERE type='ESS' and classid='" + model[0].SelectedItems1.FirstOrDefault() + "'  and sectionid='" + Itemsec + "'  and client_unit_id='" + unitid_mst + "'"));
                            }
                            catch (Exception ex)
                            {
                                ViewBag.scripCall += "showmsgJS(1,'Please Check Section Strength Of This Class',2)";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                return View(model);
                            }

                            if (maxsub == 0)
                            {
                                ViewBag.scripCall += "showmsgJS(1,'Please Select Section Strength',2)";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                            }
                            Int32 selectedsub = 0;
                            for (Int32 j = 0; j < model.Count; j++)
                            {
                                // DropDownList ddl_sub_cat = (DropDownList)subject_repeater.Items[j].FindControl("ddl_sub_cat");
                                // string[] ddl_sub_cat = string.Join(",", model[j].SelectedItems3).Split(',');
                                string ddl_sub_catname = "";
                                if (model[j].SelectedItems3.FirstOrDefault() != "")
                                {
                                    ddl_sub_catname = ((List<SelectListItem>)TempData[MyGuid + "_Tlist3"]).SingleOrDefault(item => item.Value == model[j].SelectedItems3.FirstOrDefault().ToString()).Text.ToString();
                                }
                                if ((model[j].SelectedItems3.FirstOrDefault() != "0") && (ddl_sub_catname != "Extra") && model[j].SelectedItems3.FirstOrDefault() != "")
                                {
                                    selectedsub = selectedsub + 1;
                                }
                            }
                            if ((selectedsub > maxsub) || (selectedsub < maxsub))
                            {
                                ViewBag.scripCall += "showmsgJS(1, 'Please Select  Maximum " + maxsub + " Subjects Other Than Extra Subject', 2);";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                foreach (var mod in model)
                                {
                                    TempData[MyGuid + "_Tlist3"] = mod.TList3 = mod3;
                                    TempData[MyGuid + "_Tlist4"] = mod.TList4 = mod4;
                                    if (mod.SelectedItems3 == null) mod.SelectedItems3 = new string[] { "" };
                                    if (mod.SelectedItems4 == null) mod.SelectedItems4 = new string[] { "" };
                                }
                                return View(model);
                            }
                            bool data = false;
                            cond = "";
                            string ac_id = "";

                            if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                            {
                                isedit = true;
                                vch_num = model[0].Col16;
                            }
                            else
                            {
                                isedit = false;
                                ac_id = sgen.genNo(userCode, "select max(to_number (nvl(academic_year_id,'0'))) as max from " + model[0].Col10 + " where  client_unit_id='" + unitid_mst + "' and type='" + model[0].Col12 + "' ", 3, "max");
                                vch_num = sgen.genNo(userCode, "select max(to_number (nvl(vch_num,'0'))) as max from " + model[0].Col10 + " where  client_unit_id='" + unitid_mst + "' and type='" + model[0].Col12 + "' ", 6, "max");

                            }
                            string subject = "";
                            string ID = "";
                            for (Int32 i = 0; i < model.Count; i++)
                            {
                                subject = model[i].SelectedItems4.FirstOrDefault();

                                DataRow dr = dtstr.NewRow();
                                if ((subject != "0") && (model[i].SelectedItems3.FirstOrDefault() != ""))
                                {
                                    dr["rec_id"] = "0";
                                    dr["vch_num"] = vch_num;
                                    dr["vch_date"] = sgen.server_datetime(userCode);
                                    dr["type"] = model[0].Col12;
                                    dr["Academic_Year_Id"] = Ac_Year_id;
                                    dr["Class_Id"] = model[0].SelectedItems1.FirstOrDefault();
                                    dr["Section_Id"] = Itemsec;
                                    dr["Subject_Id"] = subject;
                                    dr["Sub_CatId"] = model[i].SelectedItems3.FirstOrDefault();
                                    if (isedit)
                                    {
                                        dr["ent_by"] = model[0].Col3;
                                        dr["ent_date"] = model[0].Col4;
                                        dr["client_id"] = clientid_mst;
                                        dr["client_unit_id"] = unitid_mst;
                                        dr["edit_by"] = userid_mst;
                                        dr["edit_date"] = currdate;
                                    }
                                    else
                                    {

                                        dr["ent_by"] = userid_mst;
                                        dr["ent_date"] = currdate;
                                        dr["edit_by"] = "-";
                                        dr["edit_date"] = currdate;
                                        dr["client_id"] = clientid_mst;
                                        dr["client_unit_id"] = unitid_mst;
                                    }
                                    dtstr.Rows.Add(dr);
                                }
                            }
                            DataTable dtd = dtstr.Copy();
                            DataColumn newColumn = new DataColumn("newcol", typeof(string));
                            newColumn.Expression = "Convert(Subject_Id , 'System.String') + Convert(class_Id , 'System.String')+ Convert(section_Id , 'System.String')";
                            dtd.Columns.Add(newColumn);
                            var duplicates = dtd.AsEnumerable()
                                   .Select(dr => dr.Field<string>("newcol"))
                                   .GroupBy(x => x)
                                   .Where(g => g.Count() > 1)
                                   .Select(g => g.Key)
                                   .ToList();

                            if (duplicates.Count > 0)
                            {
                                ViewBag.scripCall += "showmsgJS(1, 'Please Select a Subject Once in a List', 2);";
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                return View(model);
                            }
                            bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, tm.Col8, isedit);
                            if (Result)
                            {
                                model = new List<Tmodelmain>();
                                model.Add(new Tmodelmain
                                {
                                    Col16 = tm.Col16,
                                    Col17 = "",
                                    Col1 = "",
                                    Col18 = "",
                                    Col9 = tm.Col9,
                                    Col10 = tm.Col10,
                                    Col11 = tm.Col11,
                                    Col12 = tm.Col12,
                                    Col13 = "Save",
                                    Col100 = "Save & New",
                                    Col121 = "S",
                                    Col122 = "<u>S</u>ave",
                                    Col123 = "Save & Ne<u>w</u>",
                                    Col14 = tm.Col14,
                                    Col15 = tm.Col15,
                                    TList1 = mod1,
                                    TList2 = mod2,
                                    TList3 = mod3,
                                    TList4 = mod4,
                                    SelectedItems1 = new string[] { "" },
                                    SelectedItems2 = new string[] { "" },
                                    SelectedItems3 = new string[] { "" },
                                    SelectedItems4 = new string[] { "" },
                                });
                                if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                                {
                                    ViewBag.vnew = "";
                                    ViewBag.vedit = "";
                                    ViewBag.vsave = "disabled='disabled'";
                                    ViewBag.vsavenew = "disabled='disabled'";
                                    ViewBag.vsavenew = "disabled='disabled'";
                                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                                }
                                else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                                {
                                    try
                                    {
                                        model = new_class_sub(model);
                                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                                    }
                                    catch (Exception ex) { }
                                }
                            }
                            else
                            {
                                ViewBag.vnew = "disabled='disabled'";
                                ViewBag.vedit = "disabled='disabled'";
                                ViewBag.vsave = "";
                                ViewBag.vsavenew = "";
                                ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                            }
                        }
                    }
                }
                if (command == "Class")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                    if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                    #region section
                    DataTable dt = sgen.getdata(userCode, "SELECT  master_id,master_name FROM master_setting where  type='ECS' and  " +
    "  find_in_set(client_unit_id,'" + unitid_mst + "')=1 and master_id not in (select section_id from student_result where type='class_subject' and" +
    "  client_unit_id='" + unitid_mst + "' and  class_id='" + model[0].SelectedItems1.FirstOrDefault() + "' and academic_year_id='" + Ac_Year_id + "' ) ");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    #endregion
                }
                if (command == "btn_sec")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    foreach (var mod in model)
                    {
                        if (mod.SelectedItems3 == null) mod.SelectedItems3 = new string[] { "" };
                        if (mod.SelectedItems4 == null) mod.SelectedItems4 = new string[] { "" };
                    }
                    model = bindsubject_repeater(model);
                }
                if (command == "btn_sub_cat")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                    if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                    foreach (var mod in model)
                    {
                        if (mod.SelectedItems3 == null) mod.SelectedItems3 = new string[] { "" };
                        if (mod.SelectedItems4 == null) mod.SelectedItems4 = new string[] { "" };
                        if (mod.SelectedItems3.FirstOrDefault() == "002")
                        {
                            mq = "select a.master_name as master_id,b.master_name as master_name from master_setting a,master_setting b where a.master_type='opt_subject' and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                            " and a.master_name =b.master_id and b.type='ESW'  and a.client_unit_id='" + unitid_mst + "'" +
                            " and find_in_set(b.client_unit_id,'" + unitid_mst + "')=1  and (a.status='Y' or a.status='' or a.status='0') and (b.status='Y' or b.status='' or b.status='0')";
                        }
                        else
                        {
                            mq = "select master_id,master_name from master_setting where " +
                            "  find_in_set(client_unit_id,'" + unitid_mst + "')=1  and type='ESW' and (status='Y' or status='')  and " +
                            "master_id not in (select a.master_name  from master_setting a where a.master_type='opt_subject' " +
                            "and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'  and client_unit_id='" + unitid_mst + "' )";
                        }
                        DataTable dt = sgen.getdata(userCode, mq);
                        var mymod = sgen.dt_to_selectlist(dt);

                        mod.TList4 = mymod;
                        TempData[MyGuid + "_Tlist4"] = mymod;

                    }

                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region feetype
        public ActionResult feetype()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "FEE TYPE";
            model[0].Col10 = "school_fee_type";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "0"; //

            bool data = false;
            data = cmd_Fun.Frequency(userCode, clientid_mst, unitid_mst, userid_mst, "000001", "001", "Yearly");
            data = cmd_Fun.Frequency(userCode, clientid_mst, unitid_mst, userid_mst, "000002", "002", "Half Yearly");
            data = cmd_Fun.Frequency(userCode, clientid_mst, unitid_mst, userid_mst, "000003", "003", "Monthly");
            data = cmd_Fun.Frequency(userCode, clientid_mst, unitid_mst, userid_mst, "000004", "004", "Bi Monthly");
            data = cmd_Fun.PreHead(userCode, clientid_mst, unitid_mst, userid_mst, "Fine");
            data = cmd_Fun.PreHead(userCode, clientid_mst, unitid_mst, userid_mst, "Transport");
            data = cmd_Fun.PreHead(userCode, clientid_mst, unitid_mst, userid_mst, "Library");
            data = cmd_Fun.PreHead(userCode, clientid_mst, unitid_mst, userid_mst, "Previous Year Fees");
            data = cmd_Fun.PreHead(userCode, clientid_mst, unitid_mst, userid_mst, "Admission");

            return View(model);
        }
        public List<Tmodelmain> new_feetype(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            mq = "select max(to_number (nvl(a.vch_num,'0'))) as auto_genid from " + model[0].Col10.Trim() + " a" +
                " where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + " and master_type='0'";
            vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
            model[0].Col16 = vch_num;
            status = model[0].Col18 = "Y";
            return model;
        }
        [HttpPost]
        public ActionResult feetype(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                switch (command)
                {
                    case "New":
                        model = new_feetype(model);
                        break;

                    case "Cancel":
                        //else if (command == "Cancel")
                        //{
                        return CancelFun(model);
                        //}
                        break;
                    case "Callback":
                        //else if (command == "Callback")
                        //{
                        model = StartCallback(model);
                        //}
                        break;
                    case "Save":
                    case "Update":
                    case "Save & New":
                    case "Update & New":
                        //else if (command == "Save" || command == "Update")
                        //{

                        var tmodel = model.FirstOrDefault();
                        string currdate = sgen.server_datetime(userCode);
                        string punch = "", cond = "", found = "";
                        string inactive_date = "";
                        DataTable dtstr = new DataTable();
                        //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                        dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                        if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                        {
                            isedit = true;
                            cond = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                            master_id = tmodel.Col20.Trim();
                            vch_num = model[0].Col16;
                        }
                        else
                        {
                            isedit = false;
                            vch_num = sgen.genNo(userCode, "select max(to_number (nvl(a.vch_num,'0'))) as max from " + model[0].Col10 + " a" +
                  " where  a.type='" + model[0].Col12 + "'  " + model[0].Col11 + " and master_type='0' ", 6, "max");
                            master_id = sgen.genNo(userCode, "select max(to_number (nvl(a.FeeType_id,'0'))) as max from " + model[0].Col10 + " a " +
                                  "where   a.type='" + model[0].Col12 + "' and master_type='0' " + model[0].Col11 + "", 3, "max");
                        }
                        found = sgen.getstring(userCode, "select a.FeeTypeName from " + model[0].Col10 +
                            " a where  upper (a.FeeTypeName)= upper('" + model[0].Col17 + "' ) and a.type='" + model[0].Col12 + "' and master_type='0'" +
                   "  " + model[0].Col11 + " " + cond + "");
                        type = model[0].Col12;
                        if (model[0].Col18.Trim() == "N")
                        {
                            type = "DD" + type;
                        }
                        if (found != "")
                        {
                            ViewBag.scripcall = "showmsgJS(1,'Data Already Exists', 2);";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            goto END;
                        }
                        #region dtstr
                        DataRow dr = dtstr.NewRow();
                        dr["rec_id"] = "0";
                        dr["vch_num"] = vch_num;
                        dr["vch_date"] = currdate;
                        dr["type"] = model[0].Col12;
                        dr["FeeTypeName"] = model[0].Col17;
                        dr["FeeType_id"] = master_id;
                        if (model[0].Col18 == "Y")
                        {
                            punch = "Y";
                        }
                        else
                        {
                            punch = "N";
                            inactive_date = currdate;
                        }
                        dr["Status"] = punch;
                        dr["ispredefined"] = 0;
                        dr["Inactive_date"] = currdate;
                        dr["client_id"] = clientid_mst;
                        dr["client_unit_id"] = unitid_mst;
                        #endregion
                        if (isedit)
                        {
                            dr["ent_by"] = model[0].Col3;
                            dr["ent_date"] = model[0].Col4;
                            dr["edit_by"] = userid_mst;
                            dr["edit_date"] = currdate;
                        }
                        else
                        {
                            dr["ent_by"] = userid_mst;
                            dr["ent_date"] = currdate;
                            dr["edit_by"] = "-";
                            dr["edit_date"] = currdate;
                        }
                        dtstr.Rows.Add(dr);
                        bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                        if (Result == true)
                        {
                            //ViewBag.vnew = "";
                            //ViewBag.vedit = "";
                            //ViewBag.vsave = "disabled='disabled'";
                            ////     ViewBag.vsavenew = "disabled='disabled'";
                            //ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Fee Type Saved Successfully');disableForm();";
                            model = new List<Tmodelmain>();
                            tmodel.Col17 = "";
                            tmodel.Col16 = "";
                            tmodel.Col18 = "";
                            tmodel.Col20 = "";
                            tmodel.Col21 = "";
                            tmodel.Col13 = "Save";
                            tmodel.Col100 = "Save & New";
                            tmodel.Col121 = "S";
                            tmodel.Col122 = "<u>S</u>ave";
                            tmodel.Col123 = "Save & Ne<u>w</u>";
                            tmodel.Col9 = tmodel.Col9;
                            tmodel.Col14 = tmodel.Col14;
                            tmodel.Col15 = tmodel.Col15;
                            model.Add(tmodel);
                            if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                            {
                                ViewBag.vnew = "";
                                ViewBag.vedit = "";
                                ViewBag.vsave = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                ViewBag.vsavenew = "disabled='disabled'";
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                            }
                            else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                            {
                                try
                                {
                                    model = new_feetype(model);
                                    ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                                }
                                catch (Exception ex) { }
                            }
                        }
                        else
                        {
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                        }
                    END:;
                        //}
                        break;
                }

                //if (command == "New")
                //{

                //    sgen.SetSession(MyGuid, "EDMODE", "N");
                //    ViewBag.vnew = "disabled='disabled'";
                //    ViewBag.vedit = "disabled='disabled'";
                //    ViewBag.vsave = "";
                //    //   ViewBag.vsavenew = "";
                //    ViewBag.scripCall = "enableForm();";
                //    mq = "select max(to_number (nvl(a.vch_num,'0'))) as auto_genid from " + model[0].Col10.Trim() + " a" +
                //        " where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + " and master_type='0'";
                //    vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                //    model[0].Col16 = vch_num;
                //    status = model[0].Col18 = "Y";

                //}
                //else if (command == "Cancel")
                //{
                //    return CancelFun(model);
                //}
                //else if (command == "Callback")
                //{
                //    model = StartCallback(model);
                //}
                //else if (command == "Save" || command == "Update")
                //  {

                //      var tmodel = model.FirstOrDefault();
                //      string currdate = sgen.server_datetime(userCode);
                //      string punch = "", cond = "", found = "";
                //      string inactive_date = "";
                //      DataTable dtstr = new DataTable();
                //      //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                //      dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                //      if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                //      {
                //          isedit = true;
                //          cond = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                //          master_id = tmodel.Col20.Trim();
                //          vch_num = model[0].Col16;
                //      }
                //      else
                //      {
                //          isedit = false;
                //          vch_num = sgen.genNo(userCode, "select max(to_number (nvl(a.vch_num,'0'))) as max from " + model[0].Col10 + " a" +
                //" where  a.type='" + model[0].Col12 + "'  " + model[0].Col11 + " and master_type='0' ", 6, "max");
                //          master_id = sgen.genNo(userCode, "select max(to_number (nvl(a.FeeType_id,'0'))) as max from " + model[0].Col10 + " a " +
                //                "where   a.type='" + model[0].Col12 + "' and master_type='0' " + model[0].Col11 + "", 3, "max");
                //      }
                //      found = sgen.getstring(userCode, "select a.FeeTypeName from " + model[0].Col10 +
                //          " a where  upper (a.FeeTypeName)= upper('" + model[0].Col17 + "' ) and a.type='" + model[0].Col12 + "' and master_type='0'" +
                // "  " + model[0].Col11 + " " + cond + "");
                //      type = model[0].Col12;
                //      if (model[0].Col18.Trim() == "N")
                //      {
                //          type = "DD" + type;
                //      }
                //      if (found != "")
                //      {
                //          ViewBag.scripcall = "showmsgJS(1,'Data Already Exists', 2);";
                //          goto END;
                //      }
                //      #region dtstr
                //      DataRow dr = dtstr.NewRow();
                //      dr["rec_id"] = "0";
                //      dr["vch_num"] = vch_num;
                //      dr["vch_date"] = currdate;
                //      dr["type"] = model[0].Col12;
                //      dr["FeeTypeName"] = model[0].Col17;
                //      dr["FeeType_id"] = master_id;
                //      if (model[0].Col18 == "Y")
                //      {
                //          punch = "Y";
                //      }
                //      else
                //      {
                //          punch = "N";
                //          inactive_date = currdate;
                //      }
                //      dr["Status"] = punch;
                //      dr["ispredefined"] = 0;
                //      dr["master_type"] = type_desc.Trim();
                //      dr["Inactive_date"] = currdate;
                //      dr["client_id"] = clientid_mst;
                //      dr["client_unit_id"] = unitid_mst;
                //      #endregion
                //      if (isedit)
                //      {
                //          dr["ent_by"] = model[0].Col3;
                //          dr["ent_date"] = model[0].Col4;
                //          dr["edit_by"] = userid_mst;
                //          dr["edit_date"] = currdate;
                //      }
                //      else
                //      {
                //          dr["ent_by"] = userid_mst;
                //          dr["ent_date"] = currdate;
                //          dr["edit_by"] = "-";
                //          dr["edit_date"] = currdate;
                //      }
                //      dtstr.Rows.Add(dr);
                //      bool Result = sgen.Update_data(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                //      if (Result == true)
                //      {
                //          ViewBag.vnew = "";
                //          ViewBag.vedit = "";
                //          ViewBag.vsave = "disabled='disabled'";
                //          ViewBag.vsavenew = "disabled='disabled'";
                //          ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                //          model = new List<Tmodelmain>();
                //          tmodel.Col17 = "";
                //          tmodel.Col16 = "";
                //          tmodel.Col18 = "";
                //          tmodel.Col20 = "";
                //          tmodel.Col21 = "";
                //          tmodel.Col13 = "Save";
                //          tmodel.Col9 = tmodel.Col9;
                //          model.Add(tmodel);
                //      }
                //      else
                //      {
                //          ViewBag.scripCall = "showmsgJS(3, 'Record Not Saved', 1);";
                //      }
                //  END:;
                //  }

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region feehead
        public ActionResult feehead()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            model[0].Col9 = "FEE HEAD";
            model[0].Col10 = "master_setting";
            model[0].Col12 = "EFH"; //
            model[0].Col18 = "1"; //
            model[0].Col19 = "B"; //
            model[0].Col20 = "Education Fees Head"; //
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;                            //For dropdownlist
            model[0].SelectedItems1 = new string[] { "" };      //For dropdownlist
            return View(model);
        }
        public List<Tmodelmain> new_feehead(List<Tmodelmain> model)
        {
            sgen.SetSession(MyGuid, "EDMODE", "N");
            ViewBag.vnew = "disabled='disabled'";
            ViewBag.vedit = "disabled='disabled'";
            ViewBag.vsave = "";
            ViewBag.vsavenew = "";
            ViewBag.scripCall = "enableForm();";
            status = model[0].Col18 = "1";
            model[0].Col19 = "B";
            #region FillFeeType
            DataTable dt1 = new DataTable();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = cmd_Fun.feetype(userCode, unitid_mst);
            model[0].SelectedItems1 = new string[] { "" };
            #endregion
            return model;
        }
        [HttpPost]
        public ActionResult feehead(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                //model[0].TList1 = mod1;
                var tm = model.FirstOrDefault();
                if (command == "New")
                {
                    model = new_feehead(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "N", "feehead", "Education", model);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string punch = "", cond = "", found = "";
                    string inactive_date = "";
                    DataTable dtstr = new DataTable();

                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        cond = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        master_id = tmodel.Col21.Trim();
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (nvl(a.vch_num,'0'))) as max from " + model[0].Col10 + " a" +
              " where  a.type='" + model[0].Col12 + "'  " + model[0].Col11 + " and master_type='" + model[0].Col20 + "' and sectionid='" + model[0].SelectedItems1.FirstOrDefault() + "' ", 6, "max");
                        model[0].Col16 = vch_num;
                        master_id = sgen.genNo(userCode, "select max(to_number (nvl(a.master_id,'0'))) as max from " + model[0].Col10 + " a " +
                              "where   a.type='" + model[0].Col12 + "' and master_type='" + model[0].Col20 + "' and sectionid='" + model[0].SelectedItems1.FirstOrDefault() + "' " + model[0].Col11 + "", 3, "max");
                    }
                    found = sgen.getstring(userCode, "select a.master_name from " + model[0].Col10 +
                        " a where  upper (a.master_name)= upper('" + model[0].Col17 + "' )and a.type='" + model[0].Col12 + "' and master_type='" + model[0].Col20 + "'" +
               "  " + model[0].Col11 + " " + cond + "");
                    type = model[0].Col12;
                    if (found != "")
                    {
                        ViewBag.scripcall = "showmsgJS(1,'Data Already Exists', 2);";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        goto END;
                    }
                    #region dtstr
                    DataRow dr = dtstr.NewRow();
                    dr["rec_id"] = "0";
                    dr["vch_num"] = vch_num;
                    dr["vch_date"] = currdate;
                    dr["type"] = model[0].Col12;
                    dr["master_id"] = master_id;
                    dr["master_name"] = model[0].Col17;     //head name
                    dr["master_type"] = model[0].Col20;
                    dr["sectionid"] = model[0].SelectedItems1.FirstOrDefault();   //Fee Type
                    dr["Section_Strength"] = model[0].Col19;   //Fee for which type ofstudent  
                    dr["subjectid"] = model[0].Col18;//Active or deactive
                    dr["CLIENT_NAME"] = model[0].Col22;//debit ledger
                    dr["UNIT_NAME"] = model[0].Col24;//credit ledger
                    dr["client_id"] = clientid_mst;
                    dr["client_unit_id"] = unitid_mst;
                    #endregion
                    if (isedit)
                    {
                        dr["master_entby"] = model[0].Col3;
                        dr["master_entdate"] = model[0].Col4;
                        dr["master_editby"] = userid_mst;
                        dr["master_editdate"] = currdate;
                    }
                    else
                    {
                        dr["master_entby"] = userid_mst;
                        dr["master_entdate"] = currdate;
                        dr["master_editby"] = "-";
                        dr["master_editdate"] = currdate;
                    }
                    dtstr.Rows.Add(dr);
                    bool Result = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        tmodel.Col17 = "";
                        tmodel.Col16 = tmodel.Col16;
                        tmodel.Col18 = tmodel.Col18;
                        tmodel.Col20 = tmodel.Col20;
                        tmodel.Col21 = tmodel.Col21;
                        tmodel.Col19 = tmodel.Col19;
                        tmodel.Col13 = "Save";
                        tmodel.Col100 = "Save & New";
                        tmodel.Col121 = "S";
                        tmodel.Col122 = "<u>S</u>ave";
                        tmodel.Col123 = "Save & Ne<u>w</u>";
                        tmodel.Col9 = tmodel.Col9;
                        tmodel.TList1 = mod1;
                        tmodel.SelectedItems1 = new string[] { "" };
                        model.Add(tmodel);
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Fee Head Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_feehead(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Fee Head Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region teacher subject
        public ActionResult teacher_sub()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].TList3 = mod3;
            model[0].TList4 = mod4;
            model[0].TList5 = mod5;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            model[0].Col1 = clientid_mst;
            model[0].Col2 = unitid_mst;
            model[0].Col9 = "TEACHER SUBJECT ALLOCATION";
            model[0].Col10 = "teacher_subject";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "ETS";
            return View(model);
        }
        public List<Tmodelmain> newteacher_sub(List<Tmodelmain> model)
        {
            model = getnew(model);
            model[0].Col20 = "Y";
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            #region teacher_name
            DataTable dt = sgen.getdata(userCode, "SELECT user_details.first_name||' '||replace(user_details.last_name,'0','') AS First_name,vch_num FROM user_details" +
       " where Type='CPR' and client_unit_id='" + unitid_mst + "' and status='active' and vch_num not " +
       "in (select distinct teacher_id from teacher_subject where  client_unit_id='" + unitid_mst + "')");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["First_name"].ToString(), Value = dr["vch_num"].ToString() });
                }
            }
            #endregion
            #region classteacher
            dt = sgen.getdata(userCode, "select DISTINCT ( a.class_applied||'-'||a.section ) as classid_sectionid, (  b.class||' '||c.master_name )" +
           " as class_section ,cast(a.class_applied as int) as class_id from student_detail a,add_class b,master_setting c where  a.class_applied = b.add_class_id " +
           "and a.section=c.master_id and c.type='ECS' and a.academic_year_id='" + Ac_Year_id + "' and a.client_unit_id='" + unitid_mst + "'" +
           " and a.client_unit_id=b.client_unit_id and find_in_set( a.client_unit_id,c.client_unit_id)=1  order by 3");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod2.Add(new SelectListItem { Text = dr["class_section"].ToString(), Value = dr["classid_sectionid"].ToString() });
                }
            }
            #endregion
            #region class
            //mod3 = sgen.BindClass(userCode, unitid_mst);
            dt = sgen.getdata(userCode, "select DISTINCT ( a.class_applied||'-'||a.section ) as classid_sectionid, (  b.class||' '||c.master_name )" +
               " as class_section ,cast(a.class_applied as int) as class_id from student_detail a,add_class b,master_setting c where  a.class_applied = b.add_class_id " +
               "and a.section=c.master_id and c.type='ECS' and a.academic_year_id='" + Ac_Year_id + "' and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "'" +
               " and a.client_id=b.client_id and a.client_unit_id=b.client_unit_id and a.client_id=c.client_id and a.client_unit_id=c.client_unit_id  order by 3");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod3.Add(new SelectListItem { Text = dr["class_section"].ToString(), Value = dr["classid_sectionid"].ToString() });
                }
            }

            sgen.SetSession(MyGuid, "classsection", dt);
            #endregion
            #region subject

            mod4 = cmd_Fun.lib_subject(userCode, unitid_mst);
            #endregion
            #region priority
            dt = sgen.getdata(userCode, "SELECT rownum FROM XMLTABLE('1 to 5')");
            if (dt.Rows.Count > 0)
            {
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        mod5.Add(new SelectListItem { Text = dr["rownum"].ToString(), Value = dr["rownum"].ToString() });
                    }
                }
            }
            #endregion
            dt = sgen.getdata(userCode, "select '' as class_id,'' as Subject_id,'' as Priority from dual");

            sgen.SetSession(MyGuid, "BASEDT", dt);
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            return model;
        }
        [HttpPost]
        public ActionResult teacher_sub(List<Tmodelmain> model, string command, string hfrow)
        {
            try
            {
                FillMst(model[0].Col15);
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
                TempData[MyGuid + "_Tlist1"] = mod1;
                TempData[MyGuid + "_Tlist2"] = mod2;

                model[0].TList1 = mod1;
                model[0].TList2 = mod2;

                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                foreach (var tm2 in model)
                {
                    tm2.TList3 = mod3;
                    tm2.TList4 = mod4;
                    tm2.TList5 = mod5;
                    if (tm2.SelectedItems3 == null) tm2.SelectedItems3 = new string[] { "" };
                    if (tm2.SelectedItems4 == null) tm2.SelectedItems4 = new string[] { "" };
                    if (tm2.SelectedItems5 == null) tm2.SelectedItems5 = new string[] { "" };
                }


                if (command == "New")
                {
                    model = newteacher_sub(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Add Class")
                {
                    mod3 = (List<SelectListItem>)TempData[MyGuid + "_TList3"];
                    mod4 = (List<SelectListItem>)TempData[MyGuid + "_TList4"];
                    mod5 = (List<SelectListItem>)TempData[MyGuid + "_TList5"];
                    TempData[MyGuid + "_TList3"] = mod3;
                    TempData[MyGuid + "_TList4"] = mod4;
                    TempData[MyGuid + "_TList5"] = mod5;
                    Tmodelmain tm = new Tmodelmain();

                    tm.TList3 = mod3;
                    tm.TList4 = mod4;
                    tm.TList5 = mod5;
                    tm.SelectedItems3 = new string[] { "" };
                    tm.SelectedItems4 = new string[] { "" };
                    tm.SelectedItems5 = new string[] { "" };
                    model.Add(tm);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";

                }
                else if (command == "Remove Class")
                {
                    if (model.Count > 1)
                    {
                        model.RemoveAt(sgen.Make_int(hfrow));
                    }
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    bool crossit = false;
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    DataTable basedt = ((DataTable)sgen.GetSession(MyGuid, "BASEDT")).Clone();
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        isedit = true;
                        vch_num = tmodel.Col16.Trim();
                        id = tmodel.Col21.Trim();
                    }
                    else
                    {
                        isedit = false;
                        string found = "";
                        found = sgen.getstring(userCode, "select class from " + model[0].Col10 + " where class='" + model[0].Col23 + "' " + model[0].Col11 + " and (type='EAC' or type ='DDEAC' ) and type_desc='" + Master_Type + "'  ");
                        if (found != "")
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Data Already Exists', 2);";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            return View(model);
                        }

                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where (type='ETS' or type ='DDETS' ) " + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = sgen.getdata(userCode, "select  * from teacher_subject  where  1=2");
                    string[] class_teacher = string.Join(",", model[0].SelectedItems2).Split(',');
                    //for (Int32 i = 0; i < class_teacher.Length; i++)
                    //{
                    for (int x = 0; x < model.Count; x++)
                    {
                        DataRow drb = basedt.NewRow();
                        string[] class_id = string.Join(",", model[x].SelectedItems3).Split(',');
                        string[] subject_id = string.Join(",", model[x].SelectedItems4).Split(',');
                        for (Int32 y = 0; y < class_id.Length; y++)
                        {
                            for (Int32 z = 0; z < subject_id.Length; z++)
                            {
                                //string class_sec = class_teacher[i];
                                //string[] class_section = class_sec.Split('-');

                                DataRow dr = dataTable.NewRow();
                                dr["rec_id"] = "0";
                                dr["vch_num"] = vch_num;
                                dr["vch_date"] = currdate;
                                dr["type"] = "ETS";
                                dr["type_desc"] = "Education Teacher Subject";
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                //dr["Class_Teacher_Id"] = class_section[0];
                                //dr["Section_Teacher_Id"] = class_section[1];

                                dr["class_teac"] = string.Join(",", model[0].SelectedItems2).Replace(",", "','");

                                dr["Teacher_Id"] = model[0].SelectedItems1.FirstOrDefault();
                                dr["Class_Id"] = class_id[y].Split('-')[0];
                                dr["Section_Id"] = class_id[y].Split('-')[1];
                                dr["Subject_Id"] = subject_id[z];
                                dr["Isclassteacher"] = model[0].Col17;
                                dr["priority"] = model[x].SelectedItems5.FirstOrDefault();
                                if (drb["Class_Id"] == DBNull.Value)
                                { drb["Class_Id"] = class_id[y].Split('-')[0]; }
                                else
                                {
                                    drb["Class_Id"] = drb["Class_Id"].ToString() + "," + class_id[y].Split('-')[0];
                                }

                                if (drb["Subject_Id"] == DBNull.Value)
                                { drb["Subject_Id"] = subject_id[z]; }
                                else
                                {
                                    drb["Subject_Id"] = drb["Subject_Id"].ToString() + "," + subject_id[z];
                                }

                                dr["Row_num"] = x;
                                dr = getsave(currdate, dr, model);
                                dataTable.Rows.Add(dr);
                            }
                        }

                        if (!crossit)
                        {

                            if (drb["class_id"] != DBNull.Value)
                            {
                                basedt.Rows.Add(drb);
                            }
                        }
                        crossit = true;
                    }
                    sgen.SetSession(MyGuid, "MAKEDATATDT", dataTable);
                    sgen.SetSession(MyGuid, "BASEDT", basedt);
                    //}
                    DataTable dtclass = (DataTable)sgen.GetSession(MyGuid, "classsection");
                    string msg = "", cls = "";
                    DataView dvl = dataTable.DefaultView;
                    dataTable = dvl.ToTable(true, "teacher_id", "section_teacher_id", "class_teacher_id");
                    string condition = "";

                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        condition = " and (client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd'), type)<>'" + Url + "'";
                    }
                    else
                    {
                        condition = "";
                    }

                    foreach (DataRow drl in dataTable.Rows)
                    {
                        DataTable dtfound = sgen.getdata(userCode, "SELECT DISTINCT (class_teacher_id||'-'||section_teacher_id) as class, ( replace( b.first_name,'0','')||' '||REPLACE( b.middle_name,'0','')||' '||" +
                             "REPLACE( b.last_name,'0','')) as Teacher_Name FROM teacher_subject a,user_details b where a.Class_Teacher_Id='" + drl["class_teacher_id"] + "'" +
                             " and a.Section_Teacher_Id='" + drl["section_teacher_id"] + "'  and a.teacher_id=b.vch_num and a.client_id='" + clientid_mst + "'" +
                             " and a.client_unit_id='" + unitid_mst + "' " + condition + "");
                        if (dtfound.Rows.Count > 0)
                        {
                            if (msg.Trim().Equals(""))
                            {
                                cls = sgen.seekval_dt(dtclass, "classid_sectionid='" + dtfound.Rows[0]["class"].ToString() + "'", "class_section");
                                msg = cls + " Class Already Assign To Teacher " + dtfound.Rows[0]["Teacher_Name"].ToString() + "";
                            }
                            else
                            {
                                cls = cls + "," + sgen.seekval_dt(dtclass, "classid_sectionid='" + dtfound.Rows[0]["class"].ToString() + "'", "class_section");
                                msg = cls + " Class Already Assign To Teacher " + dtfound.Rows[0]["Teacher_Name"].ToString() + "";
                            }
                        }
                    }

                    if (msg != "")
                    {
                        msg = msg + "\r\n Are You sure To Assign Them Another Selected Teacher";
                        sgen.showmsg(2, msg, 1);
                        ViewBag.scripCall = "showmsgJS(1, '" + msg + "', 2);";
                        return View(model);
                    }
                    dataTable = (DataTable)sgen.GetSession(MyGuid, "MAKEDATATDT");
                    DataTable dtx = dataTable;
                    DataColumn newColumn = new DataColumn("newcol", typeof(string));
                    newColumn.Expression = "Convert(Subject_Id , 'System.String') + Convert(class_Id , 'System.String')+ Convert(class_teac , 'System.String')";
                    dtx.Columns.Add(newColumn);
                    var duplicates = dtx.AsEnumerable()
                  .Select(dr => dr.Field<string>("newcol"))
                  .GroupBy(x => x)
                  .Where(g => g.Count() > 1)
                  .Select(g => g.Key)
                  .ToList();

                    if (duplicates.Count > 0)
                    {


                        ViewBag.scripCall = "showmsgJS(1, 'Duplicate Data Exist', 2);";
                        return View(model);
                    }
                    bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tmodel.Col10,
                            Col14 = tmodel.Col14,
                            Col15 = tmodel.Col15,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            Col9 = tmodel.Col9,
                        });
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = newteacher_sub(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;

                }

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region homework
        public ActionResult mess()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            List<SelectListItem> mod6 = new List<SelectListItem>();
            model = getload(model);
            model[0].Col9 = "HOME WORK";
            model[0].Col10 = "enx_tab2";
            model[0].Col12 = "AHW"; // Assign Home Work
            model[0].Col37 = "file_tab";
            model[0].Col32 = "Choose File";
            model[0].Col11 = "and client_id=" + clientid_mst + " and client_unit_id=" + unitid_mst + "";
            model[0].Col19 = "3";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod3;
            model[0].SelectedItems3 = new string[] { "" };
            model[0].TList4 = mod4;
            model[0].SelectedItems4 = new string[] { "" };
            model[0].TList5 = mod5;
            model[0].SelectedItems5 = new string[] { "" };
            model[0].TList6 = mod6;
            model[0].SelectedItems6 = new string[] { "" };
            string SMS = "", Email = "", DetailSms = "0", DetailEmail = "0";
            string smsid = "000004";// SMS and Email OF Homework
            string emailid = "", phoneno = "";
            string[] config = sgen.get_config(userCode, "000004", clientid_mst, unitid_mst, "SMS");
            if (config.Length > 1)
            {
                model[0].Col43 = config[0].ToString(); model[0].Col44 = config[2].ToString();
            }
            else
            {
                ViewBag.vresend = "disabled='disabled'";
                ViewBag.vnew = "disabled='disabled'";
                ViewBag.vedit = "disabled='disabled'";
                ViewBag.vsave = "";
                ViewBag.vsavenew = "";
                ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Set SMS Settings First');";
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult mess(List<Tmodelmain> model, string command, string mid, HttpPostedFileBase[] upd1, string hfrow)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                IList<HttpPostedFileBase> fileCollection1 = new List<HttpPostedFileBase>();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                List<SelectListItem> mod3 = new List<SelectListItem>();
                List<SelectListItem> mod4 = new List<SelectListItem>();
                List<SelectListItem> mod5 = new List<SelectListItem>();
                List<SelectListItem> mod6 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
                TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6 = (List<SelectListItem>)TempData[MyGuid + "_Tlist6"];

                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                if (tm.SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
                if (command == "New")
                {

                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vsave = "disabled='disabled'";
                    ViewBag.vresend = "disabled='disabled'";
                    model = getnew(model);
                    model[0].Col18 = "Y";
                    model[0].Col19 = "3";
                    model[0].Col21 = "1";
                    model[0].Col13 = "Send";
                    mod1 = new List<SelectListItem>();
                    mod2 = new List<SelectListItem>();
                    mod3 = new List<SelectListItem>();
                    mod4 = new List<SelectListItem>();
                    mod5 = new List<SelectListItem>();
                    mod6 = new List<SelectListItem>();
                    DataTable dt = new DataTable();
                    #region MOC 1
                    mod1 = new List<SelectListItem>();
                    dt = sgen.getdata(userCode, "select 'SMS' as communication from dual Union all select 'Email' as communication from dual Union all select 'Portal' as communication from dual");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["communication"].ToString(), Value = dr["communication"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    //model[0].TList1 = mod1;
                    model[0].SelectedItems1 = new string[] { "" };
                    #endregion
                    #region  Class 2
                    mq2 = "select add_class_id,class,cast(sequence as int) as sq from add_class where client_unit_id='" + unitid_mst + "' and type='EAC' and " +
                    "(status='Y' or status='') and add_class_id in (select DISTINCT class_applied from student_detail  WHERE type='STD' and" +
                            " client_unit_id='" + unitid_mst + "')  order by 3";
                    dt = sgen.getdata(userCode, mq2);
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod2.Add(new SelectListItem { Text = dr["class"].ToString(), Value = dr["add_class_id"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
                    #endregion
                    #region Section 3
                    TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3 = sgen.BindSection(userCode, unitid_mst);

                    //TempData[MyGuid + "_Tlist3"] = mod3;
                    #endregion
                    #region Caste 4
                    TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = cmd_Fun.caste(userCode, unitid_mst);

                    //TempData[MyGuid + "_Tlist4"] = mod4;
                    #endregion
                    #region Religion 5
                    TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = cmd_Fun.religion(userCode, unitid_mst);

                    //TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
                    #endregion
                    #region Mail cc 6
                    mq2 = "select user_id||' ('||nvl(email,'-')||')' name  FROM user_details WHERE type<>'STD' and type<>'STP' ";
                    dt = sgen.getdata(userCode, mq2);
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod6.Add(new SelectListItem { Text = dr["name"].ToString(), Value = dr["name"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist6"] = model[0].TList6 = mod6;
                    #endregion
                    model[0].Col16 = vch_num;
                    //model[0].TList1 = mod1;
                    model[0].SelectedItems1 = new string[] { "" };
                    //model[0].TList2 = mod2;
                    model[0].SelectedItems2 = new string[] { "" };
                    //model[0].TList3 = mod3;
                    model[0].SelectedItems3 = new string[] { "" };
                    //model[0].TList4 = mod4;
                    model[0].SelectedItems4 = new string[] { "" };
                    //model[0].TList5 = mod5;
                    model[0].SelectedItems5 = new string[] { "" };
                    //model[0].TList6 = mod6;
                    model[0].SelectedItems6 = new string[] { "" };

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Add More")
                {

                    Tmodelmain tmm = new Tmodelmain();
                    tmm.Col1 = "";
                    model.Add(tmm);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";

                }
                else if (command == "Remove")
                {
                    if (model.Count > 1)
                    {
                        model.RemoveAt(sgen.Make_int(hfrow));
                    }
                }
                else if (command == "bt_send")
                {
                    ViewBag.vnew = "disabled = 'disabled'";
                    ViewBag.vedit = "disabled = 'disabled'";
                    ViewBag.vresend = "disabled = 'disabled'";
                    model[0].Col13 = "Send";
                    #region MOC 1
                    mod1 = new List<SelectListItem>();
                    DataTable dt = sgen.getdata(userCode, "select 'SMS' as communication from dual Union all select 'Email' as communication from dual Union all select 'Portal' as communication from dual");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["communication"].ToString(), Value = dr["communication"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    //model[0].TList1 = mod1;
                    model[0].SelectedItems1 = new string[] { "" };
                    #endregion
                }
                else if (command == "bt_save")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled = 'disabled'";
                    ViewBag.vresend = "disabled = 'disabled'";
                    model[0].Col13 = "Save";
                    mod1 = new List<SelectListItem>();
                    #region MOC 1
                    DataTable dt = sgen.getdata(userCode, "select 'None' as communication from dual");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dt.Rows)
                        {
                            mod1.Add(new SelectListItem { Text = dr["communication"].ToString(), Value = dr["communication"].ToString() });
                        }
                    }
                    TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
                    //model[0].TList1 = mod1;
                    model[0].SelectedItems1 = new string[] { "" };
                    #endregion
                }
                else if (command == "Save" || command == "Update" || command == "Send")
                {

                    string reg_no = "";
                    string Email_id = "";
                    string send_type = "";
                    string phone_No = ""; string xclass = "", sec = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string punch = "", cond = "", found = "";
                    string inactive_date = "";
                    bool Result = false;
                    type = model[0].Col12;
                    bool edit = false;
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16.Trim();
                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        type_desc = "Assign Home Work";
                    }
                    DataTable dtcomm = new DataTable();
                    dtcomm.Columns.Add("Class", typeof(string));
                    dtcomm.Columns.Add("Section", typeof(string));
                    dtcomm.Columns.Add("phone_No", typeof(string));
                    dtcomm.Columns.Add("Email_id", typeof(string));
                    string xemail_id = "", xphone_no = "";
                    DataTable dataTable = sgen.getdata(userCode, "select  * from " + model[0].Col10 + " where 1=2");
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Chk6 == true)
                        {
                            if (reg_no.Equals("")) reg_no = model[i].Col40;
                            else
                            {
                                reg_no = reg_no + "," + model[i].Col40;
                            }
                            if (dtcomm.Rows.Count > 0)
                            {
                                int countr = dtcomm.Rows.Count;
                                //foreach (DataRow drm in dtcomm.Rows)
                                for (int y = 0; y < countr; y++)
                                {
                                    if (dtcomm.Rows[y]["class"].ToString() == model[i].Col41.ToString())
                                    {
                                        dtcomm.Rows[y]["Email_id"] = dtcomm.Rows[y]["Email_id"].ToString() + ',' + model[i].Col29.ToString();
                                        dtcomm.Rows[y]["phone_No"] = dtcomm.Rows[y]["phone_No"].ToString() + ',' + model[i].Col30.ToString();
                                    }
                                    dtcomm.AcceptChanges();
                                }
                                if (sgen.seekval_dt(dtcomm, "class='" + model[i].Col41.ToString() + "'", "class").Equals("0"))
                                {
                                    DataRow dr1 = dtcomm.NewRow();
                                    dr1["class"] = model[i].Col41.ToString();
                                    dr1["Section"] = model[i].Col42.ToString();
                                    dr1["Email_id"] = model[i].Col29.ToString();
                                    dr1["phone_No"] = model[i].Col30.ToString();
                                    dtcomm.Rows.Add(dr1);
                                }
                            }
                            else
                            {
                                DataRow dr1 = dtcomm.NewRow();
                                dr1["class"] = model[i].Col41.ToString();
                                dr1["Section"] = model[i].Col42.ToString();
                                dr1["Email_id"] = model[i].Col29.ToString();
                                dr1["phone_No"] = model[i].Col30.ToString();
                                dtcomm.Rows.Add(dr1);
                            }
                            if (sgen.ValidateEmail(model[i].Col29.ToString()))
                            {
                                if ((model[i].Col29 != "") && (model[i].Col29 != "-") && (model[i].Col29 != "0"))
                                {
                                    if (Email_id.Equals("")) Email_id = model[i].Col29;
                                    else
                                    {
                                        Email_id = Email_id + "," + model[i].Col29;
                                    }
                                }
                            }
                        }
                        //if (model[0].Col19 == "1")
                        //{
                        //xclass = sgen.GetAllSelect(string.Join(",", model[0].SelectedItems2).Split(','));
                        xclass = string.Join(",", model[0].SelectedItems2);
                        xclass = xclass.Replace("'", "");
                        //}
                        //else
                        //{
                        //    xclass = model[0].SelectedItems2.FirstOrDefault(); ;
                        //}
                        sec = string.Join(",", model[0].SelectedItems3);
                        sec = sec.Replace("'", "");
                    }

                    if ((model[0].Col40 != "") && (model[0].Col40 != "0") && (model[0].Col40 != null))
                    {

                        if (reg_no != "")
                        {
                            if (fileCollection1.Count > 0)
                            {
                                DataTable dtfile = new DataTable();
                                //dtfile = sgen.getdata(userCode, "select * from file_tab WHERE 1=2");
                                dtfile = cmd_Fun.GetStructure(userCode, "file_tab");
                                type_desc = "Assign Home Work";
                                string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
                                try
                                {
                                    foreach (HttpPostedFileBase file in upd1)
                                    {
                                        HttpPostedFileBase file1 = file;
                                        ctype1 = file1.ContentType;
                                        fileName1 = file1.FileName;
                                        path1 = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName1;
                                        encpath1 = sgen.Convert_Stringto64(path1).ToString();
                                        finalpath1 = serverpath + encpath1;
                                        file1.SaveAs(finalpath1);
                                        filesave(currdate, dtfile, fileName1, encpath1, "Assign Home Work", ctype1, iscfrm, regnum, mq3);
                                    }
                                }
                                catch (Exception ex) { sgen.showmsg(1, ex.Message.ToString(), 0); }
                                bool res = sgen.Update_data(userCode, dtfile, model[0].Col37, model[0].Col38, false);
                            }
                            string messagetype = "";
                            if (model[0].Col19 == "1") { messagetype = "G"; }
                            if (model[0].Col19 == "3") { messagetype = "H"; }
                            if (model[0].Col19 == "2") { messagetype = "T"; }
                            //for (int i = 0; i < model.Count; i++)
                            {
                                DataRow dr = dataTable.NewRow();
                                dr["rec_id"] = "0";
                                dr["vch_num"] = vch_num;
                                dr["vch_date"] = currdate;
                                dr["type"] = model[0].Col12;
                                dr["type_desc"] = type_desc;
                                //dr["master_id"] = master_id;
                                //dr["col1"] = reg_no; //reg_no
                                dr["col23"] = reg_no; //reg_no
                                dr["col3"] = model[0].Col17;     //Mail Subject Heading
                                dr["col7"] = model[0].SelectedItems1.FirstOrDefault();   // ddl_send
                                dr["col16"] = xclass;   //Class
                                dr["col8"] = sec;  //Section
                                dr["col13"] = model[0].Col22;
                                dr["col15"] = model[0].Col23;   //Signature
                                dr["col17"] = model[0].Col18;   //rdbl
                                dr["col14"] = model[0].SelectedItems6.FirstOrDefault();   //Mail CC
                                dr["col12"] = messagetype;
                                //if (messagetype == "T")
                                //{
                                //    dr["col2"] = hd_topic.Value;
                                //    dr["col11"] = lbl_Topic.Text;
                                //    dr["col5"] = hd_chp.Value;
                                //    dr["col10"] = lbl_Chap.Text;
                                //    dr["col6"] = hd_sub.Value;
                                //    dr["col9"] = lbl_sub.Text;
                                //    dr["col4"] = txt_rmkss.Text;
                                //}
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr = getsave(currdate, dr, model);
                                dataTable.Rows.Add(dr);
                            }
                            if (dataTable.Rows.Count > 0)
                            {
                                sgen.SetSession(MyGuid, "MAKEDATATDT", dataTable);
                                sgen.SetSession(MyGuid, "COMMDT", dtcomm);
                            }
                            if (sgen.GetSession(MyGuid, "MAKEDATATDT") != null)
                            {
                                dataTable = (DataTable)sgen.GetSession(MyGuid, "MAKEDATATDT");
                                if (dataTable.Rows.Count > 0)
                                {
                                    Result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10, tmodel.Col8, isedit);
                                }
                            }
                        }

                        else
                        {
                            ViewBag.vresend = "disabled='disabled'";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Select Atleast one Student');";
                            return View(model);
                        }
                    }
                    string mailfrom = "";
                    DataTable datatable = new DataTable();
                    datatable = sgen.getdata(userCode, "select com_email from company_profile where Company_Profile_Id='" + clientid_mst + "' and type='CP'");
                    if (datatable.Rows.Count > 0)
                    {
                        mailfrom = Convert.ToString(datatable.Rows[0]["com_email"]);
                    }
                    string SMS = "", Email = "", DetailSms = "0", DetailEmail = "0";
                    string smsid = "000004";// SMS and Email OF Homework
                    string emailid = "", phoneno = "";
                    string[] config = sgen.get_config(userCode, "000004", clientid_mst, unitid_mst, "SMS");
                    if (config.Length > 1)
                    {
                        SMS = config[0].ToString(); Email = config[1].ToString(); DetailSms = config[2].ToString(); DetailEmail = config[3].ToString();
                    }
                    else
                    {
                        ViewBag.vresend = "disabled='disabled'";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Set SMS Settings First');";
                        return View(model);
                    }
                    DataTable dtclass_ddl = sgen.getdata(userCode, "select add_class_id,class,cast(sequence as int) from add_class where  " +
                        " client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='') and add_class_id in" +
                        " (select DISTINCT class_applied from student_detail  WHERE type='STD' " +
                        " and client_unit_id='" + unitid_mst + "')  order by 3");
                    DataTable dtsection_ddl = sgen.getdata(userCode, "SELECT  master_id,master_name FROM master_setting where type='ECS'  and" +
                       " find_in_set(client_unit_id,'" + unitid_mst + "')=1 and (status='Y' or status='') order by cast(master_id as int)");
                    string[] ddlsend = string.Join(",", model[0].SelectedItems1).Split(',');
                    foreach (string comm_type in ddlsend)
                    {
                        string xtitle = "";
                        //if (comm_type.Selected == true)
                        {
                            if ((comm_type == "SMS") && ((SMS == "1") || (DetailSms == "1")))
                            {
                                #region SMS
                                {
                                    DataTable dt = new DataTable();
                                    if (sgen.GetSession(MyGuid, "COMMDT") != null)
                                    {
                                        dt = (DataTable)sgen.GetSession(MyGuid, "COMMDT");
                                        DataView dv = dt.DefaultView;
                                        dv.Sort = "class";
                                        dt = dv.ToTable();
                                    }
                                    string msg_txt = " ";
                                    BulkSMS bulk = new BulkSMS(userCode, clientid_mst, unitid_mst, MyGuid);
                                    if ((model[0].Col20 != ""))
                                    {
                                        if (model[0].Col20 != null)
                                        {
                                            string[] ph_cc = (model[0].Col20.Split(','));
                                            string phone_cc = "";
                                            for (Int32 y = 0; y < ph_cc.Length; y++)
                                            {
                                                phone_cc = ph_cc[y];
                                                if ((phone_cc != "0"))
                                                {
                                                    msg_txt = sgen.ExtractHtmlInnerText(model[0].Col22.Replace("\r\n", " %0a "));
                                                    bulk.Add_sms(phone_cc, msg_txt, model[0].Col21 == "2");
                                                }
                                            }
                                        }
                                    }
                                    try
                                    {
                                        if ((model[0].Col40 != "") && (model[0].Col40 != "0") && (model[0].Col40 != null))
                                        {
                                            string[] ddlclass = string.Join(",", model[0].SelectedItems2).Split(',');
                                            if ((DetailSms == "0") || (model[0].Col19 == "1"))
                                            {
                                                foreach (string class_item in ddlclass)
                                                {
                                                    //if (class_item.Selected == true)
                                                    {
                                                        DataTable dtclass = dt.AsEnumerable().Where(w => (string)w["class"] == model[0].SelectedItems2.FirstOrDefault())
                                                                                           .Select(s => s).CopyToDataTable();
                                                        string class_name = sgen.seekval_dt(userCode, dtclass_ddl, "add_class_id", dtclass.Rows[0]["class"].ToString(), "class");
                                                        if ((model[0].Col19 == "3"))
                                                        {
                                                            xtitle = "D/P, Home Work For Class ";
                                                            msg_txt = " " + xtitle + "'" + class_name + "' is " + sgen.ExtractHtmlInnerText(model[0].Col22.Replace("\r\n", " %0a ")) + "";
                                                        }
                                                        else
                                                        {
                                                            xtitle = "";
                                                            msg_txt = " " + xtitle + " " + sgen.ExtractHtmlInnerText(model[0].Col22.Replace("\r\n", " %0a ")) + "";
                                                        }
                                                        if ((dtclass.Rows[0]["phone_no"].ToString() != "") && (dtclass.Rows[0]["phone_no"].ToString() != "-") && (dtclass.Rows[0]["phone_no"].ToString() != "0"))
                                                        {
                                                            string smsstatus = sgen.Send_Sms(userCode, clientid_mst, unitid_mst, dtclass.Rows[0]["phone_no"].ToString(), msg_txt, model[0].Col21 == "2");
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                for (int i = 0; i < model.Count; i++)
                                                {
                                                    //        //BulkSMS bulk = new BulkSMS(UserCode, clientid_mst, unitid_mst);
                                                    //        foreach (RepeaterItem rpt in Rpt_Std.Items)
                                                    //        {
                                                    //            HtmlInputCheckBox chkbx = (HtmlInputCheckBox)rpt.FindControl("cbSelect");
                                                    //            Label lbl_Email_Id = (Label)rpt.FindControl("lbl_Email_Id");
                                                    //            Label lbl_student_name = (Label)rpt.FindControl("lbl_student_name");
                                                    //            Label lbl_PhoneNo = (Label)rpt.FindControl("lbl_PhoneNo");
                                                    //            Label class_section = (Label)rpt.FindControl("Label9");
                                                    if (model[i].Chk6 == true)
                                                    {
                                                        if ((model[0].Col19 == "3"))
                                                        {
                                                            xtitle = "D/P, Home Work of " + model[i].Col26 + " in " + model[i].Col24 + " is ";
                                                        }
                                                        else
                                                        {
                                                            xtitle = "";
                                                        }
                                                        msg_txt = " " + xtitle + " " + sgen.ExtractHtmlInnerText(model[0].Col22.Replace("\r\n", " %0a ")) + "";
                                                        if ((model[i].Col30 != "") && (model[i].Col30 != "-") && (model[i].Col30 != "0"))
                                                        {
                                                            //string smsstatus = sgen.Send_Sms(UserCode, clientid_mst, unitid_mst, lbl_PhoneNo.Text, msg_txt);
                                                            bulk.Add_sms(model[i].Col30, msg_txt, model[0].Col21 == "2");
                                                        }
                                                    }
                                                    //        }
                                                }
                                            }
                                        }
                                    }
                                    catch (Exception err) { /*bulk.Send_SMS_Bulk();*/ }
                                    bulk.Send_SMS_Bulk();
                                }
                                #endregion
                            }
                            try
                            {
                                if ((comm_type == "Email") && ((Email == "0") || DetailEmail == "1"))
                                {
                                    #region SEND MAIL
                                    string emailidcc = "";
                                    if (DetailEmail == "0")
                                    {
                                        if ((model[0].SelectedItems6.FirstOrDefault() == "") || (model[0].SelectedItems6.FirstOrDefault() == "0"))
                                        {
                                            sgen.showmsg(1, "Please Select Email Id", 2);
                                            return View(model);
                                        }
                                        //string mailcc = sgen.GetAllSelect(ddl_CC);
                                        string mailcc = string.Join(",", model[0].SelectedItems6);
                                        mailcc = mailcc.Replace("'", "");
                                        string[] itar = mailcc.Trim().Split(',');
                                        if (itar.Length > 0)
                                        {
                                            for (Int32 i = 0; i < itar.Length; i++)
                                            {
                                                string[] Emialar = itar[i].Replace("(", "").Replace(")", "").Trim().Split(' ');
                                                if (sgen.ValidateEmail(Emialar[1].ToString()))
                                                {
                                                    if (emailidcc.Equals("")) emailidcc = Emialar[1].ToString();
                                                    else
                                                    {
                                                        emailidcc = emailidcc + "," + Emialar[1].ToString();
                                                    }
                                                }
                                            }
                                            xtitle = "";
                                            var body = new StringBuilder();
                                            body.AppendLine(@"<b style='color:#3caee9; font-size: 20px'>" + model[0].Col17 + " </b><br /><hr style='border:1px solid black' />" +
                                                 "<p>Hi <b>Dear Parents : </b>,</p><table style='font-weight:600'>");
                                            if (model[0].Col19 == "2")
                                            {
                                                foreach (DataRow drl in dataTable.Rows)
                                                {
                                                    if (Email_id != "")
                                                    {
                                                        drl["col9"].ToString();
                                                        body.AppendLine(@"<tr><td>Subject </td><td>: " + drl["col9"] + " </td>" +
                                                             "</tr><tr><td> Chapter Name </td><td>: " + drl["col10"] + " </td></tr>" +
                                                             "<tr><td> Topic </td><td>: " + drl["col11"] + " </td></tr>" +
                                                             "<tr><td> Remarks </td><td>: " + drl["col4"] + " </td></tr>");
                                                        body.AppendLine("<br><br>");
                                                    }
                                                }
                                            }
                                            if (model[0].Chk3 == true)
                                            {
                                                body.AppendLine(@"</table><br /><p>" + model[0].Col22 + "</p><p>ThankYou,<br />" + model[0].Col23 + "<br /></p><br />");
                                            }
                                            else
                                            {
                                                body.AppendLine(@"</table><br /><p>" + model[0].Col22 + "</p><p>ThankYou,<br />" + clientname_mst + "<br /></p><br />");
                                            }
                                            //if ((fileCollection1 != null) )
                                            //{
                                            //    sgen.Send_mail_Attch(userCode, clientid_mst, unitid_mst, mailfrom, emailidcc, Email_id, body.ToString(), model[0].Col17.ToString(), "", fileCollection1);
                                            //}
                                            //else
                                            //{
                                            sgen.Send_mail_SA1(userCode, clientid_mst, unitid_mst, mailfrom, emailidcc, Email_id, body.ToString(), model[0].Col17, "");
                                            //}
                                        }
                                    }
                                    if (DetailEmail == "1")
                                    {
                                        Mailer mailer = new Mailer(userCode, clientid_mst, unitid_mst, MyGuid);
                                        var body = new StringBuilder();
                                        //foreach (RepeaterItem rpt in Rpt_Std.Items)
                                        //{
                                        //    var body = new StringBuilder();
                                        //    HtmlInputCheckBox chkbx = (HtmlInputCheckBox)rpt.FindControl("cbSelect");
                                        //    Label lbl_regno = (Label)rpt.FindControl("lbl_regno");
                                        //    Label lbl_Email_Id = (Label)rpt.FindControl("lbl_Email_Id");
                                        //    Label lbl_PhoneNo = (Label)rpt.FindControl("lbl_PhoneNo");
                                        //    Label lbl_student_name = (Label)rpt.FindControl("lbl_student_name");
                                        //    Label class_section = (Label)rpt.FindControl("Label9");
                                        if (model[0].Chk6 == true)
                                        {
                                            if (sgen.ValidateEmail(model[0].Col29.ToString()))
                                            {
                                                if ((model[0].Col29 != "") && (model[0].Col29 != "-") && (model[0].Col29 != "0"))
                                                {
                                                    Email_id = model[0].Col29;
                                                    emailidcc = model[0].Col29;
                                                    xtitle = "";
                                                    if ((model[0].Col19 == "3") || (model[0].Col19 == "2") || (model[0].Col19 == "1"))
                                                    {
                                                        xtitle = "Dear Parents, Home Work of " + model[0].Col26 + " in " + model[0].Col24 + " is ";
                                                    }
                                                    else
                                                    {
                                                        xtitle = "Dear Parents of " + model[0].Col26 + " in " + model[0].Col24 + " ";
                                                    }
                                                    body.AppendLine(@"<b style='color:#3caee9; font-size: 20px'>" + model[0].Col17 + " </b><br /><hr style='border:1px solid black' />" +
                                                    "<p>Hi <b>" + xtitle + " : </b>,</p><table style='font-weight:600'>");
                                                    if (model[0].Col19 == "2")
                                                    {
                                                        foreach (DataRow drl in dataTable.Rows)
                                                        {
                                                            if (Email_id != "")
                                                            {
                                                                drl["col9"].ToString();
                                                                body.AppendLine(@"<tr><td>Subject </td><td>: " + drl["col9"] + " </td>" +
                                                                     "</tr><tr><td> Chapter Name </td><td>: " + drl["col10"] + " </td></tr>" +
                                                                     "<tr><td> Topic </td><td>: " + drl["col11"] + " </td></tr>" +
                                                                     "<tr><td> Remarks </td><td>: " + drl["col4"] + " </td></tr>");
                                                                body.AppendLine("<br><br>");
                                                            }
                                                        }
                                                    }
                                                    if (model[0].Chk3 == true)
                                                    {
                                                        body.AppendLine(@"</table><br /><p>" + model[0].Col22 + "</p><p>ThankYou,<br />" + model[0].Col23 + "<br /></p><br />");
                                                    }
                                                    else
                                                    {
                                                        body.AppendLine(@"</table><br /><p>" + model[0].Col22 + "</p><p>ThankYou,<br />" + clientname_mst + "<br /></p><br />");
                                                    }
                                                    //if (fileCollection1 != null)
                                                    //{
                                                    //    sgen.Send_mail_Attch(UserCode, clientid_mst, unitid_mst, mailfrom, emailidcc, Email_id, body.ToString(), txt_sub.Text, "", fileCollection1);
                                                    //}
                                                    //else
                                                    //{
                                                    sgen.Send_mail_SA1(userCode, clientid_mst, unitid_mst, mailfrom, emailidcc, Email_id, body.ToString(), model[0].Col17, "");
                                                    //}
                                                }
                                                //if (fileCollection1 != null)
                                                //{
                                                //    mailer.Add_Mail(model[0].Col29, model[0].Col17, body.ToString(), fileCollection1);
                                                //}
                                                //else
                                                {
                                                    mailer.Add_Mail(model[0].Col29.ToString(), model[0].Col17.ToString(), body.ToString());
                                                }
                                            }
                                        }
                                        //}
                                        mailer.Send_Email_Bulk();
                                    }
                                    #endregion
                                }
                            }
                            catch (Exception err) { }
                        }
                    }
                    if (Result == true)
                    {
                        vch_num = model[0].Col16;
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        tmodel.Col17 = "";
                        model.Add(new Tmodelmain
                        {
                            Col19 = "3",
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col17 = tm.Col17,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                            TList4 = mod4,
                            SelectedItems4 = new string[] { "" },
                            TList5 = mod5,
                            SelectedItems5 = new string[] { "" },
                            TList6 = mod6,
                            SelectedItems6 = new string[] { "" },
                        }
                  );
                    }
                    else if (((model[0].Col20 != "") && (model[0].Col20 != "0") && (model[0].Col20 != null)) && ((model[0].Col40 == "") || (model[0].Col40 == "0") || (model[0].Col40 == null)))
                    {


                        vch_num = model[0].Col16;
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Message Sent Successfully');disableForm();";
                        model = new List<Tmodelmain>();
                        tmodel.Col17 = "";
                        model.Add(new Tmodelmain
                        {
                            Col19 = "3",
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col17 = tm.Col17,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            TList2 = mod2,
                            SelectedItems2 = new string[] { "" },
                            TList3 = mod3,
                            SelectedItems3 = new string[] { "" },
                            TList4 = mod4,
                            SelectedItems4 = new string[] { "" },
                            TList5 = mod5,
                            SelectedItems5 = new string[] { "" },
                            TList6 = mod6,
                            SelectedItems6 = new string[] { "" },
                        }
                  );
                    }
                    else
                    {

                        ViewBag.vresend = "disabled='disabled'";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";



                    }

                }
                else if (command == "Fill Data")
                {
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.resend = "disabled='disabled'";

                    string cond = "";
                    if (model[0].Chk6 == false)
                    {
                        if (model[0].SelectedItems2.FirstOrDefault() == "") { ViewBag.scripCall += "showmsgJS(1, 'Please Select Class', 2);"; return View(model); }
                        if (model[0].SelectedItems3.FirstOrDefault() == "") { ViewBag.scripCall += "showmsgJS(1, 'Please Select Section', 2);"; return View(model); }
                    }
                    if (model[0].SelectedItems2.FirstOrDefault() != "")
                    {
                        cond = " and a.class_applied in ('" + string.Join(",", model[0].SelectedItems2).Replace(",", "','") + "')";
                    }
                    if (model[0].SelectedItems3.FirstOrDefault() != "")
                    {
                        cond = cond + " and a.section in ('" + string.Join(",", model[0].SelectedItems3).Replace(",", "','") + "')";
                    }
                    //string cast_id = sgen.GetAllSelect(ddl_caste);
                    if (model[0].SelectedItems4.FirstOrDefault() != "")
                    {
                        cond = cond + " and b.ucaste  in ('" + string.Join(",", model[0].SelectedItems4).Replace(",", "','") + "')";
                    }
                    ////string religion_id = string.Join(",", model[0].SelectedItems5);
                    if (model[0].SelectedItems5.FirstOrDefault() != "")
                    {
                        cond = cond + " and b.religion  in ('" + string.Join(",", model[0].SelectedItems5).Replace(",", "','") + "')";
                    }
                    if ((model[0].SelectedItems2.FirstOrDefault() != "") && ((model[0].SelectedItems3.FirstOrDefault() != ""))) ;
                    {

                        // reena why nvl wist case ok
                        mq1 = "select (c.class||'-'||d.master_name) as classsection,  a.reg_no," +
                            "(b.first_name||' '||replace(b.middle_name,'0','')||' '||replace(b.last_name,'0','')) as Student_Name," +
                            "(b.f_firstname||' '||replace(b.f_middlename,'0','')||' '||replace(b.f_lastname,'0','')) as f_firstname," +
                            "(b.m_firstname||' '||replace(b.m_middlename,'0','')||' '||replace(b.m_lastname,'0','')) as m_firstname," +
                            "(CASE WHEN b.default_emailid='F' THEN b.f_email WHEN b.default_emailid='M' THEN b.m_email else b.g_email END) as Email_Id ," +
                            "(CASE WHEN b.default_Ph='F' THEN b.f_con_number WHEN b.default_Ph='M' THEN b.m_con_number else b.g_con_number END) as PhoneNo,a.roll_number,a.class_applied," +
                            "a.section from student_detail a,user_details b ,add_class c ,master_setting d where b.status = 'active' and" +
                            " a.reg_no=b.regnumber and a.client_unit_id='" + unitid_mst + "'" +
                            " and a.type='STD' and a.type=b.type and a.academic_year_id='" + Ac_Year_id + "' and   a.section IS NOT Null" +
                            " and a.Roll_Number Is NOT Null and a.class_applied=c.add_class_id and c.type='EAC' and " +
                            "a.client_unit_id=c.client_unit_id and a.section=d.master_id and d.type='ECS' and a.vch_num=b.vch_num and " +
                            "find_in_set(a.client_unit_id,d.client_unit_id)=1  " + cond + "";

                        //mq1 = "select (c.class||'-'||d.master_name) as classsection,  a.reg_no,(b.first_name||' '||" +
                        //    "replace(b.middle_name,'0','')||' '||replace(b.last_name,'0','')) as Student_Name,(b.f_firstname||' '||" +
                        //    "replace(b.f_middlename,'0','')||' '||replace(b.f_lastname,'0','')) as f_firstname,(b.m_firstname||' '||" +
                        //    "replace(b.m_middlename,'0','')||' '||replace(b.m_lastname,'0','')) as m_firstname,(CASE WHEN b.default_emailid='F' THEN b.f_email WHEN b.default_emailid='M' " +
                        //    "THEN b.m_email else b.g_email else '-' END) as Email_Id ,(CASE WHEN b.default_Ph='F' THEN b.f_con_number WHEN b.default_Ph='M'" +
                        //    " THEN b.m_con_number else b.g_con_number else '-' END) as PhoneNo,a.roll_number,a.class_applied," +
                        //    "a.section from student_detail a,user_details b ,add_class c ,master_setting d where b.status = 'active' and" +
                        //    " a.reg_no=b.regnumber and a.client_unit_id='" + unitid_mst + "'" +
                        //    " and a.type='STD' and a.type=b.type and a.academic_year_id='" + Ac_Year_id + "' and   a.section IS NOT Null" +
                        //    " and a.RollNo Is NOT Null and a.class_applied=c.add_class_id and c.type='EAC' and " +
                        //    "a.client_unit_id=c.client_unit_id and a.section=d.master_id and d.type='ECS' and a.vch_num=b.vch_num and " +
                        //    "find_in_set(a.client_unit_id,d.client_unit_id)=1  " + cond + "";
                        DataTable dt = sgen.getdata(userCode, mq1);
                        model = new List<Tmodelmain>();
                        if (dt.Rows.Count > 0)
                        {
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                Tmodelmain tmm = new Tmodelmain();
                                tmm.Col24 = dt.Rows[i]["classsection"].ToString();
                                tmm.Col25 = dt.Rows[i]["roll_number"].ToString();
                                tmm.Col26 = dt.Rows[i]["Student_Name"].ToString();
                                tmm.Col27 = dt.Rows[i]["f_firstname"].ToString();
                                tmm.Col28 = dt.Rows[i]["m_firstname"].ToString();
                                tmm.Col29 = dt.Rows[i]["Email_Id"].ToString();
                                tmm.Col30 = dt.Rows[i]["PhoneNo"].ToString();
                                tmm.Col40 = dt.Rows[i]["reg_no"].ToString();
                                tmm.Col41 = dt.Rows[i]["class_applied"].ToString();
                                tmm.Col42 = dt.Rows[i]["Section"].ToString();
                                tmm.Col14 = tm.Col14;
                                tmm.Col15 = tm.Col15;
                                tmm.Col121 = tm.Col121;
                                tmm.Col122 = tm.Col122;
                                tmm.Col9 = tm.Col9;
                                tmm.Col10 = tm.Col10;
                                tmm.Col13 = tm.Col13;
                                tmm.Col12 = tm.Col12;
                                tmm.Col11 = tm.Col11;
                                tmm.Col17 = tm.Col17;
                                tmm.Col18 = tm.Col18;
                                tmm.Col19 = tm.Col19;
                                tmm.Col20 = tm.Col20;
                                tmm.Col21 = tm.Col21;
                                tmm.Col22 = tm.Col22;
                                tmm.Col23 = tm.Col23;
                                tmm.Col43 = tm.Col43;
                                tmm.Col44 = tm.Col44;
                                tmm.Chk1 = tm.Chk1;
                                tmm.Chk2 = tm.Chk2;
                                tmm.Chk3 = tm.Chk3;
                                tmm.Chk4 = tm.Chk4;
                                tmm.Chk5 = tm.Chk5;
                                tmm.Chk6 = tm.Chk6;
                                tmm.TList1 = tm.TList1;
                                tmm.TList2 = tm.TList2;
                                tmm.TList3 = tm.TList3;
                                tmm.TList4 = tm.TList4;
                                tmm.TList5 = tm.TList5;
                                tmm.TList6 = tm.TList6;
                                tmm.SelectedItems1 = tm.SelectedItems1;
                                tmm.SelectedItems2 = tm.SelectedItems2;
                                tmm.SelectedItems3 = tm.SelectedItems3;
                                tmm.SelectedItems4 = tm.SelectedItems4;
                                tmm.SelectedItems5 = tm.SelectedItems5;
                                tmm.SelectedItems6 = tm.SelectedItems6;
                                model.Add(tmm);
                            }
                        }
                        else
                        {
                            model = new List<Tmodelmain>();
                            tm.Col16 = "";
                            tm.Col17 = "";
                            tm.Col18 = "";
                            tm.Col19 = "";
                            model.Add(tm);
                        }
                    }

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region prioritywise_allocat_teacher
        public ActionResult t_alloc()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col1 = clientid_mst;
            model[0].Col2 = unitid_mst;
            model[0].Col9 = "PRIORITY WISE TEACHER ALLOCATION";
            //model[0].Col10 = "teacher_subject";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col12 = "-";
            return View(model);
        }
        [HttpPost]
        public ActionResult t_alloc(List<Tmodelmain> model, string command, string hfrow)
        {
            try
            {
                FillMst(model[0].Col15);
                if (command == "New")
                {
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Show")
                {
                    string FromDt = "";
                    string ff = "select * from (select p ,d from (select max(period) as p, day, valid_from, valid_to, vch_num, vch_date  from time_table " +
                               " where   client_unit_id='" + unitid_mst + "' group by day, valid_from, valid_to, vch_num, vch_date) o  " +
                               "inner join (select to_char((to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1), 'Dy')" +
                                 " as Day, to_date('" + Ac_From_Date + "', '" + sgen.Getsqldatetimeformat() + "') + rownum - 1 as d, rownum   FROM XMLTABLE('1 to 365') ) b" +
                               " on trim(o.Day) = trim(b.day) and to_char(d,'yyyymmdd') between to_char(o.Valid_from,'yyyymmdd') and to_char(o.valid_to,'yyyymmdd') ) k" +
                               " where to_char(d,'yyyy-mm-dd')='" + FromDt.Trim() + "'";
                    int kk = sgen.Make_int(sgen.seekval(userCode, ff, "p"));
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    if (model[0].Col20 == "Y")
                    {
                        status = "Y";
                        model[0].Col12 = "OPR";
                    }
                    else
                    {
                    }
                    DataTable dtstr = new DataTable();
                    //dtstr = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        mq1 = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        isedit = true;
                        vch_num = tmodel.Col16.Trim();
                        id = tmodel.Col21.Trim();
                    }
                    else
                    {
                        isedit = false;
                        string found = "";
                        found = sgen.getstring(userCode, "select class from " + model[0].Col10 + " where class='" + model[0].Col23 + "' " + model[0].Col11 + " and (type='EAC' or type ='DDEAC' ) and type_desc='" + Master_Type + "'  ");
                        if (found != "")
                        {
                            ViewBag.scripCall = "showmsgJS(1, 'Data Already Exists', 2);";
                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            return View(model);
                        }
                        mq = "select max(to_number(master_id)) as auto_genid from " + model[0].Col10 + " where  (type='OPR' or type ='DDOPR' ) " + model[0].Col11 + "";
                        id = sgen.genNo(userCode, mq, 3, "auto_genid");
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where (type='OPR' or type ='DDOPR' ) " + model[0].Col11 + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                    }
                    DataTable dataTable = sgen.getdata(userCode, "select  * from teacher_subject  where  1=2");
                    string[] class_teacher = string.Join(",", model[0].SelectedItems2).Split(',');
                    for (Int32 i = 0; i < class_teacher.Length; i++)
                    {
                        for (int x = 0; x < model.Count; x++)
                        {
                            string[] class_id = string.Join(",", model[x].SelectedItems3).Split(',');
                            string[] subject_id = string.Join(",", model[x].SelectedItems4).Split(',');
                            for (Int32 y = 0; y < class_id.Length; y++)
                            {
                                for (Int32 z = 0; z < subject_id.Length; z++)
                                {
                                    string class_sec = class_teacher[i];
                                    string[] class_section = class_sec.Split('-');
                                    DataRow dr = dataTable.NewRow();
                                    dr["rec_id"] = "0";
                                    dr["vch_num"] = vch_num;
                                    dr["vch_date"] = currdate;
                                    dr["type"] = "ETS";
                                    dr["type_desc"] = "Education Teacher Subject";
                                    dr["client_id"] = clientid_mst;
                                    dr["client_unit_id"] = unitid_mst;
                                    dr["Class_Teacher_Id"] = class_section[0];
                                    dr["Section_Teacher_Id"] = class_section[1];
                                    dr["Teacher_Id"] = model[0].SelectedItems1.FirstOrDefault();
                                    dr["Class_Id"] = class_id[y];
                                    dr["Subject_Id"] = subject_id[z];
                                    dr["Isclassteacher"] = model[0].Col17;
                                    dataTable.Rows.Add(dr);
                                }
                            }
                        }
                    }
                    bool Result = sgen.Update_data(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    if (Result == true)
                    {
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.scripCall = "showmsgJS(1, 'Data Saved Successfully', 1);disableForm();";
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tmodel.Col10,
                            Col14 = tmodel.Col14,
                            Col11 = tmodel.Col11,
                            Col12 = tmodel.Col12,
                            Col13 = "Save",
                            Col9 = tmodel.Col9,
                        });
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                END:;

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region datesheet
        public ActionResult datesheet()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            model[0].Col9 = "DATE SHEET";
            model[0].Col10 = "enx_tab";
            model[0].Col12 = "EDS";
            type_desc = "Exam Date Sheet";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            model[0].TList3 = mod3;
            model[0].SelectedItems3 = new string[] { "" };
            model[0].TList4 = mod4;
            model[0].SelectedItems4 = new string[] { "" };
            model[0].TList5 = mod5;
            model[0].SelectedItems5 = new string[] { "" };
            return View(model);
        }
        public List<Tmodelmain> new_datesheet(List<Tmodelmain> model)
        {

            model = getnew(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            DataTable dt = new DataTable();
            #region Class 1
            mq2 = "select add_class_id,class,cast(sequence as int) from add_class where  client_unit_id='" + unitid_mst + "' and type='EAC' and " +
                   "(status='Y' or status='') and add_class_id in (select DISTINCT class_applied from student_detail  WHERE type='STD'  and" +
                   " client_unit_id='" + unitid_mst + "')  order by 3";
            dt = sgen.getdata(userCode, mq2);
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr["class"].ToString(), Value = dr["add_class_id"].ToString() });
                }

            }
            TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1;
            #endregion
            #region Section 2
            //mq1 = "SELECT  master_id,master_name FROM master_setting where type='ECS' and  client_id='"+clientid_mst+"' and client_unit_id='"+unitid_mst+"' and (status='Y' or status='') order by cast(master_id as int)";
            //dt = sgen.getdata(userCode, "SELECT  master_id, master_name FROM master_setting where type = 'ECS' and client_unit_id = '" + unitid_mst + "' and(status = 'Y' or status = '') order by cast(master_id as int)");
            //if (dt.Rows.Count > 0)
            //{
            //    foreach (DataRow dr in dt.Rows)
            //    {
            //        mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
            //    }

            //}
            mod2 = sgen.BindSection(userCode, unitid_mst);
            TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2;
            #endregion
            #region Frequency 3
            dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='EFQ' and client_unit_id='0'");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }

            }
            TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3;
            #endregion
            #region ExamType 4
            dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='EEM'  and find_in_set(client_unit_id , '" + unitid_mst + "')=1");
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod4.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                }

            }
            TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4;
            #endregion
            #region Subtype 5
            mq1 = "select master_id,master_name from master_setting where master_name != 'Break' and master_name!= 'Assembly' and type = 'ECL' and find_in_set(client_unit_id , '" + unitid_mst + "')=1";
            DataTable dt1 = sgen.getdata(userCode, mq1);
            TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = sgen.dt_to_selectlist(dt1);
            //TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5;
            #endregion
            model[0].Col16 = vch_num;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            model[0].SelectedItems3 = new string[] { "" };
            model[0].SelectedItems4 = new string[] { "" };
            model[0].SelectedItems5 = new string[] { "" };
            return model;
        }
        [HttpPost]
        public ActionResult datesheet(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                List<SelectListItem> mod3 = new List<SelectListItem>();
                List<SelectListItem> mod4 = new List<SelectListItem>();
                List<SelectListItem> mod5 = new List<SelectListItem>();
                TempData[MyGuid + "_Tlist1"] = model[0].TList1 = mod1 = (List<SelectListItem>)TempData[MyGuid + "_Tlist1"];
                TempData[MyGuid + "_Tlist2"] = model[0].TList2 = mod2 = (List<SelectListItem>)TempData[MyGuid + "_Tlist2"];
                TempData[MyGuid + "_Tlist3"] = model[0].TList3 = mod3 = (List<SelectListItem>)TempData[MyGuid + "_Tlist3"];
                TempData[MyGuid + "_Tlist4"] = model[0].TList4 = mod4 = (List<SelectListItem>)TempData[MyGuid + "_Tlist4"];
                TempData[MyGuid + "_Tlist5"] = model[0].TList5 = mod5 = (List<SelectListItem>)TempData[MyGuid + "_Tlist5"];
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (tm.SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
                if (tm.SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
                if (tm.SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
                foreach (var tm2 in model)
                {
                    tm2.TList5 = mod5;
                }
                if (command == "New")
                {
                    model = new_datesheet(model);
                    //try
                    //{
                    //    model = getnew(model);
                    //    mod1 = new List<SelectListItem>();
                    //    mod2 = new List<SelectListItem>();
                    //    mod3 = new List<SelectListItem>();
                    //    mod4 = new List<SelectListItem>();
                    //    mod5 = new List<SelectListItem>();
                    //    DataTable dt = new DataTable();
                    //    #region Class 1
                    //    mq2 = "select add_class_id,class,cast(sequence as int) from add_class where client_id	='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and type='EAC' and " +
                    //           "(status='Y' or status='') and add_class_id in (select DISTINCT class_applied from student_detail  WHERE type='STD' and client_id ='" + clientid_mst + "' and" +
                    //           " client_unit_id='" + unitid_mst + "')  order by 3";
                    //    dt = sgen.getdata(userCode, mq2);
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow dr in dt.Rows)
                    //        {
                    //            mod1.Add(new SelectListItem { Text = dr["class"].ToString(), Value = dr["add_class_id"].ToString() });
                    //        }
                    //        TempData[MyGuid + "_Tlist1"] = mod1;
                    //    }
                    //    #endregion
                    //    #region Section 2
                    //    //mq1 = "SELECT  master_id,master_name FROM master_setting where type='ECS' and  client_id='"+clientid_mst+"' and client_unit_id='"+unitid_mst+"' and (status='Y' or status='') order by cast(master_id as int)";
                    //    dt = sgen.getdata(userCode, "SELECT  master_id, master_name FROM master_setting where type = 'ECS' and  client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "' and(status = 'Y' or status = '') order by cast(master_id as int)");
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow dr in dt.Rows)
                    //        {
                    //            mod2.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                    //        }
                    //        TempData[MyGuid + "_Tlist2"] = mod2;
                    //    }
                    //    #endregion
                    //    #region Frequency 3
                    //    dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='EFQ' and client_id='0' and client_unit_id='0'");
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow dr in dt.Rows)
                    //        {
                    //            mod3.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                    //        }
                    //        TempData[MyGuid + "_Tlist3"] = mod3;
                    //    }
                    //    #endregion
                    //    #region ExamType 4
                    //    dt = sgen.getdata(userCode, "select master_id,master_name from master_setting where type='EEM' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow dr in dt.Rows)
                    //        {
                    //            mod4.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                    //        }
                    //        TempData[MyGuid + "_Tlist4"] = mod4;
                    //    }
                    //    #endregion
                    //    #region Subtype 5
                    //    mq1 = "select master_id,master_name from master_setting where master_name != 'Break' and master_name!= 'Assembly' and type = 'ECL' and " +
                    //           "client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                    //    DataTable dt1 = sgen.getdata(userCode, mq1);
                    //    mod5 = sgen.dt_to_selectlist(dt1);
                    //    TempData[MyGuid + "_Tlist5"] = mod5;
                    //    #endregion
                    //    model[0].Col16 = vch_num;
                    //    model[0].TList1 = mod1;
                    //    model[0].SelectedItems1 = new string[] { "" };
                    //    model[0].TList2 = mod2;
                    //    model[0].SelectedItems2 = new string[] { "" };
                    //    model[0].TList3 = mod3;
                    //    model[0].SelectedItems3 = new string[] { "" };
                    //    model[0].TList4 = mod4;
                    //    model[0].SelectedItems4 = new string[] { "" };
                    //    model[0].TList5 = mod5;
                    //    model[0].SelectedItems5 = new string[] { "" };
                    //    model[0].Col13 = "Save";
                    //}
                    //catch (Exception ex) { }
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {

                    var tmodel = model.FirstOrDefault();
                    string currdate = sgen.server_datetime(userCode);
                    string punch = "", cond = "";
                    string inactive_date = "";
                    Int32 count = 0;
                    type = model[0].Col12;
                    //currdate = sgen.Savedate(currdate, true);//remove
                    DataTable dtstr = new DataTable();
                    dtstr = sgen.getdata(userCode, "select  * from " + model[0].Col10 + " where 1=2");
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        cond = " and vch_num<>'" + tmodel.Col16.Trim() + "'";
                        //master_id = tmodel.Col20.Trim();
                        vch_num = model[0].Col16;
                    }
                    else
                    {
                        isedit = false;
                        vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where  client_unit_id='" + unitid_mst + "' and type='" + model[0].Col12 + "'", 6, "max");
                    }
                    #region Validation Logic
                    if (model[0].SelectedItems1.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Select Class',2)"; return View(model);
                    }
                    if (model[0].SelectedItems2.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Select Section',2)"; return View(model);
                    }
                    if (model[0].SelectedItems4.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Select Exam Type',2)"; return View(model);
                    }
                    if (model[0].SelectedItems3.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Select Frequency',2)"; return View(model);
                    }
                    if (model[0].Col17 == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Enter Exam Start Time',2)"; return View(model);
                    }
                    if (model[0].Col18 == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Enter Exam End Time',2)"; return View(model);
                    }
                    #endregion
                    string class_ids = string.Join(",", model[0].SelectedItems1);
                    string section_ids = string.Join(",", model[0].SelectedItems2);
                    string[] ddlclass = string.Join(",", model[0].SelectedItems1).Split(',');
                    string[] Itemsec = string.Join(",", model[0].SelectedItems2).Split(',');
                    foreach (string Itemclas in ddlclass)
                    {
                        foreach (string itemsec in Itemsec)
                        {
                            for (Int32 i = 0; i < model.Count; i++)
                            {
                                if (model[i].Chk1 == true)
                                {
                                    if (model[i].SelectedItems5.FirstOrDefault() == "") { count++; }
                                    if (model[i].Col21 == "") { count++; }
                                    if ((model[i].Col24 == "") || (model[i].Col24 == "0")) { count++; }
                                    if ((model[i].Col25 == "") || (model[i].Col24 == "0")) { count++; }
                                    if ((model[i].Col22 == "") || (model[i].Col22 == "0")) { count++; }
                                    if ((model[i].Col23 == "") || (model[i].Col23 == "0")) { count++; }
                                    if (count > 0)
                                    {
                                        sgen.showmsg(1, " Date Sheet Information Is InComplete  In Row No " + Convert.ToInt32(i + 1) + ", Please Complete It", 2);
                                        return View(model);
                                    }
                                    string lbl_subclasssec = model[i].Col27;
                                    string subclasssec = lbl_subclasssec;
                                    string xsubclassec = model[i].Col28 + Itemclas + itemsec;
                                    bool found = false;
                                    string[] subclasssecarr = subclasssec.Split(',');
                                    if (subclasssecarr.Length > 0)
                                    {
                                        for (int a = 0; a < subclasssecarr.Length; a++)
                                        {
                                            if (xsubclassec == subclasssecarr[a])
                                            {
                                                found = true;
                                            }
                                        }
                                    }
                                    if (found)
                                    {
                                        DataRow dr = dtstr.NewRow();
                                        dr["rec_id"] = "0";
                                        dr["vch_num"] = vch_num;
                                        dr["vch_date"] = currdate;
                                        dr["type"] = type;
                                        dr["client_id"] = clientid_mst;
                                        dr["client_unit_id"] = unitid_mst;
                                        dr["col5"] = DateTime.ParseExact(model[0].Col17.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                        dr["col6"] = DateTime.ParseExact(model[0].Col18.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                        dr["col7"] = model[0].SelectedItems3.FirstOrDefault();
                                        dr["col8"] = model[0].SelectedItems4.FirstOrDefault();
                                        dr["col1"] = model[i].Col28;
                                        dr["col2"] = model[i].SelectedItems5.FirstOrDefault();
                                        //  dr["date1"] = sgen.Savedate(model[i].Col21, false);
                                        dr["date1"] = sgen.Make_date_S(model[i].Col21);
                                        dr["col3"] = model[i].Col24.Trim();
                                        dr["col4"] = model[i].Col25.Trim();
                                        dr["col9"] = DateTime.ParseExact(model[i].Col22.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                        dr["col10"] = DateTime.ParseExact(model[i].Col23.Trim(), sgen.Gettimeformat(), CultureInfo.InvariantCulture).ToString("H:mm:ss");
                                        dr["r_no"] = Itemclas;
                                        dr["ref_code"] = itemsec;
                                        dr["col11"] = Ac_Year_id;//academic_year_id
                                        dr = getsave(currdate, dr, model);
                                        dtstr.Rows.Add(dr);
                                    }
                                }
                            }
                        }
                    }
                    res = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    if (res == true)
                    {
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_datesheet(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col16 = tm.Col16,
                            Col17 = "",
                            Col1 = "",
                            Col18 = "",
                            Col9 = tm.Col9,
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = tm.Col13,
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            TList1 = mod1,
                            TList2 = mod2,
                            TList3 = mod3,
                            TList4 = mod4,
                            TList5 = mod5,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                            SelectedItems3 = new string[] { "" },
                            SelectedItems4 = new string[] { "" },
                            SelectedItems5 = new string[] { "" },
                        });
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }

                }
                else if (command == "Fill Data")
                {

                    if (model[0].SelectedItems1.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Select class',2)"; return View(model);
                    }
                    if (model[0].SelectedItems2.FirstOrDefault() == "")
                    {
                        ViewBag.scripCall = "showmsgJS(1,'Please Select Section',2)"; return View(model);
                    }
                    string class_ids = string.Join(",", model[0].SelectedItems1);
                    string section_ids = string.Join(",", model[0].SelectedItems2);
                    mq = "select 1  as Sub_status,  a.subject_id,b.master_name as Subject ,'' as date1,'' as col3,'' as col4,'' as col2,'' as col9,'' as col10," +
                        "GROUP_CONCAT(distinct cl.class||' '||sc.master_name) as Class_section, GROUP_CONCAT(distinct a.Subject_Id|| a.class_id||a.Section_Id)" +
                        " as subclasssec from student_result a inner join master_setting b on a.Subject_Id=b.master_id  inner join add_class cl" +
                        " on a.Class_Id=cl.add_class_id and cl.type='EAC'  and a.client_unit_id=cl.client_unit_id inner join " +
                        "master_setting sc on a.Section_Id=sc.master_id and sc.type='ECS'  and find_in_set(a.client_unit_id,sc.client_unit_id)=1 " +
                        "  where a.type='class_subject'  and a.client_unit_id='" + unitid_mst + "' and b.type='ESW'" +
                        "  and find_in_set(a.client_unit_id,b.client_unit_id)=1 and a.Class_Id in (" + class_ids + ") and" +
                        " a.section_id in (" + section_ids + ") and a.academic_year_id='" + Ac_Year_id + "' group by   a.subject_id,b.master_name";
                    #region DD5
                    mq1 = "select master_id,master_name from master_setting where master_name != 'Break' and master_name!= 'Assembly' and type = 'ECL' and " +
                    " find_in_set(client_unit_id ,'" + unitid_mst + "')=1";
                    DataTable dt1 = sgen.getdata(userCode, mq1);
                    TempData[MyGuid + "_Tlist5"] = mod5 = sgen.dt_to_selectlist(dt1);
                    //TempData[MyGuid + "_Tlist5"] = mod5;
                    #endregion
                    DataTable dt = sgen.getdata(userCode, mq);
                    model = new List<Tmodelmain>();
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col19 = dt.Rows[i]["Subject"].ToString();
                            tmm.Col20 = dt.Rows[i]["Class_section"].ToString();
                            tmm.Col26 = dt.Rows[i]["col2"].ToString();
                            tmm.Col27 = dt.Rows[i]["subclasssec"].ToString();
                            tmm.Col28 = dt.Rows[i]["subject_id"].ToString();
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col13 = tm.Col13;
                            tmm.Col100 = tm.Col100;
                            tmm.Col121 = tm.Col121;
                            tmm.Col122 = tm.Col122;
                            tmm.Col123 = tm.Col123;
                            tmm.Col12 = tm.Col12;
                            tmm.Col11 = tm.Col11;
                            tmm.Col17 = tm.Col17;
                            tmm.Col18 = tm.Col18;
                            tmm.Col16 = tm.Col16;
                            tmm.Chk1 = true;
                            tmm.TList1 = tm.TList1;
                            tmm.TList2 = tm.TList2;
                            tmm.TList3 = tm.TList3;
                            tmm.TList4 = tm.TList4;
                            tmm.TList5 = tm.TList5;
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            tmm.SelectedItems2 = tm.SelectedItems2;
                            tmm.SelectedItems3 = tm.SelectedItems3;
                            tmm.SelectedItems4 = tm.SelectedItems4;
                            tmm.SelectedItems5 = tm.SelectedItems5;
                            model.Add(tmm);
                        }
                    }
                    else
                    {
                        model = new List<Tmodelmain>();
                        tm.Col16 = "";
                        tm.Col17 = "";
                        tm.Col18 = "";
                        tm.Col19 = "";
                        model.Add(tm);
                    }
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region timetable
        public ActionResult timetable()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            var tm = model.FirstOrDefault();
            Tmodelmain tm1 = new Tmodelmain();
            model = new List<Tmodelmain>();
            tm1.Col13 = tm.Col13;
            tm1.Col14 = tm.Col14;
            tm1.Col15 = tm.Col15;
            tm1.Col100 = tm.Col100;
            tm1.Col9 = "Time table";
            tm1.Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            //model[0].LTM1 = new List<Tmodelmain>();
            tm1.LTM1 = new List<Tmodelmain>();
            Tmodelmain tmltm1 = new Tmodelmain();
            tmltm1.Col1 = "1";
            tm1.LTM1.Add(tmltm1);
            tm1.LTM1[0].TList1 = mod1;
            tm1.LTM1[0].SelectedItems1 = new string[] { "" };
            TempData[MyGuid + "_TList1"] = mod1;
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult timetable(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                DataTable dt = new DataTable();
                Tmodelmain tmltm1 = new Tmodelmain();
                TempData[MyGuid + "_TList1"] = tmltm1.TList1 = mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                //tmltm1.TList1 = mod1;
                //TempData[MyGuid + "_TList1"] = mod1;
                //foreach (var mod in model)
                //{
                //    foreach (var modl in mod.LTM1)
                //    {
                //        modl.TList1 = mod1;
                //    }
                //}
                if (tmltm1.SelectedItems1 == null) tmltm1.SelectedItems1 = new string[] { "" };
                if (command == "New")
                {

                    sgen.SetSession(MyGuid, "EDMODE", "N");
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                    ViewBag.scripCall = "enableForm();";
                    mod1 = new List<SelectListItem>();
                    dt = sgen.getdata(userCode, "select  vch_num rec_id, ((first_name)||' '|| replace(middle_name,'0','')||' '||replace(last_name,'0','')) " +
                        "as Teacher_Name from user_details where type='CPR' and client_unit_id='" + unitid_mst + "'");
                    if (dt.Rows.Count > 0)
                    {
                        mod1 = sgen.dt_to_selectlist(dt);
                    }
                    //model[0].TList1 = mod1;
                    TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                    DataTable dtf = new DataTable();
                    mq = "select t.Day, (t.class_id || t.section_id) as cs_secid,(c.class||'-'||sc.master_name) as class_sec" +
                        ",t.period,t.subject_id,(sb.master_name ||'-' ||subject_id )as sub_name from time_table t inner join master_setting sc on" +
                        " t.section_id = sc.master_id and sc.type = 'ECS' and find_in_set(sc.client_unit_id,'" + unitid_mst + "') = 1 inner join " +
                        "master_setting sb  on t.subject_id = sb.master_id and sb.type = 'ESW' and find_in_set(sb.client_unit_id,'" + unitid_mst + "') = 1" +
                        " inner join add_class c  on c.add_class_id = t.class_id and t.client_unit_id = c.client_unit_id  " +
                        " where t.client_unit_id = '" + unitid_mst + "'order by t.period, t.class_id || t.section_id  ";
                    DataTable dt1 = sgen.getdata(userCode, mq);
                    mq = "select  t.teacher_id , (  b.first_name||' '||REPLACE( b.middle_name,'0','')||' '||REPLACE( b.last_name,'0',''))" +
                        " as Teacher_Name,t.subject_id,sb.master_name as sub_name, t.class_id || t.section_id class_secid,(c.class||'-'||sc.master_name)" +
                        " as class_sec,t.priority from teacher_subject t inner join master_setting sc on t.section_id=sc.master_id and sc.type= 'ECS' and " +
                        "find_in_set(sc.client_unit_id,'" + unitid_mst + "') =1 inner join master_setting sb  on t.subject_id = sb.master_id and sb.type= 'ESW'" +
                        " and find_in_set(sb.client_unit_id,'" + unitid_mst + "') =1 inner join add_class c  on c.add_class_id=t.class_id and" +
                        " t.client_unit_id= c.client_unit_id inner join user_details b on t.teacher_id= b.vch_num where t.client_unit_id= '" + unitid_mst + "' ";
                    DataTable dt2 = sgen.getdata(userCode, mq);
                    int maxpr = Convert.ToInt32(dt2.Compute("max([priority])", string.Empty));
                    if (dt1.Rows.Count > 0)
                    {
                        Pivot pvt = new Pivot(dt1, MyGuid);
                        dtf = pvt.PivotData("sub_name", AggregateFunction.Max, new string[] { "day", "cs_secid", "class_sec" }, new string[] { "Period" });
                        for (Int32 i = 0; i < maxpr; i++)
                        {
                            string pr = (i + 1).ToString();
                            if (dtf.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dtf.Rows)
                                {
                                    string class_sec = dr["cs_secid"].ToString();
                                    foreach (DataColumn dc in dtf.Columns)
                                    {
                                        if (dc.Ordinal > 2)
                                        {
                                            string cellvalue = dr[dc].ToString();
                                            if (cellvalue != "")
                                            {
                                                string[] sub = cellvalue.Split('-');
                                                string sub_id = sub[1].ToString();
                                                //mq = "select a.teacher_id,  ( replace( b.first_name,'0','')||' '||REPLACE( b.middle_name,'0','')||' '" +
                                                //    "||REPLACE( b.last_name,'0','')) as teacher_name  from teacher_subject a inner join user_details b " +
                                                //    "on a.teacher_id=b.rec_id and b.type='CPR'   where a.type='ETS' and a.client_unit_id='" + unitid_mst + "' " +
                                                //    "and a.class_id||a.section_id='" + class_sec + "' and a.subject_id = '" + sub_id + "' and a.priority = 1 ";
                                                // DataTable dtn = sgen.getdata(UserCode, mq);
                                                DataTable dtn = new DataTable();
                                                try
                                                {
                                                    dtn = dt2.AsEnumerable().Where(w => (string)w["class_secid"] == class_sec && (string)w["subject_id"] == sub_id && (string)w["priority"] == pr)
                                                                                      .Select(s => s).CopyToDataTable();
                                                }
                                                catch (Exception ex) { };
                                                if (!cellvalue.Contains("/"))
                                                {
                                                    if (dtn.Rows.Count > 0)
                                                    {
                                                        dr[dc] = cellvalue + "/" + dtn.Rows[0]["teacher_name"].ToString() + "-" + dtn.Rows[0]["teacher_id"].ToString();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    model = new List<Tmodelmain>();
                    foreach (DataRow drk in dtf.Rows)
                    {
                        Tmodelmain tmk = new Tmodelmain();
                        tmk.Col21 = drk["class_sec"].ToString();
                        tmk.Col22 = drk["cs_secid"].ToString();
                        List<Tmodelmain> mylt1 = new List<Tmodelmain>();
                        foreach (DataColumn dck in dtf.Columns)
                        {
                            Tmodelmain tmb = new Tmodelmain();
                            string cell = drk[dck].ToString();
                            tmk.Col10 = dck.ColumnName.ToString();
                            if (dck.Ordinal > 2)
                            {
                                if (cell != "")
                                {
                                    string[] sub_teac = cell.Split('/');
                                    string[] sub = sub_teac[0].Split('-');
                                    string[] teac = sub_teac[1].Split('-');
                                    tmb.Col11 = sub[0];
                                    tmb.Col12 = sub[1];
                                    tmb.Col13 = teac[0];
                                    tmb.Col14 = teac[1];
                                    tmb.TList1 = mod1;
                                    tmb.SelectedItems1 = new string[] { teac[1] };
                                }
                            }
                            //tmb.SelectedItems1 = new string[] { cell.Split(',')[5] };
                            mylt1.Add(tmb);
                        }
                        tmk.LTM1 = mylt1;
                        model.Add(tmk);
                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    if (sgen.GetSession(MyGuid, "btnval") != null) btnval = sgen.GetSession(MyGuid, "btnval").ToString();
                    model = CallbackFun(btnval, "N", "feehead", "Education", model);
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                }
                else if (command == "Save" || command == "Update")
                {
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region std_confirmation
        public ActionResult std_confirm()
        {
            FillMst();
            string IsRegFeesBeforeAdm;
            DataTable dt = new DataTable();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "REGISTRATION CONFIRMED";
            //ViewBag.vsave = "";
            ViewBag.scripCall = "enableForm();";
            model[0].Col10 = "user_details";
            model[0].Col25 = "student_applicant_details";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "STD";
            string mq0 = "";
            try
            {
                string[] config = sgen.get_config(userCode, "000010", clientid_mst, unitid_mst, "CTL");
                IsRegFeesBeforeAdm = config[0].ToString();
            }
            catch { IsRegFeesBeforeAdm = "N"; }
            string eff_dt = sgen.server_datetime_local(userCode);
            if (IsRegFeesBeforeAdm == "Y")
            {
                //mq0 = "SELECT (std.client_id||std.client_unit_id||std.vch_num||to_char(std.vch_date, 'yyyymmdd')|| std.type) as fstr,std.sa_id,std.first_name as studentname,std.f_firstname as fname," +
                //"std.first_name|| ' '|| replace(std.middle_name, '0', '')|| ' '|| replace(std.last_name, '0', '')AS first_name," +
                //"std.f_firstname|| ' '|| replace(std.f_middlename, '0', '')|| ' '|| replace(std.f_lastname, '0', '') AS f_firstname," +
                //"std.m_firstname|| ' '|| replace(std.m_middlename, '0', '')|| ' '|| replace(std.m_lastname, '0', '') AS m_firstname," +
                //"std.Istransfer,std.user_id,cl.class,std.class_applied," +
                //"to_char(std.dob,'" + sgen.Getsqldateformat() + "') as dob," +
                //"to_char(std.f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                //"std.vch_num,std.havetransport,std.pick_point,std.drop_point,'" + eff_dt + "' as eff_dt " +
                //"from student_applicant_details std, add_class cl where std.student_status='temporary' and cl.add_class_id= std.class_applied and std.usession= '" + Ac_Year_id.Trim() + "' and std.type= 'STD' " +
                //" and std.client_unit_id= '" + unitid_mst + "' and cl.type= 'EAC' and std.client_id= cl.client_id and std.client_unit_id= cl.client_unit_id " +
                //"and sa_id in (SELECT Student_ID FROM  student_receipt_detail where Fee_status='Approved' and trim(regno)='0' and trim(Family_Grp_Id)='0' and Type = 'ERD' " +
                //"and  client_unit_id='" + unitid_mst + "')";

                mq0 = "SELECT (std.client_id||std.client_unit_id||std.vch_num||to_char(std.vch_date, 'yyyymmdd')|| std.type) as fstr," +
                    "std.sa_id," +
                "std.first_name|| ' '|| replace(std.middle_name, '0', '')|| ' '|| replace(std.last_name, '0', '')AS first_name," +
                "std.f_firstname|| ' '|| replace(std.f_middlename, '0', '')|| ' '|| replace(std.f_lastname, '0', '') AS f_firstname," +
                "std.m_firstname|| ' '|| replace(std.m_middlename, '0', '')|| ' '|| replace(std.m_lastname, '0', '') AS m_firstname," +
                "std.user_id,cl.class," +
                "std.vch_num,'" + eff_dt + "' as eff_dt " +
                "from student_applicant_details std, add_class cl where std.student_status='temporary' and cl.add_class_id= std.class_applied and std.usession= '" + Ac_Year_id.Trim() + "' and std.type= 'STD' " +
                " and std.client_unit_id= '" + unitid_mst + "' and cl.type= 'EAC' and std.client_id= cl.client_id and std.client_unit_id= cl.client_unit_id " +
                "and sa_id in (SELECT Student_ID FROM  student_receipt_detail where Fee_status='Approved' and trim(regno)='0' and trim(Family_Grp_Id)='0' and Type = 'ERD' " +
                "and  client_unit_id='" + unitid_mst + "')";
                dt = sgen.getdata(userCode, mq0);
            }
            else
            {
                //mq0 = "SELECT (std.client_id||std.client_unit_id||std.vch_num||to_char(std.vch_date, 'yyyymmdd')|| std.type) as fstr,std.sa_id,std.first_name as studentname,std.f_firstname as fname," +
                //   "std.first_name|| ' '|| replace(std.middle_name, '0', '')|| ' '|| replace(std.last_name, '0', '') AS first_name," +
                //   "std.f_firstname|| ' '|| replace(std.f_middlename, '0', '')|| ' '|| replace(std.f_lastname, '0', '') AS f_firstname," +
                //   "std.m_firstname|| ' '|| replace(std.m_middlename, '0', '')|| ' '|| replace(std.m_lastname, '0', '') AS m_firstname," +
                //   "std.Istransfer,std.user_id,cl.class,std.class_applied," +
                //   "to_char(std.dob,'" + sgen.Getsqldateformat() + "') as dob," +
                //   "to_char(std.f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                //   "std.vch_num,std.havetransport,std.pick_point,std.drop_point ,'" + eff_dt + "' as eff_dt " +
                //   "from student_applicant_details std, add_class cl where std.student_status='temporary' and cl.add_class_id= std.class_applied and std.usession= '" + Ac_Year_id.Trim() + "' and std.type= 'STD' " +
                //   " and std.client_unit_id= '" + unitid_mst + "' and cl.type= 'EAC'  and std.client_unit_id= cl.client_unit_id";

                mq0 = "SELECT (std.client_id||std.client_unit_id||std.vch_num||to_char(std.vch_date, 'yyyymmdd')|| std.type) as fstr,std.sa_id," +
                 "std.first_name|| ' '|| replace(std.middle_name, '0', '')|| ' '|| replace(std.last_name, '0', '') AS first_name," +
                 "std.f_firstname|| ' '|| replace(std.f_middlename, '0', '')|| ' '|| replace(std.f_lastname, '0', '') AS f_firstname," +
                 "std.m_firstname|| ' '|| replace(std.m_middlename, '0', '')|| ' '|| replace(std.m_lastname, '0', '') AS m_firstname," +
                 "std.user_id,cl.class," +
                 "std.vch_num ,'" + eff_dt + "' as eff_dt " +
                 "from student_applicant_details std, add_class cl where std.student_status='temporary' and cl.add_class_id= std.class_applied and std.usession= '" + Ac_Year_id.Trim() + "' and std.type= 'STD' " +
                 " and std.client_unit_id= '" + unitid_mst + "' and cl.type= 'EAC'  and std.client_unit_id= cl.client_unit_id";
                dt = sgen.getdata(userCode, mq0);


            }
            if (dt.Rows.Count > 0)
            {
                model = new List<Tmodelmain>();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    Tmodelmain tmm = new Tmodelmain();
                    tmm.Col14 = mid_mst;
                    tmm.Col15 = m_id_mst;
                    tmm.Col17 = dt.Rows[i]["sa_id"].ToString();
                    tmm.Col18 = dt.Rows[i]["vch_num"].ToString();
                    tmm.Col19 = dt.Rows[i]["first_name"].ToString();
                    tmm.Col20 = dt.Rows[i]["f_firstname"].ToString();
                    tmm.Col21 = dt.Rows[i]["m_firstname"].ToString();
                    tmm.Col22 = dt.Rows[i]["class"].ToString();
                    //  tmm.Col23 = dt.Rows[i]["class_applied"].ToString();
                    tmm.Col24 = dt.Rows[i]["eff_dt"].ToString();
                    //tmm.Col25 = dt.Rows[i]["dob"].ToString();
                    //tmm.Col26 = dt.Rows[i]["f_dob"].ToString();
                    //tmm.Col29 = dt.Rows[i]["pick_point"].ToString();
                    //tmm.Col30 = dt.Rows[i]["drop_point"].ToString();
                    //tmm.Col31 = dt.Rows[i]["havetransport"].ToString();
                    tmm.Col34 = dt.Rows[i]["fstr"].ToString();
                    tmm.Col9 = "REGISTRATION CONFIRMED";
                    tmm.Col10 = "user_details";
                    tmm.Col25 = "student_applicant_details";
                    tmm.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                    tmm.Col12 = "STD";
                    model.Add(tmm);
                }
            }
            // dt = sgen.getdata(userCode, "select '1' SNo ,'-' RegNumber,'-' Student_Name,'-' Father_Name,'-' Class_Applied from dual");
            //model[0].dt1 = dt;
            //Session["STDCF_DT"] = dt;
            return View(model);
        }
        [HttpPost]
        public ActionResult std_confirm(List<Tmodelmain> model, string command, string mid, string hfrow, string hftable, string Myguid)
        {
            try
            {

                FillMst(Myguid);
                model = sgen.Make_Model(hftable);

                var tm = model.FirstOrDefault();
                DataTable dt = new DataTable();
                //if (command == "New")
                //{
                //    //model = getnew(model);
                //}
                if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                    //ViewBag.scripCall += " hidewait();";
                }
                else if (command == "ATTACHMENT")
                {
                    sgen.SetSession(MyGuid, "sch_vchnum", model[sgen.Make_int(hfrow)].Col18);
                    Make_query("std_confirm", "List Of Attached Document", "ATTACHMENT", "1", MyGuid);
                    ViewBag.scripCall += "callFoo('View');";
                }
                else if (command == "PRINT")
                {
                    string sa_id = model[sgen.Make_int(hfrow)].Col17;
                    sgen.SetSession(MyGuid, "sa_id", sa_id);
                    sgen.SetSession(MyGuid, "student_type", "False");
                    //Response.Redirect("~/erp/SchoolReports_Forms/Frm_Report_1.aspx");
                    Response.Redirect("~/SchoolReports_Forms/Frm_Report_1.aspx");
                }
                else if (command == "EDIT")
                {
                    string fstr = model[sgen.Make_int(hfrow)].Col34;
                    Response.Redirect("~/Education/std_registration?m_id=" + EncryptDecrypt.Encrypt(model[0].Col15) + "&mid=" + EncryptDecrypt.Encrypt(model[0].Col14) + "&fstr=1001001" + EncryptDecrypt.Encrypt(fstr) + "");
                }
                else if (command == "Confirm")
                {
                    //try
                    //{
                    string IsRegFeesBeforeAdm;
                    string xregpattern = "", fid = "", sid = "";
                    string addid = "";
                    //Session["RegNo"] = "123"; Session["RegNumber"] = "123";
                    string currdate = sgen.server_datetime(userCode);
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Chk2 == true)
                        {
                            model = reg_pattern(model, i);
                            DataTable dtstd = new DataTable();
                            DataTable dtud = new DataTable();
                            if (model[0].Col32 == null)
                            {
                                ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please create registration pattern no.');";
                                model[0].Col121 = ViewBag.scripCall;

                                return View(model);
                            }
                            else
                            {
                                mq0 = "select '" + userid_mst + "','" + currdate + "',vch_num,to_char(vch_date,'yyyymmdd') as vch_date,sa_id,password,first_name,middle_name,last_name,gender,class_applied,nationality," +
                                   "usession,dob,place_of_birth,per_country,per_state,per_city,per_district,per_tehsil,per_village,per_address,religion,ucaste," +
                                   "main_language,adhaar_id,cur_country,cur_state,cur_city,cur_district,cur_tehsil,cur_village,cur_address," +
                                   "f_firstname,f_middlename,f_lastname,f_dob,f_nationality,f_qualification,f_occupation,f_designation,f_annual_income," +
                                   "f_email,f_adhaar_id,m_firstname,m_middlename,m_lastname,m_dob,m_nationality,m_qualification,m_occupation,m_designation," +
                                   "m_annual_income,m_email,m_adhaar_id,prev_school_name,transfer_reason," +
                                   "f_org_name,m_org_name,f_con_number,m_con_number,f_alumni_type,m_alumni_type,g_firstname,g_middlename,g_lastname," +
                                   "g_dob,g_qualification,g_designation,g_org_name,g_adhaar_id,g_con_number,g_email,g_alumni_type,g_annual_income,sibling2_rollno,sibling1_reg_no," +
                                   "scholarship,g_occupation,'" + type + "','" + xregpattern + "','" + model[0].Col32 + "','" + model[0].Col33 + "'," +
                                   "'" + currdate + "','" + Ac_Year_id + "','" + clientid_mst + "','" + unitid_mst + "','active',enrollment_no,srn_no,withdrawl_no," +
                                   "sameas,transfer_class,transfer_dt,dis_desc,dis_type,isdisable,pick_point,drop_point,isperadd,havetransport,isfamily,issibling,type_desc," +
                                   "f_title,m_title,g_title,blood_grp,g_nationality,ishobby,std_hobby,default_emailid,default_ph,issameschool,sibling1_name,sibling1_class," +
                                   "sibling2_name,sibling2_class,sssm_id,std_type,old_regno,istransfer,std_caste" +
                                   " from student_applicant_details where sa_id='" + model[i].Col17 + "' and vch_num='" + model[i].Col18 + "' and type='STD'  and client_unit_id='" + unitid_mst + "'";
                                dtstd = sgen.getdata(userCode, mq0);
                                dtud = sgen.getdata(userCode, "select * from " + model[0].Col10 + " WHERE 1=2");
                                //mq = "select max(to_number(vch_num)) as auto_genid from user_details where role!='owner'";
                                //string vchid = sgen.genNo(userCode, mq, 6, "auto_genid");
                                mq = "select max(To_Number((SubstR(Lpad(vch_num,6,'0'),2,5)))) as auto_genid from  user_details where " +
                                    " substr(Lpad(vch_num,6,'0'),1,1)<>'9'";
                                string vchid = "0" + sgen.genNo(userCode, mq, 5, "auto_genid");
                                DataRow drs = dtstd.Rows[0];
                                DataRow dr = dtud.NewRow();
                                #region confirmed
                                dr["rec_id"] = 0;
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = currdate;
                                // dr["vch_num"] = drs["sa_id"];
                                dr["vch_num"] = vchid;
                                dr["password"] = drs["password"];
                                dr["first_name"] = drs["first_name"];
                                dr["middle_name"] = drs["middle_name"];
                                dr["last_name"] = drs["last_name"];
                                dr["gender"] = drs["gender"];
                                dr["class_applied"] = drs["class_applied"];
                                dr["nationality"] = drs["nationality"];
                                dr["usession"] = drs["usession"];
                                dr["dob"] = drs["dob"];
                                dr["place_of_birth"] = drs["place_of_birth"];
                                dr["blood_grp"] = drs["blood_grp"];
                                dr["per_country"] = drs["per_country"];
                                dr["per_state"] = drs["per_state"];
                                dr["per_city"] = drs["per_city"];
                                dr["per_district"] = drs["per_district"];
                                dr["per_tehsil"] = drs["per_tehsil"];
                                dr["per_village"] = drs["per_village"];
                                dr["per_address"] = drs["per_address"];
                                dr["cur_country"] = drs["cur_country"];
                                dr["cur_state"] = drs["cur_state"];
                                dr["cur_city"] = drs["cur_city"];
                                dr["cir_district"] = drs["cur_district"];
                                dr["cur_tehsil"] = drs["cur_tehsil"];
                                dr["cur_village"] = drs["cur_village"];
                                dr["cur_address"] = drs["cur_address"];
                                dr["religion"] = drs["religion"];
                                dr["ucaste"] = drs["ucaste"];
                                dr["main_language"] = drs["main_language"];
                                dr["adhaar_id"] = drs["adhaar_id"];
                                dr["f_title"] = drs["f_title"];
                                dr["m_title"] = drs["m_title"];
                                dr["g_title"] = drs["g_title"];
                                dr["f_firstname"] = drs["f_firstname"];
                                dr["f_middlename"] = drs["f_middlename"];
                                dr["f_lastname"] = drs["f_lastname"];
                                dr["f_dob"] = drs["f_dob"];
                                dr["f_nationality"] = drs["f_nationality"];
                                dr["f_qualification"] = drs["f_qualification"];
                                dr["f_occupation"] = drs["f_occupation"];
                                dr["f_designation"] = drs["f_designation"];
                                dr["f_annual_income"] = drs["f_annual_income"];
                                dr["f_email"] = drs["f_email"];
                                dr["f_adhaar_id"] = drs["f_adhaar_id"];
                                dr["m_firstname"] = drs["m_firstname"];
                                dr["m_middlename"] = drs["m_middlename"];
                                dr["m_lastname"] = drs["m_lastname"];
                                dr["m_dob"] = drs["m_dob"];
                                dr["m_nationality"] = drs["m_nationality"];
                                dr["m_qualification"] = drs["m_qualification"];
                                dr["m_occupation"] = drs["m_occupation"];
                                dr["m_designation"] = drs["m_designation"];
                                dr["m_annual_income"] = drs["m_annual_income"];
                                dr["m_email"] = drs["m_email"];
                                dr["m_adhaar_id"] = drs["m_adhaar_id"];
                                dr["prev_school_name"] = drs["prev_school_name"];
                                dr["f_org_name"] = drs["f_org_name"];
                                dr["m_org_name"] = drs["m_org_name"];
                                dr["f_con_number"] = drs["f_con_number"];
                                dr["m_con_number"] = drs["m_con_number"];
                                dr["f_alumni_type"] = drs["f_alumni_type"];
                                dr["m_alumni_type"] = drs["m_alumni_type"];
                                dr["g_alumni_type"] = drs["g_alumni_type"];
                                dr["g_firstname"] = drs["g_firstname"];
                                dr["g_middlename"] = drs["g_middlename"];
                                dr["g_lastname"] = drs["g_lastname"];
                                dr["g_dob"] = drs["g_dob"];
                                dr["g_nationality"] = drs["g_nationality"];
                                dr["g_qualification"] = drs["g_qualification"];
                                dr["g_annual_income"] = drs["g_annual_income"];
                                dr["g_designation"] = drs["g_designation"];
                                dr["g_org_name"] = drs["g_org_name"];
                                dr["g_adhaar_id"] = drs["g_adhaar_id"];
                                dr["g_con_number"] = drs["g_con_number"];
                                dr["g_email"] = drs["g_email"];
                                dr["scholarship"] = drs["scholarship"];
                                dr["g_occupation"] = drs["g_occupation"];
                                dr["type"] = model[0].Col12;
                                dr["RegPattern"] = xregpattern;
                                dr["RegNo"] = model[0].Col32;
                                dr["Regnumber"] = model[0].Col33;
                                dr["RegDate"] = currdate;
                                dr["Academic_year_Id"] = drs["usession"];
                                dr["client_id"] = clientid_mst.Trim(); ;
                                dr["client_unit_id"] = unitid_mst.Trim();
                                dr["Status"] = "active";
                                dr["enrollment_no"] = drs["enrollment_no"];
                                dr["srn_no"] = drs["srn_no"];
                                dr["withdrawl_no"] = drs["withdrawl_no"];
                                dr["default_emailid"] = drs["default_emailid"];
                                dr["default_ph"] = drs["default_ph"];
                                dr["sameas"] = drs["sameas"];
                                dr["transfer_class"] = drs["transfer_class"];
                                dr["transfer_dt"] = drs["transfer_dt"];
                                dr["dis_desc"] = drs["dis_desc"];
                                dr["dis_type"] = drs["dis_type"];
                                dr["isdisable"] = drs["isdisable"];
                                dr["pick_point"] = drs["pick_point"];
                                dr["drop_point"] = drs["drop_point"];
                                dr["isperadd"] = drs["isperadd"];
                                dr["havetransport"] = drs["havetransport"];
                                dr["ishobby"] = drs["ishobby"];
                                dr["std_hobby"] = drs["std_hobby"];
                                dr["sssm_id"] = drs["sssm_id"];
                                dr["std_type"] = drs["std_type"];
                                dr["old_regno"] = drs["old_regno"];
                                dr["istransfer"] = drs["istransfer"];
                                dr["transfer_reason"] = drs["transfer_reason"];
                                dr["std_caste"] = drs["std_caste"];
                                //mq = "select max(to_number(per_id)) as auto_genid from user_details";
                                //  string vchid = sgen.genNo(userCode, mq, 6, "auto_genid");
                                //dr["per_id"] = vchid.Trim();
                                dr["per_id"] = drs["vch_date"].ToString() + drs["vch_num"].ToString();
                                if (drs["issibling"].ToString().Equals("Y"))
                                {
                                    if (drs["issameschool"].ToString().Equals("Y") && drs["sibling2_rollno"].ToString().Trim().Length > 2)
                                    {
                                        dr["issameschool"] = drs["issameschool"];
                                        dr["isfamily"] = "Y";
                                        dr["sibling1_rollno"] = drs["sibling2_rollno"];
                                        dr["issibling"] = drs["issibling"];
                                        dr["sibling2_rollno"] = drs["sibling2_rollno"];
                                    }
                                    else if (drs["issameschool"].ToString().Equals("O") && drs["sibling1_name"].ToString().Trim().Length > 2)
                                    {
                                        dr["issameschool"] = drs["issameschool"];
                                        dr["sibling1_name"] = drs["sibling1_name"];
                                        dr["sibling1_class"] = drs["sibling1_class"];
                                        dr["sibling2_name"] = drs["sibling2_name"];
                                        dr["sibling2_class"] = drs["sibling2_class"];
                                        dr["isfamily"] = "N";
                                        //dr["isfamily"] = "Y";
                                        dr["sibling1_rollno"] = model[0].Col33;
                                        dr["issibling"] = "N";
                                        dr["sibling2_rollno"] = model[0].Col33;
                                    }
                                }
                                else
                                {
                                    dr["isfamily"] = "N";
                                    dr["sibling1_rollno"] = model[0].Col33;
                                    dr["issibling"] = "N";
                                    dr["sibling2_rollno"] = model[0].Col33;
                                }
                                if (drs["isfamily"].ToString().Equals("Y") && drs["sibling1_reg_no"].ToString().Trim().Length > 0)
                                {
                                    dr["isfamily"] = drs["isfamily"];
                                    dr["sibling1_rollno"] = drs["sibling1_reg_no"];
                                }
                                dr["type_desc"] = drs["type_desc"];
                                //dr["eff_dt"] = sgen.Savedate(model[0].Col24, true);
                                dr["eff_dt"] = sgen.Make_date_S(model[0].Col24);
                                dtud.Rows.Add(dr);
                                fid = dr["sibling1_rollno"].ToString();
                                sid = dr["sibling2_rollno"].ToString();
                                if (dtud.Rows[0]["isfamily"].ToString().Equals("N"))
                                {
                                    DataTable dtnew = new DataTable();
                                    dtnew = dtud.Copy();
                                    dtnew.Rows[0]["type"] = "STP";
                                    //dtnew.Rows[0]["per_id"] = sgen.padlc(Convert.ToInt32(vchid.Trim()) + 1, 6);
                                    dtnew.Rows[0]["vch_num"] = sgen.padlc(Convert.ToInt32(vchid.Trim()) + 1, 6);
                                    dtud.ImportRow(dtnew.Rows[0]);
                                }
                                mq0 = sgen.seekval(userCode, "select academic_year_id||type||vch_num val from user_details where  client_unit_id='" + unitid_mst + "' and academic_year_id||type||vch_num" +
                       "='" + dtud.Rows[0]["academic_year_id"].ToString().Trim() + dtud.Rows[0]["type"].ToString().Trim() +
                       dtud.Rows[0]["vch_num"].ToString().Trim() + "'", "val");
                                bool ok = false;
                                if (mq0.Trim().Equals("0"))
                                {
                                    ok = sgen.Update_data(userCode, dtud, model[0].Col10, "", false);
                                    DataTable dtrec = sgen.getdata(userCode, "SELECT vch_num, rec_id,type from user_details where class_applied='" + drs["class_applied"] + "' and RegNo= '" + model[0].Col32 + "' " +
                        "and Academic_year_Id='" + Ac_Year_id.Trim() + "' and client_unit_id='" + unitid_mst + "'");
                                    if (dtrec.Rows.Count > 1)
                                    {
                                        //rec_id = sgen.seekval_dt(dtrec, "type='STD'", "rec_id");
                                        //f_rec_id = sgen.seekval_dt(dtrec, "type='STP'", "rec_id");

                                        rec_id = sgen.seekval_dt(dtrec, "type='STD'", "vch_num");
                                        f_rec_id = sgen.seekval_dt(dtrec, "type='STP'", "vch_num");
                                    }
                                    else if (dtrec.Rows.Count.Equals(1))
                                    {
                                        // rec_id = sgen.seekval_dt(dtrec, "type='STD'", "rec_id");
                                        rec_id = sgen.seekval_dt(dtrec, "type='STD'", "vch_num");
                                    }
                                    bool updatereceipt = sgen.execute_cmd(userCode, "Update student_receipt_detail  set  student_id='" + rec_id + "',regno='" + model[0].Col33 + "'," +
                                        "family_grp_id='" + fid + "' where class_id='" + model[i].Col23 + "' and  student_id='" + model[i].Col17 + "'  and " +
                                        "client_unit_id= '" + unitid_mst + "' and  trim(Fee_Status)  in ('Approved','UnApproved')  and trim(regno)='0' and trim(family_grp_id)='0' and trim(section_id)='-' " +
                                        "and Type='ERD' and Academic_year_Id='" + Ac_Year_id.Trim() + "' ");
                                    //if (!createuserid()) return;
                                    model = createuserid(model, i);
                                    dt = new DataTable();
                                    //    bool update = sgen.execute_cmd(userCode, "Update user_details  set  user_id='" + model[0].Col27 + "',PASSWORD='" + password + "' where rec_id='" + rec_id + "' and " +
                                    //"  client_unit_id= '" + unitid_mst + "' and type='STD'");
                                    //    bool fupdate = sgen.execute_cmd(userCode, "Update user_details  set  user_id='" + model[0].Col28 + "',PASSWORD='" + fpassword + "' where rec_id='" + f_rec_id + "' and " +
                                    //        "  client_unit_id= '" + unitid_mst + "' and type='STP'");

                                    bool update = sgen.execute_cmd(userCode, "Update user_details  set user_id='" + model[0].Col27 + "',PASSWORD='" + password + "' where vch_num='" + rec_id + "' and " +
                      "  client_unit_id= '" + unitid_mst + "' and type='STD'");
                                    bool fupdate = sgen.execute_cmd(userCode, "Update user_details  set user_id='" + model[0].Col28 + "',PASSWORD='" + fpassword + "' where vch_num='" + f_rec_id + "' and " +
                                        "  client_unit_id= '" + unitid_mst + "' and type='STP'");

                                    bool data3 = sgen.execute_cmd(userCode, "Update student_applicant_details set student_status='permanent',regnumber='" + model[0].Col33 + "' where " +
                                        "sa_id='" + model[i].Col17 + "' and type='STD' and  client_unit_id='" + unitid_mst + "'");
                                    bool data5 = sgen.execute_cmd(userCode, "Update file_tab set ref_code1='" + model[0].Col33 + "' where ref_code1='" + model[i].Col17 + "' and " +
                                        "type='STD'  and client_unit_id='" + unitid_mst + "'");
                                    string xDate = sgen.server_datetime(userCode);
                                    string dt_ft = "YYYY-MM-dd HH24:MI:SS";
                                    //   bool data4 = sgen.execute_cmd(userCode, @"Insert Into Student_Detail (Reg_no,vch_num,vch_date,CLASS_APPLIED,Academic_year_Id,havetransport,pick_point,drop_point,Ent_by,Ent_date,type,client_id ,client_unit_id,StudentType)
                                    //select  '" + model[0].Col33 + "','" + rec_id + "',vch_date,class_applied,'" + Ac_Year_id + "','" + model[i].Col31 + "','" + model[i].Col29 + "','" + model[i].Col30 + "','" + userid_mst + "'," +
                                    //        " to_date('" + xDate + "','" + dt_ft + "'),'STD','" + clientid_mst + "','" + unitid_mst + "','" + drs["std_type"].ToString() + "' from student_applicant_details where sa_id='" + model[i].Col17 + "' and type='STD' and " +
                                    //        " client_unit_id='" + unitid_mst + "'");

                                    bool data4 = sgen.execute_cmd(userCode, @"Insert Into Student_Detail (Reg_no,vch_num,vch_date,CLASS_APPLIED,Academic_year_Id,havetransport,pick_point,drop_point,Ent_by,Ent_date,type,client_id ,client_unit_id,StudentType)
                                 select  '" + model[0].Col33 + "','" + rec_id + "',vch_date,class_applied,'" + Ac_Year_id + "','" + drs["havetransport"] + "','" + drs["pick_point"] + "','" + drs["drop_point"] + "','" + userid_mst + "'," +
                                        " to_date('" + xDate + "','" + dt_ft + "'),'STD','" + clientid_mst + "','" + unitid_mst + "','" + drs["std_type"].ToString() + "' from student_applicant_details where sa_id='" + model[i].Col17 + "' and type='STD' and " +
                                        " client_unit_id='" + unitid_mst + "'");

                                    //string xuserid = "'" + rec_id + "'";
                                    if (addid.Equals("")) addid = rec_id;
                                    else addid = addid + "','" + rec_id;
                                    #endregion
                                }
                            }
                        }
                    }

                    if (addid == "")
                    {
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Select Atleast One Student');";
                        model[0].Col121 = ViewBag.scripCall;
                        return View(model);
                    }
                    else
                    {
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Following Students Registration has been confirmed');";
                        model[0].Col121 = ViewBag.scripCall;

                    }
                    try
                    {
                        string[] config = sgen.get_config(userCode, "000011", clientid_mst, unitid_mst, "VDC");
                        IsRegFeesBeforeAdm = config[0].ToString();
                    }
                    catch { IsRegFeesBeforeAdm = "N"; }
                    string eff_dt = sgen.server_datetime_local(userCode);
                    if (IsRegFeesBeforeAdm == "Y")
                    {
                        //mq0 = "SELECT (std.client_id||std.client_unit_id||std.vch_num||to_char(std.vch_date, 'yyyymmdd')|| std.type) as fstr,std.sa_id,std.first_name as studentname,std.f_firstname as fname," +
                        //"replace(std.first_name, '0', '')|| ' '|| replace(std.middle_name, '0', '')|| ' '|| replace(std.last_name, '0', '')AS first_name," +
                        //"replace(std.f_firstname, '0', '')|| ' '|| replace(std.f_middlename, '0', '')|| ' '|| replace(std.f_lastname, '0', '') AS f_firstname," +
                        //"replace(std.m_firstname, '0', '')|| ' '|| replace(std.m_middlename, '0', '')|| ' '|| replace(std.m_lastname, '0', '') AS m_firstname," +
                        //"std.Istransfer,std.user_id,cl.class,std.class_applied," +
                        //"to_char(std.dob,'" + sgen.Getsqldateformat() + "') as dob," +
                        //"to_char(std.f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                        //"std.vch_num,std.havetransport,std.pick_point,std.drop_point,'" + eff_dt + "' as eff_dt " +
                        //"from student_applicant_details std, add_class cl where std.student_status='temporary' and cl.add_class_id= std.class_applied and std.usession= '" + Ac_Year_id.Trim() + "' and std.type= 'STD' " +
                        //" and std.client_unit_id= '" + unitid_mst + "' and cl.type= 'EAC' and  std.client_unit_id= cl.client_unit_id " +
                        //"and sa_id in (SELECT Student_ID FROM  student_receipt_detail where Fee_status='Approved' and trim(regno)='0' and trim(Family_Grp_Id)='0' and Type = 'ERD' " +
                        //" and client_unit_id='" + unitid_mst + "')";

                        mq0 = "SELECT (std.client_id||std.client_unit_id||std.vch_num||to_char(std.vch_date, 'yyyymmdd')|| std.type) as fstr,std.sa_id," +
                       "replace(std.first_name, '0', '')|| ' '|| replace(std.middle_name, '0', '')|| ' '|| replace(std.last_name, '0', '')AS first_name," +
                       "replace(std.f_firstname, '0', '')|| ' '|| replace(std.f_middlename, '0', '')|| ' '|| replace(std.f_lastname, '0', '') AS f_firstname," +
                       "replace(std.m_firstname, '0', '')|| ' '|| replace(std.m_middlename, '0', '')|| ' '|| replace(std.m_lastname, '0', '') AS m_firstname," +
                       "std.user_id,cl.class," +
                       "std.vch_num,'" + eff_dt + "' as eff_dt " +
                       "from student_applicant_details std, add_class cl where std.student_status='temporary' and cl.add_class_id= std.class_applied and std.usession= '" + Ac_Year_id.Trim() + "' and std.type= 'STD' " +
                       " and std.client_unit_id= '" + unitid_mst + "' and cl.type= 'EAC' and  std.client_unit_id= cl.client_unit_id " +
                       "and sa_id in (SELECT Student_ID FROM  student_receipt_detail where Fee_status='Approved' and trim(regno)='0' and trim(Family_Grp_Id)='0' and Type = 'ERD' " +
                       " and client_unit_id='" + unitid_mst + "')";
                        dt = sgen.getdata(userCode, mq0);
                    }
                    else
                    {
                        //mq0 = "SELECT (std.client_id||std.client_unit_id||std.vch_num||to_char(std.vch_date, 'yyyymmdd')|| std.type) as fstr,std.sa_id,std.first_name as studentname,std.f_firstname as fname," +
                        //   "replace(std.first_name, '0', '')|| ' '|| replace(std.middle_name, '0', '')|| ' '|| replace(std.last_name, '0', '') AS first_name," +
                        //   "replace(std.f_firstname, '0', '')|| ' '|| replace(std.f_middlename, '0', '')|| ' '|| replace(std.f_lastname, '0', '') AS f_firstname," +
                        //   "replace(std.m_firstname, '0', '')|| ' '|| replace(std.m_middlename, '0', '')|| ' '|| replace(std.m_lastname, '0', '') AS m_firstname," +
                        //   "std.Istransfer,std.user_id,cl.class,std.class_applied," +
                        //   "to_char(std.dob,'" + sgen.Getsqldateformat() + "') as dob," +
                        //   "to_char(std.f_dob,'" + sgen.Getsqldateformat() + "') as f_dob," +
                        //   "std.vch_num,std.havetransport,std.pick_point,std.drop_point ,'" + eff_dt + "' as eff_dt " +
                        //   "from student_applicant_details std, add_class cl where std.student_status='temporary' and cl.add_class_id= std.class_applied and std.usession= '" + Ac_Year_id.Trim() + "' and std.type= 'STD' " +
                        //   "and  std.client_unit_id= '" + unitid_mst + "' and cl.type= 'EAC' and std.client_unit_id= cl.client_unit_id";

                        mq0 = "SELECT (std.client_id||std.client_unit_id||std.vch_num||to_char(std.vch_date, 'yyyymmdd')|| std.type) as fstr,std.sa_id," +
                          "replace(std.first_name, '0', '')|| ' '|| replace(std.middle_name, '0', '')|| ' '|| replace(std.last_name, '0', '') AS first_name," +
                          "replace(std.f_firstname, '0', '')|| ' '|| replace(std.f_middlename, '0', '')|| ' '|| replace(std.f_lastname, '0', '') AS f_firstname," +
                          "replace(std.m_firstname, '0', '')|| ' '|| replace(std.m_middlename, '0', '')|| ' '|| replace(std.m_lastname, '0', '') AS m_firstname," +
                          "std.user_id,cl.class," +
                          "std.vch_num ,'" + eff_dt + "' as eff_dt " +
                          "from student_applicant_details std, add_class cl where std.student_status='temporary' and cl.add_class_id= std.class_applied and std.usession= '" + Ac_Year_id.Trim() + "' and std.type= 'STD' " +
                          "and  std.client_unit_id= '" + unitid_mst + "' and cl.type= 'EAC' and std.client_unit_id= cl.client_unit_id";
                        dt = sgen.getdata(userCode, mq0);
                    }
                    model = new List<Tmodelmain>();
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col17 = dt.Rows[i]["sa_id"].ToString();
                            tmm.Col18 = dt.Rows[i]["vch_num"].ToString();
                            tmm.Col19 = dt.Rows[i]["first_name"].ToString();
                            tmm.Col20 = dt.Rows[i]["f_firstname"].ToString();
                            tmm.Col21 = dt.Rows[i]["m_firstname"].ToString();
                            tmm.Col22 = dt.Rows[i]["class"].ToString();
                            //tmm.Col23 = dt.Rows[i]["class_applied"].ToString();
                            tmm.Col24 = dt.Rows[i]["eff_dt"].ToString();
                            //tmm.Col25 = dt.Rows[i]["dob"].ToString();
                            //tmm.Col26 = dt.Rows[i]["f_dob"].ToString();
                            //tmm.Col29 = dt.Rows[i]["pick_point"].ToString();
                            //tmm.Col30 = dt.Rows[i]["drop_point"].ToString();
                            //tmm.Col31 = dt.Rows[i]["havetransport"].ToString();
                            tmm.Col34 = dt.Rows[i]["fstr"].ToString();
                            tmm.Col9 = "REGISTRATION CONFIRMED";
                            tmm.Col10 = "user_details";
                            tmm.Col25 = "student_applicant_details";
                            tmm.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                            tmm.Col12 = "STD";
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.Col121 = tm.Col121;
                            model.Add(tmm);
                        }
                    }
                    else
                    {
                        Tmodelmain tmm = new Tmodelmain();
                        tmm.Col9 = "REGISTRATION CONFIRMED";
                        tmm.Col10 = "user_details";
                        tmm.Col25 = "student_applicant_details";
                        tmm.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
                        tmm.Col12 = "STD";
                        tmm.Col14 = tm.Col14;
                        tmm.Col15 = tm.Col15;
                        tmm.Col121 = tm.Col121;
                        model.Add(tmm);
                    }
                    #region confirmed std
                    DataTable dtt = sgen.getdata(userCode, "select '1' SNo ,'-' RegNumber,'-' Student_Name,'-' Father_Name,'-' Class_Applied from dual");
                    model[0].dt1 = ((DataTable)dtt).Copy();
                    //Session["STDCF_DT"] = dtt;
                    mq2 = "SELECT '1' as SNo,  ud.RegNumber, " +
                        "ud.first_name|| ' '|| replace(ud.middle_name, '0', '')|| ' '|| replace(ud.last_name, '0', '') AS Student_name, " +
                        "ud.f_firstname||' '|| replace(ud.f_middlename, '0', '')|| ' '|| replace(ud.f_lastname, '0', '') AS Father_Name," +
                        " add_class.class FROM student_detail sd, user_details ud,add_class WHERE add_class.add_class_id=sd.class_applied and " +
                        " sd.client_unit_id=add_class.client_unit_id and sd.Reg_no=ud.regnumber and sd.type='STD' and ud.vch_num in ('" + addid + "') " +
                        "and sd.Academic_year_Id='" + Ac_Year_id.Trim() + "' and ud.type= 'STD' and add_class.type='EAC' and ud.vch_num=sd.vch_num  and sd.client_unit_id='" + unitid_mst + "'";
                    dt = sgen.getdata(userCode, mq2);
                    if (dt.Rows.Count > 0)
                    {
                        model[0].dt1 = ((DataTable)dt).Copy();
                    }
                    #endregion
                    //}
                    //catch (Exception ex)
                    //{
                    //    sgen.showmsg(1, ex.Message.ToString(), 0);
                    //}
                    //}
                    //catch { }
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
                model[0].Col121 = ViewBag.scripCall;

            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region section_alloc
        public ActionResult section_alloc()
        {
            FillMst();
            DataTable dt = new DataTable();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model[0].Col9 = "STUDENT SECTION ALLOCATION";
            //ViewBag.vsave = "";
            ViewBag.scripCall = "enableForm();";
            model[0].Col10 = "user_details";
            //model[0].Col25 = "student_applicant_details";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "STD";
            #region Class 1          
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = sgen.BindClass_Str(userCode, unitid_mst);
            //TempData[MyGuid + "_TList1"] = mod1;
            //model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            #endregion
            #region section
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);
            //TempData[MyGuid + "_TList2"] = mod2;
            //model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult section_alloc(List<Tmodelmain> model, string command, string mid, string hfrow)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                DataTable dt = new DataTable();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                // shiv - why selectitem2 comment
                mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                TempData[MyGuid + "_TList1"] = mod1;
                TempData[MyGuid + "_TList2"] = mod2;
                model[0].TList1 = mod1;
                //model[0].TList2 = mod2;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                //if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                foreach (var mod in model)
                {
                    mod.TList2 = mod2;
                    if (mod.SelectedItems2 == null) mod.SelectedItems2 = new string[] { "" };
                }
                //if (command == "New")
                //{

                //}
                //else if (command == "Cancel")
                //{
                //    return CancelFun(model);
                //}
                //else if (command == "Callback")
                //{
                //    model = StartCallback(model);
                //}
                if (command == "Class")
                {

                    #region section availibilty
                    //Session["STDCF_DT"] = dtt;
                    mq = "select a.master_id,a.master_name,a.classid,a.section_strength,a.sectionid,b.master_name as section,a.subject_strength,a.sectiontype as gender," +
                        "(CASE WHEN a.SectionType = 'Both' THEN 'For Both Male And Female Students' WHEN a.SectionType = 'Male' THEN 'For Male Students Only' else 'For Female Students Only' END) as SectionType " +
                        "from master_setting a INNER join master_setting b on a.sectionid = b.master_id where a.type = 'ESS' " +
                        "and b.type = 'ECS' and find_in_set(a.client_unit_id , '" + unitid_mst + "')=1 and find_in_set(b.client_unit_id , '" + unitid_mst + "')=1 and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'";
                    DataTable dtsection = sgen.getdata(userCode, mq);
                    if (dtsection.Rows.Count > 0)
                    {
                        dtsection.Columns.Add("Availablility", System.Type.GetType("System.String"));
                        foreach (DataRow dr in dtsection.Rows)
                        {
                            string dtsec_str = sgen.getstring(userCode, @"SELECT nvl( COUNT(*) ,0) as Totalstudent  FROM student_detail where CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                            " and section='" + dr["sectionid"].ToString() + "' and   Academic_year_Id='" + Ac_Year_id.Trim() + "'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                            dr["Availablility"] = Convert.ToDecimal(dr["Section_Strength"].ToString()) - Convert.ToDecimal(dtsec_str);
                        }
                    }
                    #endregion
                    DataTable dtstudent = new DataTable();
                    mq = "SELECT '-' as section,ud.vch_num , ud.sibling1_rollno as family_Id, ud.RegNumber,ud.gender,ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME, '0', '')|| ' '" +
                        "|| replace(ud.LAST_NAME, '0', '') AS FIRST_NAME,ud.f_firstname|| ' '|| replace(ud.f_middlename, '0', '')|| ' '||" +
                        " replace(ud.f_lastname, '0', '') AS f_firstname, ud.m_firstname|| ' '|| replace(ud.m_middlename, '0', '')|| ' '||" +
                        " replace(ud.m_lastname, '0', '') AS m_firstname,sd.CLASS_APPLIED,cl.class  FROM student_detail sd inner JOIN user_details ud on sd.vch_num=ud.vch_num " +
                        "INNER join add_class cl ON cl.add_class_id= sd.class_applied WHERE sd.type= 'STD' and ud.type= 'STD' and cl.type= 'EAC' and find_in_set(cl.client_unit_id, sd.client_unit_id)=1 " +
                        "and RegNo>0 and (sd.section = '' or sd.section IS NULL or sd.section = '0' or sd.section = '-') and sd.CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                        " and sd.Academic_year_Id= '" + Ac_Year_id + "' and find_in_set(sd.client_unit_id,'" + unitid_mst + "')=1 order BY RegNo";
                    dtstudent = sgen.getdata(userCode, mq);
                    if (dtstudent.Rows.Count > 0)
                    {
                        DataTable dtmain = new DataTable();
                        dtmain = dtstudent.Clone();
                        DataTable dtmaintable = new DataTable();
                        dtmaintable.Columns.Add("RegNumber", System.Type.GetType("System.String"));
                        dtmaintable.Columns.Add("gender", System.Type.GetType("System.String"));
                        dtmaintable.Columns.Add("section", System.Type.GetType("System.String"));
                        DataTable dtratio = new DataTable();
                        dtratio = sgen.getdata(userCode, "SELECT FemaleRatio,sectionid FROM master_setting where  classid='" + model[0].SelectedItems1.FirstOrDefault() + "' and SectionType='Both' and type='ESS' and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                        foreach (DataRow drc in dtstudent.Rows)
                        {
                            string stgneder = drc["gender"].ToString();
                            foreach (DataRow drs in dtsection.Rows)
                            {
                                if (drc["gender"].ToString() == "Female")
                                {
                                }
                                string secgen = drs["gender"].ToString();
                                Int64 maxstr = Convert.ToInt64(drs["Section_Strength"].ToString());
                                Int32 femaleratio = 0;
                                if (dtratio.Rows.Count > 0)
                                {
                                    femaleratio = Convert.ToInt32(dtratio.Rows[0][0].ToString());
                                }
                                Int64 favl = Convert.ToInt64(Math.Round(Convert.ToDecimal(((double)femaleratio * maxstr) / 100)));
                                Int64 mavl = maxstr - favl;
                                if (femaleratio == 0)
                                {
                                    favl = maxstr;
                                    mavl = maxstr;
                                }
                                if (femaleratio == 0)
                                {
                                    favl = maxstr;
                                    mavl = maxstr;
                                }
                                Int64 avl = Convert.ToInt64(drs["Availablility"].ToString());
                                if (secgen.Equals(stgneder) && avl > 0)
                                {
                                    drc["section"] = drs["section"].ToString();
                                    drs["Availablility"] = avl - 1;
                                    break;
                                }
                                else if (secgen.Equals("Both") && avl > 0)
                                {
                                    try
                                    {
                                        var newDt = dtstudent.AsEnumerable().Where(w => (string)w["section"] == drs["section"].ToString()).GroupBy(r => new { gender = r.Field<string>("gender"), section = r.Field<string>("section") })
                                .Select(g =>
                                {
                                    var row = dtmaintable.NewRow();
                                    // row["Id"] = g.Key;
                                    row["RegNumber"] = g.Count();
                                    row["gender"] = g.Key.gender;
                                    row["section"] = drs["section"].ToString();
                                    return row;
                                }).CopyToDataTable();
                                        dtmaintable = newDt;
                                    }
                                    catch (Exception err)
                                    {
                                        DataRow row = dtmaintable.NewRow();
                                        // row["Id"] = g.Key;
                                        row["RegNumber"] = "0";
                                        row["gender"] = drc["gender"].ToString();
                                        row["section"] = drs["section"].ToString();
                                        dtmaintable.Rows.Add(row);
                                    }
                                    string valF = sgen.seekval_dt(dtmaintable, "gender='Female'", "RegNumber");
                                    string valM = sgen.seekval_dt(dtmaintable, "gender='Male'", "RegNumber");
                                    if (stgneder.Equals("Female") && favl - Convert.ToInt64(valF) > 0) { drc["section"] = drs["sectionid"].ToString(); drs["Availablility"] = avl - 1; }
                                    else if (stgneder.Equals("Male") && mavl - Convert.ToInt64(valM) > 0) { drc["section"] = drs["sectionid"].ToString(); drs["Availablility"] = avl - 1; }
                                    break;
                                }
                            }
                        }
                    }
                    tm = model.FirstOrDefault();
                    model = new List<Tmodelmain>();
                    if (dtstudent.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtstudent.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            // tmm.Col26 = dtstudent.Rows[i]["rec_id"].ToString();
                            tmm.Col26 = dtstudent.Rows[i]["vch_num"].ToString();
                            tmm.Col18 = dtstudent.Rows[i]["FIRST_NAME"].ToString();
                            tmm.Col19 = dtstudent.Rows[i]["gender"].ToString();
                            tmm.Col20 = dtstudent.Rows[i]["f_firstname"].ToString();
                            tmm.Col21 = dtstudent.Rows[i]["m_firstname"].ToString();
                            tmm.Col22 = dtstudent.Rows[i]["class"].ToString();
                            tmm.Col23 = dtstudent.Rows[i]["class_applied"].ToString();
                            tmm.Col24 = dtstudent.Rows[i]["RegNumber"].ToString();
                            tmm.Col25 = dtstudent.Rows[i]["family_Id"].ToString();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col25 = tm.Col25;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.Col17 = tm.Col17;
                            //tmm.SelectedItems2 = System.String.Join(",", dtstudent.Rows.OfType<DataRow>().Select(r => r["section"].ToString()).Distinct()).Split(',');


                            tmm.SelectedItems2 = new string[] { dtstudent.Rows[i]["section"].ToString() };
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            tmm.TList1 = tm.TList1;
                            tmm.TList2 = tm.TList2;
                            //tmm.dt1= tm.dt1;
                            model.Add(tmm);
                        }
                    }
                    else
                    {
                        Tmodelmain tmm = new Tmodelmain();
                        tmm.Col9 = tm.Col9;
                        tmm.Col10 = tm.Col10;
                        tmm.Col25 = tm.Col25;
                        tmm.Col11 = tm.Col11;
                        tmm.Col12 = tm.Col12;
                        tmm.Col17 = tm.Col17;
                        tmm.Col14 = tm.Col14;
                        tmm.Col15 = tm.Col15;
                        tmm.SelectedItems1 = tm.SelectedItems1;
                        tmm.SelectedItems2 = tm.SelectedItems2;
                        tmm.TList1 = tm.TList1;
                        tmm.TList2 = tm.TList2;
                        model.Add(tmm);
                    }
                    if (dtsection.Rows.Count > 0)
                    {
                        DataTable dtt = sgen.getdata(userCode, "select '1' SNo ,'-' Section,'-' Section_Type,'-' Section_Strength,'-' Availibility from dual");
                        model[0].dt1 = ((DataTable)dtt).Copy();
                        if (model[0].dt1.Rows[0]["Section"].ToString().Trim().Equals("-") || model[0].dt1.Rows[0]["Section"].ToString().Trim().Equals("")) { model[0].dt1.Rows.RemoveAt(0); }
                        for (int i = 0; i < dtsection.Rows.Count; i++)
                        {
                            DataRow dr = model[0].dt1.NewRow();
                            dr["SNo"] = i + 1;
                            dr["Section"] = dtsection.Rows[i]["section"].ToString();
                            dr["Section_Type"] = dtsection.Rows[i]["sectiontype"].ToString();
                            dr["Section_Strength"] = dtsection.Rows[i]["section_strength"].ToString();
                            dr["Availibility"] = dtsection.Rows[i]["Availablility"].ToString();
                            model[0].dt1.Rows.Add(dr);
                        }
                        model[0].dt1.AcceptChanges();
                    }
                    sgen.SetSession(MyGuid, "dtsection", dtsection);
                    sgen.SetSession(MyGuid, "dtstudent", dtstudent);

                }
                else if (command == "Allocate Section")
                {

                    DataTable dtt = new DataTable();
                    //if (Session["dtsection"] != null)
                    {
                        DataTable dtsection = (DataTable)sgen.GetSession(MyGuid, "dtsection");

                        string addid = "";
                        int cntchk = 0;
                        for (int i = 0; i < model.Count; i++)
                        {
                            if (model[i].Chk2 == true)
                            {
                                cntchk = cntchk + 1;
                                string student_id = model[i].Col26;
                                string section = model[i].SelectedItems2.FirstOrDefault();
                                string CLASS_APPLIED = model[i].Col23;
                                string lbl_RegNumber = model[i].Col24;
                                string lbl_family_Id = model[i].Col25; ;
                                //  GenRollNo();
                                if ((section != "0") && (section != ""))
                                {
                                    #region Update Receipt For Addmission Fee
                                    //bool updatereceipt = sgen.execute_cmd(userCode, "Update student_receipt_detail  set  section_id='" + section + "' where student_id='" + student_id + "' and client_id='" + clientid_mst + "' and  client_unit_id= '" + unitid_mst + "' and  Fee_Status=('Approved' or 'UnApproved') and Type='ERD' and Academic_year_Id='" + Ac_Year_id.Trim() + "' ");
                                    bool updatereceipt = sgen.execute_cmd(userCode, "Update student_receipt_detail  set  section_id='" + section + "'   where class_id='" + CLASS_APPLIED + "' and  student_id='" + student_id + "'  and  client_unit_id= '" + unitid_mst + "' and  trim(Fee_Status)  in ('Approved','UnApproved')  and trim(regno)='" + lbl_RegNumber + "' and trim(family_grp_id)='" + lbl_family_Id + "' and trim(section_id)='' and Type='ERD' and Academic_year_Id='" + Ac_Year_id.Trim() + "' ");
                                    #endregion
                                    bool data1 = sgen.execute_cmd(userCode, "update student_detail set section ='" + section + "' where Class_Applied='" + CLASS_APPLIED + "'  and vch_num='" + student_id + "' and Academic_year_Id='" + Ac_Year_id.Trim() + "'");
                                    bool data2 = sgen.execute_cmd(userCode, "update user_details set section ='" + section + "' where Class_Applied='" + CLASS_APPLIED + "'  and vch_num='" + student_id + "'  and Academic_year_Id='" + Ac_Year_id.Trim() + "'");
                                    // string xuserid = "'" + student_id + "'";
                                    string xuserid = "'" + student_id + "'";
                                    if (addid.Equals("")) addid = student_id;
                                    else addid = addid + "','" + student_id;
                                    //addid = addid + ',' + xuserid;
                                }
                            }
                        }

                        try
                        {
                            #region section availibilty
                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, "select '1' SNo ,'-' Section,'-' Section_Type,'-' Section_Strength,'-' Availibility from dual");
                            model[0].dt1 = ((DataTable)dtt).Copy();
                            //Session["STDCF_DT"] = dtt;
                            if (dtsection.Rows.Count > 0)
                            {
                                if (model[0].dt1.Rows[0]["Section"].ToString().Trim().Equals("-") || model[0].dt1.Rows[0]["Section"].ToString().Trim().Equals("")) { model[0].dt1.Rows.RemoveAt(0); }
                                for (int i = 0; i < dtsection.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["SNo"] = i + 1;
                                    dr["Section"] = dtsection.Rows[i]["section"].ToString();
                                    dr["Section_Type"] = dtsection.Rows[i]["sectiontype"].ToString();
                                    dr["Section_Strength"] = dtsection.Rows[i]["section_strength"].ToString();
                                    dr["Availibility"] = dtsection.Rows[i]["Availablility"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            #endregion
                            if (addid != "")
                            {
                                try
                                {
                                    mq = "select a.master_id,a.master_name,a.classid,a.section_strength,a.sectionid,b.master_name as section,a.subject_strength,a.sectiontype as gender," +
                                    "(CASE WHEN a.SectionType = 'Both' THEN 'For Both Male And Female Students' WHEN a.SectionType = 'Male' THEN 'For Male Students Only' else 'For Female Students Only' END) as SectionType from master_setting a " +
                                    "INNER join master_setting b on a.sectionid = b.master_id where a.type = 'ESS' and b.type = 'ECS'  " +
                                    "and a.client_unit_id = '" + unitid_mst + "'  " +
                                    "and find_in_set(b.client_unit_id ,'" + unitid_mst + "')=1 and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'";
                                    dtsection = sgen.getdata(userCode, mq);
                                    if (dtsection.Rows.Count > 0)
                                    {
                                        dtsection.Columns.Add("Availablility", System.Type.GetType("System.String"));
                                        foreach (DataRow dr in dtsection.Rows)
                                        {
                                            string dtsec_str = sgen.getstring(userCode, @"SELECT nvl( COUNT(*) ,0) as Totalstudent  FROM student_detail where CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                                            " and section='" + dr["sectionid"].ToString() + "' and   Academic_year_Id='" + Ac_Year_id.Trim() + "' and  client_unit_id='" + unitid_mst + "'");
                                            dr["Availablility"] = Convert.ToDecimal(dr["Section_Strength"].ToString()) - Convert.ToDecimal(dtsec_str);
                                        }
                                    }
                                    DataTable dtstudent = new DataTable();
                                    mq = "SELECT '-' as section,ud.vch_num ,ud.rec_id, ud.sibling1_rollno as family_Id, ud.RegNumber,ud.gender,ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME, '0', '')|| ' '" +
                                        "|| replace(ud.LAST_NAME, '0', '') AS FIRST_NAME,ud.f_firstname|| ' '|| replace(ud.f_middlename, '0', '')|| ' '||" +
                                        " replace(ud.f_lastname, '0', '') AS f_firstname, ud.m_firstname|| ' '|| replace(ud.m_middlename, '0', '')|| ' '||" +
                                        " replace(ud.m_lastname, '0', '') AS m_firstname,sd.CLASS_APPLIED,cl.class  FROM student_detail sd inner JOIN user_details ud on sd.vch_num=ud.vch_num " +
                                        "INNER join add_class cl ON cl.add_class_id= sd.class_applied WHERE sd.type= 'STD' and ud.type= 'STD' and cl.type= 'EAC'  " +
                                        "and cl.client_unit_id= sd.client_unit_id and RegNo>0 and (sd.section = '' or sd.section IS NULL or sd.section = '0' or sd.section = '-') and sd.CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                                        " and sd.Academic_year_Id= '" + Ac_Year_id + "' and  sd.client_unit_id='" + unitid_mst + "' order BY RegNo";
                                    dtstudent = sgen.getdata(userCode, mq);
                                    if (dtstudent.Rows.Count > 0)
                                    {
                                        DataTable dtmain = new DataTable();
                                        dtmain = dtstudent.Clone();
                                        DataTable dtmaintable = new DataTable();
                                        dtmaintable.Columns.Add("RegNumber", System.Type.GetType("System.String"));
                                        dtmaintable.Columns.Add("gender", System.Type.GetType("System.String"));
                                        dtmaintable.Columns.Add("section", System.Type.GetType("System.String"));
                                        DataTable dtratio = new DataTable();
                                        dtratio = sgen.getdata(userCode, "SELECT FemaleRatio,sectionid FROM master_setting where  classid='" + model[0].SelectedItems1.FirstOrDefault() + "' and SectionType='Both' and type='ESS' and client_unit_id='" + unitid_mst + "'");
                                        foreach (DataRow drc in dtstudent.Rows)
                                        {
                                            string stgneder = drc["gender"].ToString();
                                            foreach (DataRow drs in dtsection.Rows)
                                            {
                                                if (drc["gender"].ToString() == "Female")
                                                {
                                                }
                                                string secgen = drs["gender"].ToString();
                                                Int64 maxstr = Convert.ToInt64(drs["Section_Strength"].ToString());
                                                Int32 femaleratio = 0;
                                                if (dtratio.Rows.Count > 0)
                                                {
                                                    femaleratio = Convert.ToInt32(dtratio.Rows[0][0].ToString());
                                                }
                                                Int64 favl = Convert.ToInt64(Math.Round(Convert.ToDecimal(((double)femaleratio * maxstr) / 100)));
                                                Int64 mavl = maxstr - favl;
                                                if (femaleratio == 0)
                                                {
                                                    favl = maxstr;
                                                    mavl = maxstr;
                                                }
                                                if (femaleratio == 0)
                                                {
                                                    favl = maxstr;
                                                    mavl = maxstr;
                                                }
                                                Int64 avl = Convert.ToInt64(drs["Availablility"].ToString());
                                                if (secgen.Equals(stgneder) && avl > 0)
                                                {
                                                    drc["section"] = drs["section"].ToString();
                                                    drs["Availablility"] = avl - 1;
                                                    break;
                                                }
                                                else if (secgen.Equals("Both") && avl > 0)
                                                {
                                                    try
                                                    {
                                                        var newDt = dtstudent.AsEnumerable().Where(w => (string)w["section"] == drs["section"].ToString()).GroupBy(r => new { gender = r.Field<string>("gender"), section = r.Field<string>("section") })
                                                .Select(g =>
                                                {
                                                    var row = dtmaintable.NewRow();
                                                    // row["Id"] = g.Key;
                                                    row["RegNumber"] = g.Count();
                                                    row["gender"] = g.Key.gender;
                                                    row["section"] = drs["section"].ToString();
                                                    return row;
                                                }).CopyToDataTable();
                                                        dtmaintable = newDt;
                                                    }
                                                    catch (Exception err)
                                                    {
                                                        DataRow row = dtmaintable.NewRow();
                                                        // row["Id"] = g.Key;
                                                        row["RegNumber"] = "0";
                                                        row["gender"] = drc["gender"].ToString();
                                                        row["section"] = drs["section"].ToString();
                                                        dtmaintable.Rows.Add(row);
                                                    }
                                                    string valF = sgen.seekval_dt(dtmaintable, "gender='Female'", "RegNumber");
                                                    string valM = sgen.seekval_dt(dtmaintable, "gender='Male'", "RegNumber");
                                                    if (stgneder.Equals("Female") && favl - Convert.ToInt64(valF) > 0) { drc["section"] = drs["section"].ToString(); drs["Availablility"] = avl - 1; }
                                                    else if (stgneder.Equals("Male") && mavl - Convert.ToInt64(valM) > 0) { drc["section"] = drs["section"].ToString(); drs["Availablility"] = avl - 1; }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    model = new List<Tmodelmain>();
                                    if (dtstudent.Rows.Count > 0)
                                    {
                                        for (int i = 0; i < dtstudent.Rows.Count; i++)
                                        {
                                            Tmodelmain tmm = new Tmodelmain();
                                            // tmm.Col26 = dtstudent.Rows[i]["rec_id"].ToString();
                                            tmm.Col26 = dtstudent.Rows[i]["vch_num"].ToString();
                                            tmm.Col18 = dtstudent.Rows[i]["FIRST_NAME"].ToString();
                                            tmm.Col19 = dtstudent.Rows[i]["gender"].ToString();
                                            tmm.Col20 = dtstudent.Rows[i]["f_firstname"].ToString();
                                            tmm.Col21 = dtstudent.Rows[i]["m_firstname"].ToString();
                                            tmm.Col22 = dtstudent.Rows[i]["class"].ToString();
                                            tmm.Col23 = dtstudent.Rows[i]["class_applied"].ToString();
                                            tmm.Col24 = dtstudent.Rows[i]["RegNumber"].ToString();
                                            tmm.Col25 = dtstudent.Rows[i]["family_Id"].ToString();
                                            tmm.Col9 = tm.Col9;
                                            tmm.Col10 = tm.Col10;
                                            tmm.Col25 = tm.Col25;
                                            tmm.Col11 = tm.Col11;
                                            tmm.Col12 = tm.Col12;
                                            tmm.Col14 = tm.Col14;
                                            tmm.Col15 = tm.Col15;
                                            tmm.SelectedItems1 = tm.SelectedItems1;
                                            tmm.SelectedItems2 = tm.SelectedItems2;
                                            tmm.TList1 = tm.TList1;
                                            tmm.TList2 = tm.TList2;
                                            model.Add(tmm);
                                        }
                                    }
                                    else
                                    {
                                        Tmodelmain tmm = new Tmodelmain();
                                        tmm.Col9 = tm.Col9;
                                        tmm.Col10 = tm.Col10;
                                        tmm.Col25 = tm.Col25;
                                        tmm.Col11 = tm.Col11;
                                        tmm.Col12 = tm.Col12;
                                        tmm.Col14 = tm.Col14;
                                        tmm.Col15 = tm.Col15;
                                        tmm.SelectedItems1 = tm.SelectedItems1;
                                        tmm.SelectedItems2 = tm.SelectedItems2;
                                        tmm.TList1 = tm.TList1;
                                        tmm.TList2 = tm.TList2;
                                        model.Add(tmm);
                                    }
                                }
                                catch { }
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Section Has Been Allocated Successfully To Following Students');";

                                #region section confirmed std
                                dtt = sgen.getdata(userCode, "select '1' SNo ,'-' RegNumber,'-' Student_Name,'-' Father_Name,'-' Class_Applied,'-' Section from dual");
                                model[0].dt2 = ((DataTable)dtt).Copy();
                                mq1 = "SELECT user_details.RegNumber," +
                                     "first_name|| ' '|| replace(middle_name,'0','')|| ' '|| replace(last_name,'0','') AS FIRST_NAME," +
                                     "f_firstname|| ''|| replace(f_middlename,'0','')|| ' '|| replace(f_lastname,'0','') AS f_firstname," +
                                     "m_firstname|| ' '|| replace(m_middlename,'0','')|| ' '|| replace(m_lastname,'0','') AS m_firstname," +
                                     "user_details.CLASS_APPLIED,student_detail.section,master_setting.master_name as sectionname,add_class.class FROM user_details," +
                                     "student_detail,master_setting,add_class where user_details.vch_num=student_detail.vch_num and master_setting.master_id=student_detail.section " +
                                     "and student_detail.vch_num in ('" + addid + "') and student_detail.Academic_year_Id='" + Ac_Year_id.Trim() + "' and add_class.add_class_id= student_detail.class_applied " +
                                     " and student_detail.client_unit_id=add_class.client_unit_id and user_details.type= 'STD' and student_detail.type= 'STD' " +
                                     "and master_setting.type= 'ECS' and find_in_set(master_setting.client_unit_id,'" + unitid_mst + "')=1 and add_class.type= 'EAC'  and student_detail.client_unit_id='" + unitid_mst + "' ";
                                dt = sgen.getdata(userCode, mq1);
                                if (dt.Rows.Count > 0)
                                {
                                    if (model[0].dt2.Rows[0]["RegNumber"].ToString().Trim().Equals("-") || model[0].dt2.Rows[0]["RegNumber"].ToString().Trim().Equals("")) { model[0].dt2.Rows.RemoveAt(0); }
                                    for (int i = 0; i < dt.Rows.Count; i++)
                                    {
                                        DataRow dr = model[0].dt2.NewRow();
                                        dr["SNo"] = i + 1;
                                        dr["RegNumber"] = dt.Rows[i]["RegNumber"].ToString();
                                        dr["Student_Name"] = dt.Rows[i]["FIRST_NAME"].ToString();
                                        dr["Father_Name"] = dt.Rows[i]["f_firstname"].ToString();
                                        dr["Class_Applied"] = dt.Rows[i]["class"].ToString();
                                        dr["Section"] = dt.Rows[i]["sectionname"].ToString();
                                        model[0].dt2.Rows.Add(dr);
                                    }
                                    model[0].dt2.AcceptChanges();
                                }
                                #endregion
                                //Session["dtsection"] = dtsection;
                                //Session["dtstudent"] = dtstudent;
                            }

                            else
                            {
                                ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Select Atleast one Student');";
                                return View(model);
                            }
                        }
                        catch { }



                    }

                }
                else if (command == "Section")
                {
                    //string sa_id = model[sgen.Make_int(hfrow)].Col17;
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ContentResult sectionavail(string value, string newsection)
        {
            if (sgen.GetSession(MyGuid, "dtstudent") != null)
            {
                sgen = new sgenFun(MyGuid);
                //string vch = Session["track_map"].ToString();
                DataTable dtsection = new DataTable();
                DataTable dtstudent = new DataTable();
                DataSet ds = new DataSet();
                dtstudent = (DataTable)sgen.GetSession(MyGuid, "dtstudent");
                dtsection = (DataTable)sgen.GetSession(MyGuid, "dtsection");
                string lastsection = sgen.seekval_dt(dtstudent, "RegNumber='" + value + "'", "section");
                string newname = "";
                foreach (DataRow drs in dtsection.Rows)
                {
                    if (drs["sectionid"].ToString().Trim().Equals(newsection))
                    {
                        Int64 avl = Convert.ToInt64(drs["Availablility"].ToString());
                        drs["Availablility"] = avl - 1;
                        newname = drs["section"].ToString();
                    }
                    if (drs["section"].ToString().Trim().Equals(lastsection))
                    {
                        Int64 avl = Convert.ToInt64(drs["Availablility"].ToString());
                        drs["Availablility"] = avl + 1;
                    }
                }
                foreach (DataRow drc in dtstudent.Rows)
                {
                    if (drc["RegNumber"].ToString().Trim().Equals(value))
                    {
                        lastsection = drc["section"].ToString();
                        drc["section"] = newname;
                    }
                }
                DataTable dtCopy = new DataTable();
                dtCopy = dtsection.Copy();
                if (dtCopy.Rows.Count > 0)
                {
                    dtCopy.TableName = "master_setting";
                    ds.Tables.Add(dtCopy);
                }
                sgen.SetSession(MyGuid, "dtstudent", dtstudent);
                sgen.SetSession(MyGuid, "dtsection", dtsection);
                return Content(ds.GetXml());
            }
            else { return Content(""); }
        }
        #endregion
        #region g_rollno
        public ActionResult g_rollno()
        {
            FillMst();
            DataTable dt = new DataTable();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model[0].Col9 = "GENERATE ROLL NO.";
            ViewBag.scripCall = "enableForm();";
            model[0].Col10 = "student_detail";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "STD";
            #region Class 1          
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = sgen.BindClass_Actual(userCode, unitid_mst);
            model[0].SelectedItems1 = new string[] { "" };
            #endregion
            #region section
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);
            model[0].SelectedItems2 = new string[] { "" };
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult g_rollno(List<Tmodelmain> model, string command, string mid, string hfrow)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                DataTable dt = new DataTable();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                //TempData[MyGuid + "_TList1"] = mod1;
                //TempData[MyGuid + "_TList2"] = mod2;
                //model[0].TList1 = mod1;
                //model[0].TList2 = mod2;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                //if (command == "New")
                //{
                //    //model = getnew(model);
                //}
                //else if (command == "Cancel")
                //{
                //    return CancelFun(model);
                //}
                //else if (command == "Callback")
                //{
                //    model = StartCallback(model);
                //}
                if (command == "Class")
                {
                    #region section
                    TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);
                    //TempData[MyGuid + "_TList2"] = mod2;
                    //model[0].TList2 = mod2;
                    model[0].SelectedItems2 = new string[] { "" };
                    #endregion
                }
                else if (command == "Section")
                {

                    string xorderby = "";
                    DataTable dtsetting = sgen.getdata(userCode, "select IsAdmission_Wise,IsAlphabetic_Wise from Master_setting where type='ROL' and client_unit_id='" + unitid_mst + "'");
                    if (dtsetting.Rows.Count > 0)
                    {
                        if ((dtsetting.Rows[0]["IsAdmission_Wise"].ToString()) == "1")
                        {
                            xorderby = "order by user_details.RegNo ";
                        }
                        if ((dtsetting.Rows[0]["IsAlphabetic_Wise"].ToString()) == "1")
                        {
                            xorderby = "order by user_details.FIRST_NAME ";
                        }
                    }
                    DataTable dtstudent = new DataTable();
                    mq = "SELECT user_details.regnumber, student_detail.vch_num,user_details.first_name||' '||replace(user_details.middle_name,'0','')||' ' " +
                        "|| replace(user_details.last_name, '0', '') AS FIRST_NAME FROM student_detail, user_details  where student_detail.CLASS_APPLIED " +
                        "= '" + model[0].SelectedItems1.FirstOrDefault() + "' and student_detail.section = '" + model[0].SelectedItems2.FirstOrDefault() + "'" +
                                              " and student_detail.Academic_year_Id='" + Ac_Year_id + "' and (student_detail.Roll_number Is null or " +
                                              "student_detail.Roll_number='' or student_detail.Roll_number='0' or student_detail.Roll_number='-' ) and user_details.vch_num=student_detail.vch_num and student_detail.type='STD' " +
                                              "and student_detail.client_unit_id='" + unitid_mst + "' AND student_detail.Reg_No=user_details.regnumber and student_detail.type=user_details.type " + xorderby + "";
                    dtstudent = sgen.getdata(userCode, mq);
                    tm = model.FirstOrDefault();
                    model = new List<Tmodelmain>();
                    if (dtstudent.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtstudent.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col17 = dtstudent.Rows[i]["vch_num"].ToString();
                            tmm.Col18 = dtstudent.Rows[i]["FIRST_NAME"].ToString();
                            tmm.Col21 = dtstudent.Rows[i]["regnumber"].ToString();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.SelectedItems2 = tm.SelectedItems2;
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            tmm.TList1 = tm.TList1;
                            tmm.TList2 = tm.TList2;
                            //tmm.dt1= tm.dt1;
                            model.Add(tmm);
                        }
                    }
                    else
                    {
                        Tmodelmain tmm = new Tmodelmain();
                        tmm.Col9 = tm.Col9;
                        tmm.Col10 = tm.Col10;
                        tmm.Col11 = tm.Col11;
                        tmm.Col12 = tm.Col12;
                        tmm.Col14 = tm.Col14;
                        tmm.Col15 = tm.Col15;
                        tmm.SelectedItems2 = tm.SelectedItems2;
                        tmm.SelectedItems1 = tm.SelectedItems1;
                        tmm.TList1 = tm.TList1;
                        tmm.TList2 = tm.TList2;
                        //tmm.dt1= tm.dt1;
                        model.Add(tmm);
                    }

                }
                else if (command == "Generate Roll No")
                {
                    string addid = "";
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Chk2 == true)
                        {
                            model = rollno_pattern(model, i);

                            if (model[0].Col19 == null)
                            {

                                ViewBag.scripCall = "mytoast('warning', 'toast-top-right', 'Please create roll no pattern in school master');";
                                return View(model);
                            }
                            else
                            {
                                mq = "Update Student_Detail set RollNo = '" + model[i].Col19 + "', Roll_number = '" + model[i].Col20 + "' " +
                           "where vch_num = '" + model[i].Col17 + "'  and client_unit_id = '" + unitid_mst + "' and type = 'STD' and academic_year_id='" + Ac_Year_id + "'";
                                bool data = sgen.execute_cmd(userCode, mq);
                                string xuserid = "'" + model[i].Col17 + "'";
                                addid = addid + ',' + xuserid;

                            }
                        }
                    }
                    if (addid == "")
                    {
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Select Atleast one Student');";
                        return View(model);
                    }
                    try
                    {
                        string xorderby = "";
                        DataTable dtsetting = sgen.getdata(userCode, "select IsAdmission_Wise,IsAlphabetic_Wise from Master_setting where type='ROL' and  client_unit_id='" + unitid_mst + "'");
                        if (dtsetting.Rows.Count > 0)
                        {
                            if ((dtsetting.Rows[0]["IsAdmission_Wise"].ToString()) == "1")
                            {
                                xorderby = "order by user_details.RegNo ";
                            }
                            if ((dtsetting.Rows[0]["IsAlphabetic_Wise"].ToString()) == "1")
                            {
                                xorderby = "order by user_details.FIRST_NAME ";
                            }
                        }
                        DataTable dtstudent = new DataTable();
                        mq = "SELECT student_detail.vch_num,user_details.first_name||' '||replace(user_details.middle_name,'0','')||' ' " +
                            "|| replace(user_details.last_name, '0', '') AS FIRST_NAME FROM student_detail, user_details  where student_detail.CLASS_APPLIED " +
                            "= '" + model[0].SelectedItems1.FirstOrDefault() + "' and student_detail.section = '" + model[0].SelectedItems2.FirstOrDefault() + "'" +
                                                  " and student_detail.Academic_year_Id='" + Ac_Year_id + "' and (student_detail.Roll_number Is null or " +
                                                  "student_detail.Roll_number='' or student_detail.Roll_number='0' or student_detail.Roll_number='-' ) and user_details.vch_num=student_detail.vch_num and student_detail.type='STD' and student_detail.type=user_details.type  " +
                                                  " and student_detail.client_unit_id='" + unitid_mst + "'" + xorderby + "";
                        dtstudent = sgen.getdata(userCode, mq);
                        tm = model.FirstOrDefault();
                        model = new List<Tmodelmain>();
                        if (dtstudent.Rows.Count > 0)
                        {

                            for (int i = 0; i < dtstudent.Rows.Count; i++)
                            {
                                Tmodelmain tmm = new Tmodelmain();
                                tmm.Col17 = dtstudent.Rows[i]["vch_num"].ToString();
                                tmm.Col18 = dtstudent.Rows[i]["FIRST_NAME"].ToString();
                                tmm.Col9 = tm.Col9;
                                tmm.Col10 = tm.Col10;
                                tmm.Col11 = tm.Col11;
                                tmm.Col12 = tm.Col12;
                                tmm.Col14 = tm.Col14;
                                tmm.Col15 = tm.Col15;
                                tmm.SelectedItems2 = tm.SelectedItems2;
                                tmm.SelectedItems1 = tm.SelectedItems1;
                                tmm.TList1 = tm.TList1;
                                tmm.TList2 = tm.TList2;
                                //tmm.dt1= tm.dt1;
                                model.Add(tmm);
                            }


                        }

                        else
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.SelectedItems2 = tm.SelectedItems2;
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            tmm.TList1 = tm.TList1;
                            tmm.TList2 = tm.TList2;
                            //tmm.dt1= tm.dt1;
                            model.Add(tmm);
                        }
                        TempData[MyGuid + "_TList1"] = tm.TList1;
                        TempData[MyGuid + "_TList2"] = tm.TList2;
                    }
                    catch { }
                    try
                    {
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Following Students Roll No. Generated Successfully');";
                        if (addid.Length > 2)
                        {
                            addid = addid.Substring(1, addid.Length - 1);
                            dt = sgen.getdata(userCode, "select '1' SNo ,'-' Student_Name,'-' Roll_No from dual");
                            model[0].dt1 = ((DataTable)dt.Copy());
                            mq = "SELECT student_detail.roll_number," +
                                "ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME, '0', '')|| ' '|| replace(ud.LAST_NAME, '0', '') AS FIRST_NAME," +
                                "ud.f_firstname|| ' '|| replace(ud.f_middlename, '0', '')|| ' '|| replace(ud.f_lastname, '0', '') AS f_firstname," +
                                "ud.m_firstname || ' '|| replace(ud.m_middlename, '0', '')|| ' '|| replace(ud.m_lastname, '0', '') AS m_firstname " +
                                "from student_detail, user_details ud where student_detail.vch_num in (" + addid + ") and student_detail.type = 'STD' and " +
                                "ud.vch_num = student_detail.vch_num and student_detail.Academic_year_Id = '" + Ac_Year_id.Trim() + "'  " +
                                "and student_detail.client_unit_id = '" + unitid_mst + "' and student_detail.type=ud.type order by student_detail.RollNo ";
                            dt = sgen.getdata(userCode, mq);
                            if (dt.Rows.Count > 0)
                            {
                                if (model[0].dt1.Rows[0]["Roll_No"].ToString().Trim().Equals("-")) { model[0].dt1.Rows.RemoveAt(0); }
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["SNo"] = i + 1;
                                    dr["Student_Name"] = dt.Rows[i]["FIRST_NAME"].ToString();
                                    dr["Roll_No"] = dt.Rows[i]["roll_number"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                        }
                        else
                        {
                            sgen.showmsg(1, "No Selected Student Found", 1);
                        }
                    }
                    catch (Exception ex)
                    {
                        sgen.showmsg(1, ex.Message.ToString(), 0);
                    }
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region leave_approval
        public ActionResult l_apr()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "LEAVE APPROVAL";
            model[0].Col17 = "P";
            model[0].Col10 = "enx_tab";
            model[0].Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            ViewBag.scripCall = "enableForm();";
            cond = "";
            if (mid_mst.Trim().Equals("8007.1"))
            {
                model[0].Col12 = "BLA";//BLA
                sgen.SetSession(MyGuid, "BDAPPRTYPE", model[0].Col12);
                model[0].Col28 = "Employee Name";
                model[0].Col30 = "Dept/Desig";
                model[0].Col29 = "Employee ID";
                model[0].Col32 = "0";
                model[0].Col33 = "0";

                if ((!role_mst.ToUpper().Equals("OWNER")) && (model[0].Col12) == "BLA")
                {
                    mq = "select col8 tat, col9 other_user, Col7,Col12,(case when col7>900000 then 'RF' else 'RM' end) w_type from enx_tab2" +
                        " where type='WFL' and client_unit_id='" + unitid_mst + "' and col5='leave approval' " +
                        " order by rec_id ";
                    DataTable dtw = sgen.getdata(userCode, mq);
                    string repto = "", func = "", oth = "";
                    if (dtw.Rows.Count > 0)
                    {
                        string emp_id = sgen.getstring(userCode, "select emp_id from user_details where type='CPR' and vch_num='" + userid_mst + "' ");

                        for (int i = 0; i < dtw.Rows.Count; i++)
                        {
                            if (dtw.Rows[i]["Col7"].ToString() == "999997")
                            {
                                cond = "and ( emp.rptto='" + emp_id + "')";
                                repto = dtw.Rows[i]["Col12"].ToString();
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                string tatdays = dtw.Rows[i]["tat"].ToString();
                                if (dtw.Rows.Count - 1 > i)
                                {
                                    tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                }

                                else { tatdays = ">=" + tatdays; }
                                model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                    " en.vch_date))))  " + tatdays + "";

                                mq = "select distinct rptto from emp_master where rptto in( select emp_id" +
                                            " from user_details where vch_num='" + userid_mst + "') " +
                                            "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                                string found = sgen.getstring(userCode, mq);
                                if (found != "")
                                {
                                    model[0].Col34 = repto;
                                    break;
                                }

                            }
                            else if (dtw.Rows[i]["Col7"].ToString() == "999998")
                            {
                                if (repto == "")
                                {
                                    cond = "and ( emp.rptto='" + emp_id + "' or emp.rptto2='" + emp_id + "')";
                                }
                                else
                                {
                                    cond = cond.TrimEnd(')');
                                    cond = cond + "or emp.rptto2='" + emp_id + "')";
                                }
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                                string tatdays = dtw.Rows[i]["tat"].ToString();
                                if (dtw.Rows.Count - 1 > i)
                                {
                                    tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                }

                                else { tatdays = ">=" + tatdays; }
                                model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                    " en.vch_date))))  " + tatdays + "";

                                mq = "select distinct rptto2 from emp_master where rptto2 in( select emp_id" +
                                            " from user_details where vch_num='" + userid_mst + "') " +
                                            "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                                string found = sgen.getstring(userCode, mq);
                                if (found != "")
                                {
                                    model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                    break;
                                }

                            }
                            else if (dtw.Rows[i]["Col7"].ToString() == "999999")//others
                            {
                                model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                                if (userid_mst == dtw.Rows[i]["other_user"].ToString())
                                {
                                    cond = "";
                                    model[0].Col34 = dtw.Rows[i]["Col12"].ToString();

                                    string tatdays = dtw.Rows[i]["tat"].ToString();
                                    if (dtw.Rows.Count - 1 > i)
                                    {
                                        tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                    }

                                    else { tatdays = ">=" + tatdays; }
                                    model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                        " en.vch_date))))  " + tatdays + "";

                                    if (repto != "")
                                    {
                                        mq = "select distinct rptto from emp_master where rptto in( select emp_id" +
                                            " from user_details where vch_num='" + dtw.Rows[i]["other_user"].ToString() + "') " +
                                            "and type='EMP' and client_unit_id='" + unitid_mst + "'";
                                        string found = sgen.getstring(userCode, mq);
                                        if (found != "")
                                        {
                                            model[0].Col34 = repto;
                                        }
                                    }
                                    break;
                                }
                            }
                            else
                            {
                                string found = sgen.getstring(userCode, "select col7  user_id from enx_tab2  where type='ROL'" +
                                    " and client_unit_id='" + unitid_mst + "' and vch_num='" + dtw.Rows[i]["Col7"].ToString() + "' and col7='" + userid_mst + "'");
                                if (found != "")
                                {
                                    cond = "";
                                    model[0].Col34 = dtw.Rows[i]["Col12"].ToString();
                                    string tatdays = dtw.Rows[i]["tat"].ToString();
                                    if (dtw.Rows.Count - 1 > i)
                                    {
                                        tatdays = "between " + tatdays + " and " + dtw.Rows[i + 1]["tat"].ToString();
                                    }

                                    else { tatdays = ">=" + tatdays; }
                                    model[0].Col36 = "and floor(utc_timestamp() - add_months(en.vch_date, trunc(months_between(utc_timestamp()," +
                                        " en.vch_date))))  " + tatdays + "";
                                    break;
                                }
                            }
                        }
                    }

                    model[0].Col35 = cond;




                }



            }
            else
            {
                model[0].Col12 = "ELA"; //ELA
                model[0].Col28 = "Student Name";
                sgen.SetSession(MyGuid, "BDAPPRTYPE", model[0].Col12);
                model[0].Col30 = "Class";
                model[0].Col29 = "RollNo";
            }

            #region Pending
            DataTable dt = new DataTable();
            if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "ELA")
            {
                mq = "SELECT en.col6 as Remark, ud.rec_id, en.vch_num, ( ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME,'0','')|| ' '||replace(ud.last_name,'0','')) as Student_Name," +
                      "cl.class as Class,sec.master_name as Section,sd.roll_number as RollNo, " +
                      "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type," +
                      "ms.master_name as Reason,en.col6 as Remark,en.col7 as Status, " +
                      "to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date, " +
                      "to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date," +
                      "nvl((ap.FIRST_NAME|| ' '|| replace(ap.MIDDLE_NAME,'0','')|| ' '|| replace(ap.last_name,'0','')), '-') as Approved_By " +
                      "from enx_tab en " +
                      "INNER JOIN user_details ud on en.col1 = ud.RegNumber and ud.type = 'STD' " +
                      "LEFT OUTER JOIN user_details ap on en.col8 =  ap.vch_num and ap.type = 'CPR' " +
                      "INNER JOIN master_setting ms on en.col5 = ms.master_id and  find_in_set(en.client_unit_id,ms.client_unit_id)=1 and ms.type = 'ELM' " +
                      "INNER JOIN student_detail sd on sd.Reg_no= en.col1  and sd.client_unit_id= en.client_unit_id and sd.type= 'STD' " +
                      "INNER JOIN add_class cl on sd.CLASS_APPLIED= cl.add_class_id  and sd.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                      "INNER JOIN master_setting sec on sd.section= sec.master_id and  find_in_set(sd.client_unit_id,sec.client_unit_id)=1 and sec.type= 'ECS' " +
                      "where en.type = 'ELA'  and en.client_unit_id = '" + unitid_mst + "' and en.col7='Pending' " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + "";
            }
            else if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "BLA")
            {
                cond = model[0].Col35;
                mq = "SELECT en.col6 as Remark,en.vch_num doc_no,en.vch_num,en.col1 as employee_code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as employee_name,en.col9 as department,EN.COL11 as designation," +
                    "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type,en.col6 as Remark,en.col7 as " +
                    "Status,ms.master_name as reason,to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date" +
                    ",to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date " +
                    "from enx_tab en INNER JOIN master_setting ms on en.col5 = ms.master_id and ms.type = 'ELM' " +
                    " and find_in_set(en.client_unit_id,ms.client_unit_id)=1 " +
                    "inner join emp_master emp on en.col1= emp.emp_code and emp.type='EMP' and emp.client_unit_id='" + unitid_mst + "' " + cond + "  where en.type = 'BLA'  and " +
                    "en.client_unit_id = '" + unitid_mst + "' and en.col7='Pending'  " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + "" + model[0].Col36 + "";
            }
            dt = sgen.getdata(userCode, mq);
            if (dt.Rows.Count > 0)
            {
                var tm = model.FirstOrDefault();
                model = new List<Tmodelmain>();

                foreach (DataRow dr in dt.Rows)
                {
                    string applydays = "", to_leave_type = "", per_id = "", Reason = "",
                             to_date = "", Section = "", from_leave_type = "", Name = "",
                             from_date = "", dep = "", Remark = "";
                    if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "ELA")
                    {
                        Name = dr["student_name"].ToString();
                        dep = dr["class"].ToString() + ' ' + dr["section"].ToString();
                        per_id = dr["RollNo"].ToString();
                    }
                    else
                    {
                        Name = dr["employee_name"].ToString();
                        dep = dr["department"].ToString() + ' ' + dr["designation"].ToString();
                        per_id = dr["employee_code"].ToString();
                    }
                    applydays = dr["Apply_Days"].ToString();
                    from_date = dr["From_Date"].ToString();
                    from_leave_type = dr["From_Leave_type"].ToString();
                    to_date = dr["To_Date"].ToString();
                    to_leave_type = dr["To_Leave_Type"].ToString();
                    Reason = dr["Reason"].ToString();
                    status = dr["Status"].ToString();

                    model.Add(new Tmodelmain
                    {
                        Col9 = tm.Col9,
                        Col11 = tm.Col11,
                        Col12 = tm.Col12,
                        Col10 = tm.Col10,
                        Col13 = tm.Col13,
                        Col14 = tm.Col14,
                        Col15 = tm.Col15,
                        Col28 = tm.Col28,
                        Col29 = tm.Col29,
                        Col30 = tm.Col30,
                        Col34 = tm.Col34,
                        Col35 = tm.Col35,
                        Col36 = tm.Col36,
                        Col16 = dr["vch_num"].ToString(),
                        Col31 = dr["remark"].ToString(),
                        Col17 = tm.Col17,
                        Col18 = Name,
                        Col19 = dep,
                        Col20 = per_id,
                        Col21 = applydays,
                        Col22 = from_date,
                        Col23 = to_date,
                        Col24 = from_leave_type,
                        Col25 = to_leave_type,
                        Col26 = Reason,
                        Col27 = "P",
                    });
                }
            }
        END:;
            #endregion
            sgen.SetSession(MyGuid, "M_ID", mid_mst.Trim());
            return View(model);
        }
        [HttpPost]
        public ActionResult l_apr(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                string cond = "";

                if (command == "Submit")
                {

                    string status = "";
                    Boolean isok = true;
                    int cnt = 0;
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Col27 == "P")
                        {
                            status = "Pending";
                        }
                        else if (model[i].Col27 == "A")
                        {
                            status = "Approved";
                            cnt++;
                        }
                        else if (model[i].Col27 == "R")
                        {
                            status = "Rejected";
                            cnt++;
                        }
                        string xDate = sgen.server_datetime(userCode);
                        string dt_ft = "YYYY-MM-dd HH24:MI:SS";

                        mq = "update enx_tab set ref_code='" + userid_mst + "', ref_dt= to_date('" + xDate + "','" + dt_ft + "'), col7='" + status + "' where type='" + sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() + "' and vch_num='" + model[i].Col16 + "' and client_unit_id='" + unitid_mst + "' ";
                        isok = sgen.execute_cmd(userCode, mq);
                    }
                    if (isok == true)
                    {
                        if (cnt > 0) { ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Leaves Status Updated Successfully');"; };
                        DataTable dt = new DataTable();
                        if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "ELA")
                        {
                            mq = "SELECT en.col6 as Remark, ud.rec_id, en.vch_num, ( ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME,'0','')|| ' '||replace(ud.last_name,'0','')) as Student_Name," +
                                  "cl.class as Class,sec.master_name as Section,sd.roll_number as RollNo, " +
                                  "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type," +
                                  "ms.master_name as Reason,en.col6 as Remark,en.col7 as Status, " +
                                  "to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date, " +
                                  "to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date," +
                                  "nvl((ap.FIRST_NAME|| ' '|| replace(ap.MIDDLE_NAME,'0','')|| ' '|| replace(ap.last_name,'0','')), '-') as Approved_By " +
                                  "from enx_tab en " +
                                  "INNER JOIN user_details ud on en.col1 = ud.RegNumber and ud.type = 'STD' " +
                                  "LEFT OUTER JOIN user_details ap on en.col8 = ap.vch_num and ap.type = 'CPR' " +
                                  "INNER JOIN master_setting ms on en.col5 = ms.master_id  and find_in_set(en.client_unit_id,ms.client_unit_id)=1 and ms.type = 'ELM' " +
                                  "INNER JOIN student_detail sd on sd.Reg_no= en.col1 and  sd.client_unit_id= en.client_unit_id and sd.type= 'STD' " +
                                  "INNER JOIN add_class cl on sd.CLASS_APPLIED= cl.add_class_id and  sd.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                                  "INNER JOIN master_setting sec on sd.section= sec.master_id and  find_in_set(sd.client_unit_id,sec.client_unit_id)=1 and sec.type= 'ECS' " +
                                  "where en.type = 'ELA'  and en.client_unit_id = '" + unitid_mst + "' and en.col7='Pending' " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + "";
                        }
                        else if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "BLA")
                        {
                            cond = model[0].Col35;
                            mq = "SELECT en.col6 as Remark, en.vch_num,en.col1 as employee_code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as employee_name,en.col9 as department,EN.COL11 as designation," +
                                "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type,en.col6 as Remark,en.col7 as " +
                                "Status,ms.master_name as reason,to_char(en.date1, '" + sgen.Getsqldateformat() + "') as From_Date" +
                                ",to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date " +
                                "from enx_tab en INNER JOIN master_setting ms on en.col5 = ms.master_id and ms.type = 'ELM' " +
                                " and find_in_set(en.client_unit_id, ms.client_unit_id)=1 inner join emp_master emp on en.col1= emp.emp_code and emp.type='EMP' and emp.client_unit_id='" + unitid_mst + "' " + cond + " where en.type = 'BLA'  and " +
                                "en.client_unit_id = '" + unitid_mst + "' and en.col7='Pending' " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + " " + model[0].Col36 + " ";
                        }
                        dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            model = new List<Tmodelmain>();
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                            foreach (DataRow dr in dt.Rows)
                            {
                                string applydays = "", to_leave_type = "", per_id = "", Reason = "",
                                    to_date = "", Section = "", from_leave_type = "", Name = "",
                                    from_date = "", dep = "", Remark = "";
                                if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "ELA")
                                {
                                    Name = dr["student_name"].ToString();
                                    dep = dr["class"].ToString() + ' ' + dr["section"].ToString();
                                    per_id = dr["RollNo"].ToString();
                                }
                                else
                                {
                                    Name = dr["employee_name"].ToString();
                                    dep = dr["department"].ToString() + ' ' + dr["designation"].ToString();
                                    per_id = dr["employee_code"].ToString();
                                }
                                applydays = dr["Apply_Days"].ToString();
                                from_date = dr["From_Date"].ToString();
                                from_leave_type = dr["From_Leave_type"].ToString();
                                to_date = dr["To_Date"].ToString();
                                to_leave_type = dr["To_Leave_Type"].ToString();
                                Reason = dr["Reason"].ToString();
                                status = dr["Status"].ToString();
                                model.Add(new Tmodelmain
                                {
                                    Col9 = tm.Col9,
                                    Col11 = tm.Col11,
                                    Col12 = tm.Col12,
                                    Col10 = tm.Col10,
                                    Col13 = tm.Col13,
                                    Col14 = tm.Col14,
                                    Col15 = tm.Col15,
                                    Col28 = tm.Col28,
                                    Col29 = tm.Col29,
                                    Col30 = tm.Col30,
                                    Col34 = tm.Col34,
                                    Col35 = tm.Col35,
                                    Col36 = tm.Col36,
                                    Col16 = dr["vch_num"].ToString(),
                                    Col17 = tm.Col17,
                                    Col18 = Name,
                                    Col19 = dep,
                                    Col20 = per_id,
                                    Col21 = applydays,
                                    Col22 = from_date,
                                    Col23 = to_date,
                                    Col24 = from_leave_type,
                                    Col25 = to_leave_type,
                                    Col26 = Reason,
                                    Col31 = dr["remark"].ToString()

                                });
                            }
                        }
                    END:;

                    }

                }
                else if (command == "Pending")
                {

                    string fromdt = model[0].Col16;
                    string Todt = model[0].Col17;
                    DataTable dt = new DataTable();
                    if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "ELA")
                    {
                        mq = "SELECT en.col6 as Remark, ud.rec_id, en.vch_num, ( ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME,'0','')|| ' '||replace(ud.last_name,'0','')) as Student_Name," +
                              "cl.class as Class,sec.master_name as Section,sd.roll_number as RollNo, " +
                              "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type," +
                              "ms.master_name as Reason,en.col6 as Remark,en.col7 as Status, " +
                              "to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date, " +
                              "to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date," +
                              "nvl((ap.FIRST_NAME|| ' '|| replace(ap.MIDDLE_NAME,'0','')|| ' '|| replace(ap.last_name,'0','')), '-') as Approved_By " +
                              "from enx_tab en " +
                              "INNER JOIN user_details ud on en.col1 = ud.RegNumber and ud.type = 'STD' " +
                              "LEFT OUTER JOIN user_details ap on en.col8 =  ap.vch_num and ap.type = 'CPR' " +
                              "INNER JOIN master_setting ms on en.col5 = ms.master_id and  find_in_set(en.client_unit_id,ms.client_unit_id)=1 and ms.type = 'ELM' " +
                              "INNER JOIN student_detail sd on sd.Reg_no= en.col1  and sd.client_unit_id= en.client_unit_id and sd.type= 'STD' " +
                              "INNER JOIN add_class cl on sd.CLASS_APPLIED= cl.add_class_id  and sd.client_unit_id= cl.client_unit_id and cl.type= 'EAC' " +
                              "INNER JOIN master_setting sec on sd.section= sec.master_id and  find_in_set(sd.client_unit_id,sec.client_unit_id)=1 and sec.type= 'ECS' " +
                              "where en.type = 'ELA'  and en.client_unit_id = '" + unitid_mst + "' and en.col7='Pending' " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + "";
                    }
                    else if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "BLA")
                    {
                        cond = model[0].Col35;
                        mq = "SELECT en.col6 as Remark,en.vch_num doc_no,en.vch_num,en.col1 as employee_code,(emp.FIRST_NAME || ' ' || REPLACE(emp.MIDDLE_NAME, '0', '') || ' ' || REPLACE(emp.LAST_NAME, '0', '')) as employee_name,en.col9 as department,EN.COL11 as designation," +
                            "en.col2 as Apply_Days,en.col3 as From_Leave_type,REPLACE(en.col4, '0', '-') as To_Leave_Type,en.col6 as Remark,en.col7 as " +
                            "Status,ms.master_name as reason,to_char(en.date1,'" + sgen.Getsqldateformat() + "') as From_Date" +
                            ",to_char(en.date2,'" + sgen.Getsqldateformat() + "') as To_Date " +
                            "from enx_tab en INNER JOIN master_setting ms on en.col5 = ms.master_id and ms.type = 'ELM' " +
                            " and find_in_set(en.client_unit_id,ms.client_unit_id)=1 " +
                            "inner join emp_master emp on en.col1= emp.emp_code and emp.type='EMP' and emp.client_unit_id='" + unitid_mst + "' " + cond + "  where en.type = 'BLA'  and " +
                            "en.client_unit_id = '" + unitid_mst + "' and en.col7='Pending'  " + xacdrange.Replace("vch_DATE", "en.vch_DATE") + "" + model[0].Col36 + "";
                    }
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        model = new List<Tmodelmain>();
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall = "$('#btn_Fill').attr('disabled','disabled')";
                        foreach (DataRow dr in dt.Rows)
                        {
                            string applydays = "", to_leave_type = "", per_id = "", Reason = "",
                                     to_date = "", Section = "", from_leave_type = "", Name = "",
                                     from_date = "", dep = "", Remark = "";
                            if (sgen.GetSession(MyGuid, "BDAPPRTYPE").ToString() == "ELA")
                            {
                                Name = dr["student_name"].ToString();
                                dep = dr["class"].ToString() + ' ' + dr["section"].ToString();
                                per_id = dr["RollNo"].ToString();
                            }
                            else
                            {
                                Name = dr["employee_name"].ToString();
                                dep = dr["department"].ToString() + ' ' + dr["designation"].ToString();
                                per_id = dr["employee_code"].ToString();
                            }
                            applydays = dr["Apply_Days"].ToString();
                            from_date = dr["From_Date"].ToString();
                            from_leave_type = dr["From_Leave_type"].ToString();
                            to_date = dr["To_Date"].ToString();
                            to_leave_type = dr["To_Leave_Type"].ToString();
                            Reason = dr["Reason"].ToString();
                            status = dr["Status"].ToString();
                            model.Add(new Tmodelmain
                            {
                                Col9 = tm.Col9,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col10 = tm.Col10,
                                Col13 = tm.Col13,
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col28 = tm.Col28,
                                Col29 = tm.Col29,
                                Col30 = tm.Col30,
                                Col34 = tm.Col34,
                                Col35 = tm.Col35,
                                Col36 = tm.Col36,
                                Col16 = dr["vch_num"].ToString(),
                                Col31 = dr["remark"].ToString(),
                                Col17 = tm.Col17,
                                Col18 = Name,
                                Col19 = dep,
                                Col20 = per_id,
                                Col21 = applydays,
                                Col22 = from_date,
                                Col23 = to_date,
                                Col24 = from_leave_type,
                                Col25 = to_leave_type,
                                Col26 = Reason,
                                Col27 = "P",
                            });
                        }
                    }
                END:;

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Admission fee Approval
        public ActionResult Adm_app()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "ADMISSION FEES APPROVAL";
            model[0].Col10 = "student_receipt_detail";
            model[0].Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            ViewBag.scripCall = "enableForm();";
            DataTable dtpr = sgen.getdata(userCode, "select a.month_id,a.month_name, a.student_id,a.studentname," +
             "a.FatherName ,a.class_applied, max(a.Total_Receipt_Amount) as Total_Receipt_Amount" +
             ",Sum(a.Receipt_Amount) as Receipt_Amount,max(a.Total_Receipt_Amount ) - nvl(sum(a.Receipt_Amount),0)" +
             " as bal_amount from (	select (Replace(b.first_name,'0','')||' '||Replace(b.middle_name,'0','')||' '" +
             "||Replace(b.last_name,'0','')) AS StudentName,(Replace(b.f_firstname,'0','')||' '||Replace(b.f_middlename,'0','')" +
             "||' '||Replace(b.f_lastname,'0','')) AS FatherName ,class_applied, max(a.Due_Amount) as Total_Receipt_Amount," +
             "Sum(a.Receipt_Amount) as Receipt_Amount,a.receipt_no, a.Receipt_Number ,a.month_id,a.month_name,a.Student_id from  " +
             "student_receipt_detail a,student_applicant_details b where   a.Type='ERD'  and (a.Fee_Status='UnApproved') and " +
             " a.Academic_year_Id='" + Ac_Year_id + "' and a.student_id=b.sa_id and   a.client_unit_id='" + unitid_mst + "'    " +
             " and a.client_unit_id=b.client_unit_id group by Student_id,fee_head_id,(Replace(b.first_name,'0','')||' '||" +
             "Replace(b.middle_name,'0','')||' '||Replace(b.last_name,'0','')),(Replace(b.f_firstname,'0','')||' '||" +
             "Replace(b.f_middlename,'0','')||' '||Replace(b.f_lastname,'0','')),class_applied ,a.receipt_no, a.Receipt_Number" +
             " ,a.month_id,a.month_name )a group by  a.month_id,a.month_name, " +
             "a.student_id,a.studentname,a.FatherName ,a.class_applied ");
            if (dtpr.Rows.Count > 0)
            {
                List<Tmodelmain> LTM1 = new List<Tmodelmain>();
                {
                    foreach (DataRow drg in dtpr.Rows)
                    {
                        Tmodelmain ltm1 = new Tmodelmain();
                        //ltm1.Col1 = drg["Receipt_Number"].ToString();
                        ltm1.Col2 = drg["Month_id"].ToString();
                        ltm1.Col3 = drg["Month_name"].ToString();
                        ltm1.Col4 = drg["Student_id"].ToString();
                        ltm1.Col5 = drg["studentname"].ToString();
                        ltm1.Col6 = drg["fathername"].ToString();
                        ltm1.Col7 = drg["class_applied"].ToString();
                        ltm1.Col8 = sgen.getstring(userCode, "select class from add_class where add_class_id='" + drg["class_applied"].ToString() + "'  and client_unit_id='" + unitid_mst + "'");
                        ltm1.Col9 = drg["Total_Receipt_Amount"].ToString();
                        ltm1.Col10 = drg["Receipt_Amount"].ToString();
                        ltm1.Col11 = drg["bal_amount"].ToString();
                        ltm1.Chk1 = false;
                        List<Tmodelmain> LTM2 = new List<Tmodelmain>();
                        DataTable dtf = sgen.getdata(userCode, "SELECT max(a.Due_Amount) as Due_Amount,  sum(a.Receipt_Amount) as Receipt_Amount ,(max(a.Due_Amount)- sum(a.Receipt_Amount)) as bal_Amt," +
                            "a.Cheque_No,a.Month_Id,a.Month_Name ,a.Frequency_Id,a.Fee_Type_Id,a.Fee_Head_Id,b.FrequencyName," +
                                            "c.FeeTypeName,d.master_name as HeadName FROM student_receipt_detail a, school_frequency b,school_fee_type c,Master_Setting d " +
                                            "WHERE ( fee_status='UnApproved'or fee_status='Approved')  and Academic_year_Id='" + Ac_Year_id + "'" +
                                            " and a.type='ERD' and a.Student_id='" + drg["Student_id"].ToString() + "' and a.Frequency_Id=b.Frequency_Id and a.client_unit_id=b.client_unit_id and a.Fee_type_id=c.feetype_id " +
                                            "and d.master_id=a.Fee_Head_Id and d.type='EFH'  and a.client_unit_id='" + unitid_mst + "' " +
                                            " and a.client_unit_id=b.client_unit_id  and a.client_unit_id=c.client_unit_id and" +
                                            "  a.client_unit_id=d.client_unit_id and (c.master_type='' or c.master_type='0') and  d.master_type='Education Fees Head' and d.sectionid=c.feetype_id group by a.Month_Id,a.Month_Name ,a.Frequency_Id,a.Fee_Type_Id,a.Fee_Head_Id, " +
                                            "a.Cheque_No,b.FrequencyName,c.FeeTypeName,d.master_name ");
                        if (dtf.Rows.Count > 0)
                        {
                            foreach (DataRow drp in dtf.Rows)
                            {
                                Tmodelmain ltm2 = new Tmodelmain();
                                ltm2.Col1 = drp["month_id"].ToString();
                                ltm2.Col2 = drp["FrequencyName"].ToString();
                                ltm2.Col3 = drp["Fee_Type_Id"].ToString();
                                ltm2.Col4 = drp["FeeTypeName"].ToString();
                                ltm2.Col5 = drp["Fee_Head_Id"].ToString();
                                ltm2.Col6 = drp["HeadName"].ToString();
                                ltm2.Col7 = drp["Due_Amount"].ToString();
                                ltm2.Col8 = drp["Receipt_Amount"].ToString();
                                ltm2.Col9 = drp["bal_Amt"].ToString();
                                ltm2.Col10 = drp["Cheque_No"].ToString();
                                LTM2.Add(ltm2);
                            }
                            ltm1.LTM1 = LTM2;
                            LTM1.Add(ltm1);
                        }
                    }
                    model[0].LTM1 = LTM1;
                }
            }
            return View(model);
        }
        [HttpPost]
        public ActionResult Adm_app(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                if (command == "Submit")
                {

                    int cnt = 0;
                    for (int g = 0; g < tm.LTM1.Count; g++)
                    {
                        string lbl_User_id = tm.LTM1[g].Col4;
                        string lbl_month_id = tm.LTM1[g].Col2;
                        string lbl_Receipt_Number = tm.LTM1[g].Col1;
                        if (tm.LTM1[g].Chk1 == true)
                        {
                            cnt++;
                            bool data = sgen.execute_cmd(userCode, "Update student_receipt_detail set Fee_Status='Approved' where student_id='" + lbl_User_id + "' and " +
                                              "trim(regno)='0' and trim(Family_Grp_Id)='0' and Type = 'ERD' and client_unit_id='" + unitid_mst + "'");
                        }
                    }
                    if (cnt > 0)
                    {
                        ViewBag.scripCall += "showmsgJS(1,'Approved Successfully',1)";
                        return CancelFun(model);

                    }

                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region Miscellaneous Fees
        public ActionResult mis_fee()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "MISCELLANEOUS FEE RECEIPT";
            model[0].Col10 = "student_receipt_detail";
            model[0].Col12 = "EMF";//Edu. Mis. Fee
            model[0].Col11 = " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            #region  section
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            mod1 = sgen.BindSection(userCode, unitid_mst);
            mod2 = cmd_Fun.Modeofpayment(userCode, unitid_mst);
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            TempData[MyGuid + "_TList1"] = mod1;
            TempData[MyGuid + "_TList2"] = mod2;
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult mis_fee(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                TempData[MyGuid + "_TList1"] = mod1;
                TempData[MyGuid + "_TList2"] = mod2;

                model[0].TList1 = mod1;

                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                //if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                foreach (var mod in model)
                {
                    mod.TList2 = mod2;
                    if (mod.SelectedItems2 == null) mod.SelectedItems2 = new string[] { "" };
                }
                if (command == "Section")
                {

                    decimal fee_amount = sgen.Make_decimal(model[0].Col24);
                    if ((model[0].SelectedItems1.FirstOrDefault() != "") && (model[0].SelectedItems1.FirstOrDefault() != "0"))
                    {
                        mq = "Select '0' as mode_of_payment, b.sibling1_rollno as family_grp_id, b.rec_id, b.RegNumber as Reg_Number,a.roll_number," +
                            " (replace(b.FIRST_NAME,'0','')||' '||replace(b.MIDDLE_NAME,'0','')||' '||replace(b.LAST_NAME,'0','')) as Student_Name,(replace(b.f_firstname,'0','')||' '||replace(b.f_middlename,'0','')||' '||replace(b.f_lastname,'0','')) as Father_Name" +
                            ", 0 as Paid_Amount,'" + model[0].Col24 + "' as Fee_Amount from  student_detail a, user_details b where  a.client_unit_id='" + unitid_mst + "' and a.type='STD'" +
                            " and b.type='STD' and b.vch_num=a.vch_num and a.section='" + model[0].SelectedItems1.FirstOrDefault() + "' and b.Academic_year_Id='" + Ac_Year_id + "' and a.class_applied='" + model[0].Col19 + "'  and upper(b.status)=upper('Active')  ";

                        mq1 = "SELECT a.mode_of_payment, a.family_grp_id,to_number(a.student_id) as rec_id,a.RegNo as RegNumber,c.roll_number,(replace(b.FIRST_NAME,'0','')||' '||" +
                            "replace(b.MIDDLE_NAME,'0','')||' '||replace(b.LAST_NAME,'0','')) as Student_Name,(replace(b.f_firstname,'0','')||' '||replace(b.f_middlename,'0','')||' '||replace(b.f_lastname,'0','')) as Father_Name, " +
                            " a.Receipt_Amount as Paid_Amount,'" + model[0].Col24 + "' as Fee_Amount FROM student_receipt_detail a,user_details b, student_detail c where  a.type = 'EMF' and a.student_id=b.rec_id and b.type='STD' " +
                            " and a.client_unit_id='" + unitid_mst + "' and a.Academic_year_Id='" + Ac_Year_id + "' and a.ref_code='" + model[0].Col36 + "'" +
                            " and a.class_id='" + model[0].Col19 + "' and a.section_id='" + model[0].SelectedItems1.FirstOrDefault() + "' and c.type='STD'  and c.vch_num= a.student_id and a.client_unit_id =c.client_unit_id";

                        mq = mq + " union all " + mq1;

                        mq = "select  max(a.mode_of_payment) as mode_of_payment, (case when sum(a.paid_amount)='0.00' then 0 else 1 END) as Fee_status, a.family_grp_id,a.rec_id,a.Reg_Number," +
                            " a.roll_number,a.father_name,a.Student_Name,sum(Paid_Amount) as Paid_Amount,Max(Fee_Amount) as Fee_Amount,(Max(Fee_Amount)-sum(Paid_Amount)) as Bal_Amount" +
                            " from (" + mq + ")a group by a.family_grp_id,a.rec_id,a.Reg_Number, a.Student_Name,a.father_name,a.Student_Name,a.rec_id,a.Reg_Number, a.roll_number";



                        DataTable dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            sgen.SetSession(MyGuid, "DTDATAT", dt);
                            if (dt.Rows.Count > 0)
                            {
                                model = new List<Tmodelmain>();
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    Tmodelmain tmm = new Tmodelmain();
                                    tmm.Col12 = tm.Col12;
                                    tmm.Col14 = tm.Col14;
                                    tmm.Col15 = tm.Col15;
                                    tmm.Col17 = tm.Col17;
                                    tmm.Col18 = tm.Col18;
                                    tmm.Col19 = tm.Col19;
                                    tmm.Col20 = tm.Col20;
                                    tmm.Col21 = tm.Col21;
                                    tmm.Col22 = tm.Col22;
                                    tmm.Col23 = tm.Col23;
                                    tmm.Col24 = tm.Col24;
                                    tmm.Col36 = tm.Col36;
                                    tmm.Col37 = tm.Col37;
                                    tmm.Col28 = dt.Rows[i]["Reg_Number"].ToString();
                                    tmm.Col26 = dt.Rows[i]["rec_id"].ToString();
                                    tmm.Col27 = dt.Rows[i]["family_grp_id"].ToString();
                                    tmm.Col29 = dt.Rows[i]["roll_number"].ToString();
                                    tmm.Col30 = dt.Rows[i]["Student_Name"].ToString();
                                    tmm.Col31 = dt.Rows[i]["Father_Name"].ToString();
                                    tmm.Col35 = dt.Rows[i]["Bal_amount"].ToString();
                                    tmm.Col34 = dt.Rows[i]["Paid_Amount"].ToString();
                                    tmm.Col35 = dt.Rows[i]["Bal_amount"].ToString();
                                    tmm.TList1 = tm.TList1;
                                    tmm.TList2 = tm.TList2;
                                    tmm.SelectedItems1 = tm.SelectedItems1;
                                    tmm.SelectedItems2 = new string[] { "" };
                                    tmm.Col9 = tm.Col9;
                                    tmm.Col10 = tm.Col10;
                                    tmm.Col25 = tm.Col25;
                                    tmm.Col11 = tm.Col11;
                                    tmm.Col12 = tm.Col12;
                                    model.Add(tmm);
                                };
                            }

                        }
                    }

                }
                else if (command == "Save")
                {

                    DataTable dtt = new DataTable();
                    string currdate = sgen.server_datetime(userCode);
                    Int32 monthid = sgen.server_datetime_dt(userCode).Month;
                    string strMonthName = monthName.GetMonthName(monthid).ToString();
                    isedit = false;
                    vch_num = sgen.genNo(userCode, "select max(to_number (vch_num)) as max from " + model[0].Col10 + " where type='" + model[0].Col12 + "'  and client_unit_id='" + unitid_mst + "'", 6, "max");
                    model[0].Col16 = vch_num;

                    string addid = "";
                    int count = 0;
                    int countchk = 0;
                    DataTable dataTable = sgen.getdata(userCode, "select  * from " + model[0].Col10 + " where 1=2");
                    for (int i = 0; i < model.Count; i++)
                    {
                        if (model[i].Chk2 == true)
                        {
                            countchk++;


                            string lbl_rec_id = model[i].Col26;
                            string lbl_Due = model[i].Col35;
                            string lbl_paid = model[i].Col34;
                            string lbl_bal = model[i].Col55; ;
                            string Txt_Receipt_Amt = model[i].Col33; ;
                            string ddl_modeofpayment = model[i].SelectedItems2.FirstOrDefault();
                            DataRow dr = dataTable.NewRow();
                            if (sgen.Make_decimal(Txt_Receipt_Amt) > 0)
                            {
                                count++;
                                if (ddl_modeofpayment == "0")
                                {

                                }

                                dr["rec_id"] = "0";
                                dr["vch_num"] = vch_num;
                                dr["vch_date"] = currdate;
                                dr["type"] = model[0].Col12;
                                dr["Family_Grp_Id"] = model[i].Col27;
                                dr["RegNo"] = model[i].Col28;
                                dr["Receipt_Academic_year_Id"] = Ac_Year_id;
                                dr["month_id"] = monthid;
                                dr["month_name"] = strMonthName;
                                dr["student_id"] = lbl_rec_id;
                                dr["Mode_of_Payment"] = ddl_modeofpayment;
                                dr["Cheque_No"] = "";
                                dr["client_id"] = clientid_mst;
                                dr["client_unit_id"] = unitid_mst;
                                dr["Academic_year_Id"] = Ac_Year_id;
                                dr["class_id"] = model[0].Col19;
                                dr["Fee_type_id"] = model[0].Col21;
                                dr["Fee_Head_id"] = model[0].Col23;
                                dr["Receipt_Amount"] = Txt_Receipt_Amt;
                                dr["Section_Id"] = model[0].SelectedItems1.FirstOrDefault();
                                dr["ref_code"] = model[0].Col36;
                                dr["ref_date"] = sgen.Make_date_S(model[0].Col37);


                                dr["edit_by"] = "-";
                                dr["edit_date"] = currdate;
                                dr["ent_by"] = userid_mst;
                                dr["ent_date"] = currdate;


                                dataTable.Rows.Add(dr);

                            }

                        }
                    }
                    if (countchk == 0)
                    {
                        ViewBag.scripCall = "showmsgJS(1, 'Please Select Atleast One Student', 2);";
                        goto End;
                    }

                    if (count > 0)
                    {
                        bool Result = sgen.Update_data(userCode, dataTable, model[0].Col10, "", isedit);


                        if (Result == true)
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            model = new List<Tmodelmain>();
                            model.Add(new Tmodelmain
                            {
                                Col10 = tm.Col10,
                                Col11 = tm.Col11,
                                Col12 = tm.Col12,
                                Col13 = "Save",
                                Col14 = tm.Col14,
                                Col15 = tm.Col15,
                                Col9 = tm.Col9,
                                TList1 = mod1,
                                TList2 = mod2,

                                SelectedItems1 = new string[] { "" },
                                SelectedItems2 = new string[] { "" },


                            });



                        }

                        else
                        {

                            ViewBag.vnew = "disabled='disabled'";
                            ViewBag.vedit = "disabled='disabled'";
                            ViewBag.vsave = "";
                            ViewBag.vsavenew = "";
                            ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                        }



                    }

                    else
                    {

                        ViewBag.scripCall = "showmsgJS(1, 'Please Enter Receipt Amount For Selected Students', 2);";
                        goto End;
                    }

                End:;


                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region max min marks 
        public ActionResult result_mst()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            model[0].Col9 = "ADD MIN. AND MAX. MARKS";
            model[0].Col10 = "student_result";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "Class_Marks";
            mod1 = cmd_Fun.examtype(userCode, unitid_mst);
            mod2 = sgen.BindClass(userCode, unitid_mst);
            model[0].TList1 = mod1;
            model[0].TList2 = mod2;
            TempData[MyGuid + "_Tlist1"] = mod1;
            TempData[MyGuid + "_Tlist2"] = mod2;
            model[0].SelectedItems1 = new string[] { "" };
            model[0].SelectedItems2 = new string[] { "" };
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ActionResult result_mst(List<Tmodelmain> model, string command)
        {
            try
            {

                FillMst();
                var result = false;
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                TempData[MyGuid + "_TList1"] = mod1;
                TempData[MyGuid + "_TList2"] = mod2;
                model[0].TList1 = mod1;
                model[0].TList2 = mod2;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                if (command == "Class")
                {

                    if (model[0].SelectedItems2.FirstOrDefault() != "")
                    {
                        model[0].Col13 = "Add";
                        sgen.SetSession(MyGuid, "EDMODE", "N");
                        DataTable dtt = sgen.getdata(userCode, "select (a.client_id||a.client_unit_id||a.vch_num||to_char(a.vch_date,'yyyymmdd')||a.type) fstr," +
                        " a.vch_num,a.rec_id, a.client_id,a.client_unit_id,a.ent_by,a.ent_date," +
                        "a.Total_Marks,a.Marks,a.Sub_CatId,a.subject_id ,b.master_name as " +
                                     " Subjectcat,c.master_name as subject from student_result a " +
                                     "inner join master_setting b on b.master_id= a.Sub_CatId and b.type='ECC' and find_in_set(b.client_unit_id,'" + unitid_mst + "')=1 " +
                                     " inner join master_setting c on c.master_id=a.Subject_Id and  c.type='ESW' and find_in_set(c.client_unit_id,'" + unitid_mst + "')=1 " +
                                      "where a.type='Class_Marks' and a.Section_id='" + model[0].SelectedItems1.FirstOrDefault() + "' and a.Class_Id='" + model[0].SelectedItems2.FirstOrDefault() + "'  and a.client_unit_id='" + unitid_mst + "'");


                        if (dtt.Rows.Count > 0)
                        {
                            String[] L1 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["inv_opt"].ToString()).Distinct()).Split(',');

                            String[] L2 = System.String.Join(",", dtt.Rows.OfType<DataRow>().Select(r => r["swt_type"].ToString()).Distinct()).Split(',');


                            model = new List<Tmodelmain>();
                            foreach (DataRow dr in dtt.Rows)
                            {
                                model.Add(new Tmodelmain
                                {

                                    Col9 = tm.Col9,
                                    Col10 = tm.Col10,
                                    Col13 = "Update",
                                    Col14 = tm.Col14,
                                    Col15 = tm.Col15,
                                    Col16 = dr["vch_num"].ToString(),
                                    Col1 = dr["client_id"].ToString(),
                                    Col2 = dr["client_unit_id"].ToString(),
                                    Col3 = dr["ent_by"].ToString(),
                                    Col4 = dr["ent_date"].ToString(),
                                    Col7 = dr["rec_id"].ToString(),
                                    Col8 = "(client_id||client_unit_id||vch_num||to_char(vch_date, 'yyyymmdd')|| type) = '" + dr["fstr"].ToString() + "'",
                                    Col17 = dr["Subjectcat"].ToString(),
                                    Col18 = dr["Sub_CatId"].ToString(),
                                    Col19 = dr["subject_id"].ToString(),
                                    Col20 = dr["subject"].ToString(),
                                    TList1 = mod1,
                                    TList2 = mod2,
                                    SelectedItems1 = L1,
                                    SelectedItems2 = L2,
                                });
                            }
                        }
                        else
                        {
                            string mq2 = "select distinct a.Promting_perc,a.subject_id ,a.Sub_CatId,b.master_name as " +
                                         " Subjectcat,c.master_name as subject from student_result a  " +
                                         "inner join master_setting b on b.master_id= a.Sub_CatId and b.type='ECC' and find_in_set(b.client_unit_id,'" + unitid_mst + "')=1 " +
                                         " inner join master_setting c on c.master_id=a.Subject_Id and  c.type='ESW' and find_in_set(c.client_unit_id,'" + unitid_mst + "')=1 " +
                                         " where  a.type='class_subject' AND a.Class_Id='" + model[0].SelectedItems2.FirstOrDefault() + "'  and a.Academic_Year_Id='" + Ac_Year_id + "' and a.client_unit_id='" + unitid_mst + "' ";
                            DataTable dt = sgen.getdata(userCode, mq2);
                            if (dt.Rows.Count > 0)
                            {
                                model = new List<Tmodelmain>();
                                foreach (DataRow dr in dt.Rows)
                                {
                                    model.Add(new Tmodelmain
                                    {
                                        Col8 = tm.Col8,
                                        Col9 = tm.Col9,
                                        Col10 = tm.Col10,
                                        Col13 = tm.Col13,
                                        Col14 = tm.Col14,
                                        Col15 = tm.Col15,
                                        Col17 = dr["Subjectcat"].ToString(),
                                        Col18 = dr["Sub_CatId"].ToString(),
                                        Col19 = dr["subject_id"].ToString(),
                                        Col20 = dr["subject"].ToString(),
                                        TList1 = mod1,
                                        TList2 = mod2,
                                        SelectedItems1 = new string[] { "" },
                                        SelectedItems2 = new string[] { "" },
                                    });
                                }
                            }
                        }
                        return View(model);
                    }

                }
                if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command.Trim().ToUpper().Equals("ADD") || command.Trim().ToUpper().Equals("UPDATE"))
                {

                    string currdate = sgen.server_datetime(userCode);
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        model[0].Col16 = tm.Col16.Trim();
                    }
                    else
                    {
                        mq1 = "";
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10 + " where type='" + model[0].Col12 + "' " + model[0].Col11 + "  ";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        isedit = false;
                        model[0].Col16 = vch_num;
                    }
                    DataTable dataTable = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    for (int i = 0; i < model.Count; i++)
                    {
                        DataRow dr = dataTable.NewRow();
                        dr["rec_id"] = "0";
                        dr["id"] = model[0].Col16;
                        dr["type"] = model[0].Col12;
                        dr["vch_num"] = model[0].Col16;
                        dr["vch_date"] = currdate;
                        dr["Class_Id"] = model[0].SelectedItems2.FirstOrDefault(); ;
                        dr["Subject_Id"] = model[i].Col19;
                        dr["Total_marks"] = model[i].Col21;
                        dr["marks"] = model[i].Col23;
                        dr["Academic_Year_Id"] = Ac_Year_id;
                        dr["Sub_CatId"] = model[i].Col18;
                        dr["Promting_perc"] = model[i].Col22;
                        dr["Section_id"] = model[0].SelectedItems1.FirstOrDefault(); ;
                        dr = getsave(currdate, dr, model);
                        dataTable.Rows.Add(dr);
                    }
                    result = sgen.Update_data_fast1(userCode, dataTable, model[0].Col10.Trim(), model[0].Col8, isedit);
                    if (result == true)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col9 = tm.Col9,
                            TList1 = mod1,
                            TList2 = mod2,
                            SelectedItems1 = new string[] { "" },
                            SelectedItems2 = new string[] { "" },
                        });
                        ViewBag.vnew = "";
                        ViewBag.vedit = "";
                        ViewBag.vsave = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.vsavenew = "disabled='disabled'";
                        ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }

                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region filter2
        public ActionResult filter2(string headid, string mid, string m_id, string btnid, string myguid)
        {
            FillMst(m_id);
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();

            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();
            List<SelectListItem> mod6 = new List<SelectListItem>();
            mod1 = cmd_Fun.ac_year(userCode, clientid_mst);
            mod2 = sgen.BindClasscategory(userCode, unitid_mst);
            mod3 = sgen.BindClass(userCode, unitid_mst);
            mod4 = sgen.BindSection(userCode, unitid_mst);
            mod5 = cmd_Fun.feetypeall(userCode, unitid_mst);


            TempData[MyGuid + "Tlist1"] = tm1.TList1 = mod1;
            TempData[MyGuid + "Tlist2"] = tm1.TList2 = mod2;
            TempData[MyGuid + "Tlist3"] = tm1.TList3 = mod3;
            TempData[MyGuid + "Tlist4"] = tm1.TList4 = mod4;
            TempData[MyGuid + "Tlist5"] = tm1.TList5 = mod5;
            TempData[MyGuid + "Tlist6"] = tm1.TList6 = mod6;
            if (tm1.SelectedItems1 == null) tm1.SelectedItems1 = new string[] { "" };
            if (tm1.SelectedItems2 == null) tm1.SelectedItems2 = new string[] { "" };
            if (tm1.SelectedItems3 == null) tm1.SelectedItems3 = new string[] { "" };
            if (tm1.SelectedItems4 == null) tm1.SelectedItems4 = new string[] { "" };
            if (tm1.SelectedItems5 == null) tm1.SelectedItems5 = new string[] { "" };
            if (tm1.SelectedItems6 == null) tm1.SelectedItems6 = new string[] { "" };

            tm1.Col9 = headid;
            tm1.Col10 = mid;
            tm1.Col11 = m_id;
            tm1.Col12 = btnid;
            tm1.Col17 = sgen.server_datetime_local(userCode);
            tm1.Col18 = sgen.server_datetime_local(userCode);
            tm1.SelectedItems1 = new string[] { Ac_Year_id };
            model.Add(tm1);
            return PartialView(model);
        }
        [HttpPost]
        public ActionResult filter2(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col11);
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "Tlist5"];
            List<SelectListItem> mod6 = (List<SelectListItem>)TempData[MyGuid + "Tlist6"];
            TempData[MyGuid + "Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "Tlist5"] = model[0].TList5 = mod5;
            TempData[MyGuid + "Tlist6"] = model[0].TList6 = mod6;
            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };
            if (model[0].SelectedItems6 == null) model[0].SelectedItems6 = new string[] { "" };
            if (command == "Search")
            {
                sgen.SetSession(MyGuid, "RPTCMD", model[0].Col12.Trim());
                //sgen.SetSession(MyGuid, "KPDFDT", model[0].Col17);
                //sgen.SetSession(MyGuid, "KPDTDT", model[0].Col18);

                DataTable dtfilter = new DataTable();
                dtfilter.Columns.Add("NAME", typeof(string));
                dtfilter.Columns.Add("COL1", typeof(string));
                dtfilter.Columns.Add("COL2", typeof(string));
                string FromDt = "", ToDt = "";
                string student_type = "", month_id = "";

                try
                {
                    //FromDt = model[0].Col17.Trim();
                    FromDt = sgen.Make_date(model[0].Col17.Trim()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

                    ToDt = sgen.Make_date(model[0].Col18.Trim()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                    //ToDt = model[0].Col18.Trim();
                }
                catch { Exception ex; }

                if (sgen.GetSession(MyGuid, "student_type") != null)
                {
                    student_type = sgen.GetSession(MyGuid, "student_type").ToString();
                }
                string Fee_TypeId = "0", Head_Id = "0", category_id = "0", class_id = "0", section_id = "0", student_id = "0";

                category_id = "'" + string.Join(",", model[0].SelectedItems2).Replace(",", "','") + "'";
                class_id = "'" + string.Join(",", model[0].SelectedItems3).Replace(",", "','") + "'";
                section_id = "'" + string.Join(",", model[0].SelectedItems4).Replace(",", "','") + "'";
                Fee_TypeId = "'" + string.Join(",", model[0].SelectedItems5).Replace(",", "','") + "'";
                Head_Id = "'" + string.Join(",", model[0].SelectedItems6).Replace(",", "','") + "'";
                if (category_id == "''") { category_id = ""; }
                if (class_id == "''") { class_id = ""; }
                if (section_id == "''") { section_id = ""; }
                if (Fee_TypeId == "''") { Fee_TypeId = ""; }
                if (Head_Id == "''") { Head_Id = ""; }

                //if (sgen.GetSession(MyGuid, "needstudent") != null)
                //{ student_id = sgen.GetAllSelect(ddl_student); }
                DataRow dr = dtfilter.NewRow();
                dr["NAME"] = "CLASS";
                dr["COL1"] = class_id;
                dr["COL2"] = model[0].Col20;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "SECTION";
                dr["COL1"] = section_id;
                dr["COL2"] = model[0].Col21;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "CLASS_CAT";
                dr["COL1"] = category_id;
                dr["COL2"] = model[0].Col19;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "STUDENT";
                dr["COL1"] = student_id;
                dr["COL2"] = student_id;

                dtfilter.Rows.Add(dr);


                dr = dtfilter.NewRow();
                dr["NAME"] = "FeeType";
                dr["COL1"] = Fee_TypeId;
                dr["COL2"] = model[0].Col22;
                dtfilter.Rows.Add(dr);


                dr = dtfilter.NewRow();
                dr["NAME"] = "HeadType";
                dr["COL1"] = Head_Id;
                dr["COL2"] = model[0].Col23;
                dtfilter.Rows.Add(dr);




                dr = dtfilter.NewRow();
                dr["NAME"] = "DateRange";
                dr["COL1"] = FromDt;
                dr["COL2"] = ToDt;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "StudentType";
                dr["COL1"] = student_type;
                dr["COL2"] = student_type;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "MONTH";
                dr["COL1"] = month_id;
                dr["COL2"] = "";
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "academic_year";
                dr["COL1"] = model[0].SelectedItems1.FirstOrDefault();
                dr["COL2"] = ((List<SelectListItem>)TempData[MyGuid + "Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();

                dtfilter.Rows.Add(dr);
                if (dtfilter.Rows.Count > 0)
                {
                    sgen.SetSession(MyGuid, "dtfilter", dtfilter);
                }
            }

            else if (command == "Head")
            {
                string fee_typeid = string.Join(",", model[0].SelectedItems5).Replace(",", "','");
                DataTable dt = new DataTable();
                string mq1 = "select master_id,master_name from master_setting  where sectionid in ('" + fee_typeid + "') " +
                    " and client_unit_id='" + unitid_mst + "' and subjectid =1 and type='EFH' and master_type='Education Fees Head'";
                dt = sgen.getdata(userCode, mq1);
                mod6 = new List<SelectListItem>();
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        mod6.Add(new SelectListItem { Text = dr["master_name"].ToString(), Value = dr["master_id"].ToString() });
                    }
                }

                TempData[MyGuid + "Tlist6"] = model[0].TList6 = mod6;

            }
            ModelState.Clear();
            return PartialView(model);
        }
        #endregion
        #region filter3 
        public ActionResult filter3(string headid, string mid, string m_id, string btnid)
        {
            FillMst(m_id);
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();

            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();

            mod1 = cmd_Fun.ac_year(userCode, clientid_mst);
            mod2 = sgen.BindClasscategory(userCode, unitid_mst);
            mod3 = sgen.BindClass(userCode, unitid_mst);
            mod4 = sgen.BindSection(userCode, unitid_mst);
            mod5 = sgen.BindMonth(userCode);


            TempData[MyGuid + "Tlist1"] = tm1.TList1 = mod1;
            TempData[MyGuid + "Tlist2"] = tm1.TList2 = mod2;
            TempData[MyGuid + "Tlist3"] = tm1.TList3 = mod3;
            TempData[MyGuid + "Tlist4"] = tm1.TList4 = mod4;
            TempData[MyGuid + "Tlist5"] = tm1.TList5 = mod5;

            if (tm1.SelectedItems1 == null) tm1.SelectedItems1 = new string[] { "" };
            if (tm1.SelectedItems2 == null) tm1.SelectedItems2 = new string[] { "" };
            if (tm1.SelectedItems3 == null) tm1.SelectedItems3 = new string[] { "" };
            if (tm1.SelectedItems4 == null) tm1.SelectedItems4 = new string[] { "" };
            if (tm1.SelectedItems5 == null) tm1.SelectedItems5 = new string[] { "" };


            tm1.Col9 = headid;
            tm1.Col10 = mid;
            tm1.Col11 = m_id;
            tm1.Col12 = btnid;
            tm1.Col17 = sgen.server_datetime_local(userCode);
            tm1.Col18 = sgen.server_datetime_local(userCode);
            tm1.SelectedItems1 = new string[] { Ac_Year_id };
            model.Add(tm1);
            return PartialView(model);
        }
        [HttpPost]
        public ActionResult filter3(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col11);
            List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "Tlist5"];

            TempData[MyGuid + "Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "Tlist5"] = model[0].TList5 = mod5;

            if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };

            if (command == "Search")
            {
                sgen.SetSession(MyGuid, "RPTCMD", model[0].Col12.Trim());


                DataTable dtfilter = new DataTable();
                dtfilter.Columns.Add("NAME", typeof(string));
                dtfilter.Columns.Add("COL1", typeof(string));
                dtfilter.Columns.Add("COL2", typeof(string));
                string FromDt = "", ToDt = "";
                string student_type = "", month_id = "";

                //try
                ////{
                ////    FromDt = sgen.SaveDate_dt(model[0].Col17.Trim(), true).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

                ////    ToDt = sgen.SaveDate_dt(model[0].Col18.Trim(), true).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                //}
                //catch { Exception ex; }

                if (sgen.GetSession(MyGuid, "student_type") != null)
                {
                    student_type = sgen.GetSession(MyGuid, "student_type").ToString();
                }
                string Fee_TypeId = "0", Head_Id = "0", category_id = "0", class_id = "0", section_id = "0", student_id = "0";

                category_id = "'" + string.Join(",", model[0].SelectedItems2).Replace(",", "','") + "'";
                class_id = "'" + string.Join(",", model[0].SelectedItems3).Replace(",", "','") + "'";
                section_id = "'" + string.Join(",", model[0].SelectedItems4).Replace(",", "','") + "'";
                month_id = "'" + string.Join(",", model[0].SelectedItems5).Replace(",", "','") + "'";

                if (category_id == "''") { category_id = ""; }
                if (class_id == "''") { class_id = ""; }
                if (section_id == "''") { section_id = ""; }
                if (month_id == "''") { month_id = ""; }


                //if (sgen.GetSession(MyGuid, "needstudent") != null)
                //{ student_id = sgen.GetAllSelect(ddl_student); }
                DataRow dr = dtfilter.NewRow();
                dr["NAME"] = "CLASS";
                dr["COL1"] = class_id;
                dr["COL2"] = model[0].Col20;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "SECTION";
                dr["COL1"] = section_id;
                dr["COL2"] = model[0].Col21;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "CLASS_CAT";
                dr["COL1"] = category_id;
                dr["COL2"] = model[0].Col19;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "STUDENT";
                dr["COL1"] = student_id;
                dr["COL2"] = student_id;

                dtfilter.Rows.Add(dr);


                dr = dtfilter.NewRow();
                dr["NAME"] = "academic_year";
                dr["COL1"] = Ac_Year_id;
                dr["COL2"] = Ac_Year;

                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "DateRange";
                dr["COL1"] = model[0].Col17;
                dr["COL2"] = model[0].Col18;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "StudentType";
                dr["COL1"] = student_type;
                dr["COL2"] = student_type;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "MONTH";
                dr["COL1"] = month_id;
                dr["COL2"] = model[0].Col22;
                dtfilter.Rows.Add(dr);

                if (dtfilter.Rows.Count > 0)
                {
                    sgen.SetSession(MyGuid, "dtfilter", dtfilter);
                }
            }


            ModelState.Clear();
            return PartialView(model);
        }
        #endregion
        #region filter4
        public ActionResult filter4(string headid, string mid, string m_id, string btnid)
        {
            FillMst(m_id);
            chkRef();
            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();

            //List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            List<SelectListItem> mod3 = new List<SelectListItem>();
            List<SelectListItem> mod4 = new List<SelectListItem>();
            List<SelectListItem> mod5 = new List<SelectListItem>();

            //mod1 = cmd_Fun.ac_year(userCode, clientid_mst);
            mod2 = sgen.BindClasscategory(userCode, unitid_mst);
            mod3 = sgen.BindClass(userCode, unitid_mst);
            mod4 = sgen.BindSection(userCode, unitid_mst);



            //TempData[MyGuid + "Tlist1"] = tm1.TList1 = mod1;
            TempData[MyGuid + "Tlist2"] = tm1.TList2 = mod2;
            TempData[MyGuid + "Tlist3"] = tm1.TList3 = mod3;
            TempData[MyGuid + "Tlist4"] = tm1.TList4 = mod4;
            TempData[MyGuid + "Tlist5"] = tm1.TList5 = mod5;

            if (tm1.SelectedItems1 == null) tm1.SelectedItems1 = new string[] { "" };
            if (tm1.SelectedItems2 == null) tm1.SelectedItems2 = new string[] { "" };
            if (tm1.SelectedItems3 == null) tm1.SelectedItems3 = new string[] { "" };
            if (tm1.SelectedItems4 == null) tm1.SelectedItems4 = new string[] { "" };
            if (tm1.SelectedItems5 == null) tm1.SelectedItems5 = new string[] { "" };


            tm1.Col9 = headid;
            tm1.Col10 = mid;
            tm1.Col11 = m_id;
            tm1.Col12 = btnid;
            tm1.Col17 = sgen.server_datetime_local(userCode);
            tm1.Col18 = sgen.server_datetime_local(userCode);
            //tm1.SelectedItems1 = new string[] { Ac_Year_id };
            model.Add(tm1);
            return PartialView(model);
        }
        [HttpPost]
        public ActionResult filter4(List<Tmodelmain> model, string command)
        {
            FillMst(model[0].Col11);
            //List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "Tlist1"];
            List<SelectListItem> mod2 = (List<SelectListItem>)TempData[MyGuid + "Tlist2"];
            List<SelectListItem> mod3 = (List<SelectListItem>)TempData[MyGuid + "Tlist3"];
            List<SelectListItem> mod4 = (List<SelectListItem>)TempData[MyGuid + "Tlist4"];
            List<SelectListItem> mod5 = (List<SelectListItem>)TempData[MyGuid + "Tlist5"];

            //TempData[MyGuid + "Tlist1"] = model[0].TList1 = mod1;
            TempData[MyGuid + "Tlist2"] = model[0].TList2 = mod2;
            TempData[MyGuid + "Tlist3"] = model[0].TList3 = mod3;
            TempData[MyGuid + "Tlist4"] = model[0].TList4 = mod4;
            TempData[MyGuid + "Tlist5"] = model[0].TList5 = mod5;

            //if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
            if (model[0].SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
            if (model[0].SelectedItems3 == null) model[0].SelectedItems3 = new string[] { "" };
            if (model[0].SelectedItems4 == null) model[0].SelectedItems4 = new string[] { "" };
            if (model[0].SelectedItems5 == null) model[0].SelectedItems5 = new string[] { "" };

            if (command == "Search")
            {
                sgen.SetSession(MyGuid, "RPTCMD", model[0].Col12.Trim());


                DataTable dtfilter = new DataTable();
                dtfilter.Columns.Add("NAME", typeof(string));
                dtfilter.Columns.Add("COL1", typeof(string));
                dtfilter.Columns.Add("COL2", typeof(string));
                string FromDt = "", ToDt = "";
                string student_type = "", month_id = "";

                try
                {
                    FromDt = sgen.SaveDate_dt(model[0].Col17.Trim(), true).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

                    ToDt = sgen.SaveDate_dt(model[0].Col18.Trim(), true).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                }
                catch { Exception ex; }

                if (sgen.GetSession(MyGuid, "student_type") != null)
                {
                    student_type = sgen.GetSession(MyGuid, "student_type").ToString();
                }
                string Fee_TypeId = "0", Head_Id = "0", category_id = "0", class_id = "0", section_id = "0", student_id = "0";

                category_id = "'" + string.Join(",", model[0].SelectedItems2).Replace(",", "','") + "'";
                class_id = "'" + string.Join(",", model[0].SelectedItems3).Replace(",", "','") + "'";
                section_id = "'" + string.Join(",", model[0].SelectedItems4).Replace(",", "','") + "'";
                student_id = "'" + string.Join(",", model[0].SelectedItems5).Replace(",", "','") + "'";

                if (category_id == "''") { category_id = ""; }
                if (class_id == "''") { class_id = ""; }
                if (section_id == "''") { section_id = ""; }
                if (student_id == "''") { student_id = ""; }


                //if (sgen.GetSession(MyGuid, "needstudent") != null)
                //{ student_id = sgen.GetAllSelect(ddl_student); }
                DataRow dr = dtfilter.NewRow();
                dr["NAME"] = "CLASS";
                dr["COL1"] = class_id;
                dr["COL2"] = model[0].Col20;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "SECTION";
                dr["COL1"] = section_id;
                dr["COL2"] = model[0].Col21;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "CLASS_CAT";
                dr["COL1"] = category_id;
                dr["COL2"] = model[0].Col19;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "STUDENT";
                dr["COL1"] = student_id;
                dr["COL2"] = student_id;

                dtfilter.Rows.Add(dr);


                dr = dtfilter.NewRow();
                dr["NAME"] = "FeeType";
                dr["COL1"] = Fee_TypeId;
                dr["COL2"] = model[0].Col22;
                dtfilter.Rows.Add(dr);


                dr = dtfilter.NewRow();
                dr["NAME"] = "HeadType";
                dr["COL1"] = Head_Id;
                dr["COL2"] = model[0].Col23;
                dtfilter.Rows.Add(dr);


                dr = dtfilter.NewRow();
                dr["NAME"] = "academic_year";
                dr["COL1"] = Ac_Year_id;
                dr["COL2"] = Ac_Year;

                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "DateRange";
                dr["COL1"] = FromDt;
                dr["COL2"] = ToDt;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "StudentType";
                dr["COL1"] = student_type;
                dr["COL2"] = student_type;
                dtfilter.Rows.Add(dr);

                dr = dtfilter.NewRow();
                dr["NAME"] = "MONTH";
                dr["COL1"] = month_id;
                dr["COL2"] = "";
                dtfilter.Rows.Add(dr);

                if (dtfilter.Rows.Count > 0)
                {
                    sgen.SetSession(MyGuid, "dtfilter", dtfilter);
                }
            }

            else if (command == "student")
            {
                Boolean student_type = false;
                if (model[0].Col12 == "Permanent Applicant Detail")
                {
                    sgen.SetSession(MyGuid, "student_type", "True");
                    student_type = true;
                }
                if (model[0].Col12 == "Temperory Applicant Detail")
                {
                    sgen.SetSession(MyGuid, "student_type", "False");
                    student_type = false;
                }

                try
                {
                    string category_id = "", classid = "", section = "", column = "";
                    category_id = "'" + string.Join(",", model[0].SelectedItems2).Replace(",", "','") + "'";
                    classid = "'" + string.Join(",", model[0].SelectedItems3).Replace(",", "','") + "'";
                    section = "'" + string.Join(",", model[0].SelectedItems4).Replace(",", "','") + "'";
                    mq = "select sa_id as vch_num,(replace(first_name, '0', '')|| ' '|| replace(middle_name, '0', '')|| ' '||replace(last_name, '0', '')) AS name from student_applicant_details " +
                        " where usession='" + Ac_Year_id + "' and class_applied in (" + classid + ") and    client_unit_id='" + unitid_mst + "' and  student_status='temporary'";
                    DataTable dt = sgen.getdata(userCode, mq);

                    if (student_type == true)
                    {
                        if (category_id != "" && classid == "" && section == "")
                        {
                            column = "and  b.class_applied in (select add_class_id from add_class where categoryType in (" + category_id + ")) ";


                        }

                        else if (category_id != "" && classid == "" && section != "")
                        {
                            column = "and  b.class_applied in (select add_class_id from add_class where categoryType in (" + category_id + ") and b.section in (" + section + ") ) ";


                        }

                        else if (category_id == "" && classid != "" && section == "")
                        {
                            column = "and  b.class_applied in (" + classid + ") ";


                        }

                        else if (category_id == "" && classid != "" && section != "")
                        {
                            column = "and  b.class_applied in (" + classid + ") and b.section in (" + section + ")";


                        }
                        #region
                        else if (category_id != "" && classid != "" && section == "")
                        {
                            column = "and  b.class_applied in (" + classid + ")";


                        }
                        else if (category_id == "" && classid != "" && section == "")
                        {
                            column = "and  b.class_applied in (" + classid + ")";

                        }
                        #endregion
                        else if (category_id != "" && classid != "" && section != "")
                        {
                            column = "and  b.class_applied in (" + classid + ") and b.section in (" + section + ")  ";


                        }

                        mq = "select a.regnumber as vch_num,(replace(a.first_name,'0','')||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0','')) AS name from user_details a," +
                                   "student_detail b where b.Academic_year_Id='" + Ac_Year_id + "' " + column + " and  a.vch_num=b.vch_num and a.status='active'  and  a.client_unit_id='" + unitid_mst + "'" +
                                   " and a.type='STD'";

                    }

                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        TempData[MyGuid + "Tlist5"] = model[0].TList5 = mod5 = sgen.dt_to_selectlist(dt);

                    }
                    else { TempData[MyGuid + "Tlist5"] = model[0].TList5 = mod5; }



                }
                catch (Exception ex)
                {

                }


            }
            ModelState.Clear();
            return PartialView(model);
        }
        #endregion
        #region Fine Setting
        public ActionResult late_fee()
        {
            MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
            FillMst(MyGuid);
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "LATE FEE FINE SETTING";
            if (model[0].Col14 == "7002.19")
            {
                model[0].Col9 = "LATE FEE FINE WAIVE OFF SETTINGS";
            }
            model[0].Col10 = "enx_tab";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "EFS";
            List<SelectListItem> md1 = new List<SelectListItem>();
            TempData[MyGuid + "_TList1"] = model[0].TList1 = md1;
            model[0].SelectedItems1 = new string[] { "" };

            model[0].LTM1 = new List<Tmodelmain>();
            Tmodelmain tmltm2 = new Tmodelmain();
            tmltm2.Col1 = "1";
            model[0].LTM1.Add(tmltm2);
            return View(model);
        }
        public List<Tmodelmain> new_late_fee(List<Tmodelmain> model)
        {
            model = getnew(model);
            model[0].Col17 = sgen.server_datetime_local(userCode);
            var tm = model.FirstOrDefault();
            #region Dropdwon
            List<SelectListItem> mod1 = new List<SelectListItem>();
            #endregion
            #region ddls
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = cmd_Fun.lib_class(userCode, unitid_mst);
            model[0].SelectedItems1 = new string[] { "" };
            #endregion

            if (model[0].Col14 == "7002.19") //orginal page mid=7002.6
            {
                Make_query("late_fee", "Select For Waive Off", "WAVEOFF", "1", MyGuid);
                ViewBag.scripCall += "callFoo('Select For Waive Off');";
            }
            return model;
        }
        [HttpPost]
        public ActionResult late_fee(List<Tmodelmain> model, string command, string hfrow)
        {
            try
            {
                type_desc = "Fees Fine Setting";
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                if (model[0].SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (command == "New")
                {
                    model = new_late_fee(model);
                }
                else if (command == "Cancel")
                {
                    return CancelFun(model);
                }
                else if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Add")
                {
                    try
                    {
                        Tmodelmain ntm1 = new Tmodelmain();
                        ntm1.Col1 = (Convert.ToInt32(model[0].LTM1.Max(x => sgen.Make_int(x.Col1))) + 1).ToString();
                        model[0].LTM1.Add(ntm1);
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                    }
                    catch (Exception ex) { ViewBag.scripCall = "showmsgJS(1,'" + ex.Message.ToString() + "',0);"; }
                }
                else if (command == "Remove")
                {
                    if (model[0].LTM1.Count > 1) model[0].LTM1.RemoveAt(sgen.Make_int(hfrow));
                    else
                    {
                        ViewBag.scripCall = "showmsgJS(1,'You cannot remove last entry',2)";
                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        return View(model);
                    }
                    ViewBag.vnew = "disabled='disabled'";
                    ViewBag.vedit = "disabled='disabled'";
                    ViewBag.vsave = "";
                    ViewBag.vsavenew = "";
                }
                else if (command == "Save" || command == "Update" || command == "Save & New" || command == "Update & New")
                {
                    string fees_setting = "";
                    cond = "";
                    var tmodel = model.FirstOrDefault();
                    string currdate = "";
                    DataTable dtstr = new DataTable();
                    dtstr = cmd_Fun.GetStructure(userCode, model[0].Col10.Trim());
                    currdate = sgen.server_datetime(userCode);

                    #region dtstr
                    if (sgen.GetSession(MyGuid, "EDMODE").ToString().Equals("Y"))
                    {
                        isedit = true;
                        vch_num = model[0].Col16;
                        cond = " and " + model[0].Col8.Replace("=", "<>") + "";

                    }
                    else
                    {
                        isedit = false;
                        mq = "select max(to_number(vch_num)) as auto_genid from " + model[0].Col10.Trim() + " a where type='" + model[0].Col12.Trim() + "'" + model[0].Col11.Trim() + "";
                        vch_num = sgen.genNo(userCode, mq, 6, "auto_genid");
                        model[0].Col16 = vch_num;
                    }
                    fees_setting = (model[0].Col18 == "1") ? "S" : "F";
                    string[] ddlclass = string.Join(",", model[0].SelectedItems1).Split(',');
                    foreach (string itemclass in ddlclass)
                    {
                        if (itemclass != "")
                        {
                            string class_name = ((List<SelectListItem>)TempData[MyGuid + "_TList1"]).SingleOrDefault(item => item.Value == itemclass.ToString()).Text.ToString();

                            mq = "select DISTINCT vch_num from " + model[0].Col10 + " where  type='EFS' and ref_code='" + itemclass + "' " + model[0].Col11 + " " + cond + "";
                            string res = sgen.seekval(userCode, mq, "vch_num");
                            if (!res.Trim().Equals("0"))
                            {
                                ViewBag.scripCall = "showmsgJS(1,'" + class_name + " Fine Slab Already Exist on Document No. " + res + "',2)";
                                return View(model);
                            }
                            int lenn = model[0].LTM1.Count();
                            for (int k = 0; k < lenn; k++)
                            {
                                DataRow dr = dtstr.NewRow();
                                dr["rec_id"] = "0";
                                dr["vch_num"] = vch_num;
                                dr["vch_date"] = sgen.Make_date_S(model[0].Col17);
                                dr["type"] = model[0].Col12;
                                dr["type_desc"] = type_desc;
                                dr["col1"] = fees_setting;
                                dr["col2"] = model[0].LTM1[k].Col18;
                                dr["col3"] = model[0].LTM1[k].Col19;
                                if (model[0].Col14 == "7002.19")
                                {
                                    dr["col4"] = model[0].LTM1[k].Col20;
                                }
                                dr["col5"] = model[0].LTM1[k].Col1;
                                dr["ref_Code"] = itemclass;
                                dr = getsave(currdate, dr, model);
                                dtstr.Rows.Add(dr);
                            }
                        }
                    }
                    res = sgen.Update_data_fast1(userCode, dtstr, model[0].Col10, tmodel.Col8, isedit);
                    #endregion
                    if (res)
                    {
                        model = new List<Tmodelmain>();
                        model.Add(new Tmodelmain
                        {
                            Col10 = tm.Col10,
                            Col11 = tm.Col11,
                            Col12 = tm.Col12,
                            Col13 = "Save",
                            Col100 = "Save & New",
                            Col121 = "S",
                            Col122 = "<u>S</u>ave",
                            Col123 = "Save & Ne<u>w</u>",
                            Col14 = tm.Col14,
                            Col15 = tm.Col15,
                            Col9 = tm.Col9,
                            TList1 = mod1,
                            SelectedItems1 = new string[] { "" },
                            LTM1 = new List<Tmodelmain>()
                        });
                        Tmodelmain tmltm2 = new Tmodelmain();
                        tmltm2.Col1 = "1";
                        model[0].LTM1.Add(tmltm2);
                        if (command.Trim().ToUpper().Equals("SAVE") || command.Trim().ToUpper().Equals("UPDATE"))
                        {
                            ViewBag.vnew = "";
                            ViewBag.vedit = "";
                            ViewBag.vsave = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.vsavenew = "disabled='disabled'";
                            ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');disableForm();";
                        }
                        else if (command.Trim().ToUpper().Equals("SAVE & NEW") || command.Trim().ToUpper().Equals("UPDATE & NEW"))
                        {
                            try
                            {
                                model = new_late_fee(model);
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Data Saved Successfully');";
                            }
                            catch (Exception ex) { }
                        }
                    }
                    else
                    {

                        ViewBag.vnew = "disabled='disabled'";
                        ViewBag.vedit = "disabled='disabled'";
                        ViewBag.vsave = "";
                        ViewBag.vsavenew = "";
                        ViewBag.scripCall += "mytoast('error', 'toast-top-right', 'Data Not Saved');";
                    }
                }
            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);




        }
        #endregion
        #region Education Report
        #region Fees Report
        public ActionResult fee_rpts()
        {
            MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);

            FillMst(MyGuid);
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);


            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();

            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";

            tm1.Col9 = "FEE REPORTS";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = MyGuid.Trim();
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult fee_rpts(List<Tmodelmain> model, string command)
        {
            try
            {

                string class_id = "", section_id = "0", student_id = "0", ac_yr_id = "0", ac_yr = "0", month_id = "0", FromDt = "0", ToDt = "0", Fee_TypeId = "0", Head_Id = "0", class_cat_id = "0", student_type = "";
                string class_Rpt = "", section_Rpt = "", student_Rpt = "", month_Rpt = "", Fee_Rpt = "", Head_Rpt = "", class_cat_Rpt = "";
                string rpt_type, xfromdt = "", xTodt = "", cons = "", cnditn = "";
                string fdt = "", tdt = "", title = "", btnval = "";
                int seektype = 0;
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                if (sgen.GetSession(MyGuid, "RPTCMD") != null)
                {
                    command = sgen.GetSession(MyGuid, "RPTCMD").ToString();
                    if (sgen.GetSession(MyGuid, "dtfilter") != null)
                    {
                        DataTable dtfliter = new DataTable();
                        dtfliter = (DataTable)sgen.GetSession(MyGuid, "dtfilter");


                        class_cat_id = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL1");
                        class_cat_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL2");
                        class_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL2");
                        class_id = sgen.seekval_dt(dtfliter, "NAME='CLASS'", "COL1");
                        class_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS'", "COL2");
                        section_id = sgen.seekval_dt(dtfliter, "NAME='SECTION'", "COL1");
                        section_Rpt = sgen.seekval_dt(dtfliter, "NAME='SECTION'", "COL2");
                        student_id = sgen.seekval_dt(dtfliter, "NAME='STUDENT'", "COL1");
                        student_Rpt = sgen.seekval_dt(dtfliter, "NAME='STUDENT'", "COL2");
                        month_id = sgen.seekval_dt(dtfliter, "NAME='MONTH'", "COL1");
                        month_Rpt = sgen.seekval_dt(dtfliter, "NAME='MONTH'", "COL2");
                        Fee_TypeId = sgen.seekval_dt(dtfliter, "NAME='FeeType'", "COL1");
                        Fee_Rpt = sgen.seekval_dt(dtfliter, "NAME='FeeType'", "COL2");
                        Head_Id = sgen.seekval_dt(dtfliter, "NAME='HeadType'", "COL1");
                        Head_Rpt = sgen.seekval_dt(dtfliter, "NAME='HeadType'", "COL2");
                        ac_yr_id = sgen.seekval_dt(dtfliter, "NAME='academic_year'", "COL1");
                        ac_yr = sgen.seekval_dt(dtfliter, "NAME='academic_year'", "COL2");
                        FromDt = sgen.seekval_dt(dtfliter, "NAME='DateRange'", "COL1");
                        ToDt = sgen.seekval_dt(dtfliter, "NAME='DateRange'", "COL2");
                        student_type = sgen.seekval_dt(dtfliter, "NAME='StudentType'", "COL1");

                        if (!FromDt.Trim().Equals("") && !ToDt.Trim().Equals(""))
                        {
                            //xfromdt = Convert.ToDateTime(FromDt).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                            //xTodt = Convert.ToDateTime(ToDt).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);

                            xfromdt = sgen.Make_date(FromDt, "yyyy-MM-dd").ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);//08042020
                            xTodt = sgen.Make_date(ToDt, "yyyy-MM-dd").ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);//08042020


                        }

                        rpt_type = "," + class_cat_Rpt + "," + class_Rpt + "," + section_Rpt + "," + student_Rpt + "," + Fee_Rpt + "," + Head_Rpt + "";


                        sgen.SetSession(MyGuid, "sa_id", student_id);



                    }
                }
                if (command == "Callback")
                {
                    model = StartCallback(model);
                }

                else if (command == "Fee Structure")
                {
                    string cond = "";
                    string group = "";
                    string sel = "";
                    string condition = "where";
                    string groupby = "group by";

                    if (!ac_yr_id.Equals("") && !ac_yr_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select academic_year_id,'" + ac_yr + "' as academic_year"; else sel = sel + " ,academic_year_id,'" + ac_yr + "' as academic_year";
                        if (cond.Trim().Equals("")) cond = " where academic_year_id In(" + ac_yr_id + ")"; else cond = cond + " and academic_year_id In(" + ac_yr_id + ")";
                        if (group.Trim().Equals("")) group = " group by academic_year_id"; else group = group + " ,academic_year_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All' as  academic_year,'All' as academic_year_id"; else sel = sel + " ,'All' as academic_year,'All' as academic_year_id"; }

                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_id,class"; else sel = sel + " ,class_id,class";
                        if (cond.Trim().Equals("")) cond = " where class_id In(" + class_id + ")"; else cond = cond + " and class_id In(" + class_id + ")";
                        if (group.Trim().Equals("")) group = " group by frequency_id,class_id"; else group = group + " ,frequency_id,class_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All' as  class,'All' as class_id"; else sel = sel + " ,'All' as class,'All' as class_id"; }

                    // classcategory

                    if (!class_cat_id.Equals("") && !class_cat_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_cat,cat_name"; else sel = sel + " ,class_cat,cat_name";
                        if (cond.Trim().Equals("")) cond = " where class_cat In(" + class_cat_id + ")"; else cond = cond + " and class_cat In(" + class_cat_id + ")";
                        if (group.Trim().Equals("")) group = " group by frequency_id,class_cat"; else group = group + " ,frequency_id,class_cat";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All Class Category' as  cat_name,'All' as class_cat"; else sel = sel + " ,'All Class Category' as cat_name,'All' as  class_cat"; }
                    // fee type

                    if (!Fee_TypeId.Equals("") && !Fee_TypeId.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select feetypename,feetype_id"; else sel = sel + " ,feetypename,feetype_id";
                        if (cond.Trim().Equals("")) cond = " where feetype_id In(" + Fee_TypeId + ")"; else cond = cond + " and feetype_id In(" + Fee_TypeId + ")";
                        if (group.Trim().Equals("")) group = " group by feetype_id"; else group = group + " ,feetype_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All' as  feetypename,feetype_id"; else sel = sel + " ,'All' as feetypename,feetype_id"; }

                    // school_fee_head

                    if (!Head_Id.Equals("") && !Head_Id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select HeadName,FeeHead_Id"; else sel = sel + " ,HeadName,FeeHead_Id";
                        if (cond.Trim().Equals("")) cond = " where FeeHead_Id In(" + Head_Id + ")"; else cond = cond + " and FeeHead_Id In(" + Head_Id + ")";
                        if (group.Trim().Equals("")) group = " group by FeeHead_Id"; else group = group + " ,FeeHead_Id,feetype_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All' as  feetypename,feetype_id"; else sel = sel + " ,'All' as feetypename,feetype_id"; }

                    cond = cond + "  and client_unit_id='" + unitid_mst + "'";

                    DataTable dt = new DataTable();

                    mq = "select a.*,b.master_name as HeadName,d.FeeTypeName ,e.class,e.CategoryType AS class_cat,f.master_name as cat_name," +
                        "(CASE WHEN b.section_strength='B' THEN 'For Both New and Old Students' WHEN b.section_strength='O' then 'For Old Students' else 'For New Students' END) " +
                                   "as Studenttype,b.section_strength as Feetype from fees_detail a " +
                        "inner join school_fee_type d on d.FeeType_Id = a.FeeType_Id and  a.client_unit_id = d.client_unit_id" +
                        " inner join add_class e on a.class_id = e.add_class_id and e.type = 'EAC'  and a.client_unit_id = e.client_unit_id" +
                        " inner join master_setting f on f.master_id = e.categoryType and f.type = 'ECC'  and a.client_unit_id = f.client_unit_id " +
                        "inner join master_setting b on b.master_id = a.FeeHead_Id and b.type = 'EFH'  and a.client_unit_id = b.client_unit_id and b.master_type='Education Fees Head' and b.sectionid= a.feetype_id" +
                        "  where a.type = 'STR'  and a.client_unit_id = '" + unitid_mst + "' and fee_amount>0";


                    string myquery = sel + ",HeadName,FrequencyName,FeeTypeName,Fee_Amount,class_cat,'" + ac_yr + "' as academic_year," +
                        " due_month as month_id,monthname as month_name ,Studenttype, Feetype from (" + mq + ")tab1" + cond;
                    dt = sgen.getdata(userCode, myquery);
                    if (dt.Rows.Count > 0)
                    {

                        //string rpt = "../../erp/schoolReports_Rpts/fee_detail_ram.rpt";
                        string rpt = "../schoolReports_Rpts/fee_detail_ram.rpt";
                        sgen.open_report_bydt_xml(userCode, dt, rpt, "Fee Structure And Summary");
                        ViewBag.scripCall += "showRptnew('Fee Structure And Summary');";

                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";


                    }
                    else
                    {
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                    }
                }

                else if (command == "Fee Collection")
                {
                    string cond = "";
                    string group = "";
                    string sel = "";


                    if (FromDt != "" && ToDt != "")
                    {

                        if (!ac_yr_id.Equals("") && !ac_yr_id.Equals("2"))
                        {
                            if (sel.Trim().Equals("")) sel = "select academic_year_id,academic_year"; else sel = sel + " academic_year_id,academic_year";
                            if (cond.Trim().Equals("")) cond = " where academic_year_id In(" + ac_yr_id + ")"; else cond = cond + " and academic_year_id In(" + ac_yr_id + ")";
                            if (group.Trim().Equals("")) group = " group by academic_year_id,academic_year"; else group = group + " ,academic_year_id,academic_year";
                        }
                        else { if (sel.Trim().Equals("")) sel = "select academic_year"; else sel = sel + " ,academic_year_id"; }

                        if (!class_cat_id.Equals("") && !class_cat_id.Equals("2"))
                        {
                            if (sel.Trim().Equals("")) sel = "select class_cat,cat_name"; else sel = sel + " ,class_cat,cat_name";
                            if (cond.Trim().Equals("")) cond = " where class_cat In(" + class_cat_id + ")"; else cond = cond + " and class_cat In(" + class_cat_id + ")";
                            if (group.Trim().Equals("")) group = " group by class_cat,cat_name"; else group = group + " ,class_cat,cat_name";
                        }
                        else { if (sel.Trim().Equals("")) sel = "select cat_name,class_cat"; else sel = sel + " ,cat_name,class_cat"; }

                        if (!class_id.Equals("") && !class_Rpt.Equals("2"))
                        {
                            if (sel.Trim().Equals("")) sel = "select class_name,class_id"; else sel = sel + " ,class_name,class_id";
                            if (cond.Trim().Equals("")) cond = " where class_id In(" + class_id + ")"; else cond = cond + " and class_id In(" + class_id + ")";
                            if (group.Trim().Equals("")) group = " group by class_name,class_id"; else group = group + " ,class_name,class_id";
                        }
                        else { if (sel.Trim().Equals("")) sel = "select  class_name,class_id"; else sel = sel + " ,class_name,class_id"; }
                        if (!section_id.Equals("") && !section_id.Equals("2"))
                        {
                            if (sel.Trim().Equals("")) sel = "select section_name,section_id"; else sel = sel + " ,section_name,section_id";
                            if (cond.Trim().Equals("")) cond = " where section_id In(" + section_id + ")"; else cond = cond + " and section_id In(" + section_id + ")";
                            if (group.Trim().Equals("")) group = " group by section_name,section_id"; else group = group + " ,section_name,section_id";
                        }
                        else { if (sel.Trim().Equals("")) sel = "select section_name,section_id"; else sel = sel + " , section_name,section_id"; }


                        cond = cond + "  and client_unit_id='" + unitid_mst + "' and type='ERD'";
                        group = group + ",payment_mode,receipt_date,sequence";


                        string mq1 = "select b.sequence, b.categorytype as class_cat,g.master_name as cat_name,srd.class_id,b.class as class_name," +
                            " srd.section_id,a.master_name as section_name,srd.regno,srd.month_id,srd.month_name,srd.academic_year_id,e.academic_year" +
                            ",to_char(convert_tz(srd.receipt_date,'UTC','" + sgen.Gettimezone() + "')," + "'" + sgen.Getsqldateformat() + "')as receipt_date," +
                            "srd.mode_of_payment,ms.master_name as payment_mode,srd.receipt_amount,srd.client_id,srd.client_unit_id,srd.type from " +
                            "student_receipt_detail srd inner  join  add_class b on b.add_class_id = srd.class_id and b.type='EAC'  " +
                            "and b.client_unit_id=srd.client_unit_id  inner join add_academic_year e on  e.academic_year_id = srd.academic_year_id" +
                            "  and e.client_id=srd.client_id and e.type='ACY' inner join master_setting g on b.categorytype = g.master_id" +
                            " and g.type = 'ECC'  and srd.client_unit_id=g.client_unit_id inner join master_setting a on " +
                            "srd.section_id=a.master_id and a.type='ECS'   and find_in_set(srd.client_unit_id,a.client_unit_id)=1 inner join" +
                            " master_setting ms on ms.master_id=srd.mode_of_payment and ms.type='EPM'  and srd.mode_of_payment!= '0' where mode_of_payment!='0'";


                        string mq = sel + " ,payment_mode,sum(to_number(receipt_amount)) as receipt_amount,receipt_date ,'" + xfromdt + "' as from_date,'" + xTodt + "'" +
                            " as to_date  from (" + mq1 + ") tab" + cond + " and to_date(receipt_date,'" + sgen.Getsqldateformat() + "') between  to_date('" + FromDt + "','yyyy-MM-dd') and to_date('" + ToDt + "','yyyy-MM-dd')" + group + "" +
                            " order by to_number(sequence),receipt_date";




                        mq = "select * from (" + mq + ") a where receipt_amount>0";
                        DataTable dt = sgen.getdata(userCode, mq);

                        if (dt.Rows.Count > 0)
                        {

                            //string rpt1 = "../../erp/schoolReports_Rpts/feecollection.rpt";
                            string rpt1 = "../schoolReports_Rpts/feecollection.rpt";
                            sgen.open_report_bydt_xml(userCode, dt, rpt1, "Fee Collection Report");
                            ViewBag.scripCall += "showRptnew('Fee Collection Report');";

                            //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                        }
                        else
                        {

                            ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                            return View(model);
                        }
                    }

                }
                else if ((command == "Student Due Fee") || (command == "Family Due Fee"))
                {
                    string cond = "";
                    string group = "";
                    string sel = "";


                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {

                        if (cond.Trim().Equals("")) cond = " where classid In(" + class_id + ")"; else cond = cond + " and classid In(" + class_id + ")";

                    }



                    if (!section_id.Equals("") && !section_id.Equals("2"))
                    {

                        if (cond.Trim().Equals("")) cond = " where section_id In(" + section_id + ")"; else cond = cond + " and section_id In(" + section_id + ")";

                    }

                    string currdate = sgen.server_datetime_local(userCode);
                    currdate = sgen.Savedate(currdate, true);
                    currdate = (Convert.ToDateTime(currdate).AddDays(1)).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                    //string from_ac_dt = (Convert.ToDateTime(Ac_From_Date)).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                    string from_ac_dt = sgen.Make_datetime(Ac_From_Date).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);//08042020

                    string mq3 = "(b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)";
                    mq = sgen.Fee_AllData(clientid_mst, unitid_mst, Ac_Year_id, mq3);

                    mq = "select a.*,a.Due_Bal_Amt as Due_Amount, a.Class Classname,Section as sectionname" +
                        " from (" + mq + ") a " + cond + " and a.Due_Bal_Amt>0 order by family_id";

                    DataTable dt = sgen.getdata(userCode, mq);

                    if (dt.Rows.Count > 0)
                    {

                        if (command == "Family Due Fee")
                        {
                            sgen.open_report_bydt_xml(userCode, dt, "Fee_Due_family", "Due Fee");
                        }
                        else
                        {
                            sgen.open_report_bydt_xml(userCode, dt, "Fee_Due", "Due Fee");
                        }
                        ViewBag.scripCall += "showRptnew('Due Fee');";

                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";


                    }
                    else
                    {

                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                        return View(model);
                    }
                }

                else if ((command == "Student Fee Receipt(With Con.)") || ((command == "Student Fee Receipt(WithOut Con.)")))
                {
                    string cond = "";
                    string group = "";
                    string sel = "";


                    //Class
                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {

                        if (cond.Trim().Equals("")) cond = " where classid In(" + class_id + ")"; else cond = cond + " and classid In(" + class_id + ")";

                    }



                    if (!section_id.Equals("") && !section_id.Equals("2"))
                    {

                        if (cond.Trim().Equals("")) cond = " where section_id In(" + section_id + ")"; else cond = cond + " and section_id In(" + section_id + ")";

                    }

                    string rpt = "";
                    group = "a.RegNo,a.Receipt_No,a.vch_date ,a.type,((ud.first_name)|| ' '|| REPLACE(ud.middle_name, '0','')|| ' '|| REPLACE(ud.last_name,'0', ''))," +
                           " ((ud.f_firstname) || ' ' || Replace(ud.f_middlename, '0', '') || ' ' || Replace(ud.f_lastname, '0', '')), a.Class_Id,cl.class, " +
                           "a.section_id,cs.master_name, sd.roll_number";
                    //if (sgen.GetSession(MyGuid, "STD_DETAIL").ToString() == "Y")
                    //{
                    //rpt = "../../erp/schoolReports_Rpts/Student_Fee_Receipt.rpt";
                    rpt = "../schoolReports_Rpts/Student_Fee_Receipt.rpt";

                    //}
                    //else
                    //{
                    //    rpt = "../../erp/schoolReports_Rpts/Student_Fee_Receipt_Summ.rpt";



                    //}

                    string type_cond = "";


                    if (command == "Student Fee Receipt(WithOut Con.)")
                    {
                        type_cond = " and a.type in('ERD')";

                    }
                    else { type_cond = " and a.type in('ERD','ERC','ERW')"; }

                    mq = "SELECT (case when a.type='ERD' and sum(a.receipt_amount)>0 then 'Regular Fees' when a.type='ERD' and sum(a.receipt_amount)<0 then 'Reversible Fees' " +
                        "when a.type='ERC' then 'Concession Fees' else 'Mid Term Concession' End) as Status , '" + xfromdt + "' as " +
                        "FromDt,'" + xTodt + "' as ToDt, ((ud.first_name)|| ' '|| REPLACE(ud.middle_name, '0','')|| ' '|| REPLACE(ud.last_name,'0', '')) as Student_Name" +
                        ",((ud.f_firstname)||' '||Replace(ud.f_middlename,'0','')||' '||Replace(ud.f_lastname,'0','') ) as Father_Name," +
                        " a.Class_Id as Classid,cl.class as classname, a.section_id,cs.master_name as Sectionname, a.RegNo as regnumber,sd.roll_number,a.Receipt_No" +
                        ",a.vch_date as Receipt_Date,sum(a.Receipt_Amount) as Receipt_Amount from student_receipt_detail a" +
                        " INNER JOIN user_details ud on a.RegNo=ud.RegNumber and ud.type='STD' and ud.client_unit_id='" + unitid_mst + "' inner join student_detail sd " +
                        "on a.RegNo=sd.Reg_no and sd.type='STD'  and a.client_unit_id=sd.client_unit_id inner join" +
                        " add_class cl on a.Class_Id=cl.add_class_id and cl.type='EAC'  and a.client_unit_id=cl.client_unit_id " +
                        "inner join master_setting cs on a.Section_Id=cs.master_id and cs.type='ECS'  " +
                        "and find_in_set(a.client_unit_id,cs.client_unit_id)=1 WHERE  a.client_unit_id='" + unitid_mst + "' and  " +
                        " to_date(to_char(convert_tz(a.vch_date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "')" +
                        " between to_date('" + FromDt + "' ,'yyyy-MM-dd') and  to_date('" + ToDt + "' ,'yyyy-MM-dd') " + type_cond + " GROUP by " + group + " " +
                        " order by cast(a.class_id as int), a.RegNo,a.vch_date";

                    mq = "select * from (" + mq + ") a " + cond + "";

                    DataTable dt = sgen.getdata(userCode, mq);

                    if (dt.Rows.Count > 0)
                    {
                        sgen.open_report_bydt(userCode, dt, rpt, "Student Fee Receipt");
                        ViewBag.scripCall += "showRptnew('Student Fee Receipt');";

                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";


                    }
                    else
                    {

                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                        return View(model);
                    }
                }



                else if ((command == "Head Wise Receipt (With Con.)") || (command == "Head Wise Receipt (WithOut Con.)"))
                {
                    string cond = "";
                    string group = "";
                    string sel = "";



                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {

                        if (cond.Trim().Equals("")) cond = " where class_id In(" + class_id + ")"; else cond = cond + " and class_id In(" + class_id + ")";

                    }



                    if (!section_id.Equals("") && !section_id.Equals("2"))
                    {

                        if (cond.Trim().Equals("")) cond = " where section_id In(" + section_id + ")"; else cond = cond + " and section_id In(" + section_id + ")";

                    }

                    string type_cond = "";
                    if (command == "Head Wise Receipt (With Con.)")
                    {
                        type_cond = " and a.type in('ERD','ERC','ERW')";
                    }

                    else
                    {
                        type_cond = " and a.type in('ERD')";

                    }
                    mq = "SELECT  (case when a.type='ERD' and sum(a.receipt_amount)>0 then 'Regular Fees' when a.type='ERD' and sum(a.receipt_amount)<0 then 'Reversible Fees'" +
                        " when a.type='ERC' then 'Concession Fees' else 'Mid Term Concession' End) as Status , '" + xfromdt + "' as FromDt,'" + xTodt + "' as ToDt, " +
                        " ft.FeeTypeName,h.master_name as HeadName, a.Class_Id,cl.class as classname, a.section_id,cs.master_name as" +
                        " Sectionname,a.Receipt_No,a.vch_date as Receipt_Date,sum(a.Receipt_Amount) as Receipt_Amount from student_receipt_detail a " +
                        "  inner join add_class cl on a.Class_Id=cl.add_class_id and cl.type='EAC' and a.client_unit_id=cl.client_unit_id" +
                        " inner join master_setting cs on a.Section_Id=cs.master_id and cs.type='ECS' and find_in_set(a.client_unit_id,cs.client_unit_id)=1 " +
                        "inner join school_fee_type ft on a.Fee_type_id=ft.FeeType_Id and  a.client_unit_id=ft.client_unit_id " +
                        "and (ft.master_type='0' or ft.master_type='')  INNER join  master_setting h on a.Fee_Head_id=h.master_id and h.type='EFH' and h.master_type='Education Fees Head'  and " +
                        "a.client_unit_id=h.client_unit_id and  h.sectionid=a.Fee_type_id WHERE  a.client_unit_id='" + unitid_mst + "'" +
                        " and  to_date(to_char(convert_tz(a.vch_date, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "'),'" + sgen.Getsqldateformat() + "')" +
                        " between to_date('" + FromDt + "' ,'yyyy-MM-dd') and  to_date('" + ToDt + "' ,'yyyy-MM-dd') " + type_cond + " GROUP by ft.feetypename," +
                        "h.master_name,  a.Receipt_No,a.vch_date ,a.type,ft.FeeTypeName,h.master_name , a.Class_Id,cl.class, a.section_id,cs.master_name order " +
                        " by cast(a.class_id as int), a.vch_date";

                    mq = "select * from (" + mq + ") a " + cond + "";

                    DataTable dt = sgen.getdata(userCode, mq);

                    if (dt.Rows.Count > 0)
                    {

                        string rpt = "";

                        //rpt = "../../erp/schoolReports_Rpts/HeadWise_Receipt.rpt";
                        rpt = "../schoolReports_Rpts/HeadWise_Receipt.rpt";

                        sgen.open_report_bydt(userCode, dt, rpt, "HeadWise Fee Receipt");
                        ViewBag.scripCall += "showRptnew('HeadWise Fee Receipt');";

                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";


                    }
                    else
                    {

                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                        return View(model);
                    }
                }



                else if (command == "Fee Reminder")
                {
                    string currdate = sgen.server_datetime_local(userCode);
                    currdate = sgen.Savedate(currdate, true);
                    currdate = (Convert.ToDateTime(currdate)).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                    //currdate = sgen.Make_date(currdate).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);//08042020
                    //string from_ac_dt = (Convert.ToDateTime(Ac_From_Date)).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                    string mq3 = "(b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)";




                    mq = sgen.Fee_AllData(clientid_mst, unitid_mst, Ac_Year_id, mq3);
                    mq = "select * from (" + mq + ") a ";

                    DataTable dtrem = sgen.getdata(userCode, mq);


                    string SMS = "", Email = "", DetailSms = "0", DetailEmail = "0";
                    string smsid = "000006";// SMS and Email OF Homework
                    string emailid = "", phoneno = "";
                    string[] config = sgen.get_config(userCode, "000006", clientid_mst, unitid_mst, "SMS");
                    SMS = config[0].ToString(); Email = config[1].ToString(); DetailSms = config[2].ToString(); DetailEmail = config[3].ToString();

                    if (dtrem.Rows.Count > 0)
                    {
                        #region Email
                        string mailfrom = "";
                        DataTable datatable = new DataTable();
                        datatable = sgen.getdata(userCode, "select com_email from company_profile where Company_Profile_Id='" + clientid_mst + "' and type='CP'");
                        if (datatable.Rows.Count > 0)
                        {

                            mailfrom = Convert.ToString(datatable.Rows[0]["com_email"]);

                        }

                        if (DetailEmail == "1")
                        {
                            Mailer mailer = new Mailer(userCode, clientid_mst, unitid_mst, MyGuid);
                            for (Int32 j = 0; j < dtrem.Rows.Count; j++)
                            {

                                string Email_To = dtrem.Rows[j]["email_id"].ToString();

                                var body = new StringBuilder();

                                string student_name = dtrem.Rows[j]["student_name"].ToString();
                                string class_sec = dtrem.Rows[j]["class"].ToString() + " " + dtrem.Rows[j]["section"].ToString();

                                body.AppendLine(@"<b style='color:#3caee9; font-size: 20px'>Fee Reminder </b><br /><hr style='border:1px solid black' />" +
                                         "<p>Hi <b>Dear Parents, Your Ward " + student_name + " Class " + class_sec + "  Fee " + dtrem.Rows[j]["Due_bal_amt"] + " Is Due  </b>,</p><table style='font-weight:600'>");

                                body.AppendLine(@"</table><br /><p></p><p>ThankYou,<br />" + clientname_mst + "<br /></p><br />");
                                // sgen.Send_mail_SA1(userCode, clientid_mst, unitid_mst, mailfrom, Email_To, Email_To, body.ToString(), "Fee Reminder", "");

                                if ((Email_To != "") && (Email_To != "-") && (Email_To != "0"))
                                {
                                    mailer.Add_Mail(Email_To, "Fee Due Reminder", body.ToString());
                                }
                            }


                            mailer.Send_Email_Bulk();
                        }
                        #endregion

                        #region SMS
                        if (DetailSms == "1")
                        {
                            Mailer mailer = new Mailer(userCode, clientid_mst, unitid_mst, MyGuid);
                            BulkSMS bulk = new BulkSMS(userCode, clientid_mst, unitid_mst, MyGuid);
                            for (Int32 j = 0; j < dtrem.Rows.Count; j++)
                            {

                                string phone_no = dtrem.Rows[j]["PhoneNo"].ToString();
                                //phone_no = "9999266761";

                                string student_name = dtrem.Rows[j]["student_name"].ToString();
                                string class_sec = dtrem.Rows[j]["class"].ToString() + " " + dtrem.Rows[j]["section"].ToString();
                                string msg_txt = "Dear Parents, Your Ward " + student_name + " Class " + class_sec + "  Fee " + dtrem.Rows[j]["Due_bal_amt"] + " Is Due";

                                if ((phone_no != "") && (phone_no != "-") && (phone_no != "0"))
                                {
                                    bulk.Add_sms(phone_no, msg_txt);

                                }


                            }


                            mailer.Send_Email_Bulk();
                            bulk.Send_SMS_Bulk();
                        }
                        #endregion
                    }
                }



            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region result report
        public ActionResult result_rpts()
        {
            MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);

            FillMst(MyGuid);
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);


            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();

            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";

            tm1.Col9 = "RESULT REPORTS";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = MyGuid.Trim();
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult result_rpts(List<Tmodelmain> model, string command)
        {
            try
            {

                string class_id = "", section_id = "0", student_id = "0", ac_yr_id = "0", ac_yr = "0", month_id = "0", FromDt = "0", ToDt = "0", Fee_TypeId = "0", Head_Id = "0", class_cat_id = "0", student_type = "";
                string class_Rpt = "", section_Rpt = "", student_Rpt = "", month_Rpt = "", Fee_Rpt = "", Head_Rpt = "", class_cat_Rpt = "";
                string rpt_type, xfromdt = "", xTodt = "", cons = "", cnditn = "";
                string fdt = "", tdt = "", title = "", btnval = "";
                int seektype = 0;
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();

                if (command == "Callback")
                {
                    model = StartCallback(model);
                }

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region attendance report
        public ActionResult atten_rpt()
        {
            MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);

            FillMst(MyGuid);
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);


            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();

            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";

            tm1.Col9 = "STUDENT ATTENDANCE REPORTS";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = MyGuid.Trim();
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult atten_rpt(List<Tmodelmain> model, string command)
        {
            try
            {

                string class_id = "", section_id = "0", student_id = "0", ac_yr_id = "0", ac_yr = "0", month_id = "0", FromDt = "0", ToDt = "0", Fee_TypeId = "0", Head_Id = "0", class_cat_id = "0", student_type = "";
                string class_Rpt = "", section_Rpt = "", student_Rpt = "", month_Rpt = "", Fee_Rpt = "", Head_Rpt = "", class_cat_Rpt = "";
                string rpt_type, xfromdt = "", xTodt = "", cons = "", cnditn = "";
                string fdt = "", tdt = "", title = "", btnval = "";
                int seektype = 0;
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                if (sgen.GetSession(MyGuid, "RPTCMD") != null)
                {
                    command = sgen.GetSession(MyGuid, "RPTCMD").ToString();
                    if (sgen.GetSession(MyGuid, "dtfilter") != null)
                    {
                        DataTable dtfliter = new DataTable();
                        dtfliter = (DataTable)sgen.GetSession(MyGuid, "dtfilter");


                        class_cat_id = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL1");
                        class_cat_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL2");
                        class_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL2");
                        class_id = sgen.seekval_dt(dtfliter, "NAME='CLASS'", "COL1");
                        class_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS'", "COL2");
                        section_id = sgen.seekval_dt(dtfliter, "NAME='SECTION'", "COL1");
                        section_Rpt = sgen.seekval_dt(dtfliter, "NAME='SECTION'", "COL2");
                        student_id = sgen.seekval_dt(dtfliter, "NAME='STUDENT'", "COL1");
                        student_Rpt = sgen.seekval_dt(dtfliter, "NAME='STUDENT'", "COL2");
                        month_id = sgen.seekval_dt(dtfliter, "NAME='MONTH'", "COL1");
                        month_Rpt = sgen.seekval_dt(dtfliter, "NAME='MONTH'", "COL2");
                        ac_yr_id = sgen.seekval_dt(dtfliter, "NAME='academic_year'", "COL1");
                        ac_yr = sgen.seekval_dt(dtfliter, "NAME='academic_year'", "COL2");
                        FromDt = sgen.seekval_dt(dtfliter, "NAME='DateRange'", "COL1");
                        ToDt = sgen.seekval_dt(dtfliter, "NAME='DateRange'", "COL2");
                        student_type = sgen.seekval_dt(dtfliter, "NAME='StudentType'", "COL1");

                        if (!FromDt.Trim().Equals("") && !ToDt.Trim().Equals(""))
                        {
                            //xfromdt = Convert.ToDateTime(FromDt).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                            //xTodt = Convert.ToDateTime(ToDt).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);

                            xfromdt = sgen.Make_date(FromDt).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);//08042020
                            xTodt = sgen.Make_date(ToDt).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);//08042020


                        }

                        rpt_type = "," + class_cat_Rpt + "," + class_Rpt + "," + section_Rpt + "," + student_Rpt + "," + Fee_Rpt + "," + Head_Rpt + "";


                        sgen.SetSession(MyGuid, "sa_id", student_id);



                    }
                }
                if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Student Monthly Attendance")
                {
                    string cond = "";
                    string group = "";
                    string sel = "";
                    string condition = "where";
                    string groupby = "group by";


                    //acadmic year
                    if (!ac_yr_id.Equals("") && !ac_yr_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select academic_year_id,academic_year"; else sel = sel + " ,academic_year_id,academic_year";
                        if (cond.Trim().Equals("")) cond = " where academic_year_id In(" + ac_yr_id + ")"; else cond = cond + " and academic_year_id In(" + ac_yr_id + ")";
                        if (group.Trim().Equals("")) group = " group by academic_year_id"; else group = group + " ,academic_year_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All' as academic_year,academic_year_id"; else sel = sel + " ,'All' as academic_year,academic_year_id"; }

                    // from date and todate

                    //month
                    if (!month_id.Equals("") && !month_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select month_id,month_name"; else sel = sel + " ,month_id,month_name";
                        if (cond.Trim().Equals("")) cond = " where month_id In(" + month_id + ")"; else cond = cond + " and month_id In(" + month_id + ")";
                        if (group.Trim().Equals("")) group = " group by month_id"; else group = group + " ,month_id";
                    }
                    else
                    {
                        if (sel.Trim().Equals("")) sel = "select Month_name,month_id"; else sel = sel + " ,Month_name,month_id";
                        if (group.Trim().Equals("")) group = " group by month_id"; else group = group + " ,month_id";
                    }

                    // class category

                    if (!class_cat_id.Equals("") && !class_cat_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_cat,cat_name"; else sel = sel + " ,class_cat,cat_name";
                        if (cond.Trim().Equals("")) cond = " where class_cat In(" + class_cat_id + ")"; else cond = cond + " and class_cat In(" + class_cat_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_cat"; else group = group + " ,class_cat";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select cat_name,class_cat"; else sel = sel + " , cat_name, class_cat"; }



                    // class
                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_id,class_name"; else sel = sel + " ,class_id,class_name";
                        if (cond.Trim().Equals("")) cond = " where class_id In(" + class_id + ")"; else cond = cond + " and class_id In(" + class_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_id"; else group = group + " ,class_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select class_name,class_id"; else sel = sel + " , class_name,class_id"; }

                    // section
                    if (!section_id.Equals("") && !section_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select section_id,section_name"; else sel = sel + " ,section_id,section_name";
                        if (cond.Trim().Equals("")) cond = " where section_id In(" + section_id + ")"; else cond = cond + " and section_id In(" + section_id + ")";
                        if (group.Trim().Equals("")) group = " group by section_id"; else group = group + " ,section_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select section_name,section_id"; else sel = sel + " , section_name,section_id "; }


                    cond = cond + " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    group = group + " ,reg_id,academic_year,Month_name,class_cat ,class_id,cat_name,class_name,section_name,first_name,fathersname,F1 ,S1,F2,S2,F3,S3,F4,S4,F5,S5,F6," +
                        "S6,F7,S7,F8,S8,F9,S9,F10,S10,F11,S11,F12,S12,F13,S13,F14,S14,F15,S15,F16,S16,F17,S17,F18,S18,F19,S19,F20,S20,F21,S21,F22,S22,F23,S23,F24," +
                        "S24,F25,S25,F26,S26,F27,S27,F28,S28,F29,S29,F30,S30,F31,S31,Roll_no,section_id";

                    mq = "select * from( select (b.first_name)|| ' '|| replace(b.middle_name, '0', '')|| ' '|| (replace(b.last_name, '0', '')) AS first_name," +
                        " b.f_firstname|| ' '|| replace(b.f_middlename, '0', '')|| ' '|| (replace(b.f_lastname, '0', '')) AS fathersname,c.academic_year," +
                        "d.class as class_name,e.master_name as section_name,d.categoryType as class_cat,f.master_name as cat_name,a.* from vw_monyhly_attendance a  " +
                        "inner join user_details b on a.reg_id= b.regnumber and b.type='STD' and a.client_id=b.client_id and a.client_unit_id=b.client_unit_id and a.student_id=b.vch_num" +
                        "   inner join add_class d on a.class_id = d.add_class_id and d.type='EAC' and a.client_id= d.client_id and a.client_unit_id= d.client_unit_id " +
                        "inner join add_academic_year c on a.academic_year_id = c.academic_year_id and a.client_id= c.client_id  and c.type='ACY'" +
                        "  inner join master_setting e on a.section_id= e.master_id and e.type= 'ECS' and find_in_set(a.client_unit_id," +
                        " e.client_unit_id)=1  inner join master_setting f on f.master_id= d.categoryType and f.type= 'ECC' and a.client_id= f.client_id and " +
                        "a.client_unit_id= f.client_unit_id)tab";

                    DataTable dt = new DataTable();
                    string myquery = sel + " ,first_name,fathersname,F1,S1,F2,S2,F3,S3,F4,S4,F5,S5,F6,S6,F7,S7,F8,S8,F9,S9,F10,S10," +
                        "F11,S11,F12,S12,F13,S13,F14,S14,F15,S15,F16,S16,F17,S17,F18,S18,F19,S19,F20,S20,F21,S21,F22,S22,F23,S23,F24,S24,F25," +
                        "S25,F26,S26,F27,S27,F28,S28,F29,S29,F30,S30,F31,S31,Reg_id,Roll_no from (" + mq + ")tab1" + cond + group;
                    dt = sgen.getdata(userCode, myquery);
                    if (dt.Rows.Count > 0)
                    {

                        sgen.SetSession(MyGuid, "Student_Monthly_Attendance", dt);
                        //string rpt = "../../erp/schoolReports_Rpts/Student_Monthly_Attendance.rpt";
                        string rpt = "../schoolReports_Rpts/Student_Monthly_Attendance.rpt";

                        sgen.open_report_bydt(userCode, (DataTable)sgen.GetSession(MyGuid, "Student_Monthly_Attendance"), rpt, "Monthly Attendnce");
                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                        ViewBag.scripCall += "showRptnew('Monthly Attendnce');";


                    }
                    else
                    {
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                    }
                }

                else if (command == "Show Attendance Summary")
                {
                    string cond = "";
                    string group = "";
                    string sel = "";
                    string condition = "where";
                    string groupby = "group by";
                    DataTable dt = new DataTable();

                    if (!ac_yr_id.Equals("") && !ac_yr_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select academic_year_id"; else sel = sel + " ,academic_year_id";
                        if (cond.Trim().Equals("")) cond = " where academic_year_id In(" + ac_yr_id + ")"; else cond = cond + " and academic_year_id In(" + ac_yr_id + ")";
                        if (group.Trim().Equals("")) group = " group by academic_year_id"; else group = group + " ,academic_year_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All' as  academic_year,academic_year_id"; else sel = sel + " ,'All' as academic_year,"; }

                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_id,class"; else sel = sel + " ,class_id,class";
                        if (cond.Trim().Equals("")) cond = " where class_id In(" + class_id + ")"; else cond = cond + " and class_id In(" + class_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_id"; else group = group + " ,class_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All' class,class_id"; else sel = sel + " ,'All' as class, class_id"; }

                    // section
                    if (!section_id.Equals("") && !section_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select section_id,master_name as section_name"; else sel = sel + " ,section_id,master_name as section_name";
                        if (cond.Trim().Equals("")) cond = " where section_id In(" + section_id + ")"; else cond = cond + " and section_id In(" + section_id + ")";
                        if (group.Trim().Equals("")) group = " group by section_id"; else group = group + " ,section_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All' as section_name, section_id"; else sel = sel + " ,'All' as section_name,section_id "; }

                    // class category

                    if (!class_cat_id.Equals("") && !class_cat_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_cat,cat_name"; else sel = sel + " ,class_cat,cat_name";
                        if (cond.Trim().Equals("")) cond = " where class_cat In(" + class_cat_id + ")"; else cond = cond + " and class_cat In(" + class_cat_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_cat"; else group = group + " ,class_cat";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All Class Category' as  cat_name, class_cat"; else sel = sel + " ,'All Class Category' as cat_name,  class_cat"; }


                    cond = cond + " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    string checkdate = "";

                    group = group + " ,class,section_id,master_name,class_cat,cat_name,class_id";

                    if (FromDt == "" || ToDt == "")
                    { }
                    else
                    {

                        //checkdate = "and to_date(atten_date,'" + sgen.Getsqldateformat() + "') between to_date('" + FromDt + "','yyyy/mm/dd') and to_date('" + ToDt + "','yyyy/mm/dd')";
                        checkdate = "and to_date(to_char(atten_date,'ddMMyyyy'),'ddMMyyyy') between to_date('" + FromDt + "','" + sgen.Getsqldatetimeformat() + "') " +
             "and to_date('" + ToDt + "','" + sgen.Getsqldatetimeformat() + "')";
                    }
   ;

                    mq = "select Academic_year_Id,class,class_id,section_id,master_name,reg_id,sum(total_fhpresent) as total_fhpresent," +
                        "sum(total_shpresent) as total_shpresent,sum(total_fhabsent) as total_fhabsent,sum(total_shabsent) as total_shabsent," +
                        "sum(total_leaves) as total_leaves,sum(total_fhleaves) as total_fhleaves,sum(total_shleaves) as total_shleaves," +
                        "sum(total_present) as total_present,sum(total_absent) as total_absent,sum(total_wkoff)as total_wkoff," +
                        "sum(total_holidays)as total_holidays,client_id,client_unit_id,atten_date,class_cat,cat_name from ( select a.Academic_year_Id,b.Class" +
                        ",c.master_name,a.Client_id,a.Client_unit_id,to_char(convert_tz(a.atten_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "') as atten_date," +
                           "a.class_id,a.section_id,a.reg_id,b.categoryType as class_cat,d.master_name as cat_name,(case when a.First_Half='P' " +
                           "then count(a.First_Half) else 0 end) as total_fhpresent,(case when a.Second_Half='P' then count(a.Second_Half) else 0 end)" +
                           " as total_shpresent,(case when a.First_Half='A' then count(a.First_Half) else 0 end) as total_fhabsent,(case when a.Second_Half='A'" +
                           " then count(a.Second_Half) else 0 end) as total_shabsent,(a.Leaves) as total_leaves,(case when a.First_Half='L' then count(a.First_Half) " +
                           "else 0 end) as total_fhleaves,(case when a.Second_Half='L' then count(a.Second_Half) else 0 end) as total_shleaves," +
                           "(a.presents) as total_present,(a.Absent) as total_absent,(a.Wkoff) as total_wkoff,(a.holidays) as total_holidays" +
                           " from vw_student_attendance a  inner join add_class b on a.class_id=b.add_class_id and b.type='EAC' and a.client_id=b.client_id" +
                           " and a.client_unit_id=b.client_unit_id inner join master_setting c on a.section_id=c.master_id  and c.type='ECS'" +
                           " and find_in_set( a.client_unit_id,c.client_unit_id)=1 inner join master_setting d on d.master_id=b.categoryType " +
                           "and d.type='ECC' and a.client_id=d.client_id and a.client_unit_id=d.client_unit_id where a.client_id='" + clientid_mst + "'" +
                           " and a.client_unit_id='" + unitid_mst + "' " + checkdate + " group by a.Academic_year_Id,a.Client_id,a.Client_unit_id,a.class_id,a.section_id," +
                           " a.Reg_id,a.atten_date,b.categoryType,b.Class,c.master_name,d.master_name,a.First_Half,a.Second_Half,a.Leaves,a.presents" +
                           ",a.Absent,a.Wkoff,a.holidays)tab  group by Academic_year_Id,class,class_id,section_id,master_name,client_id,client_unit_id," +
                           "atten_date,class_cat,cat_name,reg_id";

                    string myquery = sel + ",count(distinct reg_id)  as total_std,sum(total_fhpresent) as total_fhpresent,sum(total_shpresent) as total_shpresent," +
                        "sum(total_fhabsent) as total_fhabsent,sum(total_shabsent) as total_shabsent,sum(total_leaves) as total_leaves,sum(total_fhleaves) " +
                        "as total_fhleaves,sum(total_shleaves) as total_shleaves ,sum(total_present) as total_present,sum(total_absent) as total_absent," +
                        "sum(total_wkoff)as total_wkoff,sum(total_holidays)as total_holidays,'" + ac_yr + "' as academic_year,'" + FromDt + "' as fromdate," +
                        "'" + ToDt + "' as todate from (" + mq + ")tab1" + cond + "  " + "" + group;
                    dt = sgen.getdata(userCode, myquery);
                    if (dt.Rows.Count > 0)
                    {

                        sgen.SetSession(MyGuid, "Student_Monthly_Attendance", dt);
                        //string rpt = "../../erp/schoolReports_Rpts/classwise_atten_summ.rpt";
                        string rpt = "../schoolReports_Rpts/classwise_atten_summ.rpt";

                        sgen.open_report_bydt(userCode, (DataTable)sgen.GetSession(MyGuid, "Student_Monthly_Attendance"), rpt, "MOnthly attendnce");
                        ViewBag.scripCall += "showRptnew('Monthly Attendnce');";

                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";


                    }
                    else
                    {
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                    }
                }

                else if (command == "Actual Attendance")
                {
                    string cond = "";
                    string group = "";
                    string sel = "";
                    string condition = "where";
                    string groupby = "group by";



                    // class
                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_id,class_name"; else sel = sel + " ,class_id,class_name";
                        if (cond.Trim().Equals("")) cond = " where class_id In(" + class_id + ")"; else cond = cond + " and class_id In(" + class_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_id"; else group = group + " ,class_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select class_name,class_id"; else sel = sel + " , class_name,class_id"; }

                    // section
                    if (!section_id.Equals("") && !section_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select section_id,section_name"; else sel = sel + " ,section_id,section_name";
                        if (cond.Trim().Equals("")) cond = " where section_id In(" + section_id + ")"; else cond = cond + " and section_id In(" + section_id + ")";
                        if (group.Trim().Equals("")) group = " group by section_id"; else group = group + " ,section_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select section_name,section_id"; else sel = sel + " , section_name,section_id "; }

                    //string from_date = DateTime.ParseExact(FromDt, "yyyy-MM-dd", CultureInfo.InvariantCulture).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                    //string To_date = DateTime.ParseExact(ToDt, "yyyy-MM-dd", CultureInfo.InvariantCulture).ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);

                    // checkdate = "and  convert_tz(atten_date,'0.00','"+sgen.Gettimezone()+"') between '" + FromDt + "' and '" + ToDt + "'";
                    //string checkdate = "and (atten_date) between to_date('" + FromDt + "','yyyy-MM-dd') and to_date('" + ToDt + "','yyyy-MM-dd')";

                    // string checkdate = "and to_date(atten_date,'" + sgen.Getsqldateformat() + "') between to_date('" + from_date + "','" + sgen.Getsqldateformat() + "') and to_date('" + To_date + "','" + sgen.Getsqldateformat() + "')";
                    //string checkdate = "and to_date(atten_date,'dd/mm/yyyy') between to_date('" + FromDt + "','yyyy/mm/dd') and to_date('" + ToDt + "','yyyy/mm/dd')";
                    string checkdate = "and to_date(to_char(atten_date,'ddMMyyyy'),'ddMMyyyy') between to_date('" + FromDt + "','" + sgen.Getsqldatetimeformat() + "') " +
              "and to_date('" + ToDt + "','" + sgen.Getsqldatetimeformat() + "')";



                    cond = cond + " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
                    group = group + " ";

                    // reena 6 and last line
                    // reena why case inside case
                    mq = "select count(reg_id) as Total_std,sum((case when upper(gender)='MALE' then 1 else 0 END  ) )as Total_Male,sum((case when upper(gender)='FEMALE' then 1 else 0 END  ) )as Total_Female, sum(Presents)Presents,sum(Absent)" +
                " Absent,sum(Leaves)Leaves ,sum(Wkoff)Wkoff,sum(Holidays)Holidays,sum(F_P_M)F_P_M,sum(F_A_M)F_A_M,sum(F_L_M)F_L_M," +
                "sum(F_W_M)F_W_M,sum(F_H_M)F_H_M,sum(S_P_M)S_P_M,sum(S_A_M)S_A_M,sum(S_L_M)S_L_M,sum(S_W_M)S_W_M,sum(S_H_M)S_H_M," +
                "sum(F_P_F)F_P_F,sum(F_L_F)F_L_F,sum(F_W_F)F_W_F,sum(F_H_F)F_H_F,sum(S_P_F)S_P_F,sum(S_A_F)S_A_F,sum(S_L_F)S_L_F," +
                "sum(S_W_F)S_W_F, sum(F_A_F) as F_A_F,sum(S_H_F)S_H_F,Month_Id,Month_Name," +
                "  to_char(Atten_Date,'" + sgen.Getsqldateformat() + "') Atten_Date ,Academic_year_Id,Client_id,client_unit_id,class_name,section_name,class_id,section_id from (select (case when((a.First_Half|| a.Second_Half) = " +
                "'PP') then 1 else (case when((substr((a.First_Half|| a.Second_Half), 1, 1) = 'P') or(substr((a.First_Half|| a.Second_Half)," +
                " 2, 1) = 'P')) then 0.5 else 0 end) end) AS Presents,    (case when((a.First_Half|| a.Second_Half) = 'AA') " +
                "then 1 else (case when((substr((a.First_Half|| a.Second_Half), 1, 1) = 'A') or(substr((a.First_Half|| a.Second_Half), 2, 1)" +
                " = 'A')) then 0.5 else 0 end) end) AS Absent,  (case when((a.First_Half|| a.Second_Half) = 'LL') then 1 else" +
                " (case when((substr((a.First_Half|| a.Second_Half), 1, 1) = 'L') or(substr((a.First_Half|| a.Second_Half), 2, 1) = 'L')) " +
                "then 0.5 else 0 end) end) AS Leaves,  (case when((a.First_Half|| a.Second_Half) = 'WW') then 1 else" +
                " (case when((substr((a.First_Half|| a.Second_Half), 1, 1) = 'W') or(substr((a.First_Half|| a.Second_Half), 2, 1) = 'W'))" +
                " then 0.5 else 0 end) end) AS Wkoff, (case when((a.First_Half|| a.Second_Half) = 'HH') then 1 else" +
                " (case when((substr((a.First_Half|| a.Second_Half), 1, 1) = 'H') or(substr((a.First_Half|| a.Second_Half), 2, 1) = 'H')) " +
                "then 0.5 else 0 end) end) AS Holidays,(case when upper(b.gender)= 'MALE' and a.First_Half = 'P' then '1' else '0' end) as F_P_M," +
                "(case when upper(b.gender)= 'MALE'" +
                " and a.First_Half = 'A' then '1' else '0' end) as F_A_M,(case when upper(b.gender)= 'MALE' and a.First_Half = 'L' then '1' else '0'" +
                " end) as F_L_M,(case when upper(b.gender)= 'MALE' and a.First_Half = 'W' then '1' else '0' end) as F_W_M,(case " +
                "when upper(b.gender)= 'MALE' and a.First_Half = 'H' then '1' else '0' end) as F_H_M,(case when upper(b.gender)= 'MALE'" +
                " and a.Second_Half = 'P' then '1' else '0' end) as S_P_M,(case when upper(b.gender)= 'MALE' and a.Second_Half = 'A' then '1'" +
                " else '0' end) as S_A_M,(case when upper(b.gender)= 'MALE' and a.Second_Half = 'L' then '1' else '0' end) as S_L_M," +
                "(case when upper(b.gender)= 'MALE' and a.Second_Half = 'W' then '1' else '0' end) as S_W_M,(case when upper(b.gender)= 'MALE' " +
                "and a.Second_Half = 'H' then '1' else '0' end) as S_H_M,(case when upper(b.gender)= 'FEMALE' and a.First_Half = 'P' then '1'" +
                " else '0' end) as F_P_F,(case when upper(b.gender)= 'FEMALE' and a.First_Half = 'A' then '1' else '0' end) as F_A_F," +
                "(case when upper(b.gender)= 'FEMALE' and a.First_Half = 'L' then '1' else '0' end) as F_L_F,(case when upper(b.gender)= " +
                "'FEMALE' and a.First_Half = 'W' then '1' else '0' end) as F_W_F,(case when upper(b.gender)= 'FEMALE' and a.First_Half = 'H'" +
                " then '1' else '0' end) as F_H_F,(case when upper(b.gender)= 'FEMALE' and a.Second_Half = 'P' then '1' else '0' end) as S_P_F," +
                "(case when upper(b.gender)= 'FEMALE' and a.Second_Half = 'A' then '1' else '0' end) as S_A_F,(case when upper(b.gender)= 'FEMALE'" +
                " and a.Second_Half = 'L' then '1' else '0' end) as S_L_F,(case when upper(b.gender)= 'FEMALE' and a.Second_Half = 'W' then '1' else" +
                " '0' end) as S_W_F,(case when upper(b.gender)= 'FEMALE' and a.Second_Half = 'H' then '1' else '0' end) as S_H_F,a.Rec_Id AS Rec_Id," +
                "a.Month_Id AS Month_Id,a.Month_Name AS Month_Name,a.Atten_Date AS Atten_Date,a.Academic_year_Id AS Academic_year_Id,a.First_Half AS " +
                "First_Half,a.Second_Half AS Second_Half,a.Ent_By AS Ent_By,a.Ent_Date AS Ent_Date,a.Edit_by AS Edit_by,a.Edit_Date AS Edit_Date," +
                "a.Created_date AS Created_date,a.Vch_num AS Vch_num,a.Vch_date AS Vch_date,a.Type AS Type,a.Client_id AS Client_id," +
                "a.Client_unit_id AS Client_unit_id,a.Class_id AS Class_id,a.Section_Id AS Section_Id,b.RegNumber AS regnumber," +
                "a.Reg_id AS Reg_id,a.Roll_no AS Roll_no,b.gender,c.class as class_name,ms.master_name as section_name" +
                " from student_attendance a inner join  user_details b on a.Reg_id = b.RegNumber and a.Type = 'STD' and b.type = 'STD' and a.student_id=b.vch_num" +
                " inner join add_class C on C.add_class_id= a.class_id and c.type= 'EAC'  and c.client_id = a.client_id and " +
                "c.client_unit_id = a.client_unit_id inner join master_setting ms on ms. master_id = a.section_id and ms.type= 'ECS'" +
                " and  find_in_set(ms.client_unit_id ,a.client_unit_id)=1 where   a.client_unit_id= '" + unitid_mst + "'" +
                " " + checkdate + ") tab group by  Month_Id, Month_Name, Academic_year_Id, Client_id, client_unit_id, class_name, section_name" +
                ",class_id,section_id ,to_char(Atten_Date,'" + sgen.Getsqldateformat() + "') order by month_id,Atten_Date";





                    string myquery = sel + " , '" + FromDt + "' as from_date,'" + ToDt + "' as To_date,Total_std,Total_Male,Total_FeMale,Presents,Absent," +
                        "Leaves,Wkoff,Holidays,F_P_M,F_A_M,F_L_M,F_W_M,F_H_M,S_P_M" +
                        ",S_A_M,S_L_M,S_W_M,S_H_M,F_P_F,F_L_F,F_W_F,F_H_F,S_P_F,S_A_F,S_L_F,S_W_F,F_A_F,S_H_F,Month_Id,Month_Name, Atten_Date,Academic_year_Id" +
                        ",Client_id,client_unit_id,class_name,section_name from (" + mq + ")tab1" + cond;

                    DataTable dt = sgen.getdata(userCode, myquery);
                    if (dt.Rows.Count > 0)
                    {
                        string rpt = "atten";
                        sgen.open_report_bydt_xml(userCode, dt, rpt, "Monthly Attendnce");
                        ViewBag.scripCall += "showRptnew('Monthly Attendnce');";

                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_xml.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";


                    }
                    else
                    {

                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                        return View(model);
                    }
                }

                else if (command == "Student Attendance")
                {
                    //Response.Redirect("~/Education/std_att?m_id=" + EncryptDecrypt.Encrypt(model[0].Col15) + "&mid=" + EncryptDecrypt.Encrypt(model[0].Col14));
                    return RedirectToAction("std_att", "Education", new { m_id = EncryptDecrypt.Encrypt(model[0].Col15), mid = EncryptDecrypt.Encrypt(model[0].Col14) });
                }

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #region applicant report
        public ActionResult applicant_rpt()
        {
            MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);

            FillMst(MyGuid);
            mid_mst = EncryptDecrypt.Decrypt(Request.QueryString["mid"]);


            List<Tmodelmain> model = new List<Tmodelmain>();
            Tmodelmain tm1 = new Tmodelmain();

            tm1.Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";

            tm1.Col9 = "STUDENT APPLICANT REPORTS";
            tm1.Col14 = mid_mst.Trim();
            tm1.Col15 = MyGuid.Trim();
            model.Add(tm1);
            return View(model);
        }
        [HttpPost]
        public ActionResult applicant_rpt(List<Tmodelmain> model, string command)
        {
            try
            {

                string class_id = "", section_id = "0", student_id = "0", ac_yr_id = "0", ac_yr = "0", month_id = "0", FromDt = "0", ToDt = "0", Fee_TypeId = "0", Head_Id = "0", class_cat_id = "0", student_type = "";
                string class_Rpt = "", section_Rpt = "", student_Rpt = "", month_Rpt = "", Fee_Rpt = "", Head_Rpt = "", class_cat_Rpt = "";
                string rpt_type, xfromdt = "", xTodt = "", cons = "", cnditn = "";
                string fdt = "", tdt = "", title = "", btnval = "";
                int seektype = 0;
                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                if (sgen.GetSession(MyGuid, "RPTCMD") != null)
                {
                    command = sgen.GetSession(MyGuid, "RPTCMD").ToString();
                    if (sgen.GetSession(MyGuid, "dtfilter") != null)
                    {
                        DataTable dtfliter = new DataTable();
                        dtfliter = (DataTable)sgen.GetSession(MyGuid, "dtfilter");


                        class_cat_id = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL1");
                        class_cat_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL2");
                        class_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS_CAT'", "COL2");
                        class_id = sgen.seekval_dt(dtfliter, "NAME='CLASS'", "COL1");
                        class_Rpt = sgen.seekval_dt(dtfliter, "NAME='CLASS'", "COL2");
                        section_id = sgen.seekval_dt(dtfliter, "NAME='SECTION'", "COL1");
                        section_Rpt = sgen.seekval_dt(dtfliter, "NAME='SECTION'", "COL2");
                        student_id = sgen.seekval_dt(dtfliter, "NAME='STUDENT'", "COL1");
                        student_Rpt = sgen.seekval_dt(dtfliter, "NAME='STUDENT'", "COL2");
                        month_id = sgen.seekval_dt(dtfliter, "NAME='MONTH'", "COL1");
                        month_Rpt = sgen.seekval_dt(dtfliter, "NAME='MONTH'", "COL2");
                        //Fee_TypeId = sgen.seekval_dt(dtfliter, "NAME='FeeType'", "COL1");
                        //Fee_Rpt = sgen.seekval_dt(dtfliter, "NAME='FeeType'", "COL2");
                        //Head_Id = sgen.seekval_dt(dtfliter, "NAME='HeadType'", "COL1");
                        //Head_Rpt = sgen.seekval_dt(dtfliter, "NAME='HeadType'", "COL2");
                        ac_yr_id = sgen.seekval_dt(dtfliter, "NAME='academic_year'", "COL1");
                        ac_yr = sgen.seekval_dt(dtfliter, "NAME='academic_year'", "COL2");
                        FromDt = sgen.seekval_dt(dtfliter, "NAME='DateRange'", "COL1");
                        ToDt = sgen.seekval_dt(dtfliter, "NAME='DateRange'", "COL2");
                        student_type = sgen.seekval_dt(dtfliter, "NAME='StudentType'", "COL1");



                        rpt_type = "," + class_cat_Rpt + "," + class_Rpt + "," + section_Rpt + "," + student_Rpt + "," + Fee_Rpt + "," + Head_Rpt + "";


                        sgen.SetSession(MyGuid, "sa_id", student_id);



                    }
                }
                if (command == "Callback")
                {
                    model = StartCallback(model);
                }
                else if (command == "Permanent Applicant Detail")
                {
                    // sgen.SetSession(MyGuid, "student_type", "True");
                    //  student_type = sgen.GetSession(MyGuid, "student_type").ToString();
                    string cond = "";
                    string group = "";
                    string sel = "";
                    string condition = "where";
                    string groupby = "group by";


                    if (!ac_yr_id.Equals("") && !ac_yr_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select academic_year_id,'" + ac_yr + "' as academic_year"; else sel = sel + " ,academic_year_id,'" + ac_yr + "' as academic_year";
                        if (cond.Trim().Equals("")) cond = " where academic_year_id In(" + ac_yr_id + ")"; else cond = cond + " and academic_year_id In(" + ac_yr_id + ")";
                        if (group.Trim().Equals("")) group = " group by academic_year_id,vch_num"; else group = group + " ,academic_year_id,vch_num";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select academic_year, academic_year_id"; else sel = sel + " , academic_year,as academic_year_id"; }

                    // classcategory

                    if (!class_cat_id.Equals("") && !class_cat_id.Equals("2"))
                    {
                        //if (sel.Trim().Equals("")) sel = "select class_cat,cat_name"; else sel = sel + " ,class_cat,cat_name";
                        //if (cond.Trim().Equals("")) cond = " where class_cat In(" + class_cat_id + ")"; else cond = cond + " and class_cat In(" + class_cat_id + ")";
                        //if (group.Trim().Equals("")) group = " group by class_cat,vch_num"; else group = group + " ,class_cat,vch_num";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select 'All Class Category' as  cat_name,class_cat"; else sel = sel + " ,'All Class Category' as cat_name,class_cat"; }

                    //Class
                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_applied,class_Name"; else sel = sel + " ,class_applied,class_Name";
                        if (cond.Trim().Equals("")) cond = " where class_applied In(" + class_id + ")"; else cond = cond + " and class_applied In(" + class_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_applied,vch_num"; else group = group + " ,class_applied,vch_num";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select  class_name, class_applied"; else sel = sel + " ,class_name,class_applied"; }

                    // SECTION


                    if (!section_id.Equals("") && !section_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select section_id,section"; else sel = sel + " ,section_id,section";
                        if (cond.Trim().Equals("")) cond = " where section_id In(" + section_id + ")"; else cond = cond + " and section_id In(" + section_id + ")";
                        if (group.Trim().Equals("")) group = " group by section_id,vch_num"; else group = group + " ,section_id,vch_num";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select section,section_id"; else sel = sel + " ,section,section_id "; }
                    // student

                    if (!student_id.Equals("") && !student_id.Equals("2") && !student_id.Equals("0"))
                    {
                        if (sel.Trim().Equals("")) sel = "select regnumber,first_name"; else sel = sel + " ,regnumber,first_name";
                        if (cond.Trim().Equals("")) cond = " where upper(regnumber) In(" + student_id + ")"; else cond = cond + " and upper(regnumber) In(" + student_id + ")";
                        if (group.Trim().Equals("")) group = " group by regnumber"; else group = group + " ,regnumber";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select regnumber,first_name"; else sel = sel + " , regnumber,first_name "; }

                    cond = cond + " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";

                    group = group + ",class_cat,cat_name,class_Name,section,first_name, gender,nationality,dob,per_address, cur_address,adhaar_id,regnumber,f_firstname," +
                        "f_dob,f_qualification,f_occupation ,f_designation,f_adhaar_Id,f_annual_income,f_email,m_firstname,m_adhaar_id," +
                        "m_dob,f_con_number,m_occupation,m_qualification," +
                        " m_annual_income,m_email,m_designation,g_firstname,g_dob,g_qualification,g_occupation," +
                        "g_designation,m_con_number,g_adhaar_id,g_con_number,g_email,section_id";

                    if (sgen.GetSession(MyGuid, "sa_id") != null)
                    {
                        student_id = sgen.GetSession(MyGuid, "sa_id").ToString(); ;


                        DataTable dt = new DataTable();

                        //if (student_type == "True")
                        {


                            mq = @"select distinct (a.first_name)||' '||replace(a.middle_name,'0','')||' '|| replace( a.last_name,'0','') first_name
                    ,to_char(convert_tz(a.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as dob," +
                                "a.adhaar_id,a.gender,a.regnumber,a.nationality as nid,cs.country_name as nationality," +
                                "(a.per_address||' , '|| v.v_name||' , '||t.teh_name||' , '||d.district_name||' , '||a.per_city||' , '||s.state_name||' , '||cs.country_name)as per_address," +
                                "(a.cur_address||' , '|| av.v_name||' , '||at.teh_name||' , '||ad.district_name||' , '||a.cur_city||' , '||aas.state_name||' , '||acs.country_name)as cur_address," +
                                "sd.academic_year_id  ,(a.f_firstname)||' '||replace(a.f_middlename,'0','') ||' '||(replace(a.f_lastname,'0','')) AS f_firstname," +
                                "to_char(convert_tz(a.f_dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as f_dob," +
                                "a.f_qualification as fquaid,qa.master_name as f_qualification,a.f_occupation,a.f_designation," +
                                "a.f_annual_income,a.f_email,a.f_adhaar_Id,a.f_con_number,replace(a.m_firstname,'0','')||' '||" +
                                "replace(a.m_middlename,'0','')||' '||replace(a.m_lastname,'0','') AS m_firstname," +
                                "to_char(convert_tz(a.m_dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as m_dob" +
                                ",a.m_qualification as mquaid,mqa.master_name as m_qualification,a.m_occupation,a.m_designation," +
                                "a.m_annual_income,a.m_email,a.m_adhaar_id,a.m_con_number," +
                                "(a.g_firstname)||' '||replace(a.g_middlename,'0','')||' '||replace(a.g_lastname,'0','') AS g_firstname," +
                                "to_char(convert_tz(a.m_dob, 'UTC','" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') " +
                                "as g_dob,a.g_qualification as gquaid,gqa.master_name as g_qualification,a.g_occupation,a.g_designation," +
                                "a.g_adhaar_id,a.g_con_number,a.g_email,cl.categorytype as class_cat,cc.master_name as cat_name," +
                                "sd.class_applied,cl.class as class_name,sd.section as section_id,sec.master_name as section," +
                                "sd.vch_num,sd.client_id,sd.client_unit_id from user_details a inner join student_detail sd " +
                                "on a.regnumber= sd.reg_no and sd.type = a.type and sd.academic_year_id='" + ac_yr_id + "' and a.vch_num=sd.vch_num" +
                                " LEFT OUTER join master_setting qa on a.f_qualification=qa.master_id  and qa.type='EQU'" +
                                " and sd.client_id=qa.client_id and sd.client_unit_id=qa.client_unit_id LEFT OUTER join master_setting mqa" +
                                " on a.m_qualification= mqa.master_id and mqa.type='EQU' and sd.client_id=mqa.client_id and " +
                                "sd.client_unit_id=mqa.client_unit_id  LEFT OUTER join master_setting gqa on a.g_qualification= gqa.master_id" +
                                " and gqa.type='EQU'  and sd.client_id=gqa.client_id and sd.client_unit_id=gqa.client_unit_id LEFT OUTER join" +
                                " add_class cl on sd.class_applied= cl.add_class_id  and cl.type= 'EAC' and sd.client_id= cl.client_id and " +
                                "sd.client_unit_id= cl.client_unit_id LEFT OUTER join add_academic_year ac on sd.academic_year_id=" +
                                " ac.academic_year_id and sd.client_id= ac.client_id  LEFT OUTER " +
                                "join master_setting sec on sd.section= sec.master_id and sec.type= 'ECS' and sd.client_id= sec.client_id" +
                                " and sd.client_unit_id= sec.client_unit_id LEFT OUTER join (select distinct country_name, alpha_2 from" +
                                " country_state) cs on cs.alpha_2=a.nationality LEFT OUTER join (select distinct state_name, state_gst_code" +
                                " from country_state) s on s.state_gst_code=a.per_state LEFT OUTER join (select distinct v_name,v_id,type " +
                                "from country_state) v on v.v_id=a.per_village and v.type='csv' LEFT OUTER join (select distinct teh_name," +
                                "teh_id,type from country_state) t on t.teh_id=a.per_tehsil and t.type='csv' LEFT OUTER join " +
                                "(select distinct district_name,district_id,type from country_state) d on d.district_id=a.per_district" +
                                " and d.type='csv' LEFT OUTER join master_setting cc on cl.categorytype=cc.master_id  and cc.type= 'ECC' " +
                                " and cl.client_id= cc.client_id and cl.client_unit_id= cc.client_unit_id LEFT OUTER join " +
                                "(select distinct country_name, alpha_2 from country_state) acs on acs.alpha_2=a.CUR_COUNTRY " +
                                "LEFT OUTER join(select distinct state_name, state_gst_code from country_state) aas on aas.state_gst_code " +
                                "= a.cur_state LEFT OUTER join(select distinct v_name, v_id, type from country_state) av on" +
                                " av.v_id = a.cur_village and av.type = 'csv' LEFT OUTER join(select distinct teh_name, teh_id, type " +
                                "from country_state) at on at.teh_id = a.cur_tehsil and at.type = 'csv' LEFT OUTER join" +
                                "(select distinct district_name, district_id, type from country_state) ad on ad.district_id = a.cir_district" +
                                " and ad.type = 'csv'";
                        }

                        string myquery = sel + ",gender,nationality,dob,per_address,cur_address,adhaar_id,regnumber,f_firstname,f_dob,f_qualification,f_occupation," +
                            "f_designation,f_adhaar_Id,f_annual_income,f_email,m_firstname,m_adhaar_id,m_dob,f_con_number,m_occupation,m_con_number,m_qualification,m_annual_income,m_email,m_designation,g_firstname,g_dob,g_qualification,g_occupation,g_designation,g_adhaar_id," +
                            "g_con_number,g_email from (" + mq + ")tab" + cond + group;
                        dt = sgen.getdata(userCode, myquery);


                        sgen.SetSession(MyGuid, "sa_id", null);
                        sgen.SetSession(MyGuid, "Rpt_Menuid", null);

                        if (dt.Rows.Count > 0)
                        {
                            //string rpt = "../../erp/schoolReports_Rpts/cr_std_details.rpt";
                            string rpt = "../schoolReports_Rpts/cr_std_details.rpt";

                            sgen.open_report_bydt(userCode, dt, rpt, "Permanent Applicant Detail");
                            //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                            ViewBag.scripCall += "showRptnew('Permanent Applicant Detail');";


                        }
                        else
                        {
                            ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                        }

                    }
                }

                else if (command == "Temperory Applicant Detail")
                {
                    sgen.SetSession(MyGuid, "student_type", "False");
                    student_type = sgen.GetSession(MyGuid, "student_type").ToString();
                    string cond = "";
                    string group = "";
                    string sel = "";
                    string condition = "where";
                    string groupby = "group by";

                    if (!ac_yr_id.Equals("") && !ac_yr_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select academic_year_id,'" + ac_yr + "' as academic_year"; else sel = sel + " ,academic_year_id,'" + ac_yr + "' as academic_year";
                        if (cond.Trim().Equals("")) cond = " where academic_year_id In(" + ac_yr_id + ")"; else cond = cond + " and academic_year_id In(" + ac_yr_id + ")";
                        if (group.Trim().Equals("")) group = " group by academic_year_id,sa_id"; else group = group + " ,academic_year_id,sa_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select  academic_year, academic_year_id"; else sel = sel + " , academic_year, academic_year_id"; }

                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_applied,class_Name"; else sel = sel + " ,class_applied,class_Name";
                        if (cond.Trim().Equals("")) cond = " where class_applied In(" + class_id + ")"; else cond = cond + " and class_applied In(" + class_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_applied,sa_id"; else group = group + " ,class_applied,sa_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select   class_Name, class_applied"; else sel = sel + " ,class_Name, class_applied"; }

                    // classcategory

                    if (!class_cat_id.Equals("") && !class_cat_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_cat,cat_name"; else sel = sel + " ,class_cat,cat_name";
                        if (cond.Trim().Equals("")) cond = " where class_cat In(" + class_cat_id + ")"; else cond = cond + " and class_cat In(" + class_cat_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_cat,sa_id"; else group = group + " ,class_cat,sa_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select   cat_name,class_cat"; else sel = sel + " ,cat_name, class_cat"; }

                    cond = cond + " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";

                    //student

                    if (!student_id.Equals("") && !student_id.Equals("2") && !student_id.Equals("0"))
                    {
                        if (sel.Trim().Equals("")) sel = "select sa_id,first_name"; else sel = sel + " ,sa_id,first_name";
                        if (cond.Trim().Equals("")) cond = " where sa_id In(" + student_id + ")"; else cond = cond + " and sa_id In(" + student_id + ")";
                        if (group.Trim().Equals("")) group = " group by sa_id"; else group = group + " ,sa_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select sa_id,first_name"; else sel = sel + " , sa_id,first_name "; }


                    if (sgen.GetSession(MyGuid, "sa_id") != null)
                    {
                        student_id = sgen.GetSession(MyGuid, "sa_id").ToString(); ;


                        DataTable dt = new DataTable();
                        group = group + ",class_Name ,cat_name ,first_name,gender,nationality,dob,per_address,cur_address,adhaar_id," +
                              "f_firstname,f_dob,f_qualification, replace(f_occupation, '0', '-') ,f_designation,f_adhaar_Id," +
                              "f_annual_income,f_email,m_firstname,replace(m_occupation, '0', '-'), replace(m_designation, '0', '-')," +
                              "replace(m_annual_income, '0', '-'),m_adhaar_id,m_dob ,m_annual_income,m_email,f_con_number," +
                              "m_con_number,m_qualification,g_firstname,g_dob,g_qualification,g_occupation,g_designation ," +
                              "g_adhaar_id,g_con_number,g_email,class_cat";

                        if (student_type == "False")
                        {
                            //string mq = @"select a.sa_id,a.first_name,a.last_name,a.gender,c.add_class_id as class_applied,c.class,c.CategoryType as class_cat,d.master_name as cat_name,a.nationality,a.dob,a.per_address,a.religion,a.adhaar_id,a.f_firstname,a.f_lastname,a.f_dob,a.f_nationality,a.f_qualification,a.f_occupation,a.f_designation,a.f_annual_income,a.f_email,a.f_adhaar_Id,a.m_firstname,a.m_lastname,a.m_dob,a.m_nationality,a.m_qualification,a.m_occupation,a.m_designation,a.m_annual_income,a.m_email,a.m_adhaar_id,a.f_con_number,a.m_con_number,a.g_firstname,a.g_lastname,a.g_dob,a.g_qualification,a.g_occupation,a.g_designation,a.g_adhaar_id,a.g_con_number,a.g_email,b.academic_year,a.usession as academic_year_id from student_applicant_details a,add_academic_year b,add_class c,master_setting d where a.class_applied=c.add_class_id and c.type='EAC' and a.usession=b.academic_year_id and c.categoryType=d.master_id and d.type='ECC' and a.client_id='" + clientid_mst + "' and a.client_unit_id='" + unitid_mst + "' and  a.student_status='temporary'";
                            string mq = "select distinct a.first_name||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0','') AS first_name," +
                                "    to_char(convert_tz(a.dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as dob," +
                                          "a.sa_id,(a.per_address||' , '|| v.v_name||' , '||t.teh_name||' , '||d.district_name||' , '||" +
                                          "a.per_city||' , '||s.state_name||' , '||cs.country_name)as per_address," +
                                          "(a.cur_address||' , '|| av.v_name||' , '||at.teh_name||' , '||ad.district_name||' , " +
                                          "'||a.cur_city||' , '||aas.state_name||' , '||acs.country_name)as cur_address,a.adhaar_id," +
                                          "a.gender,a.regnumber,a.usession as academic_year_id,ac.academic_year,a.nationality as nid," +
                                          "cs.country_name as nationality,a.f_firstname||' '||replace(a.f_middlename,'0','')," +
                                          "' ',replace(a.f_lastname,'0','') AS f_firstname,to_char(convert_tz(a.f_dob, 'UTC', '" + sgen.Gettimezone() + "')," +
                                          " '" + sgen.Getsqldateformat() + "') as f_dob,a.f_qualification as fquaid,qa.master_name as f_qualification," +
                                          "a.f_occupation,a.f_designation,a.f_annual_income,a.f_email,a.f_adhaar_Id,a.f_con_number, " +
                                          "(a.m_firstname)||' '||replace(a.m_middlename,'0','')||' '||replace(a.m_lastname,'0','') AS m_firstname" +
                                          ",to_char(convert_tz(a.m_dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "') as m_dob," +
                                          "a.m_qualification as mquaid,mqa.master_name as m_qualification,a.m_occupation,a.m_designation,a.m_annual_income," +
                                          "a.m_email,a.m_adhaar_id,a.m_con_number, a.g_firstname||' '||replace(a.g_middlename,'0','')||' '||replace(a.g_lastname,'0','') " +
                                          " AS g_firstname,to_char(convert_tz(a.g_dob, 'UTC', '" + sgen.Gettimezone() + "'), '" + sgen.Getsqldateformat() + "')" +
                                          " as g_dob,a.g_qualification as gquaid,gqa.master_name as g_qualification,a.g_occupation,a.g_designation," +
                                          "a.g_adhaar_id,a.g_con_number,a.g_email,cl.categorytype as class_cat,cc.master_name as cat_name,a.class_applied," +
                                          "cl.class as class_name,a.client_id,a.client_unit_id from student_applicant_details a  LEFT OUTER join " +
                                          "master_setting qa on a.f_qualification=qa.master_id  and qa.type='EQU' and a.client_id=qa.client_id and" +
                                          " a.client_unit_id=qa.client_unit_id  LEFT OUTER join master_setting mqa on a.m_qualification= mqa.master_id " +
                                          "and mqa.type='EQU' and a.client_id=mqa.client_id and a.client_unit_id=mqa.client_unit_id  LEFT OUTER join " +
                                          "master_setting gqa on a.g_qualification= gqa.master_id and gqa.type='EQU'  and a.client_id=gqa.client_id " +
                                          "and a.client_unit_id=gqa.client_unit_id  LEFT OUTER join add_class cl on a.class_applied= cl.add_class_id " +
                                          " and cl.type= 'EAC' and a.client_id= cl.client_id and a.client_unit_id= cl.client_unit_id  LEFT OUTER join " +
                                          "add_academic_year ac on a.usession= ac.academic_year_id and a.client_id= ac.client_id  " +
                                          "   LEFT OUTER join (select distinct country_name, alpha_2 from country_state) cs " +
                                          "on cs.alpha_2=a.nationality  LEFT OUTER join (select distinct state_name, state_gst_code from country_state) s " +
                                          "on s.state_gst_code=a.per_state  LEFT OUTER join (select distinct v_name,v_id,type from country_state) v " +
                                          "on v.v_id=a.per_village and v.type='csv'  LEFT OUTER join (select distinct teh_name,teh_id,type from country_state)" +
                                          " t on t.teh_id=a.per_tehsil and t.type='csv'    LEFT OUTER join (select distinct district_name,district_id,type " +
                                          "from country_state) d on d.district_id=a.per_district and d.type='csv' LEFT OUTER join master_setting cc " +
                                          "on cl.categorytype=cc.master_id  and cc.type= 'ECC'  and cl.client_id= cc.client_id and cl.client_unit_id=" +
                                          " cc.client_unit_id  LEFT OUTER join (select distinct country_name, alpha_2 from country_state) acs on" +
                                          " acs.alpha_2=a.CUR_COUNTRY  LEFT OUTER join (select distinct state_name, state_gst_code from country_state) aas" +
                                          " on aas.state_gst_code=a.cur_state LEFT OUTER join (select distinct v_name,v_id,type from country_state) av on" +
                                          " av.v_id=a.cur_village and av.type='csv' LEFT OUTER join (select distinct teh_name,teh_id,type from country_state)" +
                                          " at on at.teh_id=a.cur_tehsil and at.type='csv'  LEFT OUTER join (select distinct district_name,district_id,type" +
                                          " from country_state) ad on ad.district_id=a.cur_district and ad.type='csv'  where  a.student_status='temporary'";


                            string myquery = sel + ",gender,nationality,dob,per_address,cur_address,adhaar_id,f_firstname,f_dob,f_qualification," +
                                "replace(f_occupation,'0','-') as f_occupation,f_designation,f_adhaar_Id,f_annual_income,f_email," +
                                "m_firstname,replace(m_occupation,'0','-') as m_occupation,replace(m_designation,'0','-') as m_designation," +
                                "replace(m_annual_income,'0','-') as m_annual_income,m_adhaar_id,m_dob,m_annual_income,m_email," +
                                "f_con_number,m_con_number,m_qualification,g_firstname,g_dob,g_qualification,g_occupation,g_designation," +
                                "g_adhaar_id,g_con_number,g_email from (" + mq + ")tab" + cond + group;
                            dt = sgen.getdata(userCode, myquery);




                            sgen.SetSession(MyGuid, "sa_id", null);
                            sgen.SetSession(MyGuid, "Rpt_Menuid", null);

                            if (dt.Rows.Count > 0)
                            {
                                //string rpt = "../../erp/schoolReports_Rpts/cr_std_temp.rpt";
                                string rpt = "../schoolReports_Rpts/cr_std_temp.rpt";

                                sgen.open_report_bydt(userCode, dt, rpt, "Temporary Applicant Detail");
                                ViewBag.scripCall += "showRptnew('Temporary Applicant Detail');";


                                //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";


                            }
                            else
                            {
                                ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                            }

                        }
                    }
                }

                else if (command == "Show Applicant List")
                {
                    string cond = "";
                    string group = "";
                    string sel = "";
                    string condition = "where";
                    string groupby = "group by";

                    if (!ac_yr_id.Equals("") && !ac_yr_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select usession,academic_year"; else sel = sel + " ,usession,academic_year";
                        if (cond.Trim().Equals("")) cond = " where usession In(" + ac_yr_id + ")"; else cond = cond + " and usession In(" + ac_yr_id + ")";
                        if (group.Trim().Equals("")) group = " group by usession"; else group = group + " ,usession";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select  academic_year, academic_year_id"; else sel = sel + " , academic_year, academic_year_id"; }

                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {
                        //if (sel.Trim().Equals("")) sel = "select class_applied,class"; else sel = sel + " ,class_applied,class";
                        if (cond.Trim().Equals("")) cond = " where class_applied In(" + class_id + ")"; else cond = cond + " and class_applied In(" + class_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_applied"; else group = group + " ,class_applied";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select class,class_applied"; else sel = sel + " ,class,class_applied"; }

                    // classcategory

                    if (!class_cat_id.Equals("") && !class_cat_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_cat,cat_name"; else sel = sel + " ,class_cat,cat_name";
                        if (cond.Trim().Equals("")) cond = " where class_cat In(" + class_cat_id + ")"; else cond = cond + " and class_cat In(" + class_cat_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_cat"; else group = group + " ,class_cat";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select  cat_name, class_cat"; else sel = sel + " ,cat_name, class_cat"; }

                    // section
                    if (!section_id.Equals("") && !section_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select section,section_name"; else sel = sel + " ,section,section_name";
                        if (cond.Trim().Equals("")) cond = " where section In(" + section_id + ")"; else cond = cond + " and section In(" + section_id + ")";
                        if (group.Trim().Equals("")) group = " group by section"; else group = group + " ,section";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select  section,section_name"; else sel = sel + " ,section,section_name"; }


                    //student

                    if (!student_id.Equals("") && !student_id.Equals("2") && !student_id.Equals("0"))
                    {
                        if (sel.Trim().Equals("")) sel = "select first_name"; else sel = sel + " ,first_name";
                        if (cond.Trim().Equals("")) cond = " where sa_id In(" + student_id + ")"; else cond = cond + " and sa_id In(" + student_id + ")";
                        if (group.Trim().Equals("")) group = " group by sa_id"; else group = group + " ,sa_id";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select sa_id,first_name"; else sel = sel + " , sa_id,first_name "; }



                    cond = cond + " and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "' and type='STD'";

                    group = group + ",class_cat,section,academic_year ,cat_name, first_name,first_name,fathersname,student_status," +
                        "Date_of_Apply,Date_of_confirm,section_name, (class || '-' ||section_name),reg_no, roll_number,rollno";

                    DataTable dt = new DataTable();


                    mq = "select sd.reg_no,sd.roll_number,sd.rollno, sd.section,nvl( s.master_name,'-') as section_name ," +
                        " a.client_id,a.client_unit_id,a.type,a.sa_id,a.first_name|| ' '|| replace(a.middle_name, '0', '')|| ' '||" +
                        " replace(a.last_name, '0', '') AS first_name,  a.f_firstname|| ' '||replace(a.f_middlename, '0', '')|| ' '||" +
                        " replace(a.f_lastname, '0', '') AS fathersname,c.academic_year,b.class,a.student_status,b.CategoryType as " +
                        "class_cat, d.master_name as cat_name,a.class_applied,a.usession,to_char(convert_tz(a.vch_date,'UTC','" + sgen.Gettimezone() + "'),'" + sgen.Getsqldateformat() + "')" +
                           " as Date_of_Apply,to_date(convert_tz(sd.vch_date,'UTC','" + sgen.Gettimezone() + "')," +
                           "'" + sgen.Getsqldateformat() + "') as Date_of_confirm  from student_applicant_details a inner join " +
                           "add_class b on a.class_applied=b.add_class_id and b.type= 'EAC'  and a.client_id= b.client_id " +
                           "and a.client_unit_id= b.client_unit_id inner join add_academic_year c on a.usession= c.academic_year_id" +
                           " and a.client_id= c.client_id    and c.type='ACY' inner join master_setting d on " +
                           "b.categorytype= d.master_id and d.type= 'ECC'  and  a.client_id= d.client_id and a.client_unit_id =" +
                           " d.client_unit_id left join student_detail sd ON sd.Reg_no=a.regnumber and  sd.type='STD' AND " +
                           "sd.client_id=a.client_id and sd.client_unit_id=a.client_unit_id left join master_setting s on" +
                           " sd.section=s.master_id and s.type='ECS' and sd.client_unit_id=s.client_unit_id  where a.type='STD' and a.client_unit_id='" + unitid_mst + "'";

                    string myquery = sel + ",first_name,fathersname,student_status,Date_of_Apply,Date_of_confirm,class_applied, " +
                        "(class || '-' ||section_name) as class," +
                        "class_applied,reg_no, roll_number,rollno from (" + mq + ")tab" + cond + group + ",sa_id order by rollno";
                    dt = sgen.getdata(userCode, myquery);


                    if (dt.Rows.Count > 0)
                    {
                        //string rpt = "../../erp/schoolReports_Rpts/App_list.rpt";
                        string rpt = "../schoolReports_Rpts/App_list.rpt";

                        sgen.open_report_bydt(userCode, dt, rpt, "Applicant list");
                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";
                        ViewBag.scripCall += "showRptnew('Applicant list');";


                    }
                    else
                    {
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                    }


                }

                else if (command == "Show Application Status")
                {
                    string cond = "";
                    string group = "";
                    string sel = "";
                    string condition = "where";
                    string groupby = "group by";

                    if (!ac_yr_id.Equals("") && !ac_yr_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select usession,academic_year"; else sel = sel + " ,usession,academic_year";
                        if (cond.Trim().Equals("")) cond = " where usession In(" + ac_yr_id + ")"; else cond = cond + " and usession In(" + ac_yr_id + ")";
                        if (group.Trim().Equals("")) group = " group by usession"; else group = group + " ,usession";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select  'All' as academic_year,as academic_year_id"; else sel = sel + " , 'All' as academic_year, academic_year_id"; }

                    // classcategory

                    if (!class_cat_id.Equals("") && !class_cat_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_cat,cat_name"; else sel = sel + " ,class_cat,cat_name";
                        if (cond.Trim().Equals("")) cond = " where class_cat In(" + class_cat_id + ")"; else cond = cond + " and class_cat In(" + class_cat_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_cat"; else group = group + " ,class_cat";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select  'All' as cat_name, class_cat"; else sel = sel + " ,'All' as cat_name, class_cat"; }


                    if (!class_id.Equals("") && !class_id.Equals("2"))
                    {
                        if (sel.Trim().Equals("")) sel = "select class_applied,class"; else sel = sel + " ,class_applied,class";
                        if (cond.Trim().Equals("")) cond = " where class_applied In(" + class_id + ")"; else cond = cond + " and class_applied In(" + class_id + ")";
                        if (group.Trim().Equals("")) group = " group by class_applied"; else group = group + " ,class_applied";
                    }
                    else { if (sel.Trim().Equals("")) sel = "select  'All' as class,class_applied"; else sel = sel + " ,'All' as class,class_applied"; }

                    cond = cond + "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";

                    group = group + ",academic_year ,class_cat,cat_name,class_applied,class";

                    mq = "select  '" + ac_yr + "' as academic_year,categoryType as class_cat,class,class_applied,master_name as cat_name," +
                        "tab.CLIENT_ID,tab.client_unit_id,usession,per_std,TEMPORARY_std ,totalss from ( SELECT CLIENT_ID,client_unit_id," +
                        " class_applied,usession, (case when student_status='permanent' then 1 else 0 end) AS per_std ," +
                        " (case when student_status='temporary' then 1 else 0 end) as TEMPORARY_std, " +
                        "1 AS totalss FROM student_applicant_details   where type='STD' and client_unit_id='" + unitid_mst + "' ) tab inner join add_class on tab.class_applied =" +
                        " add_class.add_class_id and add_class.client_id = tab.client_id  and add_class.client_unit_id" +
                        " = tab.client_unit_id inner join master_setting c on c.master_id = add_class.categoryType " +
                        "and c.client_id = tab.client_id and c.client_unit_id = tab.client_unit_id and c.type = 'ECC'";




                    DataTable dt = new DataTable();
                    string myquery = sel + ",SUM(totalss) totalss,SUM(TEMPORARY_std) TEMPORARY_std,SUM(per_std) per_std " +
                        "from (" + mq + ")tab1" + cond + group + "";

                    dt = sgen.getdata(userCode, myquery);

                    if (dt.Rows.Count > 0)
                    {


                        //string rpt = "../../erp/schoolReports_Rpts/App_Std_Status.rpt";
                        string rpt = "../schoolReports_Rpts/App_Std_Status.rpt";
                        sgen.SetSession(MyGuid, "needstudent", null);

                        sgen.open_report_bydt(userCode, dt, rpt, "Application Status");
                        ViewBag.scripCall += "showRptnew('Applicant Status');";

                        //ViewBag.scripCall += "OpenSingle('../../../../../erp/schoolReports_Rpts/Filter_Report_viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');";


                    }
                    else
                    {
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                    }


                }

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion
        #endregion
        #region section & Roll Number allocation
        public ActionResult sec_roll_alloc()
        {
            FillMst();
            DataTable dt = new DataTable();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();
            model[0].Col9 = "STUDENT SECTION / ROLL NUMBER ALLOCATION";
            //ViewBag.vsave = "";
            ViewBag.scripCall = "enableForm();";
            model[0].Col10 = "user_details";
            //model[0].Col25 = "student_applicant_details";
            model[0].Col11 = " and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'";
            model[0].Col12 = "STD";
            #region Class 1          
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = sgen.BindClass_Str(userCode, unitid_mst);
            //TempData[MyGuid + "_TList1"] = mod1;
            //model[0].TList1 = mod1;
            model[0].SelectedItems1 = new string[] { "" };
            #endregion
            #region section
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);
            //TempData[MyGuid + "_TList2"] = mod2;
            //model[0].TList2 = mod2;
            model[0].SelectedItems2 = new string[] { "" };
            #endregion
            return View(model);
        }
        [HttpPost]
        public ActionResult sec_roll_alloc(List<Tmodelmain> model, string command, string mid, string hfrow)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                DataTable dt = new DataTable();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                // shiv - why selectitem2 comment
                mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                TempData[MyGuid + "_TList1"] = mod1;
                TempData[MyGuid + "_TList2"] = mod2;
                model[0].TList1 = mod1;
                //model[0].TList2 = mod2;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                //if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                foreach (var mod in model)
                {
                    mod.TList2 = mod2;
                    if (mod.SelectedItems2 == null) mod.SelectedItems2 = new string[] { "" };
                }

                if (command == "Class")
                {

                    #region section availibilty
                    //Session["STDCF_DT"] = dtt;
                    mq = "select a.master_id,a.master_name,a.classid,a.section_strength,a.sectionid,b.master_name as section,a.subject_strength,a.sectiontype as gender," +
                        "(CASE WHEN a.SectionType = 'Both' THEN 'For Both Male And Female Students' WHEN a.SectionType = 'Male' THEN 'For Male Students Only' else 'For Female Students Only' END) as SectionType " +
                        "from master_setting a INNER join master_setting b on a.sectionid = b.master_id where a.type = 'ESS' " +
                        "and b.type = 'ECS' and find_in_set(a.client_unit_id , '" + unitid_mst + "')=1 and find_in_set(b.client_unit_id , '" + unitid_mst + "')=1 and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'";
                    DataTable dtsection = sgen.getdata(userCode, mq);
                    if (dtsection.Rows.Count > 0)
                    {
                        dtsection.Columns.Add("Availablility", System.Type.GetType("System.String"));
                        foreach (DataRow dr in dtsection.Rows)
                        {
                            string dtsec_str = sgen.getstring(userCode, @"SELECT nvl( COUNT(*) ,0) as Totalstudent  FROM student_detail where CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                            " and section='" + dr["sectionid"].ToString() + "' and   Academic_year_Id='" + Ac_Year_id.Trim() + "'  and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                            dr["Availablility"] = Convert.ToDecimal(dr["Section_Strength"].ToString()) - Convert.ToDecimal(dtsec_str);
                        }
                    }
                    #endregion
                    DataTable dtstudent = new DataTable();
                    mq = "SELECT '-' as section,ud.vch_num , ud.sibling1_rollno as family_Id, ud.RegNumber,ud.gender,ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME, '0', '')|| ' '" +
                        "|| replace(ud.LAST_NAME, '0', '') AS FIRST_NAME,ud.f_firstname|| ' '|| replace(ud.f_middlename, '0', '')|| ' '||" +
                        " replace(ud.f_lastname, '0', '') AS f_firstname, ud.m_firstname|| ' '|| replace(ud.m_middlename, '0', '')|| ' '||" +
                        " replace(ud.m_lastname, '0', '') AS m_firstname,sd.CLASS_APPLIED,cl.class  FROM student_detail sd inner JOIN user_details ud on sd.vch_num=ud.vch_num " +
                        "INNER join add_class cl ON cl.add_class_id= sd.class_applied WHERE sd.type= 'STD' and ud.type= 'STD' and cl.type= 'EAC' and find_in_set(cl.client_unit_id, sd.client_unit_id)=1 " +
                        "and RegNo>0 and (sd.section = '' or sd.section IS NULL or sd.section = '0' or sd.section = '-')  and (sd.Roll_number Is null or " +
                         "sd.Roll_number='' or sd.Roll_number='0' or sd.Roll_number='-' ) and sd.CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                        " and sd.Academic_year_Id= '" + Ac_Year_id + "' and find_in_set(sd.client_unit_id,'" + unitid_mst + "')=1 order BY RegNo";
                    dtstudent = sgen.getdata(userCode, mq);
                    if (dtstudent.Rows.Count > 0)
                    {
                        DataTable dtmain = new DataTable();
                        dtmain = dtstudent.Clone();
                        DataTable dtmaintable = new DataTable();
                        dtmaintable.Columns.Add("RegNumber", System.Type.GetType("System.String"));
                        dtmaintable.Columns.Add("gender", System.Type.GetType("System.String"));
                        dtmaintable.Columns.Add("section", System.Type.GetType("System.String"));
                        DataTable dtratio = new DataTable();
                        dtratio = sgen.getdata(userCode, "SELECT FemaleRatio,sectionid FROM master_setting where  classid='" + model[0].SelectedItems1.FirstOrDefault() + "' and SectionType='Both' and type='ESS' and find_in_set(client_unit_id,'" + unitid_mst + "')=1");
                        foreach (DataRow drc in dtstudent.Rows)
                        {
                            string stgneder = drc["gender"].ToString();
                            foreach (DataRow drs in dtsection.Rows)
                            {
                                if (drc["gender"].ToString() == "Female")
                                {
                                }
                                string secgen = drs["gender"].ToString();
                                Int64 maxstr = Convert.ToInt64(drs["Section_Strength"].ToString());
                                Int32 femaleratio = 0;
                                if (dtratio.Rows.Count > 0)
                                {
                                    femaleratio = Convert.ToInt32(dtratio.Rows[0][0].ToString());
                                }
                                Int64 favl = Convert.ToInt64(Math.Round(Convert.ToDecimal(((double)femaleratio * maxstr) / 100)));
                                Int64 mavl = maxstr - favl;
                                if (femaleratio == 0)
                                {
                                    favl = maxstr;
                                    mavl = maxstr;
                                }
                                if (femaleratio == 0)
                                {
                                    favl = maxstr;
                                    mavl = maxstr;
                                }
                                Int64 avl = Convert.ToInt64(drs["Availablility"].ToString());
                                if (secgen.Equals(stgneder) && avl > 0)
                                {
                                    drc["section"] = drs["section"].ToString();
                                    drs["Availablility"] = avl - 1;
                                    break;
                                }
                                else if (secgen.Equals("Both") && avl > 0)
                                {
                                    try
                                    {
                                        var newDt = dtstudent.AsEnumerable().Where(w => (string)w["section"] == drs["section"].ToString()).GroupBy(r => new { gender = r.Field<string>("gender"), section = r.Field<string>("section") })
                                .Select(g =>
                                {
                                    var row = dtmaintable.NewRow();
                                    // row["Id"] = g.Key;
                                    row["RegNumber"] = g.Count();
                                    row["gender"] = g.Key.gender;
                                    row["section"] = drs["section"].ToString();
                                    return row;
                                }).CopyToDataTable();
                                        dtmaintable = newDt;
                                    }
                                    catch (Exception err)
                                    {
                                        DataRow row = dtmaintable.NewRow();
                                        // row["Id"] = g.Key;
                                        row["RegNumber"] = "0";
                                        row["gender"] = drc["gender"].ToString();
                                        row["section"] = drs["section"].ToString();
                                        dtmaintable.Rows.Add(row);
                                    }
                                    string valF = sgen.seekval_dt(dtmaintable, "gender='Female'", "RegNumber");
                                    string valM = sgen.seekval_dt(dtmaintable, "gender='Male'", "RegNumber");
                                    if (stgneder.Equals("Female") && favl - Convert.ToInt64(valF) > 0) { drc["section"] = drs["sectionid"].ToString(); drs["Availablility"] = avl - 1; }
                                    else if (stgneder.Equals("Male") && mavl - Convert.ToInt64(valM) > 0) { drc["section"] = drs["sectionid"].ToString(); drs["Availablility"] = avl - 1; }
                                    break;
                                }
                            }
                        }
                    }
                    tm = model.FirstOrDefault();
                    model = new List<Tmodelmain>();
                    if (dtstudent.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtstudent.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            // tmm.Col26 = dtstudent.Rows[i]["rec_id"].ToString();
                            tmm.Col26 = dtstudent.Rows[i]["vch_num"].ToString();
                            tmm.Col18 = dtstudent.Rows[i]["FIRST_NAME"].ToString();
                            tmm.Col19 = dtstudent.Rows[i]["gender"].ToString();
                            tmm.Col20 = dtstudent.Rows[i]["f_firstname"].ToString();
                            tmm.Col21 = dtstudent.Rows[i]["m_firstname"].ToString();
                            tmm.Col22 = dtstudent.Rows[i]["class"].ToString();
                            tmm.Col23 = dtstudent.Rows[i]["class_applied"].ToString();
                            tmm.Col24 = dtstudent.Rows[i]["RegNumber"].ToString();
                            tmm.Col25 = dtstudent.Rows[i]["family_Id"].ToString();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col25 = tm.Col25;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.Col17 = tm.Col17;
                            //tmm.SelectedItems2 = System.String.Join(",", dtstudent.Rows.OfType<DataRow>().Select(r => r["section"].ToString()).Distinct()).Split(',');


                            tmm.SelectedItems2 = new string[] { dtstudent.Rows[i]["section"].ToString() };
                            tmm.SelectedItems1 = tm.SelectedItems1;
                            tmm.TList1 = tm.TList1;
                            tmm.TList2 = tm.TList2;
                            //tmm.dt1= tm.dt1;
                            model.Add(tmm);
                        }
                    }
                    else
                    {
                        Tmodelmain tmm = new Tmodelmain();
                        tmm.Col9 = tm.Col9;
                        tmm.Col10 = tm.Col10;
                        tmm.Col25 = tm.Col25;
                        tmm.Col11 = tm.Col11;
                        tmm.Col12 = tm.Col12;
                        tmm.Col17 = tm.Col17;
                        tmm.Col14 = tm.Col14;
                        tmm.Col15 = tm.Col15;
                        tmm.SelectedItems1 = tm.SelectedItems1;
                        tmm.SelectedItems2 = tm.SelectedItems2;
                        tmm.TList1 = tm.TList1;
                        tmm.TList2 = tm.TList2;
                        model.Add(tmm);
                    }
                    if (dtsection.Rows.Count > 0)
                    {
                        DataTable dtt = sgen.getdata(userCode, "select '1' SNo ,'-' Section,'-' Section_Type,'-' Section_Strength,'-' Availibility from dual");
                        model[0].dt1 = ((DataTable)dtt).Copy();
                        if (model[0].dt1.Rows[0]["Section"].ToString().Trim().Equals("-") || model[0].dt1.Rows[0]["Section"].ToString().Trim().Equals("")) { model[0].dt1.Rows.RemoveAt(0); }
                        for (int i = 0; i < dtsection.Rows.Count; i++)
                        {
                            DataRow dr = model[0].dt1.NewRow();
                            dr["SNo"] = i + 1;
                            dr["Section"] = dtsection.Rows[i]["section"].ToString();
                            dr["Section_Type"] = dtsection.Rows[i]["sectiontype"].ToString();
                            dr["Section_Strength"] = dtsection.Rows[i]["section_strength"].ToString();
                            dr["Availibility"] = dtsection.Rows[i]["Availablility"].ToString();
                            model[0].dt1.Rows.Add(dr);
                        }
                        model[0].dt1.AcceptChanges();
                    }
                    sgen.SetSession(MyGuid, "dtsection", dtsection);
                    sgen.SetSession(MyGuid, "dtstudent", dtstudent);

                }
                else if (command == "Allocate")
                {

                    DataTable dtt = new DataTable();
                    //if (Session["dtsection"] != null)
                    {
                        DataTable dtsection = (DataTable)sgen.GetSession(MyGuid, "dtsection");
                        DataTable dtstr = cmd_Fun.GetStructure(userCode, "student_detail");

                        DataTable dts = sgen.getdata(userCode, "select sd.class_applied||sd.section||sd.roll_number rollfstr,ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME, '0', '')|| replace(ud.LAST_NAME, '0', '') AS Std_name " +
                            "from student_detail sd  inner join user_details ud  on sd.vch_num = ud.vch_num and ud.regnumber = sd.reg_no where sd.client_unit_id = '" + unitid_mst + "' and sd.academic_year_id = '" + Ac_Year_id + "' " +
                            "and sd.class_applied = '" + model[0].SelectedItems1.FirstOrDefault() + "'  and sd.type = 'STD'");

                        for (int i = 0; i < model.Count; i++)
                        {
                            if ((model[i].Chk2 == true) && (model[i].Col34 != "0" && model[i].Col34 != "" && model[i].Col34 != "-" && model[i].Col34 != null))
                            {
                                DataRow dr = dtstr.NewRow();
                                DataTable dtf = new DataTable();
                                dr["Roll_number"] = model[i].Col23 + model[i].SelectedItems2.FirstOrDefault() + model[i].Col34;
                                try
                                {
                                    dtf = sgen.seekval_dt(dts, "rollfstr='" + dr["Roll_number"] + "'");
                                }
                                catch { }
                                if (dtf.Rows.Count > 0)
                                {
                                    ViewBag.scripCall += "mytoast('warning', 'toast-top-right', ' Roll Number " + model[i].Col34 + "  Already Exist For :- " + dtf.Rows[0]["Std_name"].ToString() + "');";
                                    return View(model);
                                }
                                dtstr.Rows.Add(dr);
                            }
                        }

                        if (dtstr.Rows.Count > 0)
                        {
                            var duplicates = dtstr.AsEnumerable()
               .Select(dr => dr.Field<string>("Roll_number"))
               .GroupBy(x => x)
               .Where(g => g.Count() > 1)
               .Select(g => g.Key)
               .ToList();

                            if (duplicates.Count > 0)
                            {
                                ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Enter Unique Roll Number :- " + String.Join(",", duplicates) + "');";
                                return View(model);

                            }
                        }
                        string addid = "";
                        int cntchk = 0;
                        for (int i = 0; i < model.Count; i++)
                        {
                            if ((model[i].Chk2 == true) && (model[i].Col34 != "0" && model[i].Col34 != "" && model[i].Col34 != "-" && model[i].Col34 != null))
                            {
                                cntchk = cntchk + 1;
                                string student_id = model[i].Col26;
                                string section = model[i].SelectedItems2.FirstOrDefault();
                                string CLASS_APPLIED = model[i].Col23;
                                string roll_no = model[i].Col23;
                                string lbl_RegNumber = model[i].Col24;
                                string lbl_family_Id = model[i].Col25; ;

                                if ((section != "0") && (section != ""))
                                {
                                    #region Update Receipt For Addmission Fee

                                    bool updatereceipt = sgen.execute_cmd(userCode, "Update student_receipt_detail  set  section_id='" + section + "'   where class_id='" + CLASS_APPLIED + "' and  student_id='" + student_id + "'  and  client_unit_id= '" + unitid_mst + "' and  trim(Fee_Status)  in ('Approved','UnApproved')  and trim(regno)='" + lbl_RegNumber + "' and trim(family_grp_id)='" + lbl_family_Id + "' and trim(section_id)='' and Type='ERD' and Academic_year_Id='" + Ac_Year_id.Trim() + "' ");
                                    #endregion
                                    bool data1 = sgen.execute_cmd(userCode, "update student_detail set section ='" + section + "' where Class_Applied='" + CLASS_APPLIED + "'  and vch_num='" + student_id + "' and Academic_year_Id='" + Ac_Year_id.Trim() + "'");
                                    bool data2 = sgen.execute_cmd(userCode, "update user_details set section ='" + section + "' where Class_Applied='" + CLASS_APPLIED + "'  and vch_num='" + student_id + "'  and Academic_year_Id='" + Ac_Year_id.Trim() + "'");
                                    // string xuserid = "'" + student_id + "'";
                                    data2 = sgen.execute_cmd(userCode, "Update Student_Detail set RollNo='0', Roll_number = '" + model[i].Col34 + "' " +
                                   "where vch_num = '" + student_id + "'  and client_unit_id = '" + unitid_mst + "' and type = 'STD' and academic_year_id='" + Ac_Year_id + "'");

                                    string xuserid = "'" + student_id + "'";
                                    if (addid.Equals("")) addid = student_id;
                                    else addid = addid + "','" + student_id;
                                    //addid = addid + ',' + xuserid;
                                }
                            }
                        }

                        try
                        {
                            #region section availibilty
                            dtt = new DataTable();
                            dtt = sgen.getdata(userCode, "select '1' SNo ,'-' Section,'-' Section_Type,'-' Section_Strength,'-' Availibility from dual");
                            model[0].dt1 = ((DataTable)dtt).Copy();
                            //Session["STDCF_DT"] = dtt;
                            if (dtsection.Rows.Count > 0)
                            {
                                if (model[0].dt1.Rows[0]["Section"].ToString().Trim().Equals("-") || model[0].dt1.Rows[0]["Section"].ToString().Trim().Equals("")) { model[0].dt1.Rows.RemoveAt(0); }
                                for (int i = 0; i < dtsection.Rows.Count; i++)
                                {
                                    DataRow dr = model[0].dt1.NewRow();
                                    dr["SNo"] = i + 1;
                                    dr["Section"] = dtsection.Rows[i]["section"].ToString();
                                    dr["Section_Type"] = dtsection.Rows[i]["sectiontype"].ToString();
                                    dr["Section_Strength"] = dtsection.Rows[i]["section_strength"].ToString();
                                    dr["Availibility"] = dtsection.Rows[i]["Availablility"].ToString();
                                    model[0].dt1.Rows.Add(dr);
                                }
                                model[0].dt1.AcceptChanges();
                            }
                            #endregion
                            if (addid != "")
                            {
                                try
                                {
                                    mq = "select a.master_id,a.master_name,a.classid,a.section_strength,a.sectionid,b.master_name as section,a.subject_strength,a.sectiontype as gender," +
                                    "(CASE WHEN a.SectionType = 'Both' THEN 'For Both Male And Female Students' WHEN a.SectionType = 'Male' THEN 'For Male Students Only' else 'For Female Students Only' END) as SectionType from master_setting a " +
                                    "INNER join master_setting b on a.sectionid = b.master_id where a.type = 'ESS' and b.type = 'ECS'  " +
                                    "and a.client_unit_id = '" + unitid_mst + "'  " +
                                    "and find_in_set(b.client_unit_id ,'" + unitid_mst + "')=1 and a.classid='" + model[0].SelectedItems1.FirstOrDefault() + "'";
                                    dtsection = sgen.getdata(userCode, mq);
                                    if (dtsection.Rows.Count > 0)
                                    {
                                        dtsection.Columns.Add("Availablility", System.Type.GetType("System.String"));
                                        foreach (DataRow dr in dtsection.Rows)
                                        {
                                            string dtsec_str = sgen.getstring(userCode, @"SELECT nvl( COUNT(*) ,0) as Totalstudent  FROM student_detail where CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                                            " and section='" + dr["sectionid"].ToString() + "' and   Academic_year_Id='" + Ac_Year_id.Trim() + "' and  client_unit_id='" + unitid_mst + "'");
                                            dr["Availablility"] = Convert.ToDecimal(dr["Section_Strength"].ToString()) - Convert.ToDecimal(dtsec_str);
                                        }
                                    }
                                    DataTable dtstudent = new DataTable();
                                    mq = "SELECT '-' as section,ud.vch_num ,ud.rec_id, ud.sibling1_rollno as family_Id, ud.RegNumber,ud.gender,ud.FIRST_NAME|| ' '|| replace(ud.MIDDLE_NAME, '0', '')|| ' '" +
                                        "|| replace(ud.LAST_NAME, '0', '') AS FIRST_NAME,ud.f_firstname|| ' '|| replace(ud.f_middlename, '0', '')|| ' '||" +
                                        " replace(ud.f_lastname, '0', '') AS f_firstname, ud.m_firstname|| ' '|| replace(ud.m_middlename, '0', '')|| ' '||" +
                                        " replace(ud.m_lastname, '0', '') AS m_firstname,sd.CLASS_APPLIED,cl.class  FROM student_detail sd inner JOIN user_details ud on sd.vch_num=ud.vch_num " +
                                        "INNER join add_class cl ON cl.add_class_id= sd.class_applied WHERE sd.type= 'STD' and ud.type= 'STD' and cl.type= 'EAC'  " +
                                        "and cl.client_unit_id= sd.client_unit_id and RegNo>0 and (sd.section = '' or sd.section IS NULL or sd.section = '0' or sd.section = '-') and (sd.Roll_number Is null or " +
                         "sd.Roll_number='' or sd.Roll_number='0' or sd.Roll_number='-' ) and sd.CLASS_APPLIED='" + model[0].SelectedItems1.FirstOrDefault() + "'" +
                                        " and sd.Academic_year_Id= '" + Ac_Year_id + "' and  sd.client_unit_id='" + unitid_mst + "' order BY RegNo";
                                    dtstudent = sgen.getdata(userCode, mq);
                                    if (dtstudent.Rows.Count > 0)
                                    {
                                        DataTable dtmain = new DataTable();
                                        dtmain = dtstudent.Clone();
                                        DataTable dtmaintable = new DataTable();
                                        dtmaintable.Columns.Add("RegNumber", System.Type.GetType("System.String"));
                                        dtmaintable.Columns.Add("gender", System.Type.GetType("System.String"));
                                        dtmaintable.Columns.Add("section", System.Type.GetType("System.String"));
                                        DataTable dtratio = new DataTable();
                                        dtratio = sgen.getdata(userCode, "SELECT FemaleRatio,sectionid FROM master_setting where  classid='" + model[0].SelectedItems1.FirstOrDefault() + "' and SectionType='Both' and type='ESS' and client_unit_id='" + unitid_mst + "'");
                                        foreach (DataRow drc in dtstudent.Rows)
                                        {
                                            string stgneder = drc["gender"].ToString();
                                            foreach (DataRow drs in dtsection.Rows)
                                            {
                                                if (drc["gender"].ToString() == "Female")
                                                {
                                                }
                                                string secgen = drs["gender"].ToString();
                                                Int64 maxstr = Convert.ToInt64(drs["Section_Strength"].ToString());
                                                Int32 femaleratio = 0;
                                                if (dtratio.Rows.Count > 0)
                                                {
                                                    femaleratio = Convert.ToInt32(dtratio.Rows[0][0].ToString());
                                                }
                                                Int64 favl = Convert.ToInt64(Math.Round(Convert.ToDecimal(((double)femaleratio * maxstr) / 100)));
                                                Int64 mavl = maxstr - favl;
                                                if (femaleratio == 0)
                                                {
                                                    favl = maxstr;
                                                    mavl = maxstr;
                                                }
                                                if (femaleratio == 0)
                                                {
                                                    favl = maxstr;
                                                    mavl = maxstr;
                                                }
                                                Int64 avl = Convert.ToInt64(drs["Availablility"].ToString());
                                                if (secgen.Equals(stgneder) && avl > 0)
                                                {
                                                    drc["section"] = drs["section"].ToString();
                                                    drs["Availablility"] = avl - 1;
                                                    break;
                                                }
                                                else if (secgen.Equals("Both") && avl > 0)
                                                {
                                                    try
                                                    {
                                                        var newDt = dtstudent.AsEnumerable().Where(w => (string)w["section"] == drs["section"].ToString()).GroupBy(r => new { gender = r.Field<string>("gender"), section = r.Field<string>("section") })
                                                .Select(g =>
                                                {
                                                    var row = dtmaintable.NewRow();
                                                    // row["Id"] = g.Key;
                                                    row["RegNumber"] = g.Count();
                                                    row["gender"] = g.Key.gender;
                                                    row["section"] = drs["section"].ToString();
                                                    return row;
                                                }).CopyToDataTable();
                                                        dtmaintable = newDt;
                                                    }
                                                    catch (Exception err)
                                                    {
                                                        DataRow row = dtmaintable.NewRow();
                                                        // row["Id"] = g.Key;
                                                        row["RegNumber"] = "0";
                                                        row["gender"] = drc["gender"].ToString();
                                                        row["section"] = drs["section"].ToString();
                                                        dtmaintable.Rows.Add(row);
                                                    }
                                                    string valF = sgen.seekval_dt(dtmaintable, "gender='Female'", "RegNumber");
                                                    string valM = sgen.seekval_dt(dtmaintable, "gender='Male'", "RegNumber");
                                                    if (stgneder.Equals("Female") && favl - Convert.ToInt64(valF) > 0) { drc["section"] = drs["section"].ToString(); drs["Availablility"] = avl - 1; }
                                                    else if (stgneder.Equals("Male") && mavl - Convert.ToInt64(valM) > 0) { drc["section"] = drs["section"].ToString(); drs["Availablility"] = avl - 1; }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    model = new List<Tmodelmain>();
                                    if (dtstudent.Rows.Count > 0)
                                    {
                                        for (int i = 0; i < dtstudent.Rows.Count; i++)
                                        {
                                            Tmodelmain tmm = new Tmodelmain();
                                            // tmm.Col26 = dtstudent.Rows[i]["rec_id"].ToString();
                                            tmm.Col26 = dtstudent.Rows[i]["vch_num"].ToString();
                                            tmm.Col18 = dtstudent.Rows[i]["FIRST_NAME"].ToString();
                                            tmm.Col19 = dtstudent.Rows[i]["gender"].ToString();
                                            tmm.Col20 = dtstudent.Rows[i]["f_firstname"].ToString();
                                            tmm.Col21 = dtstudent.Rows[i]["m_firstname"].ToString();
                                            tmm.Col22 = dtstudent.Rows[i]["class"].ToString();
                                            tmm.Col23 = dtstudent.Rows[i]["class_applied"].ToString();
                                            tmm.Col24 = dtstudent.Rows[i]["RegNumber"].ToString();
                                            tmm.Col25 = dtstudent.Rows[i]["family_Id"].ToString();
                                            tmm.Col9 = tm.Col9;
                                            tmm.Col10 = tm.Col10;
                                            tmm.Col25 = tm.Col25;
                                            tmm.Col11 = tm.Col11;
                                            tmm.Col12 = tm.Col12;
                                            tmm.Col14 = tm.Col14;
                                            tmm.Col15 = tm.Col15;
                                            tmm.SelectedItems1 = tm.SelectedItems1;
                                            tmm.SelectedItems2 = tm.SelectedItems2;
                                            tmm.TList1 = tm.TList1;
                                            tmm.TList2 = tm.TList2;
                                            model.Add(tmm);
                                        }
                                    }
                                    else
                                    {
                                        Tmodelmain tmm = new Tmodelmain();
                                        tmm.Col9 = tm.Col9;
                                        tmm.Col10 = tm.Col10;
                                        tmm.Col25 = tm.Col25;
                                        tmm.Col11 = tm.Col11;
                                        tmm.Col12 = tm.Col12;
                                        tmm.Col14 = tm.Col14;
                                        tmm.Col15 = tm.Col15;
                                        tmm.SelectedItems1 = tm.SelectedItems1;
                                        tmm.SelectedItems2 = tm.SelectedItems2;
                                        tmm.TList1 = tm.TList1;
                                        tmm.TList2 = tm.TList2;
                                        model.Add(tmm);
                                    }
                                }
                                catch { }
                                ViewBag.scripCall += "mytoast('success', 'toast-top-right', 'Section And Roll Number Has Been Allocated Successfully To Following Students');";

                                #region section confirmed std
                                dtt = sgen.getdata(userCode, "select '1' SNo ,'-' RegNumber,'-' Student_Name,'-' Father_Name,'-' Class_Applied,'-' Section,'-' Roll_Number from dual");
                                model[0].dt2 = ((DataTable)dtt).Copy();
                                mq1 = "SELECT user_details.RegNumber," +
                                     "first_name|| ' '|| replace(middle_name,'0','')|| ' '|| replace(last_name,'0','') AS FIRST_NAME," +
                                     "f_firstname|| ''|| replace(f_middlename,'0','')|| ' '|| replace(f_lastname,'0','') AS f_firstname," +
                                     "m_firstname|| ' '|| replace(m_middlename,'0','')|| ' '|| replace(m_lastname,'0','') AS m_firstname," +
                                     "user_details.CLASS_APPLIED,student_detail.section,master_setting.master_name as sectionname,add_class.class,student_detail.Roll_number FROM user_details," +
                                     "student_detail,master_setting,add_class where user_details.vch_num=student_detail.vch_num and master_setting.master_id=student_detail.section " +
                                     "and student_detail.vch_num in ('" + addid + "') and student_detail.Academic_year_Id='" + Ac_Year_id.Trim() + "' and add_class.add_class_id= student_detail.class_applied " +
                                     " and student_detail.client_unit_id=add_class.client_unit_id and user_details.type= 'STD' and student_detail.type= 'STD' " +
                                     "and master_setting.type= 'ECS' and find_in_set(master_setting.client_unit_id,'" + unitid_mst + "')=1 and add_class.type= 'EAC'  and student_detail.client_unit_id='" + unitid_mst + "' ";
                                dt = sgen.getdata(userCode, mq1);
                                if (dt.Rows.Count > 0)
                                {
                                    if (model[0].dt2.Rows[0]["RegNumber"].ToString().Trim().Equals("-") || model[0].dt2.Rows[0]["RegNumber"].ToString().Trim().Equals("")) { model[0].dt2.Rows.RemoveAt(0); }
                                    for (int i = 0; i < dt.Rows.Count; i++)
                                    {
                                        DataRow dr = model[0].dt2.NewRow();
                                        dr["SNo"] = i + 1;
                                        dr["RegNumber"] = dt.Rows[i]["RegNumber"].ToString();
                                        dr["Student_Name"] = dt.Rows[i]["FIRST_NAME"].ToString();
                                        dr["Father_Name"] = dt.Rows[i]["f_firstname"].ToString();
                                        dr["Class_Applied"] = dt.Rows[i]["class"].ToString();
                                        dr["Section"] = dt.Rows[i]["sectionname"].ToString();
                                        dr["Roll_number"] = dt.Rows[i]["Roll_number"].ToString();
                                        model[0].dt2.Rows.Add(dr);
                                    }
                                    model[0].dt2.AcceptChanges();
                                }
                                #endregion
                                //Session["dtsection"] = dtsection;
                                //Session["dtstudent"] = dtstudent;
                            }

                            else
                            {
                                ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Please Select Atleast one Student');";
                                return View(model);
                            }
                        }
                        catch { }



                    }

                }

            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        [HttpPost]
        public ContentResult sec_roll_avail(string value, string newsection)
        {
            if (sgen.GetSession(MyGuid, "dtstudent") != null)
            {
                sgen = new sgenFun(MyGuid);
                //string vch = Session["track_map"].ToString();
                DataTable dtsection = new DataTable();
                DataTable dtstudent = new DataTable();
                DataSet ds = new DataSet();
                dtstudent = (DataTable)sgen.GetSession(MyGuid, "dtstudent");
                dtsection = (DataTable)sgen.GetSession(MyGuid, "dtsection");
                string lastsection = sgen.seekval_dt(dtstudent, "RegNumber='" + value + "'", "section");
                string newname = "";
                foreach (DataRow drs in dtsection.Rows)
                {
                    if (drs["sectionid"].ToString().Trim().Equals(newsection))
                    {
                        Int64 avl = Convert.ToInt64(drs["Availablility"].ToString());
                        drs["Availablility"] = avl - 1;
                        newname = drs["section"].ToString();
                    }
                    if (drs["section"].ToString().Trim().Equals(lastsection))
                    {
                        Int64 avl = Convert.ToInt64(drs["Availablility"].ToString());
                        drs["Availablility"] = avl + 1;
                    }
                }
                foreach (DataRow drc in dtstudent.Rows)
                {
                    if (drc["RegNumber"].ToString().Trim().Equals(value))
                    {
                        lastsection = drc["section"].ToString();
                        drc["section"] = newname;
                    }
                }
                DataTable dtCopy = new DataTable();
                dtCopy = dtsection.Copy();
                if (dtCopy.Rows.Count > 0)
                {
                    dtCopy.TableName = "master_setting";
                    ds.Tables.Add(dtCopy);
                }
                sgen.SetSession(MyGuid, "dtstudent", dtstudent);
                sgen.SetSession(MyGuid, "dtsection", dtsection);
                return Content(ds.GetXml());
            }
            else { return Content(""); }
        }
        #endregion
        #region s_strength
        public ActionResult s_strength()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            model[0].Col9 = "SCHOOL STRENGTH";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col20 = "Total Students : 0";
            model[0].Col21 = "Allocated Students : 0 ";
            model[0].Col22 = "Unallocated Students : 0 ";
            return View(model);
        }

        [HttpPost]
        public ActionResult s_strength(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                DataTable dt = new DataTable();


                if (command == "Class_Wise")
                {
                    mq = "select a.class,sum(a.no_unlloc) no_unlloc,sum(no_of_std)  no_of_std from (" +
                        "select b.class,0 no_unlloc,count(a.class_applied )as no_of_std ,b.sequence from  student_detail a " +
                        "inner join user_details ud on a.reg_no=ud.RegNumber and a.type= ud.type   and ud.vch_num=a.vch_num inner join add_class b " +
                        " on a.class_applied = b.add_class_id and b.client_unit_id = '" + unitid_mst + "' and b.type = 'EAC' where a.academic_year_id = '" + Ac_Year_id + "'" +
                        "and a.client_unit_id = '" + unitid_mst + "' and a.type = 'STD' and a.section IS NOT Null and a.section != '0' and a.section != '-' " +
                        "group by  b.class ,b.sequence" +
                        " union all " +
                        "select b.class ,count(a.class_applied )as no_unlloc,0 no_of_std ,b.sequence from  student_detail a " +
                        "inner join user_details ud on a.reg_no=ud.RegNumber and a.type= ud.type  and ud.vch_num=a.vch_num " +
                        "inner join add_class b" +
                        " on a.class_applied =b.add_class_id and b.client_unit_id = '" + unitid_mst + "' and b.type = 'EAC' where a.academic_year_id = '" + Ac_Year_id + "' " +
                        "and a.client_unit_id = '" + unitid_mst + "' and a.type = 'STD' and (a.section IS  Null or a.section = '0' or a.section = '-' ) " +
                        "group by  b.class ,b.sequence ) a  group by a.class,sequence  order by sequence";
                    decimal total_std = 0, allo = 0, unallo = 0;
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;

                            tmm.Col17 = dt.Rows[i]["class"].ToString();
                            if (dt.Rows[i]["no_of_std"].ToString() != "0")
                            {
                                tmm.Col18 = dt.Rows[i]["no_of_std"].ToString();
                            }
                            allo = allo + sgen.Make_decimal(dt.Rows[i]["no_of_std"].ToString());
                            unallo = unallo + sgen.Make_decimal(dt.Rows[i]["no_unlloc"].ToString());
                            total_std = allo + unallo;
                            model.Add(tmm);
                        }

                        model[0].Col20 = "Total Students : " + total_std.ToString();
                        model[0].Col21 = "Allocated Students : " + allo.ToString();
                        model[0].Col22 = "Unallocated Students : " + unallo.ToString();
                        model[0].Col23 = " CLASS WISE SCHOOL STRENGTH";
                    }
                }

                else if (command == "Section_Wise")
                {
                    mq = "select (b.class||'-'||c.master_name) class,c.master_name ,count(a.class_applied )as no_of_std ,b.sequence from  student_detail a " +
                        "inner join user_details ud on a.reg_no=ud.RegNumber and a.type= ud.type   and ud.vch_num=a.vch_num inner join add_class b on a.class_applied =b.add_class_id " +
                        "and b.client_unit_id = '" + unitid_mst + "' and b.type = 'EAC' inner join master_setting c on a.section = c.master_id and find_in_set(c.client_unit_id,'" + unitid_mst + "')= 1 " +
                        "and c.type = 'ECS' where a.academic_year_id = '" + Ac_Year_id + "' and a.client_unit_id = '" + unitid_mst + "' and a.type = 'STD' " +
                        "and a.section IS NOT Null and a.section != '0' and a.section != '-'   " +
                        " group by  b.class ,b.sequence,c.master_name,c.master_id order by b.sequence, c.master_id";



                    dt = sgen.getdata(userCode, mq);
                    decimal total_std = 0, allo = 0, unallo = 0;
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;
                            tmm.Col17 = dt.Rows[i]["class"].ToString();
                            tmm.Col18 = dt.Rows[i]["no_of_std"].ToString();
                            allo = allo + sgen.Make_decimal(dt.Rows[i]["no_of_std"].ToString());


                            model.Add(tmm);
                        }
                        mq = "select count(a.class_applied) as un_all from student_detail a inner join user_details ud on a.reg_no=ud.RegNumber" +
                            " and a.type= ud.type  and ud.vch_num=a.vch_num where a.academic_year_id='" + Ac_Year_id + "' and a.client_unit_id='" + unitid_mst + "'" +
                            " and a.type = 'STD' and (a.section IS  Null or a.section = '0' or a.section = '-' )";
                        dt = sgen.getdata(userCode, mq);
                        if (dt.Rows.Count > 0)
                        {
                            model[0].Col22 = "Unallocated Students : " + dt.Rows[0]["un_all"].ToString();
                        }

                        model[0].Col21 = "Allocated Students : " + allo.ToString();
                        model[0].Col23 = " SECTION WISE SCHOOL STRENGTH";

                        total_std = allo + sgen.Make_decimal(dt.Rows[0]["un_all"].ToString());
                        model[0].Col20 = "Total Students : " + total_std.ToString();


                    }
                }



            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion        
        #region Attendance Summary
        public ActionResult Att_summ()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            model[0].Col9 = "ATTENDANCE SUMMARY";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col21 = sgen.server_datetime_local(userCode);
            model[0].Col22 = "Total Students : 0";
            model[0].Col23 = "First Half Present : 0 ";
            model[0].Col24 = "Second Half Present : 0 ";



            return View(model);
        }

        [HttpPost]
        public ActionResult Att_summ(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                DataTable dt = new DataTable();


                if (command == "Submit")
                {
                    mq = "select a.class, max(a.tot_std) tot_std,a.atten_date, sum(fh) first_half, sum(sf) second_half from (" +
                        " select count(b.class) tot_std,(b.class || '-'||c.master_name) class,  a.atten_date,count(a.first_half) fh,0 sf from student_attendance a" +
                        " inner join add_class b on a.class_id= b.add_class_id and b.type= 'EAC' and b.client_unit_id= '" + unitid_mst + "' " +
                        " inner join master_setting c on a.section_id = c.master_id and c.type= 'ECS' and find_in_set(c.client_unit_id,'" + unitid_mst + "')=1" +
                        " where a.type='STD' and a.client_unit_id= '" + unitid_mst + "' and a.first_half= 'P'  and a.academic_year_id= '" + Ac_Year_id + "'  " +
                        "and to_date(to_char(a.atten_date,'dd/MM/YYYY'),'dd/MM/YYYY')= to_date('" + model[0].Col21 + "','dd/MM/YYYY')  group by   a.atten_date,b.class,c.master_name " +
                        "      union all " +
                        " select count(b.class) tot_std,(b.class || '-'||c.master_name) class, a.atten_date,0 fh, count(a.second_half) sf from student_attendance a" +
                        " inner join add_class b on a.class_id= b.add_class_id and b.type= 'EAC' and b.client_unit_id= '" + unitid_mst + "' " +
                        " inner join master_setting c on a.section_id = c.master_id and c.type= 'ECS' and find_in_set(c.client_unit_id,'" + unitid_mst + "')=1 " +
                        " where a.type='STD' and a.client_unit_id= '" + unitid_mst + "' and a.second_half= 'P' and a.academic_year_id= '" + Ac_Year_id + "'" +
                        " and to_date(to_char(a.atten_date,'dd/MM/YYYY'),'dd/MM/YYYY')= to_date('" + model[0].Col21 + "','dd/MM/YYYY') group by   a.atten_date,class,c.master_name ) a   group by a.class,a.atten_date ";
                    decimal total_std = 0, fhp = 0, shp = 0;
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            Tmodelmain tmm = new Tmodelmain();
                            tmm.Col9 = tm.Col9;
                            tmm.Col10 = tm.Col10;
                            tmm.Col11 = tm.Col11;
                            tmm.Col12 = tm.Col12;
                            tmm.Col14 = tm.Col14;
                            tmm.Col15 = tm.Col15;

                            tmm.Col17 = dt.Rows[i]["class"].ToString();
                            tmm.Col18 = dt.Rows[i]["tot_std"].ToString();
                            tmm.Col19 = dt.Rows[i]["first_half"].ToString();
                            tmm.Col20 = dt.Rows[i]["second_half"].ToString();
                            total_std = total_std + sgen.Make_decimal(dt.Rows[i]["tot_std"].ToString());
                            fhp = fhp + sgen.Make_decimal(dt.Rows[i]["first_half"].ToString());
                            shp = shp + sgen.Make_decimal(dt.Rows[i]["second_half"].ToString());


                            model.Add(tmm);
                        }

                        model[0].Col22 = "Total Students : 0";
                        model[0].Col23 = "First Half Present : 0 ";
                        model[0].Col24 = "Second Half Present : 0 ";

                        model[0].Col22 = "Total Students : " + total_std.ToString();
                        model[0].Col23 = "First Half Present :" + fhp.ToString();
                        model[0].Col24 = "Second Half Present :" + shp.ToString();


                    }
                }





            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion        
        #region Student Attendance 
        public ActionResult Std_Att()
        {
            FillMst();
            List<Tmodelmain> model = new List<Tmodelmain>();
            model = getload(model);
            ViewBag.scripCall = "enableForm();";
            model[0].Col9 = "STUDENT WISE ATTENDANCE";
            model[0].Col11 = "and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
            model[0].Col21 = sgen.server_datetime_local(userCode);
            List<SelectListItem> mod1 = new List<SelectListItem>();
            List<SelectListItem> mod2 = new List<SelectListItem>();

            #region Class 1          
            TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1 = sgen.BindClass_Str(userCode, unitid_mst);
            model[0].SelectedItems1 = new string[] { "" };
            #endregion
            #region section
            TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2 = sgen.BindSection(userCode, unitid_mst);
            model[0].SelectedItems2 = new string[] { "" };
            #endregion

            return View(model);
        }

        [HttpPost]
        public ActionResult Std_Att(List<Tmodelmain> model, string command, string mid)
        {
            try
            {

                FillMst(model[0].Col15);
                var tm = model.FirstOrDefault();
                List<SelectListItem> mod1 = new List<SelectListItem>();
                List<SelectListItem> mod2 = new List<SelectListItem>();
                mod1 = (List<SelectListItem>)TempData[MyGuid + "_TList1"];
                mod2 = (List<SelectListItem>)TempData[MyGuid + "_TList2"];
                TempData[MyGuid + "_TList1"] = mod1;
                TempData[MyGuid + "_TList2"] = mod2;
                model[0].TList1 = mod1;
                model[0].TList2 = mod2;
                if (tm.SelectedItems1 == null) model[0].SelectedItems1 = new string[] { "" };
                if (tm.SelectedItems2 == null) model[0].SelectedItems2 = new string[] { "" };
                DataTable dt = new DataTable();


                if ((command == "Print") || (command == "View"))
                {
                    DateTime fdt = sgen.Make_date(model[0].Col16);
                    DateTime tdt = sgen.Make_date(model[0].Col17);
                    int school_days = (tdt - fdt).Days;

                    string class_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist1"]).SingleOrDefault(item => item.Value == model[0].SelectedItems1.FirstOrDefault().ToString()).Text.ToString();
                    string section_name = ((List<SelectListItem>)TempData[MyGuid + "_Tlist2"]).SingleOrDefault(item => item.Value == model[0].SelectedItems2.FirstOrDefault().ToString()).Text.ToString();
                    mq = "select '" + school_days + "' school_days, '" + model[0].Col16 + "'  as From_dt,'" + model[0].Col17 + "' to_dt,'" + class_name + "' class_name, '" + section_name + "' section_name ," +
                        "a.*,ud.FIRST_NAME || ' '|| replace(ud.MIDDLE_NAME, '0', '')|| ' '||replace(ud.LAST_NAME, '0', '') std_name" +
                        " from (select sum(a.presents)+sum(a.absent) + sum(a.wkoff) +sum(a.leaves)+sum(a.holidays) tot_days," +
                        " sum(a.presents)pr,sum(a.absent) ab, sum(a.wkoff) wk,sum(a.leaves)l,sum(a.holidays)hl,a.regnumber," +
                        "a.student_id from vw_student_attendance a where a.academic_year_id = '" + Ac_Year_id + "'" +
                        " and a.client_unit_id = '" + unitid_mst + "' and a.class_id = '" + model[0].SelectedItems1.FirstOrDefault() + "' " +
                        "and a.section_id = '" + model[0].SelectedItems2.FirstOrDefault() + "' and a.type = 'STD'  and " +
                        "to_date(to_char(a.atten_date, 'dd/MM/YYYY'), 'dd/MM/YYYY') between to_date('" + model[0].Col16 + "','dd/MM/YYYY')" +
                        " and to_date('" + model[0].Col17 + "','dd/MM/YYYY')   group by a.regnumber,a.student_id ) a inner join user_details ud " +
                        "on  a.regnumber = ud.regnumber and a.student_id = ud.vch_num and ud.type = 'STD' and ud.client_unit_id = '" + unitid_mst + "'   ";
                    decimal total_std = 0, fhp = 0, shp = 0;
                    dt = sgen.getdata(userCode, mq);
                    if (dt.Rows.Count > 0)
                    {

                        TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                        TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                        if (command == "Print")
                        {
                            sgen.open_report_bydt_xml(userCode, dt, "std_atten", "Student Attendance");
                            ViewBag.scripCall += "showRptnew('Student Attendance');";
                        }

                        if (command == "View")
                        {
                            model = new List<Tmodelmain>();
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                Tmodelmain tmm = new Tmodelmain();
                                tmm.Col9 = tm.Col9;
                                tmm.Col10 = tm.Col10;
                                tmm.Col11 = tm.Col11;
                                tmm.Col12 = tm.Col12;
                                tmm.Col14 = tm.Col14;
                                tmm.Col15 = tm.Col15;
                                tmm.Col16 = tm.Col16;
                                tmm.Col17 = tm.Col17;
                                tmm.Col18 = dt.Rows[i]["regnumber"].ToString();
                                tmm.Col19 = dt.Rows[i]["std_name"].ToString();
                                tmm.Col20 = dt.Rows[i]["school_days"].ToString();
                                tmm.Col21 = dt.Rows[i]["tot_days"].ToString();
                                tmm.Col22 = dt.Rows[i]["wk"].ToString();
                                tmm.Col23 = dt.Rows[i]["hl"].ToString();
                                tmm.Col24 = (sgen.Make_decimal(dt.Rows[i]["tot_days"]) - (sgen.Make_decimal(dt.Rows[i]["wk"]) + sgen.Make_decimal(dt.Rows[i]["hl"]))).ToString();////
                                tmm.Col25 = dt.Rows[i]["pr"].ToString();
                                tmm.Col26 = dt.Rows[i]["l"].ToString();
                                tmm.Col27 = dt.Rows[i]["ab"].ToString();
                                decimal perc = (sgen.Make_decimal(dt.Rows[i]["pr"]) / sgen.Make_decimal(tmm.Col24)) * 100;//
                                tmm.Col28 = Math.Round(perc, 2).ToString();
                                tmm.SelectedItems1 = tm.SelectedItems1;
                                tmm.SelectedItems2 = tm.SelectedItems2;
                                tmm.TList1 = tm.TList1;
                                tmm.TList2 = tm.TList2;
                                model.Add(tmm);
                            }
                        }

                    }

                    else
                    {
                        TempData[MyGuid + "_TList1"] = model[0].TList1 = mod1;
                        TempData[MyGuid + "_TList2"] = model[0].TList2 = mod2;
                        ViewBag.scripCall += "mytoast('warning', 'toast-top-right', 'Data Not Found');";
                    }
                }





            }
            catch (Exception err)
            {
                var LineNumber = new StackTrace(err, true).GetFrame(0).GetFileLineNumber();
                ViewBag.scripCall += "showmsgJS(1, '" + err.Message.Replace("'", "") + " At Line number " + LineNumber + "', 1);";
            }
            ModelState.Clear();
            return View(model);
        }
        #endregion        

    }
}