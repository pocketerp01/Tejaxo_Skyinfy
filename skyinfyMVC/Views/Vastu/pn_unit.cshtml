
@using System.Data;
@model IList<skyinfyMVC.Models.Tmodelmain>
@{
    /**/

    /**/

    /**/

    /**/

    string MyGuid = EncryptDecrypt.Decrypt(Request.QueryString["m_id"]);
    sgenFun sgen = new sgenFun(MyGuid);
    string userCode = sgen.GetCookie(MyGuid, "userCode");

    var viewName = sgen.GetSession(MyGuid, "viewName").ToString();
    var controllerName = sgen.GetSession(MyGuid, "controllerName").ToString();
    Layout = "~/Views/Shared/_MasterPage.cshtml";
    Cmd_Fun cmd_fun = new Cmd_Fun(MyGuid);



    string mandatory = "sa-mandatory";

    DataTable tmp = cmd_fun.getsessiondt(userCode, "TRANSACTION REQUEST", "select id,param1,param2,upper(param3) param3 ,name from controls where trim(upper(param5))='TRANSACTION REQUEST' and type='VDC'");
    var issp = false;
    var imgclosedisplay = "";
    string basestr = "", imgdisplay = "", base64 = "";
    string cg_com_name = sgen.GetCookie(MyGuid,"cg_com_name");
    string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
    var path = "";

    var newstyle = "style=visibility:visible;";
    var editstyle = "style=visibility:visible;";
    var savestyle = "style=visibility:visible;";
    var savenewstyle = "style=visibility:visible;";
    var viewstyle = "style=visibility:visible;";
    var viewauth = "";
    var extstyle = "style=visibility:visible;";
    string con_type = "";
    string buttons = "";
    buttons += "<div class='col-md-8'>" +
"        <div class='row'>" +
"            <div class='col-sm-2' " + newstyle + ">" +
"                <div class='form-group'>" +
"                    <div class='input-group'>" +
"                        <button type='button' class='btn btn-primary form-control sa-button' " + ViewBag.vnew + " formnovalidate id='btnnew' onclick='PARENT();' name='command' value='New' accesskey='N'><u>N</u>ew</button>" +
"                        <span class='input-group-addon formclass'></span>" +
"                    </div>" +
"                </div>" +
"            </div>" +
"            <div class='col-sm-2' " + editstyle + " > " +
"                <div class='form-group'>" +
"                    <div class='input-group'>" +
"                        <button type='button' class='btn btn-warning form-control sa-button' " + ViewBag.vedit + " id='btnedit' name='command' value='Edit' accesskey='I' onclick='editfun();'>Ed<u>i</u>t</button>" +
"                        <span class='input-group-addon formclass'></span>" +
"                    </div>" +
"                </div>" +
"            </div>" +
"            <div class='col-sm-2' " + savestyle + " > " +
"                <div class='form-group'>" +
"                    <div class='input-group'>" +
"                        <button type='submit' class='btn btn-success form-control sa-button' " + ViewBag.vsave + " id='btnsave' name='command' value= '" + Model[0].Col13 + "' accesskey = '" + Model[0].Col121 + "' > " + Html.Raw(Model[0].Col122) + "</button>" +
"                        <span class='input-group-addon formclass'></span>" +
"                    </div>" +
"                </div>" +
"            </div>" +
"            <div class='col-sm-2'>" +
"                <div class='form-group' " + savenewstyle + " > " +
"                    <div class='input-group'>" +
"                        <button type='submit' class='btn btn-success form-control sa-button' " + ViewBag.vsavenew + " id='btnsavenew' name='command' value= '" + Model[0].Col100 + "' accesskey ='W'> " + Html.Raw(Model[0].Col123) + "</button>" +
"                        <span class='input-group-addon formclass'></span>" +
"                    </div>" +
"                </div>" +
"            </div>" +
"            <div class='col-sm-2' " + viewstyle + " > " +
"                <div class='form-group'>" +
"                    <div class='input-group'>" +
"                        <button type='button' class='btn btn-info form-control sa-button' id='btndetail' name='command' value='View' accesskey='V' onclick='viewfun();'><u>V</u>iew</button>" +
"                        <span class='input-group-addon formclass'></span>" +
"                    </div>" +
"                </div>" +
"            </div>" +
"            <div class='col-sm-2'>" +
"                <div class='form-group'>" +
"                    <div class='input-group'>" +
"                        <button type='submit' class='form-control sa-button sa-btncancel' formnovalidate id='btncancel' name='command' value='Cancel' accesskey='C'><u>C</u>ancel</button>" +
"                        <span class='input-group-addon formclass'></span>" +
"                    </div>" +
"                </div>" +
"            </div>" +
"        </div>" +
"    </div>";

}
@using (Html.BeginForm(viewName, controllerName, new { @m_id = EncryptDecrypt.Encrypt(Model[0].Col15), @mid = EncryptDecrypt.Encrypt(Model[0].Col14) }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    if (Model[0].Col133 == "N")
    {
        newstyle = "style=display:none;";
        savestyle = "style=display:none;";
        // savenewstyle = "style=display:none;";
    }
    if (Model[0].Col134 == "N") { editstyle = "style=display:none;"; }
    if (Model[0].Col135 == "N")
    {
        viewstyle = "style=display:none;";
        viewauth = "N";
    }
    <div class="row">
        <div class="col-sm-4">
            <div class="form-group">
                <div class='input-group'>
                    <div class="title_left">
                        <h3>@Model[0].Col9</h3>
                    </div>
                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>
        @Html.Raw(buttons)
    </div>
    <div class="clearfix"></div>

    for (int i = 0; i < Model.Count; i++)
    {
        <div class=" clearfix"></div>
        @Html.HiddenFor(model => model[0].Col1, new { @id = "hf_clientid" })
        @Html.HiddenFor(model => model[0].Col2, new { @id = "hf_clientunitid" })
        @Html.HiddenFor(model => model[0].Col3, new { @id = "hf_entby" })
        @Html.HiddenFor(model => model[0].Col4, new { @id = "hf_entdate" })
        @Html.HiddenFor(model => model[0].Col5, new { @id = "hf_editby" })
        @Html.HiddenFor(model => model[0].Col6, new { @id = "hf_editdate" })
        @Html.HiddenFor(model => model[0].Col7, new { @id = "hf_recid" })
        @Html.HiddenFor(model => model[0].Col8, new { @id = "hf_url" })
        @Html.HiddenFor(model => model[0].Col9, new { @id = "hf_title" })
        @Html.HiddenFor(model => model[0].Col10, new { @id = "hf_tab_name" })
        @Html.HiddenFor(model => model[0].Col11, new { @id = "hf_where" })
        @Html.HiddenFor(model => model[0].Col12, new { @id = "hf_type" })
        @Html.HiddenFor(model => model[0].Col13, new { @id = "hf_btn_text" })
        @Html.HiddenFor(model => model[0].Col14, new { @id = "hf_mid" })
        @Html.HiddenFor(model => model[0].Col15, new { @id = "hf_m_id" })
        @Html.HiddenFor(model => model[0].Col16, new { @id = "hf_vch_num" })
        @Html.HiddenFor(model => model[0].Col100, new { @id = "hf_savenew" })
        @Html.HiddenFor(model => model[0].Col121, new { @id = "Update" })
        @Html.HiddenFor(model => model[0].Col122, new { @id = "Save" })
        @Html.HiddenFor(model => model[0].Col123, new { @id = "savenew" })
        @Html.HiddenFor(model => model[0].Col133, new { @id = "hf_btnnew" })
        @Html.HiddenFor(model => model[0].Col134, new { @id = "hf_btnedit" })
        @Html.HiddenFor(model => model[0].Col135, new { @id = "hf_btnview" })

        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
                <div class="x_panel">
                    <div class="clearfix"></div>
                    <div class="x_content">
                        <div class="row">
                            <div class='col-sm-3'>
                                <label for="first-name">
                                    Doc No.<span class="ClientProfileLabelColor"></span>
                                </label>
                                <div class="form-group">
                                    <div class='input-group'>
                                        @Html.TextBoxFor(model => model[i].Col16, new { @id = "Col17", @ReadOnly = "true", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox" })
                                        <span class="input-group-addon formclass"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class='col-sm-6'>
                                <label for="first-name">
                                    Product Name<span class="ClientProfileLabelColor"></span>
                                </label>
                                <div class="form-group">
                                    <div class='input-group'>
                                        @Html.TextBoxFor(model => model[i].Col18, new { @id = "Col18", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox" })
                                        <span class="input-group-addon formclass"></span>
                                    </div>
                                </div>
                            </div>
                            <div class='col-sm-6'>
                                <label for="first-name"> Manufacturer Name<span class="ClientProfileLabelColor"></span> </label>
                                <div class="form-group">
                                    <div class='input-group'>
                                        @Html.TextBoxFor(model => model[i].Col17, new { @id = "Col17", @ReadOnly = "true", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox" })
                                        @Html.HiddenFor(model => model[0].Col21, new { @id = "Col21" })
                                        <span class="input-group-addon formclass"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class='col-sm-6'>
                                <label for="first-name">Product Category<span class="ClientProfileLabelColor"></span> </label>
                                <div class="form-group">
                                    <div class='input-group'>
                                        @Html.DropDownListFor(model => model[0].SelectedItems1, new MultiSelectList(Model[0].TList1, "Value", "Text", Model[0].SelectedItems1), new { @id = "ddl_inv", @class = "sa-select2-single form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @multiple = "multiple" })
                                        <span class="input-group-addon formclass"></span>
                                    </div>
                                </div>
                            </div>
                            <div class='col-sm-6'>
                                <label for="first-name">
                                    Product Sub Category<span class="ClientProfileLabelColor"></span>
                                </label>
                                <div class="form-group">
                                    <div class='input-group'>
                                        @Html.DropDownListFor(model => model[0].SelectedItems2, new MultiSelectList(Model[0].TList2, "Value", "Text", Model[0].SelectedItems2), new { @id = "ddl_chl", @class = "sa-select2-single form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @multiple = "multiple" })
                                        <span class="input-group-addon formclass"></span>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class='col-sm-12'>
                                <label for="first-name">Remark <span class="ClientProfileLabelColor"></span></label>
                                <div class="form-group">
                                    <div class='input-group'>
                                        @Html.TextAreaFor(model => model[0].Col19, new { @id = "Col19", @rows = "2", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox" })
                                        <span class="input-group-addon formclass"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class='col-sm-3'>
                                <label for="first-name">
                                    File Title<span class="ClientProfileLabelColor"></span>
                                </label>
                                <div class="form-group">
                                    <div class='input-group'>
                                        @Html.TextBoxFor(model => model[i].Col32, new { @id = "Col31", @class = "form-control col-md-12 col-sm-12 col-xs-12 sa-textbox " })
                                        <span class="input-group-addon formclass"></span>
                                    </div>
                                </div>
                            </div>
                            <div class='col-sm-3'>

                                <label for="first-name">
                                    File Description<span class="ClientProfileLabelColor"></span>
                                </label>
                                <div class="form-group">
                                    <div class='input-group'>
                                        @Html.TextAreaFor(model => model[i].Col31, new { @id = "Col32", @class = "form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @rows = "2", @maxlength = "195" })
                                        <span class="input-group-addon formclass"></span>
                                    </div>
                                </div>
                            </div>
                            <div class='col-sm-4 col-xs-6'>
                                <label for="first-name">
                                    Upload Document<span class="ClientProfileLabelColor">*</span>
                                </label>
                                <div class="row">
                                    <div class='col-sm-7'>
                                        @try
                                        {
                                            var splist = Model[0].LTM1.Where(m => m.Col2 == "PUR").ToList();
                                            issp = splist.Count > 0;
                                            imgdisplay = "none";
                                            imgclosedisplay = "none";

                                            if (issp)
                                            {
                                                base64 = sgen.imgtobase64(serverpath + splist[0].Col4);
                                                basestr = "data: image/png;base64," + base64;
                                                imgdisplay = "block";
                                            }
                                        }
                                        catch (Exception err) { imgdisplay = "none"; imgclosedisplay = "none"; }

                                        @if (issp)
                                        {
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    <label>File Already Attached</label>
                                                </div>
                                            </div>
                                        }
                                        @if (!issp)
                                        {
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    <img id="imgupd1" src="../../images/file-upload-button.png" onclick="imgclick(this);" style="max-width: 120px" />
                                                    <input id="upd1" onchange="fileselected(this);" style="visibility: hidden; height: 0; width: 0" name="upd1" type="file" />
                                                    <span onclick="imgclick(this);" ID="spanupd1">@Model[0].Col33</span>
                                                    <span class="input-group-addon formclass"></span>
                                                    @Html.HiddenFor(model => model[i].Col33, new { @id = "hf_sp" })
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class='col-sm-5'>
                                        <img id="thumbnil1" style="width: 120px; height: 120px; margin-top: 10px; display: @imgdisplay" data-pdf-thumbnail-file="@basestr" src="@basestr" alt="" />
                                        <span id="img_close1" style="border: 1px solid white;padding: 3px;cursor:pointer;display:@imgclosedisplay" onclick="removetempfile(this);"><i class="fa fa-close"></i></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-md-4 col-xs-4">
                                <table id="filetable" class="table table-striped table-bordered table-hover">
                                    <thead>
                                        <tr>
                                            <th>File Name</th>
                                            <th>File Title</th>
                                            <th>File Description</th>
                                            <th colspan="2">Action</th>
                                            <th>View</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model[0].LTM1 != null)
                                        {
                                            for (int f = 0; f < Model[0].LTM1.Count; f++)
                                            {
                                                @Html.HiddenFor(model => model[i].LTM1[f].Col1, new { @id = "hf_ltm1" })
                                                @Html.HiddenFor(model => model[i].LTM1[f].Col2, new { @id = "hf_ltm2" })
                                                @Html.HiddenFor(model => model[i].LTM1[f].Col3, new { @id = "hf_ltm3" })
                                                @Html.HiddenFor(model => model[i].LTM1[f].Col4, new { @id = "hf_ltm4" })
                                                @Html.HiddenFor(model => model[i].LTM1[f].Col5, new { @id = "hf_ltm5" })
                                                @Html.HiddenFor(model => model[i].LTM1[f].Col6, new { @id = "hf_ltm6" })
                                                @Html.HiddenFor(model => model[i].LTM1[f].Col7, new { @id = "hf_ltm7" })
                                                <tr>
                                                    <td>
                                                        <label Width="170px" Style="word-wrap: normal; word-break: break-all;" ID="lbl_filename">@Model[0].LTM1[f].Col1</label>
                                                    </td>
                                                    <td>
                                                        <label Style="word-wrap: break-word" ID="lbl_filetitle">@Model[0].LTM1[f].Col6</label>
                                                    </td>
                                                    <td>
                                                        <label Style="word-wrap: break-word" ID="lbl_filetitle">@Model[0].LTM1[f].Col5</label>
                                                    </td>
                                                    <td><a href="@Url.RouteUrl(new { Controller = "Vastu", Action = "fdown", value = Model[0].LTM1[f].Col3,typ=Model[0].Col12,Myguid=MyGuid })"><i class="fa fa-download"></i></a></td>
                                                    <td><a onclick="fdelete(event,'@Model[0].LTM1[f].Col3');"><i class="fa fa-close"></i></a></td>
                                                    <td>
                                                        @{
                                                            try
                                                            {
                                                                path = "data:" + Model[0].LTM1[f].Col7 + ";base64," + Convert.ToBase64String(File.ReadAllBytes(HttpContext.Current.Server.MapPath("/Uploads/" + userCode + "/" + Model[0].LTM1[f].Col4)));
                                                            }
                                                            catch { }
                                                        }
                                                        @if (Model[0].LTM1[f].Col7.Contains("image"))
                                                        {
                                                            <a class="fancybox" rel="ligthbox" href='@path'>
                                                                <i class="fa fa-eye"></i>
                                                            </a>
                                                        }
                                                        else
                                                        {
                                                            <a class="fancybox" rel="ligthbox" onclick="renderPDF('@path', document.getElementById('holder'));">
                                                                <i class="fa fa-eye"></i>
                                                                <div id="holder"></div>
                                                            </a>
                                                        }

                                                    </td>

                                                </tr>
                                            }
                                        }
                                    </tbody>

                                </table>

                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    }

    <input type="submit" id="callback1" formnovalidate value="Callback" name="Command" title="callback" style="visibility:hidden" class="btn btn-primary" />
    <input type="button" id="hfbtnyes" onclick="yesfun();" value="Yes" name="Command" title="Yes" style="visibility:hidden" class="btn btn-primary" />
    <input type="button" id="hfbtnno" onclick="nofun();" value="No" name="Command" title="No" style="visibility:hidden" class="btn btn-primary" />

}
@Styles.Render("~/bundles/updcss")
@Scripts.Render("~/bundles/updjs")
<script type="text/javascript">

    function renderPDF(url, canvasContainer, options) {
        //debugger
        // Loaded via <script> tag, create shortcut to access PDF.js exports.
        var pdfjsLib = window['pdfjs-dist/build/pdf'];

        // The workerSrc property shall be specified.
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'js/pdf.worker.js';

        var options = options || { scale: 1 };

        function renderPage(page) {
            var viewport = page.getViewport(options.scale);
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d');
            var renderContext = {
                canvasContext: ctx,
                viewport: viewport
            };

            canvas.height = viewport.height;
            canvas.width = viewport.width;

            canvasContainer.appendChild(canvas);
            page.render(renderContext);
        }

        function renderPages(pdfDoc) {
            for (var num = 1; num <= pdfDoc.numPages; num++)
                pdfDoc.getPage(num).then(renderPage);
        }

        pdfjsLib.disableWorker = true;
        pdfjsLib.getDocument(url).then(renderPages);

    }
</script>

<script type="text/javascript">
     $(document).ready(function () {
            @Html.Raw(ViewBag.scripCall);
            $("[id*=hf_controller]").val('@ViewContext.RouteData.Values["Controller"].ToString()');
         $("[id*=hf_viewname]").val('@Path.GetFileNameWithoutExtension(Server.MapPath(VirtualPath))');
         //debugger;
         //var chk_Chk1 = $("[type=checkbox][id=chk_Chk1]");
         //var chk_Chk2 = $("[type=checkbox][id=chk_Chk2]");
         //var chk_Chk3 = $("[type=checkbox][id=chk_Chk3]");

         //if (chk_Chk1[0].checked) { chk1_check(); } else { chk1_uncheck();}
         //if (chk_Chk2[0].checked) { chk2_check(); } else { chk2_uncheck(); }
         //if (chk_Chk3[0].checked) { chk3_check(); } else { chk3_uncheck(); }


         //   //FANCYBOX
         //   //https://github.com/fancyapps/fancyBox
         //   $(".fancybox").fancybox({
         //       openEffect: "none",
         //       closeEffect: "none"
         //});

         //FANCYBOX
         //https://github.com/fancyapps/fancyBox
         $(".fancybox").fancybox({
             openEffect: "none",
             closeEffect: "none"
         });

        });
        function removetempfile(ctrl) {
            //debugger;
            var cnt = ctrl.id.split('e')[1];
            $("#upd" + cnt + "")[0].value = "";
            $("#spanupd" + cnt + "")[0].innerText = "";
            $("#thumbnil" + cnt + "")[0].src = "";
            $("#thumbnil" + cnt + "").hide();
            $(ctrl).hide();
    }

    function fileselected(ctrl) {
        debugger;
        var files = ctrl.files;
        var cnts = files.length;
        $(ctrl).parent().parent().find("span").css("color", "blue");
        for (var k = 0; k < cnts; k++) {

            var file = files[k];
            var namelen = file.name.length;
            if (namelen > 20) {
                $(ctrl).parent().parent().find("span")[0].innerText = "Sorry!! The file name can not be more than 15 Chars";
                $(ctrl).parent().parent().find("span").css("color", "red");
                return;
            }
            var ext = file.name.match(/\.(.+)$/)[1];
            switch (ext) {
                case 'pdf':
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'bmp':
                    break
                default:
                    $(ctrl).parent().parent().find("span")[0].innerText = "Sorry!! Upload only pdf,jpg,jpeg,png,bmp file";
                    $(ctrl).parent().parent().find("span").css("color", "red");
                    return;
                    break;
            }

            //var filesize = file.size / 1024 / 1024;
            var filesize = file.size / 1024;
            if (filesize < 100) {
                var filenme = file.name.split('\\');
                var lenn = filenme.length;
                var namee = filenme[lenn - 1];
                if (cnts > 1) {
                    $(ctrl).parent().parent().find("span")[0].innerText = cnts + " File Selected";
                }
                else { $(ctrl).parent().parent().find("span")[0].innerText = namee; }
            }
            else {
                $(ctrl).parent().parent().find("span")[0].innerText = 'Sorry!! This file size is:' + filesize + 'Kb Max. Allowed size is 100Kb';
                $(ctrl).parent().parent().find("span").css("color", "red");
            }
        }

        var files = ctrl.files;
        var thmbcnt = ctrl.id.split('d')[1].trim();
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            var imageType = /image.*/;
            var nonimg = false;
            if (!file.type.match(imageType)) {
                //continue;
                nonimg = true;
            }

            var img = document.getElementById("thumbnil" + thmbcnt + "");
            img.file = file;
            var reader = new FileReader();
            reader.onload = (function (aImg) {
                return function (e) {
                    //debugger
                    aImg.src = e.target.result;
                    if (nonimg == true) {
                        aImg.src = "../../../images/pdfthumb.png";
                    }
                    //aImg.setAttribute("data-pdf-thumbnail-file", e.target.result);
                    //createPDFThumbnails();
                };
            })(img);
            reader.readAsDataURL(file);
            $("#thumbnil" + thmbcnt + "").show();
            $("#img_close" + thmbcnt + "").show();
        }
    }
    function imgclick(ctrl) { $(ctrl).closest('div').find("input[type=file]").click(); }
    function editfun() { var data = show_Foo('Select Entry For Edit', 'EDIT', '1', '@viewName', '@controllerName'); }
    function viewfun() {
        if ('@viewauth' == "N") {
            showmsgJS(1, "You dont have permission for view entries of this page, please contact your admin", 2);
            return;
        }
        var data = show_Foo('View Detail', 'VIEW', '1', '@viewName', '@controllerName');
    }

        function PARENT() { var data = show_Foo('Select Manufacturer', 'MANUF', '1', '@viewName', '@controllerName'); }

        function fdelete(evt, id) {
            //prevent the browsers default function
            evt.preventDefault();
            //grab the form and wrap it with jQuery
            var $form = $("form");
            var obj = { "value": id };
            myMethod('@controllerName', '@viewName', "fdelete", obj, null);
            $("#callback1").click();
        }
        function onsuccessdel(response) { bindFiles(); }
        function onfailuredel(response) { }

</script>
