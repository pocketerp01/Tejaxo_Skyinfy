
@model IList<skyinfyMVC.Models.Tmodelmain>
@{


    Layout = "~/Views/Shared/_MasterPage.cshtml";

}

<link rel="chrome-webstore-item" href="https://chrome.google.com/webstore/detail/ajhifddimkapgcifgcodmmfdlknahffk">

<style>
    /**, *:before, *:after {
      box-sizing: border-box;
    }*/

    /*body {
      background: #C5DDEB;
      font: 14px/20px "Lato", Arial, sans-serif;
      padding: 40px 0;
      color: white;
    }*/

    div.example {
        background-color: lightgrey;
        padding: 10px;
        color: darkcyan;
        border-radius: 25px;
        position: relative;
        font-family: Verdana;
    }

    @@media screen and (min-width: 600px) {
        div.example {
            font-size: 15px;
            color: darkcyan;
            border-radius: 25px;
            position: relative;
            font-family: Verdana;
        }
    }

    @@media screen and (max-width: 600px) {
        div.example {
            font-size: 17px;
            color: darkcyan;
            border-radius: 25px;
            position: relative;
            font-family: Verdana;
        }
    }
    .list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .list li {
            position: relative;
            /*margin-bottom: 10px;*/
        }

    #topright {
        position: absolute;
        right: 0;
        top: 0;
        display: block;
        text-indent: -999em;
        text-decoration: none;
    }

    .container {
        /*margin: 0 auto;*/
        width: 100%;
        background: #444753;
        /*border-radius: 5px;*/
    }

    .people-list {
        /*width: 260px;
        float: left;*/
    }

    .search {
        padding: 20px;
    }

    /*input {
        border-radius: 3px;
        border: none;
        padding: 14px;
        color: white;
        background: #6A6C75;
        width: 90%;
        font-size: 14px;
      }*/
    .fa-search {
        position: relative;
        left: -25px;
    }

    ul {
        /*padding: 20px;*/
        /*height: 770px;*/
    }

    li {
        /*padding-bottom: 20px;*/
    }

    img {
        float: left;
    }

    .about {
        float: left;
        margin-top: 8px;
    }

    .about {
        padding-left: 8px;
    }

    .status {
        color: rgb(189, 189, 189);
    }

    .chat {
        /*width: 490px;*/
        float: left;
        background: #F2F5F8;
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
        color: #434651;
    }

    .chat-header {
        padding: 20px;
        border-bottom: 2px solid white;
    }

    img {
        float: left;
    }

    .chat-about {
        float: left;
        padding-left: 10px;
        margin-top: 6px;
    }

    .chat-with {
        font-weight: bold;
        font-size: 16px;
    }

    .chat-num-messages {
        color: $gray;
    }

    .fa-star {
        float: right;
        color: #D8DADF;
        font-size: 20px;
        margin-top: 12px;
    }

    }

    .chat-history {
       
    }

    .message-data {
        margin-bottom: 15px;
    }

    .message-data-time {
        color: lightgray;
        padding-left: 6px;
    }

    .message {
        color: black;
        padding: 18px 20px;
        line-height: 10px;
        font-size: 16px;
        border-radius: 7px;
        margin-bottom: 30px;
        width: 70%;
        position: relative;
        font-family: Verdana;
    }

    .my-message {
        background: darkgrey;
    }

    .other-message {
        background-color: darkgrey;
    }

    :after {
        border-bottom-color: dimgray;
        left: 93%;
    }

    .chat-message {
        /*padding: 30px;*/
    }

    textarea {
        width: 100%;
        border: none;
        padding: 10px 20px;
        font: 14px/22px "Lato", Arial, sans-serif;
        margin-bottom: 10px;
        border-radius: 5px;
        resize: none;
    }

    .fa-file-o, .fa-file-image-o {
        font-size: 16px;
        color: gray;
        cursor: pointer;
    }

    button {
        float: right;
        color: $blue;
        font-size: 16px;
        text-transform: uppercase;
        border: none;
        cursor: pointer;
        font-weight: bold;
        background: #F2F5F8;
    }

    &:hover {
        color: darkblue;
    }

    .online, .offline, .me {
        margin-right: 3px;
        font-size: 10px;
    }

    .online {
        color: green;
    }

    .offline {
        color: orange;
    }

    .me {
        color: #293955;
    }

    .align-left {
        text-align: left;
    }

    .align-right {
        text-align: right;
    }

    .float-right {
        float: right;
    }

    /*.clearfix:after {
        visibility: hidden;
        display: block;
        font-size: 0;
        content: " ";
        clear: both;
        height: 0;
    }*/
</style>
<style>
    .form-control-borderless {
        border: none;
    }

        .form-control-borderless:hover, .form-control-borderless:active, .form-control-borderless:focus {
            border: none;
            outline: none;
            box-shadow: none;
        }
</style>
<style>
    .myborder {
        padding: 30px 30px 20px;
        border-bottom: 2px solid white;
        overflow-y: scroll;
        height: 400px;
        border-style: ridge;
        border: 1px solid #ccc !important;
        padding: 0.01em 16px;
        border-radius: 16px;
    }
</style>
@using (Html.BeginForm("V_Conference", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
<div class="row">
    <div class="col-sm-4">
        <div class="form-group">
            <div class='input-group'>
                <div class="title_left">
                    <h3>CONFERENCE MEETING</h3>
                </div>

                <span class="input-group-addon formclass"></span>
            </div>
        </div>
    </div>
    <div class="col-sm-8">
        <div class="col-sm-2">
            <div class="form-group">
                <div class='input-group'>
                    <input type="button" class="btn btn-primary form-control sa-button" @ViewBag.vnew style="border-radius: 10px!important;"
                           id="btnnew" onclick="open_room();" name="command" value="New Meeting" accesskey="N" />
                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <div class='input-group'>
                    <input type="button" class="btn btn-success form-control sa-button" @ViewBag.vnew style="border-radius: 10px!important;"
                           id="btnjoin" onclick="join_room();" name="command" value="Join Meeting" accesskey="N" />
                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <div class='input-group'>
                    <input type="button" class="btn btn-warning form-control sa-button" @ViewBag.vnew style="border-radius: 10px!important;"
                           id="btnshare" name="command" disabled value="Share Screen" accesskey="N" />
                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>
        @*<div class="col-sm-2">
                <div class="form-group">
                    <div class='input-group'>
                        <input type="button" class="btn btn-primary form-control sa-button" @ViewBag.vnew style="border-radius: 10px!important;"
                               id="btnleave" onclick="close_room();" name="command"  value="Leave Meeting" accesskey="N" />
                        <span class="input-group-addon formclass"></span>
                    </div>
                </div>
            </div>*@
        <div class="col-sm-2">
            <div class="form-group">
                <div class='input-group'>
                    <input type="button" class="sa-btncancel form-control sa-button" @ViewBag.vnew style="border-radius: 10px!important;"
                           id="btnend" onclick="end_room();" name="command" value="End meeting" accesskey="N" />
                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @*<input type="button" id="allow-webcam" value="Enable Your Webcam" />
                <input type="button" id="disable-webcam" value="Disable Your Webcam" />
                <input type="button" id="allow-mic" value="Enable Your Microphone" />
                <input type="button" id="disable-mic" value="Disable Your Microphone" />*@

            <div class="checkbox">
                <label>
                    <input type="checkbox" checked onclick="changevdo(this);"> Video is enabled
                </label>
            </div>
            <div class="checkbox">
                <label>
                    <input type="checkbox" checked onclick="changeodo(this);"> Audio is enabled
                </label>
            </div>
            @*<div class="checkbox">
                    <label>
                        <input type="checkbox" checked onclick="changescr(this);"> Screen one is enabled
                    </label>
                </div>*@
            @*<input type="button" id="allow-screen" value="Enable Your Screen" />*@
            @*<input id="share-files" value="Select and Share Your Files" />*@
        </div>
    </div>
    @*<input type="button" id="allow-webcam" value="Enable Your Webcam" />
        <input type="button" id="disable-webcam" value="Disable Your Webcam" />
        <input type="button" id="allow-mic" value="Enable Your Microphone" />
        <input type="button" id="disable-mic" value="Disable Your Microphone" />*@

</div>
    <div class="clearfix"></div>
    <div class="clearfix"></div>
    for (int i = 0; i < Model.Count; i++)
    {



    }
    <div class="row" style="background:#F2F5F8">
        <div class="col-sm-6">
            <div class="chat-header clearfix" style="height:70px;">
                <input type="text" id="room-id" value="abcde" class="form-control form-control-lg form-control-borderless" placeholder="Enter Meeting Id..." autocorrect=off autocapitalize=off size="20">
            </div>
            @*<div id="chat-container">
                <div class="chat-output"></div>
            </div>*@
            <section class="make-center myborder" >
                <div id="videos-container" draggable="true"></div>
            </section>
        </div>
        <div class="col-sm-6">
            <div class="contr clearfix" id="2nd_col">
                <div class="row">
                    <div class="col-sm-5" id="stud_list">
                        <div id="people-list">
                            <div class="chat-header clearfix" style="height:70px;">
                                <h5 class="text-muted" style="color:black;font-weight: bold;font-size: 16px;">
                                    <span class="fa fa-list principal-title" style="padding-right:5px;"></span>
                                    Connected Peoples
                                </h5>
                            </div>
                            <div class="chat-list myborder" >
                                <ol class="list" id="no_bullet"></ol>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-7">
                        <div class="chat">
                            <div class="chat-header clearfix">
                                <div class="chat-about">
                                    <div class="chat-with">
                                        <span class="fa fa-comments principal-title" style="padding-right:5px;font-size:larger;"></span>
                                        Online Chat
                                    </div>
                                </div>
                            </div>
                            <!-- end chat-header -->
                            <div class="myborder">
                                <div class="chat-history" style="height:300px">
                                    <ul id="c_hist" style="list-style: none;"></ul>
                                </div> <!-- end chat-history -->
                                <div id="file-container"></div>
                                <div class="chat-message">
                                    <textarea name="message-to-send" id="input-text-chat" class="form-control form-control-lg form-control-borderless" placeholder="Type your message..." rows="1"></textarea>
                                    <span class="input-group-addon btn-success" data-toggle="tooltip" data-placement="top" title="Send" id="btn_send"><i class="fa fa-paper-plane-o"></i></span>
                                    <span class="input-group-addon btn btn-primary" data-toggle="tooltip" data-placement="top" title="Attachment" id="share-file"><i class="fa fa-paperclip"></i></span>
                                    <!--end of col-->
                                </div> <!-- end chat-message -->
                            </div>
                        </div> <!-- end chat -->
                        <script id="message-template" type="text/x-handlebars-template">
                            <li class="clearfix">
                                <div class="message-data align-right">
                                    <span class="message-data-time">{{time}}, Today</span> &nbsp; &nbsp;
                                    <span class="message-data-name">Olia</span> <i class="fa fa-circle me"></i>
                                </div>
                                <div class="message other-message float-right">
                                    {{messageOutput}}
                                </div>
                            </li>
                        </script>
                        <script id="message-response-template" type="text/x-handlebars-template">
                            <li>
                                <div class="message-data">
                                    <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>
                                    <span class="message-data-time">{{time}}, Today</span>
                                </div>
                                <div class="message my-message">
                                    {{response}}
                                </div>
                            </li>
                        </script>
                    </div>
                </div>


            </div> <!-- end container -->

        </div>
   </div>
    @Html.HiddenFor(m => m[0].Col17, new { id = "Student_Name" })
    @Html.HiddenFor(m => m[0].Col18, new { id = "rollno" })
    @Html.HiddenFor(m => m[0].Col19, new { id = "Class" })
    @Html.HiddenFor(m => m[0].Col20, new { id = "section" })
    @Html.HiddenFor(m => m[0].Col24, new { id = "Classid" })
    @Html.HiddenFor(m => m[0].Col25, new { id = "sectionid" })
    @Html.HiddenFor(m => m[0].Col21, new { id = "client_id" })
    @Html.HiddenFor(m => m[0].Col22, new { id = "unit_id" })
    @Html.HiddenFor(m => m[0].Col23, new { id = "utype" })
    @Html.HiddenFor(m => m[0].Col14, new { id = "m_id" })
    @Html.HiddenFor(m => m[0].Col15, new { id = "mid" })
     <input type="submit" id="callback1" value="Callback" name="Command" title="callback" style="visibility:hidden" class="btn btn-primary" />

}
<script src="~/dist/RTCMultiConnection.js"></script>
<script src="~/dist/RTCMultiConnection.min.js"></script>
@*<script src="~/node_modules/webrtc-adapter/out/adapter.js"></script>*@
<script src="~/socket.io/socket.io.js"></script>
<!-- custom layout for HTML5 audio/video elements -->
<link rel="stylesheet" href="~/dev/getHTMLMediaElement.css">
<script src="~/dev/getHTMLMediaElement.js"></script>
<script src="~/node_modules/recordrtc/RecordRTC.js"></script>
<script src="~/node_modules/webrtc-screen-capturing/getScreenId.js"></script>
<script src="~/node_modules/fbr/FileBufferReader.js"></script>
<script src="~/dist/list.js"></script>
<script>

    // ......................................................
    // .......................UI Code........................
    // ......................................................
    //document.getElementById('open-room').onclick = function () {


    //};

    function end_room() {
        //
        connection.getAllParticipants().forEach(function (participant) {
            connection.disconnectWith(participant);
        });
        connection.attachStreams.forEach(function (stream) {
            stream.stop();
        });
        if (!connection.isInitiator) return;
        connection.send({
            userRemoved: true,
            removedUserId: 'xyz'
        });
    }
    function close_room() {
        connection.close();
    }
    function open_room() {

        //document.getElementById('room-id').value = new Date().getTime();
        disableInputButtons();
        setUserInfo();
        var roomid = document.getElementById('room-id').value;
        beforeOpenOrJoin(roomid, function () {
            connection.open(roomid, function () {
                afterOpenOrJoin();
                try {
                    $("video")[0].style.maxheight = "100%";
                } catch (err) { }
            });
        });
    }

    function join_room() {
        disableInputButtons();
        setUserInfo();
        var roomid = document.getElementById('room-id').value;
        beforeOpenOrJoin(roomid, function () {
            connection.join(roomid, function () {
                // join callback
                afterOpenOrJoin();
                //var btnShareScreen = document.getElementById('btnshare');
                //btnShareScreen.disabled = false;
                
            });
        });
        fillUsers();
    }


    //document.getElementById('join-room').onclick = function () {

    //};

    // ......................................................
    // ..................RTCMultiConnection Code.............
    // ......................................................

    var connection = new RTCMultiConnection();

    // by default, socket.io server is assumed to be deployed on your own URL
    connection.socketURL = 'https://rtcmulticonnection.herokuapp.com/';

    // comment-out below line if you do not have your own socket.io server
    // connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

    connection.socketMessageEvent = 'video-screen-demo';
    connection.autoCloseEntireSession = true;
    //connection.dontCaptureUserMedia = true;
    //connection.attachStreams.push(videoAndScreenMixer.getMixedStream());
    
    connection.enableFileSharing = true; // by default, it is "false".
    connection.session = {
        audio: true,
        video: true,        
        data: true
    };

    connection.sdpConstraints.mandatory = {
        OfferToReceiveAudio: true,
        OfferToReceiveVideo: true
    };

    connection.videosContainer = document.getElementById('videos-container');
    connection.onstream = function (event) {


        var existing = document.getElementById(event.streamid);
        if (existing && existing.parentNode) {
            existing.parentNode.removeChild(existing);
        }

        if (event.type === 'local' && event.stream.isVideo) {
            RMCMediaTrack.cameraStream = event.stream;
            RMCMediaTrack.cameraTrack = event.stream.getVideoTracks()[0];
        }

        event.mediaElement.removeAttribute('src');
        event.mediaElement.removeAttribute('srcObject');
        event.mediaElement.muted = true;
        event.mediaElement.volume = 0;

        var video = document.createElement('video');

        try {
            video.setAttributeNode(document.createAttribute('autoplay'));
            video.setAttributeNode(document.createAttribute('playsinline'));
        } catch (e) {
            video.setAttribute('autoplay', true);
            video.setAttribute('playsinline', true);
        }

        if (event.type === 'local') {
            video.volume = 0;
            try {
                video.setAttributeNode(document.createAttribute('muted'));
            } catch (e) {
                video.setAttribute('muted', true);
            }
        }
        video.srcObject = event.stream;

        var width = parseInt(connection.videosContainer.clientWidth / 3) - 20;
        var mediaElement = getHTMLMediaElement(video, {
            title: connection.extra.userName || connection.peers[event.userid].extra.userName,
            buttons: [],
            width: width,
            showOnMouseEnter: false
        });
        
        $(mediaElement).find("video").attr("controls", "Controls")
        connection.videosContainer.appendChild(mediaElement);

        setTimeout(function () {
            mediaElement.media.play();
        }, 5000);

        mediaElement.id = event.streamid;

        if (event.type === 'local') {
            RMCMediaTrack.selfVideo = mediaElement.media;
        }

        // to keep room-id in cache
        localStorage.setItem(connection.socketMessageEvent, connection.sessionid);
    };

    connection.onstreamended = function (event) {
        var mediaElement = document.getElementById(event.streamid);
        if (mediaElement) {
            mediaElement.parentNode.removeChild(mediaElement);
        }
    };

    connection.onEntireSessionClosed = function (event) {
        //
        connection.close();
    };

    connection.onMediaError = function (e) {
        if (e.message === 'Concurrent mic process limit.') {
            if (DetectRTC.audioInputDevices.length <= 1) {
                alert('Please select external microphone. Check github issue number 483.');
                return;
            }

            var secondaryMic = DetectRTC.audioInputDevices[1].deviceId;
            connection.mediaConstraints.audio = {
                deviceId: secondaryMic
            };

            connection.join(connection.sessionid);
        }
    };

    // ..................................
    // ALL below scripts are redundant!!!
    // ..................................

    function disableInputButtons() {
        //document.getElementById('room-id').onkeyup();

        document.getElementById('btnnew').disabled = true;
        document.getElementById('btnjoin').disabled = true;
        //document.getElementById('room-id').disabled = true;
    }

    // ......................................................
    // ......................Handling Room-ID................
    // ......................................................

    var roomid = '';
    if (localStorage.getItem(connection.socketMessageEvent)) {
        roomid = localStorage.getItem(connection.socketMessageEvent);
    } else {
        roomid = connection.token();
    }
    var txtRoomId = document.getElementById('room-id');
    txtRoomId.value = roomid;
    txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function () {
        localStorage.setItem(connection.socketMessageEvent, document.getElementById('room-id').value);
    };

    // detect 2G
    if (navigator.connection &&
        navigator.connection.type === 'cellular' &&
        navigator.connection.downlinkMax <= 0.115) {
        alert('2G is not supported. Please use a better internet service.');
    }
</script>
<script type="text/javascript">
    // screen sharing codes goes here
    var RMCMediaTrack = {
        cameraStream: null,
        cameraTrack: null,
        screen: null
    };
    function userdiv() {
        $("#no_bullet").empty();
        connection.getAllParticipants().forEach(function (pid) {

            var userName = connection.extra.rollno || connection.peers[pid].extra.userName;
            var classname = connection.extra.classname || connection.peers[pid].extra.classname;
            var section = connection.extra.section || connection.peers[pid].extra.section;
            var rollno = connection.extra.rollno || connection.peers[pid].extra.rollno;


            if (connection.peers[pid].peer.connectionState == "connected") {

                /**/
                /**/
                $("#no_bullet").append('<li href="#" class="clearfix"><div class="about"><div class= "name" >' + userName
                    + ' / ' + rollno
                    + ' / ' + classname
                    + ' / ' + section + '</div ><div class="status"> <i class="fa fa-circle online"></i> Signal (Fine) </div> </div ></li>');
            }
            else {
                $("#no_bullet").append('<li href="#" class="clearfix"><div class="about"><div class= "name" >' + userName

                    + ' / ' + rollno
                    + ' / ' + classname
                    + ' / ' + section + '</div ><div class="status"> <i class="fa fa-circle offline"></i> Signal (Weak) </div> </div ></li>');
            }
        });

    }
    function beforeOpenOrJoin(roomid, callback) {
        connection.socketCustomEvent = roomid;
        callback();
    }

    function afterOpenOrJoin() {
        connection.socket.on(connection.socketCustomEvent, function (message) {
            if (message.userid === connection.userid) return; // ignore self messages

            if (message.justSharedMyScreen === true) {
                var video = document.getElementById(message.userid);
                if (video) {
                    // video.querySelector('video').srcObject = null;
                }
            }

            if (message.justStoppedMyScreen === true) {
                var video = document.getElementById(message.userid);
                if (video) {
                    video.querySelector('video').srcObject = null;
                }
            }
        });
        
    }

    var btnShareScreen = document.getElementById('btnshare');
    connection.onUserStatusChanged = function () {
        btnShareScreen.disabled = connection.getAllParticipants().length <= 0;
        userdiv();
    };

    btnShareScreen.onclick = function () {

        if ($(this)[0].value === "Share Screen") {
            
            var isscreen = false;
            connection.attachStreams.forEach(function (stream) {
                stream.getTracks().forEach((t) => {
                    if (t.label.toString().includes("screen")) isscreen = true;
                });
            });

            if (isscreen) { alert('Screen Already Shared'); return; }


            //$(this)[0].value = "Camera";
            connection.addStream({
                screen: true,
                //oneway: true
            });


          
            //getScreenStream(function (screen) {

            //    var isLiveSession = connection.getAllParticipants().length > 0;
            //    if (isLiveSession) {
            //        replaceTrack(RMCMediaTrack.screen);
            //    }

            //    // now remove old video track from "attachStreams" array
            //    // so that newcomers can see screen as well
            //    connection.attachStreams.forEach(function (stream) {
            //        stream.getVideoTracks().forEach(function (track) {
            //            stream.removeTrack(track);
            //        });

            //        // now add screen track into that stream object
            //        stream.addTrack(RMCMediaTrack.screen);
            //    });
            //});
        }
        else {
            //connection.removeStream({
            //    screen: true
            //});


            //if (RMCMediaTrack.cameraStream.getVideoTracks()[0].readyState) {
            //    RMCMediaTrack.cameraStream.getVideoTracks().forEach(function (track) {
            //        RMCMediaTrack.cameraStream.removeTrack(track);
            //    });
            //    RMCMediaTrack.cameraStream.addTrack(RMCMediaTrack.cameraTrack);
            //}

            //RMCMediaTrack.selfVideo.srcObject = RMCMediaTrack.cameraStream;

            //connection.socket && connection.socket.emit(connection.socketCustomEvent, {
            //    justStoppedMyScreen: true,
            //    userid: connection.userid
            //});

            //// share camera again
            //replaceTrack(RMCMediaTrack.cameraTrack);

            //// now remove old screen from "attachStreams" array
            //connection.attachStreams = [RMCMediaTrack.cameraStream];
            //getScreenStream(function (screen) {


            //    
            //    //var isLiveSession = connection.getAllParticipants().length > 0;
            //    //if (isLiveSession) {
            //    //    replaceTrack(RMCMediaTrack.screen);
            //    //}

            //    // now remove old video track from "attachStreams" array
            //    // so that newcomers can see screen as well
            //    //connection.attachStreams.forEach(function (stream) {
            //    //    stream.getVideoTracks().forEach(function (track) {
            //    //        stream.removeTrack(track);
            //    //    });

            //    //    // now add screen track into that stream object
            //    //    stream.addTrack(RMCMediaTrack.cameraStream);
            //    //});
            //});

            $(this)[0].value = "Share Screen";
        }
    };

    function getScreenStream(callback) {
        getScreenId(function (error, sourceId, screen_constraints) {
            navigator.mediaDevices.getUserMedia(screen_constraints).then(function (screen) {
                RMCMediaTrack.screen = screen.getVideoTracks()[0];

                RMCMediaTrack.selfVideo.srcObject = screen;

                // in case if onedned event does not fire
                (function looper() {
                    // readyState can be "live" or "ended"
                    if (RMCMediaTrack.screen.readyState === 'ended') {
                        RMCMediaTrack.screen.onended();
                        return;
                    }
                    setTimeout(looper, 1000);
                })();

                var firedOnce = false;
                RMCMediaTrack.screen.onended = RMCMediaTrack.screen.onmute = RMCMediaTrack.screen.oninactive = function () {
                    if (firedOnce) return;
                    firedOnce = true;
                    btnShareScreen.value = "Share Screen";
                    if (RMCMediaTrack.cameraStream.getVideoTracks()[0].readyState) {
                        RMCMediaTrack.cameraStream.getVideoTracks().forEach(function (track) {
                            RMCMediaTrack.cameraStream.removeTrack(track);
                        });
                        RMCMediaTrack.cameraStream.addTrack(RMCMediaTrack.cameraTrack);
                    }

                    RMCMediaTrack.selfVideo.srcObject = RMCMediaTrack.cameraStream;

                    connection.socket && connection.socket.emit(connection.socketCustomEvent, {
                        justStoppedMyScreen: true,
                        userid: connection.userid
                    });

                    // share camera again
                    replaceTrack(RMCMediaTrack.cameraTrack);

                    // now remove old screen from "attachStreams" array
                    connection.attachStreams = [RMCMediaTrack.cameraStream];

                    // so that user can share again
                    btnShareScreen.disabled = false;
                    //document.getElementById('btnleave').disabled = false;
                };

                connection.socket && connection.socket.emit(connection.socketCustomEvent, {
                    justSharedMyScreen: true,
                    userid: connection.userid
                });

                callback(screen);
            });
        });
    }

    function replaceTrack(videoTrack) {
        if (!videoTrack) return;
        if (videoTrack.readyState === 'ended') {
            alert('Can not replace an "ended" track. track.readyState: ' + videoTrack.readyState);
            return;
        }
        connection.getAllParticipants().forEach(function (pid) {
            var peer = connection.peers[pid].peer;
            if (!peer.getSenders) return;
            var trackToReplace = videoTrack;
            peer.getSenders().forEach(function (sender) {
                if (!sender || !sender.track) return;
                if (sender.track.kind === 'video' && trackToReplace) {
                    sender.replaceTrack(trackToReplace);
                    trackToReplace = null;
                }
            });
        });
    }


    function changeodo(ctrl) {
        connection.attachStreams.forEach(function (stream) {
            stream.getTracks().forEach((t) => {
                if (t.kind === 'audio') t.enabled = ctrl.checked;
            });
        });

    }
    function changevdo(ctrl) {
        
        connection.attachStreams.forEach(function (stream) {
            stream.getTracks().forEach((t) => {
                if (t.kind === 'video') t.enabled = ctrl.checked;
            });
        });

    }

    //getElement('#allow-webcam').onclick = function () {
    //    //this.disabled = true;
    //    connection.attachStreams.forEach(function (stream) {
    //        stream.getTracks().forEach(track => track.stop());
    //    });

    //    //var session = { audio: true, video: true };

    //    //connection.captureUserMedia(function (stream) {
    //    //    var streamid = rtcMultiConnection.token();
    //    //    connection.customStreams[streamid] = stream;

    //    //    connection.sendMessage({
    //    //        hasCamera: true,
    //    //        streamid: streamid,
    //    //        session: session
    //    //    });
    //    //}, session);

    //    connection.addStream({
    //        video: true
    //    });
    //};

    //getElement('#disable-webcam').onclick = function () {

    //    connection.attachStreams.forEach(function (stream) {
    //        stream.getTracks().forEach((t) => {
    //            if (t.kind === 'video') t.enabled = !t.enabled;
    //        });
    //    });
    //    ////this.disabled = true;
    //    //connection.attachStreams.forEach(function (stream) {
    //    //    stream.getTracks().forEach(track => track.stop());
    //    //});
    //    //var session = { audio: true };
    //    //connection.captureUserMedia(function (stream) {
    //    //    var streamid = connection.token();
    //    //    connection.customStreams[streamid] = stream;
    //    //    connection.sendMessage({
    //    //        streamid: streamid,
    //    //        session: session
    //    //    });
    //    //}, session);
    //};
    //getElement('#allow-mic').onclick = function () {

    //    connection.attachStreams.forEach(function (stream) {
    //        stream.getTracks().forEach((t) => {
    //            if (t.kind === 'audio') t.enabled = !t.enabled;
    //        });
    //    });
    //    connection.attachStreams.forEach(function (stream) {
    //        stream.getTracks().forEach(track => track.stop());
    //    });
    //    //var session = { audio: true };
    //    //connection.captureUserMedia(function (stream) {
    //    //    var streamid = connection.token();
    //    //    connection.customStreams[streamid] = stream;
    //    //    connection.sendMessage({
    //    //        streamid: streamid,
    //    //        session: session
    //    //    });
    //    //}, session);
    //    //connection.str
    //};
    //getElement('#disable-mic').onclick = function () {
    //    connection.attachStreams.forEach(function (stream) {
    //        stream.getTracks().forEach((t) => {
    //            if (t.kind === 'audio') t.enabled = !t.enabled;
    //        });
    //    });
    //    //connection.attachStreams.forEach(function (stream) {
    //    //    stream.getTracks().forEach(track => track.stop());
    //    //});
    //    //var session = { video: true };
    //    //connection.captureUserMedia(function (stream) {
    //    //    var streamid = connection.token();
    //    //    connection.customStreams[streamid] = stream;
    //    //    connection.sendMessage({
    //    //        streamid: streamid,
    //    //        session: session
    //    //    });
    //    //}, session);
    //    ////connection.addStream({
    //    ////    video: true

    //    ////});

    //    //this.disabled = true;
    //    //var session = { audio: true };

    //    //connection.captureUserMedia(function (stream) {
    //    //    var streamid = connection.token();
    //    //    connection.customStreams[streamid] = stream;

    //    //    connection.sendMessage({
    //    //        hasMic: true,
    //    //        streamid: streamid,
    //    //        session: session
    //    //    });
    //    //}, session);
    //};
    function getElement(selector) {
        return document.querySelector(selector);
    }



</script>


<script type="text/javascript">

    function setUserInfo() {
        connection.extra.userName = $("#Student_Name")[0].value;
        connection.extra.rollno = $("#rollno")[0].value;
        connection.extra.classname = $("#Class")[0].value;
        connection.extra.section = $("#section")[0].value;
    }
    connection.onmessage = appendDIV;
    document.getElementById('input-text-chat').onkeyup = function (e) {
        if (e.keyCode != 13) return;

        // removing trailing/leading whitespace
        sendmsg();
    };

    function sendmsg() {

        var txtbox = document.getElementById('input-text-chat');
        txtbox.value = txtbox.value.replace(/^\s+|\s+$/g, '');
        if (!txtbox.value.length) return;

        var obj = {};
        obj.text = txtbox.value;
        obj.userName = connection.extra.userName;
        obj.rollno = connection.extra.rollno;
        obj.classname = connection.extra.classname;
        obj.section = connection.extra.section;
        connection.send(obj);
        appendDIV(obj);
        txtbox.value = '';
    }
    document.getElementById('btn_send').onclick = sendmsg;
    function appendDIV(obj) {
        
        var element = document.createElement("div");
        var text = obj.text || obj.data.text;
        var userName = obj.userName || obj.data.userName;
        var classname = obj.classname || obj.data.classname;
        var rollno = obj.rollno || obj.data.rollno;
        var section = obj.section || obj.data.section;
        //$("#c_hist").append('<li"> <div class= "message-data align-right"><span class="message-data-time" >(' + formatAMPM() + ')' + userName +
        //    ' / ' + rollno + '</span><div class="float-right example">' + text + '</div></div > </li >');

        $("#c_hist").append('<li"> <div class= "message-data align-right"><span class="message-data-time" >(' + formatAMPM() + ')<a style="color:Black">' + userName +
            ' / ' + rollno + '</a></span><div class="float-right example">' + text + '</div></div ><br/> </li >');
        document.getElementById('input-text-chat').focus();
    }

    function formatAMPM() {
        var dt;
        var d = new Date(),
            minutes = d.getMinutes().toString().length == 1 ? '0' + d.getMinutes() : d.getMinutes(),
            hours = d.getHours().toString().length == 1 ? '0' + d.getHours() : d.getHours(),
            ampm = d.getHours() >= 12 ? 'pm' : 'am',
            //months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            dt = 'Today' + ' ' + hours + ':' + minutes + ampm;
        return dt;
    }
</script>

<script type="text/javascript">

    // ......................................................
    // ................FileSharing/TextChat Code.............
    // ......................................................

    connection.filesContainer = document.getElementById('file-container');



    var progressHelper = {};

    // www.RTCMultiConnection.org/docs/onFileStart/
    connection.onFileStart = function (file) {
        var div = document.createElement('div');
        div.title = file.name;
        div.innerHTML = '<label>0%</label> <progress></progress>';

        if (file.remoteUserId) {
            try {

                div.innerHTML += ' (Sharing with:' + connection.peers[file.remoteUserId].extra.userName + ')';
            }
            catch{
                div.innerHTML += ' (Sharing From:' + connection.extra.userName + ')';
            }
        }

        if (!connection.filesContainer) {
            connection.filesContainer = document.body || document.documentElement;
        }

        connection.filesContainer.insertBefore(div, connection.filesContainer.firstChild);

        if (!file.remoteUserId) {
            progressHelper[file.uuid] = {
                div: div,
                progress: div.querySelector('progress'),
                label: div.querySelector('label')
            };
            progressHelper[file.uuid].progress.max = file.maxChunks;
            return;
        }

        if (!progressHelper[file.uuid]) {
            progressHelper[file.uuid] = {};
        }

        progressHelper[file.uuid][file.remoteUserId] = {
            div: div,
            progress: div.querySelector('progress'),
            label: div.querySelector('label')
        };
        progressHelper[file.uuid][file.remoteUserId].progress.max = file.maxChunks;
    };

    // www.RTCMultiConnection.org/docs/onFileProgress/
    connection.onFileProgress = function (chunk) {
        debugger
        var helper = progressHelper[chunk.uuid];
        if (!helper) {
            return;
        }
        if (chunk.remoteUserId) {
            helper = progressHelper[chunk.uuid][chunk.remoteUserId];
            if (!helper) {
                return;
            }
        }

        helper.progress.value = chunk.currentPosition || chunk.maxChunks || helper.progress.max;
        updateLabel(helper.progress, helper.label);
    };

    // www.RTCMultiConnection.org/docs/onFileEnd/
    connection.onFileEnd = function (file) {
        debugger
        var helper = progressHelper[file.uuid];
        if (!helper) {
            console.error('No such progress-helper element exist.', file);
            return;
        }

        if (file.remoteUserId) {
            helper = progressHelper[file.uuid][file.remoteUserId];
            if (!helper) {
                return;
            }
        }

        var obj = {};
        obj.userid = file.remoteUserId;
        obj.userName = connection.extra.userName || connection.peers[file.userid].extra.userName;
        obj.rollno = connection.extra.rollno || connection.peers[file.userid].extra.rollno;
        obj.classname = connection.extra.classname || connection.peers[file.userid].extra.classname;
        obj.section = connection.extra.classname || connection.peers[file.userid].extra.section;
        obj.file = file;


        //var obj = {};

        //obj.fileurl = file.url;
        //obj.filename = file.name;

        appendDIV_file(obj);
        $(helper.div).empty();
    };

    function updateLabel(progress, label) {
        if (progress.position === -1) {
            return;
        }

        var position = +progress.position.toFixed(2).split('.')[1] || 100;
        label.innerHTML = position + '%';
    }


    document.getElementById('share-file').onclick = function () {
        var fileSelector = new FileSelector();
        fileSelector.selectSingleFile(function (file) {
            connection.send(file);
        });
    };


    function appendDIV_file(obj) {
        debugger
        var userName = obj.userName || obj.data.userName;
        var classname = obj.classname || obj.data.classname;
        var rollno = obj.rollno || obj.data.rollno;


        var file = obj.file || obj.data.file;

        if (file == null) {
            var text = obj.text || obj.data.text;

            $("#c_hist").append('<li"> <div class= "message-data align-right"><span class="message-data-time" >(' + formatAMPM() + ')</span><span class="message-data-name">' + userName +
                ' / ' + rollno + '</span><div class="float-right example">' + text + '</div></div ><br/> </li >');
        }
        else {
            $("#c_hist").append('<li> <div class= "message-data align-right" ><span class="message-data-time" >(' + formatAMPM() + ')</span><span class="message-data-name">' + userName +
                ' / ' + rollno + '</span> <div class="float-right example"><a href = "' + file.url + '" download = "' + file.name + '" style="color: darkcyan;">' + file.name + ' <i class="fa fa-download float-right" style="padding-left:8px;"></i></a></div></div><br/></li >');

        }
        document.getElementById('input-text-chat').focus();
    }
  
   

</script>

<script type="text/javascript">
    function fillUsers() {
        //if (!connection.isInitiator)
        {
            debugger
            connection.onUserStatusChanged = function () {
                userdiv();
                //participants.push({
                //    pid: pid,
                //    broadcaster: connection.peers[pid].extra.broadcaster === true
                //});

            }
        }

        
    }
 
</script>