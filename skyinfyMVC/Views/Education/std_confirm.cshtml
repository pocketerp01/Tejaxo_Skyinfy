@using System.Data;
@model IList<skyinfyMVC.Models.Tmodelmain>
@{
    string clr = "";
    string basestr = "", imgdisplay = "", base64 = "";
    Layout = "~/Views/Shared/_MasterPage.cshtml";
    sgenFun sgen = new sgenFun(Model[0].Col15);
    string MyGuid = Model[0].Col15;
    string userCode = sgen.GetCookie(Model[0].Col15, "userCode");
    var viewName = sgen.GetSession(Model[0].Col15, "viewName").ToString();
    var controllerName = sgen.GetSession(Model[0].Col15, "controllerName").ToString();
    string cg_com_name = sgen.GetCookie(Model[0].Col15, "cg_com_name");
    string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
    var ispr = false;
    var iscp = false;
    var onclick = "";
    var imgclosedisplay = "";
}

@using (Html.BeginForm(viewName, controllerName, new { @m_id = EncryptDecrypt.Encrypt(Model[0].Col15), @mid = EncryptDecrypt.Encrypt(Model[0].Col14) }, FormMethod.Post, new { enctype = "multipart/form-data", id = "std_confirm" }))
{
    <div class="row">
        <div class="col-sm-4">
            <div class="form-group">
                <div class='input-group'>
                    <div class="title_left">
                        <h3>@Model[0].Col9</h3>
                    </div>
                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="row">

                <div class="col-sm-2">
                    <div class="form-group">
                        <div class='input-group'>
                            @*<input type="submit" class="btn btn-primary form-control sa-button" name="command" @ViewBag.vfill formnovalidate value="Confirm" onclick="setTableDatat();" id="btn_Fill" accesskey="F" />*@
                            <button type='button' class='btn btn-primary form-control sa-button'  @ViewBag.vfill  id='btn_conf' name='command' onclick="setTableDatat();" formnovalidate value='Confirm' accesskey='O'>C<u>o</u>nfirm</button>

                            <span class="input-group-addon formclass"></span>
                        </div>
                    </div>
                </div>



                <div class='col-sm-2'>
                    <div class="form-group">
                        <div class='input-group'>
                            @*<input type="submit" class="form-control sa-button sa-btncancel" id="btncancel" name="command" formnovalidate value="Cancel" accesskey="C" />*@
                           <button type='submit' class='form-control sa-button sa-btncancel' formnovalidate id='btncancel' name='command' value='Cancel' accesskey='C'><u>C</u>ancel</button>

                            <span class="input-group-addon formclass"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="clearfix"></div>

    @Html.HiddenFor(model => model[0].Col1, new { @id = "hf_clientid" })
    @Html.HiddenFor(model => model[0].Col2, new { @id = "hf_clientunitid" })
    @Html.HiddenFor(model => model[0].Col3, new { @id = "hf_entby" })
    @Html.HiddenFor(model => model[0].Col4, new { @id = "hf_entdate" })
    @Html.HiddenFor(model => model[0].Col5, new { @id = "hf_editby" })
    @Html.HiddenFor(model => model[0].Col6, new { @id = "hf_editdate" })
    @Html.HiddenFor(model => model[0].Col7, new { @id = "hf_recid" })
    @Html.HiddenFor(model => model[0].Col8, new { @id = "hf_url" })
    @Html.HiddenFor(model => model[0].Col9, new { @id = "hf_title" })
    @Html.HiddenFor(model => model[0].Col121, new { @id = "hf_scripcall" })
    @Html.HiddenFor(model => model[0].Col10, new { @id = "hf_tab_name" })
    @Html.HiddenFor(model => model[0].Col11, new { @id = "hf_where" })
    @Html.HiddenFor(model => model[0].Col12, new { @id = "hf_type" })
    @Html.HiddenFor(model => model[0].Col13, new { @id = "hf_btn_text" })
    @Html.HiddenFor(model => model[0].Col14, new { @id = "hf_mid" })
    @Html.HiddenFor(model => model[0].Col15, new { @id = "hf_m_id" })
    @Html.HiddenFor(model => model[0].Col16, new { @id = "hf_vch_num" })
    @Html.HiddenFor(model => model[0].Col27, new { @id = "hf_userid" })
    @Html.HiddenFor(model => model[0].Col28, new { @id = "hf_fuserid" })
    @Html.HiddenFor(model => model[0].Col32, new { @id = "hf_regno" })
    @Html.HiddenFor(model => model[0].Col33, new { @id = "hf_regnumber" })



    <div class="clearfix"></div>

    <style>
        .grid-container {
            display: grid; /* This is a (hacky) way to make the .grid element size to fit its content */
            overflow: auto;
            height: 300px;
            /*width: 600px;*/
        }

        .grid {
            display: flex;
            flex-wrap: nowrap;
        }

        .grid-col {
            width: 100px;
            min-width: 100px;
        }

        .grid-item--header {
            height: 35px;
            min-height: 35px;
            z-index: 1;
            position: sticky;
            position: -webkit-sticky;
            top: 0;
            text-transform: uppercase;
            font-size: 12px;
            font-weight: bold;
            color: #ECF0F1;
            background: rgba(52,73,94,.94);
        }

        .grid-col--fixed-left {
            position: sticky;
            left: 0;
            z-index: 2;
            background: white;
        }

        .grid-col--fixed-right {
            position: sticky;
            right: 0;
            z-index: 9998;
            background: white;
        }

        .grid-item {
            height: 35px;
            border: 1px solid gray;
            /*color: #999;*/
            border: 1px solid #eee;
            padding-left: 5px;
            border-collapse: collapse;
            font-family: "Helvetica Neue",Helvetica,Arial,sans-serif";
        }

        .grid-container::-webkit-scrollbar-thumb {
            background: #555;
            border: 0px none #ffffff;
            border-radius: 50px;
        }

            .grid-container::-webkit-scrollbar-thumb:hover {
                background: #ffffff;
            }

            .grid-container::-webkit-scrollbar-thumb:active {
                background: #555;
            }

        .grid-container::-webkit-scrollbar-track {
            background: #ffffff;
        }

        .grid-container::-webkit-scrollbar-corner {
            background: #ffffff;
        }

        .datepicker.dropdown-menu {
            z-index: 99999 !important
        }

        .bootstrap-datetimepicker-widget.dropdown-menu {
            overflow: visible;
            height: 100%;
        }
        /*.grid-item:hover {
                        background: #4E5066;
                        color: #FFFFFF;
                        border-top: 1px solid #22262e;
                    }*/
    </style>


    if (Model[0].dt1 != null)
    {
        DataTable dtm = Model[0].dt1;


        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel" style="padding: 3px 15px !important">

                <div class="x_content">
                    <div class="row">
                        <div class="grid-container">
                            <div class="grid">

                                @try
                                {
                                    foreach (DataColumn dc in dtm.Columns)
                                    {
                                        int mlength = 20;
                                        try
                                        {
                                            mlength = dtm.Select("[" + dc.ColumnName + "] = MAX([" + dc.ColumnName + "])")[0][dc.ColumnName].ToString().Length;
                                        }
                                        catch (Exception err) { }
                                        int k = 0;


                                        if (dc.Ordinal == 0)
                                        {
                                            <div class="grid-col grid-col--fixed-left" id="col_@dc.Ordinal" style="width:10%">
                                                <div class="grid-item grid-item--header">
                                                    <p>@dc.ColumnName.ToString()</p>
                                                </div>

                                                @foreach (DataRow dr in dtm.Rows)
                                                {
                                                    <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)'>
                                                        <label>@(k + 1)</label>
                                                    </div>
                                                    k++;
                                                }
                                            </div>
                                        }



                                        else
                                        {
                                            <div class="grid-col" id="col_@dc.Ordinal" style="width:30%">
                                                <div class="grid-item grid-item--header">
                                                    <p>@dc.ColumnName.ToString()</p>
                                                </div>
                                                @foreach (DataRow dr in dtm.Rows)
                                                {
                                                    <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' contenteditable="false">
                                                        @dr[dc].ToString()
                                                    </div>
                                                }
                                            </div>
                                        }
                                    }
                                }
                                catch (Exception err)
                                {

                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel" style="padding: 0px 15px !important;margin-bottom:0px !important;background-color:lightgray">
                <div class="x_content">
                    <div class="row">
                        <div class='col-sm-1'>
                            <div class='col-sm-6'>
                                @Html.CheckBoxFor(model => model[0].Chk1, new { @id = "cbSelectAll", @class = "sa-input checkbox", onclick = "CheckUncheckChildNodesForFoo1('Table1', this);" })
                            </div>
                            <div class='col-sm-6'> <label>S.No.</label> </div>
                        </div>
                        <div class='col-sm-2'><label for="first-name">Student Name</label></div>
                        <div class='col-sm-2'><label for="first-name">Father Name</label></div>
                        <div class='col-sm-2'><label for="first-name">Mother Name</label></div>
                        <div class='col-sm-1'><label for="first-name">Class</label></div>
                        <div class='col-sm-2'><label for="first-name">Effective Date</label></div>
                        <div class='col-sm-2'>
                            <div class='col-sm-7'><label for="first-name">Attachment</label></div>
                            <div class='col-sm-5'><label for="first-name">Action</label></div>
                            @*<div class='col-sm-1'><label for="first-name"></label></div>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



    if (Model.Count > 0)
    {
        for (int i = 0; i < Model.Count; i++)
        {
            if ((Model[i].Col17 != null) && (Model[i].Col17 != ""))
            {
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="x_panel" style="padding:0px 17px!important">
                            <div class="x_content">
                                <div class="row" id="Table1">
                                    <div class='col-sm-1'>
                                        <div class='col-sm-6'>
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    @Html.CheckBoxFor(model => model[i].Chk2, new { @id = "cbSelect", @class = "sa-input checkbox", onclick = "CheckUncheckChildNodesForFoo2('#Table1', this.checked, this);" })
                                                    @*<input runat="server" type="checkbox" class="sa-input checkbox" onclick="CheckUncheckChildNodesForFoo2('#Table1', this.checked, this);" id="cbSelect" checked="checked" />*@

                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class='col-sm-6'>
                                            <label for="first-name">@(i + 1)</label>
                                            <div class="form-group has-success">
                                                <div class='input-group'>
                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-2'>
                                        <div class="form-group">
                                            <div class='input-group'>
                                                <a id="ld" href="@Url.RouteUrl(new { Controller = "Education", Action = "std_registration", m_id = EncryptDecrypt.Encrypt(Model[0].Col15), mid = EncryptDecrypt.Encrypt("7005.9"), fstr = "200200200" + EncryptDecrypt.Encrypt(Model[i].Col34) })">
                                                    @Html.DisplayFor(model => model[i].Col19, new { @id = "std_name", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })

                                                </a>
                                                @Html.HiddenFor(model => model[i].Col19, new { @id = "hf_std_name" })
                                                @Html.HiddenFor(model => model[i].Col17, new { @id = "hf_sa_id" })
                                                @Html.HiddenFor(model => model[i].Col18, new { @id = "hf_vch_num" })
                                                @*@Html.HiddenFor(model => model[i].Col25, new { @id = "hf_sdob" })
                                                @Html.HiddenFor(model => model[i].Col26, new { @id = "hf_fdob" })
                                                @Html.HiddenFor(model => model[i].Col29, new { @id = "hf_pickpoint" })
                                                @Html.HiddenFor(model => model[i].Col30, new { @id = "hf_droppoint" })
                                                @Html.HiddenFor(model => model[i].Col31, new { @id = "hf_transport" })*@
                                                @Html.HiddenFor(model => model[i].Col34, new { @id = "hf_fstr" })


                                                <span class="input-group-addon formclass"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-2'>
                                        <div class="form-group">
                                            <div class='input-group'>
                                                @Html.DisplayFor(model => model[i].Col20, new { @id = "father", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                @Html.HiddenFor(model => model[i].Col20, new { @id = "hf_father", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })

                                                <span class="input-group-addon formclass"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-2'>
                                        <div class="form-group">
                                            <div class='input-group'>
                                                @Html.DisplayFor(model => model[i].Col21, new { @id = "mother", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                @Html.HiddenFor(model => model[i].Col21, new { @id = "hf_mother", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })

                                                <span class="input-group-addon formclass"></span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class='col-sm-1'>
                                        <div class="form-group">
                                            <div class='input-group'>

                                                @Html.DisplayFor(model => model[i].Col22, new { @id = "class", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                @Html.HiddenFor(model => model[i].Col22, new { @id = "hf_class", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                @Html.HiddenFor(model => model[i].Col23, new { @id = "hf_class_id", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })

                                                <span class="input-group-addon formclass"></span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class='col-sm-2'>
                                        <div class="form-group">
                                            <div class='input-group'>
                                                @Html.TextBoxFor(model => model[i].Col24, new { @id = "eff_date", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox sa-ac-date", @onkeydown = "return checkLength(this, 28,event);" })



                                                <span class="input-group-addon formclass"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="col-sm-7">
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    <input type="submit" class="btn btn-info btn-sm" onclick="sethfval('@i');" name="command" formnovalidate value="ATTACHMENT" id="btn" accesskey="F" />
                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>

                                        @*<div class="col-sm-1">
                                                <div class="form-group">
                                                    <div class='input-group'>
                                                        <input type="submit" class="btn btn-info btn-sm" onclick="sethfval('@i');" name="command" formnovalidate value="PRINT" id="btn" accesskey="F" />
                                                        <span class="input-group-addon formclass"></span>
                                                    </div>
                                                </div>
                                            </div>*@

                                        <div class="col-sm-5">
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    <input type="submit" class="btn btn-info btn-sm" onclick="sethfval('@i');" name="command" formnovalidate value="EDIT" id="btn" accesskey="E" />
                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        }
                <div class="row">
                    <div class="col-sm-4">
                    </div>
                    <div class="col-sm-8">
                        <div class="col-sm-2">
                            <div class="form-group">
                                <div class='input-group'>
                                    @*<input type="submit" class="btn btn-primary form-control sa-button" name="command" @ViewBag.vfill formnovalidate value="Confirm" onclick="setTableDatat();" id="btn_Fill" accesskey="F" />*@
                                    <button type='button' class='btn btn-success form-control sa-button' ViewBag.vfill id='btn_Fill' name='command' onclick="setTableDatat();" formnovalidate value='Confirm' accesskey='O'>C<u>o</u>nfirm</button>

                                    <span class="input-group-addon formclass"></span>
                                </div>
                            </div>
                        </div>



                        <div class='col-sm-2'>
                            <div class="form-group">
                                <div class='input-group'>
                                    @*<input type="submit" class="form-control sa-button sa-btncancel" id="btncancel" name="command" formnovalidate value="Cancel" accesskey="C" />*@
                                    <button type='submit' class='form-control sa-button sa-btncancel' formnovalidate id='btncancel' name='command' value='Cancel' accesskey='C'><u>C</u>ancel</button>

                                    <span class="input-group-addon formclass"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
    }






                    <input type="hidden" name="hfrow" id="hfrow" />
                    <input type="submit" id="callback1" value="Callback" name="Command" title="callback" formnovalidate style="visibility:hidden" class="btn btn-primary" />

}

                    <script type="text/javascript">

    $(document).ready(function () {
      debugger ;
      @Html.Raw(ViewBag.scripCall)
        $("[id*=hf_controller]").val('@ViewContext.RouteData.Values["Controller"].ToString()');
        $("[id*=hf_viewname]").val('@Path.GetFileNameWithoutExtension(Server.MapPath(VirtualPath))');
    });


                        function CheckUncheckChildNodesForFoo1(childContainer, checkbox) {
                            
                            var check = $(checkbox)[0].checked;

                            var checks = $("[type=checkbox][id=cbSelect]");
                            var cnt = checks.length;
                            for (var i = 0; i < cnt; i++) {
                                var chk = "";
                                //chk = $(checks[i]).closest('tr').find("[id*=hd_chk]").val();
                                if (check) {

                                    if (chk == "") { checks.eq(i).prop('checked', true); }
                                }
                                else {
                                    if (chk == "") { checks.eq(i).prop('checked', false); }
                                }

                            }

                            if (check) {
                                //$("[type=checkbox][id=cbSelect]").prop('checked', true);
                                $("[type=checkbox][id=cbSelectAll]").prop('checked', true);
                            }
                            else {
                                //$("[type=checkbox][id=cbSelect]").prop('checked', false);
                                $("[type=checkbox][id=cbSelectAll]").prop('checked', false);
                            }

                        }

                        function CheckUncheckChildNodesForFoo2(childContainer, check, ctrl) {

                            
                            var checktype = 2;
                            if (checktype != 2) {

                                $("[type=checkbox][id=cbSelect]").prop('checked', false);
                                $(ctrl).prop("checked", check);
                                document.getElementsByName(ctrl.name)[0].checked = check;

                            }
                            else {

            @*var seeklimit = '@sgen.GetSession(MyGuid, "SEEKLIMIT").ToString()';*@
                                var checkall = true;
                                //document.getElementsByName(ctrl.name)[0].checked = check;

                                var childChkBoxes = $(childContainer)[0].getElementsByTagName("input")
                                var childChkBoxCount = childChkBoxes.length;
                                for (var i = 1; i < childChkBoxCount; i++) {
                                    if ($(childChkBoxes[i]).children.length > 0)
                                        checkall = $(childChkBoxes[i])[0].checked;
                                    else checkall = $(childChkBoxes[i]).checked;
                                    if (!checkall) break;
                                }
                                $("[type=checkbox][id=cbSelectAll]").prop('checked', checkall);

                            }


                        }



                        function sethfval(val) {
                            $("#hfrow").val(val);
                        }
                        function setTableDatat() {
                            try {
                                //
                                //$("[id*=btn_Fill]").prop('disabled', true);
                                datatable = new Array();
                                var heads = $("[id*=col_]");
                                var rows = $(heads).eq(0).find("[id*=row_]");
                                for (var r = 0; r < rows.length; r++) {
                                    var row = $("[id=row_" + r + "]");
                                    var arr = new Array();
                                    for (var h = 0; h < heads.length; h++) {
                                        var obj = {};
                                        var vall = "";
                                        if ($(row[h]).find("input").not("[type=button],[type=submit],[id^=dd_item],[id^=s2id]").eq(0)[0] != undefined
                                            && $(row[h]).find("input").not("[type=button],[type=submit],[id^=dd_item],[id^=s2id]").eq(0)[0].type == "checkbox") {
                                            vall = $(row[h]).find("input").not("[type=button],[type=submit],[id^=dd_item],[id^=s2id]").eq(0)[0].checked;
                                        }
                                        else if ($(row[h]).find("input").not("[type=button],[type=submit],[id^=dd_item],[id^=s2id]").length > 0) {
                                            vall = $(row[h]).find("input").not("[type=button],[type=submit],[id^=dd_item],[id^=s2id]").val();
                                        }
                                        else if ($(row[h]).find("select").length > 0) {
                                            vall = $(row[h]).find("select").val();
                                        }
                                        else {
                                            vall = row[h].innerText;
                                        }
                                        obj[heads[h].children[0].innerText] = vall;
                                        arr.push(obj);
                                    }
                                    datatable.push(arr);
                                }
                            }
                            catch (err) { alert(err); return; }
                            debugger
                            $("#hftable").val(JSON.stringify(datatable));
                            //PageMethods.settable(datatable);
                            debugger
                            var $form = $('#@viewName');
                            var obj = {
                                "hftable": $form.serialize(),
                                "Myguid":@MyGuid,
                                "command": "Confirm"
                            };
                            //evt.preventDefault();
                            //grab the form and wrap it with jQuery
                           
                            var jqXHR = $.ajax({
                                type: "post",
                                url: "/@controllerName/@viewName",
                                contentType: "application/json; charset=utf-8",
                                //data: $form.serialize() + "&command=Confirm&Myguid="@MyGuid,
                                data: JSON.stringify(obj),
                                datatype: "json",
                                async: false
                            });
                            debugger
                            var res = jqXHR.responseText.trim();
                            //alert("message");

                            eval($(jqXHR.responseText).find("input[name*=Col121]").val());
                            //document.body.innerHTML = res;
                            $("#std_confirm")[0].innerHTML = $(jqXHR.responseText).find("#std_confirm")[0].innerHTML;
                            if (res == "ok") {
                                $('#myconn').modal('hide');
                            }
                        }
                        function expfile() {
                            window.location.href = "@Url.RouteUrl(new { Controller = @controllerName, Action = "expfile" })";
                        }

                    </script>
