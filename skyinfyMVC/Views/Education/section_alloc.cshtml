@using System.Data;
@model IList<skyinfyMVC.Models.Tmodelmain>
@{
    string clr = "";
    string basestr = "", imgdisplay = "", base64 = "";
    Layout = "~/Views/Shared/_MasterPage.cshtml";
    sgenFun sgen = new sgenFun(Model[0].Col15);
    string userCode = sgen.GetCookie(Model[0].Col15, "userCode");
    var viewName = sgen.GetSession(Model[0].Col15, "viewName").ToString();
    var controllerName = sgen.GetSession(Model[0].Col15, "controllerName").ToString();
    string cg_com_name = sgen.GetCookie(Model[0].Col15, "cg_com_name");
    string serverpath = Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");
    var ispr = false;
    var iscp = false;
    var onclick = "";
    var imgclosedisplay = "";
}

@using (Html.BeginForm(viewName, controllerName, new { @m_id = EncryptDecrypt.Encrypt(Model[0].Col15), @mid = EncryptDecrypt.Encrypt(Model[0].Col14) }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
                <div class='input-group'>
                    <div class="title_left">
                        <h3>@Model[0].Col9</h3>
                    </div>
                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>


    </div>

    <div class="clearfix"></div>

    @Html.HiddenFor(model => model[0].Col1, new { @id = "hf_clientid" })
    @Html.HiddenFor(model => model[0].Col2, new { @id = "hf_clientunitid" })
    @Html.HiddenFor(model => model[0].Col3, new { @id = "hf_entby" })
    @Html.HiddenFor(model => model[0].Col4, new { @id = "hf_entdate" })
    @Html.HiddenFor(model => model[0].Col5, new { @id = "hf_editby" })
    @Html.HiddenFor(model => model[0].Col6, new { @id = "hf_editdate" })
    @Html.HiddenFor(model => model[0].Col7, new { @id = "hf_recid" })
    @Html.HiddenFor(model => model[0].Col8, new { @id = "hf_url" })
    @Html.HiddenFor(model => model[0].Col9, new { @id = "hf_title" })
    @Html.HiddenFor(model => model[0].Col10, new { @id = "hf_tab_name" })
    @Html.HiddenFor(model => model[0].Col11, new { @id = "hf_where" })
    @Html.HiddenFor(model => model[0].Col12, new { @id = "hf_type" })
    @Html.HiddenFor(model => model[0].Col13, new { @id = "hf_btn_text" })
    @Html.HiddenFor(model => model[0].Col14, new { @id = "hf_mid" })
    @Html.HiddenFor(model => model[0].Col15, new { @id = "hf_m_id" })
    @Html.HiddenFor(model => model[0].Col16, new { @id = "hf_vch_num" })
    @Html.HiddenFor(model => model[0].Col27, new { @id = "hf_userid" })
    @Html.HiddenFor(model => model[0].Col28, new { @id = "hf_fuserid" })
    @Html.HiddenFor(model => model[0].Col32, new { @id = "hf_regno" })
    @Html.HiddenFor(model => model[0].Col33, new { @id = "hf_regnumber" })



    <div class="clearfix"></div>
    <div class="row">
        <div class="col-md-4 col-sm-4 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Class Selection <small></small></h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>

                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-6">
                            Date <span class="ClientProfileLabelColor">*</span>
                        </label>
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.TextBoxFor(model => model[0].Col17, new { @id = "txt_date", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox sa-ac-date", @onkeydown = "return checkLength(this, 28,event);" })

                        </div>
                    </div>
                </div>
                <div class="x_content">
                    <div class="form-group">
                        <label class="control-label col-md-3 col-sm-3 col-xs-6">
                            Class <span class="ClientProfileLabelColor">*</span>
                        </label>
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            @Html.DropDownListFor(model => model[0].SelectedItems1, new MultiSelectList(Model[0].TList1, "Value", "Text", Model[0].SelectedItems1), new { @id = "ddlclass", @class = "select2 sa-select2-single form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @multiple = "multiple", onchange = "selectionIndexChangeclass(this);" })


                        </div>
                    </div>

                </div>
            </div>
        </div>

        <div class="col-md-8 col-sm-8 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Class Wise Section Detail<small></small></h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>

                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    @if (Model[0].dt1 != null)
                    {
                        DataTable dtm = Model[0].dt1;
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="x_panel" style="padding: 3px 15px !important">

                                <div class="x_content">
                                    <div class="row">
                                        <div class="grid-container">
                                            <div class="grid">

                                                @try
                                                {
                                                    foreach (DataColumn dc in dtm.Columns)
                                                    {
                                                        int mlength = 20;
                                                        try
                                                        {
                                                            mlength = dtm.Select("[" + dc.ColumnName + "] = MAX([" + dc.ColumnName + "])")[0][dc.ColumnName].ToString().Length;
                                                        }
                                                        catch (Exception err) { }
                                                        int k = 0;


                                                        if (dc.Ordinal == 0)
                                                        {
                                                            <div class="grid-col grid-col--fixed-left" id="col_@dc.Ordinal">
                                                                <div class="grid-item grid-item--header">
                                                                    <p>@dc.ColumnName.ToString()</p>
                                                                </div>

                                                                @foreach (DataRow dr in dtm.Rows)
                                                                {
                                                                    <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)'>
                                                                        <label>@(k + 1)</label>
                                                                    </div>
                                                                    k++;
                                                                }
                                                            </div>
                                                        }

                                                        else if (dc.Ordinal == 1)
                                                        {
                                                            <div class="grid-col" id="col_@dc.Ordinal" style="width:30px">
                                                                <div class="grid-item grid-item--header">
                                                                    <p>@dc.ColumnName.ToString()</p>
                                                                </div>
                                                                @foreach (DataRow dr in dtm.Rows)
                                                                {
                                                                    <div class="grid-item lbl_section" id='row_@dtm.Rows.IndexOf(dr)' contenteditable="false">
                                                                        @dr[dc].ToString()
                                                                    </div>
                                                                }
                                                            </div>
                                                        }

                                                        else if (dc.Ordinal == 2)
                                                        {
                                                            <div class="grid-col" id="col_@dc.Ordinal" style="width:250px">
                                                                <div class="grid-item grid-item--header">
                                                                    <p>@dc.ColumnName.ToString()</p>
                                                                </div>
                                                                @foreach (DataRow dr in dtm.Rows)
                                                                {
                                                                    <div class="grid-item lbl_SectionType" id='row_@dtm.Rows.IndexOf(dr)' contenteditable="false">
                                                                        @dr[dc].ToString()
                                                                    </div>
                                                                }
                                                            </div>
                                                        }

                                                        else if (dc.Ordinal == 3)
                                                        {
                                                            <div class="grid-col" id="col_@dc.Ordinal" style="width:100px">
                                                                <div class="grid-item grid-item--header">
                                                                    <p>@dc.ColumnName.ToString()</p>
                                                                </div>
                                                                @foreach (DataRow dr in dtm.Rows)
                                                                {
                                                                    <div class="grid-item lbl_Section_Strength" id='row_@dtm.Rows.IndexOf(dr)' contenteditable="false">
                                                                        @dr[dc].ToString()
                                                                    </div>
                                                                }
                                                            </div>
                                                        }

                                                        else if (dc.Ordinal == 4)
                                                        {
                                                            <div class="grid-col" id="col_@dc.Ordinal" style="width:50px">
                                                                <div class="grid-item grid-item--header">
                                                                    <p>@dc.ColumnName.ToString()</p>
                                                                </div>
                                                                @foreach (DataRow dr in dtm.Rows)
                                                                {
                                                                    <div class="grid-item lbl_Availablility" id='row_@dtm.Rows.IndexOf(dr)' contenteditable="false">
                                                                        @dr[dc].ToString()
                                                                    </div>
                                                                }
                                                            </div>
                                                        }

                                                        else
                                                        {
                                                            <div class="grid-col" id="col_@dc.Ordinal" style="width:10%">
                                                                <div class="grid-item grid-item--header">
                                                                    <p>@dc.ColumnName.ToString()</p>
                                                                </div>
                                                                @foreach (DataRow dr in dtm.Rows)
                                                                {
                                                                    <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' contenteditable="false">
                                                                        @dr[dc].ToString()
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                    }
                                                }
                                                catch (Exception err) { }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

            </div>
        </div>


    </div>

    <div class="row">

        <div class="col-sm-3">

            <div class="form-group">
                <div class='input-group'>
                  @*  <input type="submit" class="btn btn-primary form-control sa-button" name="command" formnovalidate value="Allocate Section" id="btn_allo" accesskey="F" />*@
                    <button type="submit" class="btn btn-primary form-control sa-button" name="command" formnovalidate value="Allocate Section" id="btn_allo" accesskey="A"><u>A</u>llocate Section</button>

                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        @if (Model[0].dt2 != null)
        {
        DataTable dtm = Model[0].dt2;

        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel" style="padding: 3px 15px !important">

                <div class="x_content">
                    <div class="row">
                        <div class="grid-container">
                            <div class="grid">

                                @try
                                {
                                    foreach (DataColumn dc in dtm.Columns)
                                    {
                                        int mlength = 20;
                                        try
                                        {
                                            mlength = dtm.Select("[" + dc.ColumnName + "] = MAX([" + dc.ColumnName + "])")[0][dc.ColumnName].ToString().Length;
                                        }
                                        catch (Exception err) { }
                                        int k = 0;


                                        if (dc.Ordinal == 0)
                                        {
                                            <div class="grid-col grid-col--fixed-left" id="col_@dc.Ordinal" style="width:10%">
                                                <div class="grid-item grid-item--header">
                                                    <p>@dc.ColumnName.ToString()</p>
                                                </div>

                                                @foreach (DataRow dr in dtm.Rows)
                                                {
                                                    <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)'>
                                                        <label>@(k + 1)</label>
                                                    </div>
                                                    k++;
                                                }
                                            </div>
                                        }



                                        else
                                        {
                                            <div class="grid-col" id="col_@dc.Ordinal" style="width:30%">
                                                <div class="grid-item grid-item--header">
                                                    <p>@dc.ColumnName.ToString()</p>
                                                </div>
                                                @foreach (DataRow dr in dtm.Rows)
                                                {
                                                    <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' contenteditable="false">
                                                        @dr[dc].ToString()
                                                    </div>
                                                }
                                            </div>
                                        }
                                    }
                                }
                                catch (Exception err)
                                {

                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        }
    </div>
    <div style="overflow:scroll">
        <div class="row" style="width:150%">
            <div class="col-md-12 col-sm-12 col-xs-12 smt">
                <div class="x_panel" style="padding: 0px 15px !important;margin-bottom:0px !important;background-color:lightgray">
                    <div class="x_content">
                        <div class="row">
                            <div class="col-sm-1">
                                <div class='col-sm-5'>
                                    @Html.CheckBoxFor(model => model[0].Chk1, new { @id = "cbSelectAll", @class = "sa-input checkbox", onclick = "CheckUncheckChildNodesForFoo1('#Table1', this);" })
                                </div>

                                <div class='col-sm-7'> <label>S.No.</label> </div>
                            </div>
                            <div class="col-sm-2">
                                <div class='col-sm-8'><label for="first-name">Section</label></div>
                                <div class='col-sm-4'><label for="first-name">Class</label></div>
                            </div>
                            <div class='col-sm-1'><label for="first-name">Registration No.</label></div>
                            <div class='col-sm-2'><label for="first-name">Applicant Name</label></div>
                            <div class='col-sm-1'><label for="first-name">Gender</label></div>

                            <div class='col-sm-1'><label for="first-name">Father Name</label></div>
                            <div class='col-sm-1'><label for="first-name">Mother Name</label></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (Model.Count > 0)
        {
            for (int i = 0; i < Model.Count; i++)
            {
                if ((Model[i].Col18 != null)&& Model[i].Col18!="")
                {
                    <div class="row" style="width:150%">
                        <div class="col-md-12 col-sm-12 col-xs-12 smt">
                            <div class="x_panel" style="padding:0px 17px!important">
                                <div class="x_content">
                                    <div class="row" id="Table1">
                                        <div class='col-sm-1'>
                                            <div class='col-sm-5'>
                                                <div class="form-group">
                                                    <div class='input-group'>

                                                        @Html.CheckBoxFor(model => model[i].Chk2, new { @id = "cbSelect", @class = "sa-input checkbox" })
                                                        <span class="input-group-addon formclass"></span>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class='col-sm-7'>
                                                <label for="first-name">@(i + 1)</label>
                                                <div class="form-group has-success">
                                                    <div class='input-group'>
                                                        <span class="input-group-addon formclass"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class='col-sm-2'>
                                            <div class="col-sm-8">
                                                <div class="form-group">
                                                    <div class='input-group'>
                                                        @Html.DropDownListFor(model => model[i].SelectedItems2, new MultiSelectList(Model[i].TList2, "Value", "Text", Model[i].SelectedItems2), new { @id = "ddlsec" + i, @class = "select2 sa-select2-single form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @multiple = "multiple", onchange = "sectionchange(this);" })

                                                        <span class="input-group-addon formclass"></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class='col-sm-4'>
                                                <div class="form-group">
                                                    <div class='input-group'>

                                                        @Html.DisplayFor(model => model[i].Col22, new { @id = "class", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                        @Html.HiddenFor(model => model[i].Col22, new { @id = "hf_class", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                        @Html.HiddenFor(model => model[i].Col23, new { @id = "hf_class_id", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })

                                                        <span class="input-group-addon formclass"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class='col-sm-1'>
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    @Html.DisplayFor(model => model[i].Col24, new { @id = "regno", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                    @Html.HiddenFor(model => model[i].Col24, new { @id = "hf_regno", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                    @Html.HiddenFor(model => model[i].Col25, new { @id = "hf_family_id" })

                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class='col-sm-2'>
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    @Html.DisplayFor(model => model[i].Col18, new { @id = "std_name", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                    @Html.HiddenFor(model => model[i].Col18, new { @id = "hf_std_name" })
                                                    @Html.HiddenFor(model => model[i].Col26, new { @id = "hf_rec_id" })

                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>

                                        <div class='col-sm-1'>
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    @Html.DisplayFor(model => model[i].Col19, new { @id = "std_gender", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                    @Html.HiddenFor(model => model[i].Col19, new { @id = "hf_std_gender" })



                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>


                                        <div class='col-sm-1'>
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    @Html.DisplayFor(model => model[i].Col20, new { @id = "father", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                    @Html.HiddenFor(model => model[i].Col20, new { @id = "hf_father", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })

                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class='col-sm-1'>
                                            <div class="form-group">
                                                <div class='input-group'>
                                                    @Html.DisplayFor(model => model[i].Col21, new { @id = "mother", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })
                                                    @Html.HiddenFor(model => model[i].Col21, new { @id = "hf_mother", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @onkeydown = "return checkLength(this, 28,event);" })

                                                    <span class="input-group-addon formclass"></span>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

            }
        }
    </div>


    <input type="hidden" name="hftable" id="hftable" />
    <input type="submit" id="callback1" value="Callback" name="Command" title="callback" style="visibility:hidden" class="btn btn-primary" />
    <input type="submit" id="btn_class" value="Class" name="Command" title="callback" style="visibility:hidden" class="btn btn-primary" />

}

<script type="text/javascript">

    $(document).ready(function () {
                   @Html.Raw(ViewBag.scripCall);
        $("[id*=hf_controller]").val('@ViewContext.RouteData.Values["Controller"].ToString()');
        $("[id*=hf_viewname]").val('@Path.GetFileNameWithoutExtension(Server.MapPath(VirtualPath))');

    });

    function selectionIndexChangeclass(ctrl) {
      //  debugger;
        $(parent.document.getElementById('btn_class')).trigger('click');
    }

    function sectionchange(ctrl) {
        //debugger;

        var regno = $(ctrl).parent().parent().parent().parent().children().eq(7).children()[0].innerText;
        var newsection = $(ctrl)[0].value;

        var obj = { "value": regno, "newsection": newsection };

        myMethod_C("@controllerName", "@viewName", "sectionavail", obj, OnSuccessLoad, OnErroLoad);
    }

    function OnErroLoad(response) {
        //debugger
    }

    function OnSuccessLoad(response) {
       // debugger;
        var xmlDoc = $.parseXML(response);
        var xml = $(xmlDoc);
        var customers = xml.find("master_setting");

        for (var c = 0; c < customers.length; c++) {
            var customer = $(customers[c]);

            $(".grid").find("[id*=col_]").eq(3).find("[id=row_" + c + "]").text(customer.find("SECTION_STRENGTH").text());
            $(".grid").find("[id*=col_]").eq(4).find("[id=row_" + c + "]").text(customer.find("Availablility").text());
        }
    }

    function setTableDatat() {
        try {
            //debugger
            datatable = new Array();
            var heads = $("[id*=col_]");
            var rows = $(heads).eq(0).find("[id*=row_]");
            for (var r = 0; r < rows.length; r++) {
                var row = $("[id=row_" + r + "]");
                var arr = new Array();
                for (var h = 0; h < heads.length; h++) {
                    var obj = {};
                    obj[heads[h].children[0].innerText] = row[h].innerText;
                    arr.push(obj);
                }
                datatable.push(arr);
            }
        }
        catch (err) { alert(err); return; }
        //$("#hftable").val(JSON.stringify(datatable));
        return $("#hftable").val(JSON.stringify(datatable));
    }

    function CheckUncheckChildNodesForFoo1(childContainer, checkbox) {

        var check = $(checkbox)[0].checked;

        var checks = $("[type=checkbox][id=cbSelect]");
        var cnt = checks.length;
        for (var i = 0; i < cnt; i++) {
            var chk = "";
            //chk = $(checks[i]).closest('tr').find("[id*=hd_chk]").val();
            if (check) {

                if (chk == "") { checks.eq(i).prop('checked', true); }
            }
            else {
                if (chk == "") { checks.eq(i).prop('checked', false); }
            }

        }

        if (check) {
            //$("[type=checkbox][id=cbSelect]").prop('checked', true);
            $("[type=checkbox][id=cbSelectAll]").prop('checked', true);
        }
        else {
            //$("[type=checkbox][id=cbSelect]").prop('checked', false);
            $("[type=checkbox][id=cbSelectAll]").prop('checked', false);
        }

    }

    function CheckUncheckChildNodesForFoo2(childContainer, check, ctrl) {

       // debugger;
        var checktype = 2;
        if (checktype != 2) {

            $("[type=checkbox][id=cbSelect]").prop('checked', false);
            $(ctrl).prop("checked", check);
            document.getElementsByName(ctrl.name)[0].checked = check;

        }
        else {

            var seeklimit = '<%= Session["SEEKLIMIT"] %>';
            var checkall = true;
            document.getElementsByName(ctrl.name)[0].checked = check;
            var childChkBoxes = $(childContainer)[0].getElementsByTagName("input")
            var childChkBoxCount = childChkBoxes.length;
            for (var i = 1; i < childChkBoxCount; i++) {
                if ($(childChkBoxes[i]).children.length > 0)
                    checkall = $(childChkBoxes[i])[0].checked;
                else checkall = $(childChkBoxes[i]).checked;
                if (!checkall) break;
            }
            $("[type=checkbox][id=cbSelectAll]").prop('checked', checkall);

        }


    }
</script>

