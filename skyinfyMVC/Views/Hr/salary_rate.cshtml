@using System.Data;
@model IList<skyinfyMVC.Models.Tmodelmain>
@{
    string MyGuid = "";
    MyGuid = Model[0].Col15;
    sgenFun sgen;
    sgen = new sgenFun(MyGuid);
    Layout = "~/Views/Shared/_MasterPage.cshtml";
    var viewName = sgen.GetSession(MyGuid, "viewName").ToString();
    var controllerName = sgen.GetSession(MyGuid, "controllerName").ToString();
}
@using (Html.BeginForm(viewName, controllerName, new { @m_id = EncryptDecrypt.Encrypt(Model[0].Col15), @mid = EncryptDecrypt.Encrypt(Model[0].Col14) }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="row">
        <div class="col-sm-4">
            <div class="form-group">
                <div class='input-group'>
                    <div class="title_left">
                        <h3>@Model[0].Col9</h3>
                        @Html.HiddenFor(model => model[0].Col9, new { @id = "hf_title" })
                    </div>
                    <span class="input-group-addon formclass"></span>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="row">
                <div class="col-sm-2">
                    <div class="form-group">
                        <div class='input-group'>
                            <input type="submit" class="btn btn-primary form-control sa-button" @ViewBag.vnew id="btnnew" onclick="setTableDatat();" name="command" value="New" />
                            <span class="input-group-addon formclass"></span>
                        </div>
                    </div>
                </div>
                <div class='col-sm-2'>
                    <div class="form-group">
                        <div class='input-group'>
                            <input type="submit" class="btn btn-primary form-control sa-button" @ViewBag.vsave id="btnsave" onclick="setTableDatat();" name="command" value="@Model[0].Col13" />

                            <span class="input-group-addon formclass"></span>
                        </div>
                    </div>
                </div>
                <div class='col-sm-2'>
                    <div class="form-group">
                        <div class='input-group'>
                            <button type="submit" class="sa-btncancel form-control sa-button" formnovalidate onclick="setTableDatat();" id="btncancel" name="command" value="Cancel">Cancel</button>
                            <span class="input-group-addon formclass"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="clearfix"></div>

    @Html.HiddenFor(model => model[0].Col1, new { @id = "hf_clientid" })
    @Html.HiddenFor(model => model[0].Col2, new { @id = "hf_clientunitid" })
    @Html.HiddenFor(model => model[0].Col3, new { @id = "hf_entby" })
    @Html.HiddenFor(model => model[0].Col4, new { @id = "hf_entdate" })
    @Html.HiddenFor(model => model[0].Col5, new { @id = "hf_editby" })
    @Html.HiddenFor(model => model[0].Col6, new { @id = "hf_editdate" })
    @Html.HiddenFor(model => model[0].Col7, new { @id = "hf_recid" })
    @Html.HiddenFor(model => model[0].Col8, new { @id = "hf_url" })

    @Html.HiddenFor(model => model[0].Col10, new { @id = "hf_tab_name" })
    @Html.HiddenFor(model => model[0].Col11, new { @id = "hf_where" })
    @Html.HiddenFor(model => model[0].Col12, new { @id = "hf_type" })
    @Html.HiddenFor(model => model[0].Col13, new { @id = "hf_btn_text" })
    @Html.HiddenFor(model => model[0].Col14, new { @id = "hf_mid" })
    @Html.HiddenFor(model => model[0].Col15, new { @id = "hf_m_id" })
    @Html.HiddenFor(model => model[0].Col16, new { @id = "" })
    @Html.HiddenFor(model => model[0].Col17, new { @id = "hf_rno" })

    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_content">
                    <div class="row">
                        <div class='col-sm-4 hidectrl'>
                            <label for="first-name">Doc No <span class="ClientProfileLabelColor">*</span></label>
                            <div class="form-group">
                                <div class='input-group'>
                                    @Html.TextBoxFor(model => model[0].Col18, new { @id = "txt_docno", @class = " form-control col-md-12 col-sm-12 col-xs-12 sa-textbox", @readonly = true })
                                    <span class="input-group-addon formclass"></span>
                                </div>
                            </div>
                        </div>
                        <div class='col-sm-4'>
                            <label for="first-name">Grade <span class="ClientProfileLabelColor">*</span></label>
                            <div class="form-group">
                                <div class='input-group'>
                                    @Html.DropDownListFor(model => model[0].SelectedItems1, new MultiSelectList(Model[0].TList1, "Value", "Text", Model[0].SelectedItems1), new { @id = "ddl_grd", @class = "sa-select2-multiple col-md-12 col-sm-12 col-xs-12 sa-textbox sa-mandatory", @MaxLength = "20", @multiple = "multiple" })
                                    <span class="input-group-addon formclass"></span>
                                </div>
                            </div>
                        </div>
                        <div class='col-sm-2'>
                            <label for="first-name"></label>
                            <div class="form-group">
                                <div class='input-group'>
                                    <input type="submit" class="btn btn-success form-control sa-button" @ViewBag.vget id="btnget" onclick="setTableDatat();" name="command" value="GetData" />
                                    <span class="input-group-addon formclass"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        .grid-container {
            display: grid; /* This is a (hacky) way to make the .grid element size to fit its content */
            overflow: auto;
            height: 300px;
            /*width: 600px;*/
        }

        .grid {
            display: flex;
            flex-wrap: nowrap;
        }

        .grid-col {
            width: 100px;
            min-width: 100px;
            z-index: 3;
        }

        .grid-item--header {
            height: 35px;
            min-height: 35px;
            z-index: 1;
            position: sticky;
            position: -webkit-sticky;
            top: 0;
            text-transform: uppercase;
            font-size: 12px;
            /*font-weight: bold;*/
            color: #ECF0F1;
            background: rgba(52,73,94,.94);
        }

        .grid-col--fixed-left {
            position: sticky;
            left: 0;
            z-index: 2;
            background: white;
        }

        .grid-col--fixed-right {
            position: sticky;
            right: 0;
            z-index: 9998;
            background: white;
        }

        .grid-item {
            height: 35px;
            border: 1px solid gray;
            /*color: #999;*/
            border: 1px solid #eee;
            padding-left: 5px;
            border-collapse: collapse;
            font-family: "Helvetica Neue",Helvetica,Arial,sans-serif";
        }

        .grid-container::-webkit-scrollbar-thumb {
            background: #555;
            border: 0px none #ffffff;
            border-radius: 50px;
        }

            .grid-container::-webkit-scrollbar-thumb:hover {
                background: #ffffff;
            }

            .grid-container::-webkit-scrollbar-thumb:active {
                background: #555;
            }

        .grid-container::-webkit-scrollbar-track {
            background: #ffffff;
        }

        .grid-container::-webkit-scrollbar-corner {
            background: #ffffff;
        }
        /*.grid-item:hover {
            background: #4E5066;
            color: #FFFFFF;
            border-top: 1px solid #22262e;
        }*/
        .suggestions {
            border: 1px solid #CCC;
            background-color: #FFF;
            /*width: 300px;*/
            z-index: 10000;
            top: 30px;
            left: 15px;
            width: fit-content;
        }

        .suggest-grid tr.active td {
            background-color: #777 !important;
            color: #FFF;
            z-index: 10000;
        }
    </style>
    if (Model.Count < 1)
    { }
    else
    {
        for (int i = 0; i < Model.Count; i++)
        {
            DataTable dtm = Model[i].dt1;
            if (dtm != null)
            {
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <div class="x_panel" style="padding: 3px 15px !important">

                        <div class="x_content">
                            <div class="row">
                                <div class="grid-container">
                                    <div class="grid">

                                        @foreach (DataColumn dc in dtm.Columns)
                                        {
                                            try
                                            {
                                                int mlength = 20;
                                                try
                                                {
                                                    mlength = dtm.Select("[" + dc.ColumnName + "] = MAX([" + dc.ColumnName + "])")[0][dc.ColumnName].ToString().Length;
                                                }
                                                catch (Exception err) { }
                                                int k = 0;
                                                if (dc.Ordinal == 0)
                                                {
                                                    <div class="grid-col grid-col--fixed-left" id="col_@dc.Ordinal" style="width:70px;z-index:10;left:0px;position:sticky;">
                                                        <div class="grid-item grid-item--header">
                                                            <p>@dc.ColumnName.ToString()</p>
                                                        </div>

                                                        @foreach (DataRow dr in dtm.Rows)
                                                        {
                                                            <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' data-sakeys="gloval">
                                                                <label>@(k + 1)</label>
                                                                <input type="hidden" value="@dr[dc].ToString()" id="fstr_@dc.Ordinal" />
                                                            </div>
                                                            k++;
                                                        }
                                                    </div>
                                                }
                                                else if (dc.Ordinal == 1)
                                                {
                                                    <div class="grid-col grid-col--fixed-left" id="col_@dc.Ordinal" style="width:140px;z-index:10;left:100px">
                                                        <div class="grid-item grid-item--header">
                                                            <p>@dc.ColumnName.ToString()</p>
                                                        </div>
                                                        @foreach (DataRow dr in dtm.Rows)
                                                        {
                                                            <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' data-sakeys="gloval" contenteditable="false">
                                                                @dr[dc].ToString()
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else if (dc.Ordinal == 2)
                                                {
                                                    <div class="grid-col grid-col--fixed-left" id="col_@dc.Ordinal" style="width:200px;z-index:50;left:240px">
                                                        <div class="grid-item grid-item--header">
                                                            <p>@dc.ColumnName.ToString()</p>
                                                        </div>
                                                        @foreach (DataRow dr in dtm.Rows)
                                                        {
                                                            <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' data-sakeys="gloval" contenteditable="false">
                                                                @dr[dc].ToString()
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else if (dc.Ordinal == 3)
                                                {
                                                    <div class="grid-col grid-col--fixed-left" id="col_@dc.Ordinal" style="width:200px;z-index:50;left:440px">
                                                        <div class="grid-item grid-item--header">
                                                            <p>@dc.ColumnName.ToString()</p>
                                                        </div>
                                                        @foreach (DataRow dr in dtm.Rows)
                                                        {
                                                            <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' data-sakeys="gloval" contenteditable="false">
                                                                @dr[dc].ToString()
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else if (dc.Ordinal == 4)
                                                {
                                                    <div class="grid-col grid-col--fixed-left" id="col_@dc.Ordinal" style="width:200px;z-index:50;left:640px">
                                                        <div class="grid-item grid-item--header">
                                                            <p>@dc.ColumnName.ToString()</p>
                                                        </div>
                                                        @foreach (DataRow dr in dtm.Rows)
                                                        {
                                                            <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' data-sakeys="gloval" contenteditable="false">
                                                                @dr[dc].ToString()
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else if (dc.ColumnName.Trim().ToUpper() == "TOTAL (000000)")
                                                {
                                                    <div class="grid-col" id="col_@dc.Ordinal" style="width:200px">
                                                        <div class="grid-item grid-item--header">
                                                            <p>@dc.ColumnName.ToString()</p>
                                                        </div>
                                                        @foreach (DataRow dr in dtm.Rows)
                                                        {
                                                            <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' data-sakeys="gloval" contenteditable="false">
                                                                @dr[dc].ToString()
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="grid-col" id="col_@dc.Ordinal" style="width:@(mlength * 15)px">
                                                        <div class="grid-item grid-item--header">
                                                            <p>@dc.ColumnName.ToString()</p>
                                                        </div>
                                                        @foreach (DataRow dr in dtm.Rows)
                                                        {
                                                            <div class="grid-item" id='row_@dtm.Rows.IndexOf(dr)' name="editor" data-sakeys="gloval" contenteditable="true">
                                                                @dr[dc].ToString()
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            }
                                            catch (Exception err) { }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    }

    <input type="hidden" name="hfrow" id="hfrow" />
    <input type="hidden" name="hftable" id="hftable" />
    <input type="submit" id="callback1" value="Callback" formnovalidate name="Command" title="callback" style="visibility:hidden" class="btn btn-primary" />
}

<script type="text/javascript">

    $(document).ready(function () {
       
     @Html.Raw(ViewBag.scripCall);
        $("[id*=hf_controller]").val('@ViewContext.RouteData.Values["Controller"].ToString()');
        $("[id*=hf_viewname]").val('@Path.GetFileNameWithoutExtension(Server.MapPath(VirtualPath))');
        try {
            var editpors = $("[name=editor]");
            for (var i = 0; i < editpors.length; i++) {

                $(editpors)[i].addEventListener("input", function () {
                                       
                    
                    var k = $(this)[0].id.split('_')[1];
                    totalSum(k);
                   
                }, false);
            }
            totalll();
        }
        catch (err) { }
    });
    function totalSum(k) {

        //var heads = $("[id*=col_]");
        //var rows = $(heads).eq(0).find("[id*=row_]");
        ////var rows = $("#grdviewnew tbody tr");
        ////var heads = $("#grdviewnew th");
        //var amt = 0;
        //for (var l = 3; l < heads.length - 1; l++) {
        //    if ($(rows)[k].children[l].innerText.trim() != "" && $(rows)[k].children[l].innerText.trim() != "0") {
        //        amt = amt + parseFloat($(rows)[k].children[l].innerText);
        //    }
        //}
        //return amt;
        var amt = 0;
        var heads = $("[id*=col_]");
        var row = $("[id=row_" + k + "]");
        for (var h = 5; h < heads.length - 1; h++) {
            var headername = $(row[h]).parents().eq(0).children()[0].innerText;
            var res = seekServer('@controllerName', "HEADTYPEBULK", headername, '-');
            var tval = row[h].innerText;
            if (isNaN(tval) || tval.trim() == '') {
                row[h].innerText = "";
                tval = 0;
            }

            if (res.toUpperCase() == 'DEDUCTION') amt = amt - parseFloat(tval);
            else amt = amt + parseFloat(tval);
        }
        if (isNaN(amt)) amt = "";
        row[heads.length - 1].innerText = amt;

    }

    function totalll() {

      
        var amt = 0;
        var heads = $("[id*=col_]");
        var rows = $(heads).eq(0).find("[id*=row_]");
        for (var r = 0; r < rows.length; r++) {
            amt = 0;
            var row = $("[id=row_" + r + "]");
            for (var h = 5; h < heads.length - 1; h++) {
                amt += parseFloat(row[h].innerText);
            }
            if (isNaN(amt)) amt = 0;
            row[heads.length - 1].innerText = amt;
        }

    }
    function setTableDatat() {
        try {

            datatable = new Array();

            var heads = $("[id*=col_]");
            var rows = $(heads).eq(0).find("[id*=row_]");
            for (var r = 0; r < rows.length; r++) {
                var row = $("[id=row_" + r + "]");
                var arr = new Array();
                for (var h = 0; h < heads.length; h++) {
                    var obj = {};
                    var val = "";
                    if (h == 0) {
                        val = row.eq(0).find("[id*=fstr]").val().trim();
                    }
                    else {
                        val = row[h].innerText;
                    }
                    obj[heads[h].children[0].innerText] = val;
                    arr.push(obj);
                }
                datatable.push(arr);
            }
        }
        catch (err) { alert(err); return; }
        $("#hftable").val(JSON.stringify(datatable));
    }

    function sethfval(val) {

        $("#hfrow").val(val);
        setTableDatat();
    }

</script>

