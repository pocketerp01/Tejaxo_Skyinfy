using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
//using System.Data.OracleClient;
using System.IO;
using MySql.Data.MySqlClient;
using System.Net.Mail;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Win32;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Net.Sockets;
using System.Drawing;
using System.Collections.Specialized;
using System.Web.UI.HtmlControls;
using System.Threading;
using System.Globalization;
using System.Web.Services;

using System.Web.Mvc;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using System.Net;
using skyinfyMVC.Models;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
//using Oracle.DataAccess.Client;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Client.BulkCopy;
using System.Diagnostics;
//using System.Data.OracleClient;
//using Oracle.DataAccess.Client;

//using System.Web.Mvc;
using System.Windows.Automation;
using HtmlAgilityPack;
using CrystalDecisions.CrystalReports.Engine;
using notificationDll;
/// <summary>
/// Summary description for sgenFun
/// </summary>
/// 
public class sgenFun
{
    public string mq = "", mq0 = "", MyGuid = "";
    public string dateformat = "", timeformat = "", sqldateformat = "", sqltimeformat = "", timezone = "", sep = "", datetimeformat = "", sqldatetimeformat = "";
    public static string callbackurl = "~/home/login";
    public static string callbackmvcAct = "login";
    public static string callbackmvcCtr = "home";
    public const int duration = 3600;
    ClsNotificationApp wts;
    String WhatsAppKey = "5fb3736c5739dfff875907c1";
    /// <summary>
    /// 
    /// </summary>
    /// <param name="mobile">it must be of 12digists mobile+countrycode like 919999XXXX99</param>
    /// <param name="msg">Plain Text </param>
    /// <returns></returns>
    public bool SendWtsText(string mobile, string msg)
    {
        bool ok = false;
        try
        {
            wts = new ClsNotificationApp(WhatsAppKey);
            var res = wts.SendText(mobile, msg);
            ok = true;
        }
        catch { }
        return ok;

    }/// <summary>
     /// 
     /// </summary>
     /// <param name="mobile">it must be of 12digists mobile+countrycode like 919999XXXX99</param>
     /// <param name="msg">Plain Text </param>
     /// <param name="filepath">Full File Path </param>
     /// <returns></returns>
    public bool SendWtsTextFile(string mobile, string msg, string filepath)
    {

        bool ok = false;
        try
        {

            wts = new ClsNotificationApp(WhatsAppKey);
            var res = wts.SendFileWithText(mobile, filepath, msg);
            ok = true;
        }
        catch { }
        return ok;

    }
    public bool SendwhatsFileOnly(string mobile, string filepath)
    {
        bool ok = false;
        try
        {
            wts = new ClsNotificationApp(WhatsAppKey);
            var res = wts.SendFile(mobile, filepath);
            ok = true;
        }
        catch { }
        return ok;
    }

    public sgenFun(string Myguid)
    {

        MyGuid = Myguid;

    }

    public int getDuration()
    {
        return 3600;
    }


    public string connString(string UserCode)
    {

        //string path = @"C:\skyinfy\mytns2.txt";
        string path = HttpRuntime.AppDomainAppPath + "\\mytns2.txt";


        string str = "", srv = "", PWD = "", constr = "", IP = "";
        try
        {
            if (File.Exists(path))
            {
                StreamReader sr = new StreamReader(path);
                str = sr.ReadToEnd().Trim();
                if (str.Contains("\r")) str = str.Replace("\r", ",");
                if (str.Contains("\n")) str = str.Replace("\n", ",");
                str = str.Replace(",,", ",");
                IP = str.Split(',')[1]; srv = str.Split(',')[2];
                sr.Close();
                PWD = "SATECH";
                constr = "Data Source=(DESCRIPTION="
                + "(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST= " + IP.Trim() + ")(PORT=1521)))"
                + "(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=" + srv + ")));"
                + "User Id=" + UserCode.ToUpper() + "; Password=" + PWD + ";";
                //constr = constr + ";Connection Timeout=900;pooling='true';Max Pool Size=900";
            }
        }
        catch { }
        return constr;
    }

    // connection string
    //public string connString(string UserCode, string Pwd, string IP, string srv)
    //{
    //    return "Data Source=(DESCRIPTION="
    //            + "(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST= " + IP.Trim() + ")(PORT=1521)))"
    //            + "(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=" + srv + ")));"
    //            + "User Id=" + UserCode.ToUpper() + "; Password=" + Pwd + ";";
    //}


    // get user code
    public string getUserCode()
    {
        string res = "-";
        if (HttpContext.Current.Session[MyGuid + "_cocd_mst"] != null)
        {
            res = (String)HttpContext.Current.Session[MyGuid + "_cocd_mst"];
        }


        string url = new Uri(HttpContext.Current.Request.Url.AbsoluteUri).OriginalString;

        //http://localhost:13660/erp/login_main
        //url = "http://test.skyinfy.com/school_admin/school_admin_configpage";
        //url = "http://skyinfy.com/school_admin/school_admin_configpage";

        //url = "https://cali.skyinfy.com/home/login";
        var cnt = 0;
        try
        {
            String[] HEADS = url.Split('/');
            if (HEADS[2].ToString().Trim().ToUpper().Contains(".COM") || HEADS[2].ToString().Trim().ToUpper().Contains(".IN"))
            {
                //if (url.ToLower().Contains("https"))
                //{
                //    cnt = url.Replace("https://", "").Split('/')[0].Split('.').Count();
                //    if (cnt >= 3) res = url.Replace("https://", "").Split('/')[0].Split('.')[0].ToString();
                //    if (res.Trim().ToUpper().Equals("WWW")) res = (String)HttpContext.Current.Session[MyGuid + "_cocd_mst"];
                //}
                //else if (url.ToLower().Contains("http"))
                //{

                //    cnt = url.Replace("http://", "").Split('/')[0].Split('.').Count();
                //    if (cnt >= 3) res = url.Replace("http://", "").Split('/')[0].Split('.')[0].ToString();
                //    if (res.Trim().ToUpper().Equals("WWW")) res = (String)HttpContext.Current.Session[MyGuid + "_cocd_mst"];

                //}
                res = HEADS[2].Split('.')[0];
            }
        }
        catch (Exception err)
        { }

        //string path = @"C:\skyinfy\mytns2.txt";
        string path = HttpRuntime.AppDomainAppPath + "\\mytns2.txt";

        string str = "", srv = "", PWD = "", constr = "", IP = "";
        if (res.Trim().Length < 2)
        {
            try
            {
                if (File.Exists(path))
                {
                    StreamReader sr = new StreamReader(path);
                    str = sr.ReadToEnd().Trim();
                    if (str.Contains("\r")) str = str.Replace("\r", ",");
                    if (str.Contains("\n")) str = str.Replace("\n", ",");
                    str = str.Replace(",,", ",");
                    IP = str.Split(',')[1];
                    if (res.Trim().Equals("-")) res = str.Split(',')[0].ToLower();
                    sr.Close();
                }
            }
            catch (Exception err)
            {
                showmsg(1, err.Message.ToString(), 2);
            }
        }
        return res.ToUpper();
    }
    public bool Export_Backup(string userCode, string userid_mst, string clientid_mst, string unitid_mst, string MyGuid = "")
    {
        bool RES = false;
        GC.Collect();
        string cg_com_name = GetCookie(MyGuid, "cg_com_name").Replace(" ", "");

        string currdate = server_datetime_dt(userCode).ToString("yyyyMMdd_HHmmss");

        string path = HttpContext.Current.Server.MapPath("~/backups/" + cg_com_name + "/");
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        string file = path + cg_com_name + "_" + currdate + ".sql";
        string IP = "localhost", str = "";

        //string ffpath = @"C:\skyinfy\mytns2.txt";
        string ffpath = HttpRuntime.AppDomainAppPath + "\\mytns2.txt";


        mq = "insert into history(type,ent_by,client_id,client_unit_id) values('HIS','" + userid_mst + "','" + clientid_mst + "','" + unitid_mst + "')";
        execute_cmd(userCode, mq);

        if (File.Exists(ffpath))
        {
            StreamReader sr = new StreamReader(ffpath);
            str = sr.ReadToEnd().Trim();
            if (str.Contains("\r")) str = str.Replace("\r", ",");
            if (str.Contains("\n")) str = str.Replace("\n", ",");
            if (str.Contains("\t")) str = str.Replace("\t", ",");
            str = str.Replace(",,", ",");
            IP = str.Split(',')[1];

            sr.Close();

        }

        string constr = "Server=" + IP + ";Database=" + userCode + ";Uid=root;Pwd=skyinfy;Allow User Variables=True;CharSet=utf8;SslMode=none;" +
              "Allow Zero Datetime = True;";
        try
        {

            using (OracleConnection conn = new OracleConnection(constr))
            {
                using (OracleCommand cmd = new OracleCommand())
                {
                    //using (MySqlBackup mb = new Oracleb (cmd))
                    //{
                    //    cmd.Connection = conn;
                    //    conn.Open();
                    //    mb.ExportToFile(file);
                    //    conn.Close();
                    //}
                }
            }
            RES = true;

        }
        catch (Exception EX)
        {
            FILL_ERR(Multiton.connString(userCode) + "===" + EX.ToString() + " ==> GetData Fun");
            if (EX.Message.Equals("Unable to connect to any of the specified MySQL hosts."))
            {

                showmsg(1, "Network Connection Error!Either Check your Server or Network", 1);
            }
        }

        return RES;
    }


    public DataTable searchDataTable(string searchText, DataTable input)
    {
        if (searchText == null) searchText = "";
        DataTable output = input.Clone();
        foreach (DataColumn dc in input.Columns)
        {
            if (dc.ColumnName.ToUpper().Contains(searchText.ToUpper())) return input;
        }
        foreach (DataRow dr in input.Rows)
        {
            for (int i = 0; i < input.Columns.Count; i++)
            {
                if (dr[i].ToString().ToUpper().Contains(searchText.ToUpper()))
                {
                    DataRow drnew = output.NewRow();
                    drnew.ItemArray = dr.ItemArray;
                    output.Rows.Add(drnew);
                    break;
                }
            }
        }
        return output;
    }
    public DataTable searchDataTable(DataTable input, string colname, string value, string ftype)
    {
        if (colname == null) value = "";
        DataTable output = input.Clone();

        foreach (DataRow dr in input.Rows)
        {

            if (ftype.ToUpper().Equals("CONTAINS"))
            {
                if (dr[colname].ToString().ToUpper().Contains(value.ToUpper()))
                {
                    DataRow drnew = output.NewRow();
                    drnew.ItemArray = dr.ItemArray;
                    output.Rows.Add(drnew);

                }
            }
            else if (ftype.ToUpper().Equals("EQUALS TO"))
            {
                if (dr[colname].ToString().ToUpper().Equals(value.ToUpper()))
                {
                    DataRow drnew = output.NewRow();
                    drnew.ItemArray = dr.ItemArray;
                    output.Rows.Add(drnew);

                }
            }
            else if (ftype.ToUpper().StartsWith("SMALLER"))
            {
                if (Make_decimal(dr[colname].ToString()) < Make_decimal(value.ToUpper()))
                {
                    DataRow drnew = output.NewRow();
                    drnew.ItemArray = dr.ItemArray;
                    output.Rows.Add(drnew);

                }
            }
            else if (ftype.ToUpper().StartsWith("GREATER"))
            {
                if (Make_decimal(dr[colname].ToString()) > Make_decimal(value.ToUpper()))
                {
                    DataRow drnew = output.NewRow();
                    drnew.ItemArray = dr.ItemArray;
                    output.Rows.Add(drnew);

                }
            }

        }
        return output;
    }
    //get data

    public DataTable getdata(string userCode, string DataTable_Query)
    {
        return getdata_DR(userCode, DataTable_Query);
        //GC.Collect();
        //DataTable dt = new DataTable();
        //try
        //{
        //    dt.Clear();
        //    using (OracleConnection fCon = new OracleConnection(connStringmysql(userCode)))
        //    {
        //        fCon.Open();
        //        using (OracleCommand cmd = new OracleCommand(DataTable_Query, fCon))
        //        {
        //            var adapter = new OracleDataAdapter(cmd);
        //            adapter.Fill(dt);
        //        }
        //    }
        //}
        //catch (Exception EX)
        //{
        //    dt.Clear();
        //    FILL_ERR(connStringmysql(userCode) + "===" + EX.ToString() + " ==> GetData Fun");
        //    if (EX.Message.Equals("Unable to connect to any of the specified MySQL hosts."))
        //    {
        //        showmsg(1, "Network Connection Error!Either Check your Server or Network", 1);
        //    }
        //}

        //return dt;

    }


    public DataTable getdata_rownum(string userCode, string command, string wherepage)
    {
        GC.Collect();
        DataTable dt = new DataTable();
        try
        {
            dt.Clear();
            OracleConnection fCon = new OracleConnection(Multiton.connString(userCode));
            //{
            fCon.Open();
            OracleCommand cmd = new OracleCommand("counts", fCon);
            cmd.Parameters.Add(new MySqlParameter("@command", command));
            cmd.Parameters.Add(new MySqlParameter("@wherecommand", wherepage));
            cmd.CommandType = CommandType.StoredProcedure;
            var da = new OracleDataAdapter();
            da.SelectCommand = cmd;
            da.Fill(dt);
            fCon.Close();
            fCon.Dispose();

            //}
        }
        catch (Exception EX)
        {
            FILL_ERR(Multiton.connString(userCode) + "===" + EX.ToString() + " ==> GetData Fun");
            if (EX.Message.Equals("Unable to connect to any of the specified MySQL hosts."))
            {

                showmsg(1, "Network Connection Error!Either Check your Server or Network", 1);
            }
        }

        return dt;

    }
    // get main data

    public DataTable getdata_Main(string cdcode, string qu)
    {
        GC.Collect();
        string constr2 = "Server=172.16.10.250; Database=satech;Uid=root; Pwd=skyinf0";

        DataTable dt_get = new DataTable();
        try
        {
            dt_get.Clear();
            OracleConnection fCon = new OracleConnection(Multiton.connString(cdcode));
            //{
            fCon.Open();
            using (OracleCommand cmd = new OracleCommand(qu, fCon))
            {
                using (OracleDataReader dr_reader = cmd.ExecuteReader())
                {
                    if (dr_reader != null)
                    {
                        if (dr_reader.HasRows) dt_get.Load(dr_reader);
                        dr_reader.Close();
                        dr_reader.Dispose();
                        cmd.Dispose();
                    }
                    if (!dr_reader.IsClosed)
                    {
                        dr_reader.Close();
                        dr_reader.Dispose();
                    }
                }
            }
            fCon.Close();
            fCon.Dispose();
            //}
        }
        catch (Exception EX)
        {
            FILL_ERR(EX.Message.ToString().Trim() + " ==> GetData Fun");
        }
        return dt_get;
    }

    public DataTable getdata_DR(string cdcode, string qu)
    {
        GC.Collect();

        DataTable dt_get = new DataTable();
        if (!qu.Trim().Equals(""))
        {
            try
            {
                dt_get.Clear();
                //if (fCon == null || fCon.State != ConnectionState.Open)
                //{
                OracleConnection fCon = new OracleConnection(Multiton.connString(cdcode));
                fCon.Open();
                //}
                using (OracleCommand cmd = new OracleCommand(qu, fCon))
                {
                    using (OracleDataReader dr_reader = cmd.ExecuteReader())
                    {
                        if (dr_reader != null)
                        {
                            //if (dr_reader.HasRows)
                            dt_get.Load(dr_reader);
                            dr_reader.Close();
                            dr_reader.Dispose();
                            cmd.Dispose();
                        }
                        if (!dr_reader.IsClosed)
                        {
                            dr_reader.Close();
                            dr_reader.Dispose();
                        }
                    }
                }
                fCon.Close();
                fCon.Dispose();
                foreach (DataColumn dc in dt_get.Columns)
                {
                    dc.AllowDBNull = true;
                    dc.ReadOnly = false;
                    dc.MaxLength = -1;
                }
                dt_get.AcceptChanges();
            }
            catch (Exception EX)
            {
                FILL_ERR(EX.Message.ToString().Trim() + " ==> GetData Fun");
            }
        }
        return dt_get;
    }
    public DataTable getdata_DR(string cdcode, string QUERY, string ConnStr)
    {
        GC.Collect();

        DataTable dt_get = new DataTable();
        try
        {
            dt_get.Clear();
            OracleConnection fCon = new OracleConnection(Multiton.connString(cdcode));
            //{
            fCon.Open();
            using (OracleCommand cmd = new OracleCommand(QUERY, fCon))
            {
                using (OracleDataReader dr_reader = cmd.ExecuteReader())
                {
                    if (dr_reader != null)
                    {
                        //if (dr_reader.HasRows)
                        dt_get.Load(dr_reader);
                        dr_reader.Close();
                        dr_reader.Dispose();
                        cmd.Dispose();
                    }
                    if (!dr_reader.IsClosed)
                    {
                        dr_reader.Close();
                        dr_reader.Dispose();
                    }
                }
            }
            //}
            fCon.Close();
            fCon.Dispose();

            foreach (DataColumn dc in dt_get.Columns)
            {
                dc.AllowDBNull = true;
                dc.ReadOnly = false;
                dc.MaxLength = -1;
            }
            dt_get.AcceptChanges();
        }
        catch (Exception EX)
        {
            FILL_ERR(EX.Message.ToString().Trim() + " ==> GetData Fun");
        }
        return dt_get;
    }

    #region get data old

    //public DataTable getdata(string userCode, string DataTable_Query)
    //{
    //    GC.Collect();
    //    DataTable dt_get = new DataTable();
    //    try
    //    {
    //        dt_get.Clear();
    //        using (OracleConnection fCon = new OracleConnection(connStringmysql(userCode)))
    //        {
    //            fCon.Open();
    //            using (OracleCommand cmd = new OracleCommand(DataTable_Query, fCon))
    //            {
    //                using (OracleDataReader dr_reader = cmd.ExecuteReader())
    //                {
    //                    if (dr_reader != null)
    //                    {
    //                        if (dr_reader.HasRows) dt_get.Load(dr_reader);
    //                        dr_reader.Close();
    //                        dr_reader.Dispose();
    //                        cmd.Dispose();
    //                    }
    //                    if (!dr_reader.IsClosed)
    //                    {
    //                        dr_reader.Close();
    //                        dr_reader.Dispose();
    //                    }
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception EX)
    //    {
    //        FILL_ERR(EX.Message.ToString().Trim() + " ==> GetData Fun");
    //    }
    //    return dt_get;
    //}

    #endregion

    //server utc date

    public string server_datetime(string usercode)
    {
        return server_datetime_dt(usercode).ToString("yyyy-MM-dd HH:mm:ss");
    }

    public string Server_time(string usercode)
    {
        return server_datetime_dt(usercode).ToString(Gettimeformat(), CultureInfo.InvariantCulture);
    }

    public DateTime Make_date(string txtdate)
    {
        return DateTime.ParseExact(txtdate, Getdateformat(), CultureInfo.InvariantCulture);
    }
    public DateTime Make_date(string txtdate, string format)
    {
        return DateTime.ParseExact(txtdate, format, CultureInfo.InvariantCulture);
    }
    public string GetSaveDateFormat()
    {
        return "yyyy-MM-dd HH:mm:ss";

    }
    public string Make_date_S(string txtdate)
    {
        string resDate = "";
        try
        {
            resDate = DateTime.ParseExact(txtdate, Getdateformat(), CultureInfo.InvariantCulture).ToString(GetSaveDateFormat());
        }
        catch (Exception err)
        {
            resDate = "1900-01-01 00:00:00";
        }
        return resDate;
    }
    public string Make_date_S(string txtdate, string inputFormat)
    {
        string resDate = "";
        try
        {
            resDate = DateTime.ParseExact(txtdate, inputFormat, CultureInfo.InvariantCulture).ToString(GetSaveDateFormat());
        }
        catch (Exception err)
        {
            resDate = "1900-01-01 00:00:00";
        }
        return resDate;
    }
    public DateTime Make_datetime(string txtdate)
    {

        return DateTime.ParseExact(txtdate, Getdatetimeformat(), CultureInfo.InvariantCulture);



    }
    public string Make_date_to_strdtime(DateTime txtdate)
    {
        return txtdate.ToString(Getdatetimeformat(), CultureInfo.InvariantCulture);
    }
    public string Make_date_to_str(DateTime txtdate)
    {
        return txtdate.ToString(Getdateformat(), CultureInfo.InvariantCulture);
    }
    public DateTime server_datetime_dt(string usercode)
    {
        DateTime date = new DateTime();
        try
        {
            date = DateTime.Parse(seekval(usercode, "SELECT TO_CHAR(UTC_TIMESTAMP(),'YYYY-MM-DD HH24:MI:SS') val FROM DUAL", "val"));
        }
        catch (Exception err)
        { }
        return date;
    }

    // server date local

    public string server_datetime_local(string usercode)
    {
        try
        {
            datetimeformat = HttpContext.Current.Session[MyGuid + "_datetimeformat"].ToString();
        }
        catch (Exception err) { datetimeformat = GetCookie(MyGuid, "datetimeformat").ToString(); }
        return server_datetime_dt_local(usercode).ToString(datetimeformat, CultureInfo.InvariantCulture);

    }



    public DateTime server_datetime_dt_local(string usercode)
    {
        DateTime dd = new DateTime();
        double hh = 0, mm = 0;
        try { timezone = GetSession(MyGuid, "timezone").ToString().Replace(":", "."); }
        catch (Exception err) { timezone = GetCookie(MyGuid, "timezone").ToString().Replace(":", "."); }
        if (timezone == "") timezone = "+05.30";
        if (timezone.Trim().StartsWith("-"))
        {
            hh = -Convert.ToDouble(timezone.Trim().Remove(0, 1).Split('.')[0].ToString());
            mm = -Convert.ToDouble(timezone.Trim().Remove(0, 1).Split('.')[1].ToString());
        }
        else
        {
            hh = Convert.ToDouble(timezone.Trim().Remove(0, 1).Split('.')[0].ToString());
            mm = Convert.ToDouble(timezone.Trim().Remove(0, 1).Split('.')[1].ToString());

        }
        //dd = DateTime.Parse(seekval(usercode, "select utc_timestamp() as val", "val"));
        dd = server_datetime_dt(usercode);
        dd = dd.AddHours(hh).AddMinutes(mm);
        return dd;

    }

    // check value

    public DataSet getDS(string userCode, string query1)
    {
        DataTable dt_fgen = new DataTable();
        DataSet ds_fgen = new DataSet();

        dt_fgen = getdata(userCode, query1);
        ds_fgen.Tables.Add(dt_fgen);
        dt_fgen.Dispose();

        return ds_fgen;
    }

    //fill error

    public void write_file(string msg, string filename)
    {
        //string ppath = @"c:\SKY\" + filename + ".txt";
        string ppath = HttpRuntime.AppDomainAppPath + "\\" + filename + ".txt";
        try
        {
            if (File.Exists(ppath))
            {
                StreamWriter w = File.AppendText(ppath);
                w.WriteLine(msg.ToString() + "-->" + DateTime.Now.ToString("ddMMyyyy hh:mm:ss tt"));
                w.WriteLine("=====================================================================");
                w.Flush();
                w.Close();
            }
            else
            {
                StreamWriter w = new StreamWriter(ppath, true);
                w.WriteLine(msg.ToString() + "-->" + DateTime.Now.ToString("ddMMyyyy hh:mm:ss tt"));
                w.WriteLine("=====================================================================");
                w.Flush();
                w.Close();
            }
        }
        catch { }
    }

    public void write_file_W_EXT_RE(string msg, string filename)
    {
        //string ppath = @"c:\SKY\" + filename + ".txt";
        string ppath = HttpRuntime.AppDomainAppPath + "\\" + filename;
        try
        {
            if (File.Exists(ppath))
            {
                StreamWriter w = File.AppendText(ppath);
                w.WriteLine(msg.ToString() + "-->" + DateTime.Now.ToString("ddMMyyyy hh:mm:ss tt"));
                w.WriteLine("=====================================================================");
                w.Flush();
                w.Close();
            }
            else
            {
                StreamWriter w = new StreamWriter(ppath, true);
                w.WriteLine(msg.ToString() + "-->" + DateTime.Now.ToString("ddMMyyyy hh:mm:ss tt"));
                w.WriteLine("=====================================================================");
                w.Flush();
                w.Close();
            }
        }
        catch { }
    }
    public void FILL_ERR(string msg)
    {
        //string ppath = @"c:\SKY\msgFile.txt";


        String ppath = HttpRuntime.AppDomainAppPath + "\\msgFile.txt";
        try
        {
            if (File.Exists(ppath))
            {
                StreamWriter w = File.AppendText(ppath);
                w.WriteLine(msg.ToString() + "-->" + DateTime.Now.ToString("ddMMyyyy hh:mm:ss tt"));
                w.WriteLine("=====================================================================");
                w.Flush();
                w.Close();
            }
            else
            {
                StreamWriter w = new StreamWriter(ppath, true);
                w.WriteLine(msg.ToString() + "-->" + DateTime.Now.ToString("ddMMyyyy hh:mm:ss tt"));
                w.WriteLine("=====================================================================");
                w.Flush();
                w.Close();
            }
        }
        catch { }
    }

    //execute command

    public bool execute_cmd(string userCode, string Execute_Query)
    {
        bool resultVal = false;
        Execute_Query = Execute_Query.Replace("&quot;", "").Replace("&nbsp;", "");
        OracleConnection fCon = new OracleConnection(Multiton.connString(userCode));
        //{
        try
        {
            fCon.Open();
            using (OracleCommand cmd = new OracleCommand(Execute_Query, fCon))
            {
                cmd.ExecuteNonQuery();
                cmd.CommandText = "commit";
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                resultVal = true;
            }
            fCon.Close();
            fCon.Dispose();
        }
        catch (Exception EX)
        {
            FILL_ERR(EX.Message.ToString().Trim() + " ==> Execute Command Fun");
        }
        //}
        return resultVal;
    }
    public bool execute_cmd(string userCode, string Execute_Query, string ConnStr)
    {
        bool resultVal = false;
        Execute_Query = Execute_Query.Replace("&quot;", "").Replace("&nbsp;", "");
        OracleConnection fCon = new OracleConnection(Multiton.connString(userCode));
        //{
        try
        {
            fCon.Open();
            using (OracleCommand cmd = new OracleCommand(Execute_Query, fCon))
            {
                cmd.ExecuteNonQuery();
                cmd.CommandText = "commit";
                cmd.Dispose();
                resultVal = true;
            }
            fCon.Close();
            fCon.Dispose();
        }
        catch (Exception EX)
        {
            FILL_ERR(EX.Message.ToString().Trim() + " ==> Execute Command Fun");
        }
        //}
        return resultVal;
    }



    /// <summary>
    /// Used to Send Cookie
    /// </summary>
    /// <param name="name">Cookie Name</param>
    /// <param name="val">Cookie Value</param>
    //public void send_cookie(string name, string val)
    //{
    //    HttpCookie HC = new HttpCookie(name, val);
    //    HttpContext.Current.Response.Cookies.Add(HC);
    //    HttpContext.Current.Response.Cookies[name].Value = val;
    //    HttpContext.Current.Request.Cookies[name].Value = val;
    //}
    public bool Make_date(string txtdate, out DateTime dateTime)
    {
        if (DateTime.TryParse(txtdate, out dateTime)) return true;
        else return false;
    }
    public bool IsDate(string datestr)
    {
        DateTime temp;
        if (DateTime.TryParse(datestr, out temp)) return true;
        else return false;
    }
    public bool IsDate(string datestr, string Informat)
    {
        try
        {
            DateTime.ParseExact(datestr, Informat, CultureInfo.InvariantCulture);
            return true;
        }
        catch (Exception err) { return false; }
    }

    public string Update_data(string UserCode, DataTable dtform, string tab_name, string where, bool edmode, string gg)
    {
        string createddate = server_datetime(UserCode);

        string result = "ok";
        GC.Collect();
        OracleConnection fCon = new OracleConnection(Multiton.connString(UserCode));
        //{
        //    fCon.Close();
        fCon.Open();

        DataTable dataupdate = new DataTable();

        if (!edmode) where = " where 1=2";
        else where = " where " + where;
        if (edmode && where.Equals("")) return result = "1st error";

        using (var da_new = new OracleDataAdapter())
        {
            OracleCommand cmd = new OracleCommand();
            cmd.Connection = fCon;
            cmd.CommandText = "select * from " + tab_name + where;
            da_new.Dispose();
            da_new.SelectCommand = cmd;
            da_new.Fill(dataupdate);
        }
        fCon.Close();
        fCon.Dispose();
        dataupdate.TableName = tab_name;
        if (edmode && dataupdate.Rows.Count < 1) return result = "2nd error";
        string field_type = "";
        #region saving
        foreach (DataRow drform in dtform.Rows)
        {
            int rowindex = 0;
            if (!drform["rec_id"].ToString().Trim().Equals("0")) rowindex = seekval_dt_rowindex(dataupdate, "rec_id='" + drform["rec_id"].ToString().Trim() + "'");
            if (rowindex > 0)
            {

                rowindex = rowindex - 1;
                for (int z = 0; z < dataupdate.Columns.Count; z++)
                {
                    if (drform[z] == DBNull.Value) { }
                    else
                    {
                        field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                        if (field_type.ToUpper() == "DATETIME" && !IsDate(drform[z].ToString())) drform[z] = createddate;
                        if (field_type.ToUpper() == "DECIMAL" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "DOUBLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT16" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT32" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT64" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "SINGLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "STRING" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "BOOLEAN" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (!field_type.ToUpper().Equals("DATETIME"))
                        {
                            drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                        }
                        dataupdate.Rows[rowindex][z] = drform[z];
                    }
                }
            }
            else
            {
                DataRow drnew = dataupdate.NewRow();

                for (int z = 0; z < dataupdate.Columns.Count; z++)
                {
                    field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                    if (field_type.ToUpper() == "DATETIME" && !IsDate(drform[z].ToString())) drform[z] = createddate;
                    if (field_type.ToUpper() == "DECIMAL" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "DOUBLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "INT16" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "INT32" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "INT64" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "SINGLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "STRING" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "BOOLEAN" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (!field_type.ToUpper().Equals("DATETIME"))
                    {
                        drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                    }
                    drnew[z] = drform[z];
                }
                dataupdate.Rows.Add(drnew);

            }

        }
        foreach (DataRow drdel in dataupdate.Rows)
        {
            if (drdel.RowState.Equals(DataRowState.Added) || drdel.RowState.Equals(DataRowState.Modified)) { }
            else drdel.Delete();

        }
        #endregion

        Satransaction sat = new Satransaction(UserCode, MyGuid);
        bool allcolsadded = false;
        string allcolumns = "";
        foreach (DataRow draction in dataupdate.Rows)
        {
            string updvalues = "", commandtext = "", colname = "", coltype = "", colval = "";
            bool res = false;
            if (draction.RowState.Equals(DataRowState.Deleted))
            {
                commandtext = "delete from  " + tab_name + " where rec_id='" + draction["rec_id", DataRowVersion.Original].ToString().Trim() + "'";
            }
            else if (draction.RowState.Equals(DataRowState.Modified))
            {

                for (int k = 0; k < dataupdate.Columns.Count; k++)
                {

                    colname = dataupdate.Columns[k].ColumnName;
                    coltype = dataupdate.Columns[k].DataType.Name.ToString().Trim().ToUpper();
                    if (coltype.Equals("DATETIME"))
                    {
                        colval = ((DateTime)draction[colname]).ToString("yyyy-MM-dd HH:mm:ss");
                        if (updvalues.Equals("")) updvalues = colname + "='" + colval + "'";
                        else updvalues = updvalues + "," + colname + "='" + colval + "'";
                    }
                    else if (coltype.Equals("BOOLEAN"))
                    {
                        colval = ((Boolean)draction[colname]).ToString();
                        if (updvalues.Equals("")) updvalues = colname + "=" + colval + "";
                        updvalues = updvalues + "," + colname + "=" + colval + "";
                    }
                    else
                    {
                        colval = draction[colname].ToString();
                        if (updvalues.Equals("")) updvalues = colname + "='" + colval + "'";
                        else updvalues = updvalues + "," + colname + "='" + colval + "'";
                    }

                }
                commandtext = "update " + tab_name + " set " + updvalues + " where rec_id='" + draction["rec_id"].ToString().Trim() + "'";
            }
            else if (draction.RowState.Equals(DataRowState.Added))
            {
                for (int k = 0; k < dataupdate.Columns.Count; k++)
                {
                    colname = dataupdate.Columns[k].ColumnName;
                    coltype = dataupdate.Columns[k].DataType.Name.ToString().Trim().ToUpper();

                    if (colname.ToUpper().Equals("REC_ID"))
                    {

                    }
                    else
                    {
                        if (!allcolsadded)
                        {
                            if (allcolumns == "") allcolumns = colname;
                            else allcolumns += "," + colname;
                        }
                        if (coltype.Equals("DATETIME"))
                        {
                            colval = ((DateTime)draction[colname]).ToString("yyyy-MM-dd HH:mm:ss");
                            if (updvalues.Equals("")) updvalues = "'" + colval + "'";
                            else updvalues = updvalues + ",'" + colval + "'";
                        }
                        else if (coltype.Equals("BOOLEAN"))
                        {
                            colval = ((Boolean)draction[colname]).ToString();
                            if (updvalues.Equals("")) updvalues = "" + colval + "";
                            else updvalues = updvalues + "," + colval + "";
                        }
                        else
                        {
                            colval = draction[colname].ToString();
                            if (updvalues.Equals("")) updvalues = "'" + colval + "'";
                            else updvalues = updvalues + ",'" + colval + "'";
                        }
                    }
                }
                commandtext = "insert into  " + tab_name + " values(" + updvalues + ")";
                allcolsadded = true;
            }

            string res1 = sat.Execute_cmd(commandtext, "");
            if (!res1.Equals("ok"))
            {
                sat.Rollback();
                showmsg(1, "Error in Saving Please check Each Value", 0);
                return result = res1;

            }

        }
        sat.Commit();
        dataupdate.Dispose();
        return result;
        //}
    }

    public bool Update_data(string UserCode, DataTable dtform, string tab_name, string where, bool edmode)
    {
        string createddate = server_datetime(UserCode);

        bool result = false;
        GC.Collect();
        OracleConnection fCon = new OracleConnection(Multiton.connString(UserCode));
        //{
        //    fCon.Close();
        fCon.Open();

        DataTable dataupdate = new DataTable();

        if (!edmode) where = " where 1=2";
        else where = " where " + where;
        if (edmode && where.Equals("")) return false;

        using (var da_new = new OracleDataAdapter())
        {
            OracleCommand cmd = new OracleCommand();
            cmd.Connection = fCon;
            cmd.CommandText = "select * from " + tab_name + where;
            da_new.Dispose();
            da_new.SelectCommand = cmd;
            da_new.Fill(dataupdate);
        }
        fCon.Close();
        fCon.Dispose();
        dataupdate.TableName = tab_name;
        if (edmode && dataupdate.Rows.Count < 1) return false;

        #region saving
        Set_RowState_dt(dtform, createddate, dataupdate);
        foreach (DataRow drdel in dataupdate.Rows)
        {
            if (drdel.RowState.Equals(DataRowState.Added) || drdel.RowState.Equals(DataRowState.Modified)) { }
            else drdel.Delete();

        }
        #endregion

        Satransaction sat = new Satransaction(UserCode, MyGuid);
        bool allcolsadded = false;
        string allcolumns = "";
        foreach (DataRow draction in dataupdate.Rows)
        {
            string updvalues = "", commandtext = "", colname = "", coltype = "", colval = "";
            bool res = false;
            if (draction.RowState.Equals(DataRowState.Modified))
            {
                for (int k = 0; k < dataupdate.Columns.Count; k++)
                {
                    colname = dataupdate.Columns[k].ColumnName;
                    coltype = dataupdate.Columns[k].DataType.Name.ToString().Trim().ToUpper();
                    if (coltype.Equals("DATETIME"))
                    {
                        colval = ((DateTime)draction[colname]).ToString("yyyy-MM-dd HH:mm:ss");
                        if (updvalues.Equals("")) updvalues = colname + "=TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                        else updvalues = updvalues + "," + colname + "=TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                    }
                    else if (coltype.Equals("BOOLEAN"))
                    {
                        colval = ((Boolean)draction[colname]).ToString();
                        if (updvalues.Equals("")) updvalues = colname + "=" + colval + "";
                        updvalues = updvalues + "," + colname + "=" + colval + "";
                    }
                    else
                    {
                        colval = draction[colname].ToString();
                        if (updvalues.Equals("")) updvalues = colname + "='" + colval + "'";
                        else updvalues = updvalues + "," + colname + "='" + colval + "'";
                    }
                }
                commandtext = "update " + tab_name + " set " + updvalues + " where rec_id='" + draction["rec_id"].ToString().Trim() + "'";
            }
            else if (draction.RowState.Equals(DataRowState.Added))
            {
                for (int k = 0; k < dataupdate.Columns.Count; k++)
                {
                    colname = dataupdate.Columns[k].ColumnName;
                    coltype = dataupdate.Columns[k].DataType.Name.ToString().Trim().ToUpper();

                    if (colname.ToUpper().Equals("REC_ID"))
                    {

                    }
                    else
                    {
                        if (!allcolsadded)
                        {
                            if (allcolumns == "") allcolumns = colname;
                            else allcolumns += "," + colname;
                        }
                        if (coltype.Equals("DATETIME"))
                        {
                            colval = ((DateTime)draction[colname]).ToString("yyyy-MM-dd HH:mm:ss");
                            if (updvalues.Equals("")) updvalues = "to_date('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                            else updvalues = updvalues + ",TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                        }
                        else if (coltype.Equals("BOOLEAN"))
                        {
                            colval = ((Boolean)draction[colname]).ToString();
                            if (updvalues.Equals("")) updvalues = "" + colval + "";
                            else updvalues = updvalues + "," + colval + "";
                        }
                        else
                        {
                            colval = draction[colname].ToString();
                            if (updvalues.Equals("")) updvalues = "'" + colval + "'";
                            else updvalues = updvalues + ",'" + colval + "'";
                        }
                    }
                }
                commandtext = "insert into  " + tab_name + " (" + allcolumns + ") values(" + updvalues + ")";
                allcolsadded = true;
            }
            else if (draction.RowState.Equals(DataRowState.Deleted))
            {
                commandtext = "delete from  " + tab_name + " where rec_id='" + draction["rec_id", DataRowVersion.Original].ToString().Trim() + "'";
            }
            //FILL_ERR(commandtext);
            string ress = sat.Execute_cmd(commandtext, "");

            if (!ress.Trim().Equals("1"))
            {
                sat.Rollback();
                showmsg(1, ress, 0);
                return false;
            }

        }
        sat.Commit();
        dataupdate.Dispose();
        return true;
        //}
    }
    public bool Update_data_fast1_uncommit(string UserCode, DataTable dtform, string tab_name, string where, bool edmode, Satransaction sat)
    {
        string createddate = server_datetime(UserCode);
        //sat = new Satransaction(UserCode);
        bool result = false;
        GC.Collect();

        //using (OracleConnection fCon = new OracleConnection(Multiton.connString(UserCode)))
        //{
        //    fCon.Close();
        //    fCon.Open();
        DataTable dataupdate = new DataTable();

        //    DataTable dataupdate = new DataTable();

        if (!edmode) where = " where 1=2";
        else where = " where " + where;
        if (edmode && where.Equals("")) return false;

        if (edmode) sat.Execute_cmd("delete from " + tab_name + where, "");

        bool allcolsadded = false;
        string allcolumns = "";
        string commandtext = "";
        for (int i = 0; i < dtform.Rows.Count; i++)
        {



            string updvalues = "", colname = "", coltype = "", colval = "";
            bool res = false;
            for (int k = 0; k < dtform.Columns.Count; k++)
            {

                colname = dtform.Columns[k].ColumnName;
                coltype = dtform.Columns[k].DataType.Name.ToString().ToUpper().Replace("&nbsp;", "").Replace("&amp;", "");



                if (coltype.ToUpper() == "DATETIME" && !IsDate(dtform.Rows[i][colname].ToString())) dtform.Rows[i][colname] = createddate;
                if (coltype.ToUpper() == "DECIMAL" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "DOUBLE" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "INT16" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "INT32" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "INT64" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "SINGLE" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "STRING" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "BOOLEAN" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (!coltype.ToUpper().Equals("DATETIME"))
                {
                    dtform.Rows[i][colname] = dtform.Rows[i][colname].ToString().Replace("'", "`").Trim();
                }
                if (colname.ToUpper().Equals("REC_ID"))
                {
                }
                else
                {
                    if (!allcolsadded)
                    {
                        if (allcolumns == "") allcolumns = colname;
                        else allcolumns += "," + colname;
                    }
                    if (coltype.Equals("DATETIME"))
                    {
                        colval = ((DateTime)dtform.Rows[i][colname]).ToString("yyyy-MM-dd HH:mm:ss");
                        if (updvalues.Equals("")) updvalues = "to_date('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                        else updvalues = updvalues + ",TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                    }
                    else if (coltype.Equals("BOOLEAN"))
                    {
                        colval = ((Boolean)dtform.Rows[i][colname]).ToString();
                        if (updvalues.Equals("")) updvalues = "" + colval + "";
                        else updvalues = updvalues + "," + colval + "";
                    }
                    else
                    {
                        colval = dtform.Rows[i][colname].ToString();
                        if (updvalues.Equals("")) updvalues = "'" + colval + "'";
                        else updvalues = updvalues + ",'" + colval + "'";
                    }
                }
            }
            //if (!allcolsadded)
            //{
            //    commandtext = "insert into  " + tab_name + " (" + allcolumns + ") ";
            //}
            commandtext = "insert into  " + tab_name + " (" + allcolumns + ") ";
            commandtext += " SELECT " + updvalues + " FROM DUAL ";
            allcolsadded = true;
            //FILL_ERR(commandtext);
            bool done = sat.Execute_cmd(commandtext);
            if (!done)
            {
                //sat.Rollback();
                //showmsg(1, ress, 0);
                return false;
            }
        }
        //string lastWord = commandtext.Split(' ').Last();
        //if (lastWord.Trim().ToUpper().Equals("UNION"))
        //{
        //    commandtext = commandtext.Remove(commandtext.LastIndexOf(' ') + 1);
        //}

        //string ress = sat.Execute_cmd(commandtext);

        //sat.Commit();
        //dataupdate.Dispose();
        return true;
        //}
    }

    public bool Update_data_fast1(string UserCode, DataTable dtform, string tab_name, string where, bool edmode)
    {
        string createddate = server_datetime(UserCode);
        Satransaction sat = new Satransaction(UserCode, MyGuid);
        bool result = false;
        GC.Collect();
        //using (OracleConnection fCon = new OracleConnection(Multiton.connString(UserCode)))
        //{
        //    fCon.Close();
        //    fCon.Open();
        DataTable dataupdate = new DataTable();

        if (!edmode) where = " where 1=2";
        else where = " where " + where;
        if (edmode && where.Equals("")) return false;
        if (edmode) sat.Execute_cmd("delete from " + tab_name + where, "");
        bool allcolsadded = false;
        string allcolumns = "";
        string commandtext = "";
        for (int i = 0; i < dtform.Rows.Count; i++)
        {
            string updvalues = "", colname = "", coltype = "", colval = "";
            bool res = false;
            for (int k = 0; k < dtform.Columns.Count; k++)
            {

                colname = dtform.Columns[k].ColumnName;
                coltype = dtform.Columns[k].DataType.Name.ToString().ToUpper().Replace("&nbsp;", "").Replace("&amp;", "");

                if (coltype.ToUpper() == "DATETIME" && !IsDate(dtform.Rows[i][colname].ToString())) dtform.Rows[i][colname] = createddate;
                if (coltype.ToUpper() == "DECIMAL" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "DOUBLE" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "INT16" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "INT32" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "INT64" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "SINGLE" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "STRING" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (coltype.ToUpper() == "BOOLEAN" && dtform.Rows[i][colname].ToString().Replace("'", "`").Trim().Length == 0) dtform.Rows[i][colname] = 0;
                if (!coltype.ToUpper().Equals("DATETIME"))
                {
                    dtform.Rows[i][colname] = dtform.Rows[i][colname].ToString().Replace("'", "`").Trim();
                }
                if (colname.ToUpper().Equals("REC_ID")) { }
                else
                {
                    if (!allcolsadded)
                    {
                        if (allcolumns == "") allcolumns = colname;
                        else allcolumns += "," + colname;
                    }
                    if (coltype.Equals("DATETIME"))
                    {
                        colval = ((DateTime)dtform.Rows[i][colname]).ToString("yyyy-MM-dd HH:mm:ss");
                        if (updvalues.Equals("")) updvalues = "to_date('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                        else updvalues = updvalues + ",TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                    }
                    else if (coltype.Equals("BOOLEAN"))
                    {
                        colval = ((Boolean)dtform.Rows[i][colname]).ToString();
                        if (updvalues.Equals("")) updvalues = "" + colval + "";
                        else updvalues = updvalues + "," + colval + "";
                    }
                    else
                    {
                        colval = dtform.Rows[i][colname].ToString();
                        if (updvalues.Equals("")) updvalues = "'" + colval + "'";
                        else updvalues = updvalues + ",'" + colval + "'";
                    }
                }
            }
            if (!allcolsadded)
            {
                commandtext = "insert into  " + tab_name + " (" + allcolumns + ") ";
            }
            commandtext += " SELECT " + updvalues + " FROM DUAL ";
            if (i == dtform.Rows.Count - 1)
            { }
            else
            {
                commandtext += " UNION ALL ";
            }
            allcolsadded = true;
        }
        bool done = sat.Execute_cmd(commandtext);
        if (!done)
        {
            sat.Rollback();
            return false;
        }
        else
        {
            sat.Commit();
            return true;
        }
        //}
    }

    //public void SaveUsingOracleBulkCopy(String UserCode, DataTable dt)
    //{
    //    try
    //    {
    //        using (var connection = new OracleConnection(connStringmysql(UserCode)))
    //        {
    //            connection.Open();
    //            //int[] ids = new int[dt.Rows.Count];
    //            //string[] names = new string[dt.Rows.Count];
    //            //string[] addresses = new string[dt.Rows.Count];

    //            for (int j = 0; j < dt.Rows.Count; j++)
    //            {
    //                ids[j] = Convert.ToInt32(dt.Rows[j]["ID"]);
    //                names[j] = Convert.ToString(dt.Rows[j]["NAME"]);
    //                addresses[j] = Convert.ToString(dt.Rows[j]["ADDRESS"]);
    //            }

    //            OracleParameter id = new OracleParameter();
    //            id.OracleDbType = OracleDbType.Int32;
    //            id.Value = ids;

    //            //OracleParameter name = new OracleParameter();
    //            //name.OracleDbType = OracleDbType.Varchar2;
    //            //name.Value = names;

    //            //OracleParameter address = new OracleParameter();
    //            //address.OracleDbType = OracleDbType.Varchar2;
    //            //address.Value = addresses;

    //            // create command and set properties  
    //            OracleCommand cmd = connection.CreateCommand();
    //            cmd.CommandText = "INSERT INTO BULKINSERTTEST (ID, NAME, ADDRESS) VALUES (:1, :2, :3)";
    //            cmd.ArrayBindCount = ids.Length;
    //            cmd.Parameters.Add(id);
    //            cmd.Parameters.Add(name);
    //            cmd.Parameters.Add(address);
    //            cmd.ExecuteNonQuery();

    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //}
    //public void WriteToServer(string UserCode, string qualifiedTableName, DataTable dataTable)
    //{
    //    //**************************************************************************************************************************
    //    //  Summary:  Hit the Oracle DB with the provided datatable. bulk insert data to table.
    //    //**************************************************************************************************************************
    //    //  History:
    //    //   10/03/2017                 Created
    //    //**************************************************************************************************************************

    //    try
    //    {
    //        OracleConnection oracleConnection = new OracleConnection(connStringmysql(UserCode));
    //        OracleBulkCopy oracleBulkCopy = new OracleBulkCopy(oracleConnection);
    //        oracleConnection.Open();
    //        using (OracleBulkCopy bulkCopy = new OracleBulkCopy(oracleConnection))
    //        {
    //            bulkCopy.DestinationTableName = qualifiedTableName;
    //            bulkCopy.WriteToServer(dataTable);
    //        }
    //        oracleConnection.Close();
    //        oracleConnection.Dispose();
    //    }
    //    catch (Exception ex)
    //    {
    //        //Utility.db.Log.Write(Utility.db.Log.Level.Error, "Utility", "db:WriteToServer: " + ex.Message);
    //        //throw;
    //    }
    //}

    private void Set_RowState_dt(DataTable dtform, string createddate, DataTable dataupdate)
    {
        foreach (DataRow drform in dtform.Rows)
        {
            string field_type = "";
            int rowindex = 0;
            if (!drform["rec_id"].ToString().Trim().Equals("0")) rowindex = seekval_dt_rowindex(dataupdate, "rec_id='" + drform["rec_id"].ToString().Trim() + "'");
            if (rowindex > 0)
            {
                rowindex = rowindex - 1;
                for (int z = 0; z < dataupdate.Columns.Count; z++)
                {
                    if (drform[z] == DBNull.Value)
                    {


                        //field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                        //if (field_type.ToUpper() == "DATETIME") drform[z] = dataupdate.Rows[rowindex][z];
                        //if (field_type.ToUpper() == "DECIMAL") drform[z] = 0;
                        //if (field_type.ToUpper() == "DOUBLE" ) drform[z] = 0;
                        //if (field_type.ToUpper() == "INT16" ) drform[z] = 0;
                        //if (field_type.ToUpper() == "INT32" ) drform[z] = 0;
                        //if (field_type.ToUpper() == "INT64" ) drform[z] = 0;
                        //if (field_type.ToUpper() == "SINGLE") drform[z] = 0;
                        //if (field_type.ToUpper() == "STRING") drform[z] = 0;
                        //if (field_type.ToUpper() == "BOOLEAN" ) drform[z] = 0;
                        //if (!field_type.ToUpper().Equals("DATETIME"))
                        //{
                        //    drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                        //}
                        //dataupdate.Rows[rowindex][z] = drform[z];

                    }
                    else
                    {
                        field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                        if (field_type.ToUpper() == "DATETIME" && !IsDate(drform[z].ToString())) drform[z] = createddate;
                        if (field_type.ToUpper() == "DECIMAL" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "DOUBLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT16" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT32" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT64" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "SINGLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "STRING" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "BOOLEAN" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (!field_type.ToUpper().Equals("DATETIME"))
                        {
                            drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                        }
                        dataupdate.Rows[rowindex][z] = drform[z];
                    }
                }
            }
            else
            {
                DataRow drnew = dataupdate.NewRow();
                for (int z = 0; z < dataupdate.Columns.Count; z++)
                {
                    field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                    if (field_type.ToUpper() == "DATETIME" && !IsDate(drform[z].ToString())) drform[z] = createddate;
                    if (field_type.ToUpper() == "DECIMAL" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "DOUBLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "INT16" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "INT32" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "INT64" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "SINGLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "STRING" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (field_type.ToUpper() == "BOOLEAN" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                    if (!field_type.ToUpper().Equals("DATETIME"))
                    {
                        drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                    }
                    drnew[z] = drform[z];
                }
                dataupdate.Rows.Add(drnew);

            }
        }
    }

    public bool Update_data_uncommit(string UserCode, DataTable dtform, string tab_name, string where, bool edmode, out Satransaction sat)
    {
        sat = new Satransaction(UserCode, MyGuid);
        string createddate = server_datetime(UserCode);
        bool result = false;
        GC.Collect();
        using (OracleConnection fCon = new OracleConnection(Multiton.connString(UserCode)))
        {
            fCon.Close();
            fCon.Open(); DataTable dataupdate = new DataTable();
            if (!edmode) where = " where 1=2";
            else where = " where " + where;
            if (edmode && where.Equals("")) { return false; }

            using (var da_new = new OracleDataAdapter())
            {
                OracleCommand cmd = new OracleCommand();
                cmd.Connection = fCon;
                cmd.CommandText = "select * from " + tab_name + where;
                da_new.Dispose();
                da_new.SelectCommand = cmd;
                da_new.Fill(dataupdate);
            }
            dataupdate.TableName = tab_name;
            if (edmode && dataupdate.Rows.Count < 1) return false;
            string field_type = "";
            #region saving
            foreach (DataRow drform in dtform.Rows)
            {
                int rowindex = 0;
                if (!drform["rec_id"].ToString().Trim().Equals("0")) rowindex = seekval_dt_rowindex(dataupdate, "rec_id='" + drform["rec_id"].ToString().Trim() + "'");
                if (rowindex > 0)
                {
                    rowindex = rowindex - 1;
                    for (int z = 0; z < dataupdate.Columns.Count; z++)
                    {
                        if (drform[z] == DBNull.Value) { }
                        else
                        {
                            field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                            if (field_type.ToUpper() == "DATETIME" && !IsDate(drform[z].ToString())) drform[z] = createddate;
                            if (field_type.ToUpper() == "DECIMAL" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "DOUBLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "INT16" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "INT32" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "INT64" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "SINGLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "STRING" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "BOOLEAN" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (!field_type.ToUpper().Equals("DATETIME"))
                            {
                                drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                            }
                            dataupdate.Rows[rowindex][z] = drform[z];
                        }
                    }
                }
                else
                {
                    DataRow drnew = dataupdate.NewRow();

                    for (int z = 0; z < dataupdate.Columns.Count; z++)
                    {
                        field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                        if (field_type.ToUpper() == "DATETIME" && !IsDate(drform[z].ToString())) drform[z] = createddate;
                        if (field_type.ToUpper() == "DECIMAL" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "DOUBLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT16" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT32" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT64" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "SINGLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "STRING" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "BOOLEAN" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (!field_type.ToUpper().Equals("DATETIME"))
                        {
                            drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                        }
                        drnew[z] = drform[z];
                    }
                    dataupdate.Rows.Add(drnew);

                }
            }
            foreach (DataRow drdel in dataupdate.Rows)
            {
                if (drdel.RowState.Equals(DataRowState.Added) || drdel.RowState.Equals(DataRowState.Modified)) { }
                else drdel.Delete();
            }
            #endregion

            bool allcolsadded = false;
            string allcolumns = "";
            foreach (DataRow draction in dataupdate.Rows)
            {
                string updvalues = "", commandtext = "", colname = "", coltype = "", colval = "";
                bool res = false;
                if (draction.RowState.Equals(DataRowState.Modified))
                {
                    for (int k = 0; k < dataupdate.Columns.Count; k++)
                    {
                        colname = dataupdate.Columns[k].ColumnName;
                        coltype = dataupdate.Columns[k].DataType.Name.ToString().Trim().ToUpper();
                        if (coltype.Equals("DATETIME"))
                        {
                            colval = ((DateTime)draction[colname]).ToString("yyyy-MM-dd HH:mm:ss");
                            if (updvalues.Equals("")) updvalues = colname + "=TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                            else updvalues = updvalues + "," + colname + "=TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                        }
                        else if (coltype.Equals("BOOLEAN"))
                        {
                            colval = ((Boolean)draction[colname]).ToString();
                            if (updvalues.Equals("")) updvalues = colname + "=" + colval + "";
                            updvalues = updvalues + "," + colname + "=" + colval + "";
                        }
                        else
                        {
                            colval = draction[colname].ToString();
                            if (updvalues.Equals("")) updvalues = colname + "='" + colval + "'";
                            else updvalues = updvalues + "," + colname + "='" + colval + "'";
                        }
                    }
                    commandtext = "update " + tab_name + " set " + updvalues + " where rec_id='" + draction["rec_id"].ToString().Trim() + "'";
                }
                else if (draction.RowState.Equals(DataRowState.Added))
                {
                    for (int k = 0; k < dataupdate.Columns.Count; k++)
                    {
                        colname = dataupdate.Columns[k].ColumnName;
                        coltype = dataupdate.Columns[k].DataType.Name.ToString().Trim().ToUpper();

                        if (colname.ToUpper().Equals("REC_ID"))
                        {

                        }
                        else
                        {
                            if (!allcolsadded)
                            {
                                if (allcolumns == "") allcolumns = colname;
                                else allcolumns += "," + colname;
                            }
                            if (coltype.Equals("DATETIME"))
                            {
                                colval = ((DateTime)draction[colname]).ToString("yyyy-MM-dd HH:mm:ss");
                                if (updvalues.Equals("")) updvalues = "to_date('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                                else updvalues = updvalues + ",to_date('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                            }
                            else if (coltype.Equals("BOOLEAN"))
                            {
                                colval = ((Boolean)draction[colname]).ToString();
                                if (updvalues.Equals("")) updvalues = "" + colval + "";
                                else updvalues = updvalues + "," + colval + "";
                            }
                            else
                            {
                                colval = draction[colname].ToString();
                                if (updvalues.Equals("")) updvalues = "'" + colval + "'";
                                else updvalues = updvalues + ",'" + colval + "'";
                            }
                        }
                    }
                    commandtext = "insert into  " + tab_name + " (" + allcolumns + ") values(" + updvalues + ")";
                    allcolsadded = true;
                }
                else if (draction.RowState.Equals(DataRowState.Deleted))
                {
                    commandtext = "delete from  " + tab_name + " where rec_id='" + draction["rec_id", DataRowVersion.Original].ToString().Trim() + "'";
                }
                res = sat.Execute_cmd(commandtext);
                if (!res)
                {
                    sat.Rollback();
                    showmsg(1, "Error in Saving Please check Each Value", 0);
                    return false;
                }
            }

            dataupdate.Dispose();
            return true;
        }
    }
    public bool Update_data_uncommit2(string UserCode, DataTable dtform, string tab_name, string where, bool edmode, Satransaction sat)
    {
        //sat = new Satransaction(UserCode);
        string createddate = server_datetime(UserCode);
        bool result = false;
        GC.Collect();
        using (OracleConnection fCon = new OracleConnection(Multiton.connString(UserCode)))
        {
            fCon.Close();
            fCon.Open(); DataTable dataupdate = new DataTable();
            if (!edmode) where = " where 1=2";
            else where = " where " + where;
            if (edmode && where.Equals("")) { return false; }

            using (var da_new = new OracleDataAdapter())
            {
                OracleCommand cmd = new OracleCommand();
                cmd.Connection = fCon;
                cmd.CommandText = "select * from " + tab_name + where;
                da_new.Dispose();
                da_new.SelectCommand = cmd;
                da_new.Fill(dataupdate);
            }
            dataupdate.TableName = tab_name;
            if (edmode && dataupdate.Rows.Count < 1) return false;
            string field_type = "";
            #region saving
            foreach (DataRow drform in dtform.Rows)
            {
                int rowindex = 0;
                if (!drform["rec_id"].ToString().Trim().Equals("0")) rowindex = seekval_dt_rowindex(dataupdate, "rec_id='" + drform["rec_id"].ToString().Trim() + "'");
                if (rowindex > 0)
                {
                    rowindex = rowindex - 1;
                    for (int z = 0; z < dataupdate.Columns.Count; z++)
                    {
                        if (drform[z] == DBNull.Value) { }
                        else
                        {
                            field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                            if (field_type.ToUpper() == "DATETIME" && !IsDate(drform[z].ToString())) drform[z] = createddate;
                            if (field_type.ToUpper() == "DECIMAL" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "DOUBLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "INT16" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "INT32" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "INT64" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "SINGLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "STRING" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (field_type.ToUpper() == "BOOLEAN" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                            if (!field_type.ToUpper().Equals("DATETIME"))
                            {
                                drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                            }
                            dataupdate.Rows[rowindex][z] = drform[z];
                        }
                    }
                }
                else
                {
                    DataRow drnew = dataupdate.NewRow();

                    for (int z = 0; z < dataupdate.Columns.Count; z++)
                    {
                        field_type = dataupdate.Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                        if (field_type.ToUpper() == "DATETIME" && !IsDate(drform[z].ToString())) drform[z] = createddate;
                        if (field_type.ToUpper() == "DECIMAL" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "DOUBLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT16" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT32" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "INT64" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "SINGLE" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "STRING" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (field_type.ToUpper() == "BOOLEAN" && drform[z].ToString().Replace("'", "`").Trim().Length == 0) drform[z] = 0;
                        if (!field_type.ToUpper().Equals("DATETIME"))
                        {
                            drform[z] = drform[z].ToString().Replace("'", "`").Trim();
                        }
                        drnew[z] = drform[z];
                    }
                    dataupdate.Rows.Add(drnew);

                }
            }
            foreach (DataRow drdel in dataupdate.Rows)
            {
                if (drdel.RowState.Equals(DataRowState.Added) || drdel.RowState.Equals(DataRowState.Modified)) { }
                else drdel.Delete();
            }
            #endregion

            bool allcolsadded = false;
            string allcolumns = "";
            foreach (DataRow draction in dataupdate.Rows)
            {
                string updvalues = "", commandtext = "", colname = "", coltype = "", colval = "";
                bool res = false;
                if (draction.RowState.Equals(DataRowState.Modified))
                {
                    for (int k = 0; k < dataupdate.Columns.Count; k++)
                    {
                        colname = dataupdate.Columns[k].ColumnName;
                        coltype = dataupdate.Columns[k].DataType.Name.ToString().Trim().ToUpper();
                        if (coltype.Equals("DATETIME"))
                        {
                            colval = ((DateTime)draction[colname]).ToString("yyyy-MM-dd HH:mm:ss");
                            if (updvalues.Equals("")) updvalues = colname + "=TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                            else updvalues = updvalues + "," + colname + "=TO_DATE('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                        }
                        else if (coltype.Equals("BOOLEAN"))
                        {
                            colval = ((Boolean)draction[colname]).ToString();
                            if (updvalues.Equals("")) updvalues = colname + "=" + colval + "";
                            updvalues = updvalues + "," + colname + "=" + colval + "";
                        }
                        else
                        {
                            colval = draction[colname].ToString();
                            if (updvalues.Equals("")) updvalues = colname + "='" + colval + "'";
                            else updvalues = updvalues + "," + colname + "='" + colval + "'";
                        }
                    }
                    commandtext = "update " + tab_name + " set " + updvalues + " where rec_id='" + draction["rec_id"].ToString().Trim() + "'";
                }
                else if (draction.RowState.Equals(DataRowState.Added))
                {
                    for (int k = 0; k < dataupdate.Columns.Count; k++)
                    {
                        colname = dataupdate.Columns[k].ColumnName;
                        coltype = dataupdate.Columns[k].DataType.Name.ToString().Trim().ToUpper();

                        if (colname.ToUpper().Equals("REC_ID"))
                        {

                        }
                        else
                        {
                            if (!allcolsadded)
                            {
                                if (allcolumns == "") allcolumns = colname;
                                else allcolumns += "," + colname;
                            }
                            if (coltype.Equals("DATETIME"))
                            {
                                colval = ((DateTime)draction[colname]).ToString("yyyy-MM-dd HH:mm:ss");
                                if (updvalues.Equals("")) updvalues = "to_date('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                                else updvalues = updvalues + ",to_date('" + colval + "','YYYY-MM-DD HH24:MI:SS')";
                            }
                            else if (coltype.Equals("BOOLEAN"))
                            {
                                colval = ((Boolean)draction[colname]).ToString();
                                if (updvalues.Equals("")) updvalues = "" + colval + "";
                                else updvalues = updvalues + "," + colval + "";
                            }
                            else
                            {
                                colval = draction[colname].ToString();
                                if (updvalues.Equals("")) updvalues = "'" + colval + "'";
                                else updvalues = updvalues + ",'" + colval + "'";
                            }
                        }
                    }
                    commandtext = "insert into  " + tab_name + " (" + allcolumns + ") values(" + updvalues + ")";
                    allcolsadded = true;
                }
                else if (draction.RowState.Equals(DataRowState.Deleted))
                {
                    commandtext = "delete from  " + tab_name + " where rec_id='" + draction["rec_id", DataRowVersion.Original].ToString().Trim() + "'";
                }
                res = sat.Execute_cmd(commandtext);
                if (!res)
                {
                    //sat.Rollback();
                    showmsg(1, "Error in Saving Please check Each Value", 0);
                    return false;
                }
            }

            dataupdate.Dispose();
            return true;
        }
    }

    public void save_data(string UserCode, DataSet oDs, string tab_name)
    {
        using (OracleConnection fCon = new OracleConnection(Multiton.connString(UserCode)))
        {
            fCon.Open();
            OracleDataAdapter da_new = new OracleDataAdapter("select * from " + tab_name + " where 1=2", fCon);
            OracleCommandBuilder cb_new = new OracleCommandBuilder(da_new);
            string field_type = "";
            for (int i = 0; i < oDs.Tables[0].Rows.Count; i++)
            {
                for (int z = 0; z < oDs.Tables[0].Columns.Count; z++)
                {
                    field_type = oDs.Tables[0].Columns[z].DataType.Name.ToString().Replace("&nbsp;", "").Replace("&amp;", "");
                    if (field_type.ToUpper() == "DATETIME" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = server_datetime_dt(UserCode).ToString("dd/MM/yyyy");
                    if (field_type.ToUpper() == "DECIMAL" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = 0;
                    if (field_type.ToUpper() == "DOUBLE" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = 0;
                    if (field_type.ToUpper() == "INT16" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = 0;
                    if (field_type.ToUpper() == "INT32" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = 0;
                    if (field_type.ToUpper() == "INT64" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = 0;
                    if (field_type.ToUpper() == "SINGLE" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = 0;
                    oDs.Tables[0].Rows[i][z] = oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim();
                }
            }

            oDs.Tables[0].TableName = tab_name;

            da_new.Update(oDs, tab_name);
            oDs.Dispose(); da_new.Dispose(); cb_new.Dispose();
        }
    }

    public DataSet fill_schema(string UserCode, string tab_name)
    {
        using (OracleConnection fCon = new OracleConnection(Multiton.connString(UserCode)))
        {
            fCon.Open();
            DataSet oDS_fgen = new DataSet();
            oDS_fgen.Tables.Clear();
            OracleDataAdapter da_fgen = new OracleDataAdapter(new OracleCommand("SELECT * FROM " + tab_name + " where 1=2 ", fCon));
            OracleCommandBuilder cb = new OracleCommandBuilder(da_fgen);
            da_fgen.FillSchema(oDS_fgen, SchemaType.Source);
            da_fgen.Dispose(); cb.Dispose();
            return oDS_fgen;
        }
    }


    public string padlc(Int64 Number, int totalcharactes)
    {
        String result = "";
        Int64 temp = Number;
        for (int i = 1; i < totalcharactes; i++)
        {
            temp /= 10;
            if (temp == 0) result += "0";
        }
        result += Number.ToString();
        return result;
    }

    public string padlc(Int64 Number, int totalcharactes, string padwith)
    {
        String result = "";
        Int64 temp = Number;
        for (int i = 1; i < totalcharactes; i++)
        {
            temp /= 10;
            if (temp == 0) result += padwith;
        }
        result += Number.ToString();
        return result;
    }
    /// <summary>
    /// next number function 
    /// </summary>
    /// <param name="userCode">Database</param>
    /// <param name="Query">select max number from table</param>
    /// <param name="limit">total char to make number</param>
    /// <param name="field">field name to incrment next number</param>
    /// <returns></returns>
    /// 

    //single column pick

    public string getstring(string userCode, string Query)
    {

        string result = "";
        DataTable dtSgen = new DataTable();
        dtSgen = getdata(userCode, Query);
        if (dtSgen.Rows.Count > 0)
        {
            result = dtSgen.Rows[0][0].ToString();
        }
        return result;

    }

    public string getstring_main(string userCode, string Query)
    {

        string result = "";
        DataTable dtSgen = new DataTable();
        dtSgen = getdata_Main(userCode, Query);
        if (dtSgen.Rows.Count > 0)
        {
            result = dtSgen.Rows[0][0].ToString();
        }
        return result;

    }

    //gen no

    public string genNo(string userCode, string Query, int limit, string field)
    {
        Int64 i = 0;
        string count = "", result = "";
        DataTable dtSgen = new DataTable();
        dtSgen = getdata(userCode, Query + " union all select 1 from dual");
        if (dtSgen.Rows.Count <= 2)
        {
            count = Make_int(dtSgen.Rows[0]["" + field + ""].ToString().Trim()).ToString();
        }
        else if (dtSgen.Rows.Count == 1) count = "0";
        else count = "";
        if (count.Trim() == "0") i = 1;
        else if (count.Trim() == "") { return result; }
        else
        {
            try
            {
                i = Convert.ToInt64(count);
            }
            catch { }
            i++;
        }
        result = padlc(i, limit);
        dtSgen.Dispose();
        return result;
    }

    public string genNo(string userCode, string Query, int limit, string field, int min)
    {
        Int64 i = 0;
        string count = "", result = "";
        DataTable dtSgen = new DataTable();
        dtSgen = getdata(userCode, Query);
        if (dtSgen.Rows.Count > 0) count = dtSgen.Rows[0]["" + field + ""].ToString().Trim();
        else count = "0";
        if (count.Trim() == "") i = 0;
        else
        {
            try
            {
                i = Convert.ToInt64(count);
            }
            catch { }
            i++;
        }
        //if (i < min) i = min;
        result = min.ToString() + i.ToString();
        //result = padlc(i, limit);
        dtSgen.Dispose();
        return result;
    }

    public string seekval(string usercode, string Squery, string Seek_Val1)
    {
        string ReturnVal = "";
        using (DataTable dt_fgen = getdata(usercode, Squery))
        {
            if (dt_fgen.Rows.Count > 0)
            {
                if (dt_fgen.Rows[0][Seek_Val1].ToString().Trim().Length > 0) ReturnVal = dt_fgen.Rows[0][Seek_Val1].ToString().Trim();
                else ReturnVal = "0";
            }
            else ReturnVal = "0";
        }
        return ReturnVal.Trim();
    }

    public string seekval_dt(string usercode, DataTable dtsearch, string searchcolumn, string filtervalue, string Seek_Val1)
    {
        string ReturnVal = "";
        var result = from r in dtsearch.AsEnumerable()
                     where r.Field<string>(searchcolumn) == filtervalue
                     //&&  r.Field<string>("Name") != ""
                     select r;
        DataTable dtResult = result.CopyToDataTable();
        ReturnVal = dtResult.Rows[0][Seek_Val1].ToString();
        return ReturnVal;


    }

    public string findcolName(string usercode, string tabName, string colName)
    {
        string val = seekval(usercode, "select column_name from information_schema.columns where table_name='" + tabName + "' and column_name='" + colName + "'", "column_name");
        return val;
    }


    //string val = sgen.findcolName(userCode, "USER_DETAILS", "email1");
    //if (val == "0") sgen.execute_cmd(userCode, "ALTER TABLE USER_DETAILS ADD EMAIL1 VARCHAR(20)");

    //DataTable dt6 = new DataTable();
    //dt6 = sgen.getdata(userCode, "show databases");


    // ***********************
    //DataTable dtn = new DataTable();
    //dtn.Columns.Add("col1", typeof(string));
    //dtn.Columns.Add("usercode", typeof(string));
    //DataRow drn;

    //for (int j = 0; j < dt6.Rows.Count; j++)
    //{
    //    if (dt6.Rows[j][0].ToString().Contains("mysql") || dt6.Rows[j][0].ToString().Contains("mysql")) { }
    //    else
    //    {
    //        drn = dtn.NewRow();
    //        drn["usercode"] = dt6.Rows[j][0].ToString();
    //        drn["col1"] = sgen.seekval(dt6.Rows[j][0].ToString(), "SELECT COUNT(*) AS CN FROM USER_DETAILS", "CN");
    //        dtn.Rows.Add(drn);
    //    }
    //}
    //// ***********************

    //for (int j = 0; j < dt6.Rows.Count; j++)
    //{
    //    if (dt6.Rows[j][0].ToString().Contains("mysql") || dt6.Rows[j][0].ToString().Contains("mysql")) { }
    //    else
    //    {
    //        sgen.execute_cmd(dt6.Rows[j][0].ToString(), "insert into usertable");
    //    }
    //}

    // ***********************

    //DataTable edu = new DataTable();
    //edu = sgen.getdata(userCode, "select * from user_details");
    //// ***********************

    //for (int j = 0; j < dt6.Rows.Count; j++)
    //{
    //    if (dt6.Rows[j][0].ToString().Contains("mysql") || dt6.Rows[j][0].ToString().Contains("mysql")) { }
    //    else if (dt6.Rows[j][0].ToString().Contains("education1"))
    //    {
    //        DataSet ds = new DataSet();
    //        ds = sgen.fill_schema(dt6.Rows[j][0].ToString(), "user_details");
    //        DataRow oporow;
    //        foreach (DataRow edr in edu.Rows)
    //        {
    //            string val = sgen.seekval(dt6.Rows[j][0].ToString(), "select ` from user_details where user_id='" + edr["user_id"].ToString().Trim() + "'", "user_id");
    //            if (val == "0")
    //            {
    //                oporow = ds.Tables[0].NewRow();
    //                oporow["user_id"] = edr["user_id"].ToString();
    //                oporow["email"] = edr["email"].ToString();
    //                ds.Tables[0].Rows.Add(oporow);
    //            }
    //        }
    //        if (ds.Tables[0].Rows.Count > 0)
    //            sgen.save_data(dt6.Rows[j][0].ToString(), ds, "user_details");
    //    }
    //}

    // ***********************

    public string FillChart(string userCode, string title, string graphType, string graphUpperHeader, string graphHeader, string graphQuery, string graphUnit, string graphDiv, string bottomTitle, string leftTitle)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        DataTable grDt = new DataTable();
        grDt = getdata(userCode, graphQuery);
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("$('#" + graphDiv + "').highcharts({");
            sb.Append("chart: {");
            sb.Append("type: '" + graphType + "'");
            sb.Append("},");
            sb.Append("title: {");
            sb.Append("text: '" + graphUpperHeader + "'");
            sb.Append("},");
            sb.Append("subtitle: {");
            sb.Append("text: '" + graphHeader + "'");
            sb.Append("},");
            sb.Append("tooltip: {");
            sb.Append("formatter: function() {");
            if (grDt.Columns.Count <= 2) sb.Append("return this.point.name + ' ('+ this.y + ') ' + ' " + graphUnit + "';");
            else sb.Append("return ' ('+ this.y + ') ' + ' " + graphUnit + "';");
            sb.Append("}");
            sb.Append("},");
            sb.Append("plotOptions: {");
            sb.Append("" + graphType + " : {");
            sb.Append("allowPointSelect: true,");
            sb.Append("cursor: 'pointer',");
            sb.Append("dataLabels: {");
            sb.Append("enabled: true,");
            sb.Append("formatter: function () {");
            if (grDt.Columns.Count <= 2) sb.Append("return this.point.name + ' : (' + this.y + ') ';");
            else sb.Append("return ' (' + this.y + ') ';");
            sb.Append("},");
            sb.Append("style: {");
            sb.Append("color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black' }");
            sb.Append("}");
            sb.Append("}");
            sb.Append("},");

            string colData = "";
            string colHeader = "";
            string pieRmk = ",sliced: true, selected: true";
            if (graphType != "pie") pieRmk = "";

            if (grDt.Columns.Count <= 2)
            {
                sb.Append("series: [{");
                sb.Append("name : '" + bottomTitle + "', ");
                sb.Append("data: [");

                foreach (DataRow dr in grDt.Rows)
                {
                    if (colData.Length > 0)
                    {
                        colData = colData + ", " + "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + " } ";
                    }
                    else
                    {
                        colData = "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + pieRmk + " } ";
                    }

                    if (colHeader.Length > 0)
                    {
                        colHeader = colHeader + ", " + "'" + dr[0].ToString().Trim() + "'";
                    }
                    else
                    {
                        colHeader = "'" + dr[0].ToString().Trim() + "'";
                    }
                }

                sb.Append(colData);

                sb.Append("]");
                sb.Append("}],");
            }
            else
            {
                sb.Append("series: [");
                colData = "";
                for (int i = 0; i < grDt.Rows.Count; i++)
                {

                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();

                            if (colHeader.Length > 0)
                            {
                                colHeader = colHeader + ", " + "'" + grDt.Columns[j].ColumnName.ToString().Trim() + "'";
                            }
                            else
                            {
                                colHeader = "'" + grDt.Columns[j].ColumnName.ToString().Trim() + "'";
                            }
                        }
                    }

                    if (colData.Length > 0)
                    {
                        colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    }
                    else
                    {
                        colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    }
                }

                sb.Append(colData);

                sb.Append("],");
            }

            sb.Append("xAxis: {");
            sb.Append("categories: [ " + colHeader + " ]");
            sb.Append("},");

            sb.Append("yAxis: {");
            sb.Append("title : { text : '" + leftTitle + "' } , min : 0");
            sb.Append("}, ");

            sb.Append("});");
            sb.Append("});");
            //sb.Append("GetCurrentTime('" + graphUpperHeader + "');");
            sb.Append(@"</script>");
        }
        return sb.ToString().Trim();
    }
    public string FillChartwithlegend(string userCode, string title, string graphType, string graphUpperHeader, string graphHeader, string graphQuery, string graphUnit, string graphDiv, string bottomTitle, string leftTitle)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        DataTable grDt = new DataTable();
        grDt = getdata(userCode, graphQuery);
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("$('#" + graphDiv + "').highcharts({");
            sb.Append("chart: {");
            sb.Append("type: '" + graphType + "'");
            sb.Append("},");
            sb.Append("title: {");
            sb.Append("text: '" + graphUpperHeader + "'");
            sb.Append("},");
            sb.Append("subtitle: {");
            sb.Append("text: '" + graphHeader + "'");
            sb.Append("},");
            sb.Append("tooltip: {");
            sb.Append("formatter: function() {");
            if (grDt.Columns.Count <= 2) sb.Append("return this.point.name + ' ('+ this.y + ') ' + ' " + graphUnit + "';");
            else sb.Append("return ' ('+ this.y + ') ' + ' " + graphUnit + "';");
            sb.Append("}");
            sb.Append("},");
            sb.Append("plotOptions: {");
            sb.Append("" + graphType + " : {");
            sb.Append("allowPointSelect: true,");
            sb.Append("cursor: 'pointer',");
            sb.Append("dataLabels: {");
            sb.Append("enabled: false");
            sb.Append("},");
            sb.Append("showInLegend: true");
            sb.Append("}");
            sb.Append("},");

            string colData = "";
            string colHeader = "";
            string pieRmk = ",sliced: true, selected: true";
            if (graphType != "pie") pieRmk = "";

            if (grDt.Columns.Count <= 2)
            {
                sb.Append("series: [{");
                sb.Append("name : '" + bottomTitle + "', ");
                sb.Append("data: [");

                foreach (DataRow dr in grDt.Rows)
                {
                    if (colData.Length > 0)
                    {
                        colData = colData + ", " + "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + " } ";
                    }
                    else
                    {
                        colData = "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + pieRmk + " } ";
                    }

                    if (colHeader.Length > 0)
                    {
                        colHeader = colHeader + ", " + "'" + dr[0].ToString().Trim() + "'";
                    }
                    else
                    {
                        colHeader = "'" + dr[0].ToString().Trim() + "'";
                    }
                }

                sb.Append(colData);

                sb.Append("]");
                sb.Append("}],");
            }
            else
            {
                sb.Append("series: [");
                colData = "";
                for (int i = 0; i < grDt.Rows.Count; i++)
                {

                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();

                            if (colHeader.Length > 0)
                            {
                                colHeader = colHeader + ", " + "'" + grDt.Columns[j].ColumnName.ToString().Trim() + "'";
                            }
                            else
                            {
                                colHeader = "'" + grDt.Columns[j].ColumnName.ToString().Trim() + "'";
                            }
                        }
                    }

                    if (colData.Length > 0)
                    {
                        colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    }
                    else
                    {
                        colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    }
                }

                sb.Append(colData);

                sb.Append("],");
            }

            sb.Append("xAxis: {");
            sb.Append("categories: [ " + colHeader + " ]");
            sb.Append("},");

            sb.Append("yAxis: {");
            sb.Append("title : { text : '" + leftTitle + "' } , min : 0");
            sb.Append("}, ");

            sb.Append("});");
            sb.Append("});");
            //sb.Append("GetCurrentTime('" + graphUpperHeader + "');");
            sb.Append(@"</script>");
        }
        return sb.ToString().Trim();
    }
    public string FillbarChart(string userCode, string title, string graphType, string graphUpperHeader, string graphHeader, string graphQuery, string graphUnit, string graphDiv, string bottomTitle, string leftTitle)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        DataTable grDt = new DataTable();
        grDt = getdata(userCode, graphQuery);
        if (grDt.Rows.Count > 0)
        {

            sb.Append(@"<script type='text/javascript'>");
            //sb.Append("$(document).ready(function () {");
            //sb.Append("$('#" + graphDiv + "').highcharts({");
            sb.Append("Highcharts.chart('" + graphDiv + "',");
            sb.Append("{ chart: {");
            sb.Append("type: 'column'");
            sb.Append("},");
            sb.Append("title: {");
            sb.Append("text: 'Stacked column chart'");
            sb.Append("},");

            string colHeader = "";
            int kc = 0;
            foreach (DataColumn dc in grDt.Columns)
            {
                if (kc > 0)
                {
                    if (colHeader.Length > 0) colHeader += ",'" + dc.ColumnName + "'";
                    else colHeader = "'" + dc.ColumnName + "'";
                }
                kc++;
            }
            sb.Append("xAxis: {");
            sb.Append("categories: [" + colHeader + "]");
            sb.Append("},");


            sb.Append("yAxis: {");
            sb.Append("min: 0,");
            sb.Append("title: {");
            sb.Append("text: 'Total fruit consumption'");
            sb.Append("},");
            sb.Append("stackLabels: {");
            sb.Append("enabled: true,");
            sb.Append("style: {");
            sb.Append("fontWeight: 'bold',");
            sb.Append("color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'");
            sb.Append("}");
            sb.Append("}");
            sb.Append("},");
            sb.Append("legend: {");
            sb.Append("align: 'right',");
            sb.Append("x: -30,");
            sb.Append("verticalAlign: 'top',");
            sb.Append("y: 25,");
            sb.Append("floating: true,");
            sb.Append("backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',");
            sb.Append("borderColor: '#CCC',");
            sb.Append("borderWidth: 1,");
            sb.Append("shadow: false");
            sb.Append("},");
            sb.Append("tooltip: {");
            sb.Append("headerFormat: '<b>{point.x}</b><br/>',");
            sb.Append("pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'");
            sb.Append("},");
            sb.Append("plotOptions: {");
            sb.Append("column: {");
            sb.Append("stacking: 'normal',");
            sb.Append("dataLabels: {");
            sb.Append("enabled: true,");
            sb.Append("color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'");
            sb.Append("}");
            sb.Append("}");
            sb.Append("},");
            sb.Append("series: [");
            string colData = "";

            string pieRmk = ",sliced: true, selected: true";
            if (graphType != "pie") pieRmk = "";
            colData = "";
            for (int i = 0; i < grDt.Rows.Count; i++)
            {

                string mq0 = "";
                for (int j = 0; j < grDt.Columns.Count; j++)
                {
                    if (j > 0)
                    {
                        if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                        else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                    }
                }

                if (colData.Length > 0)
                {
                    colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                }
                else
                {
                    colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                }


            }
            sb.Append(colData);
            sb.Append("]");
            sb.Append("});");
            //sb.Append("});");
            //sb.Append("GetCurrentTime('" + graphUpperHeader + "');");
            sb.Append(@"</script>");


        }
        return sb.ToString().Trim();
    }





    /// <summary>
    /// 
    /// </summary>
    /// <param name="msgtype">1 for notify only ,2 for confirmation</param>
    /// <param name="msg"> this is msg string</param>
    /// <param name="alert_type">0,for red (failure), 1 for green (success) only ,2 for yellow (warning) </param>
    /// 
    public void showmsg(int msgtype, string msg, int alert_type)
    {
        HttpContext.Current.Session[MyGuid + "_msgtpe"] = alert_type;
        try
        {
            System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
            if (page != null)
            {
                ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("msgp")).InnerHtml = msg;
                if (msgtype == 1)
                {
                    page.Master.FindControl("btnyes").Visible = false;
                    page.Master.FindControl("btnno").Visible = false;
                    page.Master.FindControl("btnok").Visible = true;

                    switch (alert_type)

                    {
                        case 0:
                            ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("dtitle")).Style.Add("background-color", "#E74C3C");
                            ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("title_type")).InnerHtml = "Error";
                            break;
                        case 1:
                            ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("dtitle")).Style.Add("background-color", "#1ABB9C");
                            ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("title_type")).InnerHtml = "Success";
                            break;
                        case 2:
                            ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("dtitle")).Style.Add("background-color", "#f0ad4e");
                            ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("title_type")).InnerHtml = "Warning";
                            break;
                    }

                }
                else if (msgtype == 2)
                {
                    page.Master.FindControl("btnok").Visible = false;
                    page.Master.FindControl("btnyes").Visible = true;
                    page.Master.FindControl("btnno").Visible = true;
                    ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("title_type")).InnerHtml = "Confirmation";
                    ((System.Web.UI.HtmlControls.HtmlGenericControl)page.Master.FindControl("dtitle")).Style.Add("background-color", "#f0ad4e");
                }

                page.ClientScript.RegisterStartupScript(this.GetType(), "UpdateTime", "showerror();", true);
            }
        }
        catch (Exception ee)
        {
            System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
            if (page != null)
            {
                page.ClientScript.RegisterStartupScript(this.GetType(), "UpdateTime", "alert('" + msg + "');", true);
            }
        }

    }



    public string Convert_Stringto64(string stringvalue)
    {
        byte[] encData_byte = new byte[stringvalue.Length];
        encData_byte = System.Text.Encoding.UTF8.GetBytes(stringvalue);
        string encrypt = Convert.ToBase64String(encData_byte);
        return encrypt;
    }


    public string Convert_HexvalueToStringvalue(string hexvalue)
    {
        System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
        System.Text.Decoder utf8Decode = encoder.GetDecoder();
        byte[] todecode_byte = Convert.FromBase64String(hexvalue);
        int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
        char[] decoded_char = new char[charCount];
        utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
        return new String(decoded_char);
    }


    public static byte[] ReadFile(string filePath)
    {
        byte[] buffer;
        FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
        try
        {
            int length = (int)fileStream.Length;  // get file length
            buffer = new byte[length];            // create buffer
            int count;                            // actual number of bytes read
            int sum = 0;                          // total number of bytes read

            // read until Read method returns 0 (end of the stream has been reached)
            while ((count = fileStream.Read(buffer, sum, length - sum)) > 0)
                sum += count;  // sum is a buffer offset for next reading
        }
        finally
        {
            fileStream.Close();
        }
        return buffer;
    }


    public void showmsg_log(int msgtype, string msg, int alert_type)
    {
        System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
        if (page != null)
        {
            if (msgtype == 1)
            {
                page.ClientScript.RegisterStartupScript(this.GetType(), "UpdateTime", "alert('" + msg + "');", true);
            }
            else if (msgtype == 2)
            {
                page.ClientScript.RegisterStartupScript(this.GetType(), "UpdateTime", "confirm('" + msg + "');", true);
            }
        }

    }


    public void filldash(System.Web.UI.Page page)
    {

        foreach (Control ctrl in page.Form.Controls)
        {

            if (ctrl is TextBox)
            {
                if (((TextBox)ctrl).Text.Equals("")) ((TextBox)ctrl).Text = "-";
            }
            //if (ctrl is DropDownList)
            //{
            //    if (((DropDownList)ctrl).Text.Equals("")) ((DropDownList)ctrl).Text = "-";
            //}
        }



    }



    IEnumerable<Control> GetAllControls(System.Web.UI.Page page)
    {
        var allControls = new List<Control>();
        var currentControls = new Queue<Control>();
        currentControls.Enqueue(page);

        while (currentControls.Count > 0)
        {
            var c = currentControls.Dequeue();
            if (!allControls.Contains(c))
            {
                allControls.Add(c);
                if (c.Controls != null && c.Controls.Count > 0)
                {
                    foreach (Control e in c.Controls)
                    {
                        currentControls.Enqueue(e);
                    }
                }
            }
        }
        return allControls;
    }

    public void fillblank(System.Web.UI.Page page)
    {
        IEnumerable<Control> controls = GetAllControls(page);


        foreach (Control ctrl in controls)
        {
            try
            {
                if (ctrl is TextBox)
                {
                    ((TextBox)ctrl).Text = "";

                    ((TextBox)ctrl).Attributes.Add("AutoCompleteType", "Disabled");
                }
                if (ctrl is DropDownList)
                {
                    ((DropDownList)ctrl).SelectedIndex = -1;
                }
                if (ctrl is CheckBox)
                {
                    ((CheckBox)ctrl).Checked = false;
                }
                if (ctrl is HtmlSelect)
                {
                    ((HtmlSelect)ctrl).SelectedIndex = -1;

                }
                if (ctrl is HtmlInputCheckBox)
                {
                    ((HtmlInputCheckBox)ctrl).Checked = false;

                }
                if (ctrl is HtmlInputRadioButton)
                {
                    ((HtmlInputRadioButton)ctrl).Checked = false;

                }

                //if (ctrl is Label)
                //{
                //    ((Label)ctrl).Text = "";
                //}
            }
            catch (Exception ex)
            {
                return;
            }
        }
        //ScriptManager.RegisterStartupScript(page, this.GetType(), "blankhf", "blankselects();", true);


    }


    public void fillencryptattchmnt(string userCode, IList<HttpPostedFile> fileCollection)
    {
        string cg_com_name = "", clientid_mst = "", unitid_mst = "", userid_mst = "", currdate = "";

        cg_com_name = GetCookie(MyGuid, "cg_com_name");
        clientid_mst = GetCookie(MyGuid, "clientid_mst");
        unitid_mst = GetCookie(MyGuid, "unitid_mst");
        userid_mst = GetCookie(MyGuid, "userid_mst");
        currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");

        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/");

        HttpPostedFile file = fileCollection[0];
        string fileName = Path.GetFileName(file.FileName);
        string path = clientid_mst + unitid_mst + userid_mst + currdate + "_" + fileName;
        string encpath = Convert_Stringto64(path).ToString();
        string finalpath = serverpath + encpath;
        file.SaveAs(finalpath);
        //files.Add(finalpath);
    }

    public string Send_mail_SA1(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
        dtmail = getdata(userCode, mq);
        if (dtmail.Rows.Count < 1)
        {
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            dtmail = getdata(userCode, mq);
        }

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
            //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
            cgname = GetCookie(MyGuid, "cg_com_name");
            //var client = new TcpClient();
            //client.Connect(smtpvalue, portvalue);    
        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {

            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }

        string[] bccarrr = bcc.Split(',');

        for (int i = 0; i < bccarrr.Length; i++)
        {
            string[] itarr = bccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[1].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalbcc.Trim().Equals("")) tlocalbcc = itarr[0].ToString().Trim();
                    else tlocalbcc = tlocalbcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[0].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";


        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);
            msg.To.Add(tmailto);
            msg.Subject = subject;
            msg.Body = body;
            msg.IsBodyHtml = true;

            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }
        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public string Send_mail_SA(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst, IList<HttpPostedFile> fileCollection, bool useremail, bool allowoutsidemail, bool htmlbody, bool isdraft, string reference_code)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        if (allowoutsidemail)
        {
            string mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            DataTable dtmail = new DataTable();
            if (useremail == true) mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
            dtmail = getdata(userCode, mq);
            if (dtmail.Rows.Count > 0)
            {
                smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
                emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
                passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
                portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
                //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
                cgname = GetCookie(MyGuid, "cg_com_name");
                //var client = new TcpClient();
                //client.Connect(smtpvalue, portvalue);             

            }
            else allowoutsidemail = false;

        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {

            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }

        string[] bccarrr = bcc.Split(',');

        for (int i = 0; i < bccarrr.Length; i++)
        {
            string[] itarr = bccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[1].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalbcc.Trim().Equals("")) tlocalbcc = itarr[0].ToString().Trim();
                    else tlocalbcc = tlocalbcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[0].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";


        //if (!tlocalto.Equals("") || !tlocalcc.Equals("") || !tlocalbcc.Equals(""))
        {

            Satransaction sat = new Satransaction(userCode, MyGuid);
            bool res = false;
            string id = genNo(userCode, "Select max(vch_num) as Auto_Generated_id from mailbox", 6, "Auto_Generated_id");


            if (fileCollection.Any())
            {

                foreach (var file in fileCollection)
                {
                    if (file.ContentLength != 0) // here is just check for a null value.
                    {
                        string fileName2 = Path.GetFileName(file.FileName);
                        string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                        string encpath2 = Convert_Stringto64(path2).ToString();
                        string finalpath2 = serverpath + encpath2;
                        file.SaveAs(finalpath2);
                        files.Add(finalpath2);
                        sourcepath = serverpath;
                        string mq3 = "insert into mailbox_file(vch_num,attachment,attachment_path,client_id,client_unit_id,ent_by,ent_date,reference_code,type)values('" + id + "','" + fileName2 + "','" + encpath2 + "','" + cl_id + "','" + unitid + "','" + userid_mst + "','" + currdate + "','" + reference_code + "','mailfile')";
                        res = execute_cmd(userCode, mq3);
                        if (!res) { sat.Rollback(); return "Error Saving Files"; }

                    }
                }
            }

            string mtype = "sent", box = "1";
            if (isdraft) { mtype = "draft"; box = "0"; }
            if (reference_code.Equals("")) reference_code = "-";


            string mq = "", mq0 = "", from_user = "";

            mq0 = "select (user_id||' <'||nvl(email,'-'),'>') name  FROM user_details WHERE vch_num='" + userid_mst + "' ";
            from_user = seekval(userCode, mq0, "name");
            mq = "";
            mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + from_user + "', '" + from_user + "', '" + subject + "', '" + body + "', '" + box + "', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', '" + mtype + "','-','" + mailto + "','" + cc + "','" + bcc + "')";
            res = sat.Execute_cmd(mq);
            if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + from_user + "'"; }
            if (isdraft)
            {
                sat.Commit();
                return "Mail Saved to draft successfully";
            }
            foreach (string Multiemailid in tlocalto.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'to','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }

            }
            foreach (string Multiemailid in tlocalcc.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '2', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'cc','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }

            }
            foreach (string Multiemailid in tlocalbcc.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '3', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'bcc','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }
            }
            sat.Commit();
        }

        if (!allowoutsidemail) { return "Mail Send in Local successfully But No Outside mail sent."; }
        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;

            if (fileCollection.Count != 0)
            {
                if (!sourcepath.Equals("") && files.Count != 0)
                {
                    for (int i = 0; i < files.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            string nana = fileCollection[i].FileName.ToString();
                            FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                            msg.Attachments.Add(new Attachment(fileStream, nana));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < fileCollection.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            HttpPostedFile file = fileCollection[i];
                            string fileName2 = Path.GetFileName(file.FileName);
                            string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                            string encpath2 = Convert_Stringto64(path2).ToString();
                            string finalpath2 = serverpath + encpath2;
                            file.SaveAs(finalpath2);
                            files.Add(finalpath2);
                            sourcepath = serverpath;
                        }
                    }
                    for (int i = 0; i < files.Count; i++)
                    {

                        string nana = fileCollection[i].FileName.ToString();
                        FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                        msg.Attachments.Add(new Attachment(fileStream, nana));

                    }

                }
            }

            msg.Body = body;
            try
            {
                msg.IsBodyHtml = htmlbody;
            }
            catch
            {
                msg.IsBodyHtml = false;
            }
            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }

        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public string Send_mail_SA(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst, IList<HttpPostedFileBase> fileCollection)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
        dtmail = getdata(userCode, mq);
        if (dtmail.Rows.Count < 1)
        {
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            dtmail = getdata(userCode, mq);
        }

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
            //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
            cgname = GetCookie(MyGuid, "cg_com_name");
            //var client = new TcpClient();
            //client.Connect(smtpvalue, portvalue);    
        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {

            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }

        string[] bccarrr = bcc.Split(',');

        for (int i = 0; i < bccarrr.Length; i++)
        {
            string[] itarr = bccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[1].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalbcc.Trim().Equals("")) tlocalbcc = itarr[0].ToString().Trim();
                    else tlocalbcc = tlocalbcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[0].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";


        //if (!tlocalto.Equals("") || !tlocalcc.Equals("") || !tlocalbcc.Equals(""))
        {

            Satransaction sat = new Satransaction(userCode, MyGuid);
            bool res = false;
            string id = genNo(userCode, "Select max(vch_num) as Auto_Generated_id from mailbox", 6, "Auto_Generated_id");


            if (fileCollection.Any())
            {

                foreach (var file in fileCollection)
                {
                    if (file.ContentLength != 0) // here is just check for a null value.
                    {
                        string fileName2 = Path.GetFileName(file.FileName);
                        string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                        string encpath2 = Convert_Stringto64(path2).ToString();
                        string finalpath2 = serverpath + encpath2;
                        file.SaveAs(finalpath2);
                        files.Add(finalpath2);
                        sourcepath = serverpath;
                        string mq3 = "insert into mailbox_file(vch_num,attachment,attachment_path,client_id,client_unit_id,ent_by,ent_date,reference_code)values('" + id + "','" + fileName2 + "','" + encpath2 + "','" + cl_id + "','" + unitid + "','" + userid_mst + "','" + currdate + "','-')";
                        res = execute_cmd(userCode, mq3);
                        if (!res) { sat.Rollback(); return "Error Saving Files"; }

                    }
                }
            }

            string mtype = "sent", box = "1";

            string mq0 = "", from_user = "";

            mq0 = "select (user_id||' <'||nvl(email,'-')||'>') name  FROM user_details WHERE vch_num='" + userid_mst + "' ";
            from_user = seekval(userCode, mq0, "name");
            mq = "";
            mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + from_user + "', '" + from_user + "', '" + subject + "', '" + body + "', '" + box + "', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', '" + mtype + "','-','" + mailto + "','" + cc + "','" + bcc + "')";
            res = sat.Execute_cmd(mq);
            if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + from_user + "'"; }

            foreach (string Multiemailid in tlocalto.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'to','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }

            }
            foreach (string Multiemailid in tlocalcc.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '2', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'cc','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }

            }
            foreach (string Multiemailid in tlocalbcc.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '3', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'bcc','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }
            }
            sat.Commit();
        }


        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;

            if (fileCollection.Count != 0)
            {
                if (!sourcepath.Equals("") && files.Count != 0)
                {
                    for (int i = 0; i < files.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            string nana = fileCollection[i].FileName.ToString();
                            FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                            msg.Attachments.Add(new Attachment(fileStream, nana));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < fileCollection.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            HttpPostedFileBase file = fileCollection[i];
                            string fileName2 = Path.GetFileName(file.FileName);
                            string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                            string encpath2 = Convert_Stringto64(path2).ToString();
                            string finalpath2 = serverpath + encpath2;
                            file.SaveAs(finalpath2);
                            files.Add(finalpath2);
                            sourcepath = serverpath;
                        }
                    }
                    for (int i = 0; i < files.Count; i++)
                    {

                        string nana = fileCollection[i].FileName.ToString();
                        FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                        msg.Attachments.Add(new Attachment(fileStream, nana));

                    }

                }
            }

            msg.Body = body;

            msg.IsBodyHtml = false;

            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }
        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public string Send_mail_SA_attc(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst, IList<HttpPostedFileBase> fileCollection)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
        dtmail = getdata(userCode, mq);
        if (dtmail.Rows.Count < 1)
        {
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            dtmail = getdata(userCode, mq);
        }

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
            //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
            cgname = GetCookie(MyGuid, "cg_com_name");
            //var client = new TcpClient();
            //client.Connect(smtpvalue, portvalue);    
        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {

            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }

        string[] bccarrr = bcc.Split(',');

        for (int i = 0; i < bccarrr.Length; i++)
        {
            string[] itarr = bccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[1].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalbcc.Trim().Equals("")) tlocalbcc = itarr[0].ToString().Trim();
                    else tlocalbcc = tlocalbcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[0].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";


        //if (!tlocalto.Equals("") || !tlocalcc.Equals("") || !tlocalbcc.Equals(""))
        {

            Satransaction sat = new Satransaction(userCode, MyGuid);
            bool res = false;
            //string id = genNo(userCode, "Select max(vch_num) as Auto_Generated_id from mailbox", 6, "Auto_Generated_id");


            if (fileCollection.Any())
            {

                foreach (var file in fileCollection)
                {
                    if (file.ContentLength != 0) // here is just check for a null value.
                    {
                        string fileName2 = Path.GetFileName(file.FileName);
                        string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                        string encpath2 = Convert_Stringto64(path2).ToString();
                        string finalpath2 = serverpath + encpath2;
                        file.SaveAs(finalpath2);
                        files.Add(finalpath2);
                        sourcepath = serverpath;
                        //string mq3 = "insert into mailbox_file(vch_num,attachment,attachment_path,client_id,client_unit_id,ent_by,ent_date,reference_code)values('" + id + "','" + fileName2 + "','" + encpath2 + "','" + cl_id + "','" + unitid + "','" + userid_mst + "','" + currdate + "','-')";
                        //res = execute_cmd(userCode, mq3);
                        //if (!res) { sat.Rollback(); return "Error Saving Files"; }

                    }
                }
            }

            string mtype = "sent", box = "1";

            string mq0 = "", from_user = "";

            //mq0 = "select (user_id||' <'||nvl(email,'-')||'>') name  FROM user_details WHERE vch_num='" + userid_mst + "' ";
            //from_user = seekval(userCode, mq0, "name");
            //mq = "";
            //mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + from_user + "', '" + from_user + "', '" + subject + "', '" + body + "', '" + box + "', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', '" + mtype + "','-','" + mailto + "','" + cc + "','" + bcc + "')";
            //res = sat.Execute_cmd(mq);
            //if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + from_user + "'"; }

            //foreach (string Multiemailid in tlocalto.Split(','))
            //{

            //    if (Multiemailid != "")
            //    {
            //        mq0 = "";
            //        mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
            //        if (mq0.Trim().Length > 2)
            //        {
            //            mq = "";
            //            mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'to','-','" + mailto + "','" + cc + "','" + bcc + "')";
            //            res = sat.Execute_cmd(mq);
            //            if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
            //        }
            //    }

            //}
            //foreach (string Multiemailid in tlocalcc.Split(','))
            //{

            //    if (Multiemailid != "")
            //    {
            //        mq0 = "";
            //        mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
            //        if (mq0.Trim().Length > 2)
            //        {
            //            mq = "";
            //            mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '2', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'cc','-','" + mailto + "','" + cc + "','" + bcc + "')";
            //            res = sat.Execute_cmd(mq);
            //            if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
            //        }
            //    }

            //}
            //foreach (string Multiemailid in tlocalbcc.Split(','))
            //{

            //    if (Multiemailid != "")
            //    {
            //        mq0 = "";
            //        mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
            //        if (mq0.Trim().Length > 2)
            //        {
            //            mq = "";
            //            mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '3', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'bcc','-','" + mailto + "','" + cc + "','" + bcc + "')";
            //            res = sat.Execute_cmd(mq);
            //            if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
            //        }
            //    }
            //}
            //sat.Commit();
        }


        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;

            if (fileCollection.Count != 0)
            {
                if (!sourcepath.Equals("") && files.Count != 0)
                {
                    for (int i = 0; i < files.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            string nana = fileCollection[i].FileName.ToString();
                            FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                            msg.Attachments.Add(new Attachment(fileStream, nana));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < fileCollection.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            HttpPostedFileBase file = fileCollection[i];
                            string fileName2 = Path.GetFileName(file.FileName);
                            string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                            string encpath2 = Convert_Stringto64(path2).ToString();
                            string finalpath2 = serverpath + encpath2;
                            file.SaveAs(finalpath2);
                            files.Add(finalpath2);
                            sourcepath = serverpath;
                        }
                    }
                    for (int i = 0; i < files.Count; i++)
                    {

                        string nana = fileCollection[i].FileName.ToString();
                        FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                        msg.Attachments.Add(new Attachment(fileStream, nana));

                    }

                }
            }

            msg.Body = body;

            msg.IsBodyHtml = true;

            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }
        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public string Send_mail_SA(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
        dtmail = getdata(userCode, mq);
        if (dtmail.Rows.Count < 1)
        {
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            dtmail = getdata(userCode, mq);
        }

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
            //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
            cgname = GetCookie(MyGuid, "cg_com_name");
            //var client = new TcpClient();
            //client.Connect(smtpvalue, portvalue);    
        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {

            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }

        string[] bccarrr = bcc.Split(',');

        for (int i = 0; i < bccarrr.Length; i++)
        {
            string[] itarr = bccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[1].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalbcc.Trim().Equals("")) tlocalbcc = itarr[0].ToString().Trim();
                    else tlocalbcc = tlocalbcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[0].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";


        //if (!tlocalto.Equals("") || !tlocalcc.Equals("") || !tlocalbcc.Equals(""))
        {

            Satransaction sat = new Satransaction(userCode, MyGuid);
            bool res = false;
            string id = genNo(userCode, "Select max(vch_num) as Auto_Generated_id from mailbox", 6, "Auto_Generated_id");


            string mtype = "sent", box = "1";

            string mq0 = "", from_user = "";

            mq0 = "select (user_id||' <'||nvl(email,'-')||'>') name  FROM user_details WHERE vch_num='" + userid_mst + "' ";
            from_user = seekval(userCode, mq0, "name");
            mq = "";
            mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + from_user + "', '" + from_user + "', '" + subject + "', '" + body + "', '" + box + "', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', '" + mtype + "','-','" + mailto + "','" + cc + "','" + bcc + "')";
            res = sat.Execute_cmd(mq);
            if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + from_user + "'"; }

            foreach (string Multiemailid in tlocalto.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'to','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }

            }
            foreach (string Multiemailid in tlocalcc.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '2', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'cc','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }

            }
            foreach (string Multiemailid in tlocalbcc.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into mailbox(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '3', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'bcc','-','" + mailto + "','" + cc + "','" + bcc + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }
            }
            sat.Commit();
        }


        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;


            msg.Body = body;

            msg.IsBodyHtml = false;

            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }
        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public string Send_taskmail(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst, IList<HttpPostedFile> fileCollection, string tsktype_id, string tsktype_name, int clsrtype, string close_by, string app_by, string refrrnce_code, string remark, string task_type, string cc_ids, string cdt)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
        dtmail = getdata(userCode, mq);
        if (dtmail.Rows.Count < 1)
        {
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            dtmail = getdata(userCode, mq);
        }

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
            //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
            cgname = GetCookie(MyGuid, "cg_com_name");
            //var client = new TcpClient();
            //client.Connect(smtpvalue, portvalue);    
        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {

            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";



        //if (!tlocalto.Equals("") || !tlocalcc.Equals("") || !tlocalbcc.Equals(""))
        {
            Satransaction sat = new Satransaction(userCode, MyGuid);
            bool res = false;
            string id = genNo(userCode, "Select max(vch_num) as Auto_Generated_id from taskassign", 6, "Auto_Generated_id");

            if (refrrnce_code.Trim().Equals("-")) refrrnce_code = genNo(userCode, "Select max(ref_code) as Auto_Generated_id from taskassign", 6, "Auto_Generated_id");

            if (fileCollection.Any())
            {

                foreach (var file in fileCollection)
                {
                    if (file.ContentLength != 0) // here is just check for a null value.
                    {
                        string fileName2 = Path.GetFileName(file.FileName);
                        string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                        string encpath2 = Convert_Stringto64(path2).ToString();
                        string finalpath2 = serverpath + encpath2;
                        file.SaveAs(finalpath2);
                        files.Add(finalpath2);
                        sourcepath = serverpath;
                        string mq3 = "insert into mailbox_file(vch_num,attachment,attachment_path,client_id,client_unit_id,ent_by,ent_date,reference_code,type)values('" + id + "','" + fileName2 + "','" + encpath2 + "','" + cl_id + "','" + unitid + "','" + userid_mst + "','" + currdate + "','-','" + "taskfile" + "')";
                        res = execute_cmd(userCode, mq3);
                        if (!res) { sat.Rollback(); return "Error Saving Files"; }

                    }
                }
            }

            string mtype = "sent", box = "1";

            string mq0 = "", from_user = "";

            mq0 = "select (user_id||' <'||nvl(email,'-')||'>') name  FROM user_details WHERE vch_num='" + userid_mst + "' ";
            from_user = seekval(userCode, mq0, "name");
            mq = "";
            //mq = "insert into taskassign(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + from_user + "', '" + from_user + "', '" + subject + "', '" + body + "', '" + box + "', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', '" + mtype + "','-','" + mailto + "','" + cc + "','" + bcc + "')";
            //res = sat.Execute_cmd(mq);
            //if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + from_user + "'"; }

            foreach (string Multiemailid in tlocalto.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select (user_id||' <'||nvl(email,'-')||'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {
                        mq = "";
                        mq = "insert into taskassign(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names,tsktype_id,tsktype_name,clsrtype,close_by,app_by,ref_code,remark,task_type,cc_ids,completion_dt)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '1', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'to','-','" + mailto + "','" + cc + "','" + bcc + "','" + tsktype_id + "','" + tsktype_name + "','" + clsrtype + "','" + close_by + "','" + app_by + "','" + refrrnce_code + "','" + remark + "','" + task_type + "','" + cc_ids + "','" + cdt + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }

            }

            #region

            //task_type = "-";

            //foreach (string Multiemailid in tlocalcc.Split(','))
            //{

            //    if (Multiemailid != "")
            //    {
            //        mq0 = "";
            //        mq0 = seekval(userCode, "select concat(user_id,' <',nvl(email,'-'),'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
            //        if (mq0.Trim().Length > 2)
            //        {
            //            mq = "";
            //            mq = "insert into taskassign(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names,tsktype_id,tsktype_name,clsrtype,close_by,app_by,ref_code,remark,task_type)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '2', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'cc','-','" + mailto + "','" + cc + "','" + bcc + "','" + tsktype_id + "','" + tsktype_name + "','" + clsrtype + "','" + close_by + "','" + app_by + "','" + refrrnce_code + "','" + remark + "','" + task_type + "')";
            //            res = sat.Execute_cmd(mq);
            //            if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
            //        }
            //    }

            //}
            //foreach (string Multiemailid in tlocalbcc.Split(','))
            //{

            //    if (Multiemailid != "")
            //    {
            //        mq0 = "";
            //        mq0 = seekval(userCode, "select concat(user_id,' <',nvl(email,'-'),'>') USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
            //        if (mq0.Trim().Length > 2)
            //        {
            //            mq = "";
            //            mq = "insert into taskassign(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id,client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names)values('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', '3', '" + cl_id + "', '" + unitid + "', '" + userid_mst + "', '" + currdate + "', 'bcc','-','" + mailto + "','" + cc + "','" + bcc + "')";
            //            res = sat.Execute_cmd(mq);
            //            if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
            //        }
            //    }
            //}

            #endregion

            sat.Commit();
        }


        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;

            if (fileCollection.Count != 0)
            {
                if (!sourcepath.Equals("") && files.Count != 0)
                {
                    for (int i = 0; i < files.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            string nana = fileCollection[i].FileName.ToString();
                            FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                            msg.Attachments.Add(new Attachment(fileStream, nana));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < fileCollection.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            HttpPostedFile file = fileCollection[i];
                            string fileName2 = Path.GetFileName(file.FileName);
                            string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                            string encpath2 = Convert_Stringto64(path2).ToString();
                            string finalpath2 = serverpath + encpath2;
                            file.SaveAs(finalpath2);
                            files.Add(finalpath2);
                            sourcepath = serverpath;
                        }
                    }
                    for (int i = 0; i < files.Count; i++)
                    {

                        string nana = fileCollection[i].FileName.ToString();
                        FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                        msg.Attachments.Add(new Attachment(fileStream, nana));

                    }

                }
            }


            msg.Body = body;

            msg.IsBodyHtml = true;
            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }


        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public string Send_taskmail(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst, IList<HttpPostedFileBase> fileCollection, string tsktype_id, string tsktype_name, int clsrtype, string close_by, string app_by, string refrrnce_code, string remark, string task_type, string cc_ids, string cdt, string priority)
    {//11012020



        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";
        string dt_ft = "YYYY-MM-dd HH24:MI:SS";
        //string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");

        string currdate = server_datetime(userCode);
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        //string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where lpad(rec_id,6,'0')='" + userid_mst + "'";
        //dtmail = getdata(userCode, mq);
        //if (dtmail.Rows.Count < 1)
        //{
        mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
        dtmail = getdata(userCode, mq);
        //}

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));

            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);

            cgname = GetCookie(MyGuid, "cg_com_name");

        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {
            string[] itarr = toarrr[i].Replace("(", "").Replace(")", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {

            string[] itarr = ccarrr[i].Replace("(", "").Replace(")", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";



        {
            Satransaction sat = new Satransaction(userCode, MyGuid);
            bool res = false;
            string id = genNo(userCode, "Select max(to_number(vch_num)) as Auto_Generated_id from taskassign", 6, "Auto_Generated_id");

            if (refrrnce_code.Trim().Equals("-")) refrrnce_code = genNo(userCode, "Select max(to_number(ref_code))  as Auto_Generated_id from taskassign", 6, "Auto_Generated_id");

            if (fileCollection != null)
            {

                for (Int32 i = 0; i < fileCollection.Count; i++)
                {
                    try
                    {
                        if ((fileCollection[i].ContentLength != 0) && (fileCollection[i].ContentLength != null))
                        {

                            string fileName2 = fileCollection[i].FileName;
                            string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                            string encpath2 = Convert_Stringto64(path2).ToString();
                            string finalpath2 = serverpath + encpath2;
                            //file.SaveAs(finalpath2);
                            //files.Add(finalpath2);
                            fileCollection[i].SaveAs(finalpath2);
                            sourcepath = serverpath;
                            string mq3 = "insert into mailbox_file(vch_num,attachment,attachment_path,client_id,client_unit_id,ent_by," +
                                "ent_date,reference_code,type,created_date,vch_date,EDIT_DATE,EDIT_BY,MESSAGEID,from_user,user_id)values('" + id + "','" + fileName2 + "','" + encpath2 + "','" + cl_id + "'" +
                                ",'" + unitid + "','" + userid_mst + "',to_date('" + currdate + "','" + dt_ft + "'),'-','" + "taskfile" + "'," +
                                "to_date('" + currdate + "','" + dt_ft + "'),to_date('" + currdate + "','" + dt_ft + "')," +
                                "to_date('" + currdate + "','" + dt_ft + "'),'" + userid_mst + "','0','0','0')";
                            res = execute_cmd(userCode, mq3);
                            if (!res) { sat.Rollback(); return "Error Saving Files"; }


                        }
                    }
                    catch { }
                }
            }

            string mtype = "sent", box = "1";

            string mq0 = "", from_user = "";

            mq0 = "select user_id||' ('||nvl(email,'-')||')' name FROM user_details WHERE vch_num='" + userid_mst + "' ";
            from_user = seekval(userCode, mq0, "name");
            mq = "";


            foreach (string Multiemailid in tlocalto.Split(','))
            {

                if (Multiemailid != "")
                {
                    mq0 = "";
                    mq0 = seekval(userCode, "select user_id||' ('||nvl(email,'-')||')' USER_ID FROM user_details WHERE USER_ID='" + Multiemailid.Trim() + "'", "USER_ID");
                    if (mq0.Trim().Length > 2)
                    {

                        if (cc == "") cc = "-";
                        mq = "";
                        mq = "insert into taskassign(vch_num,user_id,from_user,subject,body,box_status,read_unread,type,client_id" +
                            ",client_unit_id,ent_by,ent_date,mail_draft,reference_code,to_names,cc_names,bcc_names,tsktype_id,tsktype_name," +
                            "clsrtype,close_by,app_by,ref_code,remark,task_type,cc_ids,completion_dt,created_date,vch_date,edit_date,edit_by,messageid,priority)" +
                            "values" +
                            "('" + id + "', '" + mq0 + "', '" + from_user + "', '" + subject + "', '" + body + "', '1', '1', 'TSK', '" + cl_id + "'," +
                            " '" + unitid + "', '" + userid_mst + "', to_date('" + currdate + "','" + dt_ft + "'), 'to','-','" + mailto + "'," +
                            "'" + cc + "','-','" + tsktype_id + "','" + tsktype_name + "','" + clsrtype + "','" + close_by + "'," +
                            "'" + app_by + "','" + refrrnce_code + "','" + remark + "','" + task_type + "','" + cc_ids + "'," +
                            "to_date('" + cdt + "','" + dt_ft + "'),to_date('" + currdate + "','" + dt_ft + "'),to_date('" + currdate + "','" + dt_ft + "')," +
                            "to_date('" + currdate + "','" + dt_ft + "'),'" + userid_mst + "','0','" + priority + "')";
                        res = sat.Execute_cmd(mq);
                        if (!res) { sat.Rollback(); return "Mail Sending Failed due to error in sending mail to '" + Multiemailid + "'"; }
                    }
                }

            }



            sat.Commit();
        }


        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;

            if (fileCollection.Count != 0)
            {
                if (!sourcepath.Equals("") && files.Count != 0)
                {
                    for (int i = 0; i < files.Count; i++)
                    {
                        try
                        {
                            if (fileCollection[i].ContentLength != 0)
                            {
                                string nana = fileCollection[i].FileName.ToString();
                                FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                                msg.Attachments.Add(new Attachment(fileStream, nana));
                            }
                        }
                        catch { }
                    }
                }
                else
                {
                    for (int i = 0; i < fileCollection.Count; i++)
                    {
                        try
                        {
                            if ((fileCollection[i].ContentLength != 0) && (fileCollection[i].ContentLength != null))
                            {

                                HttpPostedFileBase file = fileCollection[i];
                                string fileName2 = file.FileName;
                                string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                                string encpath2 = Convert_Stringto64(path2).ToString();
                                string finalpath2 = serverpath + encpath2;
                                file.SaveAs(finalpath2);
                                files.Add(finalpath2);
                                sourcepath = serverpath;

                            }
                        }
                        catch { }
                    }
                    for (int i = 0; i < files.Count; i++)
                    {

                        string nana = fileCollection[i].FileName.ToString();
                        FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                        msg.Attachments.Add(new Attachment(fileStream, nana));

                    }

                }
            }


            msg.Body = body;

            msg.IsBodyHtml = true;
            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }


        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }
    //in The Last
    public string Send_mail_Only(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
        dtmail = getdata(userCode, mq);
        if (dtmail.Rows.Count < 1)
        {
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            dtmail = getdata(userCode, mq);
        }

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
            //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
            cgname = GetCookie(MyGuid, "cg_com_name");
            //var client = new TcpClient();
            //client.Connect(smtpvalue, portvalue);    
        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {

            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }

        string[] bccarrr = bcc.Split(',');

        for (int i = 0; i < bccarrr.Length; i++)
        {
            string[] itarr = bccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[1].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalbcc.Trim().Equals("")) tlocalbcc = itarr[0].ToString().Trim();
                    else tlocalbcc = tlocalbcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[0].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";


        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;


            msg.Body = body;

            msg.IsBodyHtml = true;

            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }
        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public string Send_mail_Attch(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst, IList<HttpPostedFile> fileCollection)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
        dtmail = getdata(userCode, mq);
        if (dtmail.Rows.Count < 1)
        {
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            dtmail = getdata(userCode, mq);
        }

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
            //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
            cgname = GetCookie(MyGuid, "cg_com_name");
            //var client = new TcpClient();
            //client.Connect(smtpvalue, portvalue);    
        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {
            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }

        string[] bccarrr = bcc.Split(',');

        for (int i = 0; i < bccarrr.Length; i++)
        {
            string[] itarr = bccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[1].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalbcc.Trim().Equals("")) tlocalbcc = itarr[0].ToString().Trim();
                    else tlocalbcc = tlocalbcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[0].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";

        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;

            if (fileCollection.Count != 0)
            {
                if (!sourcepath.Equals("") && files.Count != 0)
                {
                    for (int i = 0; i < files.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            string nana = fileCollection[i].FileName.ToString();
                            FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                            msg.Attachments.Add(new Attachment(fileStream, nana));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < fileCollection.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            HttpPostedFile file = fileCollection[i];
                            string fileName2 = Path.GetFileName(file.FileName);
                            string path2 = cl_id + unitid + userid_mst + currdate + "_" + fileName2;
                            string encpath2 = Convert_Stringto64(path2).ToString();
                            string finalpath2 = serverpath + encpath2;
                            file.SaveAs(finalpath2);
                            files.Add(finalpath2);
                            sourcepath = serverpath;
                        }
                    }
                    for (int i = 0; i < files.Count; i++)
                    {

                        string nana = fileCollection[i].FileName.ToString();
                        FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                        msg.Attachments.Add(new Attachment(fileStream, nana));

                    }

                }
            }

            msg.Body = body;

            msg.IsBodyHtml = true;

            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }
        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public string Send_mail_kcfile(string userCode, string cl_id, string unitid, string mailto, string cc, string bcc, string body, string subject, string userid_mst, IList<KCFile> fileCollection)
    {

        // the below commented code is for help how to write code to use existing file 

        // How to Add File Colection in while callaing this send mail funtion
        //IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        //string cgname = (string)HttpContext.Current.Session[MyGuid + "_cg_com_name"];

        //string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/");
        //serverpath = serverpath + "ClientCreationList.pdf";
        //fileCollection = FileUpload1.PostedFiles;
        //fileCollection = sgen.GetFileCollection(new string[] { serverpath, serverpath });


        string tmailto = "", tmailcc = "", tmailbcc = "", tlocalto = "", tlocalcc = "", tlocalbcc = "", sourcepath = "";
        string smtpvalue = "", emailIdvalue = "", passwordvalue = "", coname = "", cgname = "";

        string currdate = server_datetime_dt(userCode).ToString("yyyy-MM-dd HH:mm:ss");
        List<string> files = new List<string>();
        int portvalue = 0;
        DataTable dtmail = new DataTable();
        //string mq = "select email as com_email,email_password as com_password,smtp as com_smtp,port_no as com_port from user_details where vch_num='" + userid_mst + "'";
        //dtmail = getdata(userCode, mq);
        //if (dtmail.Rows.Count < 1)
        //{
            mq = "select com_email,com_password,com_smtp,com_port,company_name from company_profile where company_profile_id='" + cl_id + "' and type='CP'";
            dtmail = getdata(userCode, mq);
        //}

        if (dtmail.Rows.Count > 0)
        {
            smtpvalue = Convert.ToString(dtmail.Rows[0]["com_Smtp"]);
            emailIdvalue = Convert.ToString(dtmail.Rows[0]["com_Email"]);
            passwordvalue = EncryptDecrypt.Decrypt(Convert.ToString(dtmail.Rows[0]["com_password"].ToString()));
            portvalue = Convert.ToInt32(dtmail.Rows[0]["com_Port"]);
            //coname = dtmail.Rows[0]["company_name"].ToString().Replace(" ", "");
            cgname = GetCookie(MyGuid, "cg_com_name");
            //var client = new TcpClient();
            //client.Connect(smtpvalue, portvalue);    
        }
        string serverpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cgname.Replace(" ", "") + "/");
        mailto = mailto.Replace(";", ","); cc = cc.Replace(";", ","); bcc = bcc.Replace(";", ",");

        string[] toarrr = mailto.Split(',');

        for (int i = 0; i < toarrr.Length; i++)
        {
            string[] itarr = toarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[1].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalto.Trim().Equals("")) tlocalto = itarr[0].ToString().Trim();
                    else tlocalto = tlocalto + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailto.Trim().Equals("")) tmailto = itarr[0].ToString().Trim();
                    else tmailto = tmailto + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string[] ccarrr = cc.Split(',');

        for (int i = 0; i < ccarrr.Length; i++)
        {
            string[] itarr = ccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');

            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[1].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalcc.Trim().Equals("")) tlocalcc = itarr[0].ToString().Trim();
                    else tlocalcc = tlocalcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailcc.Trim().Equals("")) tmailcc = itarr[0].ToString().Trim();
                    else tmailcc = tmailcc + "," + itarr[0].ToString().Trim();
                }

            }
        }

        string[] bccarrr = bcc.Split(',');

        for (int i = 0; i < bccarrr.Length; i++)
        {
            string[] itarr = bccarrr[i].Replace("<", "").Replace(">", "").Trim().Split(' ');
            if (itarr.Length == 1 && !ValidateEmail(itarr[0].ToString()) && !itarr[0].ToString().Equals("")) { return "'" + itarr[0].ToString() + "' is Not a Proper ID"; }
            if (itarr.Count() > 1)
            {

                if (ValidateEmail(itarr[1].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[1].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[1].ToString().Trim();
                }
                else
                {
                    if (tlocalbcc.Trim().Equals("")) tlocalbcc = itarr[0].ToString().Trim();
                    else tlocalbcc = tlocalbcc + "," + itarr[0].ToString().Trim();

                }
            }
            else
            {
                if (ValidateEmail(itarr[0].ToString().Trim()))
                {
                    if (tmailbcc.Trim().Equals("")) tmailbcc = itarr[0].ToString().Trim();
                    else tmailbcc = tmailbcc + "," + itarr[0].ToString().Trim();
                }

            }
        }


        string result = "Mail Sending Failed!";

        if (!tmailto.Trim().Equals("") || !tmailcc.Trim().Equals("") || !tmailbcc.Trim().Equals(""))
        {
            if (tmailto.Trim().Equals(""))
            {
                if (tmailcc.Trim().Equals(""))
                { tmailto = tmailbcc; tmailbcc = ""; }
                else { tmailto = tmailcc; tmailcc = ""; }
            }

            MailMessage msg = new MailMessage();
            msg.From = new MailAddress(emailIdvalue);
            if (!tmailcc.Equals("")) msg.CC.Add(tmailcc);
            if (!tmailbcc.Equals("")) msg.Bcc.Add(tmailbcc);

            msg.To.Add(tmailto);
            msg.Subject = subject;

            if (fileCollection.Count != 0)
            {
                if (!sourcepath.Equals("") && files.Count != 0)
                {
                    for (int i = 0; i < files.Count; i++)
                    {
                        if (fileCollection[i].ContentLength != 0)
                        {
                            string nana = fileCollection[i].FileName.ToString();
                            FileStream fileStream = new FileStream(files[i].ToString(), FileMode.Open, FileAccess.Read);
                            msg.Attachments.Add(new Attachment(fileStream, nana));
                        }
                    }
                }
                else
                {

                    for (int i = 0; i < fileCollection.Count; i++)
                    {
                        msg.Attachments.Add(new Attachment(fileCollection[i].InputStream, fileCollection[i].FileName.ToString()));
                    }
                }
            }

            msg.Body = body;

            msg.IsBodyHtml = true;

            try
            {
                SmtpClient smtp = new SmtpClient();
                smtp.Host = smtpvalue;
                System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
                NetworkCred.UserName = emailIdvalue;
                NetworkCred.Password = passwordvalue;
                smtp.UseDefaultCredentials = true;
                smtp.Credentials = NetworkCred;
                smtp.Port = portvalue;
                smtp.EnableSsl = true;

                smtp.Send(msg);
                msg.Dispose();
                result = "Mail has been send to the user successfully";
            }
            catch (Exception err)
            {
                result = "Mail Send in Local successfully But No Outside mail sent.";
            }
        }
        else { return "Mail Send in Local successfully But No Outside mail sent."; }

        return result;
    }

    public IList<HttpPostedFile> GetFileCollection(string[] filefullpath_comma_seprated)
    {
        IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        foreach (var serverpath in filefullpath_comma_seprated)
        {
            FileInfo info = new FileInfo(serverpath);
            byte[] bytes = System.IO.File.ReadAllBytes(serverpath);
            HttpPostedFile obj = ConstructHttpPostedFile(bytes, info.Name, GetContentType(info.Extension));
            fileCollection.Add(obj);
        }
        return fileCollection;

    }
    public IList<HttpPostedFile> GetFileCollection(string[] filefullpath_comma_seprated, FileUpload fileupload)
    {
        IList<HttpPostedFile> fileCollection = new List<HttpPostedFile>();
        fileCollection = fileupload.PostedFiles;
        foreach (var serverpath in filefullpath_comma_seprated)
        {
            FileInfo info = new FileInfo(serverpath);
            byte[] bytes = System.IO.File.ReadAllBytes(serverpath);
            HttpPostedFile obj = ConstructHttpPostedFile(bytes, info.Name, GetContentType(info.Extension));
            fileCollection.Add(obj);
        }
        return fileCollection;

    }
    public IList<HttpPostedFile> GetFileCollection(IList<HttpPostedFile> existingcollection, HttpPostedFile newfile)
    {
        existingcollection.Add(newfile);
        return existingcollection;

    }
    public HttpPostedFile ConstructHttpPostedFile(byte[] data, string filename, string contentType)
    {

        // Get the System.Web assembly reference
        Assembly systemWebAssembly = typeof(HttpPostedFileBase).Assembly;
        // Get the types of the two internal types we need
        Type typeHttpRawUploadedContent = systemWebAssembly.GetType("System.Web.HttpRawUploadedContent");
        Type typeHttpInputStream = systemWebAssembly.GetType("System.Web.HttpInputStream");

        // Prepare the signatures of the constructors we want.
        Type[] uploadedParams = { typeof(int), typeof(int) };
        Type[] streamParams = { typeHttpRawUploadedContent, typeof(int), typeof(int) };
        Type[] parameters = { typeof(string), typeof(string), typeHttpInputStream };

        // Create an HttpRawUploadedContent instance
        object uploadedContent = typeHttpRawUploadedContent
          .GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, uploadedParams, null)
          .Invoke(new object[] { data.Length, data.Length });

        // Call the AddBytes method
        typeHttpRawUploadedContent
          .GetMethod("AddBytes", BindingFlags.NonPublic | BindingFlags.Instance)
          .Invoke(uploadedContent, new object[] { data, 0, data.Length });

        // This is necessary if you will be using the returned content (ie to Save)
        typeHttpRawUploadedContent
          .GetMethod("DoneAddingBytes", BindingFlags.NonPublic | BindingFlags.Instance)
          .Invoke(uploadedContent, null);

        // Create an HttpInputStream instance
        object stream = (Stream)typeHttpInputStream
          .GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, streamParams, null)
          .Invoke(new object[] { uploadedContent, 0, data.Length });

        // Create an HttpPostedFile instance
        HttpPostedFile postedFile = (HttpPostedFile)typeof(HttpPostedFile)
          .GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, parameters, null)
          .Invoke(new object[] { filename, contentType, stream });

        return postedFile;
    }

    public string GetContentType(string fname)
    {
        // set a default mimetype if not found.
        string contentType = "application/octet-stream";

        try
        {
            // get the registry classes root
            RegistryKey classes = Registry.ClassesRoot;

            // find the sub key based on the file extension
            RegistryKey fileClass = classes.OpenSubKey(Path.GetExtension(fname));
            contentType = fileClass.GetValue("Content Type").ToString();
        }
        catch { }

        return contentType;
    }

    public class MemoryPostedFile : HttpPostedFileBase
    {
        private readonly byte[] fileBytes;
        new string FileName = "";
        new MemoryStream InputStream = null;

        public MemoryPostedFile(byte[] fileBytes, string fileName = null)
        {
            this.fileBytes = fileBytes;
            this.FileName = fileName;
            this.InputStream = new MemoryStream(fileBytes);
        }

        //  public override string FileName { get; }

        //public override Stream InputStream { get; }
    }
    public void SetSession(string MyGuid, string SessionName, object value)
    {
        HttpContext.Current.Session[MyGuid + "_" + SessionName] = value;
    }
    public object GetSession(string MyGuid, string SessionName)
    {
        return HttpContext.Current.Session[MyGuid + "_" + SessionName];
    }
    public void SetCookie(string MyGuid, string name, string value)
    {
        //Writing Multiple values in single cookie
        HttpContext.Current.Response.Cookies.Remove(MyGuid + "_" + name);
        HttpCookie hc = new HttpCookie(MyGuid + "_" + name);
        hc.Value = value;
        HttpContext.Current.Response.Cookies.Add(hc);
    }
    public string GetCookie(string MyGuid, string name)
    {
        string val = "";
        if (HttpContext.Current.Request.Cookies[MyGuid + "_" + name] != null)
        {
            val = HttpContext.Current.Request.Cookies[MyGuid + "_" + name].Value.ToString();
        }
        return val;
    }



    //public string getcookie(string name)
    //{
    //    string val = "";
    //    if (HttpContext.Current.Request.Cookies[name] != null)
    //    {
    //        val = HttpContext.Current.Request.Cookies[name].Value.ToString();
    //    }
    //    return val;
    //}

    //public void setcookie(string name, string value)
    //{
    //    //Writing Multiple values in single cookie
    //    HttpContext.Current.Response.Cookies.Remove(name);
    //    HttpCookie hc = new HttpCookie(name);

    //    hc.Value = value;
    //    HttpContext.Current.Response.Cookies.Add(hc);
    //}



    public void Expireall()
    {

        if (HttpContext.Current != null)
        {
            int cookieCount = HttpContext.Current.Request.Cookies.Count;
            for (var i = 0; i < cookieCount; i++)
            {
                var cookie = HttpContext.Current.Request.Cookies[i];
                if (cookie != null)
                {
                    var expiredCookie = new HttpCookie(cookie.Name)
                    {
                        Expires = DateTime.Now.AddDays(-1),
                        Domain = cookie.Domain
                    };
                    HttpContext.Current.Response.Cookies.Add(expiredCookie); // overwrite it
                }
            }

            // clear cookies server side
            HttpContext.Current.Request.Cookies.Clear();

        }

    }

    public void Alter_Table(string usercode, string clientid_mst, string unitid_mst, string userid)
    {

        mq = @"create or replace TYPE DATE_ARRAY is table of date;";
        execute_cmd(usercode, mq);

        mq = @"create or replace TYPE TEMP_DATA FORCE AS OBJECT
 (
     temporary_data NVARCHAR2(4000)
 )";
        execute_cmd(usercode, mq);

        mq = @"create or replace TYPE TEMP_DATA_TABLE FORCE AS TABLE OF temp_data; ";
        execute_cmd(usercode, mq);

        mq = @"create or replace TYPE T_STRING_AGG  AS OBJECT
 (
   g_string  VARCHAR2(32767),

   STATIC FUNCTION ODCIAggregateInitialize(sctx  IN OUT  t_string_agg)
 
     RETURN NUMBER,

   MEMBER FUNCTION ODCIAggregateIterate(self   IN OUT  t_string_agg,
                                        value  IN      VARCHAR2)
 
      RETURN NUMBER,

   MEMBER FUNCTION ODCIAggregateTerminate(self         IN   t_string_agg,
                                          returnValue  OUT  VARCHAR2,
                                          flags        IN   NUMBER)
 
     RETURN NUMBER,

   MEMBER FUNCTION ODCIAggregateMerge(self  IN OUT  t_string_agg,
                                      ctx2  IN      t_string_agg)
 
     RETURN NUMBER
 ); ";
        execute_cmd(usercode, mq);

        mq = @"create or replace TYPE BODY t_string_agg IS
  STATIC FUNCTION ODCIAggregateInitialize(sctx  IN OUT  t_string_agg)
    RETURN NUMBER IS
  BEGIN
    sctx := t_string_agg(NULL);
    RETURN ODCIConst.Success;
  END;

  MEMBER FUNCTION ODCIAggregateIterate(self   IN OUT  t_string_agg,
                                       value  IN      VARCHAR2 )
    RETURN NUMBER IS
  BEGIN
    SELF.g_string := self.g_string || ',' || value;
    RETURN ODCIConst.Success;
  END;

  MEMBER FUNCTION ODCIAggregateTerminate(self         IN   t_string_agg,
                                         returnValue  OUT  VARCHAR2,
                                         flags        IN   NUMBER)
    RETURN NUMBER IS
  BEGIN
    returnValue := SUBSTR(SELF.g_string, 2);
    RETURN ODCIConst.Success;
  END;

  MEMBER FUNCTION ODCIAggregateMerge(self  IN OUT  t_string_agg,
                                     ctx2  IN      t_string_agg)
    RETURN NUMBER IS
  BEGIN
    SELF.g_string := SELF.g_string || ctx2.g_string;
    RETURN ODCIConst.Success;
  END;
END;";
        execute_cmd(usercode, mq);

        #region old code
        //        //3may Reena
        //        execute_cmd(usercode, "ALTER TABLE `student_result` ADD `GradePostion_Per` DECIMAL(18,2) NOT NULL AFTER `Promting_perc`;");
        //        execute_cmd(usercode, @"ALTER TABLE student_receipt_detail
        //                        ADD COLUMN rec_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT FIRST,
        //                        ADD COLUMN Student_id VARCHAR(6) NOT NULL,
        //                        ADD COLUMN created_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //                        ADD COLUMN vch_num VARCHAR(6) NOT NULL,
        //                        ADD COLUMN vch_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //                        ADD COLUMN type VARCHAR(2) NOT NULL,
        //                        ADD COLUMN client_id VARCHAR(100) NOT NULL,
        //                        ADD COLUMN client_unit_id VARCHAR(100) NOT NULL,
        //                        ADD COLUMN ent_by VARCHAR(20) NOT NULL,
        //                        ADD COLUMN ent_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //                        ADD COLUMN edit_by VARCHAR(20) NOT NULL,
        //                        ADD COLUMN edit_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;`; ");

        //        //3may Reena


        //        //8May

        //        execute_cmd(usercode, "ALTER TABLE `add_class` ADD `Sequence` INT(2) NOT NULL AFTER `class`");
        //        execute_cmd(usercode, "ALTER TABLE `student_result` ADD `pro_per` INT(2) NOT NULL AFTER `IsNextClass`");
        //        //8May

        //        //9may
        //        execute_cmd(usercode, "ALTER TABLE `master_setting` CHANGE `IsMaleSection` `SectionType` VARCHAR(15) NOT NULL");

        //        //10may
        //        execute_cmd(usercode, "ALTER TABLE `student_detail` ADD `StudentType` VARCHAR(15) NOT NULL AFTER `rec_id`");
        //        execute_cmd(usercode, "ALTER TABLE `master_setting` ADD `FemaleRatio` INT(5) NOT NULL AFTER `SectionType`, ADD `MaleRatio` INT(5) NOT NULL AFTER `FemaleRatio`");


        //        //19 may
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `ADHAAR_ID` `ADHAAR_ID` VARCHAR(16) NULL DEFAULT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `f_adhaar_id` `f_adhaar_id` VARCHAR(16) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `m_adhaar_id` `m_adhaar_id` VARCHAR(16) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `g_adhaar_id` `g_adhaar_id` VARCHAR(16) NOT NULL");


        //        //21 may
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `DOB` `DOB` TIMESTAMP NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `f_dob` `f_dob` TIMESTAMP NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `m_dob` `m_dob` TIMESTAMP NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `g_dob` `g_dob` TIMESTAMP NOT NULL");

        //        //21 may 

        //        //23 may

        //        execute_cmd(usercode, "ALTER TABLE `student_receipt_detail` ADD `Section_Id` VARCHAR(15) NOT NULL AFTER `Class_Id`");
        //        execute_cmd(usercode, "ALTER TABLE `student_receipt_detail` CHANGE `Receipt_Date` `Receipt_Date` TIMESTAMP NOT NULL");
        //        //28 may
        //        execute_cmd(usercode, @"ALTER TABLE teacher_subject
        //ADD COLUMN rec_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT FIRST,
        //ADD COLUMN created_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //ADD COLUMN vch_num VARCHAR(6) NOT NULL,
        //ADD COLUMN vch_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //ADD COLUMN client_id VARCHAR(100) NOT NULL,
        //ADD COLUMN client_unit_id VARCHAR(100) NOT NULL,
        //ADD COLUMN ent_by VARCHAR(20) NOT NULL,
        //ADD COLUMN ent_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //ADD COLUMN edit_by VARCHAR(20) NOT NULL,
        //ADD COLUMN edit_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP; ");
        //        //reena
        //        execute_cmd(usercode, "CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_student_attendance` AS select (case when ((a.First_Half,a.`Second_Half`) = 'PP') then 1 else (case when ((substr(concat(`a`.`First_Half`,`a`.`Second_Half`),1,1) = 'P') or (substr(concat(`a`.`First_Half`,`a`.`Second_Half`),2,1) = 'P')) then 0.5 else 0 end) end) AS `Presents`,(case when (concat(`a`.`First_Half`,`a`.`Second_Half`) = 'AA') then 1 else (case when ((substr(concat(`a`.`First_Half`,`a`.`Second_Half`),1,1) = 'A') or (substr(concat(`a`.`First_Half`,`a`.`Second_Half`),2,1) = 'A')) then 0.5 else 0 end) end) AS `Absent`,(case when (concat(`a`.`First_Half`,`a`.`Second_Half`) = 'LL') then 1 else (case when ((substr(concat(`a`.`First_Half`,`a`.`Second_Half`),1,1) = 'L') or (substr(concat(`a`.`First_Half`,`a`.`Second_Half`),2,1) = 'L')) then 0.5 else 0 end) end) AS `Leaves`,(case when (concat(`a`.`First_Half`,`a`.`Second_Half`) = 'WW') then 1 else (case when ((substr(concat(`a`.`First_Half`,`a`.`Second_Half`),1,1) = 'W') or (substr(concat(`a`.`First_Half`,`a`.`Second_Half`),2,1) = 'W')) then 0.5 else 0 end) end) AS `Wkoff`,(case when (concat(`a`.`First_Half`,`a`.`Second_Half`) = 'HH') then 1 else (case when ((substr(concat(`a`.`First_Half`,`a`.`Second_Half`),1,1) = 'H') or (substr(concat(`a`.`First_Half`,`a`.`Second_Half`),2,1) = 'H')) then 0.5 else 0 end) end) AS `Holidays`,`a`.`Rec_Id` AS `Rec_Id`,`a`.`Month_Id` AS `Month_Id`,`a`.`Month_Name` AS `Month_Name`,`a`.`Atten_Date` AS `Atten_Date`,`a`.`Academic_year_Id` AS `Academic_year_Id`,`a`.`First_Half` AS `First_Half`,`a`.`Second_Half` AS `Second_Half`,`a`.`Ent_By` AS `Ent_By`,`a`.`Ent_Date` AS `Ent_Date`,`a`.`Edit_by` AS `Edit_by`,`a`.`Edit_Date` AS `Edit_Date`,`a`.`Created_date` AS `Created_date`,`a`.`Vch_num` AS `Vch_num`,`a`.`Vch_date` AS `Vch_date`,`a`.`Type` AS `Type`,`a`.`Client_id` AS `Client_id`,`a`.`Client_unit_id` AS `Client_unit_id`,`a`.`Class_id` AS `Class_id`,`a`.`Section_Id` AS `Section_Id`,`b`.`RegNumber` AS `regnumber`,`a`.`Reg_id` AS `Reg_id`,`a`.`Roll_no` AS `Roll_no` from (`student_attendance` `a` join `user_details` `b`) where ((`a`.`Reg_id` = `b`.`RegNumber`) and (`a`.`Type` = 'STD') and (`b`.`type` = 'STD'))");
        //        execute_cmd(usercode, "CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_monyhly_attendance` AS select `vw_student_attendance`.`Reg_id` AS `Reg_id`,`vw_student_attendance`.`Roll_no` AS `Roll_no`,`vw_student_attendance`.`Month_Id` AS `Month_Id`,`vw_student_attendance`.`Month_Name` AS `Month_Name`,`vw_student_attendance`.`Academic_year_Id` AS `Academic_year_Id`,`vw_student_attendance`.`Client_id` AS `Client_id`,`vw_student_attendance`.`Client_unit_id` AS `Client_unit_id`,`vw_student_attendance`.`Class_id` AS `Class_id`,`vw_student_attendance`.`Section_Id` AS `section_id`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '1'),`vw_student_attendance`.`First_Half`,'-')) AS `F1`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '1'),`vw_student_attendance`.`Second_Half`,'-')) AS `S1`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '2'),`vw_student_attendance`.`First_Half`,'-')) AS `F2`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '2'),`vw_student_attendance`.`Second_Half`,'-')) AS `S2`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '3'),`vw_student_attendance`.`First_Half`,'-')) AS `F3`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '3'),`vw_student_attendance`.`Second_Half`,'-')) AS `S3`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '4'),`vw_student_attendance`.`First_Half`,'-')) AS `F4`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '4'),`vw_student_attendance`.`Second_Half`,'-')) AS `S4`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '5'),`vw_student_attendance`.`First_Half`,'-')) AS `F5`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '5'),`vw_student_attendance`.`Second_Half`,'-')) AS `S5`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '6'),`vw_student_attendance`.`First_Half`,'-')) AS `F6`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '6'),`vw_student_attendance`.`Second_Half`,'-')) AS `S6`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '7'),`vw_student_attendance`.`First_Half`,'-')) AS `F7`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '7'),`vw_student_attendance`.`Second_Half`,'-')) AS `S7`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '8'),`vw_student_attendance`.`First_Half`,'-')) AS `F8`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '8'),`vw_student_attendance`.`Second_Half`,'-')) AS `S8`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '9'),`vw_student_attendance`.`First_Half`,'-')) AS `F9`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '9'),`vw_student_attendance`.`Second_Half`,'-')) AS `S9`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '10'),`vw_student_attendance`.`First_Half`,'-')) AS `F10`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '10'),`vw_student_attendance`.`Second_Half`,'-')) AS `S10`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '11'),`vw_student_attendance`.`First_Half`,'-')) AS `F11`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '11'),`vw_student_attendance`.`Second_Half`,'-')) AS `S11`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '12'),`vw_student_attendance`.`First_Half`,'-')) AS `F12`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '12'),`vw_student_attendance`.`Second_Half`,'-')) AS `S12`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '13'),`vw_student_attendance`.`First_Half`,'-')) AS `F13`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '13'),`vw_student_attendance`.`Second_Half`,'-')) AS `S13`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '14'),`vw_student_attendance`.`First_Half`,'-')) AS `F14`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '14'),`vw_student_attendance`.`Second_Half`,'-')) AS `S14`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '15'),`vw_student_attendance`.`First_Half`,'-')) AS `F15`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '15'),`vw_student_attendance`.`Second_Half`,'-')) AS `S15`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '16'),`vw_student_attendance`.`First_Half`,'-')) AS `F16`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '16'),`vw_student_attendance`.`Second_Half`,'-')) AS `S16`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '17'),`vw_student_attendance`.`First_Half`,'-')) AS `F17`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '17'),`vw_student_attendance`.`Second_Half`,'-')) AS `S17`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '18'),`vw_student_attendance`.`First_Half`,'-')) AS `F18`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '18'),`vw_student_attendance`.`Second_Half`,'-')) AS `S18`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '19'),`vw_student_attendance`.`First_Half`,'-')) AS `F19`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '19'),`vw_student_attendance`.`Second_Half`,'-')) AS `S19`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '20'),`vw_student_attendance`.`First_Half`,'-')) AS `F20`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '20'),`vw_student_attendance`.`Second_Half`,'-')) AS `S20`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '21'),`vw_student_attendance`.`First_Half`,'-')) AS `F21`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '21'),`vw_student_attendance`.`Second_Half`,'-')) AS `S21`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '22'),`vw_student_attendance`.`First_Half`,'-')) AS `F22`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '22'),`vw_student_attendance`.`Second_Half`,'-')) AS `S22`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '23'),`vw_student_attendance`.`First_Half`,'-')) AS `F23`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '23'),`vw_student_attendance`.`Second_Half`,'-')) AS `S23`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '24'),`vw_student_attendance`.`First_Half`,'-')) AS `F24`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '24'),`vw_student_attendance`.`Second_Half`,'-')) AS `S24`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '25'),`vw_student_attendance`.`First_Half`,'-')) AS `F25`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '25'),`vw_student_attendance`.`Second_Half`,'-')) AS `S25`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '26'),`vw_student_attendance`.`First_Half`,'-')) AS `F26`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '26'),`vw_student_attendance`.`Second_Half`,'-')) AS `S26`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '27'),`vw_student_attendance`.`First_Half`,'-')) AS `F27`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '27'),`vw_student_attendance`.`Second_Half`,'-')) AS `S27`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '28'),`vw_student_attendance`.`First_Half`,'-')) AS `F28`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '28'),`vw_student_attendance`.`Second_Half`,'-')) AS `S28`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '29'),`vw_student_attendance`.`First_Half`,'-')) AS `F29`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '29'),`vw_student_attendance`.`Second_Half`,'-')) AS `S29`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '30'),`vw_student_attendance`.`First_Half`,'-')) AS `F30`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '30'),`vw_student_attendance`.`Second_Half`,'-')) AS `S30`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '31'),`vw_student_attendance`.`First_Half`,'-')) AS `F31`,max(if((dayofmonth(`vw_student_attendance`.`Atten_Date`) = '31'),`vw_student_attendance`.`Second_Half`,'-')) AS `S31` from `vw_student_attendance` group by `vw_student_attendance`.`Month_Id`,`vw_student_attendance`.`Roll_no`,`vw_student_attendance`.`Reg_id`");
        //        //21 August shivam
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_Sch_Name` `Print_Sch_Name` VARCHAR(80) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_Branch_Code` `Print_Branch_Code` VARCHAR(80) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_Year` `Print_Year` VARCHAR(80) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_Month` `Print_Month` VARCHAR(80) NOT NULL");


        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_Date` `Print_Date` VARCHAR(80) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_Min` `Print_Min` VARCHAR(80) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_Country` `Print_Country` VARCHAR(80) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_State` `Print_State` VARCHAR(80) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_City` `Print_City` VARCHAR(80) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Print_StartNo` `Print_StartNo` VARCHAR(80) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `receipt_number` CHANGE `Receipt_No` `Receipt_No` VARCHAR(250) NOT NULL");

        //        //13sep reena
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `sibling1_rollno` `sibling1_rollno` VARCHAR(250) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `sibling2_rollno` `sibling2_rollno` VARCHAR(250) NOT NULL");

        //        //14sep rena

        //        execute_cmd(usercode, "ALTER TABLE `enx_tab2` ADD `col9` VARCHAR(30) NOT NULL AFTER `col8`, ADD `col10` VARCHAR(30) NOT NULL AFTER `col9`");
        //        execute_cmd(usercode, "ALTER TABLE `enx_tab2` ADD `col11` VARCHAR(30) NOT NULL AFTER `col10`");
        //        execute_cmd(usercode, "ALTER TABLE `enx_tab2` ADD `col12` VARCHAR(2) NOT NULL AFTER `col11`");
        //        execute_cmd(usercode, "ALTER TABLE `enx_tab2`  ADD `col13` VARCHAR(300) NOT NULL  AFTER `col12`");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` CHANGE `sibling2_rollno` `sibling2_rollno` VARCHAR(250) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` CHANGE `sibling1_reg_no` `sibling1_reg_no` VARCHAR(250) NOT NULL");

        //        //24 sep reena
        //        execute_cmd(usercode, "alter table receipt_number add Print_Name varchar(20) NOT NULL,add Req_Name tinyint(1), add Sep_Name varchar(1), add Position_Name int(11), add Print_RecId varchar(20) NOT NULL, add Req_RecId tinyint(1)	, add Sep_RecId varchar(1), add Position_Recid int(11), add Print_DOB varchar(20) NOT NULL, add Req_DOB tinyint(1)	, add Sep_DOB varchar(1), add Position_DOB int(11)");

        //        //29 sep reena
        //        execute_cmd(usercode, "ALTER TABLE `school_fee_type` ADD `master_type` VARCHAR(1) NOT NULL AFTER `type`");
        //        execute_cmd(usercode, "ALTER TABLE `school_fee_type` CHANGE `type` `type` VARCHAR(3) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `school_fee_structure` ADD `valid_From` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `edit_date`, ADD `valid_To` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `valid_From`");
        //        execute_cmd(usercode, "ALTER TABLE `school_fee_structure` ADD `master_type` VARCHAR(1) NOT NULL AFTER `type`");
        //        //1 oct reena
        //        execute_cmd(usercode, "ALTER TABLE `student_receipt_detail` ADD `Ref_code` VARCHAR(6) NOT NULL AFTER `Remarks`, ADD `Ref_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `Ref_code`");
        //        //5 oct
        //        execute_cmd(usercode, "ALTER TABLE `holiday_master` CHANGE `Holiday_Id` `Holiday_Id` VARCHAR(3) NOT NULL");
        //        //8 oct reena
        //        execute_cmd(usercode, "ALTER TABLE `enx_tab2` ADD `col14` VARCHAR(250) NOT NULL AFTER `col12`, ADD `col15` VARCHAR(250) NOT NULL AFTER `col14`");

        //        //11 oct reena
        //        execute_cmd(usercode, "ALTER TABLE `enx_tab2` ADD `col16` TEXT NOT NULL AFTER `col15`");
        //        execute_cmd(usercode, "ALTER TABLE `master_setting` ADD `Status` VARCHAR(3) NOT NULL AFTER `MaleRatio`, ADD `Inactive_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `Status`");
        //        execute_cmd(usercode, "ALTER TABLE `add_class` ADD `Inactive_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `edit_date`, ADD `Status` VARCHAR(3) NOT NULL AFTER `Inactive_date`");

        //        //reena12oct
        //        execute_cmd(usercode, "ALTER TABLE `school_fee_type` ADD `Inactive_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `edit_date`, " +
        //            "ADD `Status` VARCHAR(3) NOT NULL AFTER `Inactive_date`;");

        //        //reena 13 oct
        //        #region Financial Category
        //        string found = "";
        //        found = getstring(usercode, "select * from master_setting where type='AGM'");
        //        if (found == "")
        //        {
        //            execute_cmd(usercode, "insert into master_setting (master_id,master_name,master_type,vch_num,type) values(1,'Owners' Capital','1000000','000001','AGM')");
        //            execute_cmd(usercode, "insert into master_setting (master_id,master_name,master_type,vch_num,type) values(2,'Liabilities','2000000','000002','AGM')");
        //            execute_cmd(usercode, "insert into master_setting (master_id,master_name,master_type,vch_num,type) values(3,'Assets','3000000','000003','AGM')");
        //            execute_cmd(usercode, "insert into master_setting (master_id,master_name,master_type,vch_num,type) values(4,'Income','4000000','000004','AGM')");
        //            execute_cmd(usercode, "insert into master_setting (master_id,master_name,master_type,vch_num,type) values(5,'Expenses','5000000','000005','AGM')");
        //            execute_cmd(usercode, "insert into master_setting (master_id,master_name,master_type,vch_num,type) values(6,'Other Comprehensive Income','6000000','000006','AGM')");
        //        }

        //        #endregion
        //        //16oct reena
        //        execute_cmd(usercode, @"
        //CREATE TABLE `Ledger_master` (
        // `rec_id` int(11) NOT NULL AUTO_INCREMENT,

        // `Ledger_Name` varchar(100) NOT NULL,
        // `Ledger_abb` varchar(20) NOT NULL,
        // `Group_Code` int(13) NOT NULL,

        // `created_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // `vch_num` varchar(6) NOT NULL,
        // `vch_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // `type` varchar(3) NOT NULL,
        // `client_id` varchar(100) NOT NULL,
        // `client_unit_id` varchar(100) NOT NULL,
        // `ent_by` varchar(20) NOT NULL,
        // `ent_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // `edit_by` varchar(20) NOT NULL,
        // `edit_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // PRIMARY KEY(`rec_id`)
        //) ENGINE = InnoDB DEFAULT CHARSET = latin1
        //");

        //        //23oct reena
        //        execute_cmd(usercode, @"CREATE TABLE `name`.`opening_fee` ( `Rec_Id` INT(11) NOT NULL AUTO_INCREMENT , `RegNo` VARCHAR(100) NOT NULL , `class_id` VARCHAR(3) NOT NULL  
        //, `academic_year_id` VARCHAR(3) NOT NULL, `Frequency_Id` VARCHAR(3) NOT NULL, frequencyName VARCHAR(15) NOT NULL, `FeeHead_id` VARCHAR(3) NOT NULL,
        //`Feetype_id` VARCHAR(3) NOT NULL, `Fee_amount` DECIMAL(18, 3) NOT NULL, `Paid_amount` DECIMAL(18, 3) NOT NULL, `opening_amount` DECIMAL(18, 3) NOT NULL,
        //From_Date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, `created_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //`vch_num` VARCHAR(6) NOT NULL, `vch_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, `type` VARCHAR(3) NOT NULL,
        // `client_id` VARCHAR(100) NOT NULL, `client_unit_id` VARCHAR(100) NOT NULL, `ent_by` VARCHAR(20) NOT NULL,
        //`ent_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, `edit_by` VARCHAR(20) NOT NULL,
        // `edit_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(`Rec_Id`)
        //) ENGINE = InnoDB DEFAULT CHARSET = latin1");

        //        //reena 25oct
        //        execute_cmd(usercode, "ALTER TABLE `opening_fee` ADD `section_id` INT(3) NOT NULL AFTER `class_id`;");

        //        //reena 30oct
        //        execute_cmd(usercode, "ALTER TABLE `student_result` CHANGE `Reg_no` `Reg_no` VARCHAR(200) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL");

        //        //2nov reena        
        //        execute_cmd(usercode, "ALTER TABLE `student_result` CHANGE `Marks` `Marks` VARCHAR(10) NOT NULL;");

        //        //7dec reeeeeeeeeennaaaaaaaaaaaaaaaaaaaaaaaaaaaa



        //        // 13dec 18 reena 

        //        execute_cmd(usercode, "ALTER TABLE `answers` CHANGE `QUES_ID` `QUES_ID` VARCHAR(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;");

        //        //9jan 2019 reena
        //        execute_cmd(usercode, "ALTER TABLE `enx_tab` ADD `col9` VARCHAR(20) NOT NULL AFTER `col8`, ADD `col10` VARCHAR(20) NOT NULL AFTER `col9`, ADD `col11` VARCHAR(20) NOT NULL AFTER `col10`, ADD `col12` VARCHAR(20) NOT NULL AFTER `col11`, ADD `col13` VARCHAR(20) NOT NULL AFTER `col12`;");

        //        //14jan 2019 reeeenaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `eff_dt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `emp_id`;");



        //        //kashish 16jan2019
        //        execute_cmd(usercode, "update menus set m_link='../Mst/master_ctrl' where m_id in ('7004.1.7','7004.1.8','7004.1.3','7004.1.9','7004.1.4','7004.1.6'," +
        //            "'7004.12','4007.2','4007.4','4007.1','4007.5','4007.7','4007.8','4007.9','4007.10','1008.9','1008.10', '9003.3.4','9003.3.5','12003.5','12003.6'," +
        //            "'12003.1','12003.2','12003.3','12003.4','9003.3.1','9003.3.2','16000.1.1','16000.1.4','16000.1.5','21001.1','26001.1','27008','8001.3')");

        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `DOB` `DOB` DATETIME NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `emp_master` ADD `act_salary` VARCHAR(12) NOT NULL AFTER `pf_limit`, ADD `act_hrs` VARCHAR(10) NOT NULL AFTER `act_salary`;");
        //        execute_cmd(usercode, "ALTER TABLE `company_PROFILE` CHANGE `Company_Pincode` `Company_Pincode` VARCHAR(6) NOT NULL;");

        //        //reena 17 jan 2019 icon        

        //        //execute_cmd(usercode, "insert into menus(m_id, m_name, m_link, m_level, m_icon, m_css, m_submenu, m_module1, m_module2, m_module3, u_id, m_order, " +
        //        //     "m_default)values ('7021.1','Weekly Off','../Education/teac_wo','3','','',0,'-','stch','edumain','5','89.01',1)");

        //        //execute_cmd(usercode, "insert into menus(m_id, m_name, m_link, m_level, m_icon, m_css, m_submenu, m_module1, m_module2, m_module3, u_id, m_order, " +
        //        //    "m_default)values ('7021.5','Holiday Master','../Education/teac_hm','3','','',0,'-','stch','edumain','5','89.02',1)");

        //        //execute_cmd(usercode, "insert into menus(m_id, m_name, m_link, m_level, m_icon, m_css, m_submenu, m_module1, m_module2, m_module3, u_id, m_order, " +
        //        //    "m_default)values ('7021.6','Teacher Attendance','../Education/student_attendence','3','','',0,'-','stch','edumain','5','89.03',1)");

        //        //execute_cmd(usercode, "insert into menus(m_id, m_name, m_link, m_level, m_icon, m_css, m_submenu, m_module1, m_module2, m_module3, u_id, m_order, " +
        //        //    "m_default)values ('7021.7','Leave Apply','../Education/leaveapplication','3','','',0,'-','stch','edumain','5','89.04',1)");

        //        //reena

        //        execute_cmd(usercode, "CREATE INDEX idx_class on add_class(add_class_id, type, client_id, client_unit_id)");
        //        execute_cmd(usercode, "CREATE INDEX idx_master on master_setting(master_id, type, client_id, client_unit_id)");
        //        execute_cmd(usercode, "CREATE INDEX idx_user on user_details(RegNumber, type)");
        //        execute_cmd(usercode, "CREATE INDEX idx_student on user_details(Academic_year_Id, type, RegNumber, client_id, client_unit_id)");

        //        //kashish 28jan 2019
        //        execute_cmd(usercode, "update menus set m_link = '../Billing/billing_master' where m_id = '28004.6'");
        //        execute_cmd(usercode, "update menus set m_link = '../Billing/itemservice' where m_id = '17001.3'");
        //        execute_cmd(usercode, "update menus set m_link='../Production/machine_brkdwn' where m_id='39001.6'");

        //        execute_cmd(usercode, "update menus set m_link = '../Mst/master_ctrl' where m_id = '28004.5'");
        //        execute_cmd(usercode, "update menus set m_link = '../Billing/itemservice' where m_id = '28004.1'");

        //        execute_cmd(usercode, "update menus set m_link='../Production/machine_brkdwn' where m_id='38001.3'");
        //        execute_cmd(usercode, "update menus set m_name = 'Plant Maintenance' where m_id = '38000'");
        //        execute_cmd(usercode, "update menus set m_name = 'Maintenance Master' where m_id = '38001'");
        //        execute_cmd(usercode, "ALTER TABLE `emp_salary_process` ADD `bal_adv` VARCHAR(10) NOT NULL AFTER `ot_hrs`;");


        //        //reena 30jan 2019
        //        execute_cmd(usercode, @"CREATE TABLE `pattern_gen` (
        // `rec_id` int(11) NOT NULL AUTO_INCREMENT,
        // `vch_num` varchar(6) NOT NULL,
        // `vch_date` datetime NOT NULL,
        // `client_id` varchar(100) NOT NULL,
        // `client_unit_id` varchar(100) NOT NULL,
        // `ent_by` varchar(20) NOT NULL,
        // `ent_date` datetime NOT NULL,
        // `edit_by` varchar(20) NOT NULL,
        // `edit_date` datetime NOT NULL,
        // `Type` varchar(10) NOT NULL,
        // `created_date` datetime NOT NULL,
        // `content` varchar(100) NOT NULL,
        // `print_field` varchar(100) NOT NULL,
        // `required` varchar(1) NOT NULL,
        // `seprator` varchar(1) NOT NULL,
        // `position` varchar(3) NOT NULL,
        // `type_desc` varchar(100) NOT NULL,
        // `module_id` varchar(10) NOT NULL,
        // PRIMARY KEY(`rec_id`)
        //) ENGINE = InnoDB AUTO_INCREMENT = 146 DEFAULT CHARSET = latin1");

        //        string xDate = server_datetime(usercode);

        //        //reena 18feb2019
        //        #region Receipt No


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','School Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Branch Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Branch Code','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Code' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Year','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Month','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Date','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Country','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Country' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','State','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='State' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','City','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='City' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Minimum Digit Required','edumain' ,'Y' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Start Number','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Class','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Class' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Section','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Section' and module_id='edumain')");


        //        #endregion

        //        #region Roll No
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date(''" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','School Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Branch Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Branch Code','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Code' and module_id='edumain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Year','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='edumain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Month','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Date','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Country','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Country' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','State','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='State' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','City','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='City' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Class','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Class' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Section','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Section' and module_id='edumain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Minimum Digit Required','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Start Number','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='edumain')");

        //        #endregion

        //        #region Reg No
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','School Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Branch Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Branch Code','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Code' and module_id='edumain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Year','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='edumain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Month','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Date','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Country','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Country' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','State','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='State' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','City','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='City' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Class','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Class' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Section','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Section' and module_id='edumain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Minimum Digit Required','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Start Number','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='edumain')");

        //        #endregion

        //        #region USERID
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','First Name','edumain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='USE' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='First Name' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','DOB','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='USE' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='DOB' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','Academic Year','edumain','N' from dual where NOT EXISTS(select content from pattern_gen where type='USE' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Academic Year' and module_id='edumain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','Record Id','edumain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='USE' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Record Id' and module_id='edumain')");

        //        #endregion


        //        execute_cmd(usercode, "UPDATE  menus SET m_link = '../Education/fee_receipt' WHERE m_id = '7019.6'");

        //        //kashish 31jan 2019
        //        execute_cmd(usercode, "ALTER TABLE `emp_master` ADD `act_salary` VARCHAR(12) NOT NULL, ADD `act_hrs` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `emp_master` ADD `pension_no` VARCHAR(20) NOT NULL, ADD `latlng` VARCHAR(80) NOT NULL, ADD `addr` VARCHAR(100) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `DOB` `DOB` DATETIME NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `company_PROFILE` CHANGE `Company_Pincode` `Company_Pincode` VARCHAR(6) NOT NULL; ");
        //        execute_cmd(usercode, "ALTER TABLE `emp_master` ADD `off_email` VARCHAR(50) NOT NULL, ADD `off_contact` VARCHAR(10) NOT NULL;");

        //        //kashish 8feb2019       

        //        execute_cmd(usercode, "update menus set m_link = '../Fam/fa_major_head' where m_id = '29001.1'");
        //        execute_cmd(usercode, "update menus set m_link = '../Fam/fa_m' where m_id = '29001.2'");
        //        execute_cmd(usercode, "update menus set m_link = '../Fam/fam_master' where m_id = '29001.3'");
        //        execute_cmd(usercode, "update menus set m_link = '../Fam/currency_rate' where m_id = '29001.7'");
        //        execute_cmd(usercode, "ALTER TABLE `emp_master` ADD `temp_status` VARCHAR(1) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `emp_master` ADD `temp_ldate` DATETIME NOT NULL, ADD `temp_rdate` DATETIME NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `emp_master` ADD `temp_effdate` DATETIME NOT NULL;");

        //        //reena 12feb2019
        //        #region Controls
        //        execute_cmd(usercode, @"CREATE TABLE `controls` (
        // `rec_id` int(11) NOT NULL AUTO_INCREMENT,
        // `type` varchar(6) NOT NULL,
        // `id` varchar(6) NOT NULL,
        // `name` varchar(80) NOT NULL,
        // `param1` varchar(50) NOT NULL,
        // `param2` varchar(50) NOT NULL,
        // `param3` varchar(50) NOT NULL,
        // `client_id` varchar(6) NOT NULL,
        // `client_unit_id` varchar(6) NOT NULL,
        // `m_module3` varchar(20) NOT NULL,
        // PRIMARY KEY(`rec_id`)
        //) ENGINE = InnoDB AUTO_INCREMENT = 21 DEFAULT CHARSET = latin1");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //          " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000001','Complete Attendance(P/L/A)','1','2','1','2','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        //          " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Complete Attendance(P/L/A)' and m_module3='edumain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //         " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000002','Attendance(L/A)','1','2','1','2','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        //         " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Attendance(L/A)' and m_module3='edumain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //         " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000003','Result','1','1','1','1','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        //         " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Result' and m_module3='edumain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //         " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000004','Home Work','1','1','1','1','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        //         " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Home Work' and m_module3='edumain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //         " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000005','Date Sheet','2','2','2','2','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        //         " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Date Sheet' and m_module3='edumain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //         " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000006','Fees Due','2','2','2','2','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        //         " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Fees Due' and m_module3='edumain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //         " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000007','Fees Over Due','2','2','2','2','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        //         " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Fees Over Due' and m_module3='edumain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //         " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000008','Fees Submit','1','2','1','2','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        //         " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Fees Submit' and m_module3='edumain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        // " select '" + clientid_mst + "','" + unitid_mst + "','SMS','000009','Enquiry Welcome','1','2','1','2','edumain' from dual where NOT EXISTS(select name from controls where type='SMS'" +
        // " and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and name='Enquiry Welcome' and m_module3='edumain')");
        //        #endregion

        //        //kashish 12feb2019
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details`  ADD `sssm_id` VARCHAR(20) NOT NULL;");
        //        execute_cmd(usercode, "UPDATE menus SET m_link = '../Fam/goverment_grant' WHERE m_id='29002.4' ;");

        //        //vivek 13feb2019
        //        execute_cmd(usercode, "UPDATE menus SET m_link = '../Fam/asset_sale' WHERE m_id='29004.1' ;");
        //        execute_cmd(usercode, "UPDATE menus SET m_link = '../Fam/asset_write' WHERE m_id='29004.2' ;");

        //        //reena 16feb2019

        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Education/ac_yr' WHERE m_id='7004.2'");
        //        execute_cmd(usercode, "ALTER TABLE `add_class` CHANGE `type` `type` VARCHAR(5) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;");

        //        //kashish 18feb2019
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details`  ADD `sssm_id` VARCHAR(20) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `issameschool` VARCHAR(1) NOT NULL, ADD `about` VARCHAR(100) NOT NULL, " +
        //            "ADD `reffered_by` VARCHAR(25) NOT NULL, ADD `remark_date` DATETIME NOT NULL, ADD `teacher_name` VARCHAR(6) NOT NULL, " +
        //            "ADD `remark` VARCHAR(200) NOT NULL AFTER `teacher_name`;");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `type1` VARCHAR(3) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `g_annual_income` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `company_profile` ADD `edu_board` VARCHAR(15) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `company_unit_profile` ADD `edu_board` VARCHAR(15) NOT NULL;");


        //        //reena 18feb2019
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Education/fee_receipt' WHERE m_id='7019.8'");

        //        //kashish20feb2019
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `enq_no` VARCHAR(6) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `enq_date` DATETIME NOT NULL;");

        //        execute_cmd(usercode, "ALTER TABLE `cust_mst` CHANGE `cust_name` `cust_name` VARCHAR(60) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `std_type` VARCHAR(1) NOT NULL, ADD `old_regno` VARCHAR(150) NOT NULL;");

        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `std_type` VARCHAR(1) NOT NULL, ADD `old_regno` VARCHAR(150) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `std_type` VARCHAR(1) NOT NULL, ADD `old_regno` VARCHAR(150) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `sssm_id` VARCHAR(20) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `g_annual_income` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `std_type` VARCHAR(1) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `old_regno` VARCHAR(150) NOT NULL;");


        //        //reena 20feb2019
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_name` = 'Date Sheet' WHERE m_id='7014.3'");

        //        #region kashish
        //        //kashish 21feb2019
        //        execute_cmd(usercode, "ALTER TABLE `cust_mst` CHANGE `cust_name` `cust_name` VARCHAR(60) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `fees_detail` ADD `type` VARCHAR(3) NOT NULL, ADD `vch_num` VARCHAR(6) NOT NULL, ADD `vch_date` DATETIME NOT NULL AFTER," +
        //            " ADD `created_date` DATETIME NOT NULL, ADD `ent_by` INT(20) NOT NULL, ADD `ent_date` DATETIME NOT NULL, ADD `edit_by` INT(20) NOT NULL, ADD `edit_date` DATETIME NOT NULL;");

        //        //kashish 23feb2019
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `std_type` VARCHAR(1) NOT NULL, ADD `old_regno` VARCHAR(150) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `sssm_id` VARCHAR(20) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `g_annual_income`` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `std_type` VARCHAR(1) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `old_regno` VARCHAR(150) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `issameschool` VARCHAR(150) NOT NULL;");

        //        //kashish 27feb2019
        //        execute_cmd(usercode, @"create table purchases(
        //    rec_id int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
        //    client_id varchar(3) not null,
        //    client_unit_id varchar(6) not null,
        //    ent_by varchar(6) not null,
        //    ent_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //    edit_by varchar(6) not null,
        //    edit_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //    created_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //    vch_num varchar(6) NOT NULL,
        //    vch_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        //    type varchar(3) NOT NULL,
        //    po_type varchar(6) not null,
        //    acode varchar(6) not null,
        //    pay_term varchar(6) not null,
        //    price_term varchar(6) not null,
        //    t_mode varchar(6) not null,
        //    shipfrom varchar(6) not null,
        //    shipto varchar(6) not null,
        //    pur_type varchar(6) not null,
        //    indent_type varchar(6) not null,
        //    icode varchar(6) not null,
        //    iname varchar(20),
        //    partno varchar(20),
        //    uom varchar(10) not null,
        //    hsn varchar(10) not null,
        //    stkqty varchar(10) not null,
        //    indqty varchar(10) not null,
        //    ordqty varchar(10) not null,
        //    irate varchar(10) not null,
        //    taxrate varchar(10) not null,
        //    iamount varchar(10) not null,
        //    taxamt varchar(10) not null,
        //    disctype varchar(10) not null,
        //    discrate varchar(10) not null,
        //    discamt varchar(10) not null,    
        //    lineamount varchar(10) not null,
        //    dlv_date datetime not null,
        //    iremark varchar(50) not null,
        //	totremark VARCHAR(50) NOT NULL,
        //	cond VARCHAR(50) NOT NULL,
        //	basicamt VARCHAR(10) NOT NULL,
        //	gdisc VARCHAR(50) NOT NULL,
        //	gfreight VARCHAR(50) NOT NULL,
        //	insurance VARCHAR(50) NOT NULL,
        //	ginstlchrg VARCHAR(50) NOT NULL,
        //	gserchrg VARCHAR(50) NOT NULL,
        //	gamc VARCHAR(50) NOT NULL,
        //	gloadchrg VARCHAR(50) NOT NULL,
        //	gothrchrg VARCHAR(50) NOT NULL,
        //	gtaxamt VARCHAR(50) NOT NULL,
        //	igst VARCHAR(50) NOT NULL,
        //	cgst VARCHAR(50) NOT NULL,
        //	sgst VARCHAR(50) NOT NULL,
        //	gamt VARCHAR(50) NOT NULL	
        //)");

        //        execute_cmd(usercode, "ALTER TABLE `controls` ADD `param4` VARCHAR(1) NOT NULL AFTER `param3`;");
        //        execute_cmd(usercode, "ALTER TABLE `company_unit_profile` CHANGE `vch_date` `vch_date` DATETIME NOT NULL;");
        //        #endregion

        //        //reena 27feb2019
        //        execute_cmd(usercode, "ALTER TABLE `fees_detail` ADD `std_amount` DECIMAL(18,2) NOT NULL AFTER `overdue_dt`, ADD `regno` VARCHAR(300) NOT NULL AFTER `std_amount`;");
        //        execute_cmd(usercode, "ALTER TABLE `fees_detail` CHANGE `due_month` `due_month` VARCHAR(2) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `fees_detail` ADD `monthname` VARCHAR(20) NOT NULL AFTER `regno`;");
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link`='../Education/fee_receipt' WHERE m_id='7019.10'");

        //        //vivek 28feb2019
        //        execute_cmd(usercode, "update menus set m_link='../Fam/asset_ent' where m_id='29003.1'");
        //        execute_cmd(usercode, "ALTER TABLE enx_tab2 ADD col17 VARCHAR(10) NOT NULL");

        //        //reena 7march 2019                                        
        //        execute_cmd(usercode, "delete from menus where m_id = '7002.3'");
        //        execute_cmd(usercode, "update menus set m_name = 'Fee Structure' where m_id = '7002.14'");
        //        execute_cmd(usercode, "delete from menus where m_id = '7019.1'");
        //        execute_cmd(usercode, "update menus set m_name = 'Regular Fee' where m_id = '7019.5'");

        //        //kashish 7mar2019
        //        execute_cmd(usercode, "delete from menus where m_id = '7005.1'");
        //        execute_cmd(usercode, "update menus set m_name = 'Registration' where m_id = '7005.9'");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `partno` VARCHAR(20) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `ordqty` VARCHAR(10) NOT NULL");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `cond` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `basicamt` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `gdisc` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `gfreight` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `insurance` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `ginstlchrg` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `gserchrg` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `gamc` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `gloadchrg` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `gothrchrg` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `gtaxamt` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `gamt` VARCHAR(50) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` ADD `transfer_reason` VARCHAR(60) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` ADD `transfer_reason` VARCHAR(60) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `taxrate` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `itransaction` ADD `taxamt` VARCHAR(10) NOT NULL, ADD `lineamount` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `student_applicant_details` CHANGE `std_type` `std_type` VARCHAR(3) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `std_type` `std_type` VARCHAR(3) NOT NULL;");
        //        execute_cmd(usercode, "update menus set m_link='../Purchase/vendor_detail' where m_id='28005.1'");
        //        execute_cmd(usercode, "ALTER TABLE `clients_mst` ADD `isgstr` VARCHAR(1) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `clients_mst` ADD `tor` VARCHAR(1) NOT NULL;");

        //        //reena 9march2019
        //        execute_cmd(usercode, "ALTER TABLE `fees_detail` ADD `approved_by` VARCHAR(100) NOT NULL AFTER `regno`, ADD `remark` VARCHAR(300) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `item` ADD `vch_date` DATETIME NOT NULL AFTER `edit_date`, ADD `created_date` DATETIME NOT NULL`;");

        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Mst/doc_master' WHERE m_id = '17001.7';");
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Mst/doc_master' WHERE m_id = '28004.7';");

        //        //reena 16march2019
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Education/fee_receipt' WHERE m_id = 7019.2");
        //        execute_cmd(usercode, "ALTER TABLE `school_fee_type` CHANGE `FeeType_Id` `FeeType_Id` VARCHAR(3) NOT NULL;");

        //        //rreean 20mar2019
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Education/opening_edi' WHERE m_id='7002.12'");

        //        execute_cmd(usercode, "ALTER TABLE `student_receipt_detail` CHANGE `Fee_type_id` `Fee_type_id` VARCHAR(3) NOT NULL;");

        //        //reena 26march2019
        //        execute_cmd(usercode, "UPDATE menus SET m_name = 'Class Room Master' WHERE m_id = '7004.13'");

        //        //kashish 27marcha2019
        //        execute_cmd(usercode, "update menus set m_link='../Vastu/comp_doc' where m_id='40004.1'");

        //        //reena 1april 2019
        //        execute_cmd(usercode, "delete from menus where m_id='7019.7'");
        //        execute_cmd(usercode, "delete from menus where m_id='7004.8'");
        //        execute_cmd(usercode, "delete from menus where m_id='7004.8.1'");
        //        execute_cmd(usercode, "delete from menus where m_id='7004.3'");
        //        execute_cmd(usercode, "delete from menus where m_id='7004.3.1'");
        //        execute_cmd(usercode, "delete from menus where m_id='7004.3.2'");

        //        //kashish 4april2019       
        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, `m_module3`," +
        //            " `u_id`, `m_order`, `m_default`,`and_type`, `and_link`, `i_link`, `created_date`, `type`, `m_textfront`, `m_textback`, `attributes`) " +
        //    "select NULL, '17001.10', 'Attribute Master', '../Mst/master_ctrl', '3','', '', '0', '', 'invm', 'invtmain', '5', '50.00', '1'," +
        //    " 'Y', 'Mat_rec', '', '2018-12-10 12:20:46', '', '', '', 'FULL' from dual where not exists (select m_name from menus where m_name='Attribute Master' " +
        //    "and m_id='17001.10' and m_module3='invtmain')");

        //        //anjali 4april2019
        //        execute_cmd(usercode, "update menus set m_link='../Production/operator_master' where m_id='38001.4'");

        //        //reena 4april2019
        //        execute_cmd(usercode, "ALTER TABLE `pattern_gen` CHANGE `module_id` `module_id` VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;");

        //        //reena 5april2019
        //        #region Invoice

        // Prefix
        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        // " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Prefix','bnpmain' ,'N' from dual " +
        // "where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='bnpmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Company Name','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='bnpmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Unit Name','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='bnpmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Year','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='bnpmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Month','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='bnpmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Date','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='bnpmain')");

        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Minimum Digit Required','bnpmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='bnpmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Start Number','bnpmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='bnpmain')");



        //        #endregion

        //        #region Indent Number

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Prefix','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='invtmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Company Name','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='invtmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Unit Name','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='invtmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Year','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='invtmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Month','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='invtmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Date','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='invtmain')");

        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Minimum Digit Required','invtmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='invtmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Start Number','invtmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='invtmain')");



        //        #endregion

        //        #region PO Number

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Prefix','invtmain,purmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='invtmain,purmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Company Name','invtmain,purmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='invtmain,purmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Unit Name','invtmain,purmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='invtmain,purmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Year','invtmain,purmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='invtmain,purmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Month','invtmain,purmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='invtmain,purmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Date','invtmain,purmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='invtmain,purmain')");

        //        //PO Type Wise Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','PO Type Wise Number','invtmain,purmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='PO Type Wise Number' and module_id='invtmain,purmain')");

        //        //PO Type prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','PO Type Prefix','invtmain,purmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='PO Type Prefix' and module_id='invtmain,purmain')");


        //        //EXP/IMP
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','E/D Type Wise Number','invtmain,purmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='E/D Type Wise Number' and module_id='invtmain,purmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Minimum Digit Required','invtmain,purmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='invtmain,purmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Start Number','invtmain,purmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='PUR' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='invtmain,purmain')");



        //        #endregion

        //        #region MRN Number

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Prefix','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='invtmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Company Name','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='invtmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Unit Name','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='invtmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Year','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='invtmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Month','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='invtmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Date','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='invtmain')");

        //        // MRN Type
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','MRN Type','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='MRN Type' and module_id='invtmain')");

        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Minimum Digit Required','invtmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='invtmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Start Number','invtmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='invtmain')");



        //        #endregion

        //        #region Issue Number

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Prefix','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='invtmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Company Name','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='invtmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Unit Name','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='invtmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Year','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='invtmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Month','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='invtmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Date','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='invtmain')");

        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Minimum Digit Required','invtmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='invtmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Start Number','invtmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='invtmain')");



        //        #endregion

        //        #region Employee Code

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Prefix','paymain,hrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='paymain,hrmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Company Name','paymain,hrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='paymain,hrmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Unit Name','paymain,hrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='paymain,hrmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Minimum Digit Required','paymain,hrmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='EMP' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='paymain,hrmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Start Number','paymain,hrmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='paymain,hrmain')");



        //        #endregion

        //        #region SO Number

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Prefix','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='bnpmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Company Name','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='bnpmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Unit Name','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='bnpmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Year','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='bnpmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Month','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='bnpmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Date','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='bnpmain')");

        //        //SO Type
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','SO Type','bnpmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='SO Type' and module_id='bnpmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Minimum Digit Required','bnpmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='bnpmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','SO Number Pattern','Start Number','bnpmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='bnpmain')");



        //        #endregion

        //        #region WO Number

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Prefix','pdmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='pdmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Company Name','pdmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='pdmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Unit Name','pdmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='pdmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Year','pdmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='pdmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Month','pdmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='pdmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Date','pdmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='pdmain')");

        //        //WO Type
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','WO Type','pdmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='WO Type' and module_id='pdmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Minimum Digit Required','pdmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='pdmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Start Number','pdmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='pdmain')");



        //        #endregion

        //        #region VOUCHER

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Prefix','acctmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='acctmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Company Name','acctmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='acctmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Unit Name','acctmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='acctmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Year','acctmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='acctmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Month','acctmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='acctmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Date','acctmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='acctmain')");

        //        //WO Type
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Voucher Type','acctmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Voucher Type' and module_id='acctmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Minimum Digit Required','acctmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='acctmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Start Number','acctmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='acctmain')");



        //        #endregion

        //        #region HOSTEL
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date(''" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','School Name','hostmain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='hostmain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Branch Name','hostmain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='hostmain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Branch Code','hostmain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Code' and module_id='hostmain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Year','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='hostmain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Month','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='hostmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Date','hostmain' ,'N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='hostmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Country','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Country' and module_id='hostmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','State','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='State' and module_id='hostmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','City','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='City' and module_id='hostmain')");

        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Class','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Class' and module_id='hostmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Section','hostmain','N' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Section' and module_id='hostmain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Minimum Digit Required','hostmain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='hostmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Start Number','hostmain','Y' from dual where NOT EXISTS(select content from pattern_gen where type='HOS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='hostmain')");

        //        #endregion

        //        #region ASSET CODE

        //        // Major Asset Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Major Asset Abbreviation','fixmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Major Asset Abbreviation' and module_id='fixmain')");
        //        //Minor Asset Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Minor Asset Abbreviation','fixmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minor Asset Abbreviation' and module_id='fixmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Company Name','fixmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='fixmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Unit Name','fixmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='fixmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Year','fixmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='fixmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Minimum Digit Required','fixmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='fixmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Start Number','fixmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='fixmain')");



        //        #endregion

        //        #region Quotation Number

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Prefix','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='bnpmain')");

        //        // Company Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Company Name','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Company Name' and module_id='bnpmain')");

        //        // Unit Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Unit Name','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Unit Name' and module_id='bnpmain')");

        //        // Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Year','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='bnpmain')");

        //        // Month
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Month','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Month' and module_id='bnpmain')");

        //        // Date
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Date','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='bnpmain')");

        //        //SO Type
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Quotation Type','bnpmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Quotation Type' and module_id='bnpmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Minimum Digit Required','bnpmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='bnpmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Start Number','bnpmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='bnpmain')");



        //        #endregion

        //        #region LIBRARY MEMBERSHIP

        //        // Prefix
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Prefix','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='lbrmain')");

        //        // Student Registration Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Student Registration Number','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Student Registration Number' and module_id='lbrmain')");


        //        //Academic Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Year','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='lbrmain')");

        //        // School Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','School Name','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='School Name' and module_id='lbrmain')");


        //        // Branch Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Branch Name','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Branch Name' and module_id='lbrmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Minimum Digit Required','lbrmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='MEM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='lbrmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Start Number','lbrmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='lbrmain')");



        //        #endregion

        //        #region ACCESSION NUMBER

        //        // Publisher Name
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Publisher Name','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Publisher Name' and module_id='lbrmain')");

        //        // Year Of Purchase
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Year Of Purchase','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year Of Purchase' and module_id='lbrmain')");


        //        //Academic Year
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Year','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Year' and module_id='lbrmain')");

        //        // Book Category
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Book Category','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Book Category' and module_id='lbrmain')");


        //        // Vch Num Of Book Category
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Vch Num Of Book Category','lbrmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Vch Num Of Book Category' and module_id='lbrmain')");


        //        // Minimum Digit Required
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Minimum Digit Required','lbrmain','Y' from dual" +
        //         " where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minimum Digit Required' and module_id='lbrmain')");

        //        // Start Number
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Start Number','lbrmain','Y' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Start Number' and module_id='lbrmain')");



        //        #endregion

        //        //kashish5april2019
        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, `m_module3`, `u_id`, `m_order`, `m_default`," +
        //            " `and_type`, `and_link`, `i_link`, `created_date`, `type`, `m_textfront`, `m_textback`, `attributes`) " +
        //            "select NULL, '9003.3.11', 'Employee Code Pattern', '../Education/pattern_gen', '4','', '', '0', '-', 'paygm', 'paymain', '5', '88.02', '1'," +
        //            " '', '', '', '2018-12-10 12:20:46', '', '', '', '' from dual where not exists (select m_name from menus where m_name='Employee Code Pattern' and m_id='9003.3.11' and m_module3='paymain')");

        //        //anjali 5april2019
        //        execute_cmd(usercode, "update menus set m_link='../Education/sch_directory' where m_id='7034'");
        //        execute_cmd(usercode, "update menus set m_link='../Education/std_tchr_directory' where m_id='13000.4'");

        //        //reena 6april2019
        //        execute_cmd(usercode, "CREATE INDEX idx_atten on student_attendance(Reg_id,type,client_id,client_unit_id,academic_year_id)");

        //        #region Receipt Temp
        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //          " select '1', '001','Receipt Format 1','fee_receipt_report1.rpt', '000002',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'FRF' from dual where NOT EXISTS(select master_name from master_setting where type='FRF' " +
        //          " and master_name='Receipt Format 1' )");

        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //         " select '0', '002','Receipt Format 2','fee_receipt_report2.rpt', '000002',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'FRF' from dual where NOT EXISTS(select master_name from master_setting where type='FRF' " +
        //         " and master_name='Receipt Format 2' )");

        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //         " select '0', '003','Receipt Format 3','fee_receipt_report3.rpt', '000002',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'FRF' from dual where NOT EXISTS(select master_name from master_setting where type='FRF' " +
        //         " and master_name='Receipt Format 3' )");
        //        #endregion

        //        #region Result Temp
        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //          " select '1', '001','Result Format 1','Student_Result.rpt', '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'RRF' from dual where NOT EXISTS(select master_name from master_setting where type='RRF' " +
        //          " and master_name='Result Format 1' )");

        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //         " select '0', '002','Result Format 2','Student_Result_1.rpt', '000002',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'RRF' from dual where NOT EXISTS(select master_name from master_setting where type='RRF' " +
        //         " and master_name='Result Format 2' )");
        //        #endregion

        //        #region Admit Card Temp
        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //          " select '1', '001','Admit Card Format 1','student_i_new', '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'ACF' from dual where NOT EXISTS(select master_name from master_setting where type='ACF' " +
        //          " and master_name='Admit Card Format 1' )");


        //        #endregion

        //        #region ICard Temp
        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //          " select '1', '001','ICard Format 1','Student_IC1', '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'ICF' from dual where NOT EXISTS(select master_name from master_setting where type='ICF' " +
        //          " and master_name='ICard Format 1' )");


        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //          " select '0' ,'002','ICard Format 2','Student_IC2', '000002',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'ICF' from dual where NOT EXISTS(select master_name from master_setting where type='ICF' " +
        //          " and master_name='ICard Format 2' )");

        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //         " select '0' ,'003','ICard Format 3','Student_IC3', '000003',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'ICF' from dual where NOT EXISTS(select master_name from master_setting where type='ICF' " +
        //         " and master_name='ICard Format 3' )");

        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby,master_editdate,created_date,type)" +
        //         " select '0' ,'004','ICard Format 4','Student_IC4', '000004',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'ICF' from dual where NOT EXISTS(select master_name from master_setting where type='ICF' " +
        //         " and master_name='ICard Format 4' )");

        //        #endregion

        //        //kashish10april2019
        //        execute_cmd(usercode, "update menus set m_name='Transport Master' where m_id='7038'");
        //        execute_cmd(usercode, "update menus set m_module2='sfee' where m_id='7002.15'");
        //        execute_cmd(usercode, "update menus set m_module3='schadmmain' where m_id='7006'");
        //        execute_cmd(usercode, "update menus set m_module3='schadmmain' where m_id='7006.1'");

        //        execute_cmd(usercode, " INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, `m_module3`, `u_id`, " +
        //            "`m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `created_date`, `type`, `m_textfront`, `m_textback`, `attributes`, `activity_type`) " +
        //    "select NULL, '17001.11', 'PO No. Pattern', '../Education/pattern_gen', '3', '', '', '0', '', 'invm', 'invtmain', '5', '14.00', '1', 'Y', 'Mat_rec', '', '2019-01-28 12:41:07', '', ''," +
        //    " '', '', 'FULL' from dual where not exists (select m_name from menus where m_name='PO No. Pattern' and m_id='17001.11' and m_module3='invtmain')");

        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `f_dob` `f_dob` DATETIME NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `m_dob` `m_dob` DATETIME NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `user_details` CHANGE `g_dob` `g_dob` DATETIME NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `company_unit_profile` ADD `dos` DATETIME NOT NULL AFTER `edu_board`, ADD `doc` DATETIME NOT NULL AFTER `dos`;");
        //        execute_cmd(usercode, "ALTER TABLE `company_unit_profile` CHANGE `vch_date` `vch_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP;");

        //        //reena 11april2019
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Education/Promoted_Students' WHERE  m_id='7014.2'");

        //        //reena 11april2019        
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Billing/invoice',m_name = 'Invoice' WHERE m_id = '21002.1'");
        //        execute_cmd(usercode, "UPDATE `menus` SET `m_link` = '../Education/std_cards' WHERE m_id = '7020.2'");
        //        execute_cmd(usercode, @"CREATE TABLE `purchasesc` (
        // `rec_id` int(11) NOT NULL AUTO_INCREMENT,
        // `client_id` varchar(3) NOT NULL,
        // `client_unit_id` varchar(6) NOT NULL,
        // `ent_by` varchar(6) NOT NULL,
        // `ent_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // `edit_by` varchar(6) NOT NULL,
        // `edit_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // `created_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // `vch_num` varchar(6) NOT NULL,
        // `vch_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // `type` varchar(3) NOT NULL,
        // `acode` varchar(6) NOT NULL,
        // `pay_term` varchar(6) NOT NULL,
        // `price_term` varchar(6) NOT NULL,
        // `tmode` varchar(6) NOT NULL,
        // `shipfrom` varchar(6) NOT NULL,
        // `shipto` varchar(6) NOT NULL,
        // `pur_type` varchar(6) NOT NULL,
        // `icode` varchar(10) NOT NULL,
        // `iname` varchar(50) NOT NULL,
        // `cpartno` varchar(20) NOT NULL,
        // `uom` varchar(10) NOT NULL,
        // `hsno` varchar(10) NOT NULL,
        // `qtystk` varchar(10) NOT NULL,
        // `qtyind` varchar(10) NOT NULL,
        // `qtyord` varchar(10) NOT NULL,
        // `irate` varchar(10) NOT NULL,
        // `taxrate` varchar(10) NOT NULL,
        // `iamount` varchar(10) NOT NULL,
        // `taxamt` varchar(10) NOT NULL,
        // `disctype` varchar(10) NOT NULL,
        // `discrate` varchar(10) NOT NULL,
        // `discamt` varchar(10) NOT NULL,
        // `lineamount` varchar(10) NOT NULL,
        // `dlv_date` datetime NOT NULL,
        // `iremark` text NOT NULL,
        // `totremark` text NOT NULL,
        // `cond` varchar(50) NOT NULL,
        // `basicamt` varchar(10) NOT NULL,
        // `gdisc` varchar(50) NOT NULL,
        // `gfreight` varchar(50) NOT NULL,
        // `insurance` varchar(50) NOT NULL,
        // `ginstlchrg` varchar(50) NOT NULL,
        // `gserchrg` varchar(50) NOT NULL,
        // `gamc` varchar(50) NOT NULL,
        // `gloadchrg` varchar(50) NOT NULL,
        // `gothrchrg` varchar(50) NOT NULL,
        // `gtaxamt` varchar(50) NOT NULL,
        // `igst` varchar(50) NOT NULL,
        // `cgst` varchar(50) NOT NULL,
        // `sgst` varchar(50) NOT NULL,
        // `gamt` varchar(50) NOT NULL,
        // `deptno` varchar(3) NOT NULL,
        // `deptname` varchar(25) NOT NULL,
        // `desig` varchar(3) NOT NULL,
        // `reqby` varchar(25) NOT NULL,
        // `indno` varchar(6) NOT NULL,
        // `inddate` datetime NOT NULL,
        // PRIMARY KEY(`rec_id`)
        //) ENGINE = InnoDB AUTO_INCREMENT = 61 DEFAULT CHARSET = latin1");

        //        //vivek 11april2019
        //        execute_cmd(usercode, "update menus set m_link='../Fam/transfer_asset' where m_id='29003.2'");
        //        execute_cmd(usercode, "update menus set m_link = '../Fam/cost_center' where m_id = '29001.5'");

        //        //reena 19april2019

        //        #region
        //        execute_cmd(usercode, "CREATE TABLE `ivendor` ( `rec_id` INT(11) NULL AUTO_INCREMENT , `vch_num` VARCHAR(6) NOT NULL , `vch_date` DATETIME NOT NULL , `client_id` VARCHAR(100) NOT NULL ," +
        //            " `client_unit_id` VARCHAR(100) NOT NULL , `ent_by` VARCHAR(20) NOT NULL , `ent_date` DATETIME NOT NULL , `edit_by` VARCHAR(20) NOT NULL , `edit_date` DATETIME NOT NULL , " +
        //            "`created_date` DATETIME NOT NULL , `type` VARCHAR(3) NOT NULL , `acode` VARCHAR(6) NOT NULL , `icode` VARCHAR(10) NOT NULL , `uom` VARCHAR(6) NOT NULL , `irate` DECIMAL(14,2) NOT NULL ," +
        //            " `date1` DATETIME NOT NULL , `date2` DATETIME NOT NULL , PRIMARY KEY (`rec_id`)) ENGINE = InnoDB;");

        //        execute_cmd(usercode, "ALTER TABLE `emp_master` ADD `l_reason` VARCHAR(200) NOT NULL;");

        //        execute_cmd(usercode, " INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, `m_module3`, `u_id`, " +
        //         "`m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `created_date`, `type`, `m_textfront`, `m_textback`, `attributes`, `activity_type`) " +
        // "select NULL, '28006', 'Approval', '', '2', 'fa fa-user', 'nav child_menu', '1', 'papp', 'purmain', 'purmain', '5', '47', '1', '', '', '', '2019-04-23 12:41:07', '', ''," +
        // " '', '', '' from dual where not exists (select m_name from menus where m_name='Approval' and m_id='28006' and m_module3='purmain')");

        //        execute_cmd(usercode, " INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, `m_module3`, `u_id`, " +
        //      "`m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `created_date`, `type`, `m_textfront`, `m_textback`, `attributes`, `activity_type`) " +
        //"select NULL, '28006.1', 'Vendor Approval', '../Purchase/vendor_app', '3', '', '', '0', '', 'papp', 'purmain', '5', '50', '1', '', '', '', '2019-04-23 12:41:07', '', ''," +
        //" '', '', '' from dual where not exists (select m_name from menus where m_name='Vendor Approval' and m_id='28006.1' and m_module3='purmain')");

        //        execute_cmd(usercode, " INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, `m_module3`, `u_id`, " +
        //"`m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `created_date`, `type`, `m_textfront`, `m_textback`, `attributes`, `activity_type`) " +
        //"select NULL, '28006.2', 'PR Approval', '../Purchase/pr_app', '3', '', '', '0', '', 'papp', 'purmain', '5', '50', '1', '', '', '', '2019-04-23 12:41:07', '', ''," +
        //" '', '', '' from dual where not exists (select m_name from menus where m_name='PR Approval' and m_id='28006.2' and m_module3='purmain')");

        //        execute_cmd(usercode, " INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, `m_module3`, `u_id`, " +
        //"`m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `created_date`, `type`, `m_textfront`, `m_textback`, `attributes`, `activity_type`) " +
        //"select NULL, '28006.3', 'PO Approval', '../Purchase/po_app', '3', '', '', '0', '', 'papp', 'purmain', '5', '50', '1', '', '', '', '2019-04-23 12:41:07', '', ''," +
        //" '', '', '' from dual where not exists (select m_name from menus where m_name='PO Approval' and m_id='28006.3' and m_module3='purmain')");

        //        #endregion
        //        //reena 24april2019
        //        execute_cmd(usercode, "ALTER TABLE `purchases` ADD `Approved` VARCHAR(1) NOT NULL AFTER `inddate`, ADD `Closed` VARCHAR(1) NOT NULL AFTER `Approved`;");

        //        execute_cmd(usercode, "update menus set m_link = '../Mst/master_ctrl' where m_id = '9003.3.10'");
        //        execute_cmd(usercode, "ALTER TABLE `emp_salary_process` ADD `currmmmyyyy` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `item` ADD `loc` VARCHAR(3) NOT NULL AFTER `attr5`;");
        //        execute_cmd(usercode, "update menus set m_link = '../Mst/master_ctrl',m_name='Item Location' where m_id = '17001.6'");

        //        //02/05/2019
        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, " +
        //            "`m_module3`, `u_id`, `m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `created_date`, `type`, `m_textfront`, `m_textback`, `attributes`, " +
        //            "`activity_type`) select 'NULL', '7019.11', 'Conc Reversal', '../Education/fee_receipt', '3', '', '', '0', '-', 'sfee', 'edumain', '5', '87.06', " +
        //            "'1', '', '', '', '2019-05-02 11:22:28', '', '', '', '', '' from dual where not exists(select m_name from menus where m_id = '7019.11' and m_module3 = 'edumain')");

        //        #region indexes

        //        //enxtab
        //        execute_cmd(usercode, "create index idx_enx on enx_tab(type, client_id, client_unit_id)");
        //        execute_cmd(usercode, "create index idx_egrd on enx_tab(col1, col2, col3)");

        //        execute_cmd(usercode, "create index idx_emp on emp_master(type, client_id, client_unit_id)");
        //        execute_cmd(usercode, "create index idx_lvdt on emp_master(type, client_id, client_unit_id, emp_status, ex_dt)");

        //        execute_cmd(usercode, "create index idx_kc on kc_tab(type, client_id, client_unit_id)");
        //        execute_cmd(usercode, "create index idx_vm on vehicle_master(type, client_id, client_unit_id)");

        //        execute_cmd(usercode, "create index idx_lob on leave_ob(type, client_id, client_unit_id)");
        //        execute_cmd(usercode, "create index idx_head on vehicle_master(type, client_id, client_unit_id, cur_state, date2)");

        //        execute_cmd(usercode, "create index idx_sal on emp_salary_process(type, client_id, client_unit_id)");
        //        execute_cmd(usercode, "create index idx_unit on company_unit_profile (cup_id,company_profile_id)");
        //        execute_cmd(usercode, "create index idx_profile on company_profile (company_profile_id)");
        //        execute_cmd(usercode, "create index idx_type on master_setting (type,client_id,client_unit_id)");

        //        #endregion

        //        execute_cmd(usercode, "ALTER TABLE `item` ADD `length` VARCHAR(10) NOT NULL AFTER `loc`;");

        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, " +
        //     "`m_module3`, `u_id`, `m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `type`, `m_textfront`, `m_textback`, `attributes`, " +
        //     "`activity_type`) select 'NULL', '17001.12', 'Store Return Type', '../Mst/doc_master', '3', '', '', '0', '-', 'invm', 'invtmain', '5', '87.06', " +
        //     "'1', '', '', '', '', '', '', '', '' from dual where not exists(select m_name from menus where m_id = '17001.12' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, " +
        //"`m_module3`, `u_id`, `m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `type`, `m_textfront`, `m_textback`, `attributes`, " +
        //"`activity_type`) select 'NULL', '17001.13', 'Store Return', '../Inventory/store_return', '3', '', '', '0', '-', 'invm', 'invtmain', '5', '87.06', " +
        //"'1', '', '', '', '', '', '', '', '' from dual where not exists(select m_name from menus where m_id = '17001.13' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, " +
        //"`m_module3`, `u_id`, `m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `type`, `m_textfront`, `m_textback`, `attributes`, " +
        //"`activity_type`) select 'NULL', '28004.11', 'Payment Term Master', '../Mst/master_ctrl', '3', '', '', '0', '-', 'purm', 'purmain', '5', '87.06', " +
        //"'1', '', '', '', '', '', '', '', '' from dual where not exists(select m_name from menus where m_id = '28004.11' and m_module3 = 'purmain')");

        //        //reena 7may2019

        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, " +
        //"`m_module3`, `u_id`, `m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `type`, `m_textfront`, `m_textback`, `attributes`, " +
        //"`activity_type`) select 'NULL', '21009', 'Pre Billing', '', '2', 'fa fa-user', 'nav child_menu', '1', 'pb', 'bnpmain', 'bnpmain', '5', '87.06', " +
        //"'1', '', '', '', '', '', '', '', '' from dual where not exists(select m_name from menus where m_id = '21009' and m_module3 = 'bnpmain')");

        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, " +
        //"`m_module3`, `u_id`, `m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `type`, `m_textfront`, `m_textback`, `attributes`, " +
        //"`activity_type`) select 'NULL', '21009.1', 'Performa Invoice', '../Billing/invoice', '3', '', '', '0', '-', 'pb', 'bnpmain', '5', '87.06', " +
        //"'1', '', '', '', '', '', '', '', '' from dual where not exists(select m_name from menus where m_id = '21009.1' and m_module3 = 'bnpmain')");

        //        execute_cmd(usercode, "INSERT INTO `menus` (`rec_id`, `m_id`, `m_name`, `m_link`, `m_level`, `m_icon`, `m_css`, `m_submenu`, `m_module1`, `m_module2`, " +
        //"`m_module3`, `u_id`, `m_order`, `m_default`, `and_type`, `and_link`, `i_link`, `type`, `m_textfront`, `m_textback`, `attributes`, " +
        //"`activity_type`) select 'NULL', '21009.2', 'Work Order', '../Billing/invoice', '3', '', '', '0', '-', 'pb', 'bnpmain', '5', '87.06', " +
        //"'1', '', '', '', '', '', '', '', '' from dual where not exists(select m_name from menus where m_id = '21009.2' and m_module3 = 'bnpmain')");

        //        execute_cmd(usercode, "ALTER TABLE `vehicle_master` ADD `col42` VARCHAR(20) NOT NULL AFTER `col41`;");
        //        execute_cmd(usercode, "ALTER TABLE `clients_mst` CHANGE `c_pan` `c_pan` VARCHAR(30) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `leave_ob` ADD `curryyyymmm` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "ALTER TABLE `enx_tab` ADD `curryyyymmm` VARCHAR(10) NOT NULL;");
        //        execute_cmd(usercode, "create index idx_cs on country_state (type,client_id,client_unit_id)");
        //        execute_cmd(usercode, "drop index idx_fee_detail on fees_detail");
        //        execute_cmd(usercode, "create index idx_fee_detail on fees_detail(type, client_id, client_unit_id, academic_year_id, class_id)");
        //        execute_cmd(usercode, "create index idx_att on leave_ob (curryyyymmm,type,client_id,client_unit_id)");

        //        execute_cmd(usercode, @"CREATE TABLE `vouchers` (
        // `rec_id` int(11) NOT NULL AUTO_INCREMENT, 
        // `vch_num` varchar(6) NOT NULL,
        // `vch_date` datetime NOT NULL,
        // `type` varchar(3) NOT NULL,
        // `client_id` varchar(3) NOT NULL,
        // `client_unit_id` varchar(6) NOT NULL,
        // `ent_by` varchar(6) NOT NULL,
        // `ent_date` datetime NOT NULL,
        // `edit_by` varchar(6) NOT NULL,
        // `edit_date` datetime NOT NULL,
        //`created_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        // `acode` varchar(6) NOT NULL,
        // `aname` varchar(30) NOT NULL,
        // `invno` varchar(10) NOT NULL,
        //`invdate` datetime NOT NULL,
        //`totremark` text NOT NULL,
        // PRIMARY KEY(`rec_id`)
        //) ENGINE = InnoDB DEFAULT CHARSET = latin1");

        //        // ram 10/05/2019

        //        execute_cmd(usercode, "CREATE TABLE `history` (`rec_id` int(11) NOT NULL AUTO_INCREMENT, `vch_num` varchar(6) NOT NULL, `vch_date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP," +
        //            " `type` varchar(3) NOT NULL, `ent_by` varchar(6) NOT NULL, `ent_date` datetime NOT NULL, `edit_by` varchar(6) NOT NULL, `edit_date` datetime NOT NULL, `client_id` varchar(3) NOT NULL," +
        //            " `client_unit_id` varchar(6) NOT NULL, PRIMARY KEY(`rec_id`)) ENGINE = InnoDB AUTO_INCREMENT = 10 DEFAULT CHARSET = latin1");

        //        //kashish_11may2019
        //        execute_cmd(usercode, "update menus set m_name='Item Master',m_link='../Billing/itemservice' where m_id='21001.3'");

        //        execute_cmd(usercode, "update menus set m_module1='gst',m_module2='acctmain',m_module3='acctmain' where m_id='21005'");
        //        execute_cmd(usercode, "update menus set m_module1='-',m_module2='gst',m_module3='acctmain' where m_id='21005.1'");
        //        execute_cmd(usercode, "update menus set m_module1='-',m_module2='gst',m_module3='acctmain' where m_id='21005.2'");
        //        execute_cmd(usercode, "update menus set m_module1='gstret',m_module2='gst',m_module3='acctmain' where m_id='21005.3'");
        //        execute_cmd(usercode, "update menus set m_module1='-',m_module2='gstret',m_module3='acctmain' where m_id='21005.3.1'");
        //        execute_cmd(usercode, "update menus set m_module1='-',m_module2='gstret',m_module3='acctmain' where m_id='21005.3.2'");

        //        execute_cmd(usercode, "update menus set m_module2='acctmain',m_module3='acctmain' where m_id='21006'");
        //        execute_cmd(usercode, "update menus set m_module3='acctmain' where m_id='21006.1'");
        //        execute_cmd(usercode, "update menus set m_module3='acctmain' where m_id='21006.2'");
        //        execute_cmd(usercode, "create index idx_cp on company_unit_profile (company_profile_id)");

        //        //reena 13may2019
        //        execute_cmd(usercode, "CREATE INDEX idx_acyr on add_academic_year (academic_year_id, type, client_id, client_unit_id)");

        //        //kashish 23may2019
        //        execute_cmd(usercode, "INSERT INTO menus (rec_id, m_id, m_name, m_link,m_level, m_icon, m_css, m_submenu, m_module1, m_module2, " +
        //"m_module3, u_id, m_order, m_default, and_type, and_link, i_link, type, m_textfront, m_textback, attributes, activity_type) " +
        //"select 'NULL', '17001.14', 'Packing Type', '../Mst/master_ctrl', '3', '', '', '0', '', 'invm', 'invtmain', '5', '87.06', " +
        //"'1', '', '', '', '', '', '', '', '' from dual where not exists(select m_name from menus where m_id = '17001.14' and m_module3 = 'invtmain')");

        //        //kashish 23may2019
        //        execute_cmd(usercode, "ALTER TABLE item ADD cuom VARCHAR(20);");
        //        execute_cmd(usercode, "ALTER TABLE item ADD pktype VARCHAR(3);");
        //        execute_cmd(usercode, "ALTER TABLE item ADD pksize VARCHAR(10);");
        //        execute_cmd(usercode, "alter table itransaction add vehno VARCHAR(20);");
        //        execute_cmd(usercode, "alter table leave_ob add pdays VARCHAR(6);");
        //        execute_cmd(usercode, "alter table leave_ob add wdays VARCHAR(6);");
        //        execute_cmd(usercode, "alter table leave_ob add hdays VARCHAR(6);");
        //        execute_cmd(usercode, "alter table leave_ob add othrs VARCHAR(6);");
        //        execute_cmd(usercode, "alter table leave_ob add old_empcode VARCHAR(6);");
        //        execute_cmd(usercode, "alter table item add width VARCHAR(6);");
        //        execute_cmd(usercode, "alter table item add height VARCHAR(6);");
        //        execute_cmd(usercode, "alter table item add weight VARCHAR(6);");
        //        execute_cmd(usercode, "alter table item add thick VARCHAR(6);");

        #endregion

        //06/072019 Ram

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //           "select '" + clientid_mst + "', '" + unitid_mst + "', 'INV', '000013', 'Rejection Location id', '-', '0', '0', '0', 'invmain' " +
        //           " where NOT EXISTS(select name from controls where type='INV'" +
        //" and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and id='000013' and m_module3='invmain')");

        //        execute_cmd(usercode, "insert into  controls (client_id,client_unit_id,type,id,name,param1,param2,param3,param4,m_module3)" +
        //          "select '" + clientid_mst + "', '" + unitid_mst + "', 'INV', '000014', 'Hold Location id', '-', '0', '0', '0', 'invmain' from dual" +
        //          " where NOT EXISTS(select name from controls where type='INV'" +
        //" and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and id='000013' and m_module3='invmain')");
        //        execute_cmd(usercode, "alter table user_details add std_caste VARCHAR2(20)");
        //        execute_cmd(usercode, "alter table student_applicant_details add std_caste VARCHAR2(20)");
        //        execute_cmd(usercode, "alter table Item add rate VARCHAR2(6)");
        //        execute_cmd(usercode, "ALTER TABLE enx_tab2  MODIFY col13 VARCHAR2(500);");
        //        execute_cmd(usercode, "alter table company_unit_profile add septr VARCHAR2(20)");
        //        execute_cmd(usercode, "alter table clients_mst add sez VARCHAR2(1)");
        //        execute_cmd(usercode, "alter table clients_mst add (acctno VARCHAR2(20),ifsc VARCHAR2(20))");




        //        //kc 19082019
        //        #region kc 19082019
        //        execute_cmd(usercode, "alter table item add lqty varchar2(5)");
        //        execute_cmd(usercode, "alter table item add lweight varchar2(10)");
        //        execute_cmd(usercode, "alter table item add bqty varchar2(5)");
        //        execute_cmd(usercode, "alter table item add bweight varchar2(10)");
        //        execute_cmd(usercode, "alter table purchases add tname varchar2(25)");
        //        execute_cmd(usercode, "alter table purchases add pkins varchar2(50)");
        //        execute_cmd(usercode, "alter table purchases add tcstatus varchar2(1)");
        //        execute_cmd(usercode, "alter table purchases add tcremark varchar2(30)");
        //        #endregion

        //        //20082019 Ram Rattan
        execute_cmd(usercode, "update master_setting set femaleratio = '1' where type = 'MNT' and Section_Strength = '04'");
        execute_cmd(usercode, "update master_setting set femaleratio = '2' where type = 'MNT' and Section_Strength = '05'");
        execute_cmd(usercode, "update master_setting set femaleratio = '3' where type = 'MNT' and Section_Strength = '06' ");
        execute_cmd(usercode, "update master_setting set femaleratio = '4' where type = 'MNT' and Section_Strength = '07' ");
        execute_cmd(usercode, "update master_setting set femaleratio = '5' where type = 'MNT' and Section_Strength = '08' ");
        execute_cmd(usercode, "update master_setting set femaleratio = '6' where type = 'MNT' and Section_Strength = '09' ");
        execute_cmd(usercode, "update master_setting set femaleratio = '7' where type = 'MNT' and Section_Strength = '10' ");
        execute_cmd(usercode, "update master_setting set femaleratio = '8' where type = 'MNT' and Section_Strength = '11' ");
        execute_cmd(usercode, "update master_setting set femaleratio = '9' where type = 'MNT' and Section_Strength = '12' ");
        execute_cmd(usercode, "update master_setting set femaleratio = '10' where type = 'MNT' and Section_Strength = '01'");
        execute_cmd(usercode, "update master_setting set femaleratio = '11' where type = 'MNT' and Section_Strength = '02'");
        execute_cmd(usercode, "update master_setting set femaleratio = '12' where type = 'MNT' and Section_Strength = '03'");


        //        //kc22082019
        //        #region 22082019
        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, " +
        //            "M_MODULE3, U_ID, M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES,ACTIVITY_TYPE) " +
        //            "select '1493', '17001.23', 'Single Location', '../Mst/master_ctrl', '3', '-', '-', '0', '-', 'invm', 'invtmain', '5', '100', '1', '-'," +
        //            " '-', '-', TO_DATE('2019-07-25 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists (select m_name " +
        //            "from menus where lower(m_name) = 'single location' and m_id = '17001.23' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID, " +
        //            "M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1494', '17001.24'," +
        //            " 'Bulk Item Upload', '../Billing/item_upd', '3', '-', '-', '0', '-', 'invm', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //            " 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists (select m_name from menus where lower(m_name) = 'bulk item upload' " +
        //            "and m_id = '17001.24' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //            " M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1495', '17001.25'," +
        //            " 'Form Control', '../Mst/form_ctrl', '3', '-', '-', '0', '-', 'invm', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //            " 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'form control' and " +
        //            "m_id = '17001.25' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //           " M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1496', '17003.4'," +
        //           " 'Dispatch', '../Inventory/dispatch', '3', '-', '-', '0', '-', 'outwd', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //           " 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'dispatch' and " +
        //           "m_id = '17003.4' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //   " M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1497', '39005.2'," +
        //   " 'Daily Production Entry', '../Inventory/dpr', '3', '-', '-', '0', '-', 'prd', 'pdmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //   " 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'daily production entry' and " +
        //   "m_id = '39005.2' and m_module3 = 'pdmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //  " M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1498', '17001.15.1'," +
        //  " 'Multi Location', '-', '3', '-', 'nav child_menu', '1', 'mloc', 'invm', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //  " 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'multi location' and " +
        //  "m_id = '17001.15.1' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "update menus set m_level='4',m_module2='mloc' where m_id in ('17001.15','17001.16','17001.17','17001.18','17001.19') and m_module3='invtmain'");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1499', '11004'," +
        //" 'CheckList Mgmt', '-', '2', 'fa fa-gears', 'nav child_menu', '1', 'chkl', 'tskmain', 'tskmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'checklist mgmt' and " +
        //"m_id = '11004' and m_module3 = 'tskmain')");
        //        #endregion

        //        //reena
        //        execute_cmd(usercode, "update  menus set m_name='Single Location' ,m_id='17001.23' where m_id='17001.15' and m_module2='bhim'");
        //        execute_cmd(usercode, "update menus set m_link='../hr/daily_work' where m_id='19000.1'");
        //        execute_cmd(usercode, "update menus set m_link='../hr/create_team' where m_id='19000.3'");
        //        execute_cmd(usercode, "delete  from menus where m_id in ('17001.15','17001.16','17001.17','17001.18','17001.19') and m_module2='bhim'");
        //        execute_cmd(usercode, "delete  from menus where m_id in ('7037.2')");

        //        //Brijesh
        //        #region Employee Detail
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select " +
        //            "'VDC', '000083', 'Children Count', 'N', 'Y', 'CHILDREN COUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'CHILDREN COUNT' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 568, 'VDC', '000003', 'First Name', 'N', 'Y', 'FIRST NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'FIRST NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //            " select 567, 'VDC', '000002', 'Copy Employee', 'N', 'Y', 'COPY EMPLOYEE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'COPY EMPLOYEE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 569, 'VDC', '000004', 'Middele Name', 'N', 'Y', 'MIDDLE NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'MIDDLE NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 570, 'VDC', '000005', 'Last Name', 'N', 'Y', 'LAST NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'LAST NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 571, 'VDC', '000006', 'Gender', 'N', 'Y', 'GENDER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'GENDER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 572, 'VDC', '000007', 'Date Of Birth', 'N', 'Y', 'DOB', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'DOB' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 573, 'VDC', '000008', 'Nationality', 'N', 'Y', 'NATIONALITY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'NATIONALITY' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 574, 'VDC', '000009', 'Place Of Birth', 'N', 'Y', 'PLACE OF BIRTH', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'PLACE OF BIRTH' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 575, 'VDC', '000010', 'Mother Tongue', 'N', 'Y', 'MOTHER TONGUE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' " +
        //            "from dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'MOTHER TONGUE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 576, 'VDC', '000011', 'Active', 'N', 'Y', 'ACTIVE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'ACTIVE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 577, 'VDC', '000012', 'Adhaar Card Number', 'N', 'Y', 'ADHAAR CARD NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'ADHAAR CARD NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 578, 'VDC', '000013', 'VID Number', 'N', 'Y', 'VID NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'VID NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 579, 'VDC', '000014', 'Caste', 'N', 'Y', 'CASTE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'CASTE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 580, 'VDC', '000015', 'Religion', 'N', 'Y', 'RELIGION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from" +
        //            " dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'RELIGION' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 581, 'VDC', '000016', 'Caste Category', 'N', 'Y', 'CASTE CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'CASTE CATEGORY' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 582, 'VDC', '000017', 'Mother Name', 'N', 'Y', 'MOTHER NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'MOTHER NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 583, 'VDC', '000018', 'Father Name', 'N', 'Y', 'FATHER NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'FATHER NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 584, 'VDC', '000019', 'Blood Group', 'N', 'Y', 'BLOOD GROUP', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'BLOOD GROUP' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 585, 'VDC', '000020', 'Employment', 'N', 'Y', 'EMPLOYMENT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'EMPLOYMENT' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 586, 'VDC', '000021', 'Are you Married ?', 'N', 'Y', 'ARE YOU MARRIED ?', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'ARE YOU MARRIED ?' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 587, 'VDC', '000022', 'Contact Number', 'N', 'Y', 'CONTACT DETAILS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'CONTACT DETAILS' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 588, 'VDC', '000023', 'Alternate Contact Number', 'N', 'Y', 'ALTERNATE CONTACT NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' " +
        //            "from dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'ALTERNATE CONTACT NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 589, 'VDC', '000024', 'Personal Email', 'N', 'Y', 'PERSONAL EMAIL', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'PERSONAL EMAIL' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 590, 'VDC', '000025', 'Emergency Contact Number', 'N', 'Y', 'EMERGENCY CONTACT NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' " +
        //            "from dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'EMERGENCY CONTACT NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 591, 'VDC', '000026', 'Name', 'N', 'Y', 'NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 592, 'VDC', '000027', 'Relation', 'N', 'Y', 'RELATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'RELATION' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 593, 'VDC', '000028', 'Official Email', 'N', 'Y', 'OFFICIAL EMAIL', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'OFFICIAL EMAIL' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 594, 'VDC', '000029', 'Official Contact Number', 'N', 'Y', 'OFFICIAL CONTACT NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' " +
        //            "from dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'OFFICIAL CONTACT NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 595, 'VDC', '000030', 'Apply for Transport', 'N', 'Y', 'APPLY FOR TRANSPORT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'APPLY FOR TRANSPORT' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 596, 'VDC', '000031', 'Pickup Location', 'N', 'Y', 'PICKUP LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'PICKUP LOCATION' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 597, 'VDC', '000032', 'Drop Location', 'N', 'Y', 'DROP LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'DROP LOCATION' and param5 = 'EMPLOYEE DETAIL')");

        //        //execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        //    "select 598, 'VDC', '000033', 'Lat-Long', 'N', 'Y', 'LAT-LONG', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //        //    "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'LAT-LONG' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 599, 'VDC', '000034', 'Google Address', 'N', 'Y', 'GOOGLE ADDRESS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'GOOGLE ADDRESS' and param5 = 'EMPLOYEE DETAIL')");

        //        //execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        //    "select 600, 'VDC', '000035', 'Locate Your Location', 'N', 'Y', 'LOCATE YOUR LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //        //    "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'LOCATE YOUR LOCATION' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 601, 'VDC', '000036', 'Address', 'N', 'Y', 'ADDRESS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'ADDRESS' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 602, 'VDC', '000037', 'Pincode', 'N', 'Y', 'PINCODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'PINCODE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 603, 'VDC', '000038', 'Village/Sector', 'N', 'Y', 'VILLAGE/SECTOR', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'VILLAGE/SECTOR' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 604, 'VDC', '000039', 'Tehsil/Sub District', 'N', 'Y', 'TEHSIL/SUB DISTRICT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'TEHSIL/SUB DISTRICT' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 605, 'VDC', '000040', 'District', 'N', 'Y', 'DISTRICT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'DISTRICT' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 606, 'VDC', '000041', 'State', 'N', 'Y', 'STATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'STATE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 607, 'VDC', '000042', 'Country', 'N', 'Y', 'COUNTRY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'COUNTRY' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 608, 'VDC', '000043', 'Current Address same as Permanent Address', 'N', 'Y', 'CURRENT ADDRESS SAME AS PERMANENT ADDRESS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'CURRENT ADDRESS SAME AS PERMANENT ADDRESS' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 609, 'VDC', '000044', 'If Any Disability', 'N', 'Y', 'IF ANY DISABILITY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'IF ANY DISABILITY' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 610, 'VDC', '000045', 'PAN Number', 'N', 'Y', 'PAN NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'PAN NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 611, 'VDC', '000046', 'PF Number', 'N', 'Y', 'PF NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'PF NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 612, 'VDC', '000047', 'PF UAN', 'N', 'Y', 'PF UAN', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'PF UAN' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 613, 'VDC', '000048', 'ESI Number', 'N', 'Y', 'ESI NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from " +
        //            "dual where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'ESI NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 614, 'VDC', '000049', 'Biometric Id', 'N', 'Y', 'BIOMETRIC ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'BIOMETRIC ID' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 615, 'VDC', '000050', 'Passport Number', 'N', 'Y', 'PASSPORT NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'PASSPORT NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 616, 'VDC', '000051', 'Valid Up To', 'N', 'Y', 'VALID UP TO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual where " +
        //            "Not EXISTS(select name from controls where type = 'VDC' and param3 = 'VALID UP TO' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 617, 'VDC', '000052', 'Employee Code', 'N', 'Y', 'EMPLOYEE CODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'EMPLOYEE CODE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 618, 'VDC', '000053', 'External Employee Code', 'N', 'Y', 'EXTERNAL EMPLOYEE CODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'EXTERNAL EMPLOYEE CODE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 619, 'VDC', '000054', 'Old Employee Code', 'N', 'Y', 'OLD EMPLOYEE CODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'OLD EMPLOYEE CODE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 620, 'VDC', '000055', 'Joining Date', 'N', 'Y', 'JOINING DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'JOINING DATE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 621, 'VDC', '000056', 'Leaving Date', 'N', 'Y', 'LEAVING DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'LEAVING DATE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 622, 'VDC', '000057', 'Leave Reason', 'N', 'Y', 'LEAVE REASON', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'LEAVE REASON' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 623, 'VDC', '000058', '000058', 'N', 'Y', 'JOINEE TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'JOINEE TYPE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 624, 'VDC', '000059', 'Language Known', 'N', 'Y', 'LANGUAGE KNOWN', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'LANGUAGE KNOWN' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 625, 'VDC', '000060', 'Referred By', 'N', 'Y', 'REFERRED BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'REFERRED BY' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 626, 'VDC', '000061', 'VPF', 'N', 'Y', 'VPF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'VPF' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 627, 'VDC', '000062', 'Change PF Limit', 'N', 'Y', 'CHANGE PF LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'CHANGE PF LIMIT' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //            " select 628, 'VDC', '000063', 'Canteen', 'N', 'Y', 'CANTEEN', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'CANTEEN' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 629, 'VDC', '000064', 'Pension Number', 'N', 'Y', 'PENSION NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'JOINEE TYPE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 630, 'VDC', '000065', 'Health Certificate', 'N', 'Y', 'HEALTH CERTIFICATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'HEALTH CERTIFICATE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, " insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 631, 'VDC', '000066', 'Employee Photo', 'N', 'Y', 'EMPLOYEE PHOTO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'EMPLOYEE PHOTO' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 632, 'VDC', '000067', 'Department', 'N', 'Y', 'DEPARTMENT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'DEPARTMENT' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 633, 'VDC', '000068', 'Designation', 'N', 'Y', 'DESIGNATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'DESIGNATION' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 634, 'VDC', '000069', 'Employee Type', 'N', 'Y', 'EMPLOYEE TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'EMPLOYEE TYPE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 635, 'VDC', '000070', 'Employee Category', 'N', 'Y', 'EMPLOYEE CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'EMPLOYEE CATEGORY' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 695, 'VDC', '000071', 'Bank Name', 'N', 'Y', 'BANK NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'BANK NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 696, 'VDC', '000072', 'Account Number', 'N', 'Y', 'ACCOUNT NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'ACCOUNT NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 697, 'VDC', '000073', 'IFSC Code', 'N', 'Y', 'IFSC CODE', '0', '" + clientid_mst + "', '001001', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'IFSC CODE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 698, 'VDC', '000074', 'Account Type', 'N', 'Y', 'ACCOUNT TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'ACCOUNT TYPE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 699, 'VDC', '000075', 'MICR Number', 'N', 'Y', 'MICR NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'MICR NUMBER' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 700, 'VDC', '000076', 'Blank Cheque', 'N', 'Y', 'BLANK CHEQUE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'EMPLOYEE CATEGORY' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 701, 'VDC', '000077', 'Date Of Marriage', 'N', 'Y', 'DATE OF MARRIAGE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'DATE OF MARRIAGE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //            " select 702, 'VDC', '000078', 'Spouse Name', 'N', 'Y', 'SPOUSE NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'SPOUSE NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 703, 'VDC', '000079', 'Do You Have Children?', 'N', 'Y', 'DO YOU HAVE CHILDREN?', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'DO YOU HAVE CHILDREN?' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 704, 'VDC', '000080', 'Organisation Name', 'N', 'Y', 'ORGANISATION NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and id='000080' and param3 = 'ORGANISATION NAME' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 'VDC', '000081', 'Disability Type', 'N', 'Y', 'DISABILITY TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and id='000081' and param3 = 'DISABILITY TYPE' and param5 = 'EMPLOYEE DETAIL')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 'VDC', '000082', 'Designation', 'N', 'Y', 'CURRENTLY DESIGNATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and id='000082' and param3 = 'CURRENTLY DESIGNATION' and param5 = 'EMPLOYEE DETAIL')");


        //        #endregion


        //        //kc26082019
        //        #region 26082019
        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1500', '11004.1'," +
        //" 'Nature of Activity', '../Mst/master_ctrl', '3', '-', '-', '0', '-', 'chkl', 'tskmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'nature of activity' and " +
        //"m_id = '11004.1' and m_module3 = 'tskmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1501', '11004.2'," +
        //" 'CheckList Master', '../Mst/master_ctrl', '3', '-', '-', '0', '-', 'chkl', 'tskmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'checklist master' and " +
        //"m_id = '11004.2' and m_module3 = 'tskmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1502', '20006.7'," +
        //" 'Forward Currency Master', '../Mst/master_ctrl', '3', '-', '-', '0', '-', 'exbm', 'eximmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'forward currency master' and " +
        //"m_id = '20006.7' and m_module3 = 'eximmain')");

        //        #endregion

        //        //Brijessh
        //        #region Daily Work
        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 708, 'VDC', '000001', 'Doc No.', 'N', 'Y', 'Doc No.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Doc No.' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select" +
        //            " 709, 'VDC', '000002', 'Doc Date', 'N', 'Y', 'Doc Date', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Doc Date' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 710, 'VDC', '000003', 'Select Client', 'N', 'Y', 'Select Client', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Select Client' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select " +
        //            "711, 'VDC', '000004', 'Client Address', 'N', 'Y', 'Client Address', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Client Address' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select" +
        //            " 712, 'VDC', '000005', 'Contact Person', 'N', 'Y', 'Contact Person', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Contact Person' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select " +
        //            "713, 'VDC', '000006', 'Client Contact Number', 'N', 'Y', 'Client Contact Number', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Client Contact Number' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, " insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select " +
        //            "714, 'VDC', '000007', 'Select Menu', 'N', 'Y', 'Select Menu', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Select Menu' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select" +
        //            " 715, 'VDC', '000008', 'Module', 'N', 'Y', 'Module', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Module' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select " +
        //            "716, 'VDC', '000009', 'Nature Of Work', 'N', 'Y', 'Nature Of Work', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Nature Of Work' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 717, 'VDC', '000010', 'Work Date', 'N', 'Y', 'Work Date', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Work Date' and param5 = 'DAILY WORK')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select " +
        //            "718, 'VDC', '000011', 'Remark', 'N', 'Y', 'Remark', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'DAILY WORK' from dual" +
        //            " where Not EXISTS(select name from controls where type = 'VDC' and param3 = 'Remark' and param5 = 'DAILY WORK')");

        //        #endregion

        //        //reena
        //        execute_cmd(usercode, "alter table clients_mst add cpdept varchar(50)");
        //        execute_cmd(usercode, "update menus set m_link='../Purchase/party' where m_id in ('16000.2.2','40002.1','41005.8','28005.1')");
        //        //execute_cmd(usercode, "delete from menus  where m_id='7020.5' and m_name='PTM Discussion'");
        //        //execute_cmd(usercode, "delete from menus  where m_id='7020.7' and m_name='PTM Report'");
        //        execute_cmd(usercode, "alter table  clients_mst add lsrno varchar(6)");
        //        execute_cmd(usercode, "alter table  clients_mst add (bnkaddr varchar(200), micrno varchar(20)," +
        //            "acctype varchar(3),curtype varchar(3),bnk varchar(3),swftcd varchar(20),contr varchar(1))");



        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1503', '19000.4'," +
        //" 'Performance Master', '-', '2', 'fa fa-gears', 'nav child_menu', '1', 'perf', 'schpermain', 'schpermain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'performance master' and " +
        //"m_id = '19000.4' and m_module3 = 'schpermain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1504', '190004.1'," +
        //" 'Nature Of Work', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'perf', 'schpermain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'nature of work' and " +
        //"m_id = '190004.1' and m_module3 = 'schpermain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1505', '190004.2'," +
        //" 'Daily Work Config', '../Mst/form_ctrl', '3', '0', '0', '0', '-', 'perf', 'schpermain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'daily work config' and " +
        //"m_id = '190004.2' and m_module3 = 'schpermain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1506', '17001.25'," +
        //" 'Form Control', '../Mst/form_ctrl', '3', '0', '0', '0', '-', 'bhim', 'bhmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'form control' and " +
        //"m_id = '17001.25' and m_module3 = 'bhmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1507', '40001.7'," +
        //" 'Form Control', '../Mst/form_ctrl', '3', '0', '0', '0', '-', 'crmv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'form control' and " +
        //"m_id = '40001.7' and m_module3 = 'crmvmain')");//1

        //        //reena 29 aug 2019
        //        execute_cmd(usercode, "alter table controls add(param5 varchar(100),param6 varchar(20),param7 varchar(20))");

        //        execute_cmd(usercode, "alter table clients_mst add (sch_cat varchar(100),sch_med varchar(100),no_std varchar(4), no_teach varchar(4), Aff_type varchar(50), pincode_2 varchar(6))");

        //        //reena 30 aug 2019

        //        execute_cmd(usercode, "alter table clients_mst add(salesarea varchar(3),addtype1 varchar(3),addtype2 varchar(3))");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1508', '40001.8'," +
        //" 'Type Of Address', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'crmv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'type of address' and " +
        //"m_id = '40001.8' and m_module3 = 'crmvmain')");

        //31 aug 2019
        //        execute_cmd(usercode, "alter table clients_mst add (website varchar(100),leadsrc varchar(3),cp_mname varchar(50),cp_lname varchar(50))");
        //        execute_cmd(usercode, "alter table itransactionc add req_by  varchar(100)");
        //        execute_cmd(usercode, "alter table itransaction add req_by  varchar(100)");

        //        #region kc 09092019
        //        execute_cmd(usercode, "alter table btchtrans add rno varchar(10)");
        //        #endregion

        //        #region kc_16092019
        //        execute_cmd(usercode, "alter table iprod add qtychl varchar(10)");
        //        execute_cmd(usercode, "alter table iprod add stage1 varchar(3)");
        //        execute_cmd(usercode, "alter table iprod add acode varchar(10);");

        //        #endregion

        //        #region kc_17092019
        //        execute_cmd(usercode, "alter table itransactionc add rno varchar2(10)");
        //        #endregion

        //        #region kc_19092019
        //        execute_cmd(usercode, "alter table item add nonstk varchar2(1)");
        //        #endregion

        //        #region kc_23092019
        //        execute_cmd(usercode, "alter table btchtrans add irate varchar2(20)");
        //        execute_cmd(usercode, "alter table btchtrans add iamount varchar2(20);");
        //        #endregion

        //        #region reena_25092019
        //        execute_cmd(usercode, "alter table clients_mst add(Pros varchar(1),Prosno varchar(6))");
        //        #endregion

        //        #region kc_27092019

        //        execute_cmd(usercode, "alter table itransaction add gigst varchar2(15);");
        //        execute_cmd(usercode, "alter table itransaction add gcgst varchar2(15);");
        //        execute_cmd(usercode, "alter table itransaction add gsgst varchar2(15);");

        //        execute_cmd(usercode, "alter table purchases add gigst varchar2(15);");
        //        execute_cmd(usercode, "alter table purchases add gcgst varchar2(15);");
        //        execute_cmd(usercode, "alter table purchases add gsgst varchar2(15);");

        //        execute_cmd(usercode, "alter table itransaction add mmt varchar2(3);");
        //        execute_cmd(usercode, "alter table itransactionc add mmt varchar2(3);");
        //        execute_cmd(usercode, "alter table btchtrans add mmt varchar2(3);");
        //        #endregion

        //        #region reena_28092019
        //        execute_cmd(usercode, "alter table clients_mst add(CIN_Number varchar(25),comp_email varchar(50) )");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //            "select '1269', 'VDC', '000075', 'CIN Number', 'N', 'Y', 'CIN NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual" +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'CIN NUMBER' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1270', 'VDC', '000075', 'CIN Number', 'N', 'Y', 'CIN NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'CIN NUMBER' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1271', 'VDC', '000075', 'CIN Number', 'N', 'Y', 'CIN NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'CIN NUMBER' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1272', 'VDC', '000075', 'CIN Number', 'N', 'Y', 'CIN NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'CIN NUMBER' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1273', 'VDC', '000075', 'CIN Number', 'N', 'Y', 'CIN NUMBER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'CIN NUMBER' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select '1274', 'VDC', '000076', 'Email Id', 'N', 'Y', 'ORG EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //            "where not exists(select param2 from controls where type = 'VDC' and param3 = 'ORG EMAIL ID' and param5 = 'NEW CLIENT') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1275', 'VDC', '000076', 'Email Id', 'N', 'Y', 'ORG EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'ORG EMAIL ID' and param5 = 'VENDOR DETAIL') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1276', 'VDC', '000076', 'Email Id', 'N', 'Y', 'ORG EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'ORG EMAIL ID' and param5 = 'CUSTOMER DETAIL') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select '1277', 'VDC', '000076', 'Email Id', 'N', 'Y', 'ORG EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'ORG EMAIL ID' and param5 = 'PUBLISHER') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1278', 'VDC', '000076', 'Email Id', 'N', 'Y', 'ORG EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'ORG EMAIL ID' and param5 = 'PROSPECT DATA') ");

        //        #endregion

        //        #region reena_30092019
        //        execute_cmd(usercode, "alter table  lead_master add (cp_ref_type varchar(3),lead_con varchar(1))");
        //        #endregion

        //        #region brijesh 30092019
        //        execute_cmd(usercode, "alter table purchasesc add (date1 Date,date2 Date)");
        //        #endregion

        //        #region reena 01102019
        //        //execute_cmd(usercode, "update controls set id='000011' where rec_id='1138' and param5='NEW CLIENT'");
        //        execute_cmd(usercode, "alter table clients_mst modify (PANNO varchar(11),c_gstin varchar(16),IFSC varchar(12))");
        //        execute_cmd(usercode, "alter table  clients_mst add bsn_type varchar(6)");
        //        //execute_cmd(usercode, "update controls set name='Email Id',param3='EMAIL ID' where  rec_id in (1274,1275,1276,1277,1278)"); // 26102019

        //        //execute_cmd(usercode, "update controls set name='Type Of Account' ,param3='TYPE OF ACCOUNT' where rec_id in (729,887,977,386,1201,1051,1138)"); // 261082019

        //        //execute_cmd(usercode, "update controls set name='Organisation Status' ,param3='ORGANISATION STATUS' where rec_id in (668,727,885,975,384,1049,1199)"); //26102019

        //        execute_cmd(usercode, "");// 26102019

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //           "select '1279', 'VDC', '000077', 'Business Type', 'N', 'Y', 'BUSINESS TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //           "where not exists(select param2 from controls where type = 'VDC' and param3 = 'BUSINESS TYPE' and param5 = 'NEW CLIENT') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1280', 'VDC', '000077', 'Business Type', 'N', 'Y', 'BUSINESS TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'BUSINESS TYPE' and param5 = 'VENDOR DETAIL') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1281', 'VDC', '000077', 'Business Type', 'N', 'Y', 'BUSINESS TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3= 'BUSINESS TYPE' and param5 = 'CUSTOMER DETAIL') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select '1282', 'VDC', '000077', 'Business Type', 'N', 'Y', 'BUSINESS TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3= 'BUSINESS TYPE' and param5 = 'PUBLISHER') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1283', 'VDC', '000077', 'Business Type', 'N', 'Y', 'BUSINESS TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'BUSINESS TYPE' and param5 = 'PROSPECT DATA') ");
        //        #endregion
        //        #region reena 03102019
        //        execute_cmd(usercode, "alter table lead_master modify ld_product varchar(100)");
        //        execute_cmd(usercode, "alter table lead_master add bsn_type varchar(100)");
        //        execute_cmd(usercode, "alter table clients_mst add (prd_type varchar(100),Parent_id varchar(6))");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //           "select '1284', 'VDC', '000078', 'Existing Product', 'N', 'Y', 'EXISTING PRODUCT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //           "where not exists(select param2 from controls where type = 'VDC' and param3 = 'EXISTING PRODUCT' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1285', 'VDC', '000078', 'Existing Product', 'N', 'Y', 'EXISTING PRODUCT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'EXISTING PRODUCT' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1286', 'VDC', '000078', 'Existing Product', 'N', 'Y', 'EXISTING PRODUCT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'EXISTING PRODUCT' and param5 = 'CUSTOMER DETAIL') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select '1287', 'VDC', '000078', 'Existing Product', 'N', 'Y', 'EXISTING PRODUCT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'EXISTING PRODUCT' and param5 = 'PUBLISHER') ");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            " select '1288', 'VDC', '000078', 'Existing Product', 'N', 'Y', 'EXISTING PRODUCT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //            " where not exists(select param2 from controls where type = 'VDC' and param3 = 'EXISTING PRODUCT' and param5 = 'PROSPECT DATA') ");
        //        #endregion        

        //        #region kc_03102019

        //        execute_cmd(usercode, "alter table itransaction add netamt varchar2(20);");
        //        execute_cmd(usercode, "alter table itransactionc add netamt varchar2(20);");
        //        execute_cmd(usercode, "alter table purchases add netamt varchar2(20);");
        //        #endregion

        //        #region brijesh 04102019
        //        execute_cmd(usercode, "alter table kc_tab add (date7 Date,date8 Date,date9 Date)");
        //        #endregion

        //        #region brijesh 10102019
        //        execute_cmd(usercode, "alter table itransaction add (date3 Date,date4 Date)");
        //        #endregion

        //        #region reena 7102019
        //        execute_cmd(usercode, "alter table clients_mst modify(cpcont varchar(15),cpaltcont varchar(15),cplandno varchar(15))");
        //        execute_cmd(usercode, "alter table lead_master modify(mobile_no varchar(15),contact_no varchar(15),al_contact varchar(15))");
        //        #endregion

        //        #region reena 11102019
        //        execute_cmd(usercode, "alter table clients_mst modify(c_name varchar(50))");
        //        execute_cmd(usercode, "alter table clients_mst modify(c_name varchar(50))");

        //        #endregion

        //        #region kc_11102019

        //        execute_cmd(usercode, "alter table item add sale varchar2(1);");
        //        #endregion

        //        #region reena_15102019

        //        execute_cmd(usercode, "alter table clients_mst modify(ADDR varchar(250),cpaddr varchar(250),cpaddr2 varchar(250))");
        //        execute_cmd(usercode, "alter table clients_mst modify(c_name varchar(100),cpname varchar(100))");
        //        execute_cmd(usercode, "update menus set m_name='Organisation Status' where m_id='28005.3'");
        //        execute_cmd(usercode, "update menus set m_name='Type Of Account' where m_id='40001.3'");
        //        execute_cmd(usercode, "update menus set m_name='Business Type' where m_id='40001.4'");
        //        execute_cmd(usercode, "update menus set m_name='Add Family Detail' where m_id='40002.3'");

        //        #endregion

        //        #region Brijesh_16102019

        //        string xDate = server_datetime(usercode);
        //        execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby," +
        //            "master_editdate,created_date,type,master_type,master_status,ISROLLNOREGWISE, ISREGNOCHANGE, ISRECEIPTNOCHANGE, ISROLLNOCHANGE, ISSCHOOLBASED, ISCLASSBASED, ISSECTIONBASED," +
        //            "ISADMISSION_WISE, ISALPHABETIC_WISE, ISREGFEESBEFOREADM, SECTIONID, SECTION_STRENGTH, SUBJECT_STRENGTH, OPTIONAL_SUBJECT,TEACHER_CATEGORY, GROUP_NAME, UNIT_NAME," +
        //            "CONT_PERSON_NAME, CONT_PERSON_NUMBER, CONT_PERSON_ALTNUMBER, CONT_PERSON_EMAIL,GROUP_REFRENCE_NUMBER, GROUP_ID, CLIENT_GSTIN, CONTENT, CLIENT_ID, CLIENT_UNIT_ID," +
        //            "SECTIONTYPE, FEMALERATIO, MALERATIO, STATUS, INACTIVE_DATE)" +
        //            " select '0', '001','Invoice Format 1','gst_inv3', '000001',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "'," +
        //            "to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS')," +
        //            " to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'IRF','Invoice Reports','0','0','0','0','0','0','0','0','0','0','0','0','0', " +
        //            "'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', '0', '0', 'Y'," +
        //            " to_date('" + xDate + "', 'YYYY-MM-DD HH24:MI:SS') from dual where NOT EXISTS(select master_name from master_setting where type='IRF' " +
        //            " and master_name='Invoice Format 1' )");

        //        //    execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby," +
        //        //"master_editdate,created_date,type,master_type,master_status,ISROLLNOREGWISE, ISREGNOCHANGE, ISRECEIPTNOCHANGE, ISROLLNOCHANGE, ISSCHOOLBASED, ISCLASSBASED, ISSECTIONBASED," +
        //        //"ISADMISSION_WISE, ISALPHABETIC_WISE, ISREGFEESBEFOREADM, SECTIONID, SECTION_STRENGTH, SUBJECT_STRENGTH, OPTIONAL_SUBJECT,TEACHER_CATEGORY, GROUP_NAME, UNIT_NAME," +
        //        //"CONT_PERSON_NAME, CONT_PERSON_NUMBER, CONT_PERSON_ALTNUMBER, CONT_PERSON_EMAIL,GROUP_REFRENCE_NUMBER, GROUP_ID, CLIENT_GSTIN, CONTENT, CLIENT_ID, CLIENT_UNIT_ID," +
        //        //"SECTIONTYPE, FEMALERATIO, MALERATIO, STATUS, INACTIVE_DATE)" +
        //        //" select '0', '002','Invoice Format 2','gst_inv3', '000002',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "'," +
        //        //"to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS')," +
        //        //" to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'IRF','Invoice Reports','0','0','0','0','0','0','0','0','0','0','0','0','0', " +
        //        //"'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', '0', '0', 'Y'," +
        //        //" to_date('" + xDate + "', 'YYYY-MM-DD HH24:MI:SS') from dual where NOT EXISTS(select master_name from master_setting where type='IRF' " +
        //        //" and master_name='Invoice Format 2' )");

        //        //    execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby," +
        //        //"master_editdate,created_date,type,master_type,master_status,ISROLLNOREGWISE, ISREGNOCHANGE, ISRECEIPTNOCHANGE, ISROLLNOCHANGE, ISSCHOOLBASED, ISCLASSBASED, ISSECTIONBASED," +
        //        //"ISADMISSION_WISE, ISALPHABETIC_WISE, ISREGFEESBEFOREADM, SECTIONID, SECTION_STRENGTH, SUBJECT_STRENGTH, OPTIONAL_SUBJECT,TEACHER_CATEGORY, GROUP_NAME, UNIT_NAME," +
        //        //"CONT_PERSON_NAME, CONT_PERSON_NUMBER, CONT_PERSON_ALTNUMBER, CONT_PERSON_EMAIL,GROUP_REFRENCE_NUMBER, GROUP_ID, CLIENT_GSTIN, CONTENT, CLIENT_ID, CLIENT_UNIT_ID," +
        //        //"SECTIONTYPE, FEMALERATIO, MALERATIO, STATUS, INACTIVE_DATE)" +
        //        //" select '0', '003','Invoice Format 3','gst_inv3', '000003',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "'," +
        //        //"to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS')," +
        //        //" to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'IRF','Invoice Reports','0','0','0','0','0','0','0','0','0','0','0','0','0', " +
        //        //"'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', '0', '0', 'Y'," +
        //        //" to_date('" + xDate + "', 'YYYY-MM-DD HH24:MI:SS') from dual where NOT EXISTS(select master_name from master_setting where type='IRF' " +
        //        //" and master_name='Invoice Format 3' )");

        //        //    execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby," +
        //        //"master_editdate,created_date,type,master_type,master_status,ISROLLNOREGWISE, ISREGNOCHANGE, ISRECEIPTNOCHANGE, ISROLLNOCHANGE, ISSCHOOLBASED, ISCLASSBASED, ISSECTIONBASED," +
        //        //"ISADMISSION_WISE, ISALPHABETIC_WISE, ISREGFEESBEFOREADM, SECTIONID, SECTION_STRENGTH, SUBJECT_STRENGTH, OPTIONAL_SUBJECT,TEACHER_CATEGORY, GROUP_NAME, UNIT_NAME," +
        //        //"CONT_PERSON_NAME, CONT_PERSON_NUMBER, CONT_PERSON_ALTNUMBER, CONT_PERSON_EMAIL,GROUP_REFRENCE_NUMBER, GROUP_ID, CLIENT_GSTIN, CONTENT, CLIENT_ID, CLIENT_UNIT_ID," +
        //        //"SECTIONTYPE, FEMALERATIO, MALERATIO, STATUS, INACTIVE_DATE)" +
        //        //" select '0', '004','Invoice Format 4','gst_inv3', '000004',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "'," +
        //        //"to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS')," +
        //        //" to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'IRF','Invoice Reports','0','0','0','0','0','0','0','0','0','0','0','0','0', " +
        //        //"'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', '0', '0', 'Y'," +
        //        //" to_date('" + xDate + "', 'YYYY-MM-DD HH24:MI:SS') from dual where NOT EXISTS(select master_name from master_setting where type='IRF' " +
        //        //" and master_name='Invoice Format 4' )");

        //        //    execute_cmd(usercode, "insert into  master_setting (classid,master_id,master_name,client_name,vch_num,vch_date,master_entby,master_entdate,master_editby," +
        //        //"master_editdate,created_date,type,master_type,master_status,ISROLLNOREGWISE, ISREGNOCHANGE, ISRECEIPTNOCHANGE, ISROLLNOCHANGE, ISSCHOOLBASED, ISCLASSBASED, ISSECTIONBASED," +
        //        //"ISADMISSION_WISE, ISALPHABETIC_WISE, ISREGFEESBEFOREADM, SECTIONID, SECTION_STRENGTH, SUBJECT_STRENGTH, OPTIONAL_SUBJECT,TEACHER_CATEGORY, GROUP_NAME, UNIT_NAME," +
        //        //"CONT_PERSON_NAME, CONT_PERSON_NUMBER, CONT_PERSON_ALTNUMBER, CONT_PERSON_EMAIL,GROUP_REFRENCE_NUMBER, GROUP_ID, CLIENT_GSTIN, CONTENT, CLIENT_ID, CLIENT_UNIT_ID," +
        //        //"SECTIONTYPE, FEMALERATIO, MALERATIO, STATUS, INACTIVE_DATE)" +
        //        //" select '0', '005','Invoice Format 5','gst_inv3', '000005',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "'," +
        //        //"to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'" + userid + "',to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS')," +
        //        //" to_date('" + xDate + "','YYYY-MM-DD HH24:MI:SS'),'IRF','Invoice Reports','0','0','0','0','0','0','0','0','0','0','0','0','0', " +
        //        //"'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', '0', '0', 'Y'," +
        //        //" to_date('" + xDate + "', 'YYYY-MM-DD HH24:MI:SS') from dual where NOT EXISTS(select master_name from master_setting where type='IRF' " +
        //        //" and master_name='Invoice Format 5' )");
        //        #endregion

        //        #region reena_16102019
        //        execute_cmd(usercode, "update menus set m_name='Account Detail' where m_id='40002'");
        //        execute_cmd(usercode, "update menus set m_name='New Account' where m_id='40002.1'");
        //        execute_cmd(usercode, "update menus set m_name='List Of Accounts' where m_id='40002.6'");
        //        execute_cmd(usercode, "update menus set m_name='Account Property' where m_id='40002.4'");
        //        execute_cmd(usercode, "alter table lead_master modify(remark varchar(500))");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1555', '17001.28'," +
        //" 'Doc Template', '../Education/rpt_temp', '3', '0', '0', '0', '-', 'bhim', 'bhmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'doc template' and " +
        //"m_id = '17001.28' and m_module3 = 'bhmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1556', '21001.13'," +
        //" 'Doc Print Template', '../Mst/prn_ctrl', '3', '0', '0', '0', '-', 'bmas', 'bnpmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'doc print template' and " +
        //"m_id = '21001.13' and m_module3 = 'bnpmain')");


        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1557', '39001.14'," +
        //" 'Doc Template', '../Education/rpt_temp', '3', '0', '0', '0', '-', 'pdmas', 'pdmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'doc template' and " +
        //"m_id = '39001.14' and m_module3 = 'pdmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1558', '38001.5'," +
        //" 'Doc Template', '../Education/rpt_temp', '3', '0', '0', '0', '-', 'mainm', 'pmmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'doc template' and " +
        //"m_id = '38001.5' and m_module3 = 'pmmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1559', '17001.28'," +
        //" 'Doc Print Template', '../Mst/prn_ctrl', '3', '0', '0', '0', '-', 'invm', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'doc print template' and " +
        //"m_id = '17001.28' and m_module3 = 'invtmain')");



        //        #endregion

        //        #region kc17102019
        //        execute_cmd(usercode, "alter table itransaction add pktno varchar2(6);");
        //        execute_cmd(usercode, "alter table itransactionc add pktno varchar2(6);");
        //        #endregion


        //        #region reena 19102019
        //        //execute_cmd(usercode, "delete from menus where m_id='21008.2'");
        //        execute_cmd(usercode, "update  menus set m_link='../Purchase/party' where m_id='21008.1'");
        //        //execute_cmd(usercode, "delete from menus where  rec_id in(1250,1518)");
        //        //execute_cmd(usercode, "delete from controls where param3 in ('LAT-LONG','GOOGLE ADDRESS','SEARCH HERE')");
        //        execute_cmd(usercode, "alter table clients_mst add pay_term varchar(3)");
        //        execute_cmd(usercode, "alter table lead_master add (google_add varchar(100),latlong varchar(250))");

        //        //execute_cmd(usercode, "delete from  menus where m_name in ('Client Unit','List of Units','Enquiry')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1535', '40001.7'," +
        //" 'Form Control', '../Mst/form_ctrl', '3', '0', '0', '0', '-', 'bmas', 'bnpmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'form control' and " +
        //"m_id = '40001.7' and m_module3 = 'bnpmain')");//2

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1560', '17001.25'," +
        //" 'Form Control', '../Mst/form_ctrl', '3', '0', '0', '0', '-', 'purm', 'purmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'form control' and " +
        //"m_id = '17001.25' and m_module3 = 'purmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1561', '28004.11'," +
        //" 'Payment Term Master', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'invm', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'payment term master' and " +
        //"m_id = '28004.11' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1562', '28004.11'," +
        //" 'Payment Term Master', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'bhim', 'bhmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'payment term master' and " +
        //"m_id = '28004.11' and m_module3 = 'bhmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1563', '28004.11'," +
        //" 'Payment Term Master', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'crmv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'payment term master' and " +
        //"m_id = '28004.11' and m_module3 = 'crmvmain')");



        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //           " select '1329', 'VDC', '000031', 'Country Code', 'N', 'Y', 'COUNTRY CODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
        //           " where not exists(select param2 from controls where type = 'VDC' and param3 = 'COUNTRY CODE' and param5 = 'LEAD MASTER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //           " select '1330', 'VDC', '000032', 'Geo Location', 'N', 'Y', 'GEO LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
        //           " where not exists(select param2 from controls where type = 'VDC' and param3 = 'GEO LOCATION' and param5 = 'LEAD MASTER')");

        //        #endregion

        //        #region Brijesh19102019
        //        execute_cmd(usercode, "alter table itransaction add (sono varchar(20),sdlno varchar(20), dspno varchar(20), sodate date,sdldate date,dspdate date)");
        //        #endregion
        //        #region kc18102019
        //        execute_cmd(usercode, "alter table item add pdi varchar2(1);");

        //        #endregion

        //        #region kc22102019
        //        execute_cmd(usercode, "update menus set m_link='../Billing/itemgrp' where m_id in ('17001.5','41005.1')");
        //        #endregion

        //        #region reena 31102019
        //        execute_cmd(usercode, "alter table kc_tab add(date20 date,date21 date,date22 date,date23 date,date24 date,date25 date,date26 date,date27 date,date28 date)");
        //        #endregion
        //        #region reena 02112019
        //        execute_cmd(usercode, "alter table clients_mst add(msme_from date,msme_upto date ,fix_credit varchar(20),temp_credit varchar(20),valid_credit date)");
        //        #endregion

        //        #region reena04112019
        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1564', '39008'," +
        //" 'Production Planning', '-', '2', 'fa fa-gears', 'nav child_menu', '1', 'pp', 'pdmain', 'pdmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-04 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'production planning' and " +
        //"m_id = '39008' and m_module3 = 'pdmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1565', '39008.1'," +
        //" 'Production Order', '../Production/p_ord', '3', '0', '0', '0', '-', 'pp', 'pdmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-04 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'production order' and " +
        //"m_id = '39008.1' and m_module3 = 'pdmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1566', '40004.5'," +
        //" 'General Message', '../Vastu/gen_msg', '3', '0', '0', '0', '-', 'vastukb', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-04 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'general message' and " +
        //"m_id = '40004.5' and m_module3 = 'crmvmain')");

        //        execute_cmd(usercode, "alter table kc_tab add (col48 clob,date29 date,date30 date,date31 date,date32 date,col49 varchar(50),col50 varchar(50),col51 varchar(50),col52 varchar(50),col53 varchar(50),col54 varchar(50))");
        //        #endregion

        //        #region reena05112019

        //        execute_cmd(usercode, "alter table clients_mst add msme_cert date");

        //        #endregion

        //        #region reena 06112019
        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1567', '28007'," +
        //" 'Report', '-', '2', 'fa fa-gears', 'nav child_menu', '1', 'prpt', 'purmain', 'purmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-06 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'report' and " +
        //"m_id = '28007' and m_module3 = 'purmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1568', '28007.1'," +
        //" 'Pur Report', '../Purchase/pur_rpt', '3', '0', '0', '0', '-', 'prpt', 'purmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-06 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'pur report' and " +
        //"m_id = '28007.1' and m_module3 = 'purmain')");

        //        execute_cmd(usercode, "alter table kc_tab add (col55 varchar(50),col56 varchar(50),col57 varchar(50),col58 varchar(50),col59 varchar(5),col60 varchar(5),col61 varchar(5),col62 varchar(5),col63 varchar(5),col64 varchar(5),col65 varchar(5),col66 varchar(5),col67 varchar(5),col68 varchar(50),col69 varchar(200))");
        //        execute_cmd(usercode, "alter table kc_tab add(col70 varchar(6),col71 varchar(6),col72 varchar(6),date33 date,date34 date)");
        //        #endregion


        //        #region Brijesh07112019
        //        execute_cmd(usercode, "alter table ledger_master add ledger_code varchar(12)");
        //        #endregion

        //        #region reena07112019

        //        execute_cmd(usercode, "alter table clients_mst modify lsrno varchar(12)");
        //        execute_cmd(usercode, "update menus set m_link='../Purchase/party' where m_id='9008.6'");

        //        #endregion

        //        #region reena08112019
        //        execute_cmd(usercode, "alter table ledger_master modify(LEDGER_ABB varchar(25))");
        //        execute_cmd(usercode, "alter table master_setting modify(sectionid varchar(22)))");
        //        execute_cmd(usercode, "alter table clients_mst modify lsrno varchar(12)");

        //        #endregion

        //        #region reena 09112019

        //        execute_cmd(usercode, "alter table teacher_subject add priority varchar(1)");
        //        #endregion

        //        #region reena 15112019
        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1571', '28004.12'," +
        //" 'Print Config', '../mst/prn_ctrl', '3', '0', '0', '0', '-', 'purm', 'purmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-15 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'print config' and " +
        //"m_id = '28004.12' and m_module3 = 'purmain')");
        //        #endregion

        //        #region reena 16112019
        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1572', '17002.4'," +
        //" 'Gate In', '../Inventory/g_in', '3', '0', '0', '0', '-', 'inwd', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'gate in' and " +
        //"m_id = '17002.4' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1573', '17003.5'," +
        //" 'Gate Out', '../Inventory/g_out', '3', '0', '0', '0', '-', 'outwd', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'gate out' and " +
        //"m_id = '17003.5' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1574', '17002.5'," +
        //" 'Pending Gate In', '../Inventory/p_g_in', '3', '0', '0', '0', '-', 'inwd', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'pending gate in' and " +
        //"m_id = '17002.5' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1575', '17003.6'," +
        //" 'Pending Gate Out', '../Inventory/p_g_out', '3', '0', '0', '0', '-', 'outwd', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'pending gate out' and " +
        //"m_id = '17003.6' and m_module3 = 'invtmain')");
        //        #endregion


        //        #region Brijesh19112019
        //        execute_cmd(usercode, "alter table itransaction add gatein_no varchar2(20)");
        //        #endregion


        //        #region Brijesh19112019
        //        execute_cmd(usercode, "alter table itransaction add gatein_no varchar2(20)");
        //        #endregion

        //        #region reena 19112019
        //        execute_cmd(usercode, "INSERT INTO MENUS ( M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select  '40009.3'," +
        //" 'Site HandOver', '../vastu/s_hover', '3', '0', '0', '0', '-', 'crmsv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'site handover' and " +
        //"m_id = '40009.3' and m_module3 = 'crmvmain')");
        //        #endregion

        //        #region reena21112019
        //        execute_cmd(usercode, "update menus set m_link='../Billing/s_order'  where m_id='21009.2'");
        //        #endregion

        //        #region reena22112019
        //        execute_cmd(usercode, "update menus set m_name='Lead Reports' where m_id='40005.3'");
        //        execute_cmd(usercode, " delete from menus where m_id='7002.11' and m_name='Opening Bal. Transfer' and m_module2='feemst' and m_link='../../../../school_academic_staff/Fee_Opening'");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1576',  '40008.3'," +
        //" 'Pending Orders For Assign', '-', '3', '0', '0', '0', '-', 'crmor', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', 'onclick=$menuclick(this);$','-' from dual where not exists(select m_name from menus where lower(m_name) = 'pending orders for assign' and " +
        //"m_id = '40008.3' and m_module3 = 'crmvmain')");
        //        #endregion

        //        #region brijesh23112019 sales order
        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    "select 2662, 'VDC', '000001', 'Name Of Party', 'N', 'Y', 'NAME OF PARTY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //    "where Not EXISTS(select name from controls where type = 'VDC' and id ='000001' and trim(param3) = 'NAME OF PARTY' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2663, 'VDC', '000002', 'GSTIN No.', 'N', 'Y', 'GSTIN No', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000002' and trim(param3) = 'GSTIN No' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2664, 'VDC', '000003', 'Party Address', 'N', 'Y', 'PARTY ADDRESS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000003' and trim(param3) = 'PARTY ADDRESS' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2665, 'VDC', '000004', 'Payment Terms', 'N', 'Y', 'PAYMENT TERMS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000004' and trim(param3) = 'PAYMENT TERMS' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2666, 'VDC', '000005', 'Price Terms', 'N', 'Y', 'PRICE TERMS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000005' and trim(param3) = 'PRICE TERMS' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2667, 'VDC', '000006', 'Transport Mode', 'N', 'Y', 'TRANSPORT MODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC'  and id ='000006' and trim(param3) = 'TRANSPORT MODE' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 2668, 'VDC', '000007', 'SO Mode', 'N', 'Y', 'SO MODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC'  and id ='000007' and trim(param3) = 'SO MODE' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //                    "select 2669, 'VDC', '000008', 'SO End Date', 'N', 'Y', 'SO END DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //                    "where Not EXISTS(select name from controls where type = 'VDC' and id ='000008' and trim(param3) = 'SO END DATE' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        "select 2670, 'VDC', '000009', 'PO No.', 'N', 'Y', 'PO No', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id ='000009' and trim(param3) = 'PO No' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2671, 'VDC', '000010', 'PO Date', 'N', 'Y', 'PO DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000010' and trim(param3) = 'PO DATE' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2672, 'VDC', '000011', 'Remarks', 'N', 'Y', 'REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000011' and trim(param3) = 'REMARK' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2673, 'VDC', '000012', 'General Terms And Conditions', 'N', 'Y', 'Gen_Terms_And_Condition', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000012' and trim(param3) = 'Gen_Terms_And_Condition' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2809, 'VDC', '000013', 'TEXTBOX1', 'N', 'Y', 'TEXTBOX1', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000013' and trim(param3) = 'TEXTBOX1' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2810, 'VDC', '000014', 'TEXTBOX2', 'N', 'Y', 'TEXTBOX2', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000014' and trim(param3) = 'TEXTBOX2' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2811, 'VDC', '000015', 'TEXTBOX3', 'N', 'Y', 'TEXTBOX3', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000015' and trim(param3) = 'TEXTBOX3' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //                    "select 2812, 'VDC', '000016', 'DATEBOX1', 'N', 'Y', 'DATEBOX1', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //                    "where Not EXISTS(select name from controls where type = 'VDC' and id ='000016' and trim(param3) = 'DATEBOX1' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        "select 2813, 'VDC', '000017', 'DATEBOX2', 'N', 'Y', 'DATEBOX2', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id ='000017' and trim(param3) = 'DATEBOX2' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2814, 'VDC', '000018', 'DATEBOX3', 'N', 'Y', 'DATEBOX3', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000018' and trim(param3) = 'DATEBOX3' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2815, 'VDC', '000019', 'NUMBOX1', 'N', 'Y', 'NUMBOX1', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000019' and trim(param3) = 'NUMBOX1' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2816, 'VDC', '000020', 'NUMBOX2', 'N', 'Y', 'NUMBOX2', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000020' and trim(param3) = 'NUMBOX2' and param5 = 'SALES ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2817, 'VDC', '000021', 'NUMBOX3', 'N', 'Y', 'NUMBOX3', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SALES ORDER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id ='000021' and trim(param3) = 'NUMBOX3' and param5 = 'SALES ORDER')");
        //        #endregion

        //        #region brijesh23112019 invoice
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    "select 'VDC', '000001', 'Name Of Party', 'N', 'Y', 'NAME OF PARTY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //    "where Not EXISTS(select name from controls where type = 'VDC' and id='000001' and trim(param3) = 'NAME OF PARTY' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000002', 'GSTIN No.', 'N', 'Y', 'GSTIN No', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000002' and trim(param3) = 'GSTIN No' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select  'VDC', '000003', 'Party Address', 'N', 'Y', 'PARTY ADDRESS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000003' and trim(param3) = 'PARTY ADDRESS' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select  'VDC', '000004', 'Dispatch Schedule No.', 'N', 'Y', 'DISPATCH SCHEDULE NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000004' and trim(param3) = 'DISPATCH SCHEDULE NO' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000005', 'Dispatch Schedule Date', 'N', 'Y', 'DISPATCH SCHEDULE DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000005' and trim(param3) = 'DISPATCH SCHEDULE DATE' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000006', 'Sales Order Date', 'N', 'Y', 'SALES ORDER DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000006' and trim(param3) = 'SALES ORDER DATE' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //            "select 'VDC', '000007', 'Sales Order No.', 'N', 'Y', 'SALES ORDER NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id='000007' and trim(param3) = 'SALES ORDER NO' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //                    "select 'VDC', '000008', 'Dispatch No.', 'N', 'Y', 'DISPATCH NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //                    "where Not EXISTS(select name from controls where type = 'VDC' and id='000008' and trim(param3) = 'DISPATCH NO' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        "select 'VDC', '000009', 'PO No.', 'N', 'Y', 'PO No', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id='000009' and trim(param3) = 'PO NO' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000010', 'PO Date', 'N', 'Y', 'PO DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000010' and trim(param3) = 'PO DATE' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000011', 'Remarks', 'N', 'Y', 'REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000011' and trim(param3) = 'REMARK' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000012', 'General Terms And Conditions', 'N', 'Y', 'Gen_Terms_And_Condition', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000012' and trim(param3) = 'Gen_Terms_And_Condition' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 2686, 'VDC', '000013', 'Dispatch Date', 'N', 'Y', 'DISPATCH DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000013' and trim(param3) = 'DISPATCH DATE' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000014', 'Dispatch Through', 'N', 'Y', 'DISPATCH THROUGH', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000014' and trim(param3) = 'DISPATCH THROUGH' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000015', 'Vehicle No', 'N', 'Y', 'VEHICLE No', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000015' and trim(param3) = 'VEHICLE NO' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //                    "select 'VDC', '000016', 'Terms Of Delivery', 'N', 'Y', 'TERMS OF DELIVERY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //                    "where Not EXISTS(select name from controls where type = 'VDC' and id='000016' and trim(param3) = 'TERMS OF DELIVERY' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        "select 'VDC', '000017', 'TEXT 1', 'N', 'Y', 'TEXT 1', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id='000017' and trim(param3) = 'TEXT 1' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000018', 'TEXT 2', 'N', 'Y', 'TEXT 2', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000018' and trim(param3) = 'TEXT 2' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000019', 'TEXT 3', 'N', 'Y', 'TEXT 3', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000019' and trim(param3) = 'TEXT 3' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000020', 'DATE 1', 'N', 'Y', 'DATE 1', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000020' and trim(param3) = 'DATE 1' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000021', 'DATE 2', 'N', 'Y', 'DATE 2', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000021' and trim(param3) = 'DATE 2' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000022', 'DATE 3', 'N', 'Y', 'DATE 3', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000022' and trim(param3) = 'DATE 3' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000023', 'NUM 1', 'N', 'Y', 'NUM 1', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000023' and trim(param3) = 'NUM 1' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000024', 'NUM 2', 'N', 'Y', 'NUM 2', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000024' and trim(param3) = 'NUM 2' and param5 = 'INVOICE')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000025', 'NUM 3', 'N', 'Y', 'NUM 3', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id='000025' and trim(param3) = 'NUM 3' and param5 = 'INVOICE')");
        //        #endregion

        //        #region brijesh23112019 SITE HANDOVER
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    "select 'VDC','000001','Site Name','N','Y','SITE NAME','0','" + clientid_mst + "','" + unitid_mst + "','0','SITE HANDOVER' from dual " +
        //    "where Not EXISTS(select name from controls where type = 'VDC' and id = '000001' and trim(param3) = 'SITE NAME' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000002','Site Address','N','Y','SITE ADDRESS','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000002' and trim(param3) = 'SITE ADDRESS' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000003','Contact No.','N','Y','Contact No','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000003' and trim(param3) = 'Contact No' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000004','Date of Material Dispatch','N','Y','DATE_OF_MAT_DISPATCH','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000004' and trim(param3) = 'DATE_OF_MAT_DISPATCH' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000005','Date of Installation Started','N','Y','DATE_OF_INS_STD','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000005' and trim(param3) = 'DATE_OF_INS_STD' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000006','Date of Installation Ended','N','Y','DATE_OF_INS_END','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000006' and trim(param3) = 'DATE_OF_INS_END' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //                  "select 'VDC','000007','Date of Handover','N','Y','DATE_OF_HANDOVER','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //              "where Not EXISTS(select name from controls where type = 'VDC' and id = '000007' and trim(param3) = 'DATE_OF_HANDOVER' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //                    "select 'VDC','000008','Signature Of Carpenter','N','Y','SIGN_OF_CARPENTER','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //                    "where Not EXISTS(select name from controls where type = 'VDC' and id = '000008' and trim(param3) = 'SIGN_OF_CARPENTER' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        "select 'VDC', '000009','Signature Of Person Taking Over','N','Y','SIGN_OF_PERSON_TAKING_OVER','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id = '000009' and trim(param3) = 'SIGN_OF_PERSON_TAKING_OVER' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000010','Signature Of Site Supervisor','N','Y','SIGN_OF_SITE_SUPERVISOR','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000010' and trim(param3) = 'SIGN_OF_SITE_SUPERVISOR' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000011','Carcasses','N','Y','CARCASSES','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000011' and trim(param3) = 'CARCASSES' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000012','Shutters','N','Y','SHUTTERS','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000012' and trim(param3) = 'SHUTTERS' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000013','Handles','N','Y','HANDLES','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000013' and trim(param3) = 'HANDLES' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000014','Drawers Allignment','N','Y','DRAWERS ALLIGNMENT','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000014' and trim(param3) = 'DRAWERS ALLIGNMENT' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //                    "select 'VDC', '000015','Drawers Movements','N','Y','DRAWERS MOVEMENTS','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //                    "where Not EXISTS(select name from controls where type = 'VDC' and id = '000015' and trim(param3) = 'DRAWERS MOVEMENTS' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        "select 'VDC','000016','Any Remark','N','Y','ANY REMARK','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id = '000016' and trim(param3) = 'ANY REMARK' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000017','Signature of Office Representative','N','Y','SIGN_OF_OFFICE_REPRESENTATIVE','0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000017' and trim(param3) = 'SIGN_OF_OFFICE_REPRESENTATIVE' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000019', 'Contact Person', 'N', 'Y', 'CONTACT PERSON', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000019' and trim(param3) = 'CONTACT PERSON' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000018', 'Person Installing', 'N', 'Y', 'PERSON INSTALLING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000018' and trim(param3) = 'PERSON INSTALLING' and param5 = 'SITE HANDOVER')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC', '000020', 'Signature Date ', 'N', 'Y', 'CARPENTER_SIGN_DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE HANDOVER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000020' and trim(param3) = 'CARPENTER_SIGN_DATE' and param5 = 'SITE HANDOVER')");
        //        #endregion

        //        #region reena 26112019 
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //            "select  'VDC', '000075', 'Design Freeze', 'N', 'Y', 'DESIGN FREEZE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'VDC' and id = '000075' and trim(param3) = 'DESIGN FREEZE' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //          "select  'VDC', '000076', 'Design Freeze Date', 'N', 'Y', 'DESIGN FREEZE DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //          "where Not EXISTS(select name from controls where type = 'VDC' and id = '000076' and trim(param3) = 'DESIGN FREEZE DATE' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //        "select  'VDC', '000077', 'Color Choose', 'N', 'Y', 'COLOR CHOOSE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id = '000077' and trim(param3) = 'COLOR CHOOSE' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //        "select  'VDC', '000078', 'Color Choose Date', 'N', 'Y', 'COLOR CHOOSE DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //        "where Not EXISTS(select name from controls where type = 'VDC' and id = '000078' and trim(param3) = 'COLOR CHOOSE DATE' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //       "select  'VDC', '000079', 'Expected Date of Kitchen Delivery', 'N', 'Y', 'EXPECTED DATE OF KITCHEN DELIVERY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //       "where Not EXISTS(select name from controls where type = 'VDC' and id = '000079' and trim(param3) = 'EXPECTED DATE OF KITCHEN DELIVERY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //       "select  'VDC', '000080', 'Tentative Date of Civil Work Complete', 'N', 'Y', 'TENTATIVE DATE OF CIVIL WORK COMPLETE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //       "where Not EXISTS(select name from controls where type = 'VDC' and id = '000080' and trim(param3) = 'TENTATIVE DATE OF CIVIL WORK COMPLETE' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //      "select  'VDC', '000081', 'Actual Date of Civil Work Complete', 'N', 'Y', 'ACTUAL DATE OF CIVIL WORK COMPLETE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //      "where Not EXISTS(select name from controls where type = 'VDC' and id = '000081' and trim(param3) = 'ACTUAL DATE OF CIVIL WORK COMPLETE' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000082', 'Supervisor Visit 1 Discussion', 'N', 'Y', 'SUPERVISOR VISIT 1 DISCUSSION ', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000082' and trim(param3) = 'SUPERVISOR VISIT 1 DISCUSSION' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000083', 'Supervisor Visit 2 Discussion', 'N', 'Y', 'SUPERVISOR VISIT 2 DISCUSSION ', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000083' and trim(param3) = 'SUPERVISOR VISIT 2 DISCUSSION' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000084', 'Supervisor Visit 3 Discussion', 'N', 'Y', 'SUPERVISOR VISIT 3 DISCUSSION ', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000084' and trim(param3) = 'SUPERVISOR VISIT 3 DISCUSSION' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000085', 'Supervisor Visit 4 Discussion', 'N', 'Y', 'SUPERVISOR VISIT 4 DISCUSSION ', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000085' and trim(param3) = 'SUPERVISOR VISIT 4 DISCUSSION' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000086', 'Supervisor Visit 5 Discussion', 'N', 'Y', 'SUPERVISOR VISIT 5 DISCUSSION ', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000086' and trim(param3) = 'SUPERVISOR VISIT 5 DISCUSSION' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000087', 'Site Ready For Installation Date', 'N', 'Y', 'SITE READY FOR INSTALLAION DATE ', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000087' and trim(param3) = 'SITE READY FOR INSTALLAION DATE' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000088', 'Kitchen Installation', 'N', 'Y', 'KITCHEN INSTALLAION ', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000088' and trim(param3) = 'KITCHEN INSTALLAION' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "alter table  kc_tab add(date35 date,date36 date,date37 date,date38 date,date39 date,date40 date,col73 CLOB," +
        //            "col74 CLOB,col75 CLOB,col76 CLOB, col77 CLOB, col78 varchar(5), col79 varchar(5), col80 varchar(5))");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1579, '17004.2'," +
        //" 'Close Pending Indent', '../Inventory/p_close', '3', '0', '0', '0', '-', 'ind', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'close pending indent' and " +
        //"m_id = '17004.2' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1580, '17002.6'," +
        //" 'Close Pending MRN', '../Inventory/p_close', '3', '0', '0', '0', '-', 'inwd', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'close pending mrn' and " +
        //"m_id = '17002.6' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1581, '28002.3'," +
        //" 'Close Pending PO', '../Inventory/p_close', '3', '0', '0', '0', '-', 'por', 'purmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'close pending po' and " +
        //"m_id = '28002.3' and m_module3 = 'purmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1582, '17003.8'," +
        //" 'Close Pending MRS', '../Inventory/p_close', '3', '0', '0', '0', '-', 'outwd', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'close pending mrs' and " +
        //"m_id = '17003.8' and m_module3 = 'invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1583, '21009.4'," +
        //" 'Close Pending SO', '../Inventory/p_close', '3', '0', '0', '0', '-', 'pb', 'bnpmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'close pending so' and " +
        //"m_id = '21009.4' and m_module3 = 'bnpmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1584, '21002.3'," +
        //" 'Close Pending Dis Sch', '../Inventory/p_close', '3', '0', '0', '0', '-', 'bill', 'bnpmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'close pending dis sch' and " +
        //"m_id = '21002.3' and m_module3 = 'bnpmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1585, '39008.2'," +
        //" 'Close Pending Prd Order', '../Inventory/p_close', '3', '0', '0', '0', '-', 'pp', 'pdmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'close pending prd order' and " +
        //"m_id = '39008.2' and m_module3 = 'pdmain')");

        //        execute_cmd(usercode, "update menus set m_id='17003.7',m_module3='invtmain',m_module2='outwd'  where m_id in ('17001.20') and m_name='Material Requisition'");









        //        #endregion


        //        #region reena 27112019
        //        execute_cmd(usercode, "alter table lead_master  add(ord_owner varchar(3),ord_source varchar(3),ord_status varchar(3),ord_rmk clob)");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //         " select '0', 'VDC', '000033', 'Order Owner', 'N', 'Y', 'ORDER OWNER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'ORDER' from dual " +
        //         " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORDER OWNER' and param5 = 'ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //         " select '0', 'VDC', '000034', 'Order Source', 'N', 'Y', 'ORDER SOURCE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'ORDER' from dual " +
        //         " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORDER SOURCE' and param5 = 'ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //         " select '0', 'VDC', '000035', 'Order Status', 'N', 'Y', 'ORDER STATUS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'ORDER' from dual " +
        //         " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORDER STATUS' and param5 = 'ORDER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //         " select '0', 'VDC', '000036', 'Remark', 'N', 'Y', 'ORDER REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'ORDER' from dual " +
        //         " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORDER REMARK' and param5 = 'ORDER')");
        //        #endregion


        //        #region brijesh27112019
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //"select 'VDC','000051','Master Packing Size','N','Y','MASTER PACKING SIZE','0','" + clientid_mst + "','" + unitid_mst + "','0','ITEM/SERVICE MASTER' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000051' and trim(param3) = 'MASTER PACKING SIZE' and param5 = 'ITEM/SERVICE MASTER')");
        //        #endregion
        //        #region Ram 27112019 //All Controls are Here
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //            "select  'CTL', '000001', 'ROLLING NO OF DAYS OF SALARY FREEZE', '100', 'Y', '-', '0', '001', '001001', 'paymain', 'payroll' from dual " +
        //            "where Not EXISTS(select name from controls where type = 'CTL' and id = '000001' and trim(m_module3) = 'paymain' and param5 = 'payroll')");
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //           "select  'CTL', '000002', 'Search Records on Search Page', '10', 'Y', '-', '0', '001', '001001', 'common', 'common' from dual " +
        //           "where Not EXISTS(select name from controls where type = 'CTL' and id = '000002' and trim(m_module3) = 'common' and param5 = 'common')");
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //          "select  'CTL', '000003', 'Auto Tally Voucher of Salary', 'N', 'Y', '-', '0', '001', '001001', 'common', 'common' from dual " +
        //          "where Not EXISTS(select name from controls where type = 'CTL' and id = '000003' and trim(m_module3) = 'paymain' and param5 = 'payroll')");
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //          "select  'CTL', '000004', 'Rolling No of Days for MRR Freeze', '10', 'Y', '-', '0', '001', '001001', 'invtmain', 'Inventory' from dual " +
        //          "where Not EXISTS(select name from controls where type = 'CTL' and id = '000004' and trim(m_module3) = 'invtmain' and param5 = 'Inventory')");
        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //          "select  'CTL', '000005', 'Auto Full and Final on Employee Leaving', 'Y', 'Y', '-', '0', '001', '001001', 'paymain', 'payroll' from dual " +
        //          "where Not EXISTS(select name from controls where type = 'CTL' and id = '000005' and trim(m_module3) = 'paymain' and param5 = 'payroll')");

        //        #endregion

        //        #region reena 28112019

        //        execute_cmd(usercode, "alter table item add(item_alias varchar(150))");

        //        execute_cmd(usercode, "alter table clients_mst add(rel_mgr varchar(6),sub_broker  varchar(3),pref_add varchar(3),kyc_dt date, uin_no varchar(15)," +
        //            "min_no varchar(15),ann_inc varchar(15),dp varchar(6), dp_name varchar(50), dp_id varchar(15), ben_acc varchar(15), employer varchar(15)," +
        //            " qualification varchar(3), aadhar_no varchar(14), client_rating varchar(3),alias_name varchar(50),cp_alias_name varchar(50))");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1588, '40001.10'," +
        //" 'Client Rating', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'crmv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-28 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'client rating' and " +
        //"m_id = '40001.10' and m_module3 = 'crmvmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1589, '40001.11'," +
        //" 'Sub Broker', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'crmv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-28 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'sub broker' and " +
        //"m_id = '40001.11' and m_module3 = 'crmvmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1590, '40001.12'," +
        //" 'Bulk Upload', '../vastu/bulk_acc', '3', '0', '0', '0', '-', 'crmv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-28 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'bulk upload' and " +
        //"m_id = '40001.12' and m_module3 = 'crmvmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1591, '7004.1.7'," +
        //" 'Qualification', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'crmv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-28 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'qualification' and " +
        //"m_id = '7004.1.7' and m_module3 = 'crmvmain')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //         " select '0', 'VDC', '000096', 'Identity Proof', 'N', 'Y', 'IDENTITY PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //         " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'IDENTITY PROOF' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000097', 'Residence Proof', 'N', 'Y', 'RESIDENCE PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RESIDENCE PROOF' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000098', 'KYC', 'N', 'Y', 'KYC', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'KYC' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000099', 'Alias', 'N', 'Y', 'ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ALIAS' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000100', 'Client Rating', 'N', 'Y', 'CLIENT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CLIENT RATING' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000101', 'Relation Manager', 'N', 'Y', 'RELATION MANAGER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RELATION MANAGER' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000102', 'Sub Broker', 'N', 'Y', 'SUB BROKER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SUB BROKER' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000103', 'Preferred Add', 'N', 'Y', 'PREFERRED ADD', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PREFERRED ADD' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000104', 'Last KYC Date', 'N', 'Y', 'LAST KYC DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LAST KYC DATE' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000105', 'UIN No.', 'N', 'Y', 'UIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'UIN NO.' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000106', 'DP', 'N', 'Y', 'DP', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000107', 'Beneficiary A/C No.', 'N', 'Y', 'BENEFICIARY A/C NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BENEFICIARY A/C NO.' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000108', 'MIN No.', 'N', 'Y', 'MIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MIN NO.' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000109', 'Annual Income', 'N', 'Y', 'ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ANNUAL INCOME' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000110', 'Qualification', 'N', 'Y', 'QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'QUALIFICATION' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000111', 'Employer', 'N', 'Y', 'EMPLOYER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EMPLOYER' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000112', 'DP Name', 'N', 'Y', 'DP NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP NAME' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000114', 'DP Id', 'N', 'Y', 'DP ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP ID' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000113', 'Aadhar Card No.', 'N', 'Y', 'AADHAR CARD NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD NO.' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000115', 'Alias', 'N', 'Y', 'CONTACT ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CONTACT ALIAS' and param5 = 'NEW CLIENT')");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //         " select '0', 'VDC', '000096', 'Identity Proof', 'N', 'Y', 'IDENTITY PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //         " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'IDENTITY PROOF' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000097', 'Residence Proof', 'N', 'Y', 'RESIDENCE PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RESIDENCE PROOF' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000098', 'KYC', 'N', 'Y', 'KYC', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'KYC' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000099', 'Alias', 'N', 'Y', 'ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ALIAS' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000100', 'Client Rating', 'N', 'Y', 'CLIENT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CLIENT RATING' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000101', 'Relation Manager', 'N', 'Y', 'RELATION MANAGER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RELATION MANAGER' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000102', 'Sub Broker', 'N', 'Y', 'SUB BROKER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SUB BROKER' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000103', 'Preferred Add', 'N', 'Y', 'PREFERRED ADD', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PREFERRED ADD' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000104', 'Last KYC Date', 'N', 'Y', 'LAST KYC DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LAST KYC DATE' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000105', 'UIN No.', 'N', 'Y', 'UIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'UIN NO.' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000106', 'DP', 'N', 'Y', 'DP', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000107', 'Beneficiary A/C No.', 'N', 'Y', 'BENEFICIARY A/C NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BENEFICIARY A/C NO.' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000108', 'MIN No.', 'N', 'Y', 'MIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MIN NO.' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000109', 'Annual Income', 'N', 'Y', 'ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ANNUAL INCOME' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000110', 'Qualification', 'N', 'Y', 'QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'QUALIFICATION' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000111', 'Employer', 'N', 'Y', 'EMPLOYER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EMPLOYER' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000112', 'DP Name', 'N', 'Y', 'DP NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP NAME' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000114', 'DP Id', 'N', 'Y', 'DP ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP ID' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000113', 'Aadhar Card No.', 'N', 'Y', 'AADHAR CARD NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD NO.' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000115', 'Alias', 'N', 'Y', 'CONTACT ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CONTACT ALIAS' and param5 = 'CUSTOMER DETAIL')");



        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //           " select '0', 'VDC', '000096', 'Identity Proof', 'N', 'Y', 'IDENTITY PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //           " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'IDENTITY PROOF' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000097', 'Residence Proof', 'N', 'Y', 'RESIDENCE PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RESIDENCE PROOF' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000098', 'KYC', 'N', 'Y', 'KYC', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'KYC' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000099', 'Alias', 'N', 'Y', 'ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ALIAS' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000100', 'Client Rating', 'N', 'Y', 'CLIENT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CLIENT RATING' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000101', 'Relation Manager', 'N', 'Y', 'RELATION MANAGER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RELATION MANAGER' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000102', 'Sub Broker', 'N', 'Y', 'SUB BROKER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SUB BROKER' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000103', 'Preferred Add', 'N', 'Y', 'PREFERRED ADD', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PREFERRED ADD' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000104', 'Last KYC Date', 'N', 'Y', 'LAST KYC DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LAST KYC DATE' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000105', 'UIN No.', 'N', 'Y', 'UIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'UIN NO.' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000106', 'DP', 'N', 'Y', 'DP', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000107', 'Beneficiary A/C No.', 'N', 'Y', 'BENEFICIARY A/C NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BENEFICIARY A/C NO.' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000108', 'MIN No.', 'N', 'Y', 'MIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MIN NO.' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000109', 'Annual Income', 'N', 'Y', 'ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ANNUAL INCOME' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000110', 'Qualification', 'N', 'Y', 'QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'QUALIFICATION' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000111', 'Employer', 'N', 'Y', 'EMPLOYER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EMPLOYER' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000112', 'DP Name', 'N', 'Y', 'DP NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP NAME' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000114', 'DP Id', 'N', 'Y', 'DP ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP ID' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000113', 'Aadhar Card No.', 'N', 'Y', 'AADHAR CARD NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD NO.' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000115', 'Alias', 'N', 'Y', 'CONTACT ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CONTACT ALIAS' and param5 = 'EXPORT PARTY')");



        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //         " select '0', 'VDC', '000096', 'Identity Proof', 'N', 'Y', 'IDENTITY PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //         " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'IDENTITY PROOF' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000097', 'Residence Proof', 'N', 'Y', 'RESIDENCE PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RESIDENCE PROOF' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000098', 'KYC', 'N', 'Y', 'KYC', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'KYC' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000099', 'Alias', 'N', 'Y', 'ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ALIAS' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000100', 'Client Rating', 'N', 'Y', 'CLIENT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CLIENT RATING' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000101', 'Relation Manager', 'N', 'Y', 'RELATION MANAGER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RELATION MANAGER' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000102', 'Sub Broker', 'N', 'Y', 'SUB BROKER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SUB BROKER' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000103', 'Preferred Add', 'N', 'Y', 'PREFERRED ADD', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PREFERRED ADD' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000104', 'Last KYC Date', 'N', 'Y', 'LAST KYC DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LAST KYC DATE' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000105', 'UIN No.', 'N', 'Y', 'UIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'UIN NO.' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000106', 'DP', 'N', 'Y', 'DP', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000107', 'Beneficiary A/C No.', 'N', 'Y', 'BENEFICIARY A/C NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BENEFICIARY A/C NO.' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000108', 'MIN No.', 'N', 'Y', 'MIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MIN NO.' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000109', 'Annual Income', 'N', 'Y', 'ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ANNUAL INCOME' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000110', 'Qualification', 'N', 'Y', 'QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'QUALIFICATION' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000111', 'Employer', 'N', 'Y', 'EMPLOYER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EMPLOYER' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000112', 'DP Name', 'N', 'Y', 'DP NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP NAME' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000114', 'DP Id', 'N', 'Y', 'DP ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP ID' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000113', 'Aadhar Card No.', 'N', 'Y', 'AADHAR CARD NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD NO.' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000115', 'Alias', 'N', 'Y', 'CONTACT ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CONTACT ALIAS' and param5 = 'VENDOR DETAIL')");





        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //         " select '0', 'VDC', '000096', 'Identity Proof', 'N', 'Y', 'IDENTITY PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //         " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'IDENTITY PROOF' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000097', 'Residence Proof', 'N', 'Y', 'RESIDENCE PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RESIDENCE PROOF' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000098', 'KYC', 'N', 'Y', 'KYC', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'KYC' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000099', 'Alias', 'N', 'Y', 'ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ALIAS' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000100', 'Client Rating', 'N', 'Y', 'CLIENT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CLIENT RATING' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000101', 'Relation Manager', 'N', 'Y', 'RELATION MANAGER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RELATION MANAGER' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000102', 'Sub Broker', 'N', 'Y', 'SUB BROKER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SUB BROKER' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000103', 'Preferred Add', 'N', 'Y', 'PREFERRED ADD', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PREFERRED ADD' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000104', 'Last KYC Date', 'N', 'Y', 'LAST KYC DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LAST KYC DATE' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000105', 'UIN No.', 'N', 'Y', 'UIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'UIN NO.' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000106', 'DP', 'N', 'Y', 'DP', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000107', 'Beneficiary A/C No.', 'N', 'Y', 'BENEFICIARY A/C NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BENEFICIARY A/C NO.' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000108', 'MIN No.', 'N', 'Y', 'MIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MIN NO.' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000109', 'Annual Income', 'N', 'Y', 'ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ANNUAL INCOME' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000110', 'Qualification', 'N', 'Y', 'QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'QUALIFICATION' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000111', 'Employer', 'N', 'Y', 'EMPLOYER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EMPLOYER' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000112', 'DP Name', 'N', 'Y', 'DP NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP NAME' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000114', 'DP Id', 'N', 'Y', 'DP ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP ID' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000113', 'Aadhar Card No.', 'N', 'Y', 'AADHAR CARD NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD NO.' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000115', 'Alias', 'N', 'Y', 'CONTACT ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CONTACT ALIAS' and param5 = 'IMPORT PARTY')");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000096', 'Identity Proof', 'N', 'Y', 'IDENTITY PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'IDENTITY PROOF' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000097', 'Residence Proof', 'N', 'Y', 'RESIDENCE PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RESIDENCE PROOF' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000098', 'KYC', 'N', 'Y', 'KYC', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'KYC' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000099', 'Alias', 'N', 'Y', 'ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ALIAS' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000100', 'Client Rating', 'N', 'Y', 'CLIENT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CLIENT RATING' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000101', 'Relation Manager', 'N', 'Y', 'RELATION MANAGER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RELATION MANAGER' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000102', 'Sub Broker', 'N', 'Y', 'SUB BROKER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SUB BROKER' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000103', 'Preferred Add', 'N', 'Y', 'PREFERRED ADD', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PREFERRED ADD' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000104', 'Last KYC Date', 'N', 'Y', 'LAST KYC DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LAST KYC DATE' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000105', 'UIN No.', 'N', 'Y', 'UIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'UIN NO.' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000106', 'DP', 'N', 'Y', 'DP', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000107', 'Beneficiary A/C No.', 'N', 'Y', 'BENEFICIARY A/C NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BENEFICIARY A/C NO.' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000108', 'MIN No.', 'N', 'Y', 'MIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MIN NO.' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000109', 'Annual Income', 'N', 'Y', 'ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ANNUAL INCOME' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000110', 'Qualification', 'N', 'Y', 'QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'QUALIFICATION' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000111', 'Employer', 'N', 'Y', 'EMPLOYER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EMPLOYER' and param5 = 'PUBLISHER')");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000112', 'DP Name', 'N', 'Y', 'DP NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP NAME' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000114', 'DP Id', 'N', 'Y', 'DP ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP ID' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000113', 'Aadhar Card No.', 'N', 'Y', 'AADHAR CARD NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD NO.' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000115', 'Alias', 'N', 'Y', 'CONTACT ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CONTACT ALIAS' and param5 = 'PUBLISHER')");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000096', 'Identity Proof', 'N', 'Y', 'IDENTITY PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'IDENTITY PROOF' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //        " select '0', 'VDC', '000097', 'Residence Proof', 'N', 'Y', 'RESIDENCE PROOF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RESIDENCE PROOF' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000098', 'KYC', 'N', 'Y', 'KYC', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'KYC' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //       " select '0', 'VDC', '000099', 'Alias', 'N', 'Y', 'ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ALIAS' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000100', 'Client Rating', 'N', 'Y', 'CLIENT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CLIENT RATING' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //     " select '0', 'VDC', '000101', 'Relation Manager', 'N', 'Y', 'RELATION MANAGER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RELATION MANAGER' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //    " select '0', 'VDC', '000102', 'Sub Broker', 'N', 'Y', 'SUB BROKER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //    " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SUB BROKER' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000103', 'Preferred Add', 'N', 'Y', 'PREFERRED ADD', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PREFERRED ADD' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000104', 'Last KYC Date', 'N', 'Y', 'LAST KYC DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LAST KYC DATE' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000105', 'UIN No.', 'N', 'Y', 'UIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'UIN NO.' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000106', 'DP', 'N', 'Y', 'DP', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000107', 'Beneficiary A/C No.', 'N', 'Y', 'BENEFICIARY A/C NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BENEFICIARY A/C NO.' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000108', 'MIN No.', 'N', 'Y', 'MIN NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MIN NO.' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000109', 'Annual Income', 'N', 'Y', 'ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ANNUAL INCOME' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000110', 'Qualification', 'N', 'Y', 'QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'QUALIFICATION' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000111', 'Employer', 'N', 'Y', 'EMPLOYER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EMPLOYER' and param5 = 'PROSPECT DATA')");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000112', 'DP Name', 'N', 'Y', 'DP NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP NAME' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000114', 'DP Id', 'N', 'Y', 'DP ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'DP ID' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000113', 'Aadhar Card No.', 'N', 'Y', 'AADHAR CARD NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD NO.' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000115', 'Alias', 'N', 'Y', 'CONTACT ALIAS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CONTACT ALIAS' and param5 = 'PROSPECT DATA')");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000033', 'Lead Account Type', 'N', 'Y', 'LEAD ACCOUNT TYPE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LEAD ACCOUNT TYPE' and param5 = 'LEAD MASTER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000052', 'Item Alias Name', 'N', 'Y', 'ITEM ALIAS NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'ITEM/SERVICE MASTER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ITEM ALIAS NAME' and param5 = 'ITEM/SERVICE MASTER')");

        //        #endregion
        //        #region reena 29112019
        //        execute_cmd(usercode, "alter table lead_master add client_type varchar(3)");
        //        execute_cmd(usercode, "alter table clients_mst add credit_rating varchar(3)");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1592, '40001.13'," +
        //" 'Credit Rating', '../Mst/master_ctrl', '3', '0', '0', '0', '-', 'crmv', 'crmvmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-28 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'credit rating' and " +
        //"m_id = '40001.13' and m_module3 = 'crmvmain')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //   " select '0', 'VDC', '000116', 'Credit Rating', 'N', 'Y', 'CREDIT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //   " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT RATING' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000116', 'Credit Rating', 'N', 'Y', 'CREDIT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT RATING' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000116', 'Credit Rating', 'N', 'Y', 'CREDIT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT RATING' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000116', 'Credit Rating', 'N', 'Y', 'CREDIT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT RATING' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000116', 'Credit Rating', 'N', 'Y', 'CREDIT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT RATING' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000116', 'Credit Rating', 'N', 'Y', 'CREDIT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT RATING' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000116', 'Credit Rating', 'N', 'Y', 'CREDIT RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT RATING' and param5 = 'PROSPECT DATA')");

        //        #endregion
        //        #region reena 02122019
        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1593, '17003.9'," +
        //" 'Close Pending Dispatch', '../Inventory/p_close', '3', '0', '0', '0', '-', 'outwd', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'close pending dispatch' and " +
        //"m_id = '17003.9' and m_module3 = 'invtmain')");
        //        #endregion

        //        #region Ram01122019
        //        execute_cmd(usercode, "create or replace procedure SP_FOO (   mq1 in varchar,  mq2 in varchar,  cursor1 out SYS_REFCURSOR,  cursor2 out SYS_REFCURSOR ) " +
        //            "is begin open cursor1 FOR mq1;  open cursor2 FOR mq2; end SP_FOO; ");
        //        #endregion

        //        #region brijesh 03122019
        //        execute_cmd(usercode, "alter table item add mstpck_size varchar2(20)");
        //        #endregion      
        //        #region brijesh 04122019
        //        execute_cmd(usercode, "alter table itransactionc add pur_type varchar2(5)");
        //        #endregion

        //        #region reena 04122019
        //        execute_cmd(usercode, "update menus set m_link='../Billing/p_invoice',m_name='Proforma Invoice' where m_id='21009.1'");
        //        #endregion

        //        #region reena 05122019
        //        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1595, '28002.4'," +
        //" 'RFQ', '../Billing/rfq', '3', '0', '0', '0', '-', 'por', 'purmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'rfq' and " +
        //"m_id = '28002.4' and m_module3 = 'purmain')");
        //        #endregion

        //        #region reena 06112019
        //        execute_cmd(usercode, "alter table clients_mst modify(BSN_Type varchar(100))");
        //        execute_cmd(usercode, "alter table STUDENT_RECEIPT_DETAIL add Ref_no varchar(15)");
        //        #endregion

        //        #region brijesh 07122019
        //        execute_cmd(usercode, "alter table purchasesc add (col1 varchar2(20),col2 varchar2(20),col3 varchar2(20),col4 varchar2(30), col5 varchar2(30), col6 varchar2(30), date3 date, date4 date, date5 date)");
        //        execute_cmd(usercode, "alter table kc_tab modify col4 varchar2(50)");
        //        #endregion

        //        #region brijesh 09122019
        //        execute_cmd(usercode, "update controls set param3='LOWER TOLERANCE' where type='VDC' and param5='ITEM/SERVICE MASTER' and param3='LOWER TOLERANCE (IN %)' and id='000032' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        execute_cmd(usercode, "update controls set param3='UPPER TOLERANCE' where type='VDC' and param5='ITEM/SERVICE MASTER' and param3='UPPER TOLERANCE (IN %)' and id='000033' and client_id ='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        execute_cmd(usercode, "update controls set param3='TOTAL SELF LIFE' where type='VDC' and param5='ITEM/SERVICE MASTER' and param3='TOTAL SELF LIFE (IN DAYS)' and id='000034' and client_id ='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        execute_cmd(usercode, "update controls set param3='MIN. REM. SELF LIFE' where type='VDC' and param5='ITEM/SERVICE MASTER' and param3='MIN. REM. SELF LIFE (IN DAYS)' and id='000035' and client_id ='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");
        //        #endregion

        //        #region brijesh 09122019
        //        execute_cmd(usercode, "update menus set m_link ='../Purchase/party' where lower(m_name) = 'inter unit' and m_module3 = 'acctmain'");
        //        #endregion

        //        #region brijesh 09122019
        //        execute_cmd(usercode, "INSERT INTO master_setting (REC_ID, MASTER_ID, MASTER_NAME, MASTER_TYPE, MASTER_ENTBY, MASTER_ENTDATE, MASTER_EDITBY,MASTER_EDITDATE, MASTER_STATUS, ISROLLNOREGWISE, ISREGNOCHANGE, ISRECEIPTNOCHANGE, ISROLLNOCHANGE, ISSCHOOLBASED, ISCLASSBASED, ISSECTIONBASED, ISADMISSION_WISE, ISALPHABETIC_WISE, ISREGFEESBEFOREADM, CLASSID, SECTIONID, SECTION_STRENGTH, SUBJECTID, SUBJECT_STRENGTH, OPTIONAL_SUBJECT, TEACHER_CATEGORY, CLIENT_NAME, GROUP_NAME, UNIT_NAME, CONT_PERSON_NAME, CONT_PERSON_NUMBER,CONT_PERSON_ALTNUMBER, CONT_PERSON_EMAIL, GROUP_REFRENCE_NUMBER, GROUP_ID, CLIENT_GSTIN, HEADING, CONTENT, DATE_OF_ISSUE,AUTH_SIGN_FILENAME, AUTH_SIGN_FILEPATH, CREATED_DATE, VCH_NUM, VCH_DATE, TYPE, CLIENT_ID, CLIENT_UNIT_ID, QUALIFICATION_TYPE, SECTIONTYPE, FEMALERATIO, MALERATIO, STATUS, INACTIVE_DATE) select '8788', '08', 'STN IN', '0', '000001', TO_DATE('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '-',TO_DATE('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0','0', '0', '0', '0', '0', '0', '0', '0', '0',TO_DATE('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '0',TO_TIMESTAMP('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),'KMR', '001', '001001', '0', '0', '0', '0', 'Y',TO_DATE('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS') from dual where NOT EXISTS (select master_name from master_setting where type='KMR' and master_name='STN IN')");
        //        execute_cmd(usercode, "INSERT INTO master_setting (REC_ID, MASTER_ID, MASTER_NAME, MASTER_TYPE, MASTER_ENTBY, MASTER_ENTDATE, MASTER_EDITBY,MASTER_EDITDATE, MASTER_STATUS, ISROLLNOREGWISE, ISREGNOCHANGE, ISRECEIPTNOCHANGE, ISROLLNOCHANGE, ISSCHOOLBASED, ISCLASSBASED, ISSECTIONBASED, ISADMISSION_WISE, ISALPHABETIC_WISE, ISREGFEESBEFOREADM, CLASSID, SECTIONID, SECTION_STRENGTH, SUBJECTID,SUBJECT_STRENGTH, OPTIONAL_SUBJECT, TEACHER_CATEGORY, CLIENT_NAME, GROUP_NAME, UNIT_NAME, CONT_PERSON_NAME, CONT_PERSON_NUMBER,CONT_PERSON_ALTNUMBER, CONT_PERSON_EMAIL, GROUP_REFRENCE_NUMBER, GROUP_ID, CLIENT_GSTIN, HEADING, CONTENT, DATE_OF_ISSUE,AUTH_SIGN_FILENAME, AUTH_SIGN_FILEPATH, CREATED_DATE, VCH_NUM, VCH_DATE, TYPE, CLIENT_ID, CLIENT_UNIT_ID, QUALIFICATION_TYPE,SECTIONTYPE, FEMALERATIO, MALERATIO, STATUS, INACTIVE_DATE) select '8789', 'ST', 'STN OUT', '0', '000001',TO_DATE('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '-',TO_DATE('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0','0', '0', '0', '0', '0', '0', '0', '0', '0',TO_DATE('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '0',TO_TIMESTAMP('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS.FF'),'KPO', '001', '001001', '0', '0', '0', '0', 'Y',TO_DATE('2019-10-18 00:00:00', 'YYYY-MM-DD HH24:MI:SS') from dual where NOT EXISTS (select master_name from master_setting where type='KPO' and master_name='STN OUT')");
        //        #endregion

        //        #region brijesh 10122019
        //        execute_cmd(usercode, "alter table itransaction add (pi_no varchar2(20), pi_date date) ");
        //        #endregion



        //        #region reena 11122019
        //        execute_cmd(usercode, "alter table clients_mst modify vch_num varchar(8)");
        //        execute_cmd(usercode, "alter table clients_mst add ref_code varchar(8)");
        //        #endregion


        //        #region brijesh 11122019
        //        execute_cmd(usercode, "alter table purchasesc add (pino varchar2(20),pidate date)");
        //        #endregion

        //        #region reena 12122019
        //        execute_cmd(usercode, "update menus set m_name='Doc Print Template',m_link='../Mst/prn_ctrl' where m_id='21001.13' and m_module3='bnpmain')");
        //        execute_cmd(usercode, "update menus set m_name='Doc Print Template',m_link='../Mst/prn_ctrl' where m_id='17001.28' and m_module3='invtmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select '1600', '17001.29'," +
        //" 'SMS/Mail Config', '../Inventory/sms_mail_tmp', '3', '0', '0', '0', '-', 'invm', 'invtmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'sms/mail config' and " +
        //"m_id = '17001.29' and m_module3 = 'invtmain')");
        //        #endregion




        //        #region brijesh 11122019
        //        execute_cmd(usercode, "alter table purchasesc add (pino varchar2(20),pidate date)");
        //        #endregion
        //        #region brijesh 13122019
        //        execute_cmd(usercode, "alter table btchtrans modify acode varchar2(10)");
        //        #endregion
        //        #region brijesh 16122019
        //        execute_cmd(usercode, "alter table purchasesc modify acode varchar2(8)");
        //        #endregion

        //        #region reena 13122019
        //        execute_cmd(usercode, "alter table lead_master modify(CUST_ID varchar(10))");
        //        execute_cmd(usercode, "alter table clients_mst modify PROSNO varchar(10)");
        //        execute_cmd(usercode, "alter table kc_tab modify (Col70 varchar(10),Col71 varchar(10))");

        //        #endregion

        //        #region reena 14122019
        //        execute_cmd(usercode, "update menus set m_link='../education/mess' where m_id='7037.1'");
        //        execute_cmd(usercode, "alter table clients_mst modify(parent_id varchar(10))");
        //        execute_cmd(usercode, "alter table company_profile modify addr varchar(150)");
        //        #endregion

        //        #region reena 16122019        
        //        execute_cmd(usercode, "alter table company_profile modify addr varchar(150)");
        //        #endregion
        //        #region reena 17122019        
        //        execute_cmd(usercode, "alter table clients_mst add (ref_Ext_acc varchar(8),ref_user varchar(6))");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //  " select '0', 'VDC', '000117', 'Referred By Existing Account', 'N', 'Y', 'REFERRED BY EXISTING ACCOUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //  " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY EXISTING ACCOUNT' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000117', 'Referred By Existing Account', 'N', 'Y', 'REFERRED BY EXISTING ACCOUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY EXISTING ACCOUNT' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000117', 'Referred By Existing Account', 'N', 'Y', 'REFERRED BY EXISTING ACCOUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY EXISTING ACCOUNT' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000117', 'Referred By Existing Account', 'N', 'Y', 'REFERRED BY EXISTING ACCOUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY EXISTING ACCOUNT' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000117', 'Referred By Existing Account', 'N', 'Y', 'REFERRED BY EXISTING ACCOUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY EXISTING ACCOUNT' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000117', 'Referred By Existing Account', 'N', 'Y', 'REFERRED BY EXISTING ACCOUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY EXISTING ACCOUNT' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000117', 'Referred By Existing Account', 'N', 'Y', 'REFERRED BY EXISTING ACCOUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY EXISTING ACCOUNT' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //  " select '0', 'VDC', '000118', 'Referred By User', 'N', 'Y', 'REFERRED BY USER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //  " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY USER' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000118', 'Referred By User', 'N', 'Y', 'REFERRED BY USER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY USER' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000118', 'Referred By User', 'N', 'Y', 'REFERRED BY USER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY USER' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000118', 'Referred By User', 'N', 'Y', 'REFERRED BY USER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY USER' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000118', 'Referred By User', 'N', 'Y', 'REFERRED BY USER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY USER' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000118', 'Referred By User', 'N', 'Y', 'REFERRED BY USER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY USER' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000118', 'Referred By User', 'N', 'Y', 'REFERRED BY USER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'REFERRED BY USER' and param5 = 'PROSPECT DATA')");


        //        execute_cmd(usercode, "INSERT INTO MENUS ( M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select  '20009.2'," +
        //" 'Bulk Upload', '../vastu/bulk_acc', '3', '0', '0', '0', '-', 'exms', 'eximmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'bulk upload' and " +
        //"m_id = '20009.2' and m_module3 = 'eximmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select  '28004.15'," +
        //" 'Bulk Upload', '../vastu/bulk_acc', '3', '0', '0', '0', '-', 'purm', 'purmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'bulk upload' and " +
        //"m_id = '28004.15' and m_module3 = 'purmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select  '17001.29'," +
        //" 'Bulk Upload', '../vastu/bulk_acc', '3', '0', '0', '0', '-', 'bhim', 'bhmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'bulk upload' and " +
        //"m_id = '17001.29' and m_module3 = 'bhmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select  '16000.1.8'," +
        //" 'Bulk Upload', '../vastu/bulk_acc', '3', '0', '0', '0', '-', 'lbrmas', 'lbrmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'bulk upload' and " +
        //"m_id = '16000.1.8' and m_module3 = 'lbrmain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS ( M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
        //" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select  '21001.14'," +
        //" 'Bulk Upload', '../vastu/bulk_acc', '3', '0', '0', '0', '-', 'bmas', 'bnpmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-07-25 00:00:00'," +
        //" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'bulk upload' and " +
        //"m_id = '21001.14' and m_module3 = 'bnpmain')");

        //        #endregion

        //        #region brijesh 17122019
        //        execute_cmd(usercode, "alter table purchases modify acode varchar2(8)");
        //        #endregion

        //        #region brijesh 18122019
        //        execute_cmd(usercode, "alter table btchtrans modify uom varchar2(15)");
        //        execute_cmd(usercode, "alter table purchases modify uom varchar2(15)");
        //        #endregion
        //        #region brijesh 20122019
        //        execute_cmd(usercode, "alter table clients_mst add interunit varchar2(6)");
        //        #endregion
        //        #region reena 18122019
        //        execute_cmd(usercode, "update menus set m_name='Account Visit Entry' where m_id='40009.1'");
        //        execute_cmd(usercode, "alter table kc_tab add col81 varchar(5)");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000089', 'Site HandOver', 'N', 'Y', 'SITE HANDOVER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000089' and trim(param3) = 'SITE HANDOVER' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000090', 'Done By', 'N', 'Y', 'UB PRODUCTION DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000090' and trim(param3) = 'UB PRODUCTION DONE BY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000091', 'Done By', 'N', 'Y', 'LB PRODUCTION DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000091' and trim(param3) = 'LB PRODUCTION DONE BY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000092', 'Done By', 'N', 'Y', 'UB DISPATCHED DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000092' and trim(param3) = 'UB DISPATCHED DONE BY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000093', 'Done By', 'N', 'Y', 'LB DISPATCHED DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000093' and trim(param3) = 'LB DISPATCHED DONE BY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000094', 'Done By', 'N', 'Y', 'UB INSTALLED DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000094' and trim(param3) = 'UB INSTALLED DONE BY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000095', 'Done By', 'N', 'Y', 'LB INSTALLED DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000095' and trim(param3) = 'LB INSTALLED DONE BY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000096', 'Done By', 'N', 'Y', 'SH PRODUCTION DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000096' and trim(param3) = 'SH PRODUCTION DONE BY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000097', 'Done By', 'N', 'Y', 'SH DISPATCHED DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000097' and trim(param3) = 'SH DISPATCHED DONE BY' and param5 = 'SITE VISIT')");

        //        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        //"select  'VDC', '000098', 'Done By', 'N', 'Y', 'SH INSTALLED DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'SITE VISIT' from dual " +
        //"where Not EXISTS(select name from controls where type = 'VDC' and id = '000098' and trim(param3) = 'SH INSTALLED DONE BY' and param5 = 'SITE VISIT')");




        //        #endregion

        //        #region reena21122019
        //        execute_cmd(usercode, " alter table clients_mst add tin_no varchar(9)");
        //        #endregion



        //        #region reena 23122019
        //        execute_cmd(usercode, "alter table clients_mst modify(GOOGLE_ADD varchar(250))");

        //        xDate = server_datetime(usercode);
        //        string dt_ft = "YYYY-MM-dd HH24:MI:SS";
        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        // " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Prefix','edumain','N' from dual where NOT EXISTS" +
        // "(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Prefix','acctmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='acctmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','Prefix','edumain','N' from dual where NOT EXISTS" +
        //         "(select content from pattern_gen where type='USE' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='edumain')");


        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        // " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Prefix','lbrmain' ,'N' from dual " +
        //        // "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='lbrmain')");



        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        // " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Prefix','edumain','N' from dual where NOT EXISTS" +
        //        // "(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='edumain')");



        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        //  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date(''" + xDate + "','" + dt_ft + "')," +
        //        //  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Prefix','hostmain' ,'N' from dual where NOT EXISTS" +
        //        //  "(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='hostmain')");


        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        //  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //        //  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Prefix','edumain' ,'N' from dual where NOT EXISTS" +
        //        //  "(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Prefix' and module_id='edumain')");

        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        //" select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        //" to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Major Asset Prefix','fixmain' ,'N' from dual " +
        //        //"where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Major Asset Prefix' and module_id='fixmain')");


        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        //" select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        //" to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Minor Asset Prefix','fixmain' ,'N' from dual " +
        //        //"where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minor Asset Prefix' and module_id='fixmain')");



        //        //Suffix

        ////        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        ////" select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        ////" to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REG','Registration Number Pattern','Suffix','edumain','N' from dual where NOT EXISTS" +
        ////"(select content from pattern_gen where type='REG' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='edumain')");


        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        // " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','VOC','Voucher Number Pattern','Suffix','acctmain' ,'N' from dual " +
        //        // "where NOT EXISTS(select content from pattern_gen where type='VOC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='acctmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','USE','User Id Pattern','Suffix','edumain','N' from dual where NOT EXISTS" +
        //         "(select content from pattern_gen where type='USE' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='edumain')");


        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        // " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','BAN','Accession Number Pattern','Suffix','lbrmain' ,'N' from dual " +
        //        // "where NOT EXISTS(select content from pattern_gen where type='BAN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='lbrmain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','REC','Receipt Number Pattern','Suffix','edumain','N' from dual where NOT EXISTS" +
        //         "(select content from pattern_gen where type='REC' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='edumain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //          " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date(''" + xDate + "','" + dt_ft + "')," +
        //          " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','HOS','Hostel Membership ID Pattern','Suffix','hostmain' ,'N' from dual where NOT EXISTS" +
        //          "(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='hostmain')");


        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        //  " select '000001', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "', to_date('" + xDate + "','" + dt_ft + "')," +
        //        //  " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ROL','Roll Number Pattern','Suffix','edumain' ,'N' from dual where NOT EXISTS" +
        //        //  "(select content from pattern_gen where type='ROL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='edumain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','PUR','PO Number Pattern','Suffix','invtmain,purmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='purmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','SAL','','Suffix','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='SAL' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='bnpmain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','INV','Invoice Number Pattern','Suffix','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='INV' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='bnpmain')");



        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        // " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','EMP','Employee Code Pattern','Suffix','paymain,hrmain' ,'N' from dual " +
        //        // "where NOT EXISTS(select content from pattern_gen where type='EMP' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='paymain,hrmain')");



        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','WRK','WO Number Pattern','Suffix','pdmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='WRK' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='pdmain')");



        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        // " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MEM','Library Membership Pattern','Suffix','lbrmain' ,'N' from dual " +
        //        // "where NOT EXISTS(select content from pattern_gen where type='MEM' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='lbrmain')");



        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        // " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','IND','Indent Number Pattern','Suffix','invtmain' ,'N' from dual " +
        //        // "where NOT EXISTS(select content from pattern_gen where type='IND' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='invtmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','ISS','Issue Number Pattern','Suffix','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='ISS' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='invtmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Major Asset Suffix','fixmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Major Asset Suffix' and module_id='fixmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','AST','Asset Code Pattern','Minor Asset Suffix','fixmain' ,'N' from dual " +
        //        "where NOT EXISTS(select content from pattern_gen where type='AST' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Minor Asset Suffix' and module_id='fixmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Suffix','bnpmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='bnpmain')");


        //        execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //         " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //         " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','MRN','MRN Number Pattern','Suffix','invtmain' ,'N' from dual " +
        //         "where NOT EXISTS(select content from pattern_gen where type='MRN' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Suffix' and module_id='invtmain')");



        //        #endregion

        //        #region reena24122019

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        // " select '0', 'VDC', '000120', 'Infavour Of', 'N', 'Y', 'INFAVOUR OF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        // " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'INFAVOUR OF' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000120', 'Infavour Of', 'N', 'Y', 'INFAVOUR OF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'INFAVOUR OF' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000120', 'Infavour Of', 'N', 'Y', 'INFAVOUR OF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'INFAVOUR OF' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000120', 'Infavour Of', 'N', 'Y', 'INFAVOUR OF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'INFAVOUR OF' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000120', 'Infavour Of', 'N', 'Y', 'INFAVOUR OF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'INFAVOUR OF' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000120', 'Infavour Of', 'N', 'Y', 'INFAVOUR OF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'INFAVOUR OF' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000120', 'Infavour Of', 'N', 'Y', 'INFAVOUR OF', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'INFAVOUR OF' and param5 = 'PROSPECT DATA')");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000121', 'Cheque Print Location', 'N', 'Y', 'CHEQUE PRINT LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CHEQUE PRINT LOCATION' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000121', 'Cheque Print Location', 'N', 'Y', 'CHEQUE PRINT LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CHEQUE PRINT LOCATION' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000121', 'Cheque Print Location', 'N', 'Y', 'CHEQUE PRINT LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CHEQUE PRINT LOCATION' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000121', 'Cheque Print Location', 'N', 'Y', 'CHEQUE PRINT LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CHEQUE PRINT LOCATION' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000121', 'Cheque Print Location', 'N', 'Y', 'CHEQUE PRINT LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CHEQUE PRINT LOCATION' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000121', 'Cheque Print Location', 'N', 'Y', 'CHEQUE PRINT LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CHEQUE PRINT LOCATION' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000121', 'Cheque Print Location', 'N', 'Y', 'CHEQUE PRINT LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CHEQUE PRINT LOCATION' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000122', 'Date', 'N', 'Y', 'EDIT MANAGEMENT DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DATE' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000122', 'Date', 'N', 'Y', 'EDIT MANAGEMENT DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DATE' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000122', 'Date', 'N', 'Y', 'EDIT MANAGEMENT DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DATE' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000122', 'Date', 'N', 'Y', 'EDIT MANAGEMENT DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DATE' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000122', 'Date', 'N', 'Y', 'EDIT MANAGEMENT DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DATE' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000122', 'Date', 'N', 'Y', 'EDIT MANAGEMENT DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DATE' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000122', 'Date', 'N', 'Y', 'EDIT MANAGEMENT DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DATE' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000123', 'Done By', 'N', 'Y', 'EDIT MANAGEMENT DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DONE BY' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000123', 'Done By', 'N', 'Y', 'EDIT MANAGEMENT DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DONE BY' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000123', 'Done By', 'N', 'Y', 'EDIT MANAGEMENT DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DONE BY' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000123', 'Done By', 'N', 'Y', 'EDIT MANAGEMENT DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DONE BY' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000123', 'Done By', 'N', 'Y', 'EDIT MANAGEMENT DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DONE BY' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000123', 'Done By', 'N', 'Y', 'EDIT MANAGEMENT DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DONE BY' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000123', 'Done By', 'N', 'Y', 'EDIT MANAGEMENT DONE BY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT DONE BY' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000124', 'Remark', 'N', 'Y', 'EDIT MANAGEMENT REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000124', 'Remark', 'N', 'Y', 'EDIT MANAGEMENT REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000124', 'Remark', 'N', 'Y', 'EDIT MANAGEMENT REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000124', 'Remark', 'N', 'Y', 'EDIT MANAGEMENT REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000124', 'Remark', 'N', 'Y', 'EDIT MANAGEMENT REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000124', 'Remark', 'N', 'Y', 'EDIT MANAGEMENT REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000124', 'Remark', 'N', 'Y', 'EDIT MANAGEMENT REMARK', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK' and param5 = 'PROSPECT DATA')");


        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000125', 'Remark (History)', 'N', 'Y', 'EDIT MANAGEMENT REMARK (HISTORY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK (HISTORY)' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000125', 'Remark (History)', 'N', 'Y', 'EDIT MANAGEMENT REMARK (HISTORY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK (HISTORY)' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000125', 'Remark (History)', 'N', 'Y', 'EDIT MANAGEMENT REMARK (HISTORY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK (HISTORY)' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000125', 'Remark (History)', 'N', 'Y', 'EDIT MANAGEMENT REMARK (HISTORY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK (HISTORY)' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000125', 'Remark (History)', 'N', 'Y', 'EDIT MANAGEMENT REMARK (HISTORY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK (HISTORY)' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000125', 'Remark (History)', 'N', 'Y', 'EDIT MANAGEMENT REMARK (HISTORY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK (HISTORY)' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000125', 'Remark (History)', 'N', 'Y', 'EDIT MANAGEMENT REMARK (HISTORY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'EDIT MANAGEMENT REMARK (HISTORY)' and param5 = 'PROSPECT DATA')");
        //        #endregion
        //        #region reena 25122019
        //        execute_cmd(usercode, "alter table clients_mst add(pay_mode varchar(6),infavour varchar(100),cheq_print varchar(3))");
        //        #endregion

        //        #region Brijesh 26122019
        //        execute_cmd(usercode, "alter table purchasesc add sotype varchar2(5)");
        //        #endregion
        //        #region Reena 28122019
        //        execute_cmd(usercode, "update  menus set m_link='../Home/db_set' where m_id='1011.2'");
        //        #endregion
        //        #region ram 26122019
        //        execute_cmd(usercode, "ALTER TABLE master_setting ADD (DATE1 DATE,DATE2 DATE,DATE3 DATE,DATE4 DATE,DATE5 DATE,DATE6 DATE)");

        //        execute_cmd(usercode, "INSERT INTO CONTROLS (REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7)" +
        //            " select '6667', 'VDC', '000053', 'Amortization Charges (Amt)', 'N', 'Y', 'AMORTIZATION CHARGES', 'N', '001', '001001', '0', 'ITEM/SERVICE MASTER', '0', '0' from dual where " +
        //            " not EXISTS (SELECT ID FROM CONTROLS WHERE TYPE='VDC' AND PARAM3='AMORTIZATION CHARGES' AND ID='000053' AND CLIENT_ID='" + clientid_mst + "' AND CLIENT_UNIT_ID='" + unitid_mst + "' )");

        //        execute_cmd(usercode, "INSERT INTO CONTROLS (REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) " +
        //            "  select '6668', 'VDC', '000054', 'Mat Cons on Job Work (In %age)', 'N', 'Y', 'MAT CONS JOB WORK', 'N', '001', '001001', '0', 'ITEM/SERVICE MASTER', '0', '0' from DUAL WHERE " +
        //            " not EXISTS (SELECT ID FROM CONTROLS WHERE TYPE='VDC' AND PARAM3='MAT CONS JOB WORK' AND ID='000054' AND CLIENT_ID='" + clientid_mst + "' AND CLIENT_UNIT_ID='" + unitid_mst + "' )");

        //        //execute_cmd(usercode, "insert into  pattern_gen (vch_num,vch_date,ent_by,ent_date,edit_by,edit_date,created_date,client_id,client_unit_id,type,type_desc,content,module_id,required)" +
        //        // " select '000001',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "'),'" + userid + "',to_date('" + xDate + "','" + dt_ft + "')," +
        //        // " to_date('" + xDate + "','" + dt_ft + "'),'" + clientid_mst + "','" + unitid_mst + "','QUO','Quotation Number Pattern','Date','bnpmain' ,'N' from dual " +
        //        // "where NOT EXISTS(select content from pattern_gen where type='QUO' and client_id='" + clientid_mst + "'and client_unit_id='" + unitid_mst + "' and content='Date' and module_id='bnpmain')");

        //        #endregion
        //        #region reena 30122019
        //        execute_cmd(usercode, "update master_setting set master_name='Customer Rejection / Return' where (client_id||client_unit_id||master_id||type)='050,001050001,00100105KMR'");
        //        execute_cmd(usercode, "update menus set m_name='Pending Payment' ,m_link='../Billing/pend_pay' where m_id='21004.1'");
        //        execute_cmd(usercode, "alter table clients_mst add credit_days varchar(3)");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, " +
        //          "M_MODULE3, U_ID, M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES,ACTIVITY_TYPE) " +
        //          "select '1674', '21004.2', 'Payment Receipt', '../Billing/pay_rec', '3', '-', '-', '0', '-', 'bcf', 'bnpmain', '5', '100', '1', '-'," +
        //          " '-', '-', TO_DATE('2019-07-25 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists (select m_name " +
        //          "from menus where lower(m_name) = 'payment receipt' and m_id = '21004.2' and m_module3 = 'bnpmain')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000126', 'Credit Days', 'N', 'Y', 'CREDIT DAYS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT DAYS' and param5 = 'NEW CLIENT')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000126', 'Credit Days', 'N', 'Y', 'CREDIT DAYS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT DAYS' and param5 = 'CUSTOMER DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000126', 'Credit Days', 'N', 'Y', 'CREDIT DAYS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT DAYS' and param5 = 'EXPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000126', 'Credit Days', 'N', 'Y', 'CREDIT DAYS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT DAYS' and param5 = 'VENDOR DETAIL')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000126', 'Credit Days', 'N', 'Y', 'CREDIT DAYS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT DAYS' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000126', 'Credit Days', 'N', 'Y', 'CREDIT DAYS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT DAYS' and param5 = 'PUBLISHER')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000126', 'Credit Days', 'N', 'Y', 'CREDIT DAYS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CREDIT DAYS' and param5 = 'PROSPECT DATA')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000026', 'Pending Credit Limit', 'N', 'Y', 'PENDING CREDIT LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PENDING CREDIT LIMIT' and param5 = 'INVOICE')");
        //        #endregion

        //        #region brijesh30122019
        //        execute_cmd(usercode, "alter table item add amortchrgs varchar2(8)");
        //        execute_cmd(usercode, "alter table item add matjobwork varchar2(5)");
        //        execute_cmd(usercode, "alter table purchasesc add amchrgunit varchar2(10)");
        //        execute_cmd(usercode, "alter table item add tcs varchar2(1)");
        //        #endregion
        //        #region reena 31122019
        //        execute_cmd(usercode, "update menus set m_name='Fee Type',m_link='../Education/feetype' where m_id='7002.2'");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, " +
        //         "M_MODULE3, U_ID, M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES,ACTIVITY_TYPE) " +
        //         "select '1675', '7002.17', 'Fee Head', '../Education/feehead', '3', '-', '-', '0', '-', 'feemst', 'edumain', '5', '100', '1', '-'," +
        //         " '-', '-', TO_DATE('2019-07-25 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists (select m_name " +
        //         "from menus where lower(m_name) = 'fee head' and m_id = '7002.17' and m_module3 = 'edumain')");

        //        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, " +
        //        "M_MODULE3, U_ID, M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES,ACTIVITY_TYPE) " +
        //        "select '1686', '9011.10', 'Employee', '../Hr/stat_report', '3', '-', '-', '0', '-', 'payrpt', 'paymain', '5', '100', '1', '-'," +
        //        " '-', '-', TO_DATE('2019-07-25 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists (select m_name " +
        //        "from menus where lower(m_name) = 'employee' and m_id = '9011.10' and m_module3 = 'paymain')");
        //        #endregion


        #region reena 02012020
        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, " +
       "M_MODULE3, U_ID, M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES,ACTIVITY_TYPE) " +
       "select '1642', '39001.17', 'Form Control', '../Mst/form_ctrl', '3', '-', '-', '0', '-', 'pdmas', 'pdmain', '5', '100', '1', '-'," +
       " '-', '-', TO_DATE('2019-07-25 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists (select m_name " +
       "from menus where lower(m_name) = 'form control' and m_id = '39001.17' and m_module3 = 'pdmain')");
        #endregion

        #region brijesh02012020 
        execute_cmd(usercode, "alter table itransaction add(mat_cosamt varchar2(10),amrtchrgunit varchar2(10))");
        execute_cmd(usercode, "alter table itransaction add(mat_cosunit varchar2(10),amrtchrgamt varchar2(10))");
        #endregion

        #region brijesh03012020 
        execute_cmd(usercode, "alter table purchasesc add (amort_unit varchar2(5),amrt_amount varchar2(10),matjoper varchar2(5),matjobamt varchar2(8))");
        #endregion

        #region reena 04012020
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000034', 'Parent Account', 'N', 'Y', 'PARENT ACCOUNT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PARENT ACCOUNT' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");
        #endregion

        #region brijesh06012020
        execute_cmd(usercode, "alter table emp_master add (emp_address clob)");
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 7437, 'VDC', '000084', 'Geo Location', 'N', 'Y', 'GEO LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000084' and param3 = 'GEO LOCATION' and param5 = 'EMPLOYEE DETAIL')");
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)select 7438, 'VDC', '000085', 'Transport', 'N', 'Y', 'TRANSPORT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual where Not EXISTS(select name from controls where type = 'VDC' and id='000085' and param3 = 'TRANSPORT' and param5 = 'EMPLOYEE DETAIL')");
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)select 7439, 'VDC', '000086', 'Ledger', 'N', 'Y', 'LEDGER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EMPLOYEE DETAIL' from dual where Not EXISTS(select name from controls where type = 'VDC' and id='000086' and param3 = 'LEDGER' and param5 = 'EMPLOYEE DETAIL')");
        #endregion
        #region reena07012020
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
         "select  'CTL', '000006', 'View Account User Wise', 'N', '-', '-', '-', '" + clientid_mst + "', '" + unitid_mst + "', 'crmvmain', 'crm' from dual " +
         "where Not EXISTS(select name from controls where type = 'CTL' and id = '000006' and trim(m_module3) = 'crmvmain' and param5 = 'crm')");

        #endregion

        #region kc 09012020
        execute_cmd(usercode, "ALTER TABLE USER_DETAILS ADD (TEAM VARCHAR2(100));");
        execute_cmd(usercode, "ALTER TABLE USER_DETAILS ADD (TODO VARCHAR2(1));");
        execute_cmd(usercode, "ALTER TABLE NOTIFICATIONS ADD (CDT DATE );");
        execute_cmd(usercode, "ALTER TABLE NOTIFICATIONS ADD (PR VARCHAR2(1));");
        execute_cmd(usercode, "ALTER TABLE COMPANY_PROFILE ADD (LOGO_PATH VARCHAR2(150));");
        execute_cmd(usercode, "ALTER TABLE COMPANY_PROFILE ADD (LOGO_NAME VARCHAR2(100));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (LOG VARCHAR2(1));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (LOCREG VARCHAR2(3));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (SUBDEPT VARCHAR2(3));");
        execute_cmd(usercode, "ALTER TABLE MASTER_SETTING ADD (DATE8 DATE );");
        execute_cmd(usercode, "ALTER TABLE MASTER_SETTING ADD (DATE7 DATE );");
        execute_cmd(usercode, "ALTER TABLE MASTER_SETTING ADD (col2 VARCHAR2(20) );");
        execute_cmd(usercode, "ALTER TABLE MASTER_SETTING ADD (col1 VARCHAR2(20) );");
        #endregion

        #region 10012020
        execute_cmd(usercode, "alter table teacher_subject add class_teac varchar(100)");
        execute_cmd(usercode, "alter table ledger_master add tally_name varchar(50)");
        #endregion

        #region reena 11012020
        execute_cmd(usercode, "INSERT INTO MENUS (REC_ID, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, " +
           "M_MODULE3, U_ID, M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES,ACTIVITY_TYPE) " +
           "select '1706', '22001.7', 'Ledger Type', '../Mst/doc_master', '3', '-', '-', '0', '-', 'acct', 'acctmain', '5', '100', '1', '-'," +
           " '-', '-', TO_DATE('2019-07-25 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists (select m_name " +
           "from menus where lower(m_name) = 'ledger type' and m_id = '22001.7' and m_module3 = 'acctmain')");

        execute_cmd(usercode, "update menus set m_module1='vchacc' where m_id='22003'");
        #endregion

        #region reena 13012020
        execute_cmd(usercode, "alter table taskassign  modify(type varchar(3),tsktype_name varchar(100))");
        execute_cmd(usercode, "Alter Table clients_mst add(d_limit varchar(11),s_limit varchar(11))");
        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000127', 'Bank Tr. Daily Limit', 'N', 'N', 'BANK TR. DAILY LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. DAILY LIMIT' and param5 = 'NEW CLIENT')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000127', 'Bank Tr. Daily Limit', 'N', 'N', 'BANK TR. DAILY LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. DAILY LIMIT' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000127', 'Bank Tr. Daily Limit', 'N', 'N', 'BANK TR. DAILY LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. DAILY LIMIT' and param5 = 'EXPORT PARTY')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000127', 'Bank Tr. Daily Limit', 'N', 'N', 'BANK TR. DAILY LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. DAILY LIMIT' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000127', 'Bank Tr. Daily Limit', 'N', 'N', 'BANK TR. DAILY LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. DAILY LIMIT' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000127', 'Bank Tr. Daily Limit', 'N', 'N', 'BANK TR. DAILY LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. DAILY LIMIT' and param5 = 'PUBLISHER')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000127', 'Bank Tr. Daily Limit', 'N', 'N', 'BANK TR. DAILY LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. DAILY LIMIT' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000128', 'Bank Tr. Single Limit', 'N', 'N', 'BANK TR. SINGLE LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. SINGLE LIMIT' and param5 = 'NEW CLIENT')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000128', 'Bank Tr. Single Limit', 'N', 'N', 'BANK TR. SINGLE LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. SINGLE LIMIT' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000128', 'Bank Tr. Single Limit', 'N', 'N', 'BANK TR. SINGLE LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. SINGLE LIMIT' and param5 = 'EXPORT PARTY')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000128', 'Bank Tr. Single Limit', 'N', 'N', 'BANK TR. SINGLE LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. SINGLE LIMIT' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000128', 'Bank Tr. Single Limit', 'N', N', 'BANK TR. SINGLE LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. SINGLE LIMIT' and param5 = 'IMPORT PARTY')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000128', 'Bank Tr. Single Limit', 'N', 'N', 'BANK TR. SINGLE LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. SINGLE LIMIT' and param5 = 'PUBLISHER' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000128', 'Bank Tr. Single Limit', 'N', 'N', 'BANK TR. SINGLE LIMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BANK TR. SINGLE LIMIT' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        #endregion

        #region Reena 14012020
        execute_cmd(usercode, "alter table clients_mst modify(org_mobile varchar(15),org_contact varchar(15))");
        execute_cmd(usercode, "alter table emp_master modify (contr varchar(10))");
        execute_cmd(usercode, "alter table clients_mst modify (REF_CODE varchar(10),ref_Ext_acc varchar(10))");
        execute_cmd(usercode, "update controls set param1='M' where param3='PARTY LOCATION'");
        execute_cmd(usercode, "alter table clients_mst add(pubr varchar(1),p_title varchar(25),risk_ctg varchar(3))");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000129', 'Publisher', 'N', 'N', 'PUBLISHER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PUBLISHER' and param5 = 'NEW CLIENT' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000129', 'Publisher', 'N', 'N', 'PUBLISHER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PUBLISHER' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000129', 'Publisher', 'N', 'N', 'PUBLISHER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PUBLISHER' and param5 = 'EXPORT PARTY')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000129', 'Publisher', 'N', 'N', 'PUBLISHER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PUBLISHER' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000129', 'Publisher', 'N', N', 'PUBLISHER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PUBLISHER' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000129', 'Publisher', 'N', 'N', 'PUBLISHER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PUBLISHER' and param5 = 'PUBLISHER')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000129', 'Publisher', 'N', 'N', 'PUBLISHER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PUBLISHER' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000130', 'Risk Category', 'N', 'N', 'RISK CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'NEW CLIENT' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RISK CATEGORY' and param5 = 'NEW CLIENT')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000130', 'Risk Category', 'N', 'N', 'RISK CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RISK CATEGORY' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000130', 'Risk Category', 'N', 'N', 'RISK CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'EXPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RISK CATEGORY' and param5 = 'EXPORT PARTY')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000130', 'Risk Category', 'N', 'N', 'RISK CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RISK CATEGORY' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000130', 'Risk Category', 'N', N', 'RISK CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'IMPORT PARTY' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RISK CATEGORY' and param5 = 'IMPORT PARTY')");

        //        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        //" select '0', 'VDC', '000130', 'Risk Category', 'N', 'N', 'RISK CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PUBLISHER' from dual " +
        //" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PUBLISHER' and param5 = 'PUBLISHER')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000130', 'Risk Category', 'N', 'N', 'RISK CATEGORY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'RISK CATEGORY' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");
        #endregion

        #region brijesh15012020
        execute_cmd(usercode, "alter table enx_tab2 add(col18 varchar2(10),col19 varchar2(10),col20 varchar2(10),col21 varchar2(20),col22 varchar2(20))");
        execute_cmd(usercode, "alter table itransaction add trptr_name varchar2(20)");
        execute_cmd(usercode, "alter table enx_tab2 modify col1 varchar2(500)");
        execute_cmd(usercode, "alter table vouchers modify (CRAMOUNT varchar2(20),DRAMOUNT varchar2(20))");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'CTL', '000009', 'Sale Voucher IGST', 'Y', 'Y', '-', '0', '001', '001001', 'bnpmain', 'Billing' from dual where Not EXISTS(select name from controls where type = 'CTL' and id = '000009' and trim(m_module3) = 'bnpmain' and param5 = 'Billing')");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'CTL', '000007', 'Sale Voucher CGST', 'Y', 'Y', '-', '0', '001', '001001', 'bnpmain', 'Billing' from dual where Not EXISTS(select name from controls where type = 'CTL' and id = '000007' and trim(m_module3) = 'bnpmain' and param5 = 'Billing')");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'CTL', '000008', 'Sale Voucher SGST', 'Y', 'Y', '-', '0', '001', '001001', 'bnpmain', 'Billing' from dual where Not EXISTS(select name from controls where type = 'CTL' and id = '000008' and trim(m_module3) = 'bnpmain' and param5 = 'Billing')");
        #endregion

        #region reena 15012020
        execute_cmd(usercode, "update controls set Param3='ORG EMAIL ID' where  param3='EMAIL ID' and id='000076' and param5 in ('EXPORT PARTY','IMPORT PARTY','PUBLISHER','PROSPECT DATA','VENDOR DETAIL','NEW CLIENT','CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");
        execute_cmd(usercode, "alter table clients_mst add(mftr varchar(1),trans varchar(1))");
        execute_cmd(usercode, "alter table clients_mst add(org_mobile varchar(15),org_contact varchar(15)," +
            "Isorg_email varchar(1),ISorg_sms varchar(1),Iscp_email varchar(1),iscp_sms varchar(1))");
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000131', 'Manufacturer', 'N', 'N', 'MANUFACTURER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MANUFACTURER' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000131', 'Manufacturer', 'N', 'N', 'MANUFACTURER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MANUFACTURER' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000131', 'Manufacturer', 'N', 'N', 'MANUFACTURER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'MANUFACTURER' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000132', 'Transporter', 'N', 'N', 'TRANSPORTER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'TRANSPORTER' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000132', 'Transporter', 'N', 'N', 'TRANSPORTER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'TRANSPORTER' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000132', 'Transporter', 'N', 'N', 'TRANSPORTER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'TRANSPORTER' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000133', 'Mobile No.', 'Y', 'N', 'ORG MOBILE NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORG MOBILE NO.' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000133', 'Mobile No.', 'Y', 'N', 'ORG MOBILE NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORG MOBILE NO.' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000133', 'Mobile No.', 'Y', 'N', 'ORG MOBILE NO.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORG MOBILE NO.' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000134', 'Contact No.', 'Y', 'N', 'ORG CONTACT NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORG CONTACT NO' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000134', 'Contact No.', 'Y', 'N', 'ORG CONTACT NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORG CONTACT NO' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000134', 'Contact No.', 'Y', 'N', 'ORG CONTACT NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'ORG CONTACT NO' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");
        #endregion

        #region reena 16012020
        execute_cmd(usercode, "alter table master_setting add(Col1 varchar(20),col2 varchar(20),Date7 date,Date8 date)");
        #endregion

        #region brijesh18012020
        execute_cmd(usercode, "alter table purchasesc add (tcsamt varchar2(20),tcsper varchar2(5))");
        #endregion

        #region reena 20012020
        execute_cmd(usercode, "update menus set m_link='../Hr/pt_setting' where m_id='9003.1.3'");
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
      " select '0', 'VDC', '000040', 'Gate IN No.', 'Y', 'Y', 'GATE IN NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'MRN' from dual " +
      " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'GATE IN NO' and param5 = 'MRN' and client_id='" + clientid_mst + "')");
        #endregion

        #region kc 21012020               

        execute_cmd(usercode, "ALTER TABLE ITRANSACTION ADD (PKTSTK NUMBER);");
        execute_cmd(usercode, "ALTER TABLE BTCHTRANS ADD(PKTSTK NUMBER);");

        execute_cmd(usercode, "ALTER TABLE ITRANSACTION ADD (PKTSTK NUMBER);");
        execute_cmd(usercode, "ALTER TABLE BTCHTRANS ADD(PKTSTK NUMBER);");
        #endregion

        #region brijesh21012020
        execute_cmd(usercode, "alter table purchasesc modify SHIPFROM varchar2(10)");
        execute_cmd(usercode, "alter table itransaction modify SHIPTO varchar2(10)");
        execute_cmd(usercode, "alter table purchasesc modify SHIPTO varchar2(10)");

        #endregion

        #region reena 22012020
        execute_cmd(usercode, "alter table trans_req modify(P_ACC_ID varchar(10),acc_id varchar(10))");
        //execute_cmd(usercode, "update menus set m_link='../Home/event_cal'  where m_id='1004.1'");
        #endregion

        #region reena 23012020
        execute_cmd(usercode, "alter table trans_req add(s_name_pur varchar(60),s_type_pur varchar(60),s_opt_pur varchar(25)," +
            "s_name_rdp varchar(60),s_type_rdp varchar(60),s_opt_rdp varchar(25),sname_frm varchar(60), stype_frm varchar(60)," +
            " sopt_frm varchar(25), sname_to varchar(60), stype_to varchar(60), sopt_to varchar(25))");
        execute_cmd(usercode, "alter table controls add ( param8 varchar(25),param9 varchar(25))");
        execute_cmd(usercode, "update menus set m_name='Prospect Account' where m_id='40002.9' and m_module3='crmvmain'");


        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000035', 'New Account Name', 'N', 'Y', 'NEW ACCOUNT NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'NEW ACCOUNT NAME' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        #endregion

        #region reena 24012020
        execute_cmd(usercode, "alter table taskassign add priority varchar(10)");
        #endregion

        #region brijesh25012020
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)select 'VDC','000055','Salable','N','Y','SALABLE','N','" + clientid_mst + "','" + unitid_mst + "','0','ITEM/SERVICE MASTER' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000055' and trim(param3) = 'SALABLE' and param5 = 'ITEM/SERVICE MASTER')");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'VDC','000056','PDI Required','N','Y','PDI REQUIRED','N','" + clientid_mst + "','" + unitid_mst + "','0','ITEM/SERVICE MASTER' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000056' and trim(param3) = 'PDI REQUIRED' and param5 = 'ITEM/SERVICE MASTER')");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'VDC','000057','Direct Buy','N','Y','DIRECT BUY','N','" + clientid_mst + "','" + unitid_mst + "','0','ITEM/SERVICE MASTER' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000057' and trim(param3) = 'DIRECT BUY' and param5 = 'ITEM/SERVICE MASTER')");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'VDC','000058','TCS Applicable','N','Y','TCS APPLICABLE','N','" + clientid_mst + "','" + unitid_mst + "','0','ITEM/SERVICE MASTER' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000058' and trim(param3) = 'TCS APPLICABLE' and param5 = 'ITEM/SERVICE MASTER')");
        #endregion

        #region brijesh29012020
        execute_cmd(usercode, "alter table purchases modify (acode varchar2(10),shipfrom varchar2(10),shipto varchar2(10))");
        #endregion

        #region brijesh03022020
        execute_cmd(usercode, "alter table ivendor modify acode varchar2(10)");
        #endregion

        #region reena 01022020
        execute_cmd(usercode, "alter table trans_req add(TRANS_TYPE varchar(3),TRANS_date date,rdp_type varchar(3))");
        #endregion

        #region kc04022020
        execute_cmd(usercode, "update menus set m_name=replace(m_name,'Calender','Calendar') where m_id in ('1004.1','1004.3')");
        #endregion
        #region reena 05022020
        execute_cmd(usercode, "update controls set param3='SELECT SCH TYPE (REDEMPTIONS)' where param5='TRANSACTION REQUEST' and id='000018' and client_id='" + clientid_mst + "'");
        execute_cmd(usercode, "update controls set param3='SCH TYPE (FROM SCHEME SWITCHES)' where param5='TRANSACTION REQUEST' and id='000027' and client_id='" + clientid_mst + "'");
        //execute_cmd(usercode, "update controls set param3='SCH TYPE (TO SCHEME SWITCHES)' where param5='TRANSACTION REQUEST' and id='000029'");
        execute_cmd(usercode, "update controls set param3='SCHEME TYPE (TO SCHEME SWITCHES)' where param5='TRANSACTION REQUEST' and id='000029' and client_id='" + clientid_mst + "'");
        execute_cmd(usercode, "update controls set param3='SCH TYPE PURCHASE (MANUAL)' where id='000039' and param5='TRANSACTION REQUEST' and client_id='" + clientid_mst + "'");
        #endregion

        #region reena 07022020
        execute_cmd(usercode, "INSERT INTO MENUS ( rec_id, M_ID, M_NAME, M_LINK, M_LEVEL, M_ICON, M_CSS, M_SUBMENU, M_MODULE1, M_MODULE2, M_MODULE3, U_ID," +
" M_ORDER,M_DEFAULT,AND_TYPE,AND_LINK, I_LINK, CREATED_DATE, TYPE, M_TEXTFRONT, M_TEXTBACK, ATTRIBUTES, ACTIVITY_TYPE) select 1750, '21009.5'," +
" 'Sales Forcast', '../Billing/s_fcast', '3', '0', '0', '0', '-', 'pb', 'bnpmain', '5', '100', '1', '-', '-', '-', TO_DATE('2019-11-16 11:00:00'," +
" 'YYYY-MM-DD HH24:MI:SS'), '-', '-', '-', '-','-' from dual where not exists(select m_name from menus where lower(m_name) = 'sales forcast' and " +
"m_id = '21009.5' and m_module3 = 'bnpmain')");

        //execute_cmd(usercode, "update menus set m_link = '../Hr/OT_Config' where m_id = '9003.2.6'");

        #endregion

        #region kc08022020
        execute_cmd(usercode, "update menus set m_name=replace(m_name,'Detail','Details') where m_id='9008.6'");
        #endregion

        #region kc10022020
        execute_cmd(usercode, "ALTER TABLE clients_mst ADD(pay_term2 VARCHAR2(3) )");
        execute_cmd(usercode, "ALTER TABLE clients_mst ADD(pay_mode2 VARCHAR2(6) )");
        #endregion

        #region reena11022020
        //execute_cmd(usercode, "update controls set  param3='PRIMARY PAYMENT TERMS',name='Primary Payment Terms' where param3 ='PAYMENT TERMS' and id ='000079' and param5 in ('CUSTOMER DETAIL', 'EXPORT PARTY', 'IMPORT PARTY', 'PUBLISHER', 'PROSPECT DATA', 'NEW CLIENT', 'VENDOR DETAIL') and client_id='" + clientid_mst + "'");
        //execute_cmd(usercode, "update controls set  param3='PRIMARY PAYMENT MODE',name='Primary Payment Mode' where param3 ='PAYMENT MODE' and id ='000119' and param5 in ('CUSTOMER DETAIL', 'EXPORT PARTY', 'IMPORT PARTY', 'PUBLISHER', 'PROSPECT DATA', 'NEW CLIENT', 'VENDOR DETAIL') and client_id='" + clientid_mst + "'");


        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000135', 'Secondary Payment Mode', 'N', 'Y', 'SECONDARY PAYMENT MODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SECONDARY PAYMENT MODE' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000135', 'Secondary Payment Mode', 'N', 'Y', 'SECONDARY PAYMENT MODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SECONDARY PAYMENT MODE' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000135', 'Secondary Payment Mode', 'N', 'Y', 'SECONDARY PAYMENT MODE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SECONDARY PAYMENT MODE' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000136', 'Secondary Payment Terms', 'N', 'Y', 'SECONDARY PAYMENT TERMS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SECONDARY PAYMENT TERMS' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000136', 'Secondary Payment Terms', 'N', 'Y', 'SECONDARY PAYMENT TERMS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SECONDARY PAYMENT TERMS' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000136', 'Secondary Payment Terms', 'N', 'Y', 'SECONDARY PAYMENT TERMS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SECONDARY PAYMENT TERMS' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");


        #endregion

        #region reena 13022020
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        "select  'CTL', '000010', 'Registration Fees Before Admission (For Yes Y and N For No in param1) ', 'N', '-', '-', '-', '" + clientid_mst + "', '" + unitid_mst + "', 'edumain', 'education' from dual " +
        "where Not EXISTS(select name from controls where type = 'CTL' and id = '000010' and trim(m_module3) = 'edumain' and param5 = 'education')");

        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
        "select  'CTL', '000011', 'Library Fees With Regular Fees (For Yes Y and N For No in param1) ', 'N', '-', '-', '-', '" + clientid_mst + "', '" + unitid_mst + "', 'edumain', 'education' from dual " +
        "where Not EXISTS(select name from controls where type = 'CTL' and id = '000011' and trim(m_module3) = 'edumain' and param5 = 'education')");

        execute_cmd(usercode, "update menus set m_name='Indent Approval' where m_id='28006.2'");

        #endregion

        #region brijesh 17022020
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9977', 'VDC', '000001', 'Manual Registration No.', 'N', 'Y', 'Manual Registration No.', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000001' and upper(param3) = 'MANUAL REGISTRATION NO.' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5,PARAM6, PARAM7) select '9978', 'VDC', '000002', 'Middle Name', 'N', 'Y', 'Middle Name', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000002' and upper(param3) = 'MIDDLE NAME' and param5 = 'STDREG'");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3,PARAM5,PARAM6,PARAM7) select '9979', 'VDC', '000003', 'Last Name', 'N', 'Y', 'Last Name', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0','0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000003' and upper(param3) = 'LAST NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5,PARAM6,PARAM7) select '9980', 'VDC', '000004', 'Gender', 'N', 'Y', 'Gender', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000004' and upper(param3) = 'GENDER' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5,PARAM6, PARAM7) select '9981', 'VDC', '000005', 'DOB (DD/MM/YYYY)', 'N', 'Y', 'DOB (DD/MM/YYYY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000005' and upper(param3) = 'DOB (DD/MM/YYYY)' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9983', 'VDC', '000007', 'Place Of Birth', 'N', 'Y', 'Place Of Birth', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000007' and upper(param3) = 'PLACE OF BIRTH' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9984', 'VDC', '000008', 'Mother Tongue', 'N', 'Y', 'Mother Tongue', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000008' and upper(param3) = 'MOTHER TONGUE' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9985', 'VDC', '000009', 'Aadhaar Card Number', 'N', 'Y', 'Aadhaar Card Number', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000009' and upper(param3) = 'AADHAAR CARD NUMBER' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9986', 'VDC', '000010', 'Caste Category', 'N', 'Y', 'Caste Category', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000010' and upper(param3) = 'CASTE CATEGORY' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9987', 'VDC', '000011', 'Caste', 'N', 'Y', 'Caste', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000011' and UPPER(param3) = 'CASTE' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9988', 'VDC', '000012', 'Religion', 'N', 'Y', 'Religion', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000012' and UPPER(param3) = 'RELIGION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9989', 'VDC', '000013', 'Blood Group', 'N', 'Y', 'Blood Group', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000013' and UPPER(param3) = 'BLOOD GROUP' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9990', 'VDC', '000014', 'Sibling', 'N', 'Y', 'Sibling', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000014' and UPPER(param3) = 'SIBLING' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9991', 'VDC', '000015', 'Transport', 'N', 'Y', 'Transport', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000015' and UPPER(param3) = 'TRANSPORT' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9992', 'VDC', '000016', 'Address', 'N', 'Y', 'Address', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000016' and UPPER(param3) = 'ADDRESS' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9993', 'VDC', '000017', 'Disability', 'N', 'Y', 'Disability', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000017' and UPPER(param3) = 'DISABILITY' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9994', 'VDC', '000018', 'Transfer', 'N', 'Y', 'Transfer', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000018' and UPPER(param3) = 'TRANSFER' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9995', 'VDC', '000019', 'Hobby', 'N', 'Y', 'Hobby', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000019' and UPPER(param3) = 'HOBBY' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9996', 'VDC', '000020', 'MIDDLE NAME', 'N', 'Y', 'F MIDDLE NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000020' and UPPER(param3) = 'F MIDDLE NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9997', 'VDC', '000021', 'LAST NAME', 'N', 'Y', 'F LAST NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000021' and UPPER(param3) = 'F LAST NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9998', 'VDC', '000022', 'DOB (DD/MM/YYYY)', 'N', 'Y', 'F DOB (DD/MM/YYYY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000022' and UPPER(param3) = 'F DOB (DD/MM/YYYY)' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '9999', 'VDC', '000023', 'NATIONALITY', 'N', 'Y', 'F NATIONALITY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000023' and UPPER(param3) = 'F NATIONALITY' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10000', 'VDC', '000024', 'QUALIFICATION', 'N', 'Y', 'F QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000024' and UPPER(param3) = 'F QUALIFICATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10001', 'VDC', '000025', 'OCCUPATION', 'N', 'Y', 'F OCCUPATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000025' and UPPER(param3) = 'F OCCUPATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10002', 'VDC', '000026', 'DESIGNATION', 'N', 'Y', 'F DESIGNATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000026' and UPPER(param3) = 'F DESIGNATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10003', 'VDC', '000027', 'ANNUAL INCOME', 'N', 'Y', 'F ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000027' and UPPER(param3) = 'F ANNUAL INCOME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10004', 'VDC', '000028', 'ORGANISATION NAME', 'N', 'Y', 'F ORGANISATION NAME', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000028' and UPPER(param3) = 'F ORGANISATION NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10005', 'VDC', '000029', 'AADHAAR CARD NUMBER', 'N', 'Y', 'F AADHAAR', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000029' and UPPER(param3) = 'F AADHAAR' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10006', 'VDC', '000030', 'CONTACT NUMBER', 'N', 'Y', 'F CONTACT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000030' and UPPER(param3) = 'F CONTACT' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10007', 'VDC', '000031', 'EMAIL', 'N', 'Y', 'F EMAIL', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000031' and UPPER(param3) = 'F EMAIL' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10008', 'VDC', '000032', 'ALUMNI', 'N', 'Y', 'F ALUMNI', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000032' and UPPER(param3) = 'F ALUMNI' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10009', 'VDC', '000033', 'MIDDLE NAME', 'N', 'Y', 'M MIDDLE NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000033' and UPPER(param3) = 'M MIDDLE NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10010', 'VDC', '000034', 'LAST NAME', 'N', 'Y', 'M LAST NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000034' and UPPER(param3) = 'M LAST NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10011', 'VDC', '000035', 'DOB (DD/MM/YYYY)', 'N', 'Y', 'M DOB (DD/MM/YYYY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000035' and UPPER(param3) = 'M DOB (DD/MM/YYYY)' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10012', 'VDC', '000036', 'NATIONALITY', 'N', 'Y', 'M NATIONALITY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000036' and UPPER(param3) = 'M NATIONALITY' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10013', 'VDC', '000037', 'QUALIFICATION', 'N', 'Y', 'M QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000037' and UPPER(param3) = 'M QUALIFICATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10014', 'VDC', '000038', 'OCCUPATION', 'N', 'Y', 'M OCCUPATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000038' and UPPER(param3) = 'M OCCUPATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10015', 'VDC', '000039', 'DESIGNATION', 'N', 'Y', 'M DESIGNATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000039' and UPPER(param3) = 'M DESIGNATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10016', 'VDC', '000040', 'ANNUAL INCOME', 'N', 'Y', 'M ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000040' and UPPER(param3) = 'M ANNUAL INCOME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10017', 'VDC', '000041', 'ORGANISATION NAME', 'N', 'Y', 'M ORGANISATION NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000041' and UPPER(param3) = 'M ORGANISATION NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10018', 'VDC', '000042', 'AADHAAR CARD NUMBER', 'N', 'Y', 'M AADHAAR', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000042' and UPPER(param3) = 'M AADHAAR' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10019', 'VDC', '000043', 'CONTACT NUMBER', 'N', 'Y', 'M CONTACT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000043' and UPPER(param3) = 'M CONTACT' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10020', 'VDC', '000044', 'EMAIL', 'N', 'Y', 'M EMAIL', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000044' and UPPER(param3) = 'M EMAIL' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10021', 'VDC', '000045', 'ALUMNI', 'N', 'Y', 'M ALUMNI', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000045' and UPPER(param3) = 'M ALUMNI' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10022', 'VDC', '000046', 'MIDDLE NAME', 'N', 'Y', 'G MIDDLE NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000046' and UPPER(param3) = 'G MIDDLE NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10024', 'VDC', '000047', 'LAST NAME', 'N', 'Y', 'G LAST NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000047' and UPPER(param3) = 'G LAST NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10024', 'VDC', '000048', 'DOB (DD/MM/YYYY)', 'N', 'Y', 'G DOB (DD/MM/YYYY)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000048' and UPPER(param3) = 'G DOB (DD/MM/YYYY)' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10025', 'VDC', '000049', 'NATIONALITY', 'N', 'Y', 'G NATIONALITY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000049' and UPPER(param3) = 'G NATIONALITY' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10026', 'VDC', '000050', 'QUALIFICATION', 'N', 'Y', 'G QUALIFICATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000050' and UPPER(param3) = 'G QUALIFICATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10027', 'VDC', '000051', 'OCCUPATION', 'N', 'Y', 'G OCCUPATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000051' and UPPER(param3) = 'G OCCUPATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10028', 'VDC', '000052', 'DESIGNATION', 'N', 'Y', 'G DESIGNATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000052' and UPPER(param3) = 'G DESIGNATION' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10029', 'VDC', '000053', 'ANNUAL INCOME', 'N', 'Y', 'G ANNUAL INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000053' and UPPER(param3) = 'G ANNUAL INCOME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10030', 'VDC', '000054', 'ORGANISATION NAME', 'N', 'Y', 'G ORGANISATION NAME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000054' and UPPER(param3) = 'G ORGANISATION NAME' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10031', 'VDC', '000055', 'AADHAAR CARD NUMBER', 'N', 'Y', 'G AADHAAR', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000055' and UPPER(param3) = 'G AADHAAR' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10032', 'VDC', '000056', 'CONTACT NUMBER', 'N', 'Y', 'G CONTACT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000056' and UPPER(param3) = 'G CONTACT' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10033', 'VDC', '000057', 'EMAIL', 'N', 'Y', 'G EMAIL', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000057' and UPPER(param3) = 'G EMAIL' and param5 = 'STDREG')");
        execute_cmd(usercode, "insert into controls(REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7) select '10035', 'VDC', '000058', 'ALUMNI', 'N', 'Y', 'G ALUMNI', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'STDREG', '0', '0' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000058' and UPPER(param3) = 'G ALUMNI' and param5 = 'STDREG')");








        #endregion

        #region reena 18022020
        execute_cmd(usercode, "update menus set m_name='Salary Advance Policy' where m_id='9003.2.5'");
        execute_cmd(usercode, "update menus set m_link='../hr/empsal_adv' where m_id='9010.4'");
        #endregion

        #region reena 21022020
        execute_cmd(usercode, "update controls set upper(param3)='CP CONTACT NO' where client_id='" + clientid_mst + "' and upper(param3)='CONTACT_P CONTACT NO' and id='000036'  and param5 in ('VENDOR DETAIL','EXPORT PARTY','IMPORT PARTY','PUBLISHER','PROSPECT DATA','NEW CLIENT','CUSTOMER DETAIL')");

        #endregion

        #region reena22022020
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000137', 'Taxable Income', 'N', 'Y', 'TAXABLE INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'TAXABLE INCOME' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000137', 'Taxable Income', 'N', 'Y', 'TAXABLE INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'TAXABLE INCOME' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000137', 'Taxable Income', 'N', 'Y', 'TAXABLE INCOME', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'TAXABLE INCOME' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000138', '15GH Submit', 'N', 'Y', '15GH SUBMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = '15GH SUBMIT' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000138', '15GH Submit', 'N', 'Y', '15GH SUBMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = '15GH SUBMIT' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000138', '15GH Submit', 'N', 'Y', '15GH SUBMIT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = '15GH SUBMIT' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "alter table clients_mst add(taxable varchar(1),ghsub varchar(1),s_citizen varchar(1))");
        #endregion
        #region Brijesh 22022020
        execute_cmd(usercode, "alter table itransaction add doc_type varchar2(20)");
        execute_cmd(usercode, "alter table itransactionc add doc_type varchar2(20)");
        execute_cmd(usercode, "alter table btchtrans add doc_type varchar2(20)");
        #endregion  
        #region Brijesh 24022020
        execute_cmd(usercode, "alter table itbal_enx add acyear varchar2(10)");
        #endregion
        #region 24022020
        execute_cmd(usercode, "alter table enx_tab2 add(Col23 CLOB)");
        #endregion

        #region kc28022020
        execute_cmd(usercode, "ALTER TABLE iprod ADD refcode VARCHAR2(20);");
        execute_cmd(usercode, "ALTER TABLE iprod ADD refcode1 VARCHAR2(20);");
        #endregion
        #region kc02032020
        execute_cmd(usercode, "ALTER TABLE emp_master add rptto VARCHAR2(6);");
        execute_cmd(usercode, "ALTER TABLE emp_master add istrans VARCHAR2(1) default '-';");
        #endregion
        #region kc03032020
        execute_cmd(usercode, "ALTER TABLE item ADD (uom3 VARCHAR2(3));");
        execute_cmd(usercode, "ALTER TABLE item ADD (cuom2 VARCHAR2(20));");
        #endregion

        #region reena 04032020
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000139', 'Aadhar Card Copy', 'N', 'Y', 'AADHAR CARD COPY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD COPY' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000139', 'Aadhar Card Copy', 'N', 'Y', 'AADHAR CARD COPY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD COPY' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000139', 'Aadhar Card Copy', 'N', 'Y', 'AADHAR CARD COPY', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'AADHAR CARD COPY' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000140', 'CP Other Contact No', 'N', 'Y', 'CP OTHER CONTACT NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CP OTHER CONTACT NO' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000140', 'CP Other Contact No', 'N', 'Y', 'CP OTHER CONTACT NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CP OTHER CONTACT NO' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000140', 'CP Other Contact No', 'N', 'Y', 'CP OTHER CONTACT NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CP OTHER CONTACT NO' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000141', 'CP Other Email ID', 'N', 'Y', 'CP OTHER EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CP OTHER EMAIL ID' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000141', 'CP Other Email ID', 'N', 'Y', 'CP OTHER EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CP OTHER EMAIL ID' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000141', 'CP Other Email ID', 'N', 'Y', 'CP OTHER EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CP OTHER EMAIL ID' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "alter table clients_mst add(cpcontother varchar(150),cpemailother varchar(150))");
        execute_cmd(usercode, "alter table lead_master add(cpcontother varchar(150),cpemailother varchar(150))");
        execute_cmd(usercode, "alter table clients_mst modify(cpdept varchar(50),cpdesig varchar(50))");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000136', 'CP Other Contact No', 'N', 'Y', 'CP OTHER CONTACT NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CP OTHER CONTACT NO' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");


        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        " select '0', 'VDC', '000137', 'CP Other Email ID', 'N', 'Y', 'CP OTHER EMAIL ID', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'CP OTHER EMAIL ID' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        #endregion

        #region reena 05042020
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        " select '0', 'VDC', '000138', 'Preferred Location', 'N', 'Y', 'PREFERRED LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PREFERRED LOCATION' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
        " select '0', 'VDC', '000139', 'Budget', 'N', 'Y', 'BUDGET', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
        " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'BUDGET' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000140', 'Funding', 'N', 'Y', 'FUNDING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'FUNDING' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "Alter table lead_master add(pr_loc varchar(50),budget varchar(30),funding varchar(50))");
        #endregion

        #region reena 07032020
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000141', 'Party Location', 'N', 'Y', 'PARTY LOCATION', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'PARTY LOCATION' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "Alter table lead_master add(ploc varchar(3))");

        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5)" +
       "select  'CTL', '000012', 'Enter Only Formatted Mobile No (For Yes Y and N For No in param1) ', 'Y', '-', '-', '-', '" + clientid_mst + "', '" + unitid_mst + "', '-', '-' from dual " +
       "where Not EXISTS(select name from controls where type = 'CTL' and id = '000012' and trim(m_module3) = '-' and param5 = '-' )");

        #endregion

        #region reena 12032020
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000142', 'Senior Citizen(Tax)', 'N', 'Y', 'SENIOR CITIZEN (TAX)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SENIOR CITIZEN (TAX)' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000142', 'Senior Citizen(Tax)', 'N', 'Y', 'SENIOR CITIZEN (TAX)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SENIOR CITIZEN (TAX)' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000142', 'Senior Citizen(Tax)', 'N', 'Y', 'SENIOR CITIZEN (TAX)', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SENIOR CITIZEN (TAX)' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000142', 'Upload Document', 'N', 'Y', 'UPLOAD DOCUMENT', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'UPLOAD DOCUMENT' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        #endregion

        #region reena 17032020
        string curr_date = server_datetime(usercode);
        string dt_ft = "YYYY-MM-dd HH24:MI:SS";
        // Tally//
        execute_cmd(usercode, "Insert into master_setting  (INACTIVE_DATE,STATUS,MALERATIO,FEMALERATIO,SECTIONTYPE,CLIENT_GSTIN,GROUP_ID,GROUP_REFRENCE_NUMBER,CONT_PERSON_EMAIL,CONT_PERSON_ALTNUMBER,CONT_PERSON_NUMBER,CONT_PERSON_NAME,UNIT_NAME,GROUP_NAME,CLIENT_NAME,TEACHER_CATEGORY,OPTIONAL_SUBJECT,SUBJECT_STRENGTH,SECTION_STRENGTH,SECTIONID,CLASSID,ISREGFEESBEFOREADM,ISALPHABETIC_WISE,ISADMISSION_WISE,ISSECTIONBASED,ISCLASSBASED,ISSCHOOLBASED,master_status ,ISROLLNOCHANGE,ISRECEIPTNOCHANGE,ISROLLNOREGWISE,ISREGNOCHANGE,vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                                               " select to_date('" + curr_date + "','" + dt_ft + "'), '0','0', '0','0','0', '0', '0', '0','0', '0','0','0', '0', '0', '0', '0', '0','0','0', '0', '0', '0','0', '0', '0','0', '0','0','0','0', '0', '0',to_date('" + curr_date + "','" + dt_ft + "'), 'TAL','0','001','0','000001',to_date('" + curr_date + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "','-' ,to_date('" + curr_date + "','" + dt_ft + "') ,to_date('" + curr_date + "','" + dt_ft + "') from dual" +
                                                               " where Not EXISTS(select Master_name from master_setting where Master_id='001' and  client_unit_id='" + unitid_mst + "' and   type='TAL' ) ");

        // India Mart//
        execute_cmd(usercode, "Insert into master_setting  (INACTIVE_DATE,STATUS,MALERATIO,FEMALERATIO,SECTIONTYPE,CLIENT_GSTIN,GROUP_ID,GROUP_REFRENCE_NUMBER,CONT_PERSON_EMAIL,CONT_PERSON_ALTNUMBER,CONT_PERSON_NUMBER,CONT_PERSON_NAME,UNIT_NAME,GROUP_NAME,CLIENT_NAME,TEACHER_CATEGORY,OPTIONAL_SUBJECT,SUBJECT_STRENGTH,SECTION_STRENGTH,SECTIONID,CLASSID,ISREGFEESBEFOREADM,ISALPHABETIC_WISE,ISADMISSION_WISE,ISSECTIONBASED,ISCLASSBASED,ISSCHOOLBASED,master_status ,ISROLLNOCHANGE,ISRECEIPTNOCHANGE,ISROLLNOREGWISE,ISREGNOCHANGE,vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                                               " select to_date('" + curr_date + "','" + dt_ft + "'), '0','0', '0','0','0', '0', '0', '0','0', '0','0','0', '0', '0', '0', '0', '0','0','0', '0', '0', '0','0', '0', '0','0', '0','0','0','0', '0', '0',to_date('" + curr_date + "','" + dt_ft + "'), 'TAL','0','002','0','000001',to_date('" + curr_date + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "','-' ,to_date('" + curr_date + "','" + dt_ft + "') ,to_date('" + curr_date + "','" + dt_ft + "') from dual" +
                                                               " where Not EXISTS(select Master_name from master_setting where Master_id='002' and  client_unit_id='" + unitid_mst + "' and   type='TAL' ) ");

        // just dial//
        execute_cmd(usercode, "Insert into master_setting  (INACTIVE_DATE,STATUS,MALERATIO,FEMALERATIO,SECTIONTYPE,CLIENT_GSTIN,GROUP_ID,GROUP_REFRENCE_NUMBER,CONT_PERSON_EMAIL,CONT_PERSON_ALTNUMBER,CONT_PERSON_NUMBER,CONT_PERSON_NAME,UNIT_NAME,GROUP_NAME,CLIENT_NAME,TEACHER_CATEGORY,OPTIONAL_SUBJECT,SUBJECT_STRENGTH,SECTION_STRENGTH,SECTIONID,CLASSID,ISREGFEESBEFOREADM,ISALPHABETIC_WISE,ISADMISSION_WISE,ISSECTIONBASED,ISCLASSBASED,ISSCHOOLBASED,master_status ,ISROLLNOCHANGE,ISRECEIPTNOCHANGE,ISROLLNOREGWISE,ISREGNOCHANGE,vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                                               " select to_date('" + curr_date + "','" + dt_ft + "'), '0','0', '0','0','0', '0', '0', '0','0', '0','0','0', '0', '0', '0', '0', '0','0','0', '0', '0', '0','0', '0', '0','0', '0','0','0','0', '0', '0',to_date('" + curr_date + "','" + dt_ft + "'), 'TAL','0','003','0','000001',to_date('" + curr_date + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "','-' ,to_date('" + curr_date + "','" + dt_ft + "') ,to_date('" + curr_date + "','" + dt_ft + "') from dual" +
                                                               " where Not EXISTS(select Master_name from master_setting where Master_id='003' and  client_unit_id='" + unitid_mst + "' and   type='TAL' ) ");

        // 99 Acres//
        execute_cmd(usercode, "Insert into master_setting  (INACTIVE_DATE,STATUS,MALERATIO,FEMALERATIO,SECTIONTYPE,CLIENT_GSTIN,GROUP_ID,GROUP_REFRENCE_NUMBER,CONT_PERSON_EMAIL,CONT_PERSON_ALTNUMBER,CONT_PERSON_NUMBER,CONT_PERSON_NAME,UNIT_NAME,GROUP_NAME,CLIENT_NAME,TEACHER_CATEGORY,OPTIONAL_SUBJECT,SUBJECT_STRENGTH,SECTION_STRENGTH,SECTIONID,CLASSID,ISREGFEESBEFOREADM,ISALPHABETIC_WISE,ISADMISSION_WISE,ISSECTIONBASED,ISCLASSBASED,ISSCHOOLBASED,master_status ,ISROLLNOCHANGE,ISRECEIPTNOCHANGE,ISROLLNOREGWISE,ISREGNOCHANGE,vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                                               " select to_date('" + curr_date + "','" + dt_ft + "'), '0','0', '0','0','0', '0', '0', '0','0', '0','0','0', '0', '0', '0', '0', '0','0','0', '0', '0', '0','0', '0', '0','0', '0','0','0','0', '0', '0',to_date('" + curr_date + "','" + dt_ft + "'), 'TAL','0','004','0','000001',to_date('" + curr_date + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "','-' ,to_date('" + curr_date + "','" + dt_ft + "') ,to_date('" + curr_date + "','" + dt_ft + "') from dual" +
                                                               " where Not EXISTS(select Master_name from master_setting where Master_id='004' and  client_unit_id='" + unitid_mst + "' and   type='TAL' ) ");

        // MAGIC BRICK//
        execute_cmd(usercode, "Insert into master_setting  (INACTIVE_DATE,STATUS,MALERATIO,FEMALERATIO,SECTIONTYPE,CLIENT_GSTIN,GROUP_ID,GROUP_REFRENCE_NUMBER,CONT_PERSON_EMAIL,CONT_PERSON_ALTNUMBER,CONT_PERSON_NUMBER,CONT_PERSON_NAME,UNIT_NAME,GROUP_NAME,CLIENT_NAME,TEACHER_CATEGORY,OPTIONAL_SUBJECT,SUBJECT_STRENGTH,SECTION_STRENGTH,SECTIONID,CLASSID,ISREGFEESBEFOREADM,ISALPHABETIC_WISE,ISADMISSION_WISE,ISSECTIONBASED,ISCLASSBASED,ISSCHOOLBASED,master_status ,ISROLLNOCHANGE,ISRECEIPTNOCHANGE,ISROLLNOREGWISE,ISREGNOCHANGE,vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                                               " select to_date('" + curr_date + "','" + dt_ft + "'), '0','0', '0','0','0', '0', '0', '0','0', '0','0','0', '0', '0', '0', '0', '0','0','0', '0', '0', '0','0', '0', '0','0', '0','0','0','0', '0', '0',to_date('" + curr_date + "','" + dt_ft + "'), 'TAL','0','005','0','000001',to_date('" + curr_date + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "','-' ,to_date('" + curr_date + "','" + dt_ft + "') ,to_date('" + curr_date + "','" + dt_ft + "') from dual" +
                                                               " where Not EXISTS(select Master_name from master_setting where Master_id='005' and  client_unit_id='" + unitid_mst + "' and   type='TAL' ) ");

        // TAWK TO//
        execute_cmd(usercode, "Insert into master_setting  (INACTIVE_DATE,STATUS,MALERATIO,FEMALERATIO,SECTIONTYPE,CLIENT_GSTIN,GROUP_ID,GROUP_REFRENCE_NUMBER,CONT_PERSON_EMAIL,CONT_PERSON_ALTNUMBER,CONT_PERSON_NUMBER,CONT_PERSON_NAME,UNIT_NAME,GROUP_NAME,CLIENT_NAME,TEACHER_CATEGORY,OPTIONAL_SUBJECT,SUBJECT_STRENGTH,SECTION_STRENGTH,SECTIONID,CLASSID,ISREGFEESBEFOREADM,ISALPHABETIC_WISE,ISADMISSION_WISE,ISSECTIONBASED,ISCLASSBASED,ISSCHOOLBASED,master_status ,ISROLLNOCHANGE,ISRECEIPTNOCHANGE,ISROLLNOREGWISE,ISREGNOCHANGE,vch_num,vch_date,type,Master_type,master_id, Master_Name, master_entby ,master_entdate,client_id,client_unit_id , master_editby ,master_editdate,CREATED_DATE)" +
                                                               " select to_date('" + curr_date + "','" + dt_ft + "'), '0','0', '0','0','0', '0', '0', '0','0', '0','0','0', '0', '0', '0', '0', '0','0','0', '0', '0', '0','0', '0', '0','0', '0','0','0','0', '0', '0',to_date('" + curr_date + "','" + dt_ft + "'), 'TAL','0','006','0','000001',to_date('" + curr_date + "','" + dt_ft + "') ,'" + clientid_mst + "','" + unitid_mst + "','-' ,to_date('" + curr_date + "','" + dt_ft + "') ,to_date('" + curr_date + "','" + dt_ft + "') from dual" +
                                                               " where Not EXISTS(select Master_name from master_setting where Master_id='006' and  client_unit_id='" + unitid_mst + "' and   type='TAL' ) ");
        #endregion

        #region kc20032020
        execute_cmd(usercode, "ALTER TABLE iprod ADD (type2 VARCHAR2(3));");
        #endregion
        #region brijesh18032020
        execute_cmd(usercode, "alter table vehicle_master modify col10 varchar2(25)");
        #endregion

        #region reena30032020
        execute_cmd(usercode, "alter table user_details modify per_id varchar(14)");
        #endregion

        #region reena 07042020
        execute_cmd(usercode, "alter table  student_receipt_detail add ref_no varchar(15)");

        #endregion

        #region reena 01052020
        execute_cmd(usercode, "alter table holiday_master modify(teacher_id varchar(6))");
        #endregion

        #region reena 11052020
        execute_cmd(usercode, "alter table lead_master add (intg_id varchar(6),intg_type  varchar(3))");
        #endregion

        #region reena 25052020
        execute_cmd(usercode, "alter table answers add img_type varchar(15)");
        #endregion

        #region kc29052020
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (PROB VARCHAR2(10));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (NOTEMPR VARCHAR2(10));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (NOTEMP VARCHAR2(10));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (POP VARCHAR2(10));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (PAYMODE VARCHAR2(3));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (jconfdt date);");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (statustype VARCHAR2(1));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (off_phone VARCHAR2(10));");
        execute_cmd(usercode, "ALTER TABLE EMP_MASTER ADD (extno VARCHAR2(20));");
        #endregion

        #region reena 20062020
        execute_cmd(usercode, " alter table enx_tab add(col14 varchar(20),col15 varchar(20),col16 varchar(20))");
        #endregion

        #region reena 
        execute_cmd(usercode, "alter table lead_master add lead_app varchar(1)");
        #endregion

        #region reena 29062020
        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000143', 'Gender', 'N', 'Y', 'GENDER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'GENDER' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000144', 'Lead Rating', 'N', 'Y', 'LEAD RATING', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'LEAD MASTER' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'LEAD RATING' and param5 = 'LEAD MASTER' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000143', 'Gender', 'N', 'Y', 'GENDER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'GENDER' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000143', 'Gender', 'N', 'Y', 'GENDER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'GENDER' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000143', 'Gender', 'N', 'Y', 'GENDER', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'GENDER' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");


        execute_cmd(usercode, "alter table lead_master add (cp_gender  varchar(6),ld_rating varchar(3))");
        execute_cmd(usercode, "alter table clients_mst add cp_gender varchar(6)");

        #endregion

        #region brijesh02072020
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'VDC', '000027', 'Eway Bill No', 'N', 'Y', 'EWAY BILL NO', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual where Not EXISTS(select name from controls where type = 'VDC' and id='000027' and trim(param3) = 'EWAY BILL NO' and param5 = 'INVOICE')");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'VDC', '000028', 'Sales Channel', 'N', 'Y', 'SALES CHANNEL', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual where Not EXISTS(select name from controls where type = 'VDC' and id='000028' and trim(param3) = 'SALES CHANNEL' and param5 = 'INVOICE')");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'VDC', '000029', 'EWAY BILL DATE', 'N', 'Y', 'EWAY BILL DATE', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'INVOICE' from dual where Not EXISTS(select name from controls where type = 'VDC' and id='000029' and trim(param3) = 'EWAY BILL DATE' and param5 = 'INVOICE')");
        #endregion

        #region reena 
        execute_cmd(usercode, "alter table clients_mst add city_mn varchar(100)");
        #endregion

        #region reena 14072020

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000144', 'Shipping Address Same As Billing Address', 'N', 'Y', 'SHIPPING ADDRESS SAME AS BILLING ADDRESS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SHIPPING ADDRESS SAME AS BILLING ADDRESS' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000144', 'Shipping Address Same As Billing Address', 'N', 'Y', 'SHIPPING ADDRESS SAME AS BILLING ADDRESS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SHIPPING ADDRESS SAME AS BILLING ADDRESS' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000144', 'Shipping Address Same As Billing Address', 'N', 'Y', 'SHIPPING ADDRESS SAME AS BILLING ADDRESS', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'SHIPPING ADDRESS SAME AS BILLING ADDRESS' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
" select '0', 'VDC', '000145', 'Shipping Address', 'N', 'Y', 'Shipping Address', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'CUSTOMER DETAIL' from dual " +
" where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'Shipping Address' and param5 = 'CUSTOMER DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
     " select '0', 'VDC', '000145', 'Shipping Address', 'N', 'Y', 'Shipping Address', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'VENDOR DETAIL' from dual " +
     " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'Shipping Address' and param5 = 'VENDOR DETAIL' and client_id='" + clientid_mst + "')");

        execute_cmd(usercode, "insert into controls(rec_id,type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) " +
       " select '0', 'VDC', '000145', 'Shipping Address', 'N', 'Y', 'Shipping Address', '0', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'PROSPECT DATA' from dual " +
       " where not exists(select param2 from controls where type = 'VDC' and trim(param3) = 'Shipping Address' and param5 = 'PROSPECT DATA' and client_id='" + clientid_mst + "')");

        #endregion

        #region 14072020 Ram
        execute_cmd(usercode, "ALTER TABLE CONTROLS MODIFY (PARAM4 VARCHAR2(50), PARAM6 VARCHAR2(50), PARAM7 VARCHAR2(50))");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,param6,client_id,client_unit_id,m_module3,param5)" +
      "select  'CTL', '000016', 'How Many Copies of Invoice and Their Names(- Means Extra Copy)', 4, 'Original for Buyer', 'Duplicate for Transporter'," +
      " 'Triplicate for Supplier','-', '" + clientid_mst + "', '" + unitid_mst + "', '-', '-' from dual " +
      "where Not EXISTS(select name from controls where type = 'CTL' and id = '000016' and trim(m_module3) = '-' and param5 = '-' )");

        execute_cmd(usercode, "ALTER TABLE urights ADD FAVMENU VARCHAR2(1)");

        #endregion

        #region reena 14072020
        execute_cmd(usercode, "alter table clients_mst add(addtype3 varchar(3),ship_ADD varchar(3)," +
            " country3 varchar(100),state3 varchar(50),city3 varchar(30),cpaddr3 varchar(250)," +
            " pincode_3 varchar(6),istds varchar(1), d_name varchar(50), d_pan varchar(11), d_type varchar(50)," +
            " isnri varchar(1), nri_tax varchar(15), nri_country varchar(10), d_add varchar(1), " +
            "d_address varchar(250),d_pincode varchar(6), d_city varchar(10), d_state varchar(10)," +
            " d_country varchar(10), tds_d varchar(100), tds_rate varchar(10), tds_limit varchar(10)," +
            " d_lower varchar(1) , d_cert varchar(50), d_valid date)");

        #endregion

        #region kc16072020
        execute_cmd(usercode, "alter table company_unit_profile add bank varchar(35)");
        execute_cmd(usercode, "alter table company_unit_profile add branch varchar(35)");
        execute_cmd(usercode, "alter table company_unit_profile add acctno varchar(35)");
        execute_cmd(usercode, "alter table company_unit_profile add ifsc varchar(15)");
        #endregion
        #region brijesh18072020
        execute_cmd(usercode, "alter table itransactionc add (per_id varchar2(30),per_name varchar2(100),is_other varchar2(3),other_per varchar2(100))");
        execute_cmd(usercode, "alter table itransaction add (per_id varchar2(30),per_name varchar2(100),is_other varchar2(3),other_per varchar2(100))");
        #endregion

        #region brijesh20072020
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'VDC', '000061', 'Sales Name', 'N', 'Y', 'SALE NAME', 'N', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'ITEM/SERVICE MASTER' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000061' and trim(param3) = 'SALE NAME' and param5 = 'ITEM/SERVICE MASTER')");
        execute_cmd(usercode, "insert into controls(type,id,name,param1,param2,param3,param4,client_id,client_unit_id,m_module3,param5) select 'VDC', '000062', 'Purchase Name', 'N', 'Y', 'PURCHASE NAME', 'N', '" + clientid_mst + "', '" + unitid_mst + "', '0', 'ITEM/SERVICE MASTER' from dual where Not EXISTS(select name from controls where type = 'VDC' and id = '000062' and trim(param3) = 'PURCHASE NAME' and param5 = 'ITEM/SERVICE MASTER')");
        execute_cmd(usercode, "ALTER TABLE ITEM ADD(sname varchar2(100),pname varchar2(100))");
        #endregion
        #region brijesh30072020
        execute_cmd(usercode, "alter table vouchers add(invamt varchar2(30),balamt varchar2(30),chqno varchar2(40),chqdate date,chqamt varchar2(30),remark varchar2(200),reftype varchar2(20),type1 varchar2(10),bank_ac varchar2(30),bankifsc varchar2(20),RNO VARCHAR2(10))");
        #endregion
        //#region Ram 01082020
        //execute_cmd(usercode, "ALTER TABLE PURCHASES MODIFY INAME VARCHAR2(100);");
        //#endregion
        #region brijesh01082020
        execute_cmd(usercode, "ALTER TABLE purchases  MODIFY iname VARCHAR2(150);");
        execute_cmd(usercode, "ALTER TABLE purchasesc MODIFY iname VARCHAR2(150);");
        execute_cmd(usercode, "ALTER TABLE kc_tab MODIFY col27 VARCHAR2(150);");
        #endregion
        #region brijesh04082020
        execute_cmd(usercode, "ALTER TABLE PURCHASES ADD (IS_WARNT VARCHAR2(5),WRTDATE DATE)");
        #endregion
        #region brijesh08082020
        execute_cmd(usercode, "ALTER TABLE VEHICLE_MASTER ADD(COL43 VARCHAR2(20),COL44 VARCHAR2(20),COL45 VARCHAR2(20),COL46 VARCHAR2(20),COL47 VARCHAR2(20),COL48 VARCHAR2(20),COL49 VARCHAR2(20),COL50 VARCHAR2(20))");
        #endregion
        #region brijesh19102020
        execute_cmd(usercode, "ALTER TABLE VOUCHERS ADD MRNREF VARCHAR2(30);");
        #endregion
        #region brijesh21102020
        execute_cmd(usercode, "ALTER TABLE VOUCHERS MODIFY(INVNO VARCHAR2(20 CHAR));");
        #endregion
        #region brijesh29102020
        execute_cmd(usercode, "ALTER TABLE VOUCHERS ADD (RVSCODE VARCHAR2(30));");
        execute_cmd(usercode, "alter table vouchers add (adj_type varchar2(10));");
        execute_cmd(usercode, "alter table vouchers add (RECO varchar2(1));");
        execute_cmd(usercode, "alter table vouchers add (prno varchar2(10));");
        execute_cmd(usercode, "alter table vouchers add (MRNREF varchar2(30));");
        #endregion
        #region kc131020
        execute_cmd(usercode, "ALTER TABLE lead_master ADD (pax VARCHAR2(3));");
        execute_cmd(usercode, "ALTER TABLE lead_master ADD (dof date);");
        execute_cmd(usercode, "ALTER TABLE lead_master ADD (ld_venue VARCHAR2(3));");
        execute_cmd(usercode, "ALTER TABLE lead_master ADD (ld_menu VARCHAR2(3));");
        execute_cmd(usercode, "ALTER TABLE clients_mst ADD (trcom VARCHAR2(1));");
        #endregion
        #region brijesh051120
        execute_cmd(usercode, "INSERT INTO CONTROLS (REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7, PARAM8, PARAM9, ID_DUP) VALUES ('10353', 'CTL', '000019', 'Allow Negative Stock From Invoice', 'Y', '0', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', 'billmain', 'Billing', '0', '0', '0', '0', '0');");
        execute_cmd(usercode, "INSERT INTO CONTROLS (REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7, PARAM8, PARAM9, ID_DUP) VALUES ('10354', 'CTL', '000020', 'Allow Negative Stock From Item Issued', 'Y', '0', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', 'invmain', 'Inventory', '0', '0', '0', '0', '0');");
        execute_cmd(usercode, "INSERT INTO REPORTS (REC_ID, VCH_NUM, VCH_DATE, RPT_NAME, TYPE, CAT_ID, CAT_NAME, MENU_ID, MODULE_ID, MODULE, ENT_BY, ENT_DATE, CREATED_DATE, EDIT_BY, EDIT_DATE, CLIENT_ID, CLIENT_UNIT_ID, COM_ID, RPT_NEWNAME, FUN_NAME) VALUES ('189', '000024', TO_DATE('2020-01-24 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Service Item Ledger', 'RPT', 'invrpt', 'Stock Summary', '17005.1', '17000', 'invtmain', '" + userid + "', TO_DATE('2020-01-24 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2020-01-24 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '" + userid + "', TO_DATE('2020-01-24 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '" + clientid_mst + "', '" + unitid_mst + "', '-', 'Service Item Ledger', 'call_filterfrm');");
        #endregion
        #region brijesh061120
        execute_cmd(usercode, "INSERT INTO CONTROLS (REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7, PARAM8, PARAM9, ID_DUP) VALUES ('10359', 'CTL', '000021', 'Customer Rejection / Sales Return (Voucher)', '403000008', '0', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', 'invtmain', 'Inventory', '0', '0', '0', '0', '0');");
        #endregion
        #region brijesh101120
        execute_cmd(usercode, "INSERT INTO CONTROLS (REC_ID, TYPE, ID, NAME, PARAM1, PARAM2, PARAM3, PARAM4, CLIENT_ID, CLIENT_UNIT_ID, M_MODULE3, PARAM5, PARAM6, PARAM7, PARAM8, PARAM9, ID_DUP) VALUES ('10359', 'CTL', '000021', 'Round Off invoice Net Amount', 'Y', '502000010', '0', '0', '" + clientid_mst + "', '" + unitid_mst + "', 'billmain', 'Billing', '0','0', '0', '0', '0')");        execute_cmd(usercode, "alter table ITRANSACTION add round_amt varchar2(20)");
        execute_cmd(usercode, "ALTER TABLE BTCHTRANS MODIFY IREMARK VARCHAR2(400)");
        #endregion
        #region kc171120       
        execute_cmd(usercode, "alter table func add freq varchar2(3)");
        execute_cmd(usercode, "alter table lead_master add freq varchar2(3)");
        execute_cmd(usercode, "alter table vouchers modify aname varchar2(50)");
        #endregion
        #region brijesh181120
        execute_cmd(usercode, "ALTER TABLE CONTROLS ADD ID_DUP VARCHAR2(6)");
        #endregion
        #region brijesh101120        

        #endregion
        execute_cmd(usercode, "alter table enx_tab2 add date3 date;");
        
        Multiton multiton = Multiton.ReNew(MyGuid);
    }

    public bool ValidateEmail(string email)
    {
        bool result = false;
        Regex regex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
        Match match = regex.Match(email);
        if (match.Success) result = true;
        return result;
    }

    public string seekval_dt(DataTable seek_dt, string conditions, string col1)
    {
        string result = "0";
        DataRow[] rows = seek_dt.Select(conditions, "", System.Data.DataViewRowState.CurrentRows);
        if (rows.Length == 0) result = "0";
        else
        {
            result = rows[0][col1].ToString().Trim().ToUpper();
        }
        return result;
    }
    public DataTable seekval_dt(DataTable seek_dt, string conditions)
    {
        string result = "0";
        DataRow[] rows = seek_dt.Select(conditions, "", System.Data.DataViewRowState.CurrentRows);
        return rows.CopyToDataTable();
    }
    public int seekval_dt_rowindex(DataTable seek_dt, string conditions)
    {
        int result = 0;
        DataRow[] rows = seek_dt.Select(conditions, "", System.Data.DataViewRowState.CurrentRows);
        if (rows.Length == 0) result = 0;
        else
        {
            result = seek_dt.Rows.IndexOf(rows[0]) + 1;
        }
        return result;
    }
    public string GetJson(DataTable dt)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("[");
        for (int count = 0; count < dt.Rows.Count; count++)
        {
            DataRow dr = dt.Rows[count];
            string rowDataStr = "";
            foreach (DataColumn dc in dt.Columns)
            {
                if (rowDataStr.Length > 0) rowDataStr += ",";
                if (dr[dc].GetType() == typeof(Int32) || dr[dc].GetType() == typeof(Double) || dr[dc].GetType() == typeof(Decimal))
                    rowDataStr += dr[dc].ToString().Replace("\r\n", "").Replace("'", "`");
                else rowDataStr += "'" + dr[dc].ToString().Replace("\r\n", "").Replace("'", "`") + "'";
            }
            if (count > 0) sb.Append(",[" + rowDataStr + "]");
            else sb.Append("[" + rowDataStr + "]");
        }
        sb.Append("]"); dt.Dispose();
        return sb.ToString();
    }
    public string header_name(DataTable dt)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("[");
        string colStr = "";
        foreach (DataColumn dc in dt.Columns)
        {
            if (colStr.Length > 0) colStr += ",";
            colStr += "['" + dc.ColumnName.Replace("\r\n", "").Replace("'", "`") + "']";
        }
        sb.Append("" + colStr + "");
        sb.Append("]");
        dt.Dispose();
        return sb.ToString();
    }
    public string fill_handston(DataTable dt, string form_type)
    {
        string data = GetJson(dt);
        string header = header_name(dt);

        StringBuilder sb = new StringBuilder();
        sb.Append(@"<script type='text/javascript'>");
        sb.Append(@"$(document).ready(function () { ");
        sb.Append(@"var data = " + data.Trim() + ";");

        sb.Append(@"$('#datadiv').handsontable({");
        sb.Append(@"data: data,");
        sb.Append(@"columnSorting: true,");
        sb.Append(@"readOnly: true,");
        sb.Append(@"manualColumnResize: true,");
        sb.Append(@"manualRowResize: true,");
        sb.Append(@"colHeaders: " + header.Trim() + "");

        if (form_type == "SEEK")
        {
            //sb.Append(@",fixedColumnsLeft: 1");
            sb.Append(@",afterSelectionEnd: function (i) {");
            sb.Append(@"Instance = $('#datadiv').handsontable('getInstance');");
            sb.Append(@"data = Instance.getData();");
            sb.Append(@"selected = data[i];");
            sb.Append(@"value = selected[0] + '^' + selected[1] + '^' + selected[2];");
            sb.Append(@"$('#hdata').val(value);");
            sb.Append(@"$('#btnhide').click();");
            sb.Append(@"}");
        }
        sb.Append(@"});");
        sb.Append(@"});");

        sb.Append(@"</script>");
        dt.Dispose();
        return sb.ToString();
    }
    public string fill_handston(DataTable dt, string form_type, string divID)
    {
        string data = GetJson(dt);
        string header = header_name(dt);

        StringBuilder sb = new StringBuilder();
        sb.Append(@"<script type='text/javascript'>");
        sb.Append(@"$(document).ready(function () { ");
        sb.Append(@"var data = " + data.Trim() + ";");

        sb.Append(@"$('#" + divID + "').handsontable({");
        sb.Append(@"data: data,");
        sb.Append(@"columnSorting: true,");
        sb.Append(@"readOnly: true,");
        sb.Append(@"manualColumnResize: true,");
        sb.Append(@"manualRowResize: true,");
        sb.Append(@"colHeaders: " + header.Trim() + "");

        if (form_type == "SEEK")
        {
            //sb.Append(@",fixedColumnsLeft: 1");
            sb.Append(@",afterSelectionEnd: function (i) {");
            sb.Append(@"Instance = $('#datadiv').handsontable('getInstance');");
            sb.Append(@"data = Instance.getData();");
            sb.Append(@"selected = data[i];");
            sb.Append(@"value = selected[0] + '^' + selected[1] + '^' + selected[2];");
            sb.Append(@"$('#hdata').val(value);");
            sb.Append(@"$('#btnhide').click();");
            sb.Append(@"}");
        }
        sb.Append(@"});");
        sb.Append(@"});");

        sb.Append(@"</script>");
        dt.Dispose();
        return sb.ToString();
    }
    public void DisableForm(ControlCollection control)
    {
        System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
        foreach (System.Web.UI.Control c in control)
        {
            if (c is Button) ((Button)(c)).Enabled = true;
            if (c is DropDownList) ((DropDownList)(c)).Enabled = false;
            if (c is TextBox) ((TextBox)(c)).Enabled = false;
            if (c is RadioButton) ((RadioButton)(c)).Enabled = false;
            if (c is RadioButtonList) ((RadioButtonList)(c)).Enabled = false;
            if (c is Label) ((Label)(c)).Enabled = false;
            if (c is CheckBox) ((CheckBox)(c)).Enabled = false;
            if (c is HtmlSelect) ((HtmlSelect)(c)).Disabled = true;
            if (c is HtmlInputCheckBox)
            {
                ((HtmlInputCheckBox)c).Disabled = true;

            }
            if (c is HtmlInputRadioButton)
            {
                ((HtmlInputRadioButton)c).Disabled = true;

            }
            if (c.HasControls()) DisableForm(c.Controls);

        }
        ScriptManager.RegisterStartupScript(page, this.GetType(), "disables", "disableselect2();", true);

    }
    public void EnableForm(ControlCollection control)
    {
        System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
        foreach (System.Web.UI.Control c in control)
        {
            if (c is Button) ((Button)(c)).Enabled = true;
            if (c is DropDownList) ((DropDownList)(c)).Enabled = true;
            if (c is TextBox) ((TextBox)(c)).Enabled = true;
            if (c is RadioButton) ((RadioButton)(c)).Enabled = true;
            if (c is RadioButtonList) ((RadioButtonList)(c)).Enabled = true;
            if (c is Label) ((Label)(c)).Enabled = true;
            if (c is CheckBox) ((CheckBox)(c)).Enabled = true;
            if (c is HtmlSelect) ((HtmlSelect)(c)).Disabled = false;
            if (c is HtmlInputCheckBox)
            {
                ((HtmlInputCheckBox)c).Disabled = false;

            }
            if (c is HtmlInputRadioButton)
            {
                ((HtmlInputRadioButton)c).Disabled = false;

            }
            if (c.HasControls()) EnableForm(c.Controls);

        }
        //ScriptManager.RegisterStartupScript(page, this.GetType(), "enablese", "enableselect2();", true);
    }
    public void ResetForm(Page page)
    {
        EnableForm(page.Controls);
        fillblank(page);
    }

    ///by reeena on 26/05/2018
    public void open_report_xml(string usercode, string query, string rptname, string title)
    {

        DataTable dt = getdata(usercode, query);
        open_report_bydt_xml(usercode, dt, rptname, title);

    }
    public void open_report_bydt_xml(string usercode, DataTable dt, string rptname, string title)
    {

        HttpContext.Current.Session[MyGuid + "_DataDS"] = null;
        HttpContext.Current.Session[MyGuid + "_Data"] = dt;
        HttpContext.Current.Session[MyGuid + "_Report"] = rptname;
        HttpContext.Current.Session[MyGuid + "_title"] = title;

        ShowRpt_xml();

    }
    public void open_report_byDs_xml(string usercode, DataSet ds, string rptname, string title)
    {

        HttpContext.Current.Session[MyGuid + "_Data"] = null;
        HttpContext.Current.Session[MyGuid + "_DataDS"] = ds;
        HttpContext.Current.Session[MyGuid + "_Report"] = rptname;
        HttpContext.Current.Session[MyGuid + "_title"] = title;

        ShowRpt_xml();

    }
    public ReportDocument getRptDoc(string userCode, string clientid_mst, string unitid_mst)
    {

        #region regular
        ReportDocument rd = new ReportDocument();
        DataTable dt = new DataTable();
        DataTable dt1 = new DataTable();
        DataTable dt2 = new DataTable();
        DataTable dt3 = new DataTable();
        DataSet ds = new DataSet();
        if (GetSession(MyGuid, "DataDS") != null)
        {
            ds = (DataSet)GetSession(MyGuid, "DataDS");
            if (!ds.Tables[0].TableName.ToString().Trim().ToUpper().Equals("prepcur"))
            {
                ds.Tables[0].TableName = "prepcur";
            }
        }
        else if (GetSession(MyGuid, "Data") != null)
        {
            dt = (DataTable)GetSession(MyGuid, "Data");
            dt.TableName = "prepcur";
            try
            {
                ds.Tables.Add(dt.Copy());
            }
            catch (Exception ex) { }
        }

        if (ds.Tables["prepcur"] == null || ds.Tables["prepcur"].Rows.Count < 1)
        {
            return null;
        }

        if (ds.Tables.Count > 0)
        {
            if (!ds.Tables.Contains("Company_Detail"))
            {
                dt1 = GetCompDetail(userCode, clientid_mst);
                dt1.TableName = "Company_Detail";
                dt2 = GetBranchDetail(userCode, unitid_mst, clientid_mst);
                dt2.TableName = "Branch_Detail";
                ds.Tables.Add(dt1);
                ds.Tables.Add(dt2);
            }

            string Rpt = (string)GetSession(MyGuid, "Report");
            if (Rpt.Trim().ToLower().EndsWith(".rpt")) Rpt = Rpt.Substring(0, Rpt.Length - 4);
            string rptpath = System.Web.HttpContext.Current.Server.MapPath("~/") + "schoolReports_Rpts/" + Rpt + ".rpt";
            var fname = Path.GetFileName(rptpath);
            fname = fname.Substring(0, fname.Length - 4);
            rptpath = System.Web.HttpContext.Current.Server.MapPath("~/") + "schoolReports_Rpts/" + fname + ".rpt";
            //ReportDocument ReportDocument = new ReportDocument();
            string xmlpath = System.Web.HttpContext.Current.Server.MapPath("~/") + "xmls/" + fname + ".xml";

            ds.WriteXml(xmlpath, XmlWriteMode.WriteSchema);
            rd.Load(rptpath);
            rd.SetDataSource(ds);
            //if (!string.IsNullOrEmpty(strFromDate))
            //    rd.SetParameterValue("fromDate", strFromDate);
            //if (!string.IsNullOrEmpty(strToDate))
            //    rd.SetParameterValue("toDate", strFromDate);
            rd.Refresh();

            return rd;
        }
        #endregion

        return rd;
    }

    public void ShowRpt_xml()
    {
        try
        {

            System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
            if (page != null)
            {
                //string path = page.Server.MapPath(@"erp\\landing\\landing_page4.aspx");
                //page.ClientScript.RegisterStartupScript(this.GetType(), "UpdateTime", "showRpt();", true);
                Page p = (Page)HttpContext.Current.CurrentHandler;
                ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../schoolReports_Rpts/Filter_Report_xml.aspx?m_id=" + MyGuid + "','95%','900px','Reports');", true);
            }
        }
        catch (Exception ee)
        {

        }

    }

    ///by reeena on 26/05/2018
    public void open_report(string usercode, string query, string rptname, string title)
    {

        DataTable dt = getdata(usercode, query);

        open_report_bydt(usercode, dt, rptname, title);

    }
    public void open_report_bydt(string usercode, DataTable dt, string rptname, string title)
    {

        HttpContext.Current.Session[MyGuid + "_DataDS"] = null;
        HttpContext.Current.Session[MyGuid + "_Data"] = dt;
        HttpContext.Current.Session[MyGuid + "_Report"] = rptname;
        HttpContext.Current.Session[MyGuid + "_title"] = title;
        //  HttpContext.Current.Response.Redirect("../../schoolReports_Rpts/Report_Viewer.aspx");
        ShowRpt();

    }
    public DataTable GetCompDetail(string userCode, string clientid_mst)
    {
        DataTable dt = new DataTable();
        DataTable dtN = new DataTable();
        string cg_com_name = GetCookie(MyGuid, "cg_com_name").Replace(" ", "");
        string sessionname = "Compdtl_u_" + userCode + "_" + clientid_mst + "";
        if ((HttpContext.Current.Application[sessionname] == null))
        {
            dt = getdata(userCode, @"select Company_Name,REPLACE(Company_Address,'$','') as Company_Address,Company_Country,Company_State,Company_City, Company_Pincode, Company_Email_Id
                                    ,Company_Website,Company_Contact_No,Company_Alternate_Contact_No,nvl(Company_gstin_No,'-') as Company_gstin_No,nvl(com_pan_no,'-') as com_pan_no,nvl(Company_Cin_No,'-') as Company_Cin_No from company_profile where company_profile_id='" + clientid_mst + "'");


            try
            {
                string fpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/logo_" + userCode.ToLower() + ".jpg");
                if (dt.Rows.Count > 0)
                {
                    if (!dt.Columns.Contains("mLogo")) dt.Columns.Add("mLogo", typeof(System.Byte[]));
                }
                dtN = dt.Clone();
                foreach (DataRow dr in dt.Rows)
                {
                    dr["mLogo"] = File.ReadAllBytes(fpath);
                }
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    dtN.ImportRow(dt.Rows[i]);
                }
                dtN.TableName = dt.TableName.ToString();
            }
            catch (Exception ex)
            {
                FILL_ERR("Logo File not found in fin_Erp folder " + @"C:\fin_erp\logo\mlogo_" + userCode.ToLower() + ".jpg");
            }
            HttpContext.Current.Application[sessionname] = dtN;
        }
        else
        {
            dt = ((DataTable)HttpContext.Current.Application[sessionname]);
            if (dt == null || dt.Rows.Count == 0)
            {
                dt = getdata(userCode, @"select Company_Name,REPLACE(Company_Address,'$','') as Company_Address,Company_Country,Company_State,Company_City, Company_Pincode, Company_Email_Id
                                    ,Company_Website,Company_Contact_No,Company_Alternate_Contact_No,nvl(Company_gstin_No,'-') as Company_gstin_No,nvl(com_pan_no,'-') as com_pan_no,nvl(Company_Cin_No,'-') as Company_Cin_No from company_profile where company_profile_id='" + clientid_mst + "'");

                try
                {
                    string fpath = HttpContext.Current.Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/logo_" + userCode.ToLower() + ".jpg");
                    if (dt.Rows.Count > 0)
                    {
                        if (!dt.Columns.Contains("mLogo")) dt.Columns.Add("mLogo", typeof(System.Byte[]));
                    }
                    dtN = dt.Clone();
                    foreach (DataRow dr in dt.Rows)
                    {
                        dr["mLogo"] = File.ReadAllBytes(fpath);
                    }
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dtN.ImportRow(dt.Rows[i]);
                    }
                    dtN.TableName = dt.TableName.ToString();
                }
                catch (Exception ex)
                {
                    FILL_ERR("Logo File not found in  " + HttpContext.Current.Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/logo_" + userCode + ".jpg"));
                }
                HttpContext.Current.Application[sessionname] = dtN;
            }
        }

        if (dtN.Rows.Count > 0) return dtN.Copy();
        else return dt.Copy();
    }

    public DataTable GetBranchDetail(string userCode, string unitid_mst, string clientid_mst)
    {

        DataTable dt = new DataTable();
        string sessionname = "branchdtl_u_" + userCode + "_" + unitid_mst + "";
        if ((HttpContext.Current.Application[sessionname] == null))
        {
            dt = getdata(userCode, "select distinct a.Unit_Name,REPLACE(a.Unit_Address,'$','') as Unit_Address,a.Unit_Country," +
                "cs.country_name,cs.state_name,a.Unit_State,a.Unit_City,(case when a.Unit_Pincode='000000' then '' else a.Unit_Pincode end) Unit_Pincode, a.Unit_Email,a.Unit_website, a.Unit_Contact_No," +
                "a.Unit_Alternate_Contact_No, nvl(a.septr, '-') as septr,nvl(a.Unit_GSTIN_No,'-') as Unit_GSTIN_No,nvl(a.bank,'-') as bank_name" +
                ",nvl(a.branch,'-') as bank_branch,nvl(a.acctno,'-') as bank_acc,nvl(a.ifsc,'-') as bank_ifsc,cr.master_name as unit_currency from company_unit_profile a " +
                "left join master_setting cr on cr.master_id= a.ll_act and cr.type='CTM' and find_in_set(cr.client_unit_id,'" + unitid_mst + "')= 1 LEFT JOIN country_state cs on a.unit_city = cs.city_name " +
                "and a.unit_state = cs.state_gst_code and a.unit_country = cs.alpha_2 where cup_id = '" + unitid_mst + "' and company_profile_id = " +
                "'" + clientid_mst + "'");
            HttpContext.Current.Application[sessionname] = dt;
        }
        else
        {
            dt = ((DataTable)HttpContext.Current.Application[sessionname]);
            if (dt == null || dt.Rows.Count == 0)
            {
                dt = getdata(userCode, "select distinct a.Unit_Name,REPLACE(a.Unit_Address,'$','') as Unit_Address,a.Unit_Country," +
                "cs.country_name,cs.state_name,a.Unit_State,a.Unit_City,(case when a.Unit_Pincode='000000' then '' else a.Unit_Pincode end) Unit_Pincode, a.Unit_Email,a.Unit_website, a.Unit_Contact_No," +
                "a.Unit_Alternate_Contact_No, nvl(a.septr, '-') as septr,nvl(a.Unit_GSTIN_No,'-') as Unit_GSTIN_No,nvl(a.bank,'-') as bank_name" +
                ",nvl(a.branch,'-') as bank_branch,nvl(a.acctno,'-') as bank_acc,nvl(a.ifsc,'-') as bank_ifsc,cr.master_name as unit_currency from company_unit_profile a left join master_setting cr on cr.master_id= a.ll_act and cr.type='CTM' and find_in_set(cr.client_unit_id,'" + unitid_mst + "')= 1 LEFT JOIN country_state cs on a.unit_city = cs.city_name " +
                "and a.unit_state = cs.state_gst_code and a.unit_country = cs.alpha_2 where cup_id = '" + unitid_mst + "' and company_profile_id = " +
                "'" + clientid_mst + "'");
                HttpContext.Current.Application[sessionname] = dt;
            }
        }
        return dt.Copy();

    }
    //22 may
    public DataTable BindAcademicYear(String usercode, string unitid_mst, string clientid_mst, System.Web.UI.HtmlControls.HtmlSelect Ddl)
    {

        DataTable dt = new DataTable();
        //DateTime Dtrec = server_datetime_dt(usercode);
        //String Dtcur = Dtrec.ToString("yyyy-MM-dd");
        String Dtcur = server_datetime_local(usercode);

        try
        {
            dt = getdata(usercode, "select 0 as academic_year_id,'--Select--' as academic_year union ALL select academic_year_id,academic_year from add_academic_year where  client_id='" + clientid_mst + "'");
            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "academic_year_id"; // to get value
                Ddl.DataTextField = "academic_year"; // to show value
                Ddl.DataBind();

            }


        }
        catch (Exception ex)
        {

        }

        return dt;

    }

    public DataTable BindAcademicYearddl(String usercode, string unitid_mst, string clientid_mst, DropDownList Ddl)
    {

        DataTable dt = new DataTable();
        //DateTime Dtrec = server_datetime_dt(usercode);
        //String Dtcur = Dtrec.ToString("yyyy-MM-dd");
        String Dtcur = server_datetime_local(usercode);

        try
        {
            dt = getdata(usercode, "select '0' as academic_year_id,'--Select--' as academic_year from dual union ALL select academic_year_id,academic_year from add_academic_year where  client_id='" + clientid_mst + "' and type='ACY'");
            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "academic_year_id"; // to get value
                Ddl.DataTextField = "academic_year"; // to show value
                Ddl.DataBind();
            }

        }
        catch (Exception ex)
        {

        }

        return dt;

    }
    public DataTable FindCurrentACYear(String usercode, string unitid_mst, string clientid_mst)
    {


        DataTable dt = new DataTable();
        String Dtcur = server_datetime_local(usercode);
        try
        {
            dt = getdata(usercode, "SELECT academic_year_id,academic_year, TO_CHAR(to_date( to_char(from_date,'" + Getsqldateformat() + "'),'" + Getsqldateformat() + "'),'" + Getsqldatetimeformat() + "') from_date ," +
                            "TO_CHAR(to_date( to_char(to_date,'" + Getsqldateformat() + "'),'" + Getsqldateformat() + "'),'" + Getsqldatetimeformat() + "') to_date FROM add_academic_year  " +
                "WHERE From_Date<=to_date('" + Dtcur + "','" + Getsqldatetimeformat() + "') and To_Date>=to_date('" + Dtcur + "','" + Getsqldatetimeformat() + "')" +
                " and client_id='" + clientid_mst + "' and type='ACY' and rownum=1");


        }
        catch (Exception ex)
        {

        }

        return dt;

    }
    public DataTable FindAcademicYear(String usercode, string unitid_mst, string clientid_mst, DropDownList Ddl)
    {

        DataTable dt = new DataTable();
        DateTime Dtrec = server_datetime_dt(usercode);
        String Dtcur = Dtrec.ToString("yyyy-MM-dd");

        try
        {
            dt = getdata(usercode, "SELECT academic_year_id FROM `add_academic_year`  WHERE From_Date<='" + Dtcur + "' and To_Date>='" + Dtcur + "'");
            if (dt.Rows.Count > 0)
            {

                Ddl.SelectedValue = dt.Rows[0][0].ToString(); // to get value



            }

        }
        catch (Exception ex)
        {

        }

        return dt;

    }


    public string GetAllSelect(System.Web.UI.HtmlControls.HtmlSelect Ddl)
    {
        string Selectedid = "";
        try
        {

            foreach (ListItem item in Ddl.Items) if (item.Selected == true) Selectedid = Selectedid + "'" + item.Value + "'" + ",";
            Selectedid = Selectedid.TrimEnd(',');

        }
        catch (Exception ex)
        { }
        return Selectedid;

    }
    //public DataTable BindSection(String usercode,  string clientid_mst ,string unitid_mst)
    //{

    //    DataTable dt = new DataTable();

    //    try
    //    {
    //        dt = getdata(usercode, "select '0' as master_id,'--select--' as master_name from dual union ALL SELECT  master_id,master_name FROM master_setting " +
    //                                       "where type='ECS'  and client_id	='" + clientid_mst + "' and  " +
    //                                       "client_unit_id='" + unitid_mst + "' and (status='Y' or status='') order by master_id");



    //    }
    //    catch (Exception ex)
    //    {

    //    }

    //    return dt;

    //}
    public DataTable BindSection(String usercode, string unitid_mst, string clientid_mst, HtmlSelect Ddl)
    {

        DataTable dt = new DataTable();

        try
        {
            dt = getdata(usercode, "SELECT  master_id,master_name FROM master_setting where type='ECS'  and" +
                "  find_in_set( client_unit_id,'" + unitid_mst + "')=1 and (status='Y' or status='') order by cast(master_id as int)");

            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "master_id"; // to get value
                Ddl.DataTextField = "master_name"; // to show value
                Ddl.DataBind();

            }

        }
        catch (Exception ex)
        {

        }

        return dt;

    }
    public DataTable BindSection(String usercode, string unitid_mst, DropDownList Ddl)
    {

        DataTable dt = new DataTable();

        try
        {
            dt = getdata(usercode, "select '0' as master_id,'--select--' as master_name from dual union ALL SELECT  master_id,master_name FROM master_setting " +
                                           "where type='ECS'  and  " +
                                           "find_in_set( client_unit_id,'" + unitid_mst + "')=1 and (status='Y' or status='') order by master_id");

            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "master_id"; // to get value
                Ddl.DataTextField = "master_name"; // to show value
                Ddl.DataBind();

            }

        }
        catch (Exception ex)
        {

        }

        return dt;

    }
    public DataTable BindClass(String usercode, string unitid_mst, DropDownList Ddl)
    {

        DataTable dt = new DataTable();

        try
        {
            dt = getdata(usercode, "select '0' as class_id,'Select' as class, 0 as seq from dual union ALL select add_class_id as Class_id,class,cast(sequence as int) as seq " +
                "from add_class where client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='') order by 3");


        }
        catch (Exception ex)
        {

        }
        if (dt.Rows.Count > 0)
        {
            Ddl.DataSource = dt;
            Ddl.DataValueField = "class_id"; // to get value
            Ddl.DataTextField = "class"; // to show value
            Ddl.DataBind();

        }
        return dt;

    }
    public DataTable BindClass(String usercode, string unitid_mst, HtmlSelect Ddl)
    {
        DataTable dt = new DataTable();
        string sessionname = "BindClass_u_" + usercode + "_" + unitid_mst + "";
        if (HttpContext.Current.Application[sessionname] == null)
        {
            dt = getdata(usercode, "select add_class_id as Class_id,class,cast(sequence as int) from add_class where client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='')  order by 3");
            HttpContext.Current.Application[sessionname] = dt;
        }
        else
        {
            dt = ((DataTable)HttpContext.Current.Application[sessionname]);
            if (dt.Rows.Count == 0)
            {
                dt = getdata(usercode, "select add_class_id as Class_id,class,cast(sequence as int) from add_class where client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='')  order by 3");
                HttpContext.Current.Application[sessionname] = dt;
            }
        }

        if (dt.Rows.Count > 0)
        {
            Ddl.DataSource = dt;
            Ddl.DataValueField = "class_id"; // to get value
            Ddl.DataTextField = "class"; // to show value
            Ddl.DataBind();

        }
        return dt;
    }

    public List<SelectListItem> BindClass(String usercode, string unitid_mst)
    {
        List<SelectListItem> tempclass = new List<SelectListItem>();
        DataTable dt = new DataTable();
        string sessionname = "BindClass_u_" + usercode + "_" + unitid_mst + "";
        if (HttpContext.Current.Application[sessionname] == null)
        {
            dt = getdata(usercode, "select add_class_id as Class_id,class,cast(sequence as int) from add_class where client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='')  order by 3");
            HttpContext.Current.Application[sessionname] = dt;
        }
        else
        {
            dt = ((DataTable)HttpContext.Current.Application[sessionname]);
            if (dt.Rows.Count == 0)
            {
                dt = getdata(usercode, "select add_class_id as Class_id,class,cast(sequence as int) from add_class where client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='')  order by 3");
                HttpContext.Current.Application[sessionname] = dt;
            }
        }
        tempclass = dt_to_selectlist(dt);
        return tempclass;

    }
    public List<SelectListItem> BindClass_Actual(String usercode, string unitid_mst)
    {
        List<SelectListItem> temp1 = new List<SelectListItem>();
        DataTable dt = new DataTable();
        string sessionname = "BindClass_Actual_u_" + usercode + "_" + unitid_mst + "";
        if (HttpContext.Current.Application[sessionname] == null)
        {
            try
            {
                dt = getdata(usercode, "select add_class_id,class,cast(sequence as int) from add_class where " +
          " client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='') and add_class_id in" +
          " (select DISTINCT class_applied from student_detail  WHERE type='STD' " +
          " and client_unit_id='" + unitid_mst + "') and add_class_id in (select distinct classid from  master_setting a" +
          " where type='ESS' and client_unit_id ='" + unitid_mst + "')  order by 3");
            }
            catch (Exception ex) { }

            temp1 = dt_to_selectlist(dt);
            HttpContext.Current.Application[sessionname] = temp1;
        }
        else
        {
            temp1 = ((List<SelectListItem>)HttpContext.Current.Application[sessionname]);
            if (temp1.Count == 0)
            {
                try
                {
                    dt = getdata(usercode, "select add_class_id,class,cast(sequence as int) from add_class where " +
              " client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='') and add_class_id in" +
              " (select DISTINCT class_applied from student_detail  WHERE type='STD' " +
              " and client_unit_id='" + unitid_mst + "') and add_class_id in (select distinct classid from  master_setting a" +
              " where type='ESS' and client_unit_id ='" + unitid_mst + "')  order by 3");
                }
                catch (Exception ex) { }

                temp1 = dt_to_selectlist(dt);
                HttpContext.Current.Application[sessionname] = temp1;
            }
        }
        return temp1;

    }

    public List<SelectListItem> BindClass_Str(String usercode, string unitid_mst)
    {
        List<SelectListItem> temp1 = new List<SelectListItem>();
        DataTable dt = new DataTable();
        string sessionname = "BindClass_Str_u_" + usercode + "_" + unitid_mst + "";
        if (HttpContext.Current.Application[sessionname] == null)
        {
            try
            {
                dt = getdata(usercode, "select add_class_id,class,cast(sequence as int) from add_class where " +
          " client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='')  and add_class_id in (select distinct classid from  master_setting a" +
          " where type='ESS' and client_unit_id ='" + unitid_mst + "')  order by 3");
            }
            catch (Exception ex) { }

            temp1 = dt_to_selectlist(dt);
            HttpContext.Current.Application[sessionname] = temp1;
        }
        else
        {
            temp1 = ((List<SelectListItem>)HttpContext.Current.Application[sessionname]);
            if (temp1.Count == 0)
            {
                try
                {
                    dt = getdata(usercode, "select add_class_id,class,cast(sequence as int) from add_class where " +
              " client_unit_id='" + unitid_mst + "' and type='EAC' and (status='Y' or status='')  and add_class_id in (select distinct classid from  master_setting a" +
              " where type='ESS' and client_unit_id ='" + unitid_mst + "')  order by 3");
                }
                catch (Exception ex) { }

                temp1 = dt_to_selectlist(dt);
                HttpContext.Current.Application[sessionname] = temp1;
            }
        }
        return temp1;

    }

    public List<SelectListItem> BindSection(String usercode, string unitid_mst)
    {
        DataTable dt = new DataTable();
        List<SelectListItem> temp1 = new List<SelectListItem>();
        string sessionname = "BindSection_u_" + usercode + "_" + unitid_mst + "";
        if (HttpContext.Current.Application[sessionname] == null)
        {
            try
            {
                dt = getdata(usercode, "SELECT  master_id,master_name FROM master_setting where type='ECS' and" +
                    " find_in_set( client_unit_id,'" + unitid_mst + "')=1 and (status='Y' or status='') order by cast(master_id as int)");
            }
            catch (Exception ex) { }
            temp1 = dt_to_selectlist(dt);
            HttpContext.Current.Application[sessionname] = temp1;
        }
        else
        {
            temp1 = ((List<SelectListItem>)HttpContext.Current.Application[sessionname]);
            if (temp1.Count == 0)
            {
                try
                {
                    dt = getdata(usercode, "SELECT  master_id,master_name FROM master_setting where type='ECS' and" +
                        " find_in_set( client_unit_id,'" + unitid_mst + "')=1 and (status='Y' or status='') order by cast(master_id as int)");
                }
                catch (Exception ex) { }
                temp1 = dt_to_selectlist(dt);
                HttpContext.Current.Application[sessionname] = temp1;
            }
        }
        return temp1;

    }

    public DataTable BindStudent(string ac_yr, string category_id, String classid, string section, String usercode, string unitid_mst, string clientid_mst, System.Web.UI.HtmlControls.HtmlSelect Ddl, Boolean student_type)
    {

        DataTable dt = new DataTable();

        string column = "";
        try
        {
            mq = "select sa_id as vch_num,(replace(first_name, '0', '')|| ' '|| replace(middle_name, '0', '')|| ' '||replace(last_name, '0', '')) AS name from student_applicant_details" +
                "                     where usession='" + ac_yr + "' and class_applied in (" + classid + ") and    client_unit_id='" + unitid_mst + "' and  student_status = 'permanent'";
            dt = getdata(usercode, mq);

            if (student_type == true)
            {
                if (category_id != "" && classid == "" && section == "")
                {
                    column = "and  b.class_applied in (select add_class_id from add_class where categoryType in (" + category_id + ")) ";


                }

                else if (category_id != "" && classid == "" && section != "")
                {
                    column = "and  b.class_applied in (select add_class_id from add_class where categoryType in (" + category_id + ") and b.section in (" + section + ") ) ";


                }

                else if (category_id == "" && classid != "" && section == "")
                {
                    column = "and  b.class_applied in (" + classid + ") ";


                }

                else if (category_id == "" && classid != "" && section != "")
                {
                    column = "and  b.class_applied in (" + classid + ") and b.section in (" + section + ")";


                }
                #region
                else if (category_id != "" && classid != "" && section == "")
                {
                    column = "and  b.class_applied in (" + classid + ")";


                }
                else if (category_id == "" && classid != "" && section == "")
                {
                    column = "and  b.class_applied in (" + classid + ")";

                }
                #endregion
                else if (category_id != "" && classid != "" && section != "")
                {
                    column = "and  b.class_applied in (" + classid + ") and b.section in (" + section + ")  ";


                }

                //dt = getdata(usercode, "select 0 as vch_num,'--select--' as first_name union all select b.vch_num,CONCAT(COALESCE(a.first_name,''),' ',COALESCE(a.middle_name,''),' ',COALESCE(a.last_name,'')) as first_name from user_details a," +
                //               "student_detail b where b.Academic_year_Id='" + ac_yr + "' and b.class_applied='" + classid + "'and  b.section='" + section + "' and a.rec_id=b.vch_num ");

                mq = @"select a.regnumber as vch_num," +
                    "(replace(a.first_name,'0','')||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0','')) AS name from user_details a," +
                                  "student_detail b where b.Academic_year_Id='" + ac_yr + "' " + column + " and  a.vch_num=b.vch_num and a.status='active'   a.client_unit_id='" + unitid_mst + "' and a.type='STD'";


            }

            dt = getdata(usercode, mq);
            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "vch_num"; // to get value
                Ddl.DataTextField = "name"; // to show value
                Ddl.DataBind();

            }



        }
        catch (Exception ex)
        {

        }

        return dt;

    }

    // bind month


    public void BindMonth(string usercode, string unitid_mst, string clientid_mst, System.Web.UI.HtmlControls.HtmlSelect Ddl)
    {

        DataTable dt = new DataTable();

        try
        {

            dt = getdata(usercode, " SELECT '1' as month_id,'January' as month_name from dual UNION ALL" +
                " SELECT '2' AS month_id,'February' as month_name from dual UNION ALL" +
                " SELECT '3' AS month_id,'March' as month_name  from dual UNION ALL " +
                " SELECT '4' AS month_id,'April' as month_name from dual UNION ALL" +
                " SELECT '5' AS month_id,'May' as month_name  from dual UNION ALL " +
                " SELECT '6' AS month_id,'June' as month_name from dual UNION ALL" +
                " SELECT '7' AS month_id,'July' as month_name from dual  UNION ALL" +
                " SELECT '8' AS month_id,'August' as month_name from dual  UNION ALL" +
                " SELECT '9' AS month_id,'September' as month_name from dual UNION ALL " +
                "SELECT '10' AS month_id,'October' as month_name from dual UNION ALL" +
                " SELECT '11' AS month_id,'November' as month_name from dual UNION ALL " +
                "SELECT '12' AS month_id,'December' as month_name from dual");

            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "month_id"; // to get value
                Ddl.DataTextField = "month_name"; // to show value
                Ddl.DataBind();
                //  Ddl.SelectedIndex = 0;

            }

        }
        catch (Exception ex)
        {

        }



    }

    public List<SelectListItem> BindMonth(String usercode)
    {

        DataTable dt = new DataTable();
        string sessionname = "BindMonth_u_" + usercode + "";
        try
        {
            if (HttpContext.Current.Application[sessionname] == null)
            {
                dt = getdata(usercode, " SELECT '1' as month_id,'January' as month_name from dual UNION ALL" +
                 " SELECT '2' AS month_id,'February' as month_name from dual UNION ALL" +
                 " SELECT '3' AS month_id,'March' as month_name  from dual UNION ALL " +
                 " SELECT '4' AS month_id,'April' as month_name from dual UNION ALL" +
                 " SELECT '5' AS month_id,'May' as month_name  from dual UNION ALL " +
                 " SELECT '6' AS month_id,'June' as month_name from dual UNION ALL" +
                 " SELECT '7' AS month_id,'July' as month_name from dual  UNION ALL" +
                 " SELECT '8' AS month_id,'August' as month_name from dual  UNION ALL" +
                 " SELECT '9' AS month_id,'September' as month_name from dual UNION ALL " +
                 "SELECT '10' AS month_id,'October' as month_name from dual UNION ALL" +
                 " SELECT '11' AS month_id,'November' as month_name from dual UNION ALL " +
                 "SELECT '12' AS month_id,'December' as month_name from dual");
                HttpContext.Current.Application[sessionname] = dt;
            }
            else
            {
                dt = ((DataTable)HttpContext.Current.Application[sessionname]);
                if (dt.Rows.Count == 0)
                {
                    dt = getdata(usercode, " SELECT '1' as month_id,'January' as month_name from dual UNION ALL" +
                     " SELECT '2' AS month_id,'February' as month_name from dual UNION ALL" +
                     " SELECT '3' AS month_id,'March' as month_name  from dual UNION ALL " +
                     " SELECT '4' AS month_id,'April' as month_name from dual UNION ALL" +
                     " SELECT '5' AS month_id,'May' as month_name  from dual UNION ALL " +
                     " SELECT '6' AS month_id,'June' as month_name from dual UNION ALL" +
                     " SELECT '7' AS month_id,'July' as month_name from dual  UNION ALL" +
                     " SELECT '8' AS month_id,'August' as month_name from dual  UNION ALL" +
                     " SELECT '9' AS month_id,'September' as month_name from dual UNION ALL " +
                     "SELECT '10' AS month_id,'October' as month_name from dual UNION ALL" +
                     " SELECT '11' AS month_id,'November' as month_name from dual UNION ALL " +
                     "SELECT '12' AS month_id,'December' as month_name from dual");
                    HttpContext.Current.Application[sessionname] = dt;
                }
            }
        }
        catch (Exception ex) { }
        return dt_to_selectlist(dt);
    }
    public void Showfilter(string title)
    {
        try
        {
            HttpContext.Current.Session[MyGuid + "_filename"] = title;
            System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
            if (page != null)
            {
                //string path = page.Server.MapPath(@"erp\\landing\\landing_page4.aspx");


                Page p = (Page)HttpContext.Current.CurrentHandler;
                ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/common/Frm_Filter2.aspx?m_id=" + MyGuid + "','65%','650px','" + title + "');", true);
            }
        }
        catch (Exception ee)
        {

        }

    }
    public void Showfilter_Att(string title)
    {
        try
        {
            HttpContext.Current.Session[MyGuid + "_filename"] = title;
            System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
            if (page != null)
            {
                //string path = page.Server.MapPath(@"erp\\landing\\landing_page4.aspx");


                Page p = (Page)HttpContext.Current.CurrentHandler;
                ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/common/Frm_Filter3.aspx?m_id=" + MyGuid + "','65%','650px','" + title + "');", true);
            }
        }
        catch (Exception ee)
        {

        }

    }
    public void ShowRpt()
    {
        try
        {
            System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
            if (page != null)
            {
                //string path = page.Server.MapPath(@"erp\\landing\\landing_page4.aspx");
                //page.ClientScript.RegisterStartupScript(this.GetType(), "UpdateTime", "showRpt();", true);
                Page p = (Page)HttpContext.Current.CurrentHandler;
                ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../schoolReports_Rpts/Filter_Report_Viewer.aspx?m_id=" + MyGuid + "','95%','900px','Reports');", true);
            }
        }
        catch (Exception ee)
        {

        }

    }

    public MemoryStream exp_to_pdf(DataTable dt, string file_name)
    {
        //Random rnd = new Random();
        //int r = rnd.Next(0, 100000);
        //string ff = HttpContext.Current.Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/" +
        //    file_name + DateTime.Now.ToString("yyyyMMddHmmss") + r);
        //iTextSharp.text.Document pdfDoc;

        iTextSharp.text.Document pdfDoc;
        MemoryStream stream = new System.IO.MemoryStream();
        GridView GridView2 = new GridView();
        GridView2.AllowPaging = false;
        GridView2.HeaderStyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#1797c0");
        GridView2.DataSource = dt;
        GridView2.DataBind();
        GridView2.HeaderRow.Style.Add("width", "10%");
        GridView2.HeaderRow.Style.Add("font-size", "9px");
        GridView2.Style.Add("text-decoration", "none");
        GridView2.Style.Add("font-family", "Arial, Helvetica, sans-serif;");
        GridView2.Style.Add("font-size", "8px");

        StringWriter sw = new StringWriter();
        HtmlTextWriter hw = new HtmlTextWriter(sw);
        GridView2.RenderControl(hw);
        StringReader sr = new StringReader(sw.ToString());
        HttpContext.Current.Response.ContentType = "application/pdf";
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + file_name + ".pdf");
        HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);
        if (dt.Columns.Count > 8) pdfDoc = new iTextSharp.text.Document(iTextSharp.text.PageSize.A4.Rotate(), 10f, 10f, 10f, 10f);
        else pdfDoc = new iTextSharp.text.Document(iTextSharp.text.PageSize.A4, 10f, 10f, 10f, 10f);
        iTextSharp.text.html.simpleparser.HTMLWorker htmlparser = new iTextSharp.text.html.simpleparser.HTMLWorker(pdfDoc);
        iTextSharp.text.pdf.PdfWriter.GetInstance(pdfDoc, HttpContext.Current.Response.OutputStream);
        iTextSharp.text.pdf.PdfWriter.GetInstance(pdfDoc, stream);
        pdfDoc.Open();
        htmlparser.Parse(sr);
        pdfDoc.Close();
        HttpContext.Current.Response.Write(pdfDoc);
        HttpContext.Current.Response.End();


        return stream;


    }
    public string exp_to_word(DataTable dt, string file_name)
    {
        GridView GridView2 = new GridView();
        GridView2.DataSource = dt;
        GridView2.DataBind();
        GridView2.HeaderRow.Style.Add("width", "10%");
        GridView2.HeaderRow.Style.Add("font-size", "11px");
        GridView2.Style.Add("text-decoration", "none");
        GridView2.Style.Add("font-family", "Arial, Helvetica, sans-serif;");
        GridView2.Style.Add("font-size", "10px");
        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + file_name + ".doc");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/vnd.ms-word ";
        StringWriter sw = new StringWriter();
        HtmlTextWriter hw = new HtmlTextWriter(sw);
        GridView2.AllowPaging = false;
        GridView2.RenderControl(hw);
        HttpContext.Current.Response.Output.Write(sw.ToString());
        HttpContext.Current.Response.Flush();
        HttpContext.Current.Response.End();
        dt.Dispose();
        return sw.ToString();
    }
    public void exp_to_word(GridView grid, string file_name)
    {

        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + file_name + ".doc");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/vnd.ms-word ";
        StringWriter sw = new StringWriter();
        HtmlTextWriter hw = new HtmlTextWriter(sw);
        grid.AllowPaging = false;
        grid.RenderControl(hw);
        HttpContext.Current.Response.Output.Write(sw.ToString());
        HttpContext.Current.Response.Flush();
        HttpContext.Current.Response.End();

    }
    public void exp_to_pdf(GridView grid, string file_name, string cg_com_name)
    {
        iTextSharp.text.Document pdfDoc;
        StringWriter sw = new StringWriter();
        HtmlTextWriter hw = new HtmlTextWriter(sw);
        grid.RenderControl(hw);
        StringReader sr = new StringReader(sw.ToString());
        HttpContext.Current.Response.ContentType = "application/pdf";
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + file_name + ".pdf");
        HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);
        if (grid.HeaderRow.Cells.Count > 8) pdfDoc = new iTextSharp.text.Document(iTextSharp.text.PageSize.A4.Rotate(), 10f, 10f, 10f, 10f);
        else pdfDoc = new iTextSharp.text.Document(iTextSharp.text.PageSize.A4, 10f, 10f, 10f, 10f);
        iTextSharp.text.html.simpleparser.HTMLWorker htmlparser = new iTextSharp.text.html.simpleparser.HTMLWorker(pdfDoc);
        iTextSharp.text.pdf.PdfWriter.GetInstance(pdfDoc, HttpContext.Current.Response.OutputStream);
        try
        {
            pdfDoc.Open();
            htmlparser.Parse(sr);
            pdfDoc.Close();
        }
        catch (Exception)
        {

        }
        HttpContext.Current.Response.Write(pdfDoc);
        HttpContext.Current.Response.End();
    }
    public string exp_to_xls(DataTable dt, string file_name, string withcolor)
    {
        //for (int i = 0; i < dt.Columns.Count; i++)
        //{
        //    if (dt.Columns[i].ColumnName.Contains("#"))
        //    {

        //    }
        //}
        GridView GridView2 = new GridView();
        GridView2.DataSource = dt;
        GridView2.DataBind();


        for (int i = 0; i < GridView2.HeaderRow.Cells.Count; i++)
        {
            if (GridView2.HeaderRow.Cells[i].Text.Contains("#"))
            {
                GridView2.HeaderRow.Cells[i].Text.Replace("#", "").Trim();
                GridView2.HeaderRow.Cells[i].Style.Add("color", withcolor);
            }
        }



        //GridView2.DataSource = GridView2.DataSource;
        //GridView2.RowDataBound();
        //GridView2.HeaderRow.Style.Add("color", withcolor);
        GridView2.HeaderRow.Style.Add("width", "10%");
        GridView2.HeaderRow.Style.Add("font-size", "11px");
        GridView2.HeaderRow.Style.Add("font-weight", "800");
        GridView2.Style.Add("text-decoration", "none");
        GridView2.Style.Add("font-family", "Arial, Helvetica, sans-serif;");
        GridView2.Style.Add("font-size", "10px");
        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + file_name + ".xls");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/vnd.ms-excel";
        StringWriter sw = new StringWriter();
        HtmlTextWriter hw = new HtmlTextWriter(sw);
        GridView2.AllowPaging = false;
        GridView2.RenderControl(hw);
        HttpContext.Current.Response.Output.Write(sw.ToString());
        HttpContext.Current.Response.Flush();
        HttpContext.Current.Response.End();
        dt.Dispose();
        return sw.ToString();
    }



    public string exp_to_xls(DataTable dt, string file_name)
    {

        GridView GridView2 = new GridView();
        GridView2.DataSource = dt;
        GridView2.DataBind();
        //GridView2.HeaderRow.Style.Add("color", "Red");
        GridView2.HeaderRow.Style.Add("width", "10%");
        GridView2.HeaderRow.Style.Add("font-size", "11px");
        GridView2.HeaderRow.Style.Add("font-weight", "800");
        GridView2.Style.Add("text-decoration", "none");
        GridView2.Style.Add("font-family", "Arial, Helvetica, sans-serif;");
        GridView2.Style.Add("font-size", "10px");
        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + file_name + ".xls");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/vnd.ms-excel";
        string style = @"<style> .textmode { } </style>";
        HttpContext.Current.Response.Write(style);
        StringWriter sw = new StringWriter();
        HtmlTextWriter hw = new HtmlTextWriter(sw);
        GridView2.AllowPaging = false;
        GridView2.RenderControl(hw);
        HttpContext.Current.Response.Output.Write(sw.ToString());
        HttpContext.Current.Response.Flush();
        HttpContext.Current.Response.End();
        dt.Dispose();
        return sw.ToString();
    }
    public void exp_to_xls(GridView GridView1, string filename)
    {
        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xls");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/vnd.ms-excel";
        using (StringWriter sw = new StringWriter())
        {
            HtmlTextWriter hw = new HtmlTextWriter(sw);

            //To Export all pages
            GridView1.AllowPaging = false;

            GridView1.HeaderRow.BackColor = Color.White;
            foreach (TableCell cell in GridView1.HeaderRow.Cells)
            {
                cell.BackColor = GridView1.HeaderStyle.BackColor;
            }
            foreach (GridViewRow row in GridView1.Rows)
            {
                row.BackColor = Color.White;
                foreach (TableCell cell in row.Cells)
                {
                    if (row.RowIndex % 2 == 0)
                    {
                        cell.BackColor = GridView1.AlternatingRowStyle.BackColor;
                    }
                    else
                    {
                        cell.BackColor = GridView1.RowStyle.BackColor;
                    }
                    cell.CssClass = "textmode";
                }
            }

            GridView1.RenderControl(hw);

            //style to format numbers to string
            string style = @"<style> .textmode { } </style>";
            HttpContext.Current.Response.Write(style);
            HttpContext.Current.Response.Output.Write(sw.ToString());
            HttpContext.Current.Response.Flush();
            HttpContext.Current.Response.End();
        }
    }
    public void Exp_to_csv(GridView GridView1, string filename)
    {
        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".csv");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/text";
        GridView1.AllowPaging = false;

        StringBuilder columnbind = new StringBuilder();
        for (int k = 0; k < GridView1.HeaderRow.Cells.Count; k++)
        {

            columnbind.Append(GridView1.HeaderRow.Cells[k].Text.Trim() + ',');
        }

        columnbind.Append("\r\n");

        for (int i = 0; i < GridView1.Rows.Count; i++)
        {
            for (int k = 0; k < GridView1.HeaderRow.Cells.Count; k++)
            {

                columnbind.Append(GridView1.Rows[i].Cells[k].Text + ',');
            }

            columnbind.Append("\r\n");
        }
        HttpContext.Current.Response.Output.Write(columnbind.ToString());
        HttpContext.Current.Response.Flush();
        HttpContext.Current.Response.End();
    }
    public void Exp_to_csv2(GridView GridView1, string filename)
    {
        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".csv");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/text";
        GridView1.AllowPaging = false;

        StringBuilder columnbind = new StringBuilder();
        for (int k = 0; k < GridView1.HeaderRow.Cells.Count; k++)
        {

            columnbind.Append(GridView1.HeaderRow.Cells[k].Text.Trim() + ',');
        }

        columnbind.Append("\r\n");

        for (int i = 0; i < GridView1.Rows.Count; i++)
        {
            for (int k = 0; k < GridView1.HeaderRow.Cells.Count; k++)
            {

                columnbind.Append(GridView1.Rows[i].Cells[k].Text + ',');
            }

            columnbind.Append("\r\n");
        }

        HttpContext.Current.Response.Output.Write(columnbind.ToString().Replace("&nbsp;", "").Replace(",0", ","));
        HttpContext.Current.Response.Flush();
        HttpContext.Current.Response.End();
    }
    public string Exp_to_csv(DataTable dataTable, string filename)
    {
        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".csv");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/text";


        StringBuilder columnbind = new StringBuilder();
        for (int k = 0; k < dataTable.Columns.Count; k++)
        {

            columnbind.Append(dataTable.Columns[k].ColumnName.Trim() + ',');
        }

        columnbind.Append("\r\n");

        for (int i = 0; i < dataTable.Rows.Count; i++)
        {
            for (int k = 0; k < dataTable.Columns.Count; k++)
            {

                columnbind.Append(dataTable.Rows[i][k].ToString() + ',');
            }

            columnbind.Append("\r\n");
        }
        HttpContext.Current.Response.Output.Write(columnbind.ToString());
        HttpContext.Current.Response.Flush();
        HttpContext.Current.Response.End();
        return columnbind.ToString();
    }
    public byte[] Exp_to_csv_new(DataTable dataTable, string filename, string cg_com_name)
    {
        Random rnd = new Random();
        int r = rnd.Next(0, 100000);

        string ff = HttpContext.Current.Server.MapPath("~/Uploads/" + cg_com_name.Replace(" ", "") + "/" +
            filename + DateTime.Now.ToString("yyyyMMddHmmss") + r);
        //string encpath = Convert_Stringto64(ff).ToString();
        // Write sample data to CSV file


        using (CsvFileWriter writer = new CsvFileWriter(ff))
        {
            CsvRow row = new CsvRow();

            foreach (DataColumn dc in dataTable.Columns)
                row.Add(String.Format(dc.ColumnName.ToString()));
            writer.WriteRow(row);
            foreach (DataRow dr in dataTable.Rows)
            {
                row = new CsvRow();
                foreach (DataColumn dc in dataTable.Columns)
                    row.Add(String.Format(dr[dc.ColumnName].ToString()));
                writer.WriteRow(row);
            }
        }

        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.Buffer = true;
        HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".csv");
        HttpContext.Current.Response.Charset = "";
        HttpContext.Current.Response.ContentType = "application/text";

        byte[] data = System.IO.File.ReadAllBytes(ff);
        HttpContext.Current.Response.BinaryWrite(data);
        File.Delete(ff);
        HttpContext.Current.Response.End();
        return data;

    }
    public void open_grid(string title, string query, int seektype, String SRCHVAL = "", bool master = true)
    {

        string url = FindUrl("footable_v8.aspx") + "?m_id=" + EncryptDecrypt.Encrypt(MyGuid);
        SetSession(MyGuid, "pageurl", url);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (query.Trim().Length < 5)
        {
            showmsg(1, "Please Put Right Command", 2);
            SetSession(MyGuid, "basedtquery", "");
            return;
        }
        SetSession(MyGuid, "filename", title);
        SetSession(MyGuid, "basedtquery", query);
        SetSession(MyGuid, "SEEKLIMIT", 9999999999);
        SetSession(MyGuid, "SHOWSAVE", true);
        SetSession(MyGuid, "TEMPID", "-");
        SetSession(MyGuid, "SRCHVAL", SRCHVAL);
        if (seektype == 0) SetSession(MyGuid, "SEEKTYPE", 0);
        else SetSession(MyGuid, "SEEKTYPE", 2);
        SetSession(MyGuid, "CHECKTYPE", seektype);
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','80%','800px','" + title + "');", true);
            //ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard.aspx?mid=YDCKmcdznzA=','90%','750px','" + title + "');", true);
        }
    }
    public void open_grid(string title, string query, int seektype, string mvc)
    {

        //string url = FindUrl("footable_v8.aspx");
        string url = "/foo/footable_v2";
        HttpContext.Current.Session[MyGuid + "_pageurl"] = url;
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (query.Trim().Length < 5)
        {
            showmsg(1, "Please Put Right Command", 2);
            HttpContext.Current.Session[MyGuid + "_basedtquery"] = "";
            return;
        }
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        HttpContext.Current.Session[MyGuid + "_basedtquery"] = query;
        HttpContext.Current.Session[MyGuid + "_SEEKLIMIT"] = 9999999999;
        HttpContext.Current.Session[MyGuid + "_SHOWSAVE"] = false;
        HttpContext.Current.Session[MyGuid + "_TEMPID"] = "-";
        if (seektype == 0) HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 0;
        else HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 2;
        HttpContext.Current.Session[MyGuid + "_CHECKTYPE"] = seektype;


        //if (HttpContext.Current.CurrentHandler is Page)
        //{
        Page p = (Page)HttpContext.Current.CurrentHandler;
        ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../.." + url + "','80%','800px','" + title + "');", true);
        //ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard.aspx?mid=YDCKmcdznzA=','90%','750px','" + title + "');", true);


        //}
    }

    public void open_grid_save(string title, string query, int seektype, string tempid)
    {

        string url = FindUrl("footable_v8.aspx") + "?m_id=" + EncryptDecrypt.Encrypt(MyGuid);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (query.Trim().Length < 5)
        {
            showmsg(1, "Please Put Right Command", 2);
            HttpContext.Current.Session[MyGuid + "_basedtquery"] = "";
            return;
        }
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        HttpContext.Current.Session[MyGuid + "_basedtquery"] = query;
        HttpContext.Current.Session[MyGuid + "_SEEKLIMIT"] = 9999999999;
        HttpContext.Current.Session[MyGuid + "_SHOWSAVE"] = true;
        HttpContext.Current.Session[MyGuid + "_TEMPID"] = tempid;

        if (seektype == 0) HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 0;
        else HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 2;
        HttpContext.Current.Session[MyGuid + "_CHECKTYPE"] = seektype;
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','80%','800px','" + title + "');", true);
            //ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard.aspx?mid=YDCKmcdznzA=','90%','750px','" + title + "');", true);


        }
    }
    public void open_grid(string title, string query, int seektype, int select_Limit)
    {
        string url = FindUrl("footable_v8") + "?m_id=" + EncryptDecrypt.Encrypt(MyGuid);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (query.Trim().Length < 5)
        {
            showmsg(1, "Please Put Right Command", 2);
            HttpContext.Current.Session[MyGuid + "_basedtquery"] = query;
            return;
        }
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        HttpContext.Current.Session[MyGuid + "_basedtquery"] = query;
        HttpContext.Current.Session[MyGuid + "_SEEKLIMIT"] = select_Limit;
        HttpContext.Current.Session[MyGuid + "_SHOWSAVE"] = false;
        HttpContext.Current.Session[MyGuid + "_TEMPID"] = "-";
        if (seektype == 0) HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 0;
        else HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 2;
        HttpContext.Current.Session[MyGuid + "_CHECKTYPE"] = seektype;
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','80%','800px','" + title + "');", true);
            //ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard.aspx?mid=YDCKmcdznzA=','90%','750px','" + title + "');", true);


        }
    }
    public void open_grid(string title, string query, int seektype, int select_Limit, string height, string width)
    {
        string url = FindUrl("footable_v8") + "?m_id=" + EncryptDecrypt.Encrypt(MyGuid);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (query.Trim().Length < 5)
        {
            showmsg(1, "Please Put Right Command", 2);
            HttpContext.Current.Session[MyGuid + "_basedtquery"] = "";
            return;
        }
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        HttpContext.Current.Session[MyGuid + "_basedtquery"] = query;
        HttpContext.Current.Session[MyGuid + "_SEEKLIMIT"] = select_Limit;
        HttpContext.Current.Session[MyGuid + "_SHOWSAVE"] = false;
        HttpContext.Current.Session[MyGuid + "_TEMPID"] = "-";
        if (seektype == 0) HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 0;
        else HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 2;
        HttpContext.Current.Session[MyGuid + "_CHECKTYPE"] = seektype;
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','" + width + "','" + width + "','" + title + "');", true);
            //ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard.aspx?mid=YDCKmcdznzA=','90%','750px','" + title + "');", true);


        }
    }
    public void open_grid_save(string title, string query, int seektype, int select_Limit, string height, string width, string tempid)
    {
        string url = FindUrl("footable_v8") + "?m_id=" + EncryptDecrypt.Encrypt(MyGuid);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (query.Trim().Length < 5)
        {
            showmsg(1, "Please Put Right Command", 2);
            HttpContext.Current.Session[MyGuid + "_basedtquery"] = "";
            return;
        }
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        HttpContext.Current.Session[MyGuid + "_basedtquery"] = query;
        HttpContext.Current.Session[MyGuid + "_SEEKLIMIT"] = select_Limit;
        HttpContext.Current.Session[MyGuid + "_SHOWSAVE"] = true;
        HttpContext.Current.Session[MyGuid + "_TEMPID"] = tempid;
        if (seektype == 0) HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 0;
        else HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 2;
        HttpContext.Current.Session[MyGuid + "_CHECKTYPE"] = seektype;
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','" + width + "','" + width + "','" + title + "');", true);
            //ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard.aspx?mid=YDCKmcdznzA=','90%','750px','" + title + "');", true);


        }
    }
    public string open_grid_dt(string title, DataTable DtInput, int seektype)
    {
        string url = FindUrl("footable_v8") + "?m_id=" + EncryptDecrypt.Encrypt(MyGuid);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return "Page Not Found"; }
        if (DtInput.Rows.Count < 1)
        {
            showmsg(1, "No Data Found", 2);
            return "No Data Found";
        }
        SetSession(MyGuid, "filename", title);
        SetSession(MyGuid, "basedtquery", "");
        SetSession(MyGuid, "SEEKLIMIT", 999999999);
        SetSession(MyGuid, "basedatatable", DtInput);
        if (seektype == 0) SetSession(MyGuid, "SEEKTYPE", 0);
        else SetSession(MyGuid, "SEEKTYPE", 2);
        SetSession(MyGuid, "SHOWSAVE", false);
        SetSession(MyGuid, "TEMPID", "-");
        SetSession(MyGuid, "CHECKTYPE", seektype);
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','80%','800px','" + title + "');", true);
            //ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard.aspx?mid=YDCKmcdznzA=','90%','750px','" + title + "');", true);
        }

        return "ok";
    }
    public void Open_page(string title, string page, string query, int seektype, string height, string width)
    {
        string url = FindUrl(page);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (query.Trim().Length < 5) { showmsg(1, "Please Put Right Command", 2); return; }
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        HttpContext.Current.Session[MyGuid + "_basedtquery"] = query;
        if (seektype == 0) HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 0;
        else HttpContext.Current.Session[MyGuid + "_SEEKTYPE"] = 2;
        HttpContext.Current.Session[MyGuid + "_CHECKTYPE"] = seektype;
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','" + width + "','" + height + "','" + title + "');", true);
            //ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard.aspx?mid=YDCKmcdznzA=','90%','750px','" + title + "');", true);

        }
    }
    public void Open_page(string title, string pagename, string querystring)
    {
        string url = FindUrl(pagename);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }

        if (HttpContext.Current.CurrentHandler is Page)
        {
            HttpContext.Current.Response.Redirect("~/" + url + querystring);
        }
    }
    public void Open_page(string title, string pagename)
    {
        string url = FindUrl(pagename);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','40%','400px','" + title + "');", true);
        }

    }
    public void Open_page(string title, string pagename, string height, string width)
    {
        string url = FindUrl(pagename);
        if (url.Equals("")) { showmsg(1, "Page Not Found", 0); return; }
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../" + url + "','" + width + "','" + height + "','" + title + "');", true);
        }

    }

    public void open_demo(string title)
    {
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard?mid=YDCKmcdznzA%3d','90%','800px','" + title + "');", true);
        }
    }
    public void open_child(string title)
    {
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/dashboard?mid=YDCKmcdznzA%3d','70%','700px','" + title + "');", true);
        }
    }

    public void open_grid(string pagno, int width, int height, string title)
    {
        HttpContext.Current.Session[MyGuid + "_filename"] = title;
        if (HttpContext.Current.CurrentHandler is Page)
        {
            Page p = (Page)HttpContext.Current.CurrentHandler;
            ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/directlink/footable_v5.aspx','" + width + "','" + height + "','" + title + "');", true);

        }
    }


    public string RemoveCommas(string value)
    {

        return value.Replace("’", " ").Replace("”", " ").Replace("“", " ").Replace("‘", " ").Replace("\'", " ").Replace("\"", " ");
    }

    public string vw_feesfrequency(string academicyear_id, string client_id, string client_unit_id)
    {
        string cmd = "select tab.* ,date_add(due_dt, interval tab.overdue_date-due_date day ) as overdue_dt from (select  m.client_id,m.client_unit_id, m.frequency_id, m.frequencyname,m.From_Date," +
            "m.no_trans,m.months,m.due_month,m.due_date,m.overdue_date,@ndt:=(case when @grp<>m.frequencyname or   @ndt=0 then m.from_date + INTERVAL due_month-1 MONTH +" +
            " INTERVAL due_date-1 DAY else  INTERVAL months MONTH +@ndt end)   as due_dt, @rownum:= @rownum + 1 as row_number,@grp:=m.frequencyname AS grp from" +
            " (select b.from_date,a.* from school_frequency a inner join (select From_Date from add_academic_year where  client_id='" + client_id + "' and  academic_year_id='" + academicyear_id + "')" +
            " b on 1=1 inner join (select 1 as num union select 2 as num union select 3 as num union select 4 as num union select 5 as num union select 6 as num union" +
            " select 7 as num union select 8 as num union select 9 as num union select 10 as num union select 11 as num union select 12 as num) c on c.num<=a.no_trans" +
            " inner join (SELECT @mnt:=0) e on 1=1  where  a.client_unit_id='" + client_unit_id + "' order by frequencyname) m inner join (SELECT @ndt:=0) d on 1=1 inner join (SELECT @grp:=0) g on 1=1 " +
            "  inner join (SELECT @rownum:= 0) r on 1=1 order by frequencyname) tab";
        return cmd;

    }
    public string vw_fees(string academicyear_id, string client_id, string client_unit_id)
    {

        string cmd = "select main.*,'Pending' as feestatus,cs.CategoryType,cs.class as classname,cs.CategoryType as class_cat,msc.master_name as cat_name,ms.master_name as sectionnme" +
             " from (select concat(date_format(fq.due_dt,'%Y%m'),'01') as feedate, concat('01/', date_format(fq.due_dt, '%m/%Y')) as Fee_Month,date_format(fq.due_dt, '%d/%m/%Y') as Due_Date" +
             ",date_format(Last_Day(fq.due_dt), '%d/%m/%Y') as HideDate,date_format(fq.due_dt, '%m') as Month_Id, date_format(fq.due_dt, '%M') as month_name, fq.grp, fq.due_dt," +
             "fq.overdue_dt, cast.*,'0.00' as Receipt_Amount,'0.00' as PaidAmount,'Y' as IntialStatus,Round((nvl((case when sm.IsAmount = 1 THEN((sm.Amount * cast.Fee_Amount)" +
             " / 100)ELSE sm.Amount end), 0)) ,2)AS scholarship, sm.ScholarshipName,sm.vch_num as Scholarship_id from(select cl1.* , sd.reg_no, sd.class_applied, sd.section, " +
             "ud.RegNumber, ud.Caste_Category, ud.GENDER, ud.FIRST_NAME, ud.MIDDLE_NAME, ud.LAST_NAME, ud.f_firstname, ud.f_middlename, ud.f_lastname, ud.m_firstname," +
             " ud.m_middlename, ud.m_lastname, sd.vch_num as student_id, sd.roll_number, sd.RollNo ,sd.havetransport,sd.pick_point,sd.drop_point from student_detail sd inner join (select fs.*, sf.FrequencyName, " +
             "st.FeeTypeName, ms.master_name as HeadName, CONCAT(sf.Due_Month, ' / ', sf.Due_Date) as Duedate from school_fee_structure fs, school_frequency sf," +
             " school_fee_type st, master_setting  ms WHERE  fs.academic_year_id='" + academicyear_id + "' and sf.Frequency_Id = fs.Frequency_Id  and st.FeeType_Id = fs.FeeType_Id and fs.FeeHead_Id = ms.master_id and" +
             " ms.type = 'EFH'  and fs.client_unit_id = sf.client_unit_id  and fs.client_unit_id = st.client_unit_id" +
             " and  fs.client_unit_id = ms.client_unit_id) cl1 on sd.CLASS_APPLIED = cl1.class_id and sd.academic_year_id = cl1.academic_year_id" +
             "  and  sd.client_unit_id = cl1.client_unit_id INNER join user_details ud on sd.reg_no = ud.Regnumber and sd.type=ud.type) cast left outer join scholarship_master sm on cast.class_id = sm.class_id and cast.Caste_Category = sm.Caste_category_id" +
             "  and cast.Gender = sm.Gender and cast.feeHead_id = sm.Fee_HeadId and  cast.client_unit_id and sm.client_unit_id" +
             " and sm.academic_year_id = cast.academic_year_id  inner join(" + vw_feesfrequency(academicyear_id, client_id, client_unit_id) + ") fq on fq.frequency_id = cast.frequency_id and" +
             "  and fq.client_unit_id = cast.client_unit_id order by fq.due_dt, fq.grp) main INNER join add_class cs on cs.add_class_id = " +
             "main.class_id and  main.client_unit_id and cs.client_unit_id INNER JOIN master_setting ms on ms.master_id = main.section " +
             "and ms.type = 'ECS'  and find_in_set(main.client_unit_id , ms.client_unit_id)=1 inner join master_setting msc on msc.master_id = cs.CategoryType " +
             " and  msc.client_unit_id = cs.client_unit_id and msc.type = 'ECC'";

        return cmd;

    }

    public string vw_fees_new(string academicyear_id, string client_id, string client_unit_id)
    {



        string cmd = "select (to_char(clf.due_dt,'yyyymm')||'01') as feedate, ('01/'|| to_char(clf.due_dt, 'mm/yyyy')) as Fee_Month," +
            "clf.due_dt as Due_Date1,to_char(Last_Day(clf.due_dt), 'dd/mm/yyyy') as HideDate,to_char(clf.due_dt, 'mm') " +
            "as Month_Id, to_char(clf.due_dt, 'mmmm') as month_name, sd.reg_no, sd.class_applied, sd.section, sd.vch_num as student_id, sd.roll_number," +
            " sd.RollNo ,sd.havetransport,sd.pick_point,sd.drop_point,clf.*,ud.RegNumber, ud.Caste_Category, ud.GENDER, ud.FIRST_NAME, ud.MIDDLE_NAME," +
            " ud.LAST_NAME, ud.f_firstname, ud.f_middlename, ud.f_lastname, ud.m_firstname, ud.m_middlename, ud.m_lastname,(CASE WHEN ud.default_emailid='F' THEN ud.f_email WHEN ud.default_emailid='M' THEN ud.m_email WHEN ud.default_emailid='G' THEN ud.g_email END) as Email_Id ,(CASE WHEN ud.default_Ph='F' THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number WHEN ud.default_Ph='G' THEN ud.g_con_number END) as PhoneNo,0 as Receipt_Amount," +
            "0 as PaidAmount,'Y' as IntialStatus,Round((nvl((case when sm.IsAmount = 1 THEN((sm.Amount * clf.Fee_Amount) / 100)ELSE sm.Amount" +
            " end), 0)) ,2)AS scholarship, sm.ScholarshipName,sm.vch_num as Scholarship_id,'Pending' as feestatus, st.FeeTypeName, ms.master_name as HeadName" +
            ",cs.CategoryType,cs.class as classname,cs.CategoryType as class_cat,msc.master_name as cat_name,nvl(ms1.master_name,'-') as sectionnme from student_detail" +
            " sd inner join user_details ud on sd.reg_no=ud.regnumber and ud.type= 'STD'" +
            " inner join" +
            " (select * from Fees_detail where client_unit_id = '" + client_unit_id + "' and academic_year_id = '" + academicyear_id + "') clf " +
            "on   clf.client_unit_id = sd.client_unit_id and sd.academic_year_id = clf.academic_year_id and " +
            "sd.CLASS_APPLIED = clf.class_id  left outer join  scholarship_master sm on clf.class_id = sm.class_id and sm.type = 'ESM' and" +
            "  clf.client_unit_id = sm.client_unit_id and sm.academic_year_id = clf.academic_year_id and " +
            "ud.Caste_Category = sm.Caste_category_id  and ud.Gender = sm.Gender and clf.feeHead_id = sm.Fee_HeadId inner join school_fee_type st" +
            " on st.FeeType_Id = clf.FeeType_Id  and st.client_unit_id = clf.client_unit_id and(st.master_type = ''" +
            " or st.master_type = '0')   inner join master_setting ms  on clf.FeeHead_Id = ms.master_id  and ms.type = 'EFH' " +
            " and clf.client_unit_id = ms.client_unit_id and ms.master_type = 'Education Fees Head'  INNER join add_class cs on cs.add_class_id = clf.class_id" +
            " and cs.type = 'EAC'  and clf.client_unit_id = cs.client_unit_id Left JOIN master_setting ms1" +
            " on ms1.master_id = sd.section and ms1.type = 'ECS'  and find_in_set(clf.client_unit_id,ms1.client_unit_id)=1 inner join " +
            "master_setting msc on msc.master_id = cs.CategoryType and msc.type = 'ECC'   and msc.client_unit_id = cs.client_unit_id ";

        return cmd;

    }

    public string vw_fees_new(string regcond, string edicond)
    {
        // 10.04.2020
        //string cmd = "select  (to_char(clf.due_dt,'yyyymm')||'01') as feedate, ('01/'|| to_char(clf.due_dt, 'mm/yyyy')) as Fee_Month," +
        //    "clf.due_dt as Due_Date1,to_char(Last_Day(clf.due_dt), 'dd/mm/yyyy') as HideDate,to_char(clf.due_dt, 'mm') " +
        //    "as Month_Id, to_char(clf.due_dt, 'Month') as month_name,sd.studenttype, sd.reg_no, sd.class_applied, sd.section, sd.vch_num as student_id, sd.roll_number," +
        //    " sd.RollNo ,sd.havetransport,sd.pick_point,sd.drop_point,clf.*,ud.RegNumber, ud.Caste_Category, ud.GENDER, ud.FIRST_NAME, ud.MIDDLE_NAME," +
        //    " ud.LAST_NAME, ud.f_firstname, ud.f_middlename, ud.f_lastname, ud.m_firstname, ud.m_middlename, ud.m_lastname,(CASE WHEN ud.default_emailid='F' THEN ud.f_email" +
        //    " WHEN ud.default_emailid='M' THEN ud.m_email WHEN ud.default_emailid='G' THEN ud.g_email END) as Email_Id ,(CASE WHEN ud.default_Ph='F'" +
        //    " THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number WHEN ud.default_Ph='G' THEN ud.g_con_number END) as PhoneNo,0 as Receipt_Amount," +
        //    " 0 as PaidAmount,'Y' as IntialStatus,Round((nvl((case when sm.IsAmount = 1 THEN((sm.Amount * clf.Fee_Amount) / 100)ELSE sm.Amount" +
        //    " end), 0)) ,2)AS scholarship, sm.ScholarshipName,sm.vch_num as Scholarship_id,'Pending' as feestatus, st.FeeTypeName, ms.master_name as HeadName" +
        //    ",cs.CategoryType,cs.class as classname,cs.CategoryType as class_cat,msc.master_name as cat_name,nvl(ms1.master_name,'-') as sectionnme from student_detail" +
        //    " sd inner join user_details ud on sd.vch_num=ud.vch_num and sd.type=ud.type and  sd.reg_no=ud.regnumber and ud.type= 'STD' and ud.client_unit_id=sd.client_unit_id " +
        //    " inner join" +
        //    " (select * from Fees_detail where " + regcond + " UNION select * from fees_detail where " + edicond + ") clf " +
        //    "on  clf.client_id = sd.client_id and clf.client_unit_id = sd.client_unit_id and sd.academic_year_id = clf.academic_year_id  " +
        //    "  left outer join  scholarship_master sm on clf.class_id = sm.class_id and sm.type = 'ESM' and" +
        //    " clf.client_id = sm.client_id and clf.client_unit_id = sm.client_unit_id and sm.academic_year_id = clf.academic_year_id and " +
        //    "ud.Caste_Category = sm.Caste_category_id  and ud.Gender = sm.Gender and clf.feeHead_id = sm.Fee_HeadId inner join school_fee_type st" +
        //    " on st.FeeType_Id = clf.FeeType_Id  and st.client_id = clf.client_id and st.client_unit_id = clf.client_unit_id and(st.master_type = ''" +
        //    " or st.master_type = '0')   inner join master_setting ms  on (clf.feetype_id|| clf.FeeHead_Id)=(ms.sectionid||ms.master_id) and ms.type = 'EFH' and ms.client_id = clf.client_id" +
        //    " and clf.client_unit_id = ms.client_unit_id and ms.master_type = 'Education Fees Head'  " +
        //    "and (ms.section_strength='B' or  (case when upper(sd.studenttype)='NEW' then 'N' else 'O' end)=ms.section_strength)   INNER join add_class cs on cs.add_class_id = clf.class_id" +
        //    " and cs.type = 'EAC' and clf.client_id = cs.client_id and clf.client_unit_id = cs.client_unit_id Left JOIN master_setting ms1" +
        //    " on ms1.master_id = sd.section and ms1.type = 'ECS'  and find_in_set(clf.client_unit_id,ms1.client_unit_id)=1 inner join " +
        //    "master_setting msc on msc.master_id = cs.CategoryType and msc.type = 'ECC'  and msc.client_id = cs.client_id and msc.client_unit_id = cs.client_unit_id ";

        string cmd = "select  (to_char(clf.due_dt,'yyyymm')||'01') as feedate, ('01/'|| to_char(clf.due_dt, 'mm/yyyy')) as Fee_Month," +
           "clf.due_dt as Due_Date1,to_char(Last_Day(clf.due_dt), 'dd/mm/yyyy') as HideDate,to_char(clf.due_dt, 'mm') " +
           "as Month_Id, to_char(clf.due_dt, 'Month') as month_name,sd.studenttype, sd.reg_no, sd.class_applied, sd.section, sd.vch_num as student_id, sd.roll_number," +
           " sd.RollNo ,sd.havetransport,sd.pick_point,sd.drop_point,clf.*,ud.RegNumber, ud.Caste_Category, ud.GENDER, ud.FIRST_NAME, ud.MIDDLE_NAME," +
           " ud.LAST_NAME, ud.f_firstname, ud.f_middlename, ud.f_lastname, ud.m_firstname, ud.m_middlename, ud.m_lastname,(CASE WHEN ud.default_emailid='F' THEN ud.f_email" +
           " WHEN ud.default_emailid='M' THEN ud.m_email else ud.g_email END) as Email_Id ,(CASE WHEN ud.default_Ph='F'" +
           " THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number else ud.g_con_number END) as PhoneNo,0 as Receipt_Amount," +
           " 0 as PaidAmount,'Y' as IntialStatus,Round((nvl((case when sm.IsAmount = 1 THEN((sm.Amount * clf.Fee_Amount) / 100)ELSE sm.Amount" +
           " end), 0)) ,2) AS scholarship, sm.ScholarshipName,sm.vch_num as Scholarship_id,'Pending' as feestatus, st.FeeTypeName, ms.master_name as HeadName" +
           ",cs.CategoryType,cs.class as classname,cs.CategoryType as class_cat,msc.master_name as cat_name,nvl(ms1.master_name,'-') as sectionnme from student_detail" +
           " sd inner join user_details ud on sd.vch_num=ud.vch_num and sd.type=ud.type and  sd.reg_no=ud.regnumber and ud.type= 'STD' and ud.client_unit_id=sd.client_unit_id " +
           " inner join" +
           " (select * from Fees_detail where " + regcond + " UNION select * from fees_detail where " + edicond + ") clf " +
           "on clf.client_unit_id = sd.client_unit_id and sd.academic_year_id = clf.academic_year_id  " +
           "  left outer join  scholarship_master sm on clf.class_id = sm.class_id and sm.type = 'ESM' and" +
           " clf.client_unit_id = sm.client_unit_id and sm.academic_year_id = clf.academic_year_id and " +
           "ud.Caste_Category = sm.Caste_category_id  and ud.Gender = sm.Gender and clf.feeHead_id = sm.Fee_HeadId inner join school_fee_type st" +
           " on st.FeeType_Id = clf.FeeType_Id  and st.client_unit_id = clf.client_unit_id and(st.master_type = ''" +
           " or st.master_type = '0')   inner join master_setting ms  on (clf.feetype_id|| clf.FeeHead_Id)=(ms.sectionid||ms.master_id) and ms.type = 'EFH' and clf.client_unit_id = ms.client_unit_id and ms.master_type = 'Education Fees Head'  " +
           "and (ms.section_strength='B' or  (case when upper(sd.studenttype)='NEW' then 'N' else 'O' end)=ms.section_strength) INNER join add_class cs on cs.add_class_id = clf.class_id" +
           " and cs.type = 'EAC' and clf.client_unit_id = cs.client_unit_id Left JOIN master_setting ms1" +
           " on ms1.master_id = sd.section and ms1.type = 'ECS'  and find_in_set(clf.client_unit_id,ms1.client_unit_id)=1 inner join " +
           "master_setting msc on msc.master_id = cs.CategoryType and msc.type = 'ECC' and msc.client_unit_id = cs.client_unit_id ";

        return cmd;

    }
    public string vw_fees_Adm(string regcond, string edicond)
    {




        string cmd = "select  (to_char(clf.due_dt||'yyyymm')||'01') as feedate, ('01/'|| to_char(clf.due_dt, 'mm/yyyy')) as Fee_Month," +
           "clf.due_dt as Due_Date1,to_char(Last_Day(clf.due_dt), 'dd/mm/yyyy') as HideDate,to_char(clf.due_dt, 'mm') " +
           "as Month_Id, to_char(clf.due_dt, 'Month') as month_name,sd.std_type as studenttype, sd.sa_id as reg_no, sd.class_applied, '-' as section, sd.vch_num as student_id, sd.sa_id as roll_number," +
           " sd.sa_id as RollNo ,sd.havetransport,sd.pick_point,sd.drop_point,clf.*,to_char(sd.sa_id )as RegNumber, sd.ucaste as Caste_Category, sd.GENDER, sd.FIRST_NAME, sd.MIDDLE_NAME," +
           " sd.LAST_NAME, sd.f_firstname, sd.f_middlename, sd.f_lastname, sd.m_firstname, sd.m_middlename, sd.m_lastname,(CASE WHEN sd.default_emailid='F' THEN sd.f_email WHEN sd.default_emailid='M'" +
           " THEN sd.m_email WHEN sd.default_emailid='G' THEN sd.g_email END) as Email_Id ,(CASE WHEN sd.default_Ph='F' THEN sd.f_con_number WHEN sd.default_Ph='M' THEN sd.m_con_number WHEN sd.default_Ph='G'" +
           " THEN sd.g_con_number END) as PhoneNo,0 as Receipt_Amount," +
           "0 as PaidAmount,'Y' as IntialStatus,Round((nvl((case when sm.IsAmount = 1 THEN((sm.Amount * clf.Fee_Amount) / 100)ELSE sm.Amount" +
           " end), 0)) ,2)AS scholarship, sm.ScholarshipName,sm.vch_num as Scholarship_id,'Pending' as feestatus, st.FeeTypeName, ms.master_name as HeadName" +
           ",cs.CategoryType,cs.class as classname,cs.CategoryType as class_cat,msc.master_name as cat_name from student_applicant_details sd" +

           " inner join" +
           " (select * from Fees_detail where " + regcond + " UNION select * from fees_detail where " + edicond + " ) clf " +
           "on  clf.client_id = sd.client_id and clf.client_unit_id = sd.client_unit_id  and sd.usession=clf.academic_year_id  and " +
           "sd.CLASS_APPLIED = clf.class_id  left outer join  scholarship_master sm on clf.class_id = sm.class_id and sm.type = 'ESM' and" +
           " clf.client_id = sm.client_id and clf.client_unit_id = sm.client_unit_id and sm.academic_year_id = clf.academic_year_id and " +
           "sd.ucaste = sm.Caste_category_id  and sd.Gender = sm.Gender and clf.feeHead_id = sm.Fee_HeadId inner join school_fee_type st" +
           " on st.FeeType_Id = clf.FeeType_Id  and st.client_id = clf.client_id and st.client_unit_id = clf.client_unit_id and(st.master_type = ''" +
           " or st.master_type = '0')   inner join master_setting ms  on (clf.feetype_id|| clf.FeeHead_Id)=(ms.sectionid||ms.master_id) and ms.type = 'EFH' and ms.client_id = clf.client_id" +
           " and clf.client_unit_id = ms.client_unit_id and ms.master_type = 'Education Fees Head'  " +
           "and (ms.section_strength='B' or  (case when upper(sd.std_type)='NEW' then 'N' else 'O' end)=ms.section_strength)   INNER join add_class cs on cs.add_class_id = clf.class_id" +
           " and cs.type = 'EAC' and clf.client_id = cs.client_id and clf.client_unit_id = cs.client_unit_id " +
           "  inner join master_setting msc on msc.master_id = cs.CategoryType and msc.type = 'ECC'  and msc.client_id = cs.client_id and msc.client_unit_id = cs.client_unit_id ";


        return cmd;

    }

    public void Showfilter_App(string title)
    {
        try
        {
            HttpContext.Current.Session[MyGuid + "_filename"] = title;
            System.Web.UI.Page page = HttpContext.Current.Handler as System.Web.UI.Page;
            if (page != null)
            {
                //string path = page.Server.MapPath(@"erp\\landing\\landing_page4.aspx");


                Page p = (Page)HttpContext.Current.CurrentHandler;
                ScriptManager.RegisterClientScriptBlock(p, p.GetType(), "PopUP", "OpenSingle('../../../../../erp/common/Frm_Filter4.aspx?m_id=" + MyGuid + "','65%','650px','" + title + "');", true);
            }
        }
        catch (Exception ee)
        {

        }

    }

    public List<SelectListItem> BindClasscategory(String usercode, string unitid_mst)
    {
        List<SelectListItem> temp1 = new List<SelectListItem>();
        DataTable dt = new DataTable();
        string sessionname = "BindClasscategory_u_" + usercode + "_" + unitid_mst + "";
        if (HttpContext.Current.Application[sessionname] == null)
        {
            try
            {
                dt = getdata(usercode, "SELECT  master_id,master_name FROM master_setting " +
                                           "where  type='ECC' and client_unit_id='" + unitid_mst + "'");
            }
            catch (Exception ex) { }
            temp1 = dt_to_selectlist(dt);
            HttpContext.Current.Application[sessionname] = temp1;
        }
        else
        {
            temp1 = ((List<SelectListItem>)HttpContext.Current.Application[sessionname]);
            if (temp1.Count == 0)
            {
                try
                {
                    dt = getdata(usercode, "SELECT  master_id,master_name FROM master_setting " +
                                               "where  type='ECC' and client_unit_id='" + unitid_mst + "'");
                }
                catch (Exception ex) { }
                temp1 = dt_to_selectlist(dt);
                HttpContext.Current.Application[sessionname] = temp1;
            }
        }
        return temp1;

    }

    public DataTable BindClasscategory(String usercode, string unitid_mst, string clientid_mst, System.Web.UI.HtmlControls.HtmlSelect Ddl)
    {

        DataTable dt = new DataTable();

        try
        {
            dt = getdata(usercode, "SELECT  master_id,master_name FROM master_setting " +
                                           "where  type='ECC' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'");

            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "master_id"; // to get value
                Ddl.DataTextField = "master_name"; // to show value
                Ddl.DataBind();

            }

        }
        catch (Exception ex)
        {

        }

        return dt;

    }

    public DataTable BindClassSingle(String usercode, string unitid_mst, string clientid_mst, DropDownList Ddl)
    {


        DataTable dt = new DataTable();

        try
        {
            dt = getdata(usercode, "select 0 as add_class_id,'--Select--' as class union all select add_class_id,class from add_class where client_id	='" + clientid_mst + "' and  client_unit_id='" + unitid_mst + "' and  type='EAC'");
            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "add_class_id"; // to get value
                Ddl.DataTextField = "class"; // to show value
                Ddl.DataBind();

            }

        }
        catch (Exception ex)
        {

        }

        return dt;

    }

    public DataTable BindSectionSingle(String usercode, string unitid_mst, DropDownList Ddl)
    {

        DataTable dt = new DataTable();

        try
        {
            dt = getdata(usercode, "select 0 as master_id ,'--Select--' as master_name union all SELECT  master_id,master_name FROM master_setting " +
                                           "where type='ECS' and  find_in_set( client_unit_id,'" + unitid_mst + "')=1");

            if (dt.Rows.Count > 0)
            {
                Ddl.DataSource = dt;
                Ddl.DataValueField = "master_id"; // to get value
                Ddl.DataTextField = "master_name"; // to show value
                Ddl.DataBind();

            }

        }
        catch (Exception ex)
        {


        }

        return dt;

    }

    public List<string> Getformvalue(Page page, string ctrlname, string matchstr)
    {
        List<string> res = new List<string>();
        String[] rforms = page.Request.Form.AllKeys;


        foreach (string str in rforms)
        {
            switch (matchstr)
            {
                //Ends With
                case "#":
                    if (str.Trim().ToUpper().EndsWith(ctrlname.ToUpper().Trim())) res.Add(page.Request.Form[str].ToString());
                    break;
                case "^":
                    if (str.Trim().ToUpper().StartsWith(ctrlname.ToUpper().Trim())) res.Add(page.Request.Form[str].ToString());
                    break;
                case "*":
                    if (str.Trim().ToUpper().Contains(ctrlname.ToUpper().Trim())) res.Add(page.Request.Form[str].ToString());
                    break;
                default:
                    if (str.Trim().ToUpper().EndsWith(ctrlname.ToUpper().Trim())) res.Add(page.Request.Form[str].ToString());
                    break;
            }

        }
        return res;
    }

    public List<Control> FindControlByIdInControl(Control control, List<Control> returnlist, string id)
    {

        foreach (Control childControl in control.Controls)
        {
            if (childControl.ID != null && childControl.ID.Equals(id, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
            {
                returnlist.Add(childControl);

            }

            if (childControl.HasControls())
            {
                FindControlByIdInControl(childControl, returnlist, id);

            }
        }

        return returnlist;
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="control"></param>
    /// <param name="returnlist"></param>
    /// <param name="id"></param>
    /// <param name="matchstr">$=endswith,^=startswith,*=contains</param>
    /// <returns></returns>
    public List<Control> FindControlByIdInControl(Control control, List<Control> returnlist, string id, string matchstr)
    {

        foreach (Control childControl in control.Controls)
        {
            switch (matchstr)
            {
                case "$":
                    if (childControl.ID != null && childControl.ID.EndsWith(id, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                case "^":
                    if (childControl.ID != null && childControl.ID.StartsWith(id, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                case "*":
                    if (childControl.ID != null && childControl.ID.ToUpper().Contains(id.ToUpper()) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                default:
                    if (childControl.ID != null && childControl.ID.Equals(id, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;

            }


            if (childControl.HasControls())
            {
                FindControlByIdInControl(childControl, returnlist, id, matchstr);

            }
        }

        return returnlist;
    }

    public List<Control> FindControlByIdInControl_clID(Control control, List<Control> returnlist, string id, string matchstr)
    {

        foreach (Control childControl in control.Controls)
        {
            switch (matchstr)
            {
                case "$":
                    if (childControl.ID != null && id.EndsWith(childControl.ID, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                case "^":
                    if (childControl.ID != null && id.StartsWith(childControl.ID, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                case "*":
                    if (childControl.ID != null && id.ToUpper().Contains(childControl.ID.ToUpper()) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                default:
                    if (childControl.ID != null && id.Equals(childControl.ID, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;

            }


            if (childControl.HasControls())
            {
                FindControlByIdInControl_clID(childControl, returnlist, id, matchstr);

            }
        }

        return returnlist;
    }
    public List<Control> FindControlByClientIdInControl(Control control, List<Control> returnlist, string id, string matchstr)
    {

        foreach (Control childControl in control.Controls)
        {
            if (childControl.ClientID.Contains("70"))
            {

            }
            switch (matchstr)
            {
                case "$":
                    if (childControl.ClientID != null && childControl.ClientID.EndsWith(id, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                case "^":
                    if (childControl.ClientID != null && childControl.ID.StartsWith(id, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                case "*":
                    if (childControl.ClientID != null && childControl.ID.ToUpper().Contains(id.ToUpper()) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;
                default:
                    if (childControl.ClientID != null && childControl.ID.Equals(id, StringComparison.OrdinalIgnoreCase) && (childControl is HtmlControl || childControl is Control))
                    {
                        returnlist.Add(childControl);

                    }
                    break;

            }


            if (childControl.HasControls())
            {
                FindControlByIdInControl_clID(childControl, returnlist, id, matchstr);

            }
        }

        return returnlist;
    }
    public List<string> Getformvalue(Page page, string ctrlname, string matchstr, string nouse)
    {
        List<string> res = new List<string>();
        String[] rforms = page.Request.Form.AllKeys;
        List<Control> conts = new List<Control>();
        FindControlByIdInControl(page.Form, conts, ctrlname, matchstr);

        foreach (Control ctl in conts)
        {
            if (ctl is DropDownList) res.Add(((DropDownList)ctl).SelectedValue);
            if (ctl is HtmlSelect) res.Add(((HtmlSelect)ctl).Value);
            if (ctl is TextBox) res.Add(((TextBox)ctl).Text);
            if (ctl is Label) res.Add(((Label)ctl).Text);
            if (ctl is HtmlInputText) res.Add(((HtmlInputText)ctl).Value);

            if (ctl is HtmlInputRadioButton) res.Add(((HtmlInputRadioButton)ctl).Checked.ToString());
            if (ctl is HiddenField) res.Add(((HiddenField)ctl).Value.ToString());
            if (ctl is HtmlInputCheckBox) res.Add(((HtmlInputCheckBox)ctl).Checked.ToString());

        }
        return res;
    }


    public List<Control> FindControlBytypeInControl(Control control, List<Control> returnlist, string CtrlType)
    {

        foreach (Control childControl in control.Controls)
        {
            if (childControl.ID != null && childControl.GetType().Name.ToString().Trim().ToUpper().Equals(CtrlType.Trim().ToUpper()))
            {
                returnlist.Add(childControl);

            }

            if (childControl.HasControls())
            {
                FindControlBytypeInControl(childControl, returnlist, CtrlType);

            }
        }

        return returnlist;
    }

    public List<Control> FindAllControls(Control control, List<Control> returnlist)
    {

        foreach (Control childControl in control.Controls)
        {
            if (childControl.ID != null)
            {
                returnlist.Add(childControl);

            }

            if (childControl.HasControls())
            {
                FindAllControls(childControl, returnlist);

            }
        }

        return returnlist;
    }

    public static Control CloneControl(Control c, int idd)
    {
        var clone = Activator.CreateInstance(c.GetType()) as Control;
        if (c is HtmlControl)
        {
            clone.ID = c.ID + idd;
            foreach (string key in ((HtmlControl)c).Attributes.Keys)
                ((HtmlControl)clone).Attributes.Add(key, (string)((HtmlControl)c).Attributes[key]);
        }
        else
        {
            foreach (PropertyInfo p in c.GetType().GetProperties())
            {
                // "InnerHtml/Text" are generated on the fly, so skip them. "Page" can be ignored, because it will be set when control is added to a Page.
                if (p.CanRead && p.CanWrite && p.Name != "InnerHtml" && p.Name != "InnerText" && p.Name != "Page")
                {
                    try
                    {
                        p.SetValue(clone, p.GetValue(c, p.GetIndexParameters()), p.GetIndexParameters());
                    }
                    catch
                    {
                    }
                }
            }
            clone.ID = c.ClientID + idd;
        }
        for (int i = 0; i < c.Controls.Count; ++i)
            clone.Controls.Add(CloneControl(c.Controls[i], idd));
        return clone;
    }




    public string FillChart_stacked(string userCode, string title, string graphType, string graphQuery, string graphUnit, string graphDiv, string btnid, string bottomTitle, bool threeD, string leftTitle, bool stacked, bool pivot, string chartno)
    {

        StringBuilder sb = new System.Text.StringBuilder();
        DataTable grDt = new DataTable();
        if (HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] != null)
        {
            grDt = (DataTable)HttpContext.Current.Session[MyGuid + "_CHART_" + chartno];
            if (grDt.Rows.Count < 1) grDt = getdata(userCode, graphQuery);
            HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] = grDt;
        }
        else
        {
            grDt = getdata(userCode, graphQuery);
            HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] = grDt;
        }
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("Highcharts.chart('" + graphDiv + "', { ");
            sb.Append(" chart: {");
            sb.Append(" type: '" + graphType + "',");
            if (threeD) sb.Append(" options3d: {enabled: true,alpha: 15,beta: 15,viewDistance: 25,depth: 40}");
            sb.Append(" },");
            sb.Append(" exporting:  {  buttons:       {           contextButton:" +
               "{  menuItems: [   'printChart','separator','downloadPNG','downloadJPEG', 'downloadPDF', 'downloadSVG','separator'," +
               "      'downloadCSV', 'downloadXLS', 'viewData' ]  }  }},");
            sb.Append(" title:{ text: '" + title + "'}");
            sb.Append(" ,yAxis: {");
            sb.Append(" allowDecimals: false,min: 0,");
            sb.Append(" title: {text: '" + leftTitle + "'");
            if (threeD) sb.Append(", skew3d: true");
            sb.Append("}");
            sb.Append(" },");
            sb.Append("tooltip: {headerFormat: '<b>{point.key}</b><br>',");
            sb.Append("pointFormat: '<span>\u25CF</span> {series.name}: {point.y} / {point.stackTotal}'},");
            sb.Append("plotOptions: {");
            sb.Append("" + graphType + ": {");
            if (stacked) sb.Append("stacking: 'normal',");
            sb.Append(" depth: 40");
            sb.Append("},");
            sb.Append("series:{");
            sb.Append("cursor: 'pointer', point: {events:{ click: function(e){");
            sb.Append("alert('Category: ' + this.category + e.point.series.name + ', value: ' + this.y);");
            sb.Append("} } },");
            if (stacked) sb.Append("dataLabels: {enabled: true,format: '<b>{point.percentage:.1f}%</b>'}");
            else sb.Append("dataLabels: {enabled: true,format: '<b>{point.y:.1f}</b>'}");
            sb.Append("},},");
            string colData = "";
            string colHeader = "";
            string pieRmk = ",sliced: true, selected: true";
            if (graphType != "pie") pieRmk = "";
            sb.Append("series: [");
            if (!pivot)
            {
                colData = "";
                for (int i = 0; i < grDt.Rows.Count; i++)
                {
                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (!grDt.Columns[j].ColumnName.Trim().Equals("grp"))
                            {

                                if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                                else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                                if (colHeader.Length > 0) colHeader = colHeader + ", " + "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                                else colHeader = "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                            }
                        }
                    }

                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    else colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";

                }
            }
            else
            {
                colData = "";

                try
                {
                    DataColumn dc = new DataColumn("grp", typeof(string));
                    dc.DefaultValue = grDt.Columns[1].ColumnName;
                    grDt.Columns.Add(dc);
                }
                catch (Exception err) { }

                Pivot pvt = new Pivot(grDt, MyGuid);
                DataTable dataTable = pvt.PivotData(grDt.Columns[1].ColumnName, AggregateFunction.Sum, new string[] { "grp" }, new string[] { grDt.Columns[0].ColumnName });

                grDt = dataTable;
                for (int i = 0; i < grDt.Rows.Count; i++)
                {
                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (mq0.Length > 0) mq0 = mq0 + "," + Make_double(grDt.Rows[i][j].ToString()).ToString();
                            else mq0 = Make_double(grDt.Rows[i][j].ToString()).ToString();
                            if (colHeader.Length > 0) colHeader = colHeader + ", " + "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                            else colHeader = "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                        }
                    }

                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    else colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";

                }


            }

            sb.Append(colData);
            sb.Append("]");

            sb.Append(" ,xAxis: {");
            sb.Append(" categories: [" + colHeader + "],");
            sb.Append(" labels: {");
            if (threeD) sb.Append(" skew3d: true,");
            sb.Append(" style: {fontSize: '16px'}}}");
            sb.Append("});");
            sb.Append("});");
            sb.Append("</script>");
        }
        return sb.ToString();

    }
    public string FillChart_stacked(string userCode, string title, string graphType, DataTable data, string graphUnit, string graphDiv, string btnid, string bottomTitle, bool threeD, string leftTitle, bool stacked, bool pivot)
    {

        StringBuilder sb = new System.Text.StringBuilder();
        DataTable grDt = new DataTable();
        grDt = data;
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("Highcharts.chart('" + graphDiv + "', { ");
            sb.Append(" chart: {");

            sb.Append(" type: '" + graphType + "',");
            if (threeD) sb.Append(" options3d: {enabled: true,alpha: 15,beta: 15,viewDistance: 25,depth: 40}");
            sb.Append(" },");
            sb.Append(" exporting:  {  buttons:       {           contextButton:" +
               "{  menuItems: [   'printChart','separator','downloadPNG','downloadJPEG', 'downloadPDF', 'downloadSVG','separator'," +
               "      'downloadCSV', 'downloadXLS', 'viewData' ]  }  } },");
            sb.Append(" title:{ text: '" + title + "'}");
            sb.Append(" ,yAxis: {");
            sb.Append(" allowDecimals: false,min: 0,");
            sb.Append(" title: {text: '" + leftTitle + "'");
            if (threeD) sb.Append(", skew3d: true");
            sb.Append("}");
            sb.Append(" },");
            sb.Append("tooltip: {headerFormat: '<b>{point.key}</b><br>',");
            sb.Append("pointFormat: '<span>\u25CF</span> {series.name}: {point.y} / {point.stackTotal}'},");
            sb.Append("plotOptions: {");
            sb.Append("" + graphType + ": {");
            if (stacked) sb.Append("stacking: 'normal',");
            sb.Append(" depth: 40");
            sb.Append("},");
            sb.Append("series:{");
            sb.Append("cursor: 'pointer', point: {events:{ click: function(e){");
            sb.Append("alert('Category: ' + this.category + e.point.series.name + ', value: ' + this.y);");
            sb.Append("} } },");
            if (stacked) sb.Append("dataLabels: {enabled: true,format: '<b>{point.percentage:.1f}%</b>'}");
            else sb.Append("dataLabels: {enabled: true,format: '<b>{point.y:.1f}</b>'}");
            sb.Append("},},");
            string colData = "";
            string colHeader = "";
            string pieRmk = ",sliced: true, selected: true";
            if (graphType != "pie") pieRmk = "";
            sb.Append("series: [");
            if (!pivot)
            {
                colData = "";
                for (int i = 0; i < grDt.Rows.Count; i++)
                {
                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            if (colHeader.Length > 0) colHeader = colHeader + ", " + "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                            else colHeader = "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                        }
                    }

                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    else colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";

                }
            }
            else
            {
                colData = "";

                try
                {
                    DataColumn dc = new DataColumn("grp", typeof(string));
                    dc.DefaultValue = grDt.Columns[1].ColumnName;
                    grDt.Columns.Add(dc);
                }
                catch (Exception err) { }

                Pivot pvt = new Pivot(grDt, MyGuid);
                DataTable dataTable = pvt.PivotData(grDt.Columns[1].ColumnName, AggregateFunction.Sum, new string[] { "grp" }, new string[] { grDt.Columns[0].ColumnName });

                grDt = dataTable;
                for (int i = 0; i < grDt.Rows.Count; i++)
                {
                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (mq0.Length > 0) mq0 = mq0 + "," + Make_double(grDt.Rows[i][j].ToString()).ToString();
                            else mq0 = Make_double(grDt.Rows[i][j].ToString()).ToString();
                            if (colHeader.Length > 0) colHeader = colHeader + ", " + "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                            else colHeader = "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                        }
                    }

                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    else colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";

                }


            }

            sb.Append(colData);
            sb.Append("]");

            sb.Append(" ,xAxis: {");
            sb.Append(" categories: [" + colHeader + "],");
            sb.Append(" labels: {");
            if (threeD) sb.Append(" skew3d: true,");
            sb.Append(" style: {fontSize: '16px'}}}");
            sb.Append("});");
            sb.Append("});");
            sb.Append("</script>");
        }
        return sb.ToString();

    }


    //public string FillChart_pie(string userCode, string title, string graphType, string graphQuery, string graphUnit, string graphDiv, string btnid, string bottomTitle, bool threeD)
    //{
    //    StringBuilder sb = new System.Text.StringBuilder();

    //    DataTable grDt = new DataTable();
    //    grDt = getdata(userCode, graphQuery);
    //    if (grDt.Rows.Count > 0)
    //    {
    //        sb.Append(@"<script type='text/javascript'>");
    //        sb.Append("$(document).ready(function () {");
    //        sb.Append("Highcharts.chart('" + graphDiv + "', { ");
    //        sb.Append(" chart: {");
    //        sb.Append("     type: '" + graphType + "'");
    //        if (threeD) sb.Append(" , options3d: {enabled: true,alpha: 45,beta: 0 }");
    //        sb.Append(" },");
    //        sb.Append("  title: {text: '" + title + "'");
    //        sb.Append(" },");
    //        sb.Append("  tooltip: {");
    //        sb.Append("pointFormat: '{series.name}: <b>{point.y:.1f}</b> " + graphUnit + "'");
    //        sb.Append(" },");
    //        sb.Append(" plotOptions: {");
    //        sb.Append(" " + graphType + ": {");
    //        sb.Append("       allowPointSelect: true,");
    //        sb.Append("      cursor: 'pointer',");
    //        sb.Append("      depth: 35,");
    //        sb.Append("     showInLegend: true,");
    //        sb.Append("     dataLabels: {");
    //        sb.Append("        enabled: true,");
    //        sb.Append("        format: '{point.name} {point.y} ({point.percentage:.1f}%)'");
    //        sb.Append("   },");
    //        sb.Append("   point: {");
    //        sb.Append("         events: {");
    //        sb.Append("            click: function (e) { ");
    //        sb.Append("var rval=' " + btnid + "!~!~!' + this.name + '!~!~!'+ this.y;");
    //        sb.Append("chartclick(rval);");
    //        //sb.Append(" alert('Category: '+ this.name + ', value: ' + this.y);");
    //        sb.Append(" }  } }");
    //        sb.Append("}");
    //        sb.Append("},");
    //        sb.Append(" series: [{");
    //        sb.Append("type: '" + graphType + "',");
    //        sb.Append("name: '" + bottomTitle + "',");
    //        sb.Append(" data: [");
    //        string colData = "";
    //        string pieRmk = ",sliced: true, selected: true";
    //        if (graphType != "pie") pieRmk = "";
    //        if (grDt.Columns.Count <= 2)
    //        {

    //            foreach (DataRow dr in grDt.Rows)
    //            {
    //                if (colData.Length > 0) colData = colData + ", " + "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + " } ";
    //                else colData = "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + pieRmk + " } ";

    //            }
    //            sb.Append(colData);
    //        }
    //        sb.Append("] }]");
    //        sb.Append("});");
    //        sb.Append("});");
    //        sb.Append("</script>");
    //    }

    //    return sb.ToString();
    //}

    public string FillChart_pie(string userCode, string title, string graphType, string graphQuery, string graphUnit, string graphDiv, string btnid, string bottomTitle, bool threeD, string chartno, bool pivot)
    {
        StringBuilder sb = new System.Text.StringBuilder();

        DataTable grDt = new DataTable();
        if (HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] != null && !pivot)
        {
            grDt = (DataTable)HttpContext.Current.Session[MyGuid + "_CHART_" + chartno];
            if (grDt.Rows.Count < 1) grDt = getdata(userCode, graphQuery);
            HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] = grDt;
        }
        else
        {
            grDt = getdata(userCode, graphQuery);
            HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] = grDt;
        }
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("Highcharts.chart('" + graphDiv + "', { ");
            sb.Append(" chart: {");
            sb.Append("     type: '" + graphType + "'");
            if (threeD) sb.Append(" , options3d: {enabled: true,alpha: 45,beta: 0 }");
            sb.Append(" },");
            sb.Append("  title: {text: '" + title + "'");
            sb.Append(" },");
            sb.Append(" exporting:  {  buttons:       {           contextButton:" +
                "{  menuItems: [   'printChart','separator','downloadPNG','downloadJPEG', 'downloadPDF', 'downloadSVG','separator'," +
                "      'downloadCSV', 'downloadXLS', 'viewData' ]  }  }},");
            sb.Append("  tooltip: {");
            sb.Append("pointFormat: '{series.name}: <b>{point.y:.1f}</b> " + graphUnit + "'");
            sb.Append(" },");
            sb.Append(" plotOptions: {");
            sb.Append(" " + graphType + ": {");
            sb.Append("       allowPointSelect: true,");
            sb.Append("      cursor: 'pointer',");
            sb.Append("      depth: 35,");
            sb.Append("     showInLegend: true,");
            sb.Append("     dataLabels: { padding: 1,  style: {fontSize: '8'},");
            sb.Append("        enabled: true,");
            sb.Append("        format: '{point.name}, {point.y} ({point.percentage:.1f}%)'");
            sb.Append("   },");
            sb.Append("   point: {");
            sb.Append("         events: {");
            sb.Append("            click: function (e) { ");
            sb.Append("var rval=' " + btnid + "!~!~!' + this.name + '!~!~!'+ this.y;");
            sb.Append("chartclick(rval);");
            //sb.Append(" alert('Category: '+ this.name + ', value: ' + this.y);");
            sb.Append(" }  } }");
            sb.Append("}");
            sb.Append("},");
            sb.Append(" series: [{");
            sb.Append("type: '" + graphType + "',");
            sb.Append("name: '" + bottomTitle + "',");
            sb.Append(" data: [");
            string colData = "";
            string pieRmk = ",sliced: true, selected: true";
            if (graphType != "pie") pieRmk = "";
            if (grDt.Columns.Count <= 2)
            {

                foreach (DataRow dr in grDt.Rows)
                {
                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + " } ";
                    else colData = "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + pieRmk + " } ";

                }
                sb.Append(colData);
            }
            sb.Append("] }]");
            sb.Append("});");
            sb.Append("});");
            sb.Append("</script>");
        }

        return sb.ToString();
    }
    public string FillChart_pie(string userCode, string title, string graphType, DataTable dataTable, string graphUnit, string graphDiv, string btnid, string bottomTitle, bool threeD)
    {
        StringBuilder sb = new System.Text.StringBuilder();

        DataTable grDt = new DataTable();
        grDt = dataTable;
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("Highcharts.chart('" + graphDiv + "', { ");
            sb.Append(" chart: {");
            sb.Append("     type: '" + graphType + "'");
            if (threeD) sb.Append(" , options3d: {enabled: true,alpha: 45,beta: 0 }");
            sb.Append(" },");
            sb.Append(" exporting:  {  buttons:       {           contextButton:" +
               "{  menuItems: [   'printChart','separator','downloadPNG','downloadJPEG', 'downloadPDF', 'downloadSVG','separator'," +
               "      'downloadCSV', 'downloadXLS', 'viewData' ]  }  }},");
            sb.Append("  title: {text: '" + title + "'");
            sb.Append(" },");
            sb.Append("  tooltip: {");
            sb.Append("pointFormat: '{series.name}: <b>{point.y:.1f}</b> " + graphUnit + "'");
            sb.Append(" },");
            sb.Append(" plotOptions: {");
            sb.Append(" " + graphType + ": {");
            sb.Append("       allowPointSelect: true,");
            sb.Append("      cursor: 'pointer',");
            sb.Append("      depth: 35,");
            sb.Append("     showInLegend: true,");
            sb.Append("     dataLabels: { padding: 1,  style: {fontSize: '8'},");
            sb.Append("        enabled: true,");
            sb.Append("        format: '{point.name}, {point.y} ({point.percentage:.1f}%)'");
            sb.Append("   },");
            sb.Append("   point: {");
            sb.Append("         events: {");
            sb.Append("            click: function (e) { ");
            sb.Append("var rval=' " + btnid + "!~!~!' + this.name + '!~!~!'+ this.y;");
            sb.Append("chartclick(rval);");
            //sb.Append(" alert('Category: '+ this.name + ', value: ' + this.y);");
            sb.Append(" }  } }");
            sb.Append("}");
            sb.Append("},");
            sb.Append(" series: [{");
            sb.Append("type: '" + graphType + "',");
            sb.Append("name: '" + bottomTitle + "',");
            sb.Append(" data: [");
            string colData = "";
            string pieRmk = ",sliced: true, selected: true";
            if (graphType != "pie") pieRmk = "";
            if (grDt.Columns.Count <= 2)
            {

                foreach (DataRow dr in grDt.Rows)
                {
                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + " } ";
                    else colData = "{ name : '" + dr[0].ToString().Trim() + "', y : " + Convert.ToDouble(dr[1].ToString().Trim()) + pieRmk + " } ";

                }
                sb.Append(colData);
            }
            sb.Append("] }]");
            sb.Append("});");
            sb.Append("});");
            sb.Append("</script>");
        }

        return sb.ToString();
    }


    public string FillChart_line(string userCode, string title, string graphType, string graphQuery, string graphUnit, string graphDiv, string btnid, string bottomTitle, bool threeD, string leftTitle, bool pivot, string chartno)
    {

        StringBuilder sb = new System.Text.StringBuilder();
        DataTable grDt = new DataTable();
        if (HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] != null)
        {
            grDt = (DataTable)HttpContext.Current.Session[MyGuid + "_CHART_" + chartno];
            if (grDt.Rows.Count < 1) grDt = getdata(userCode, graphQuery);
            HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] = grDt;
        }
        else
        {
            grDt = getdata(userCode, graphQuery);
            HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] = grDt;
        }
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("Highcharts.chart('" + graphDiv + "', { ");
            sb.Append(" chart: {");

            sb.Append(" type: '" + graphType + "',");
            if (threeD) sb.Append(" options3d: {enabled: true,alpha: 15,beta: 15,viewDistance: 25,depth: 40}");
            sb.Append(" },");
            sb.Append(" exporting:  {  buttons:       {           contextButton:" +
               "{  menuItems: [   'printChart','separator','downloadPNG','downloadJPEG', 'downloadPDF', 'downloadSVG','separator'," +
               "      'downloadCSV', 'downloadXLS', 'viewData' ]  } } },");
            sb.Append(" title:{ text: '" + title + "'}");
            sb.Append(" ,yAxis: {");
            sb.Append(" title: {text: '" + leftTitle + "'");
            if (threeD) sb.Append(", skew3d: true");
            sb.Append("}");
            sb.Append(",labels: {formatter: function() {return this.value + '°'; }}");
            sb.Append(" },");
            sb.Append("tooltip: {crosshairs: true,shared: true},");
            sb.Append("plotOptions: {");
            sb.Append("" + graphType + ": {marker:{radius: 4,lineColor: '#666666',lineWidth: 1}");
            sb.Append("},");
            sb.Append("series:{");
            sb.Append("cursor: 'pointer', point: {events:{ click: function(e){");
            sb.Append("alert('Category: ' + this.category + e.point.series.name + ', value: ' + this.y);");
            sb.Append("} } },");

            sb.Append("dataLabels: {enabled: true,format: '<b>{point.y:.1f}</b>'}");
            sb.Append("},},");
            string colData = "";
            string colHeader = "";

            sb.Append("series: [");

            if (!pivot)
            {

                colData = "";
                for (int i = 0; i < grDt.Rows.Count; i++)
                {
                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (!grDt.Columns[j].ColumnName.Trim().Equals("grp"))
                        {

                            if (j > 0)
                            {
                                if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                                else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                                if (colHeader.Length > 0) colHeader = colHeader + ", " + "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                                else colHeader = "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                            }
                        }
                    }

                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    else colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";

                }
            }
            else
            {
                colData = "";

                try
                {
                    DataColumn dc = new DataColumn("grp", typeof(string));
                    dc.DefaultValue = grDt.Columns[1].ColumnName;
                    grDt.Columns.Add(dc);
                }
                catch (Exception err) { }

                Pivot pvt = new Pivot(grDt, MyGuid);
                DataTable dataTable = pvt.PivotData(grDt.Columns[1].ColumnName, AggregateFunction.Sum, new string[] { "grp" }, new string[] { grDt.Columns[0].ColumnName });

                grDt = dataTable;
                for (int i = 0; i < grDt.Rows.Count; i++)
                {
                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            if (colHeader.Length > 0) colHeader = colHeader + ", " + "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                            else colHeader = "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                        }
                    }

                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    else colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";

                }


            }

            sb.Append(colData);
            sb.Append("]");
            sb.Append(" ,xAxis: {");
            sb.Append(" categories: [" + colHeader + "],");
            sb.Append(" labels: {");
            if (threeD) sb.Append(" skew3d: true,");
            sb.Append(" style: {fontSize: '16px'}}}");
            sb.Append("});");
            sb.Append("});");
            sb.Append("</script>");
        }
        return sb.ToString();

    }
    public string FillChart_line(string userCode, string title, string graphType, DataTable data, string graphUnit, string graphDiv, string btnid, string bottomTitle, bool threeD, string leftTitle, bool pivot)
    {

        StringBuilder sb = new System.Text.StringBuilder();
        DataTable grDt = new DataTable();
        grDt = data;
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("Highcharts.chart('" + graphDiv + "', { ");
            sb.Append(" chart: {");

            sb.Append(" type: '" + graphType + "',");
            if (threeD) sb.Append(" options3d: {enabled: true,alpha: 15,beta: 15,viewDistance: 25,depth: 40}");
            sb.Append(" },");
            sb.Append(" exporting:  {  buttons:       {           contextButton:" +
               "{  menuItems: [   'printChart','separator','downloadPNG','downloadJPEG', 'downloadPDF', 'downloadSVG','separator'," +
               "      'downloadCSV', 'downloadXLS', 'viewData' ]  } } },");
            sb.Append(" title:{ text: '" + title + "'}");
            sb.Append(" ,yAxis: {");
            sb.Append(" title: {text: '" + leftTitle + "'");
            if (threeD) sb.Append(", skew3d: true");
            sb.Append("}");
            sb.Append(",labels: {formatter: function() {return this.value + '°'; }}");
            sb.Append(" },");
            sb.Append("tooltip: {crosshairs: true,shared: true},");
            sb.Append("plotOptions: {");
            sb.Append("" + graphType + ": {marker:{radius: 4,lineColor: '#666666',lineWidth: 1}");
            sb.Append("},");
            sb.Append("series:{");
            sb.Append("cursor: 'pointer', point: {events:{ click: function(e){");
            sb.Append("alert('Category: ' + this.category + e.point.series.name + ', value: ' + this.y);");
            sb.Append("} } },");

            sb.Append("dataLabels: {enabled: true,format: '<b>{point.y:.1f}</b>'}");
            sb.Append("},},");
            string colData = "";
            string colHeader = "";

            sb.Append("series: [");

            if (!pivot)
            {
                colData = "";
                for (int i = 0; i < grDt.Rows.Count; i++)
                {
                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            if (colHeader.Length > 0) colHeader = colHeader + ", " + "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                            else colHeader = "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                        }
                    }

                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    else colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";

                }
            }
            else
            {
                colData = "";

                DataColumn dc = new DataColumn("grp", typeof(string));
                dc.DefaultValue = grDt.Columns[1].ColumnName;
                grDt.Columns.Add(dc);

                Pivot pvt = new Pivot(grDt, MyGuid);
                DataTable dataTable = pvt.PivotData(grDt.Columns[1].ColumnName, AggregateFunction.Sum, new string[] { "grp" }, new string[] { grDt.Columns[0].ColumnName });

                grDt = dataTable;
                for (int i = 0; i < grDt.Rows.Count; i++)
                {
                    string mq0 = "";
                    for (int j = 0; j < grDt.Columns.Count; j++)
                    {
                        if (j > 0)
                        {
                            if (mq0.Length > 0) mq0 = mq0 + "," + Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            else mq0 = Convert.ToDouble(grDt.Rows[i][j].ToString()).ToString();
                            if (colHeader.Length > 0) colHeader = colHeader + ", " + "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                            else colHeader = "'" + ProperCase(grDt.Columns[j].ColumnName.ToString().Trim()) + "'";
                        }
                    }

                    if (colData.Length > 0) colData = colData + ", " + "{ name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";
                    else colData = " { name : '" + grDt.Rows[i][0].ToString().Trim() + "', data : [" + mq0 + "] } ";

                }


            }

            sb.Append(colData);
            sb.Append("]");
            sb.Append(" ,xAxis: {");
            sb.Append(" categories: [" + colHeader + "],");
            sb.Append(" labels: {");
            if (threeD) sb.Append(" skew3d: true,");
            sb.Append(" style: {fontSize: '16px'}}}");
            sb.Append("});");
            sb.Append("});");
            sb.Append("</script>");
        }
        return sb.ToString();

    }

    public string FillChart_meter(string userCode, string title, string graphQuery, int minval, int maxval, int greenmin, int greenmax, int yellomin, int yellomax, int redmin, int redmax, string graphUnit, string graphDiv, string btnid, string chartno)
    {

        StringBuilder sb = new System.Text.StringBuilder();
        DataTable grDt = new DataTable();
        if (HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] != null)
        {
            grDt = (DataTable)HttpContext.Current.Session[MyGuid + "_CHART_" + chartno];
            if (grDt.Rows.Count < 1) grDt = getdata(userCode, graphQuery);
            HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] = grDt;
        }
        else
        {
            grDt = getdata(userCode, graphQuery);
            HttpContext.Current.Session[MyGuid + "_CHART_" + chartno] = grDt;
        }
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("Highcharts.chart('" + graphDiv + "', { ");
            sb.Append(" chart: {type: 'gauge', plotBackgroundColor: null, plotBackgroundImage: null,plotBorderWidth: 0,plotShadow: false},");
            sb.Append(" exporting:  {  buttons:       {           contextButton:" +
               "{  menuItems: [   'printChart','separator','downloadPNG','downloadJPEG', 'downloadPDF', 'downloadSVG','separator'," +
               "      'downloadCSV', 'downloadXLS', 'viewData' ]  } } },");
            sb.Append(" title:{ text: '" + title + "'}");
            sb.Append(" , yAxis: { min: " + minval + ", max: " + maxval + ", minorTickInterval: 'auto',minorTickWidth: 1," +
                "minorTickLength: 10,minorTickPosition: 'inside',minorTickColor: '#666', tickPixelInterval: 30," +
                " tickWidth: 3, tickPosition: 'inside', tickLength: 10, tickColor: '#666', labels: { step: 2,rotation: 'auto'}," +
                "title: { text: '" + graphUnit + "' },plotBands: [{ from: " + greenmin + ", to: " + greenmax + ",color: '#55BF3B' }," +
                "{from: " + yellomin + ",  to: " + yellomax + ", color: '#DDDF0D' }, {from: " + redmin + ",to: " + redmax + ",color: '#DF5353' }]},");

            //sb.Append("series:{");
            //sb.Append("cursor: 'pointer', point: {events:{ click: function(e){");
            //sb.Append("alert('Category: ' + this.category + e.point.series.name + ', value: ' + this.y);");
            //sb.Append("} } },");

            //sb.Append("dataLabels: {enabled: true,format: '<b>{point.y:.1f}</b>'},");

            sb.Append("pane: {startAngle: -150, endAngle: 150, background: [{ backgroundColor: {linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, '#FFF'],[1, '#333'] ]  },  borderWidth: 0, outerRadius: '109%'}, { backgroundColor: {linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [ [0, '#333'], [1, '#FFF'] ]  },borderWidth: 1,outerRadius: '107%'}, {  }, { backgroundColor: '#DDD',borderWidth: 0, outerRadius: '105%',innerRadius: '103%'}]},");
            sb.Append("series: [{ name: 'Speed', data: [90], tooltip: { valueSuffix: ' " + graphUnit + "' } }]");
            sb.Append("});");
            sb.Append("});");
            sb.Append("</script>");
        }
        return sb.ToString();

    }
    public string FillChart_meter(string userCode, string title, DataTable data, int minval, int maxval, int greenmin, int greenmax, int yellomin, int yellomax, int redmin, int redmax, string graphUnit, string graphDiv, string btnid)
    {

        StringBuilder sb = new System.Text.StringBuilder();
        DataTable grDt = new DataTable();
        grDt = data;
        if (grDt.Rows.Count > 0)
        {
            sb.Append(@"<script type='text/javascript'>");
            sb.Append("$(document).ready(function () {");
            sb.Append("Highcharts.chart('" + graphDiv + "', { ");
            sb.Append(" chart: {type: 'gauge', plotBackgroundColor: null, plotBackgroundImage: null,plotBorderWidth: 0,plotShadow: false},");
            sb.Append(" exporting:  {  buttons:       {           contextButton:" +
               "{  menuItems: [   'printChart','separator','downloadPNG','downloadJPEG', 'downloadPDF', 'downloadSVG','separator'," +
               "      'downloadCSV', 'downloadXLS', 'viewData' ]  } } },");
            sb.Append(" title:{ text: '" + title + "'}");
            sb.Append(" , yAxis: { min: " + minval + ", max: " + maxval + ", minorTickInterval: 'auto',minorTickWidth: 1," +
                "minorTickLength: 10,minorTickPosition: 'inside',minorTickColor: '#666', tickPixelInterval: 30," +
                " tickWidth: 3, tickPosition: 'inside', tickLength: 10, tickColor: '#666', labels: { step: 2,rotation: 'auto'}," +
                "title: { text: '" + graphUnit + "' },plotBands: [{ from: " + greenmin + ", to: " + greenmax + ",color: '#55BF3B' }," +
                "{from: " + yellomin + ",  to: " + yellomax + ", color: '#DDDF0D' }, {from: " + redmin + ",to: " + redmax + ",color: '#DF5353' }]},");

            //sb.Append("series:{");
            //sb.Append("cursor: 'pointer', point: {events:{ click: function(e){");
            //sb.Append("alert('Category: ' + this.category + e.point.series.name + ', value: ' + this.y);");
            //sb.Append("} } },");

            //sb.Append("dataLabels: {enabled: true,format: '<b>{point.y:.1f}</b>'},");

            sb.Append("pane: {startAngle: -150, endAngle: 150, background: [{ backgroundColor: {linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, '#FFF'],[1, '#333'] ]  },  borderWidth: 0, outerRadius: '109%'}, { backgroundColor: {linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [ [0, '#333'], [1, '#FFF'] ]  },borderWidth: 1,outerRadius: '107%'}, {  }, { backgroundColor: '#DDD',borderWidth: 0, outerRadius: '105%',innerRadius: '103%'}]},");
            sb.Append("series: [{ name: 'Speed', data: [90], tooltip: { valueSuffix: ' " + graphUnit + "' } }]");
            sb.Append("});");
            sb.Append("});");
            sb.Append("</script>");
        }
        return sb.ToString();

    }

    public string ProperCase(string text)
    {
        try
        {
            CultureInfo culture_info = Thread.CurrentThread.CurrentCulture;
            TextInfo text_info = culture_info.TextInfo;
            return text_info.ToTitleCase(text);
        }
        catch (Exception err)
        {
            return text;
        }

    }

    public string LowerCase(string text)
    {
        try
        {
            CultureInfo culture_info = Thread.CurrentThread.CurrentCulture;
            TextInfo text_info = culture_info.TextInfo;
            return text_info.ToLower(text);
        }
        catch (Exception err) { return text; }
    }

    public string UpperCase(string text)
    {
        try
        {
            CultureInfo culture_info = Thread.CurrentThread.CurrentCulture;
            TextInfo text_info = culture_info.TextInfo;
            return text_info.ToUpper(text);
        }
        catch (Exception err) { return text; }
    }

    public string WordCase(string text)
    {
        try
        {
            CultureInfo culture_info = Thread.CurrentThread.CurrentCulture;
            TextInfo text_info = culture_info.TextInfo;
            return text_info.ToUpper(text[0].ToString()) + text_info.ToLower(text.Substring(1).Trim());
        }
        catch (Exception err) { return text; }
    }

    public string FindUrl(string pagename)
    {
        string url = "";
        pagename = pagename.ToLower();
        if (!pagename.EndsWith(".aspx")) pagename = pagename + ".aspx";
        string fullurl = "";
        try
        {
            fullurl = Directory.GetFiles(HttpRuntime.AppDomainAppPath, "*.aspx", SearchOption.AllDirectories).Where(element => element.ToLower().EndsWith(pagename)).ToList()[0].ToString().ToLower();
        }
        catch (Exception err)
        {
            showmsg(1, "Page Not Found", 1);
            return "";

        }
        var parts = fullurl.Replace(@"\", @"/").Split('/');
        bool start = false;
        string mq = "";
        foreach (var part in parts)
        {
            if (start || part.ToString().Trim().Equals("erp"))
            {
                start = true;
                if (mq.Trim().Equals("")) mq = mq + part;
                else mq = mq + "/" + part;

            }

        }
        url = mq;
        return url;
    }

    public void generateformats(string UserCode, string clientID)
    {

        DataTable dttime = getdata(UserCode, "Select dateformat,timeformat,timezone from company_profile where type='CP' and Company_profile_id='" + clientID + "'");
        dateformat = dttime.Rows[0]["dateformat"].ToString();
        timeformat = dttime.Rows[0]["timeformat"].ToString();
        timezone = dttime.Rows[0]["timezone"].ToString().Split('#')[0].ToString();
        if (dateformat.Contains("/")) sep = "/"; else if (dateformat.Contains(".")) sep = "."; else if (dateformat.Contains("-")) sep = "-";
        dateformat = dateformat.Replace(sep, "/");
        switch (dateformat)
        {
            case "dd/MM/yyyy":
                sqldateformat = "dd/MM/YYYY";
                break;
            case "dd/MMM/yyyy":
                sqldateformat = "DD/MON/YYYY";
                break;
            case "dd/MMMM/yyyy":
                sqldateformat = "dd/MONTH/yyyy";
                break;
            case "MM/dd/yyyy":
                sqldateformat = "MM/dd/yyyy";
                break;
            case "MMM/dd/yyyy":
                sqldateformat = "MON/dd/yyyy";
                break;
            case "MMMM/dd/yyyy":
                sqldateformat = "MONTH/Dd/YYYY";
                break;
            case "yyyy/dd/MM":
                sqldateformat = "yyyy/dd/MM";
                break;
            case "yyyy/dd/MMM":
                sqldateformat = "yyyy/dd/MON";
                break;
            case "yyyy/dd/MMMM":
                sqldateformat = "yyyy/dd/MONTH";
                break;
            case "yyyy/MM/dd":
                sqldateformat = "yyyy/MM/dd";
                break;
            case "yyyy/MMM/dd":
                sqldateformat = "yyyy/MON/dd";
                break;
            case "yyyy/MMMM/dd":
                sqldateformat = "yyyy/MONTH/dd";
                break;
        }
        dateformat = dateformat.Replace("/", sep);
        sqldateformat = sqldateformat.Replace("/", sep);

        switch (timeformat)
        {

            case "H:mm:ss":
                sqltimeformat = "HH24:MI:SS";
                break;
            case "h:mm:ss tt":
                sqltimeformat = "HH:MI:SS AM";
                break;
            case "H:mm":
                sqltimeformat = "HH24:MI";
                break;
            case "h:mm tt":
                sqltimeformat = "HH:MI AM";
                break;
        }

        datetimeformat = dateformat + " " + timeformat;
        sqldatetimeformat = sqldateformat + " " + sqltimeformat;

        SetCookie(MyGuid, "dateformat", dateformat);
        SetCookie(MyGuid, "sqldateformat", sqldateformat);
        SetCookie(MyGuid, "sqltimeformat", sqltimeformat);
        SetCookie(MyGuid, "timeformat", timeformat);
        SetCookie(MyGuid, "timezone", timezone);
        SetCookie(MyGuid, "datetimeformat", datetimeformat);
        SetCookie(MyGuid, "sqldatetimeformat", sqldatetimeformat);
        SetSession(MyGuid, "dateformat", dateformat);
        SetSession(MyGuid, "sqldateformat", sqldateformat);
        SetSession(MyGuid, "sqltimeformat", sqltimeformat);
        SetSession(MyGuid, "timeformat", timeformat);
        SetSession(MyGuid, "timezone", timezone);
        SetSession(MyGuid, "datetimeformat", datetimeformat);
        SetSession(MyGuid, "sqldatetimeformat", sqldatetimeformat);

        var currency = seekval(UserCode, "Select param1 from controls where type='CTL' and id='000006' and m_module3='-'", "param1");
        SetCookie(MyGuid, "currencyformat", currency);
        SetSession(MyGuid, "currencyformat", currency);

    }

    public string Savedate(string datestr, bool withtime)
    {
        string res = "";


        if (withtime)
        {
            try
            {
                datetimeformat = HttpContext.Current.Session[MyGuid + "_datetimeformat"].ToString();
            }
            catch (Exception err) { datetimeformat = GetCookie(MyGuid, "datetimeformat").ToString(); }
        }
        else
        {
            try
            {
                dateformat = HttpContext.Current.Session[MyGuid + "_dateformat"].ToString();
            }
            catch (Exception err) { dateformat = GetCookie(MyGuid, "dateformat").ToString(); }
        }

        res = SaveDate_dt(datestr, withtime).ToString("yyyy-MM-dd HH:mm:ss");

        return res;
    }

    public DateTime SaveDate_dt(string datestr, bool withtime)
    {

        string user = GetCookie(MyGuid, "userCode").ToString();
        double hh = 0, mm = 0;
        try { timezone = HttpContext.Current.Session[MyGuid + "_timezone"].ToString().Replace(":", "."); }
        catch (Exception err) { timezone = GetCookie(MyGuid, "timezone").ToString().Replace(":", "."); }

        if (!timezone.Trim().StartsWith("-"))
        {
            hh = -Convert.ToDouble(timezone.Trim().Remove(0, 1).Split('.')[0].ToString());
            mm = -Convert.ToDouble(timezone.Trim().Remove(0, 1).Split('.')[1].ToString());
        }
        else
        {
            hh = Convert.ToDouble(timezone.Trim().Remove(0, 1).Split('.')[0].ToString());
            mm = Convert.ToDouble(timezone.Trim().Remove(0, 1).Split('.')[1].ToString());
        }

        DateTime resdate = new DateTime();
        try
        {
            //if (withtime)
            //{

            //    resdate = DateTime.ParseExact(datestr, datetimeformat, CultureInfo.InvariantCulture).AddHours(hh).AddMinutes(mm);

            //}         
            //else
            //{
            //    resdate = DateTime.ParseExact(datestr, dateformat, CultureInfo.InvariantCulture).AddHours(hh).AddMinutes(mm);

            //}
            //resdate = resdate.AddHours(-(hh)).AddMinutes(-(mm));
            try
            {
                datestr.Split(' ')[1].ToString();
                resdate = DateTime.ParseExact(datestr, datetimeformat, CultureInfo.InvariantCulture).AddHours(hh).AddMinutes(mm);
            }
            catch (Exception err)
            {

                string[] srr = server_datetime_local(user).Split(' ');
                srr = srr.Skip(1).ToArray();
                datestr = datestr + " " + string.Join(" ", srr).ToString();
                resdate = DateTime.ParseExact(datestr, datetimeformat, CultureInfo.InvariantCulture).AddHours(hh).AddMinutes(mm);
            }


        }
        catch (Exception err)
        {
            resdate = DateTime.ParseExact(server_datetime_local(user), datetimeformat, CultureInfo.InvariantCulture).AddHours(hh).AddMinutes(mm);

        }
        finally
        {
            server_datetime_dt(user).ToString("dd/MM/yyyy");
        }
        return resdate;
    }


 
    public string GetSaveSqlDateFormat()
    {
        return "yyyy-MM-dd HH24:MI:ss";

    }
    public string Getdateformat()
    {
        try { return HttpContext.Current.Session[MyGuid + "_dateformat"].ToString(); }
        catch (Exception err) { return GetCookie(MyGuid, "dateformat").ToString(); }

    }
    public string Gettimeformat()
    {
        try { return HttpContext.Current.Session[MyGuid + "_timeformat"].ToString(); }
        catch (Exception err) { return GetCookie(MyGuid, "timeformat").ToString(); }

    }
    public string Getdatetimeformat()
    {
        try { return HttpContext.Current.Session[MyGuid + "_datetimeformat"].ToString(); }
        catch (Exception err) { return GetCookie(MyGuid, "datetimeformat").ToString(); }

    }
    public string Getsqldateformat()
    {

        try { return HttpContext.Current.Session[MyGuid + "_sqldateformat"].ToString(); }
        catch (Exception err) { return GetCookie(MyGuid, "sqldateformat").ToString(); }
    }
    public string Getsqltimeformat()
    {
        try { return HttpContext.Current.Session[MyGuid + "_sqltimeformat"].ToString(); }
        catch (Exception err) { return GetCookie(MyGuid, "sqltimeformat").ToString(); }


    }
    public string Getsqldatetimeformat()
    {
        try { return HttpContext.Current.Session[MyGuid + "_sqldatetimeformat"].ToString(); }
        catch (Exception err) { return GetCookie(MyGuid, "sqldatetimeformat").ToString(); }

    }
    public string getactualdateformat()
    {
        return "%Y-%d-%m";
    }
    public string Gettimezone()
    {
        try { return HttpContext.Current.Session[MyGuid + "_timezone"].ToString(); }
        catch (Exception err) { return GetCookie(MyGuid, "timezone").ToString(); }

    }

    public int Make_int(string val)
    {
        int res = 0;
        try { res = Convert.ToInt32(Convert.ToDecimal(val)); }
        catch (Exception err) { }
        return res;
    }
    public double Make_double(string val)
    {
        double res = 0;
        try { res = Convert.ToDouble(val); }
        catch (Exception err) { }
        return res;
    }
    public decimal Make_decimal(string val)
    {
        decimal res = 0;
        try { res = Convert.ToDecimal(val); }
        catch (Exception err) { }
        return res;
    }
    public decimal Make_decimal(object val)
    {
        decimal res = 0;
        try { res = Convert.ToDecimal(val); }
        catch (Exception err) { }
        return res;
    }



    public bool DateBetween(DateTime date, DateTime datePast, DateTime dateFuture)
    {

        if (datePast <= date && date <= dateFuture) return true;
        else return false;

    }
    //alter table STUDENT_RECEIPT_DETAIL add Ref_no varchar(15);



    public string Fee_AllData(string clientid_mst, string unitid_mst, string Ac_Year_id, string mq3)
    {



        // Copy on 18.02.2020
        //mq = "select fstr, Class_name Class, Section, Student_Name, " +
        //   "Father_Name,Mother_Name , to_number(sum(Standard_Amount)) Std_Amt_WOT,to_number(sum(Actual_Amount)) Act_Amt_WT, " +
        //   "to_number(sum(Due_Amount)) Due_Amt_WT,to_number(max(rcpt_due)) as Rcpt_Agt_Due,to_number(max(Conc_due)) as Conc_Agt_Due, " +
        //   "to_number(sum(Due_Amount) - max(rcpt_due) - max(Conc_due)) Due_Bal_Amt,to_number(max(receipt_amount)) as Tot_Rcpt  , " +
        //   "to_number(max(Conc_amount)) as Tot_Conc_Amt,to_number(sum(Actual_Amount) - max(receipt_amount) - max(Conc_amount)) Net_Bal_Amt, " +
        //   "max(Family_ID) Family_ID,max(Family_name) Family_name, max(phoneno) as phoneno,max(email_id) as email_id,StudentType, Gender, " +
        //   "Reg_Number,Roll_Number ,Status,GROUP_CONCAT(DISTINCT heads) Fee_Heads,max(addr) as Address ,max(haveTransport) Transport," +
        //   "max(Pic_Point) Pic_Point ,max(Drop_Point) Drop_Point from( select " + mq3 + " as fstr,(case when max(b.havetransport) = '0' then 'SELF' else max(b.havetransport) end)" +
        //   " as havetransport,nvl(  (select master_name from master_setting pc where pc.type = 'LOC' and pc.master_id = " +
        //   " (b.pick_point)and pc.client_unit_id = b.client_unit_id and rownum=1),'-') as Pic_Point ,nvl((select master_name from master_setting pc" +
        //   " where pc.type = 'LOC'  and pc.client_unit_id = b.client_unit_id and pc.master_id = (b.drop_point) and rownum=1),'-')  as Drop_Point, " +
        //   " (case when max(a.cur_address)= '0' then ' ' else max(a.cur_address) end || ',' ||  nvl((select(v_name || ',' || district_name || ','" +
        //   " || state_name) from country_state  where type = 'CSV'  and client_unit_id = b.client_unit_id and  v_id = (a.cur_village) and rownum=1),'-') ) " +
        //   " as Addr ,a.sibling1_rollno as Family_ID,(select (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || " +
        //   " replace(a.LAST_NAME, '0', '')) as name from user_details e where a.sibling1_rollno = e.regnumber and e.type = b.type  and " +
        //   "e.client_unit_id = b.client_unit_id and rownum=1 ) as Family_name, b.section as section_id, c.Class as Class_Name, nvl(d.master_name, '-') as Section," +
        //   " (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || replace(a.LAST_NAME, '0', '')) as Student_Name," +
        //   "(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' || replace(a.f_lastname, '0', '')) as Father_Name," +
        //   "(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' || replace(a.m_lastname, '0', '')) as Mother_Name " +
        //   ",nvl(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M' THEN a.m_email WHEN a.default_emailid = 'G'" +
        //   " THEN a.g_email END, '-') as Email_Id , nvl(CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M'" +
        //   " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number END, '-') as PhoneNo, sum(fd.std_amount) Standard_Amount, " +
        //   "(case when sum(sf.fee_amount) is null then(case when sum(fd.Fee_Amount) is null then 0 else sum(fd.Fee_Amount) + " +
        //   "(case when fd.due_date > 0 and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
        //   "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, " +
        //   "classid, client_id, client_unit_id, master_name from master_setting where type = 'LCL') t where t.client_id = b.client_id " +
        //   "and t.client_unit_id = b.client_unit_id and t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point))" +
        //   " else 0 end)  end) else sum(sf.fee_amount) end)  Actual_Amount, nvl((case when sf.due_dt is not null then(case when sf.due_dt <= UTC_TIMESTAMP() " +
        //   " then sum(sf.fee_amount) else 0 end)  else  (case when fd.due_dt is not null and fd.due_dt <= UTC_TIMESTAMP() then" +
        //   " sum(fd.fee_amount) + (case when fd.due_date > 0  and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
        //   "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, classid, client_id, client_unit_id, " +
        //   " master_name from master_setting where type = 'LCL') t where t.client_id = b.client_id and t.client_unit_id = b.client_unit_id and " +
        //   "t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point)) else 0 end)  else 0 end) end ),0) as Due_Amount," +
        //   "nvl(max(fr.receipt_amount), 0) receipt_amount, nvl(max(fr.rcpt_due), 0) rcpt_due,nvl(max(fr.Conc_amount), 0) Conc_amount,nvl(max(fr.Conc_due), 0) " +
        //   " Conc_due, b.CLASS_APPLIED,b.StudentType,a.GENDER as Gender,a.RegNumber as Reg_Number,nvl(b.Roll_number, '-') as Roll_Number , " +
        //   "(CASE when a.status = 'active' THEN 'Active'  when a.status = '' THEN 'Active' when a.status = 'inactive' THEN 'Inactive' end ) as Status, " +
        //   "(h.master_name) as heads from student_detail b  left  join fees_detail fd on b.class_applied = fd.class_id and fd.academic_year_id" +
        //   " = b.academic_year_id  and fd.type = 'STR' and(fd.feetype_id || fd.FeeHead_Id) != '001001' " +
        //   "and fd.client_id=b.client_id and fd.client_unit_id=b.client_unit_id  inner join master_setting h" +
        //   " on(fd.feetype_id || fd.FeeHead_Id) = (h.sectionid || h.master_id) and h.type = 'EFH' and fd.client_id = h.client_id and " +
        //   " fd.client_unit_id = h.client_unit_id and h.master_type = 'Education Fees Head' and h.section_strength  in ('B', (case when upper(b.studenttype) " +
        //   " = 'NEW' THEN 'N' else 'O' end)) inner join user_details a on b.reg_no = a.regnumber and a.type = b.type  and a.rec_id = b.vch_num " +
        //   "  inner join add_class c on b.class_applied = c.add_class_id and c.type = 'EAC' and b.client_id = c.client_id and b.client_unit_id = " +
        //   "c.client_unit_id  left join master_setting d on b.section = d.master_id and d.type = 'ECS' and b.client_id = d.client_id and " +
        //   "b.client_unit_id = d.client_unit_id   left outer join fees_detail sf on  b.class_applied = sf.class_id and sf.academic_year_id =" +
        //   " b.academic_year_id and sf.type = 'STD' and sf.regno = b.reg_no and sf.FeeHead_Id = fd.FeeHead_Id and sf.feetype_id = fd.feetype_id" +
        //   " and sf.monthname = fd.monthname and sf.client_id=b.client_id and sf.client_unit_id=b.client_unit_id" +
        //   " left outer join ( select sum(receipt_amount) as receipt_amount, sum(rcpt_due) rcpt_due, sum(Conc_amount) as" +
        //   " Conc_amount, sum(Conc_due) as Conc_due, class_id, academic_year_id, regno, client_id, client_unit_id from ( select(case when type = 'ERD' then " +
        //   "sum(receipt_amount) else 0 end) as receipt_amount, (case when type = 'ERD' and duedt <= UTC_TIMESTAMP() then sum(receipt_amount) else 0 end)" +
        //   " as rcpt_due, (case when type in ('ERC', 'ERW') then sum(receipt_amount) else 0 end) as Conc_amount,(case when type in ('ERC', 'ERW') " +
        //   "and duedt <= UTC_TIMESTAMP() then sum(receipt_amount) else 0 end) as Conc_due ,class_id, academic_year_id, regno, client_id, client_unit_id " +
        //   "from student_receipt_detail where type in ('ERD', 'ERC', 'ERW') and client_unit_id = '" + unitid_mst + "'" +
        //   " and academic_year_id = '" + Ac_Year_id + "'  group by class_id, academic_year_id, regno, client_id, client_unit_id,Receipt_Date,type,duedt ) " +
        //   " ft group by class_id, academic_year_id, regno, client_id, client_unit_id )  fr on  b.class_applied = fr.class_id and " +
        //   " fr.academic_year_id = b.academic_year_id  and  fr.regno = b.reg_no and fr.client_id = b.client_id and fr.client_unit_id = b.client_unit_id " +
        //   " WHERE b.Academic_year_Id = '" + Ac_Year_id + "' and b.type = 'STD' and b.client_unit_id = '" + unitid_mst + "'" +
        //   " GROUP by " + mq3 + ", b.CLASS_APPLIED,b.StudentType," +
        //   " c.Class, nvl(d.master_name, '-'), (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' ||replace(a.LAST_NAME, '0', ''))" +
        //   "  ,(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' ||replace(a.f_lastname, '0', ''))" +
        //   "  ,(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' ||replace(a.m_lastname, '0', ''))" +
        //   ",a.GENDER,a.RegNumber ,nvl(b.Roll_number, '-') , (CASE when a.status = 'active' THEN 'Active' " +
        //   " when a.status = '' THEN 'Active' when a.status = 'inactive' THEN 'Inactive' end ),sf.due_dt,fd.due_dt,(fd.feetype_id || fd.FeeHead_Id), " +
        //   "a.sibling1_rollno,b.section,nvl(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M'  THEN a.m_email" +
        //   " WHEN a.default_emailid = 'G' THEN a.g_email END, '-'),nvl(CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M' " +
        //   " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number END, '-'),fd.due_date,h.master_name,b.pick_point,b.client_unit_id,b.drop_point," +
        //   "a.cur_village,b.type,b.client_id ) a group by fstr, Class_Name, Section, Student_Name, Father_Name,Mother_name, CLASS_APPLIED, StudentType, Gender," +
        //   " Reg_Number, Roll_Number, Status, section_id";

        // 10.04.2020
        // select student on regular fee
        //mq = "select fstr,  Class_name Class,Section , Student_Name, " +
        //    "Father_Name,Mother_Name , to_number(sum(Standard_Amount)) Std_Amt_WOT,to_number(sum(Actual_Amount)) Act_Amt_WT, " +
        //    "to_number(sum(Due_Amount)) Due_Amt_WT,to_number(max(rcpt_due)) as Rcpt_Agt_Due,to_number(max(Conc_due)) as Conc_Agt_Due, " +
        //    "to_number(sum(Due_Amount) - max(rcpt_due) - max(Conc_due)) Due_Bal_Amt,to_number(max(receipt_amount)) as Tot_Rcpt  , " +
        //    "to_number(max(Conc_amount)) as Tot_Conc_Amt,to_number(sum(Actual_Amount) - max(receipt_amount) - max(Conc_amount)) Net_Bal_Amt, " +
        //    "max(Family_ID) Family_ID,max(Family_name) Family_name, max(phoneno) as phoneno,max(email_id) as email_id,StudentType, Gender, " +
        //    "Reg_Number,Roll_Number ,Status,GROUP_CONCAT(DISTINCT heads) Fee_Heads,max(addr) as Address ,max(haveTransport) Transport," +
        //    "max(Pic_Point) Pic_Point ,max(Drop_Point) Drop_Point, CLASS_APPLIED as classid ,section_id from( select " + mq3 + " as fstr,(case when max(b.havetransport) = '0' then 'SELF' else max(b.havetransport) end)" +
        //    " as havetransport,nvl(  (select master_name from master_setting pc where pc.type = 'LOC' and pc.master_id = " +
        //    " (b.pick_point)and pc.client_unit_id = b.client_unit_id and rownum=1),'-') as Pic_Point ,nvl((select master_name from master_setting pc" +
        //    " where pc.type = 'LOC'  and pc.client_unit_id = b.client_unit_id and pc.master_id = (b.drop_point) and rownum=1),'-')  as Drop_Point, " +
        //    " (case when max(a.cur_address)= '0' then ' ' else max(a.cur_address) end || ',' ||  nvl((select(v_name || ',' || district_name || ','" +
        //    " || state_name) from country_state  where type = 'CSV'  and client_unit_id = b.client_unit_id and  v_id = (a.cur_village) and rownum=1),'-') ) " +
        //    " as Addr ,a.sibling1_rollno as Family_ID,(select (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || " +
        //    " replace(a.LAST_NAME, '0', '')) as name from user_details e where a.sibling1_rollno = e.regnumber and e.type = b.type  and " +
        //    "e.client_unit_id = b.client_unit_id and rownum=1 ) as Family_name, b.section as section_id, c.Class as Class_Name, nvl(d.master_name, '-') as Section," +
        //    " (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || replace(a.LAST_NAME, '0', '')) as Student_Name," +
        //    "(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' || replace(a.f_lastname, '0', '')) as Father_Name," +
        //    "(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' || replace(a.m_lastname, '0', '')) as Mother_Name " +
        //    ",nvl(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M' THEN a.m_email WHEN a.default_emailid = 'G'" +
        //    " THEN a.g_email END, '-') as Email_Id , nvl(CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M'" +
        //    " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number END, '-') as PhoneNo, sum(fd.std_amount) Standard_Amount, " +
        //    "(case when sum(sf.fee_amount) is null then(case when sum(fd.Fee_Amount) is null then 0 else sum(fd.Fee_Amount) + " +
        //    "(case when fd.due_date > 0 and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
        //    "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, " +
        //    "classid, client_id, client_unit_id, master_name from master_setting where type = 'LCL') t where  " +
        //    " t.client_unit_id = b.client_unit_id and t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point))" +
        //    " else 0 end)  end) else sum(sf.fee_amount) end)  Actual_Amount, nvl((case when sf.due_dt is not null then(case when sf.due_dt <= UTC_TIMESTAMP() " +
        //    " then sum(sf.fee_amount) else 0 end)  else  (case when fd.due_dt is not null and fd.due_dt <= UTC_TIMESTAMP() then" +
        //    " sum(fd.fee_amount) + (case when fd.due_date > 0  and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
        //    "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, classid, client_id, client_unit_id, " +
        //    " master_name from master_setting where type = 'LCL') t where  t.client_unit_id = b.client_unit_id and " +
        //    "t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point)) else 0 end)  else 0 end) end ),0) as Due_Amount," +
        //    "nvl(max(fr.receipt_amount), 0) receipt_amount, nvl(max(fr.rcpt_due), 0) rcpt_due,nvl(max(fr.Conc_amount), 0) Conc_amount,nvl(max(fr.Conc_due), 0) " +
        //    " Conc_due, b.CLASS_APPLIED,b.StudentType,a.GENDER as Gender,a.RegNumber as Reg_Number,nvl(b.Roll_number, '-') as Roll_Number , " +
        //    "(CASE when a.status = 'active' THEN 'Active'  when a.status = '' THEN 'Active' when a.status = 'inactive' THEN 'Inactive' end ) as Status, " +
        //    "(h.master_name) as heads from student_detail b  left  join fees_detail fd on b.class_applied = fd.class_id and fd.academic_year_id" +
        //    " = b.academic_year_id  and fd.type = 'STR' and(fd.feetype_id || fd.FeeHead_Id) != '001001' " +
        //    "and  fd.client_unit_id=b.client_unit_id  inner join master_setting h" +
        //    " on(fd.feetype_id || fd.FeeHead_Id) = (h.sectionid || h.master_id) and h.type = 'EFH' and " +
        //    " fd.client_unit_id = h.client_unit_id and h.master_type = 'Education Fees Head' and h.section_strength  in ('B', (case when upper(b.studenttype) " +
        //    " = 'NEW' THEN 'N' else 'O' end)) inner join user_details a on b.reg_no = a.regnumber and a.type = b.type  and a.vch_num = b.vch_num " +
        //    "  inner join add_class c on b.class_applied = c.add_class_id and c.type = 'EAC' and  b.client_unit_id = " +
        //    "c.client_unit_id  left join master_setting d on b.section = d.master_id and d.type = 'ECS'  and " +
        //    "find_in_set(b.client_unit_id,d.client_unit_id)=1   left outer join fees_detail sf on  b.class_applied = sf.class_id and sf.academic_year_id =" +
        //    " b.academic_year_id and sf.type = 'STD' and sf.regno = b.reg_no and sf.FeeHead_Id = fd.FeeHead_Id and sf.feetype_id = fd.feetype_id" +
        //    " and sf.monthname = fd.monthname and sf.client_unit_id=b.client_unit_id" +
        //    " left outer join ( select sum(receipt_amount) as receipt_amount, sum(rcpt_due) rcpt_due, sum(Conc_amount) as" +
        //    " Conc_amount, sum(Conc_due) as Conc_due, class_id, academic_year_id, regno, client_id, client_unit_id from ( select(case when type = 'ERD' then " +
        //    "sum(receipt_amount) else 0 end) as receipt_amount, (case when type = 'ERD' and duedt <= UTC_TIMESTAMP() then sum(receipt_amount) else 0 end)" +
        //    " as rcpt_due, (case when type in ('ERC', 'ERW') then sum(receipt_amount) else 0 end) as Conc_amount,(case when type in ('ERC', 'ERW') " +
        //    "and duedt <= UTC_TIMESTAMP() then sum(receipt_amount) else 0 end) as Conc_due ,class_id, academic_year_id, regno, client_id, client_unit_id " +
        //    "from student_receipt_detail where type in ('ERD', 'ERC', 'ERW') and client_id = '" + clientid_mst + "' and client_unit_id = '" + unitid_mst + "'" +
        //    " and academic_year_id = '" + Ac_Year_id + "'  group by class_id, academic_year_id, regno, client_id, client_unit_id,Receipt_Date,type,duedt ) " +
        //    " ft group by class_id, academic_year_id, regno, client_id, client_unit_id )  fr on  b.class_applied = fr.class_id and " +
        //    " fr.academic_year_id = b.academic_year_id  and  fr.regno = b.reg_no and fr.client_unit_id = b.client_unit_id " +
        //    " WHERE b.Academic_year_Id = '" + Ac_Year_id + "' and b.type = 'STD' and  b.client_unit_id = '" + unitid_mst + "'" +
        //    " GROUP by " + mq3 + ", b.CLASS_APPLIED,b.StudentType," +
        //    " c.Class, nvl(d.master_name, '-'), (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' ||replace(a.LAST_NAME, '0', ''))" +
        //    "  ,(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' ||replace(a.f_lastname, '0', ''))" +
        //    "  ,(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' ||replace(a.m_lastname, '0', ''))" +
        //    ",a.GENDER,a.RegNumber ,nvl(b.Roll_number, '-') , (CASE when a.status = 'active' THEN 'Active' " +
        //    " when a.status = '' THEN 'Active' when a.status = 'inactive' THEN 'Inactive' end ),sf.due_dt,fd.due_dt,(fd.feetype_id || fd.FeeHead_Id), " +
        //    "a.sibling1_rollno,b.section,nvl(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M'  THEN a.m_email" +
        //    " WHEN a.default_emailid = 'G' THEN a.g_email END, '-'),nvl(CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M' " +
        //    " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number END, '-'),fd.due_date,h.master_name,b.pick_point,b.client_unit_id,b.drop_point," +
        //    "a.cur_village,b.type,b.client_id ) a group by fstr, Class_Name, Section, Student_Name, Father_Name,Mother_name, CLASS_APPLIED, StudentType, Gender," +
        //    " Reg_Number, Roll_Number, Status, section_id";

        // select student on regular fee
        mq = "select fstr,  Class_name Class,Section , Student_Name, " +
            "Father_Name,Mother_Name , to_number(sum(Standard_Amount)) Std_Amt_WOT,to_number(sum(Actual_Amount)) Act_Amt_WT, " +
            "to_number(sum(Due_Amount)) Due_Amt_WT,to_number(max(rcpt_due)) as Rcpt_Agt_Due,to_number(max(Conc_due)) as Conc_Agt_Due, " +
            "to_number(sum(Due_Amount) - max(rcpt_due) - max(Conc_due)) Due_Bal_Amt,to_number(max(receipt_amount)) as Tot_Rcpt  , " +
            "to_number(max(Conc_amount)) as Tot_Conc_Amt,to_number(sum(Actual_Amount) - max(receipt_amount) - max(Conc_amount)) Net_Bal_Amt, " +
            "max(Family_ID) Family_ID,max(Family_name) Family_name, max(phoneno) as phoneno,max(email_id) as email_id,StudentType, Gender, " +
            "Reg_Number,Roll_Number ,Status,GROUP_CONCAT(DISTINCT heads) Fee_Heads,max(addr) as Address ,max(haveTransport) Transport," +
            "max(Pic_Point) Pic_Point ,max(Drop_Point) Drop_Point, CLASS_APPLIED as classid ,section_id from( select " + mq3 + " as fstr,(case when max(b.havetransport) = '0' then 'SELF' else max(b.havetransport) end)" +
            " as havetransport,nvl(  (select master_name from master_setting pc where pc.type = 'LOC' and pc.master_id = " +
            " (b.pick_point)and pc.client_unit_id = b.client_unit_id and rownum=1),'-') as Pic_Point ,nvl((select master_name from master_setting pc" +
            " where pc.type = 'LOC'  and pc.client_unit_id = b.client_unit_id and pc.master_id = (b.drop_point) and rownum=1),'-')  as Drop_Point, " +
            " (case when max(a.cur_address)= '0' then ' ' else max(a.cur_address) end || ',' ||  nvl((select(v_name || ',' || district_name || ','" +
            " || state_name) from country_state  where type = 'CSV'  and client_unit_id = b.client_unit_id and  v_id = (a.cur_village) and rownum=1),'-') ) " +
            " as Addr ,a.sibling1_rollno as Family_ID,(select (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || " +
            " replace(a.LAST_NAME, '0', '')) as name from user_details e where a.sibling1_rollno = e.regnumber and e.type = b.type  and " +
            "e.client_unit_id = b.client_unit_id and rownum=1 ) as Family_name, b.section as section_id, c.Class as Class_Name, nvl(d.master_name, '-') as Section," +
            " (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || replace(a.LAST_NAME, '0', '')) as Student_Name," +
            "(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' || replace(a.f_lastname, '0', '')) as Father_Name," +
            "(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' || replace(a.m_lastname, '0', '')) as Mother_Name " +
            ",(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M' THEN a.m_email WHEN a.default_emailid = 'G'" +
            " THEN a.g_email else '-' END) as Email_Id , (CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M'" +
            " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number else '-' END) as PhoneNo, sum(fd.std_amount) Standard_Amount, " +
            "(case when sum(sf.fee_amount) is null then(case when sum(fd.Fee_Amount) is null then 0 else sum(fd.Fee_Amount) + " +
            "(case when fd.due_date > 0 and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
            "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, " +
            "classid, client_id, client_unit_id, master_name from master_setting where type = 'LCL') t where  " +
            " t.client_unit_id = b.client_unit_id and t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point))" +
            " else 0 end)  end) else sum(sf.fee_amount) end)  Actual_Amount, nvl((case when sf.due_dt is not null then(case when sf.due_dt <= UTC_TIMESTAMP() " +
            " then sum(sf.fee_amount) else 0 end)  else  (case when fd.due_dt is not null and fd.due_dt <= UTC_TIMESTAMP() then" +
            " sum(fd.fee_amount) + (case when fd.due_date > 0  and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
            "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, classid, client_id, client_unit_id, " +
            " master_name from master_setting where type = 'LCL') t where  t.client_unit_id = b.client_unit_id and " +
            "t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point)) else 0 end)  else 0 end) end ),0) as Due_Amount," +
            "nvl(max(fr.receipt_amount), 0) receipt_amount, nvl(max(fr.rcpt_due), 0) rcpt_due,nvl(max(fr.Conc_amount), 0) Conc_amount,nvl(max(fr.Conc_due), 0) " +
            " Conc_due, b.CLASS_APPLIED,b.StudentType,a.GENDER as Gender,a.RegNumber as Reg_Number,nvl(b.Roll_number, '-') as Roll_Number , " +
            "(CASE when a.status = 'active' THEN 'Active'  when a.status = '' THEN 'Active' else 'Inactive' end ) as Status, " +
            "(h.master_name) as heads from student_detail b  left  join fees_detail fd on b.class_applied = fd.class_id and fd.academic_year_id" +
            " = b.academic_year_id  and fd.type = 'STR' and(fd.feetype_id || fd.FeeHead_Id) != '001001' " +
            "and  fd.client_unit_id=b.client_unit_id  inner join master_setting h" +
            " on(fd.feetype_id || fd.FeeHead_Id) = (h.sectionid || h.master_id) and h.type = 'EFH' and " +
            " fd.client_unit_id = h.client_unit_id and h.master_type = 'Education Fees Head' and h.section_strength  in ('B', (case when upper(b.studenttype) " +
            " = 'NEW' THEN 'N' else 'O' end)) inner join user_details a on b.reg_no = a.regnumber and a.type = b.type  and a.vch_num = b.vch_num " +
            "  inner join add_class c on b.class_applied = c.add_class_id and c.type = 'EAC' and  b.client_unit_id = " +
            "c.client_unit_id  left join master_setting d on b.section = d.master_id and d.type = 'ECS'  and " +
            "find_in_set(b.client_unit_id,d.client_unit_id)=1   left outer join fees_detail sf on  b.class_applied = sf.class_id and sf.academic_year_id =" +
            " b.academic_year_id and sf.type = 'STD' and sf.regno = b.reg_no and sf.FeeHead_Id = fd.FeeHead_Id and sf.feetype_id = fd.feetype_id" +
            " and sf.monthname = fd.monthname and sf.client_unit_id=b.client_unit_id" +
            " left outer join ( select sum(receipt_amount) as receipt_amount, sum(rcpt_due) rcpt_due, sum(Conc_amount) as" +
            " Conc_amount, sum(Conc_due) as Conc_due, class_id, academic_year_id, regno, client_id, client_unit_id from ( select(case when type = 'ERD' then " +
            "sum(receipt_amount) else 0 end) as receipt_amount, (case when type = 'ERD' and duedt <= UTC_TIMESTAMP() then sum(receipt_amount) else 0 end)" +
            " as rcpt_due, (case when type in ('ERC', 'ERW') then sum(receipt_amount) else 0 end) as Conc_amount,(case when type in ('ERC', 'ERW') " +
            "and duedt <= UTC_TIMESTAMP() then sum(receipt_amount) else 0 end) as Conc_due ,class_id, academic_year_id, regno, client_id, client_unit_id " +
            "from student_receipt_detail where type in ('ERD', 'ERC', 'ERW') and client_unit_id = '" + unitid_mst + "'" +
            " and academic_year_id = '" + Ac_Year_id + "'  group by class_id, academic_year_id, regno, client_id, client_unit_id,Receipt_Date,type,duedt ) " +
            " ft group by class_id, academic_year_id, regno, client_id, client_unit_id )  fr on  b.class_applied = fr.class_id and " +
            " fr.academic_year_id = b.academic_year_id  and  fr.regno = b.reg_no and fr.client_unit_id = b.client_unit_id " +
            " WHERE b.Academic_year_Id = '" + Ac_Year_id + "' and b.type = 'STD' and  b.client_unit_id = '" + unitid_mst + "'" +
            " GROUP by " + mq3 + ", b.CLASS_APPLIED,b.StudentType," +
            " c.Class, nvl(d.master_name, '-'), (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' ||replace(a.LAST_NAME, '0', ''))" +
            "  ,(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' ||replace(a.f_lastname, '0', ''))" +
            "  ,(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' ||replace(a.m_lastname, '0', ''))" +
            ",a.GENDER,a.RegNumber ,nvl(b.Roll_number, '-') , (CASE when a.status = 'active' THEN 'Active' " +
            " when a.status = '' THEN 'Active' else 'Inactive' end),sf.due_dt,fd.due_dt,(fd.feetype_id || fd.FeeHead_Id), " +
            "a.sibling1_rollno,b.section,(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M'  THEN a.m_email" +
            " WHEN a.default_emailid = 'G' THEN a.g_email else '-' END), (CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M' " +
            " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number else '-' END),fd.due_date,h.master_name,b.pick_point,b.client_unit_id,b.drop_point," +
            "a.cur_village,b.type,b.client_id ) a group by fstr, Class_Name, Section, Student_Name, Father_Name,Mother_name, CLASS_APPLIED, StudentType, Gender," +
            " Reg_Number, Roll_Number, Status, section_id";




        return mq;

    }
    public string Fee_AllData_new(string clientid_mst, string unitid_mst, string Ac_Year_id, string mq3, string dateon, string classid, string regno)
    {

        mq = "select fstr,  Class_name Class,Section , Student_Name, " +
            "Father_Name,Mother_Name , to_number(sum(Standard_Amount)) Std_Amt_WOT,to_number(sum(Actual_Amount)) Act_Amt_WT, " +
            "to_number(sum(Due_Amount)) Due_Amt_WT,to_number(max(rcpt_due)) as Rcpt_Agt_Due,to_number(max(Conc_due)) as Conc_Agt_Due, " +
            "to_number(sum(Due_Amount) - max(rcpt_due) - max(Conc_due)) Due_Bal_Amt,to_number(max(receipt_amount)) as Tot_Rcpt  , " +
            "to_number(max(Conc_amount)) as Tot_Conc_Amt,to_number(sum(Actual_Amount) - max(receipt_amount) - max(Conc_amount)) Net_Bal_Amt, " +
            "max(Family_ID) Family_ID,max(Family_name) Family_name, max(phoneno) as phoneno,max(email_id) as email_id,StudentType, Gender, " +
            "Reg_Number,Roll_Number ,Status,GROUP_CONCAT(DISTINCT heads) Fee_Heads,max(addr) as Address ,max(haveTransport) Transport," +
            "max(Pic_Point) Pic_Point ,max(Drop_Point) Drop_Point, CLASS_APPLIED as classid ,section_id from( select " + mq3 + " as fstr,(case when max(b.havetransport) = '0' then 'SELF' else max(b.havetransport) end)" +
            " as havetransport,nvl(  (select master_name from master_setting pc where pc.type = 'LOC' and pc.master_id = " +
            " (b.pick_point)and pc.client_unit_id = b.client_unit_id and rownum=1),'-') as Pic_Point ,nvl((select master_name from master_setting pc" +
            " where pc.type = 'LOC'  and pc.client_unit_id = b.client_unit_id and pc.master_id = (b.drop_point) and rownum=1),'-')  as Drop_Point, " +
            " (case when max(a.cur_address)= '0' then ' ' else max(a.cur_address) end || ',' ||  nvl((select(v_name || ',' || district_name || ','" +
            " || state_name) from country_state  where type = 'CSV'  and client_unit_id = b.client_unit_id and  v_id = (a.cur_village) and rownum=1),'-') ) " +
            " as Addr ,a.sibling1_rollno as Family_ID,(select (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || " +
            " replace(a.LAST_NAME, '0', '')) as name from user_details e where a.sibling1_rollno = e.regnumber and e.type = b.type  and " +
            "e.client_unit_id = b.client_unit_id and rownum=1 ) as Family_name, b.section as section_id, c.Class as Class_Name, nvl(d.master_name, '-') as Section," +
            " (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || replace(a.LAST_NAME, '0', '')) as Student_Name," +
            "(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' || replace(a.f_lastname, '0', '')) as Father_Name," +
            "(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' || replace(a.m_lastname, '0', '')) as Mother_Name " +
            ",(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M' THEN a.m_email WHEN a.default_emailid = 'G'" +
            " THEN a.g_email else '-' END) as Email_Id , (CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M'" +
            " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number else '-' END) as PhoneNo, sum(fd.std_amount) Standard_Amount, " +
            "(case when sum(sf.fee_amount) is null then(case when sum(fd.Fee_Amount) is null then 0 else sum(fd.Fee_Amount) + " +
            "(case when fd.due_date > 0 and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
            "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, " +
            "classid, client_id, client_unit_id, master_name from master_setting where type = 'LCL') t where  " +
            " t.client_unit_id = b.client_unit_id and t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point))" +
            " else 0 end)  end) else sum(sf.fee_amount) end)  Actual_Amount, nvl((case when sf.due_dt is not null then(case when sf.due_dt <= " + dateon + " " +
            " then sum(sf.fee_amount) else 0 end)  else  (case when fd.due_dt is not null and fd.due_dt <= " + dateon + " then" +
            " sum(fd.fee_amount) + (case when fd.due_date > 0  and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
            "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, classid, client_id, client_unit_id, " +
            " master_name from master_setting where type = 'LCL') t where  t.client_unit_id = b.client_unit_id and " +
            "t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point)) else 0 end)  else 0 end) end ),0) as Due_Amount," +
            "nvl(max(fr.receipt_amount), 0) receipt_amount, nvl(max(fr.rcpt_due), 0) rcpt_due,nvl(max(fr.Conc_amount), 0) Conc_amount,nvl(max(fr.Conc_due), 0) " +
            " Conc_due, b.CLASS_APPLIED,b.StudentType,a.GENDER as Gender,a.RegNumber as Reg_Number,nvl(b.Roll_number, '-') as Roll_Number , " +
            "(CASE when a.status = 'active' THEN 'Active'  when a.status = '' THEN 'Active' else 'Inactive' end ) as Status, " +
            "(h.master_name) as heads from student_detail b  left  join (SELECT * FROM fees_detail  WHERE TYPE='STR' UNION select * from fees_detail " +
            "where type = 'EDI' and Academic_year_Id='" + Ac_Year_id + "' and regno='" + regno + "'  and client_unit_id='" + unitid_mst + "') fd on b.class_applied = fd.class_id and fd.academic_year_id" +
            " = b.academic_year_id  and(fd.feetype_id || fd.FeeHead_Id) != '001001' " +
            "and  fd.client_unit_id=b.client_unit_id  inner join master_setting h" +
            " on(fd.feetype_id || fd.FeeHead_Id) = (h.sectionid || h.master_id) and h.type = 'EFH' and " +
            " fd.client_unit_id = h.client_unit_id and h.master_type = 'Education Fees Head' and h.section_strength  in ('B', (case when upper(b.studenttype) " +
            " = 'NEW' THEN 'N' else 'O' end)) inner join user_details a on b.reg_no = a.regnumber and a.type = b.type  and a.vch_num = b.vch_num " +
            "  inner join add_class c on b.class_applied = c.add_class_id and c.type = 'EAC' and  b.client_unit_id = " +
            "c.client_unit_id  left join master_setting d on b.section = d.master_id and d.type = 'ECS'  and " +
            "find_in_set(b.client_unit_id,d.client_unit_id)=1   left outer join fees_detail sf on  b.class_applied = sf.class_id and sf.academic_year_id =" +
            " b.academic_year_id and sf.type = 'STD' and sf.regno = b.reg_no and sf.FeeHead_Id = fd.FeeHead_Id and sf.feetype_id = fd.feetype_id" +
            " and sf.monthname = fd.monthname and sf.client_unit_id=b.client_unit_id" +
            " left outer join ( select sum(receipt_amount) as receipt_amount, sum(rcpt_due) rcpt_due, sum(Conc_amount) as" +
            " Conc_amount, sum(Conc_due) as Conc_due, class_id, academic_year_id, regno, client_id, client_unit_id from ( select(case when type = 'ERD' then " +
            "sum(receipt_amount) else 0 end) as receipt_amount, (case when type = 'ERD' and duedt <= " + dateon + " then sum(receipt_amount) else 0 end)" +
            " as rcpt_due, (case when type in ('ERC', 'ERW') then sum(receipt_amount) else 0 end) as Conc_amount,(case when type in ('ERC', 'ERW') " +
            "and duedt <= " + dateon + " then sum(receipt_amount) else 0 end) as Conc_due ,class_id, academic_year_id, regno, client_id, client_unit_id " +
            "from student_receipt_detail where type in ('ERD', 'ERC', 'ERW') and client_unit_id = '" + unitid_mst + "'" +
            " and academic_year_id = '" + Ac_Year_id + "'  group by class_id, academic_year_id, regno, client_id, client_unit_id,Receipt_Date,type,duedt ) " +
            " ft group by class_id, academic_year_id, regno, client_id, client_unit_id )  fr on  b.class_applied = fr.class_id and " +
            " fr.academic_year_id = b.academic_year_id  and  fr.regno = b.reg_no and fr.client_unit_id = b.client_unit_id " +
            " WHERE b.Academic_year_Id = '" + Ac_Year_id + "' and b.type = 'STD' and  b.client_unit_id = '" + unitid_mst + "'" +
            " GROUP by " + mq3 + ", b.CLASS_APPLIED,b.StudentType," +
            " c.Class, nvl(d.master_name, '-'), (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' ||replace(a.LAST_NAME, '0', ''))" +
            "  ,(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' ||replace(a.f_lastname, '0', ''))" +
            "  ,(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' ||replace(a.m_lastname, '0', ''))" +
            ",a.GENDER,a.RegNumber ,nvl(b.Roll_number, '-') , (CASE when a.status = 'active' THEN 'Active' " +
            " when a.status = '' THEN 'Active' else 'Inactive' end),sf.due_dt,fd.due_dt,(fd.feetype_id || fd.FeeHead_Id), " +
            "a.sibling1_rollno,b.section,(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M'  THEN a.m_email" +
            " WHEN a.default_emailid = 'G' THEN a.g_email else '-' END), (CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M' " +
            " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number else '-' END),fd.due_date,h.master_name,b.pick_point,b.client_unit_id,b.drop_point," +
            "a.cur_village,b.type,b.client_id ) a where Reg_Number='" + regno + "'  group by fstr, Class_Name, Section, Student_Name, Father_Name,Mother_name, CLASS_APPLIED, StudentType, Gender," +
            " Reg_Number, Roll_Number, Status, section_id";




        return mq;

    }


    // previous year data on update button
    public string Fee_PRYData(string clientid_mst, string unitid_mst, string Ac_Year_id, string mq3, string pr_dt)
    {

        mq = "select fstr,  Class_name Class,Section , Student_Name, " +
            "Father_Name,Mother_Name , to_number(sum(Standard_Amount)) Std_Amt_WOT,to_number(sum(Actual_Amount)) Act_Amt_WT, " +
            "to_number(sum(Due_Amount)) Due_Amt_WT,to_number(max(rcpt_due)) as Rcpt_Agt_Due,to_number(max(Conc_due)) as Conc_Agt_Due, " +
            "to_number(sum(Due_Amount) - max(rcpt_due) - max(Conc_due)) Due_Bal_Amt,to_number(max(receipt_amount)) as Tot_Rcpt  , " +
            "to_number(max(Conc_amount)) as Tot_Conc_Amt,to_number(sum(Actual_Amount) - max(receipt_amount) - max(Conc_amount)) Net_Bal_Amt, " +
            "max(Family_ID) Family_ID,max(Family_name) Family_name, max(phoneno) as phoneno,max(email_id) as email_id,StudentType, Gender, " +
            "Reg_Number,Roll_Number ,Status,GROUP_CONCAT(DISTINCT heads) Fee_Heads,max(addr) as Address ,max(haveTransport) Transport," +
            "max(Pic_Point) Pic_Point ,max(Drop_Point) Drop_Point, CLASS_APPLIED as classid ,section_id from( select " + mq3 + " as fstr,(case when max(b.havetransport) = '0' then 'SELF' else max(b.havetransport) end)" +
            " as havetransport,nvl(  (select master_name from master_setting pc where pc.type = 'LOC' and pc.master_id = " +
            " (b.pick_point)and pc.client_unit_id = b.client_unit_id and rownum=1),'-') as Pic_Point ,nvl((select master_name from master_setting pc" +
            " where pc.type = 'LOC'  and pc.client_unit_id = b.client_unit_id and pc.master_id = (b.drop_point) and rownum=1),'-')  as Drop_Point, " +
            " (case when max(a.cur_address)= '0' then ' ' else max(a.cur_address) end || ',' ||  nvl((select(v_name || ',' || district_name || ','" +
            " || state_name) from country_state  where type = 'CSV'  and client_unit_id = b.client_unit_id and  v_id = (a.cur_village) and rownum=1),'-') ) " +
            " as Addr ,a.sibling1_rollno as Family_ID,(select (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || " +
            " replace(a.LAST_NAME, '0', '')) as name from user_details e where a.sibling1_rollno = e.regnumber and e.type = b.type  and " +
            "e.client_unit_id = b.client_unit_id and rownum=1 ) as Family_name, b.section as section_id, c.Class as Class_Name, nvl(d.master_name, '-') as Section," +
            " (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' || replace(a.LAST_NAME, '0', '')) as Student_Name," +
            "(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' || replace(a.f_lastname, '0', '')) as Father_Name," +
            "(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' || replace(a.m_lastname, '0', '')) as Mother_Name " +
            ",(CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M' THEN a.m_email WHEN a.default_emailid = 'G'" +
            " THEN a.g_email else '-' END) as Email_Id , (CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M'" +
            " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number else '-' END) as PhoneNo, sum(fd.std_amount) Standard_Amount, " +
            "(case when sum(sf.fee_amount) is null then(case when sum(fd.Fee_Amount) is null then 0 else sum(fd.Fee_Amount) + " +
            "(case when fd.due_date > 0 and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
            "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, " +
            "classid, client_id, client_unit_id, master_name from master_setting where type = 'LCL') t where  " +
            " t.client_unit_id = b.client_unit_id and t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point))" +
            " else 0 end)  end) else sum(sf.fee_amount) end)  Actual_Amount, nvl((case when sf.due_dt is not null then(case when to_date(sf.due_dt , 'dd/mm/yyyy')<= to_date('" + pr_dt + "','dd/mm/yyyy') " +
            " then sum(sf.fee_amount) else 0 end)  else  (case when fd.due_dt is not null and to_date(fd.due_dt , 'dd/mm/yyyy')<= to_date('" + pr_dt + "','dd/mm/yyyy') then" +
            " sum(fd.fee_amount) + (case when fd.due_date > 0  and(fd.feetype_id || fd.FeeHead_Id) = '002001' and upper(max(b.havetransport)) = 'SCHOOL' " +
            "then(select  nvl(round(sum(t.Transamt) / count(*)), 0)  Transamt from(select  group_name as Transamt, classid, client_id, client_unit_id, " +
            " master_name from master_setting where type = 'LCL') t where  t.client_unit_id = b.client_unit_id and " +
            "t.classid = b.class_applied and(t.master_name = b.pick_point or t.master_name = b.drop_point)) else 0 end)  else 0 end) end ),0) as Due_Amount," +
            "nvl(max(fr.receipt_amount), 0) receipt_amount, nvl(max(fr.rcpt_due), 0) rcpt_due,nvl(max(fr.Conc_amount), 0) Conc_amount,nvl(max(fr.Conc_due), 0) " +
            " Conc_due, b.CLASS_APPLIED,b.StudentType,a.GENDER as Gender,a.RegNumber as Reg_Number,nvl(b.Roll_number, '-') as Roll_Number , " +
            "(CASE when a.status = 'active' THEN 'Active'  when a.status = '' THEN 'Active' else 'Inactive' end ) as Status, " +
            "(h.master_name) as heads from student_detail b  left  join fees_detail fd on b.class_applied = fd.class_id and fd.academic_year_id" +
            " = b.academic_year_id  and fd.type = 'STR' and(fd.feetype_id || fd.FeeHead_Id) != '001001' " +
            "and  fd.client_unit_id=b.client_unit_id  inner join master_setting h" +
            " on(fd.feetype_id || fd.FeeHead_Id) = (h.sectionid || h.master_id) and h.type = 'EFH' and " +
            " fd.client_unit_id = h.client_unit_id and h.master_type = 'Education Fees Head' and h.section_strength  in ('B', (case when upper(b.studenttype) " +
            " = 'NEW' THEN 'N' else 'O' end)) inner join user_details a on b.reg_no = a.regnumber and a.type = b.type  and a.vch_num = b.vch_num " +
            "  inner join add_class c on b.class_applied = c.add_class_id and c.type = 'EAC' and  b.client_unit_id = " +
            "c.client_unit_id  left join master_setting d on b.section = d.master_id and d.type = 'ECS'  and " +
            "find_in_set(b.client_unit_id,d.client_unit_id)=1   left outer join fees_detail sf on  b.class_applied = sf.class_id and sf.academic_year_id =" +
            " b.academic_year_id and sf.type = 'STD' and sf.regno = b.reg_no and sf.FeeHead_Id = fd.FeeHead_Id and sf.feetype_id = fd.feetype_id" +
            " and sf.monthname = fd.monthname and sf.client_unit_id=b.client_unit_id" +
            " left outer join ( select sum(receipt_amount) as receipt_amount, sum(rcpt_due) rcpt_due, sum(Conc_amount) as" +
            " Conc_amount, sum(Conc_due) as Conc_due, class_id, academic_year_id, regno, client_id, client_unit_id from ( select(case when type = 'ERD' then " +
            "sum(receipt_amount) else 0 end) as receipt_amount, (case when type = 'ERD' and to_date(duedt , 'dd/mm/yyyy')<= to_date('" + pr_dt + "','dd/mm/yyyy') then sum(receipt_amount) else 0 end)" +
            " as rcpt_due, (case when type in ('ERC', 'ERW') then sum(receipt_amount) else 0 end) as Conc_amount,(case when type in ('ERC', 'ERW') " +
            "and to_date(duedt , 'dd/mm/yyyy')<= to_date('" + pr_dt + "','dd/mm/yyyy') then sum(receipt_amount) else 0 end) as Conc_due ,class_id, academic_year_id, regno, client_id, client_unit_id " +
            "from student_receipt_detail where type in ('ERD', 'ERC', 'ERW') and client_unit_id = '" + unitid_mst + "'" +
            " and academic_year_id = '" + Ac_Year_id + "'  group by class_id, academic_year_id, regno, client_id, client_unit_id,Receipt_Date,type,duedt ) " +
            " ft group by class_id, academic_year_id, regno, client_id, client_unit_id )  fr on  b.class_applied = fr.class_id and " +
            " fr.academic_year_id = b.academic_year_id  and  fr.regno = b.reg_no and fr.client_unit_id = b.client_unit_id " +
            " WHERE b.Academic_year_Id = '" + Ac_Year_id + "' and b.type = 'STD' and  b.client_unit_id = '" + unitid_mst + "'" +
            " GROUP by " + mq3 + ", b.CLASS_APPLIED,b.StudentType," +
            " c.Class, nvl(d.master_name, '-'), (replace(a.FIRST_NAME, '0', '') || ' ' || replace(a.MIDDLE_NAME, '0', '') || ' ' ||replace(a.LAST_NAME, '0', ''))" +
            "  ,(replace(a.f_firstname, '0', '') || ' ' || replace(a.f_middlename, '0', '') || ' ' ||replace(a.f_lastname, '0', ''))" +
            "  ,(replace(a.m_firstname, '0', '') || ' ' || replace(a.m_middlename, '0', '') || ' ' ||replace(a.m_lastname, '0', ''))" +
            ",a.GENDER,a.RegNumber ,nvl(b.Roll_number, '-') , (CASE when a.status = 'active' THEN 'Active' " +
            " when a.status = '' THEN 'Active' else 'Inactive' end ),sf.due_dt,fd.due_dt,(fd.feetype_id || fd.FeeHead_Id), " +
            "a.sibling1_rollno,b.section, (CASE WHEN a.default_emailid = 'F' THEN a.f_email WHEN a.default_emailid = 'M'  THEN a.m_email" +
            " WHEN a.default_emailid = 'G' THEN a.g_email else '-' END), (CASE WHEN a.default_Ph = 'F' THEN a.f_con_number WHEN a.default_Ph = 'M' " +
            " THEN a.m_con_number WHEN a.default_Ph = 'G' THEN a.g_con_number else '-' END),fd.due_date,h.master_name,b.pick_point,b.client_unit_id,b.drop_point," +
            "a.cur_village,b.type,b.client_id ) a group by fstr, Class_Name, Section, Student_Name, Father_Name,Mother_name, CLASS_APPLIED, StudentType, Gender," +
            " Reg_Number, Roll_Number, Status, section_id";


        return mq;

    }


    public void FeeReceiptRpt(string UserCode, string clientid_mst, string unitid_mst, string Ac_Year_id, string Rpt_name)
    {

        DataTable dt = new DataTable();
        DataTable dt_all = new DataTable();




        string url = ((string)HttpContext.Current.Session[MyGuid + "_SSEEKVAL"].ToString());
        string cond = " and (c.client_id|| c.client_unit_id|| c.vch_num|| to_char(c.vch_date, 'yyyymmdd')|| c.type)='" + url + "'";


        //string mq1 = @"select group_concat(distinct month_name) as month ,regno from student_receipt_detail where academic_year_id='" + Ac_Year_id + "' and " +
        //"(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)in ('" + url + "') group by regno";

        //string mq1 = "select group_concat(distinct a.month) month,a.regno from(select a.month_name as month,m.femaleratio,a.regno from " +
        //    "student_receipt_detail a inner join master_setting m on a.month_id = m.section_strength and m.type = 'MNT' where " +
        //    "a.academic_year_id = '" + Ac_Year_id + "' and(a.client_id || a.client_unit_id || a.vch_num || to_char(a.vch_date, 'yyyymmdd') || a.type) " +
        //    "in ('" + url + "') order by m.femaleratio) a group by a.regno";

        string mq1 = "select DISTINCT a.month_name as month,m.femaleratio,a.regno from student_receipt_detail a inner join master_setting" +
            " m on a.month_id = m.section_strength and m.type = 'MNT' where a.academic_year_id = '" + Ac_Year_id + "' and(a.client_id || a.client_unit_id || a.vch_num " +
            "|| to_char(a.vch_date, 'yyyymmdd') || a.type) in ('" + url + "') order by m.femaleratio";

        string months = "";
        DataTable dmnth = new DataTable();
        dmnth = getdata(UserCode, mq1);
        if (dmnth.Rows.Count > 0)
        {

            List<string> mlist = new List<string>();
            months = "";
            foreach (DataRow dr in dmnth.Rows) mlist.Add(dr["month"].ToString());
            mlist = mlist.Distinct().ToList();
            months = String.Join(", ", mlist.ToArray());
            string reg_no = "";
            decimal total_fee = 0, total_receipt = 0, total_bal = 0, due_fee = 0, due_receipt = 0, due_bal = 0;
            string mq3 = "(b.client_id||b.client_unit_id||b.vch_num||to_char(b.vch_date,'yyyymmdd')||b.type)";



            //months = Convert.ToString(dmnth.Rows[0]["month"]);

            string mq2 = @"select fee_status  from student_receipt_detail where academic_year_id='" + Ac_Year_id + "' and " +
        "(client_id|| client_unit_id|| vch_num|| to_char(vch_date, 'yyyymmdd')|| type)in ('" + url + "')";

            dt = getdata(UserCode, mq2);
            if (dt.Rows.Count > 0)
            {
                string feestatus = dt.Rows[0]["fee_status"].ToString();
                if ((feestatus == "0") || (feestatus == "") || (feestatus == "Approved"))
                {
                    // mq = "select '0' as total_fee, '0' as total_receipt,'0' as total_bal, '0' as due_fee," +
                    //     "'0' as due_receipt,'0' as due_bal, replace(a.first_name,'0','')||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0','') AS  name," +
                    //     "replace(a.f_firstname,'0','')||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') AS father_name," +
                    //     " c.regno,c.Receipt_no,sum(c.receipt_amount) as receipt_amount,c.academic_year_id,ad.academic_year,c.class_id,cl.class,c.fee_head_id,fh.master_name as HeadName " +
                    //     ",c.mode_of_payment as mode_of_payment_id,pm.master_name,c.client_id,c.client_unit_id,group_concat(distinct c.month_name) as month_name," +
                    //     "c.section_id,sec.master_name as section,to_char(convert_tz(Receipt_Date,'UTC','" + Gettimezone() + "'),'" + Getsqldatetimeformat() + "') as Receipt_Date," +
                    //"'" + months + "' AS month from student_receipt_detail c inner join user_details a on a.regnumber=c.regno and a.type='STD' and a.client_unit_id='"+unitid_mst+"' inner join add_class cl on cl.add_class_id=c.class_id " +
                    //"and cl.client_id=c.client_id and cl.client_unit_id=c.client_unit_id and cl.type='EAC' inner join add_academic_year ad on ad.academic_year_id=c.academic_year_id and " +
                    //"ad.client_id=c.client_id  and ad.type='ACY' inner join master_setting fh on fh.master_id=c.fee_head_id and fh.client_id=c.client_id" +
                    //" and fh.client_unit_id=c.client_unit_id and fh.type='EFH'and master_type='Education Fees Head' and c.fee_type_id=fh.sectionid  left join master_setting sec on sec.master_id=c.section_id and sec.type='ECS'  " +
                    //"and find_in_set(sec.client_unit_id,c.client_unit_id)=1 left outer join master_setting  pm on pm.master_id=c.mode_of_payment and pm.type='EPM' where c.academic_year_id= '" + Ac_Year_id + "'" +
                    //" and c.client_id= '" + clientid_mst + "' and c.client_unit_id= '" + unitid_mst + "' " + cond + "  group by  replace(a.first_name,'0','')||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0','')" +
                    //",replace(a.f_firstname,'0','')||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0',''), c.regno,c.fee_head_id,c.Receipt_no," +
                    //"c.academic_year_id,ad.academic_year,c.class_id,cl.class,c.fee_head_id,fh.master_name,c.mode_of_payment,pm.master_name,c.client_id,c.client_unit_id," +
                    //"c.section_id,sec.master_name,c.Receipt_Date";
                    mq = "select max(c.remarks) as remarks,0 as total_fee, 0 as total_receipt,0 as total_bal, 0 as due_fee," +
                        "0 as due_receipt,0 as due_bal, replace(a.first_name,'0','')||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0','') AS  name," +
                        "replace(a.f_firstname,'0','')||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','') AS father_name," +
                        " c.regno,c.Receipt_no,sum(c.receipt_amount) as receipt_amount,c.academic_year_id,ad.academic_year,c.class_id,cl.class,c.fee_head_id,fh.master_name as HeadName " +
                        ",c.mode_of_payment as mode_of_payment_id,pm.master_name,c.client_id,c.client_unit_id,group_concat(distinct c.month_name) as month_name," +
                        "c.section_id,sec.master_name as section,to_char(Receipt_Date,'" + Getsqldatetimeformat() + "') as Receipt_Date," +
                   "'" + months + "' AS month from student_receipt_detail c inner join user_details a on a.regnumber=c.regno and c.student_id=a.vch_num and a.type='STD' and a.client_unit_id='" + unitid_mst + "' inner join add_class cl on cl.add_class_id=c.class_id " +
                   "and cl.client_id=c.client_id and cl.client_unit_id=c.client_unit_id and cl.type='EAC' inner join add_academic_year ad on ad.academic_year_id=c.academic_year_id and " +
                   "ad.client_id=c.client_id  and ad.type='ACY' inner join master_setting fh on fh.master_id=c.fee_head_id and fh.client_id=c.client_id" +
                   " and fh.client_unit_id=c.client_unit_id and fh.type='EFH'and master_type='Education Fees Head' and c.fee_type_id=fh.sectionid  left join master_setting sec on sec.master_id=c.section_id and sec.type='ECS'  " +
                   "and find_in_set(sec.client_unit_id,c.client_unit_id)=1 left outer join master_setting  pm on pm.master_id=c.mode_of_payment and pm.type='EPM' where c.academic_year_id= '" + Ac_Year_id + "'" +
                   " and c.client_id= '" + clientid_mst + "' and c.client_unit_id= '" + unitid_mst + "' " + cond + "  group by  replace(a.first_name,'0','')||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0','')" +
                   ",replace(a.f_firstname,'0','')||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0',''), c.regno,c.fee_head_id,c.Receipt_no," +
                   "c.academic_year_id,ad.academic_year,c.class_id,cl.class,c.fee_head_id,fh.master_name,c.mode_of_payment,pm.master_name,c.client_id,c.client_unit_id," +
                   "c.section_id,sec.master_name,c.Receipt_Date";
                }
                else
                {

                    mq = @"select c.class_id, ((a.first_name)||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0','')) AS name,
((a.f_firstname)||' '||replace(a.f_middlename,'0','')||' '||replace(a.f_lastname,'0','')) AS father_name, c.regno,c.Receipt_no,
to_char(Receipt_Date,'" + Getsqldatetimeformat() + "') as Receipt_Date,sum(c.receipt_amount) as receipt_amount," +
"c.academic_year_id,cl.class,ad.academic_year,fh.master_name as HeadName,Pm.master_name,c.fee_status,a.student_status,a.sa_id,c.student_id,c.client_id," +
"c.client_unit_id,group_concat(distinct c.month_name) as month_name from student_receipt_detail c inner join student_applicant_details a on a.sa_id=c.student_id and a.type='STD' and a.client_id= c.client_id and a.client_unit_id=c.client_unit_id " +
"inner join add_class cl on cl.add_class_id=c.class_id and cl.client_id=c.client_id and cl.client_unit_id=c.client_unit_id and cl.type='EAC' inner join add_academic_year ad on ad.academic_year_id=c.academic_year_id and ad.client_id=c.client_id and ad.type='ACY' " +
"inner join master_setting fh on fh.master_id=c.fee_head_id and fh.client_id=c.client_id and fh.client_unit_id=c.client_unit_id and fh.type='EFH' " +
"and fh.master_type='Education Fees Head' and c.fee_type_id=fh.sectionid  left outer join master_setting  pm on pm.master_id=c.mode_of_payment " +
"and pm.type='EPM' where c.academic_year_id= '" + Ac_Year_id + "' and c.client_id= '" + clientid_mst + "' and c.client_unit_id= '" + unitid_mst + "' " + cond + " " +
" and a.student_status='temporary' group by a.sa_id,c.fee_head_id,c.fee_head_id,c.Receipt_no," +
                   "c.academic_year_id,ad.academic_year,c.class_id,cl.class,c.fee_head_id,fh.master_name,c.mode_of_payment,pm.master_name" +
                   ",c.client_id,c.client_unit_id," +
                   "c.section_id,c.Receipt_Date ,((a.first_name)||' '||replace(a.middle_name,'0','')||' '||replace(a.last_name,'0',''))," +
                   "((a.f_firstname) || ' ' || replace(a.f_middlename, '0', '') || ' ' || replace(a.f_lastname, '0', '')),c.regno,c.fee_status" +
                   ",Pm.master_name,a.student_status,c.student_id";

                }
                dt = getdata(UserCode, mq);

                if (dt.Rows.Count > 0)
                {


                    //mq3 = "b.client_id||b.client_unit_id||b.type||a.sibling1_rollno";
                    //string mq = Fee_AllData(clientid_mst, unitid_mst, Ac_Year_id, mq3, "to_date('" + rcpt_dt + "','yyyyMMdd')");
                    //mq = "SELECT Due_Bal_Amt,Reg_Number FROM (" + mq + ")";
                    //var dtbal = getdata(UserCode, mq);
                    DataView dvreg = dt.DefaultView;
                    DataTable dtreg = dvreg.ToTable(true, "regno", "class_id");

                    //reg_no = "";
                    if (dtreg.Rows.Count > 0)
                    {
                        for (Int32 r = 0; r < dtreg.Rows.Count; r++)
                        {
                            //if (i > 0)
                            //{

                            //    reg_no = reg_no + ',' + dtreg.Rows[i][0].ToString();
                            //}
                            //else
                            //{
                            //    reg_no = dtreg.Rows[i][0].ToString();
                            //}

                            var rcpt_dt = Make_datetime(dt.Rows[0]["receipt_date"].ToString()).ToString("yyyyMMdd");
                            reg_no = dtreg.Rows[r]["regno"].ToString().Trim();
                            var clid = dtreg.Rows[r]["class_id"].ToString().Trim();
                            string mqq = Fee_AllData_new(clientid_mst, unitid_mst, Ac_Year_id, mq3, "to_date('" + rcpt_dt + "','yyyyMMdd')", clid, reg_no);
                            var dtfilter = getdata(UserCode, mqq);
                            if (dt.Rows.Count > 0)
                            {
                                for (Int32 i = 0; i < dt.Rows.Count; i++)
                                {
                                    if (dtreg.Rows[r]["regno"].ToString().Trim() == reg_no.Trim())
                                        if (dtfilter.Rows.Count > 0)
                                        {
                                            dt.Rows[i]["total_fee"] = Make_decimal(dtfilter.Rows[0]["Act_Amt_Wt"].ToString());
                                            dt.Rows[i]["total_receipt"] = Make_decimal(dtfilter.Rows[0]["tot_rcpt"].ToString()) + Make_decimal(dtfilter.Rows[0]["tot_Conc_Amt"].ToString());
                                            dt.Rows[i]["total_bal"] = Make_decimal(dtfilter.Rows[0]["net_bal_amt"].ToString());
                                            dt.Rows[i]["due_fee"] = Make_decimal(dtfilter.Rows[0]["due_amt_wt"].ToString());
                                            dt.Rows[i]["due_receipt"] = Make_decimal(dtfilter.Rows[0]["rcpt_agt_due"].ToString()) + Make_decimal(dtfilter.Rows[0]["Conc_Agt_due"].ToString());
                                            dt.Rows[i]["due_bal"] = Make_decimal(dtfilter.Rows[0]["due_bal_amt"].ToString());
                                        }
                                }

                            }


                            //mqq = "select * from (" + mqq + ") a  where a.reg_number in ('" + reg_no.Replace(",", "','").ToString() + "')";
                            //var rcpt_dt = Make_datetime(dt.Rows[0]["receipt_date"].ToString()).ToString("yyyyMMdd");
                            //var reg_no = (dt.Rows[0]["regno"].ToString());
                            //var clid = (dt.Rows[0]["class_id"].ToString());
                            //string mqq = Fee_AllData_new(clientid_mst, unitid_mst, Ac_Year_id, mq3, "to_date('" + rcpt_dt + "','yyyyMMdd')", clid, reg_no);
                            //var dtfilter = getdata(UserCode, mqq);

                            //if (dt.Rows.Count > 0)
                            //{
                            //    for (Int32 i = 0; i < dt.Rows.Count; i++)
                            //    {

                            //        if (dtfilter.Rows.Count > 0)
                            //        {
                            //            dt.Rows[i]["total_fee"] = Make_decimal(dtfilter.Rows[0]["Act_Amt_Wt"].ToString());
                            //            dt.Rows[i]["total_receipt"] = Make_decimal(dtfilter.Rows[0]["tot_rcpt"].ToString()) + Make_decimal(dtfilter.Rows[0]["tot_Conc_Amt"].ToString());
                            //            dt.Rows[i]["total_bal"] = Make_decimal(dtfilter.Rows[0]["net_bal_amt"].ToString());
                            //            dt.Rows[i]["due_fee"] = Make_decimal(dtfilter.Rows[0]["due_amt_wt"].ToString());
                            //            dt.Rows[i]["due_receipt"] = Make_decimal(dtfilter.Rows[0]["rcpt_agt_due"].ToString()) + Make_decimal(dtfilter.Rows[0]["Conc_Agt_due"].ToString());
                            //            dt.Rows[i]["due_bal"] = Make_decimal(dtfilter.Rows[0]["due_bal_amt"].ToString());
                            //        }

                            //#region MY BAL


                            //mq = "SELECT * FROM (select studenttype, Email_id, Phoneno , '5th-A 1' as classsection, max(havetransport) havetransport,max(pick_point) pick_point,max(drop_point) drop_point, '457' as Student_id," +
                            //    "RegNumber, '" + clid + "' as Class_id,'001' as section_id,'25' as rollno, (FIRST_NAME||' '||replace(MIDDLE_NAME,'0','')||' '||replace(LAST_NAME,'0','')) as stdname, '" + reg_no + "' as grpid, max(paid) " +
                            //    "as paid, sum(Scholarship_id) as Scholarship_id,  sum(scholarship) scholarship , (case when max(Fee_Amount)- (SUM(Receipt_Amount)+sum(scholarship))=0 THEN 'Paid' when" +
                            //    " (SUM(Receipt_Amount)+sum(scholarship))=0 THEN  'Pending' ELSE 'Partial' END) as feestatus   , max(FeeDate) FeeDate ,max(Fee_Month) Fee_Month,max(Due_Date1) as Due_Date," +
                            //    "(to_char( convert_tz(to_date(max(overdue_dt),'dd/MM/YYYY HH24:MI:SS'),'UTC','+05:30'),'dd/MM/YYYY')) as OverDue_Date ,(case when max(Receipt_Date) is null then to_char(utc_timestamp(),'dd-mm-yyyy')" +
                            //    " else to_char(max(Receipt_Date),'dd-mm-yyyy') end) as Receipt_Date , max(HideDate) HideDate,Month_id,Month_name,max(Fee_Amount) Fee_Amount,FeeType_Id,Frequency_Id,FeeHead_Id," +
                            //    "max(FrequencyName) FrequencyName,max(FeeTypeName) FeeTypeName,max(HeadName) HeadName,cast( sum(Receipt_Amount)as decimal(18,2)) as Receipt_Amount,cast( sum(PaidAmount)as decimal(18,2)) as " +
                            //    "PaidAmount,max(IntialStatus) IntialStatus,round(DATEDIFF( (case when max(Receipt_Date) is null then utc_timestamp() else max(Receipt_Date) end), to_date(max(a.overdue_dt),'dd/MM/YYYY HH24:MI:SS')))" +
                            //    " as OverDays ,max(overdue_day) as overdue_day from (select trim(studenttype) studenttype, trim(FIRST_NAME) FIRST_NAME, trim(MIDDLE_NAME) MIDDLE_NAME, trim(LAST_NAME) LAST_NAME ," +
                            //    " trim(RegNumber) RegNumber, '0' as paid, trim(Scholarship_id) Scholarship_id,  scholarship , trim(feestatus) feestatus, FeeDate,Fee_Month,null as Receipt_Date,Due_Date1," +
                            //    "to_char(overdue_dt,'dd/MM/YYYY HH24:MI:SS') overdue_dt ,HideDate,trim(Month_id) Month_id,trim(Month_name) Month_name,Fee_Amount,trim(FeeType_Id) FeeType_Id,trim(Frequency_Id) Frequency_Id," +
                            //    "trim(FeeHead_Id) FeeHead_Id ,trim(FrequencyName) FrequencyName,trim(FeeTypeName) FeeTypeName,trim(HeadName) HeadName,Receipt_Amount,PaidAmount,IntialStatus,trim(havetransport) havetransport," +
                            //    "trim(pick_point) pick_point,trim(drop_point) drop_point,trim(Email_id) Email_id, trim(Phoneno) Phoneno,due_date as due_day,overdue_date as overdue_day from (select  (to_char(clf.due_dt,'yyyymm')" +
                            //    "||'01') as feedate, ('01/'|| to_char(clf.due_dt, 'mm/yyyy')) as Fee_Month,clf.due_dt as Due_Date1,to_char(Last_Day(clf.due_dt), 'dd/mm/yyyy') as HideDate,to_char(clf.due_dt, 'mm') as Month_Id," +
                            //    " to_char(clf.due_dt, 'Month') as month_name,sd.studenttype, sd.reg_no, sd.class_applied, sd.section, sd.vch_num as student_id, sd.roll_number, sd.RollNo ,sd.havetransport,sd.pick_point," +
                            //    "sd.drop_point,clf.*,ud.RegNumber, ud.Caste_Category, ud.GENDER, ud.FIRST_NAME, ud.MIDDLE_NAME, ud.LAST_NAME, ud.f_firstname, ud.f_middlename, ud.f_lastname, ud.m_firstname, ud.m_middlename, " +
                            //    "ud.m_lastname,(CASE WHEN ud.default_emailid='F' THEN ud.f_email WHEN ud.default_emailid='M' THEN ud.m_email else ud.g_email END) as Email_Id ,(CASE WHEN ud.default_Ph='F' THEN " +
                            //    "ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number else ud.g_con_number END) as PhoneNo,0 as Receipt_Amount, 0 as PaidAmount,'Y' as IntialStatus,Round((nvl((case when sm.IsAmount = 1 " +
                            //    "THEN((sm.Amount * clf.Fee_Amount) / 100)ELSE sm.Amount end), 0)) ,2) AS scholarship, sm.ScholarshipName,sm.vch_num as Scholarship_id,'Pending' as feestatus, st.FeeTypeName, ms.master_name as" +
                            //    " HeadName,cs.CategoryType,cs.class as classname,cs.CategoryType as class_cat,msc.master_name as cat_name,nvl(ms1.master_name,'-') as sectionnme from student_detail sd inner join user_details ud " +
                            //    "on sd.vch_num=ud.vch_num and sd.type=ud.type and  sd.reg_no=ud.regnumber and ud.type= 'STD' and ud.client_unit_id=sd.client_unit_id  inner join (select * from Fees_detail where  class_id = '" + clid + "' " +
                            //    " and type = 'STR' and Academic_year_Id='" + Ac_Year_id + "' and client_unit_id='" + unitid_mst + "'  and (case when (feetype_id||feehead_id)='001001' or  fee_amount>0 then 1 else to_number(due_date) end )>0 " +
                            //    "UNION select * from fees_detail where type = 'EDI' and Academic_year_Id='" + Ac_Year_id + "' and regno='" + reg_no + "'  and client_unit_id='" + unitid_mst + "') clf on clf.client_unit_id = sd.client_unit_id and" +
                            //    " sd.academic_year_id = clf.academic_year_id    left outer join  scholarship_master sm on clf.class_id = sm.class_id and sm.type = 'ESM' and clf.client_unit_id = sm.client_unit_id " +
                            //    "and sm.academic_year_id = clf.academic_year_id and ud.Caste_Category = sm.Caste_category_id  and ud.Gender = sm.Gender and clf.feeHead_id = sm.Fee_HeadId inner join school_fee_type st" +
                            //    " on st.FeeType_Id = clf.FeeType_Id  and st.client_unit_id = clf.client_unit_id and(st.master_type = '' or st.master_type = '0')   inner join master_setting ms  on" +
                            //    " (clf.feetype_id|| clf.FeeHead_Id)=(ms.sectionid||ms.master_id) and ms.type = 'EFH' and clf.client_unit_id = ms.client_unit_id and ms.master_type = 'Education Fees Head'  and" +
                            //    " (ms.section_strength='B' or  (case when upper(sd.studenttype)='NEW' then 'N' else 'O' end)=ms.section_strength) INNER join add_class cs on cs.add_class_id = clf.class_id and cs.type = 'EAC'" +
                            //    " and clf.client_unit_id = cs.client_unit_id Left JOIN master_setting ms1 on ms1.master_id = sd.section and ms1.type = 'ECS'  and find_in_set(clf.client_unit_id,ms1.client_unit_id)=1 " +
                            //    "inner join master_setting msc on msc.master_id = cs.CategoryType and msc.type = 'ECC' and msc.client_unit_id = cs.client_unit_id  where RegNumber = '" + reg_no + "' order by due_dt) a union all " +
                            //    "select sd.studenttype, ud.FIRST_NAME, ud.MIDDLE_NAME, ud.LAST_NAME, a.RegNo as  RegNumber, '2' as paid , null as Scholarship_id,  (case when a.type in ('ERC','ERW') then Receipt_Amount" +
                            //    " else 0.00 end) as scholarship, '-' as feestatus,(to_char(a.DueDt,'yyyymm')||'01') as FeeDate,('01/'|| to_char(a.DueDt, 'mm/yyyy')) as Fee_Month,a.vch_date as Receipt_Date, a.DueDt as Due_Date1," +
                            //    " to_char(Last_Day(a.DueDt), 'dd/MM/YYYY HH24:MI:SS') as overdue_dt,to_char(Last_Day(a.DueDt), 'dd/MM/YYYY') as HideDate  ,a.Month_id,a.Month_name, 0 as Fee_Amount,a.Fee_type_id as FeeType_Id," +
                            //    "a.Frequency_Id,a.Fee_Head_id as FeeHead_Id,'Monthly' as FrequencyName,st.FeeTypeName, ms.master_name as HeadName, Receipt_Amount ,(case when a.type  in ('ERD') then Receipt_Amount else 0.00 end)" +
                            //    " as   PaidAmount,'Y' as IntialStatus,'0' as havetransport,'0' as pick_point,'0' as drop_point,(CASE WHEN ud.default_emailid='F' THEN ud.f_email WHEN ud.default_emailid='M' THEN ud.m_email " +
                            //    "else ud.g_email END) as Email_Id ,(CASE WHEN ud.default_Ph='F' THEN ud.f_con_number WHEN ud.default_Ph='M' THEN ud.m_con_number else ud.g_con_number END) as PhoneNo ,0 as due_day,0 as overdue_day" +
                            //    "  from student_receipt_detail a inner join student_detail sd on sd.reg_no=a.regno and sd.client_unit_id='" + unitid_mst + "' and sd.academic_year_id='" + Ac_Year_id + "'  inner join user_details ud on " +
                            //    "ud.vch_num =sd.vch_num and   ud.RegNumber= a.RegNo and ud.type='STD' and ud.client_unit_id=a.client_unit_id inner join school_fee_type st on st.FeeType_Id = a.Fee_Type_Id  " +
                            //    " and st.client_unit_id = a.client_unit_id and(st.master_type = '' or st.master_type = '0')   inner join master_setting ms  on (a.fee_type_id|| a.Fee_Head_Id)=(ms.sectionid||ms.master_id)" +
                            //    " and ms.type = 'EFH'  and find_in_set(a.client_unit_id,ms.client_unit_id)=1 and ms.master_type = 'Education Fees Head' where  a.type in ('ERD','ERC','ERW')   and a.client_unit_id = '001001'" +
                            //    " and a.academic_year_id='" + Ac_Year_id + "' and a.regNo ='" + reg_no + "' and a.class_id='" + clid + "') a GROUP by  Month_id,Month_name,FeeType_Id,Frequency_Id,FeeHead_Id,studenttype,Email_id,Phoneno,(FIRST_NAME || ' ' || " +
                            //    "replace(MIDDLE_NAME, '0', '') || ' ' || replace(LAST_NAME, '0', '')),RegNumber) T ";
                            //#endregion
                            //dt_all = getdata(UserCode, mq);
                            //var mydate = Make_date(rcpt_dt, "yyyyMMdd");
                            //var dtstatuswise = dt_all.AsEnumerable().Where(w => (DateTime)w["due_date"] <= mydate)
                            //                                                           .Select(s => s).OrderBy(r => DateTime.ParseExact(r.Field<string>("HideDate"), "dd/mm/yyyy", CultureInfo.InvariantCulture)).CopyToDataTable();
                            //dt_all = dtstatuswise;

                            //dt.Rows[i]["total_fee"] = Make_decimal(dtfilter.Rows[0]["Act_Amt_Wt"].ToString());
                            //dt.Rows[i]["total_receipt"] = Make_decimal(dt_all.Compute("sum(receipt_amount)", "")) + Make_decimal(dt_all.Compute("sum(scholarship)", ""));
                            //dt.Rows[i]["total_bal"] = Make_decimal(dt_all.Compute("sum(fee_amount)", ""))
                            //dt.Rows[i]["due_fee"] = Make_decimal(dtstatuswise.Compute("sum(fee_amount)", ""));
                            //dt.Rows[i]["due_receipt"] = Make_decimal(dtstatuswise.Compute("sum(receipt_amount)", ""));
                            //dt.Rows[i]["due_bal"] = Make_decimal(dtstatuswise.Compute("sum(fee_amount)", "")) - Make_decimal(dtstatuswise.Compute("sum(receipt_amount)", ""));
                            //try
                            //{
                            //    DataTable dtfilter = seekval_dt(dt_all, "reg_number='" + reg_no + "'");

                            //    if (dtfilter.Rows.Count > 0)
                            //    {
                            //        dt.Rows[i]["total_fee"] = Make_decimal(dtfilter.Rows[0]["Act_Amt_Wt"].ToString());
                            //        dt.Rows[i]["total_receipt"] = Make_decimal(dtfilter.Rows[0]["tot_rcpt"].ToString()) + Make_decimal(dtfilter.Rows[0]["tot_Conc_Amt"].ToString());
                            //        dt.Rows[i]["total_bal"] = Make_decimal(dtfilter.Rows[0]["net_bal_amt"].ToString());
                            //        dt.Rows[i]["due_fee"] = Make_decimal(dtfilter.Rows[0]["due_amt_wt"].ToString());
                            //        dt.Rows[i]["due_receipt"] = Make_decimal(dtfilter.Rows[0]["rcpt_agt_due"].ToString()) + Make_decimal(dtfilter.Rows[0]["Conc_Agt_due"].ToString());
                            //        dt.Rows[i]["due_bal"] = Make_decimal(dtfilter.Rows[0]["due_bal_amt"].ToString());
                            //    }
                            //}
                            //catch { }

                        }


                    }

                    string rpt = "../../schoolReports_Rpts/" + Rpt_name + "";
                    //string rpt = "../../schoolReports_Rpts/Rayan.rpt";
                    open_report_bydt(UserCode, dt, rpt, "Student Fee Receipt");
                    HttpContext.Current.Session[MyGuid + "_reportmenuid"] = null;

                }
                else
                {
                    showmsg(1, "No Receipt Found", 2);
                }
            }
        }
    }

    public bool Inser_Rows(string userCode, DataTable fromDt, String ToTable)
    {
        bool ok = false;

        try
        {
            DataTable dt2 = new DataTable();
            dt2 = getdata(userCode, "select * from " + ToTable + " where 1=2");

            foreach (DataRow dr in fromDt.Rows)
            {
                DataRow drn = dt2.NewRow();
                foreach (DataColumn dc in fromDt.Rows)
                {
                    if (!dr[dc.ColumnName].ToString().ToUpper().Equals("REC_ID"))
                    {
                        drn[dc.ColumnName] = dr[dc.ColumnName].ToString();
                    }
                    else
                    {
                        drn["REC_ID"] = "0";
                    }
                }
            }

            ok = Update_data(userCode, dt2, ToTable, "", false);

        }
        catch (Exception err) { }
        return ok;

    }
    public DataTable BindData(String Type, String col_id, String col_name, String Tabname, String Condition, String usercode, string clientid_mst, string unitid_mst)
    {
        DataTable dt = new DataTable();
        try
        {
            dt = getdata(usercode, "select " + col_id + " ," + col_name + " from " + Tabname + " where client_id	='" + clientid_mst + "' and  " +
                "client_unit_id='" + unitid_mst + "' and type='" + Type + "' " + Condition + "");
        }
        catch { }
        return dt;
    }


    public DataTable BindMonthlyDay(string usercode)
    {
        DataTable dt = new DataTable();
        try
        {
            dt = getdata(usercode, "select '26' as Id ,'26 days' as Mday from dual union all select '30' as Id ,'30 days' as Mday from dual UNION select '31' as Id, '31 days' as Mday from dual " +
                "UNION select '01' as Id, 'Actual Days In A Month' as Mday from dual");

        }
        catch (Exception ex)
        { }
        return dt;
    }
    public decimal RoundUp(decimal toRound, int upAmt)
    {
        if (upAmt == 0)
        {
            return toRound;
        }
        if (toRound % upAmt == 0) return toRound;
        return (upAmt - toRound % upAmt) + toRound;
    }

    public decimal RoundDown(decimal toRound, int downAmt)
    {
        if (downAmt == 0)
        {
            return toRound;
        }
        if (toRound % downAmt == 0) return toRound;
        return toRound - toRound % downAmt;
    }
    public decimal RoundOnly(decimal toRound, int roundAmt)
    {
        if (roundAmt == 0)
        {
            return toRound;
        }
        if (toRound % roundAmt == 0) return toRound;
        var fractor = Decimal.Divide(Make_decimal(roundAmt.ToString()), 2);
        if ((toRound % roundAmt) >= fractor)
        {
            return toRound + (roundAmt - toRound % roundAmt);
        }
        else return toRound - (toRound % roundAmt);
    }

    public decimal Round2Decimals(decimal toRound, int decimals)
    {
        return Math.Round(toRound, 2);
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="roundtype">001 RoundOff,002 RoundUp,003 RoundDown</param>
    /// <param name="toRound"></param>
    /// <param name="roundAmt"></param>
    /// <returns></returns>
    public decimal Roundval(string roundtype, decimal toRound, int roundAmt)
    {
        decimal ress = 0;
        switch (roundtype)
        {
            case "001":
                ress = RoundOnly(toRound, roundAmt);
                break;
            case "002":
                ress = RoundUp(toRound, roundAmt);
                break;
            case "003":
                ress = RoundDown(toRound, roundAmt);
                break;
            default:
                ress = toRound;
                break;
        }
        return Math.Round(ress, 2);
    }
    /// <summary>
    /// First column of DT is treated as Value and second as Text
    /// </summary>
    /// <param name="dt"></param>
    /// <returns></returns>
    public List<SelectListItem> dt_to_selectlist(DataTable dt)
    {
        List<SelectListItem> mod1 = new List<SelectListItem>();

        if (dt.Rows.Count > 0)
        {
            if (dt.Columns.Count == 1)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr[0].ToString(), Value = dr[0].ToString() });
                }
            }
            else
            {
                foreach (DataRow dr in dt.Rows)
                {
                    mod1.Add(new SelectListItem { Text = dr[1].ToString(), Value = dr[0].ToString() });
                }
            }
        }

        return mod1;
    }

    public object RemoveNulls(object model)
    {

        foreach (PropertyInfo prop in model.GetType().GetProperties())
        {
            var type = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
            //if (type == typeof(DateTime))
            //{
            var name = prop.Name;
            if (name.ToLower() == "txtsval")
            {

            }
            var obj = prop.GetValue(model, null);
            //}
        }

        return model;
    }

    public DataTable BindAcademicYear(String usercode, string client_mst)
    {
        DataTable dt = new DataTable();
        try
        {
            dt = getdata(usercode, "select '0' as academic_year_id,'--Select--' as academic_year from dual union ALL " +
                "select academic_year_id,academic_year from add_academic_year where type='ACY' and client_id='" + client_mst + "'");
        }
        catch (Exception ex) { }
        return dt;

    }

    public string Send_Sms(string userCode, string clientid_mst, string unitid_mst, string MobileNo, string SMSTEXT, bool Unicode)
    {
        string baseurl = "", DCS = "0";
        if (Unicode) DCS = "8";
        WebClient client = new WebClient();
        mq = "select a.rec_id,a.client_name,a.master_id,a.master_name,a.master_entby as ent_by,a.master_entdate as ent_date,a.vch_date,a.status,a.master_editby edit_by,a.master_editdate as edit_date," +
               "a.client_id,a.client_unit_id,a.cont_person_name,a.cont_person_email,a.group_refrence_number,a.group_id,to_char(convert_tz(Inactive_date,'UTC','" + Gettimezone() + "'),'dd/mm/yyyy HH24:MI:SS') " +
               "from master_setting a where type='API' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'";
        DataTable dt = getdata(userCode, mq);
        if (dt.Rows.Count > 0)
        {
            userCode = userCode.ToUpper().Trim();
            switch (userCode)
            {

                case "1":
                    baseurl = "http://bulksms.sms2india.info/sendsms.php?user=lionsc&password=shiv123&sender=LionsC&countrycode=91&PhoneNumber=" + System.Uri.EscapeUriString(MobileNo) + "&text=" + System.Uri.EscapeUriString(MobileNo) + "&gateway=UES3B2ZX";
                    break;
                default:
                    baseurl = "http://login.smsmantra.online/api/mt/SendSMS?user=" + Uri.EscapeUriString(dt.Rows[0]["cont_person_name"].ToString()) +
                        "&password=" + Uri.EscapeUriString(dt.Rows[0]["cont_person_email"].ToString()) + "&senderid=" + Uri.EscapeUriString(dt.Rows[0]["group_refrence_number"].ToString()) +
                        "&channel=Trans&DCS=" + Uri.EscapeUriString(DCS) + "&flashsms=0&number=" + Uri.EscapeUriString(MobileNo) +
                        "&text=" + SMSTEXT + "&route=" + Uri.EscapeUriString(dt.Rows[0]["group_id"].ToString()) + "";
                    //baseurl = "http://login.smsmantra.online/api/mt/SendSMS?user=testingdemo&password=demo@123&senderid=krpsss&channel=Trans&DCS=8&flashsms=0&number=9999565112&text=ramrattan&route=55";


                    break;

            }
        }
        Console.Write(baseurl);
        Stream data = client.OpenRead(baseurl);
        StreamReader reader = new StreamReader(data);
        string s = reader.ReadToEnd();
        string SMSStatus = null;
        SMSStatus = s.Trim();
        if (SMSStatus.ToString().ToLower().Contains("messageid"))
        {
            SMSStatus = "SMS Sent";
        }
        else
            data.Close();
        reader.Close();
        return SMSStatus;
    }

    public string ExtractHtmlInnerText(string htmlText)
    {
        //Match any Html tag (opening or closing tags) 
        // followed by any successive whitespaces
        //consider the Html text as a single line

        Regex regex = new Regex("(<.*?>\\s*)+", RegexOptions.Singleline);

        // replace all html tags (and consequtive whitespaces) by spaces
        // trim the first and last space

        string resultText = regex.Replace(htmlText, " ").Trim();

        return resultText;
    }

    public string[] get_config(string userCode, string configID, string clientid_mst, string unitid_mst, string type)
    {
        string[] res = new string[] { "" };
        try
        {
            string abcd = seekval(userCode, "Select (param1||'!~!'||param2||'!~!'||param3||'!~!'||param4) as res from controls" +
                " where id='" + configID + "' and client_id='" + clientid_mst + "' and client_unit_id='" + unitid_mst + "'" +
                " and upper(trim(type))='" + type.Trim().ToUpper() + "'", "res");
            res = abcd.Split(new string[] { "!~!" }, StringSplitOptions.None);

        }
        catch (Exception err) { }

        return res;

    }
    public Select2PagedResult ItemsToSelect2Format(List<Item> Items, int totalAttendees)
    {
        Select2PagedResult jsonAttendees = new Select2PagedResult();
        jsonAttendees.Results = new List<Select2Result>();

        //Loop through our attendees and translate it into a text value and an id for the select list
        foreach (Item a in Items)
        {
            jsonAttendees.Results.Add(new Select2Result { id = a.Icode.ToString() + "!~!" + a.hsn + "!~!" + a.uom + "!~!" + a.stock, text = a.Iname });
        }
        //Set the total count of the results from the query.
        jsonAttendees.Total = totalAttendees;

        return jsonAttendees;
    }
    public DataTable settable(string source)
    {
        var dt = new DataTable();
        #region source
        try
        {

            bool hascols = false;

            JArray json = (JArray)JsonConvert.DeserializeObject(source);
            var rows = json;
            foreach (var row in rows)
            {
                List<Dictionary<string, object>> myList = new List<Dictionary<string, object>>();
                var objects = ((JArray)row);
                foreach (var obj in objects)
                {
                    var c1 = ((JObject)obj);
                    var name = ((JProperty)c1.First).Name;
                    var value = ((JProperty)c1.First).Value;
                    Dictionary<string, object> dic = new Dictionary<string, object>();
                    dic.Add(name, value);
                    myList.Add(dic);
                }
                if (!hascols)
                {
                    for (int i = 0; i < myList.Count; i++)
                    {
                        dt.Columns.Add(myList[i].Keys.FirstOrDefault());
                    }
                    hascols = true;
                }
                DataRow dataRow = dt.NewRow();
                foreach (Dictionary<string, object> dictionary in myList)
                {
                    foreach (string column in dictionary.Keys)
                    {
                        dataRow[column] = dictionary[column];
                    }
                }
                //if (!dataRow["lat"].ToString().Trim().Equals(""))
                //{
                dt.Rows.Add(dataRow);
                //}
            }


        }
        catch (Exception err) { }
        #endregion
        return dt;

    }
    public DataSet setDS(string mainsource)
    {
        DataSet ds = new DataSet();
        string[] tabs = Regex.Split(mainsource, "!~!~!~!");
        foreach (var source in tabs)
        {
            var dt = new DataTable();
            #region source
            try
            {

                bool hascols = false;

                JArray json = (JArray)JsonConvert.DeserializeObject(source);
                var rows = json;
                foreach (var row in rows)
                {
                    List<Dictionary<string, object>> myList = new List<Dictionary<string, object>>();
                    var objects = ((JArray)row);
                    foreach (var obj in objects)
                    {
                        var c1 = ((JObject)obj);
                        var name = ((JProperty)c1.First).Name;
                        var value = ((JProperty)c1.First).Value;
                        Dictionary<string, object> dic = new Dictionary<string, object>();
                        dic.Add(name, value);
                        myList.Add(dic);
                    }
                    if (!hascols)
                    {
                        for (int i = 0; i < myList.Count; i++)
                        {
                            dt.Columns.Add(myList[i].Keys.FirstOrDefault());
                        }
                        hascols = true;
                    }
                    DataRow dataRow = dt.NewRow();
                    foreach (Dictionary<string, object> dictionary in myList)
                    {
                        foreach (string column in dictionary.Keys)
                        {
                            dataRow[column] = dictionary[column];
                        }
                    }
                    //if (!dataRow["lat"].ToString().Trim().Equals(""))
                    //{
                    dt.Rows.Add(dataRow);
                    //}
                }


            }
            catch (Exception err) { }
            #endregion
            ds.Tables.Add(dt);
        }
        return ds;
    }

    public string imgtobase64(string imgpath)
    {
        string base64String = "";
        using (System.Drawing.Image image = System.Drawing.Image.FromFile(imgpath))
        {
            using (MemoryStream m = new MemoryStream())
            {
                image.Save(m, image.RawFormat);
                byte[] imageBytes = m.ToArray();

                // Convert byte[] to Base64 String
                base64String = Convert.ToBase64String(imageBytes);

            }
        }
        return base64String;
    }
    public DataTable RemoveEmptyRowsFromDataTable(DataTable dt)
    {
        for (int i = dt.Rows.Count - 1; i >= 0; i--)
        {
            if (dt.Rows[i][1] == DBNull.Value)
                dt.Rows[i].Delete();
        }
        dt.AcceptChanges();
        return dt;
    }

    public DataTable itemclosing(string userCode, string unitid_mst_icode, string cond)
    {
        mq = "select t.client_unit_id,t.icode,sum(nvl(t.qtyin,0)) as Received,sum(nvl(t.qtyout,0)) as Issued,sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0))" +
            " as closing from itransaction t  where length(trim(t.loc))>6 and trim(t.store)='Y' and trim(t.client_unit_id)||trim(icode) in " +
            "('" + unitid_mst_icode + "') " + cond + " group by t.icode,t.client_unit_id";
        DataTable dt = getdata(userCode, mq);
        return dt;

    }

    public DataTable locclosing(string userCode, string unitid_mst_icode_loc, string cond)
    {
        mq = "select t.client_unit_id,t.loc,t.icode,sum(nvl(t.qtyin,0)) as Received,sum(nvl(t.qtyout,0)) as Issued,sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0))" +
            " as closing from btchtrans t  where length(trim(t.loc))>6 and trim(t.store)='Y' and trim(t.client_unit_id)||trim(t.icode)||trim(t.loc) in " +
            "('" + unitid_mst_icode_loc + "')  " + cond + " group by t.icode,t.client_unit_id,t.loc";
        DataTable dt = getdata(userCode, mq);
        return dt;

    }
    //public DataTable locclosing_all(string userCode, string unitid_mst_icode, string cond)
    //{
    //    mq = "select t.client_unit_id,trim(t.loc) as loc,t.icode,sum(nvl(t.qtyin,0)) as Received,sum(nvl(t.qtyout,0)) as Issued,sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0))" +
    //        " as closing ,location_name(t.loc) as loc_name from btchtrans t  where length(trim(t.loc))>6 and trim(t.store)='Y' and trim(t.client_unit_id)||trim(icode) in " +
    //        "('" + unitid_mst_icode + "') " + cond + " group by t.icode,t.client_unit_id,t.loc having (sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)))>0 ";
    //    DataTable dt = getdata(userCode, mq);
    //    return dt;
    //}

    public DataTable locclosing_all(string userCode, string unitid_mst_icode, string cond, string cond2 = "")
    {
        //mq = "select t.client_unit_id,trim(t.loc) loc,t.icode,sum(nvl(t.qtyin,0)) Received,sum(nvl(t.qtyout,0)) Issued,sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)) closing," +
        //    "location_name(t.client_id||t.client_unit_id||t.loc) loc_name from btchtrans t " +
        //    "where length(trim(t.loc))>2 and trim(t.store)='Y' and to_date(to_char(t.vch_date, '" + Getsqldateformat() + "'), 'DD/MM/YYYY') between " +
        //    "to_date('" + cond.Split(new string[] { "!~!~!~!~!" }, StringSplitOptions.None)[0].Trim().Split(' ')[0].Trim() + "','" + Getsqldateformat() + "') and " +
        //    "to_date('" + cond.Split(new string[] { "!~!~!~!~!" }, StringSplitOptions.None)[1].Trim().Split(' ')[0].Trim() + "','" + Getsqldateformat() + "')" +
        //    "and trim(t.client_unit_id)||trim(icode) in ('" + unitid_mst_icode + "') " +
        //    "group by t.icode,t.client_id,t.client_unit_id,t.loc having (sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)))>0 ";

        mq = "select t.client_unit_id,trim(t.loc) loc,t.icode,sum(nvl(t.qtyin,0)) Received,sum(nvl(t.qtyout,0)) Issued,sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)) closing," +
            "location_name(t.client_id||t.client_unit_id||t.loc) loc_name from btchtrans t " +
            "where length(trim(t.loc))>2 and trim(t.store)='Y' and to_date(to_char(t.vch_date, '" + Getsqldateformat() + "'), 'DD/MM/YYYY') between " +
            "to_date('" + cond.Split(new string[] { "!~!~!~!~!" }, StringSplitOptions.None)[0].Trim().Split(' ')[0].Trim() + "','" + Getsqldateformat() + "') and " +
            "to_date('" + cond.Split(new string[] { "!~!~!~!~!" }, StringSplitOptions.None)[1].Trim().Split(' ')[0].Trim() + "','" + Getsqldateformat() + "')" +
            "and trim(t.client_unit_id)||trim(icode) in ('" + unitid_mst_icode + "') " + cond2 + "" +
            "group by t.icode,t.client_id,t.client_unit_id,t.loc";
        DataTable dt = getdata(userCode, mq);
        return dt;
    }

    public DataTable btchlocclosing_all(string userCode, string unitid_mst_icode, string cond)
    {
        //mq = "select t.client_unit_id,trim(t.loc) loc,t.icode,t.btchno,sum(nvl(t.qtyin,0)) Received,sum(nvl(t.qtyout,0)) Issued,sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)) closing," +
        //    "location_name(t.client_id||t.client_unit_id||t.loc) loc_name from btchtrans t " +
        //    "where length(trim(t.loc))>2 and trim(t.store)='Y' and to_date(to_char(t.vch_date, '" + Getsqldateformat() + "'), 'DD/MM/YYYY') between " +
        //    "to_date('" + cond.Split(new string[] { "!~!~!~!~!" }, StringSplitOptions.None)[0].Trim().Split(' ')[0].Trim() + "','" + Getsqldateformat() + "') and " +
        //    "to_date('" + cond.Split(new string[] { "!~!~!~!~!" }, StringSplitOptions.None)[1].Trim().Split(' ')[0].Trim() + "','" + Getsqldateformat() + "')" +
        //    "and (trim(t.client_unit_id)||trim(icode)||trim(btchno)) in ('" + unitid_mst_icode + "') " +
        //    "group by t.icode,t.client_id,t.client_unit_id,t.loc,t.btchno having (sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)))>0 ";
        if (cond.Split(new string[] { "!~!~!~!~!" }, StringSplitOptions.None)[2].Trim() == "32" || cond.Split(new string[] { "!~!~!~!~!" }, StringSplitOptions.None)[2].Trim() == "11")
        {
            mq = "select t.client_unit_id,trim(t.loc) loc,t.icode,t.btchno,sum(nvl(t.qtyin,0)) Received,sum(nvl(t.qtyout,0)) Issued,sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)) closing," +
    "location_name(t.client_id||t.client_unit_id||t.loc) loc_name from btchtrans t " +
    "where length(trim(t.loc))>2 and trim(t.store)='Y' " +
    "and (trim(t.client_unit_id)||trim(icode)) in ('" + unitid_mst_icode + "') " +
    "group by t.icode,t.client_id,t.client_unit_id,t.loc,t.btchno having (sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)))>0 ";
        }
        else
        {
            mq = "select t.client_unit_id,trim(t.loc) loc,t.icode,t.btchno,sum(nvl(t.qtyin,0)) Received,sum(nvl(t.qtyout,0)) Issued,sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)) closing," +
                "location_name(t.client_id||t.client_unit_id||t.loc) loc_name from btchtrans t " +
                "where length(trim(t.loc))>2 and trim(t.store)='Y' " +
                "and (trim(t.client_unit_id)||trim(icode)||trim(btchno)) in ('" + unitid_mst_icode + "') " +
                "group by t.icode,t.client_id,t.client_unit_id,t.loc,t.btchno having (sum(nvl(t.qtyin,0))-sum(nvl(t.qtyout,0)))>0 ";
        }
        DataTable dt = getdata(userCode, mq);
        return dt;
    }

    #region Oracle Function Group_concat
    //    CREATE OR REPLACE TYPE t_string_agg AS OBJECT
    //(
    //  g_string VARCHAR2(32767),

    //  STATIC FUNCTION ODCIAggregateInitialize(sctx IN OUT t_string_agg)
    //    RETURN NUMBER,

    //  MEMBER FUNCTION ODCIAggregateIterate(self IN OUT t_string_agg,
    //                                       value IN      VARCHAR2 )
    //     RETURN NUMBER,

    //  MEMBER FUNCTION ODCIAggregateTerminate(self IN   t_string_agg,
    //                                         returnValue OUT  VARCHAR2,
    //                                         flags IN   NUMBER)
    //    RETURN NUMBER,

    //  MEMBER FUNCTION ODCIAggregateMerge(self IN OUT t_string_agg,
    //                                     ctx2 IN      t_string_agg)
    //    RETURN NUMBER
    //);
    ///
    //SHOW ERRORS


    //CREATE OR REPLACE TYPE BODY t_string_agg IS
    //  STATIC FUNCTION ODCIAggregateInitialize(sctx IN OUT t_string_agg)
    //    RETURN NUMBER IS
    //  BEGIN
    //    sctx := t_string_agg(NULL);
    //    RETURN ODCIConst.Success;
    //    END;

    //  MEMBER FUNCTION ODCIAggregateIterate(self IN OUT t_string_agg,
    //                                       value IN      VARCHAR2 )
    //    RETURN NUMBER IS
    //  BEGIN
    //    SELF.g_string := self.g_string || ',' || value;
    //    RETURN ODCIConst.Success;
    //    END;

    //  MEMBER FUNCTION ODCIAggregateTerminate(self IN   t_string_agg,
    //                                         returnValue OUT  VARCHAR2,
    //                                         flags IN   NUMBER)
    //    RETURN NUMBER IS
    //  BEGIN
    //    returnValue := SUBSTR(SELF.g_string, 2);
    //    RETURN ODCIConst.Success;
    //    END;

    //  MEMBER FUNCTION ODCIAggregateMerge(self IN OUT t_string_agg,
    //                                     ctx2 IN      t_string_agg)
    //    RETURN NUMBER IS
    //  BEGIN
    //    SELF.g_string := SELF.g_string || ctx2.g_string;
    //    RETURN ODCIConst.Success;
    //    END;
    //END;
    ///
    //SHOW ERRORS


    //CREATE OR REPLACE FUNCTION string_agg(p_input VARCHAR2)
    //RETURN VARCHAR2
    //PARALLEL_ENABLE AGGREGATE USING t_string_agg;
    ///
    //SHOW ERRORS
    #endregion

    public List<Tmodelmain> Make_Model(string model1)
    {
        List<Tmodelmain> model = new List<Tmodelmain>();


        string tmm = model1.Replace("&", "#~#~#").Replace("+", " ").TrimStart(new char[] { '"' }).TrimEnd(new char[] { '"' }).Replace("%20", " ").Replace("%21", "!").Replace("%22", "\"").Replace("%23", "#").Replace("%24", "$").Replace("%25", "%")
               .Replace("%26", "&").Replace("%27", "'").Replace("%28", "(").Replace("%29", ")").Replace("%2A", "*")
               //.Replace("%2B", "+")
               .Replace("%2C", ",").Replace("%2D", "-").Replace("%2E", ".").Replace("%2F", "/").Replace("%3A", ":").Replace("%3B", ";")
               .Replace("%3C", "<").Replace("%3D", "=").Replace("%3E", ">").Replace("%3F", "?").Replace("%40", "@").Replace("%5B", "[")
               .Replace("%5C", "\\").Replace("%5D", "]").Replace("%5E", "^").Replace("%5F", "_").Replace("%60", "`").Replace("%7B", "{")
               .Replace("%7C", "|").Replace("%7E", "~").Replace("%7F", "").Replace("%7F", "").Replace("%A9", "©").Replace("%AE", "®");

        tmm = tmm.Replace("%0D%0A", System.Environment.NewLine);
        string[] obj = Regex.Split(tmm, "#~#~#");
        var obj2 = obj.Where(w => w.ToString().Trim().StartsWith("[")).ToArray();
        model = Array_to_Model(obj2);
        return model;
    }
    public List<Tmodelmain> Array_to_Model(string[] obj)
    {
        List<Tmodelmain> model = new List<Tmodelmain>();
        Tmodelmain tmodelmain = new Tmodelmain();
        int rows = 0;
        try
        {
            rows = obj.Select(s => Convert.ToInt32(s.ToString().Trim().Split('.')[0].ToString().Split('[')[1].Split(']')[0])).Max() + 1;


        }
        catch (Exception err)
        {

            try
            {
                rows = obj.Skip(1).Select(s => Convert.ToInt32(s.ToString().Trim().Split('.')[0].ToString().Split('[')[1].Split(']')[0])).Max() + 1;

            }
            catch
            {
                rows = 0;
            }
        }

        for (int i = 0; i < rows; i++)
        {
            tmodelmain = new Tmodelmain();
            foreach (PropertyInfo prop in typeof(Tmodelmain).GetProperties())
            {
                if (prop.Name.ToUpper().Trim().Contains("LTM"))
                {
                    var tlength = ("[" + i + "].LTM" + prop.Name.Substring(3, prop.Name.Length - 3).ToString()).Length;

                    String[] tobj = obj.Where(w => w.ToString().Trim().Split('=')[0].ToString().Contains("[" + i + "].LTM" + prop.Name.Substring(3, prop.Name.Length - 3)))
                         .Select(s => s.ToString().Substring(8, s.Length - 8)).ToArray();
                    List<Tmodelmain> ltm = new List<Tmodelmain>();
                    ltm = Array_to_Model(tobj);
                    tmodelmain.GetType().GetProperty(prop.Name)
                        .SetValue(tmodelmain, ltm, null);

                }
                //if (prop.PropertyType.ToString().Contains("Models.Files"))
                //{
                //    string ff = "";


                //    foreach (var s in obj.Where(w => w.ToString().Trim().Split('=')[0].ToString().Equals("[" + i + "]." + prop.Name)))
                //    {
                //        ff += "," + s.ToString().Split('=')[1].ToString();

                //    }
                //    string[] vals = ff.Split(',').Skip(1).ToArray();
                //    tmodelmain.GetType().GetProperty(prop.Name).SetValue(tmodelmain, vals, null);
                //}
                if (obj.Where(w => w.ToString().Trim().Split('=')[0].ToString().Equals("[" + i + "]." + prop.Name)).Count() > 0)
                {

                    if (prop.PropertyType.Name == "String[]")
                    {
                        string ff = "";


                        foreach (var s in obj.Where(w => w.ToString().Trim().Split('=')[0].ToString().Equals("[" + i + "]." + prop.Name)))
                        {
                            ff += "," + s.ToString().Split('=')[1].ToString();

                        }
                        string[] vals = ff.Split(',').Skip(1).ToArray();
                        tmodelmain.GetType().GetProperty(prop.Name).SetValue(tmodelmain, vals, null);
                    }
                    else if (prop.PropertyType.Name == "Boolean")
                    {
                        var ts = obj.Where(w => w.ToString().Trim().Split('=')[0].ToString().Equals("[" + i + "]." + prop.Name)).FirstOrDefault().ToString();
                        string[] tss = ts.Split('=').Skip(1).ToArray();
                        Boolean valuess = Convert.ToBoolean(String.Join("=", tss));
                        tmodelmain.GetType().GetProperty(prop.Name).SetValue(tmodelmain, valuess, null);
                    }
                    else
                    {
                        var ts = obj.Where(w => w.ToString().Trim().Split('=')[0].ToString().Equals("[" + i + "]." + prop.Name)).FirstOrDefault().ToString();
                        string[] tss = ts.Split('=').Skip(1).ToArray();
                        string valuess = String.Join("=", tss);
                        tmodelmain.GetType().GetProperty(prop.Name).SetValue(tmodelmain, valuess, null);
                    }
                }
            }
            model.Add(tmodelmain);
        }
        return model;
    }


    public DataSet Get_SP2Q(string userCode, String MQ1, String MQ2)
    {



        OracleConnection fCon = new OracleConnection(Multiton.connString(userCode));
        fCon.Open();
        OracleCommand cmd = new OracleCommand("SP_FOO", fCon);
        cmd.CommandType = CommandType.StoredProcedure;
        OracleParameter mq1 = new OracleParameter();
        mq1.ParameterName = "mq1";
        mq1.Value = MQ1;
        mq1.OracleDbType = OracleDbType.Varchar2;
        mq1.Direction = ParameterDirection.Input;
        OracleParameter mq2 = new OracleParameter();
        mq2.ParameterName = "mq2";
        mq2.Value = MQ2;
        mq2.OracleDbType = OracleDbType.Varchar2;
        mq2.Direction = ParameterDirection.Input;
        OracleParameter Cur1 = new OracleParameter();
        Cur1.ParameterName = "cursor1";
        Cur1.OracleDbType = OracleDbType.RefCursor;
        Cur1.Direction = ParameterDirection.Output;
        OracleParameter Cur2 = new OracleParameter();
        Cur2.ParameterName = "cursor2";
        Cur2.OracleDbType = OracleDbType.RefCursor;
        Cur2.Direction = ParameterDirection.Output;
        cmd.Parameters.Add(mq1);
        cmd.Parameters.Add(mq2);
        cmd.Parameters.Add(Cur1);
        cmd.Parameters.Add(Cur2);
        //Return the filled Dataset
        DataSet dataSet = new DataSet();
        var adapter = new OracleDataAdapter(cmd);
        try
        {
            adapter.Fill(dataSet);
        }
        catch (Exception err)
        {
        }
        fCon.Close();
        fCon.Dispose();
        return dataSet;
    }

    public DataTable ToDataTable<T>(List<T> items)
    {
        DataTable dataTable = new DataTable(typeof(T).Name);
        //Get all the properties
        PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
        foreach (PropertyInfo prop in Props)
        {
            //Setting column names as Property names
            dataTable.Columns.Add(prop.Name);
        }
        foreach (T item in items)
        {
            var values = new object[Props.Length];
            for (int i = 0; i < Props.Length; i++)
            {
                //inserting property values to datatable rows
                values[i] = Props[i].GetValue(item, null);
            }
            dataTable.Rows.Add(values);
        }
        //put a breakpoint here and check datatable
        return dataTable;
    }
    public double GetDistanceBetweenPoints(double lat1, double long1, double lat2, double long2)
    {
        double distance = 0;

        double dLat = (lat2 - lat1) / 180 * Math.PI;
        double dLong = (long2 - long1) / 180 * Math.PI;

        double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2)
                    + Math.Cos(lat2) * Math.Sin(dLong / 2) * Math.Sin(dLong / 2);
        double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));

        //Calculate radius of earth
        // For this you can assume any of the two points.
        double radiusE = 6378135; // Equatorial radius, in metres
        double radiusP = 6356750; // Polar Radius

        //Numerator part of function
        double nr = Math.Pow(radiusE * radiusP * Math.Cos(lat1 / 180 * Math.PI), 2);
        //Denominator part of the function
        double dr = Math.Pow(radiusE * Math.Cos(lat1 / 180 * Math.PI), 2)
                        + Math.Pow(radiusP * Math.Sin(lat1 / 180 * Math.PI), 2);
        double radius = Math.Sqrt(nr / dr);

        //Calaculate distance in metres.
        distance = radius * c;
        string dist = distance.ToString();
        if (dist.Equals("NaN"))
        { distance = 0; }
        return distance;
    }

    public bool Tally_Sync(string XMLData)
    {

        bool res = false;
        //string XMLData = CreateXMLParty("abc", "VENDOR 6", "-", "-", "RAM@GMAIL.COM", "00000", "0.4", "10", "Sundry Creditors", "-", "0", "0");
        //string XMLData = PurchaseVoucher("1-Apr-2019", "00002", "00120", "VENDOR 3", "004", "100", "-100");
        //XMLData = JV("Customer 1", "Salary and Wages", "1-Apr-2019", "004", "525", "009", "24-04-2019", "My Naration from Code");


        HttpWebRequest TallyRequest;
        string RequestXML = "";
        RequestXML = XMLData; // Called XML Function
        TallyRequest = (HttpWebRequest)WebRequest.Create("http://localhost:9000");
        TallyRequest.UserAgent = ".NET Framework Example Client";
        TallyRequest.Method = "POST";
        string postData = RequestXML;
        byte[] byteArray = Encoding.UTF8.GetBytes(postData);
        TallyRequest.ContentType = "application/x-www-form-urlencoded";
        TallyRequest.ContentLength = byteArray.Length;
        try
        {
            Stream dataStream = TallyRequest.GetRequestStream();
            dataStream.Write(byteArray, 0, byteArray.Length);
            dataStream.Close();
            HttpWebResponse response1 = (HttpWebResponse)TallyRequest.GetResponse();
            string Response = response1.StatusDescription.ToString();
            dataStream = response1.GetResponseStream();
            StreamReader reader = new StreamReader(dataStream);
            string responseFromTallyServer = reader.ReadToEnd().ToString();
            bool ErrorCheck = false;
            ErrorCheck = responseFromTallyServer.Contains("<LINEERROR>");
            bool BA;
            string qry = responseFromTallyServer;
            BA = qry.Contains("<ERRORS>1</ERRORS>");
            if (!ErrorCheck & !BA)
            {
                DataSet TallyResponseDataSet = new DataSet();
                TallyResponseDataSet.ReadXml(new StringReader(responseFromTallyServer));
                string MasterId = "";
                qry = "";
                qry = responseFromTallyServer;
                var Tem = qry.IndexOf("<LASTVCHID>") + "<LASTVCHID>".Length;
                var Tem1 = qry.IndexOf("</LASTVCHID>");
                MasterId = qry.Substring(System.Convert.ToInt32(Tem), System.Convert.ToInt32(Tem1 - Tem)).Trim();
                reader.Close();
                dataStream.Close();
                response1.Close();
                byteArray = null;
                Response = null;
                responseFromTallyServer = null;
                Response = null;
                dataStream = null;
                res = true;
            }
            else
            {
                res = false;
                //MsgBox("Failed to POST " + responseFromTallyServer + " ", MsgBoxStyle.Critical);
            }

        }
        catch (Exception ex)
        {
            res = false;
            //Interaction.MsgBox(ex.Message.ToString(), MsgBoxStyle.Critical);
        }
        return res;

    }
    public string JV_Multi_2(string Company, string Vch_Type, DataTable dtV)
    {
        string xmlstc = "<ENVELOPE>" + "\r\n";
        try
        {

            xmlstc = xmlstc + "<HEADER>" + "\r\n";
            xmlstc = xmlstc + "<TALLYREQUEST>Import Data</TALLYREQUEST>" + "\r\n";
            xmlstc = xmlstc + "</HEADER>" + "\r\n";
            xmlstc = xmlstc + "<BODY>" + "\r\n";
            xmlstc = xmlstc + "<IMPORTDATA>" + "\r\n";
            xmlstc = xmlstc + "<REQUESTDESC>" + "\r\n";
            xmlstc = xmlstc + "<REPORTNAME>Vouchers</REPORTNAME>" + "\r\n";
            xmlstc = xmlstc + "<STATICVARIABLES>" + "\r\n";
            xmlstc = xmlstc + "<SVCURRENTCOMPANY>" + Company + "</SVCURRENTCOMPANY>" + "\r\n";
            xmlstc = xmlstc + "</STATICVARIABLES>" + "\r\n";
            xmlstc = xmlstc + "</REQUESTDESC>" + "\r\n";
            xmlstc = xmlstc + "<REQUESTDATA>" + "\r\n";
            xmlstc = xmlstc + "<TALLYMESSAGE xmlns:UDF=" + "\"" + "TallyUDF" + "\" >" + "\r\n";
            xmlstc = xmlstc + "<VOUCHER VCHTYPE=" + "\"" + "" + Vch_Type + "" + "\" >" + "\r\n";
            xmlstc = xmlstc + "<DATE>" + ((DateTime)dtV.Rows[0]["vch_date"]).ToString("dd-MMM-YYYY") + "</DATE>" + "\r\n";
            xmlstc = xmlstc + "<VOUCHERTYPENAME>" + Vch_Type + "</VOUCHERTYPENAME>" + "\r\n";
            xmlstc = xmlstc + "<NARRATION> " + dtV.Rows[0]["totremark"].ToString() + "</NARRATION> " + "\r\n";
            xmlstc = xmlstc + "<VOUCHERNUMBER>" + dtV.Rows[0]["vch_num"].ToString() + "</VOUCHERNUMBER>" + "\r\n";
            xmlstc = xmlstc + "<REFERENCE>" + dtV.Rows[0]["invno"].ToString() + "</REFERENCE>" + "\r\n";


            foreach (DataRow dr in dtV.Rows)
            {

                if (Make_decimal(dtV.Rows[0]["dramount"].ToString()) > 0)
                {
                    xmlstc = xmlstc + "<ALLLEDGERENTRIES.LIST>" + "\r\n";
                    xmlstc = xmlstc + "<LEDGERNAME>" + dtV.Rows[0]["tally_name"].ToString() + "</LEDGERNAME>" + "\r\n";
                    xmlstc = xmlstc + "<ISDEEMEDPOSITIVE>Yes</ISDEEMEDPOSITIVE>" + "\r\n";
                    xmlstc = xmlstc + "<LEDGERFROMITEM>No</LEDGERFROMITEM>" + "\r\n";
                    xmlstc = xmlstc + "<REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>" + "\r\n";
                    xmlstc = xmlstc + "<ISPARTYLEDGER>No</ISPARTYLEDGER>" + "\r\n";
                    xmlstc = xmlstc + "<AMOUNT>-" + dtV.Rows[0]["dramount"].ToString() + "</AMOUNT>" + "\r\n";
                    xmlstc = xmlstc + "</ALLLEDGERENTRIES.LIST>" + "\r\n";
                }
                else
                {

                    xmlstc = xmlstc + "<ALLLEDGERENTRIES.LIST>" + "\r\n";
                    xmlstc = xmlstc + "<LEDGERNAME>" + dtV.Rows[0]["tally_name"].ToString() + "</LEDGERNAME>" + "\r\n";
                    xmlstc = xmlstc + "<ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>" + "\r\n";
                    xmlstc = xmlstc + "<LEDGERFROMITEM>No</LEDGERFROMITEM>" + "\r\n";
                    xmlstc = xmlstc + "<REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>" + "\r\n";
                    xmlstc = xmlstc + "<ISPARTYLEDGER>No</ISPARTYLEDGER>" + "\r\n";
                    xmlstc = xmlstc + "<AMOUNT>-" + dtV.Rows[0]["cramount"].ToString() + "</AMOUNT>" + "\r\n";
                    xmlstc = xmlstc + "</ALLLEDGERENTRIES.LIST>" + "\r\n";
                }
            }



            xmlstc = xmlstc + "</VOUCHER>" + "\r\n";
            xmlstc = xmlstc + "</TALLYMESSAGE>" + "\r\n";
            xmlstc = xmlstc + "</REQUESTDATA>" + "\r\n";
            xmlstc = xmlstc + "</IMPORTDATA>" + "\r\n";
            xmlstc = xmlstc + "</BODY>" + "\r\n";
            xmlstc = xmlstc + "</ENVELOPE>" + "\r\n";

        }
        catch (Exception ex)
        {
            //MessageBox.Show(ex.Message, ex.StackTrace);
        }
        return xmlstc;
    }

    public string GetError(Exception exception)
    {
        int lineno = 0;
        int i = 0;
        string fName = "";
        StackFrame fram;
        try
        {
            do
            {
                fram = new System.Diagnostics.StackTrace(exception, true).GetFrame(i);
                lineno = fram.GetFileLineNumber();
                i++;
            }
            while (lineno < 1);
            fName = fram.GetFileName().Split('\\').Last();
        }
        catch (Exception err)
        {
            return exception.Message;
        }
        return lineno + " in File " + fName;
    }
    public string GetWebBrowserName()
    {
        string WebBrowserName = string.Empty;
        try
        {
            WebBrowserName = HttpContext.Current.Request.Browser.Browser;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
        return WebBrowserName;
    }
    public bool IsDuplicate()
    {
        bool duplicate = false;
        Process[] procsChrome = Process.GetProcessesByName("chrome");
        if (procsChrome.Length <= 0)
        {
            Console.WriteLine("Chrome is not running");
        }
        else
        {
            foreach (Process proc in procsChrome)
            {
                // the chrome process must have a window 
                if (proc.MainWindowHandle == IntPtr.Zero)
                {
                    continue;
                }
                // to find the tabs we first need to locate something reliable - the 'New Tab' button 
                AutomationElement root = AutomationElement.FromHandle(proc.MainWindowHandle);
                Condition condNewTab = new PropertyCondition(AutomationElement.NameProperty, "New Tab");
                AutomationElement elmNewTab = root.FindFirst(TreeScope.Descendants, condNewTab);
                // get the tabstrip by getting the parent of the 'new tab' button 
                TreeWalker treewalker = TreeWalker.ControlViewWalker;
                AutomationElement elmTabStrip = treewalker.GetParent(elmNewTab);
                // loop through all the tabs and get the names which is the page title 
                Condition condTabItem = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.TabItem);
                foreach (AutomationElement tabitem in elmTabStrip.FindAll(TreeScope.Children, condTabItem))
                {
                    Console.WriteLine(tabitem.Current.Name);
                }
            }
        }
        return duplicate;
    }
    public List<string> Html_to_words(string htmlStr)
    {


        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(htmlStr);
        List<string> words = doc.DocumentNode.DescendantNodes()
                .Where(n => n.NodeType == HtmlNodeType.Text
                  && !string.IsNullOrWhiteSpace(HtmlEntity.DeEntitize(n.InnerText))
                  && n.ParentNode.Name != "style" && n.ParentNode.Name != "script")
                .Select(n => HtmlEntity.DeEntitize(n.InnerText).Trim())
                .Where(s => s.Length > 2).ToList();

        return words;
    }
    public Stream PassPdf(Stream PdfStream, String PassWord)
    {
        PdfReader reader = new PdfReader(PdfStream);
        byte[] bytes;
        using (MemoryStream output = new MemoryStream())
        {
            //string PassWord = "pass@123";
            PdfEncryptor.Encrypt(reader, output, true, PassWord, PassWord, PdfWriter.ALLOW_SCREENREADERS);
            bytes = output.ToArray();
        }
        Stream stream = new MemoryStream(bytes);
        return stream;
    }


}

